id,project,test_name,full_code,label,category
84634,apache_zookeeper,GetAllChildrenNumberTest.setUp,"    @BeforeEach
    public void setUp() throws Exception {
        super.setUp();

        zk = createClient();
        generatePaths(PERSISTENT_CNT, EPHEMERAL_CNT);
    }
",non-flaky,5
89307,apache_samza,TestKafkaSystemAdminWithMock.testGetSystemStreamMetaDataWithInvalidTopic,"  @Test
  public void testGetSystemStreamMetaDataWithInvalidTopic() {
    Map<String, SystemStreamMetadata> metadataMap =
        kafkaSystemAdmin.getSystemStreamMetadata(ImmutableSet.of(INVALID_TOPIC));
    assertEquals(""empty metadata for invalid topic"", metadataMap.size(), 0);
  }
",non-flaky,5
95656,togglz_togglz,TestFeatureManagerTest.featureShouldBeInactiveByDefault,"    @Test
    public void featureShouldBeInactiveByDefault() {
        assertFalse(manager.isActive(MyFeatures.ONE));
    }
",non-flaky,5
38276,palantir_atlasdb,AbstractTransactionTest.testEmptyValue,"    @Test
    public void testEmptyValue() {
        putDirect(""row1"", ""col1"", ""v1"", 0);
        Pair<String, Long> pair = getDirect(""row1"", ""col1"", 1);
        assertEquals(0L, (long)pair.getRhSide());
        assertEquals(""v1"", pair.getLhSide());

        putDirect(""row1"", ""col1"", """", 2);
        pair = getDirect(""row1"", ""col1"", 2);
        assertEquals(0L, (long)pair.getRhSide());
        assertEquals(""v1"", pair.getLhSide());

        pair = getDirect(""row1"", ""col1"", 3);
        assertEquals(2L, (long)pair.getRhSide());
        assertEquals("""", pair.getLhSide());
    }
",non-flaky,5
43056,trinodb_trino,BaseConnectorTest.testJoinWithEmptySides,"    @Test(timeOut = 300_000, dataProvider = ""joinDistributionTypes"")
    public void testJoinWithEmptySides(JoinDistributionType joinDistributionType)
    {
        Session session = noJoinReordering(joinDistributionType);
        // empty build side
        assertQuery(session, ""SELECT count(*) FROM nation JOIN region ON nation.regionkey = region.regionkey AND region.name = ''"", ""VALUES 0"");
        assertQuery(session, ""SELECT count(*) FROM nation JOIN region ON nation.regionkey = region.regionkey AND region.regionkey < 0"", ""VALUES 0"");
        // empty probe side
        assertQuery(session, ""SELECT count(*) FROM region JOIN nation ON nation.regionkey = region.regionkey AND region.name = ''"", ""VALUES 0"");
        assertQuery(session, ""SELECT count(*) FROM nation JOIN region ON nation.regionkey = region.regionkey AND region.regionkey < 0"", ""VALUES 0"");
    }
",non-flaky,5
97962,ReactiveX_RxJava,ObservableTests.fromArray,"    @Test
    public void fromArray() {
        String[] items = new String[] { ""one"", ""two"", ""three"" };
        assertEquals(new Integer(3), Observable.from(items).count().toBlockingObservable().single());
        assertEquals(""two"", Observable.from(items).skip(1).take(1).toBlockingObservable().single());
        assertEquals(""three"", Observable.from(items).takeLast(1).toBlockingObservable().single());
    }
",non-flaky,5
104694,apache_pinot,LLCRealtimeClusterIntegrationTest.testConsumerDirectoryExists,"  @Test
  public void testConsumerDirectoryExists() {
    File consumerDirectory = new File(CONSUMER_DIRECTORY, ""mytable_REALTIME"");
    assertEquals(consumerDirectory.exists(), _isConsumerDirConfigured,
        ""The off heap consumer directory does not exist"");
  }
",non-flaky,5
77440,opensearch-project_OpenSearch,DependencyLicensesTaskTests.givenProjectWithDependencyButNoLicenseFileThenShouldReturnException,"    @Test
    public void givenProjectWithDependencyButNoLicenseFileThenShouldReturnException() throws Exception {
        expectedException.expect(GradleException.class);
        expectedException.expectMessage(containsString(""Missing LICENSE for ""));

        project.getDependencies().add(""compile"", project.getDependencies().localGroovy());

        getLicensesDir(project).mkdir();
        updateShas.updateShas();
        task.get().checkDependencies();
    }
",non-flaky,5
118719,netty_netty,SocketTest.testDoubleCloseDoesNotThrow,"    @Test
    public void testDoubleCloseDoesNotThrow() throws IOException {
        Socket socket = Socket.newSocketStream();
        socket.close();
        socket.close();
    }
",non-flaky,5
26735,MundaneImmortal_pair-distribution-app,DeveloperTest.testId,"	@Test
	public void testId() {
		Developer developer = new Developer(""developerId"");
		
		assertThat(developer.getId(), is(""developerId""));
	}
",non-flaky,5
77536,dropwizard_dropwizard,ResourceTestRuleWithGrizzlyTest.testClientSupportsPatchMethod,"    @Test
    public void testClientSupportsPatchMethod() {
        final String resp = resourceTestRule.target(""test"")
            .request()
            .method(""PATCH"", Entity.text(""Patch is working""), String.class);
        assertThat(resp).isEqualTo(""Patch is working"");
    }
",non-flaky,5
122576,vespa-engine_vespa,FileSnapshotTest.fileDoesNotExist,"    @Test
    public void fileDoesNotExist() {
        assertFalse(fileSnapshot.exists());
        assertFalse(fileSnapshot.attributes().isPresent());
        assertFalse(fileSnapshot.content().isPresent());
        assertEquals(path.toPath(), fileSnapshot.path());
    }
",non-flaky,5
133911,cdancy_jenkins-rest,SystemApiLiveTest.testAlreadyCanceledQuietDown,"    @Test(dependsOnMethods = ""testCancelQuietDown"")
    public void testAlreadyCanceledQuietDown() {
        RequestStatus success = api().cancelQuietDown();
        assertNotNull(success);
        assertTrue(success.value());
    }
",non-flaky,5
162766,OpenAPITools_openapi-generator,EnumTestTest.enumStringRequiredTest,"    @Test
    public void enumStringRequiredTest() {
        // TODO: test enumStringRequired
    }
",non-flaky,5
118709,netty_netty,SmtpResponseDecoderTest.testDecodeInvalidSeparator,"    @Test(expected = DecoderException.class)
    public void testDecodeInvalidSeparator() {
        EmbeddedChannel channel = newChannel();
        assertTrue(channel.writeInbound(newBuffer(""200:Ok\r\n"")));
    }
",non-flaky,5
30987,camunda-cloud_zeebe,ObjectMappingTest.shouldDeserializePOJO,"  @Test
  public void shouldDeserializePOJO() {
    // given
    final POJO pojo = new POJO();

    final DirectBuffer buffer =
        encodeMsgPack(
            (w) -> {
              w.writeMapHeader(7);

              w.writeString(wrapString(""enumProp""));
              w.writeString(wrapString(POJOEnum.BAR.toString()));

              w.writeString(wrapString(""binaryProp""));
              w.writeBinary(BUF1);

              w.writeString(wrapString(""stringProp""));
              w.writeString(BUF2);

              w.writeString(wrapString(""packedProp""));
              w.writeRaw(MSGPACK_BUF1);

              w.writeString(wrapString(""longProp""));
              w.writeInteger(88888L);

              w.writeString(wrapString(""intProp""));
              w.writeInteger(123L);

              w.writeString(wrapString(""objectProp""));
              w.writeRaw(MSGPACK_BUF1);
            });

    // when
    pojo.wrap(buffer);

    // then
    assertThat(pojo.getEnum()).isEqualByComparingTo(POJOEnum.BAR);
    assertThat(pojo.getLong()).isEqualTo(88888L);
    assertThat(pojo.getInt()).isEqualTo(123);
    assertThatBuffer(pojo.getPacked()).hasBytes(MSGPACK_BUF1);
    assertThatBuffer(pojo.getBinary()).hasBytes(BUF1);
    assertThatBuffer(pojo.getString()).hasBytes(BUF2);
    assertThat(pojo.nestedObject().getLong()).isEqualTo(123123L);
  }
",non-flaky,5
170543,eclipse_jetty.project,TestServletAnnotations.testWebServletAnnotationNotOverride,"    @Test
    public void testWebServletAnnotationNotOverride() throws Exception
    {
        //if the existing servlet mapping TO A DIFFERENT SERVLET IS NOT from a default descriptor we
        //DO NOT allow the annotation to replace the mapping
        WebAppContext wac = new WebAppContext();
        ServletHolder servlet = new ServletHolder();
        servlet.setClassName(""org.eclipse.jetty.servlet.FooServlet"");
        servlet.setName(""foo"");
        wac.getServletHandler().addServlet(servlet);
        ServletMapping m = new ServletMapping();
        m.setPathSpec(""/"");
        m.setServletName(""foo"");
        wac.getServletHandler().addServletMapping(m);

        WebServletAnnotation annotation = new WebServletAnnotation(wac, ""org.eclipse.jetty.annotations.ServletD"", null);
        annotation.apply();

        ServletMapping[] resultMappings = wac.getServletHandler().getServletMappings();
        assertEquals(2, resultMappings.length);
        for (ServletMapping r : resultMappings)
        {
            if (r.getServletName().equals(""DServlet""))
            {
                assertEquals(2, r.getPathSpecs().length);
            }
            else if (r.getServletName().equals(""foo""))
            {
                assertEquals(1, r.getPathSpecs().length);
            }
            else
                fail(""Unexpected servlet name: "" + r);
        }
    }
",non-flaky,5
26721,MundaneImmortal_pair-distribution-app,OpsPairsCombinationsTest.testGetPairsReturnOnlyDevPairs,"	@Test
	public void testGetPairsReturnOnlyDevPairs() {
		List<DayPairs> pairsListFromDevs = getPairsListFromDevs(getStandardDevs(), false);
		Pair opsPair = pairsListFromDevs.get(0).getPairByTrack(""track1"");
		opsPair.setOpsPair(true);
		
		List<Pair> pairs = new OpsPairCombinations(pairsListFromDevs).getPairs();
		
		assertThat(pairs.contains(opsPair), is(true));
		assertThat(pairs.size(), is(1));
	}
",non-flaky,5
175756,GoogleCloudPlatform_google-cloud-eclipse,PluginXmlTest.testLimitedVisibility,"  @Test
  public void testLimitedVisibility() {
    NodeList pages = getDocument().getElementsByTagName(""page"");
    Assert.assertEquals(2, pages.getLength());
    NodeList enabledWhen = getDocument().getElementsByTagName(""enabledWhen"");
    Assert.assertEquals(4, enabledWhen.getLength());
    NodeList tests = getDocument().getElementsByTagName(""test"");
    Assert.assertEquals(4, tests.getLength());
    NodeList adapts = getDocument().getElementsByTagName(""adapt"");
    Assert.assertEquals(4, adapts.getLength());

    for (int i = 0; i < enabledWhen.getLength(); i++) {
      Element element = (Element) enabledWhen.item(i);
      Node parent = element.getParentNode();
      assertThat(parent.getNodeName(), either(is(""page"")).or(is(""handler"")));
    }

    Element standardAdapt = (Element) adapts.item(0);
    verifyAdapt(standardAdapt, AppEngineStandardFacet.ID);
    Element flexAdapt = (Element) adapts.item(1);
    verifyAdapt(flexAdapt, AppEngineFlexFacet.ID);
  }
",non-flaky,5
137133,spring-projects_spring-framework,AbstractMethodMetadataTests.getAllAnnotationAttributesReturnsAllAttributes,"	@Test
	public void getAllAnnotationAttributesReturnsAllAttributes() {
		MultiValueMap<String, Object> attributes = getTagged(
				WithMetaAnnotationAttributes.class).getAllAnnotationAttributes(
						AnnotationAttributes.class.getName());
		assertThat(attributes).containsOnlyKeys(""name"", ""size"");
		assertThat(attributes.get(""name"")).containsExactlyInAnyOrder(""m1"", ""m2"");
		assertThat(attributes.get(""size"")).containsExactlyInAnyOrder(1, 2);
	}
",non-flaky,5
38286,palantir_atlasdb,AbstractTransactionTest.testRangePagingBatchesReverse,"    @Test
    public void testRangePagingBatchesReverse() {
        if (!supportsReverse()) {
            return;
        }
        int totalPuts = 101;
        for (int i = 0 ; i < totalPuts ; i++) {
            putDirect(""row""+i, ""col1"", ""v1"", 0);
        }

        Map<RangeRequest, TokenBackedBasicResultsPage<RowResult<Value>, byte[]>> ranges = keyValueService.getFirstBatchForRanges(TEST_TABLE, Iterables.limit(Iterables.cycle(RangeRequest.reverseBuilder().batchHint(1000).build()), 100), 1);
        assertEquals(1, ranges.keySet().size());
        assertEquals(totalPuts, ranges.values().iterator().next().getResults().size());
    }
",non-flaky,5
97672,vojtechhabarta_typescript-generator,SpringTest.testGenerics,"    @Test
    public void testGenerics() {
        final Settings settings = TestUtils.settings();
        settings.outputFileType = TypeScriptFileType.implementationFile;
        settings.generateSpringApplicationClient = true;
        final String output = new TypeScriptGenerator(settings).generateTypeScript(Input.from(Controller6.class));
        Assert.assertTrue(output.contains(""doSomething(input: number[]): RestResponse<{ [P in Controller6Enum]?: any }[]>""));
        Assert.assertTrue(output.contains(""type Controller6Enum""));
    }
",non-flaky,5
308,apache_hadoop,TestRpcProgramNfs3.testMkdir,"  @Test(timeout = 60000)
  public void testMkdir() throws Exception {//FixME
    HdfsFileStatus status = nn.getRpcServer().getFileInfo(testdir);
    long dirId = status.getFileId();
    int namenodeId = Nfs3Utils.getNamenodeId(config);
    XDR xdr_req = new XDR();
    FileHandle handle = new FileHandle(dirId, namenodeId);
    MKDIR3Request req = new MKDIR3Request(handle, ""fubar1"", new SetAttr3());
    req.serialize(xdr_req);
    
    // Attempt to mkdir by an unprivileged user should fail.
    MKDIR3Response response1 = nfsd.mkdir(xdr_req.asReadOnlyWrap(),
        securityHandlerUnpriviledged,
        new InetSocketAddress(""localhost"", 1234));
    assertEquals(""Incorrect return code:"", Nfs3Status.NFS3ERR_ACCES,
        response1.getStatus());

    XDR xdr_req2 = new XDR();
    MKDIR3Request req2 = new MKDIR3Request(handle, ""fubar2"", new SetAttr3());
    req2.serialize(xdr_req2);
    
    // Attempt to mkdir by a privileged user should pass.
    MKDIR3Response response2 = nfsd.mkdir(xdr_req2.asReadOnlyWrap(),
        securityHandler, new InetSocketAddress(""localhost"", 1234));
    assertEquals(""Incorrect return code:"", Nfs3Status.NFS3_OK,
        response2.getStatus());
  }
",non-flaky,5
76990,Tencent_Firestorm,ShuffleWithRssClientTest.writeReadTest,"  @Test
  public void writeReadTest() throws Exception {
    String testAppId = ""writeReadTest"";
    shuffleWriteClientImpl.registerShuffle(shuffleServerInfo1,
        testAppId, 0, Lists.newArrayList(new PartitionRange(0, 0)));
    shuffleWriteClientImpl.registerShuffle(shuffleServerInfo2,
        testAppId, 0, Lists.newArrayList(new PartitionRange(0, 0)));
    Map<Long, byte[]> expectedData = Maps.newHashMap();
    Roaring64NavigableMap blockIdBitmap = Roaring64NavigableMap.bitmapOf();
    Roaring64NavigableMap taskIdBitmap = Roaring64NavigableMap.bitmapOf(0);

    List<ShuffleBlockInfo> blocks = createShuffleBlockList(
        0, 0, 0, 3, 25, blockIdBitmap,
        expectedData, Lists.newArrayList(shuffleServerInfo1, shuffleServerInfo2));
    shuffleWriteClientImpl.sendShuffleData(testAppId, blocks);
    // send 1st commit, finish commit won't be sent to Shuffle server and data won't be persisted to disk
    boolean commitResult = shuffleWriteClientImpl
        .sendCommit(Sets.newHashSet(shuffleServerInfo1, shuffleServerInfo2), testAppId, 0, 2);
    assertTrue(commitResult);

    ShuffleReadClientImpl readClient = new ShuffleReadClientImpl(StorageType.LOCALFILE.name(), testAppId, 0, 0, 100, 1,
        10, 1000, """", blockIdBitmap, taskIdBitmap,
        Lists.newArrayList(shuffleServerInfo1, shuffleServerInfo2), null);

    try {
      readClient.readShuffleBlockData();
      fail(EXPECTED_EXCEPTION_MESSAGE);
    } catch (Exception e) {
      assertTrue(e.getMessage().contains(""Failed to read shuffle index for""));
    }
    readClient.close();

    // send 2nd commit, data will be persisted to disk
    commitResult = shuffleWriteClientImpl
        .sendCommit(Sets.newHashSet(shuffleServerInfo1, shuffleServerInfo2), testAppId, 0, 2);
    assertTrue(commitResult);
    readClient = new ShuffleReadClientImpl(StorageType.LOCALFILE.name(), testAppId, 0, 0, 100, 1,
        10, 1000, """", blockIdBitmap, taskIdBitmap,
        Lists.newArrayList(shuffleServerInfo1, shuffleServerInfo2), null);
    validateResult(readClient, expectedData);
    readClient.checkProcessedBlockIds();
    readClient.close();

    // commit will be failed because of fakeIp
    commitResult = shuffleWriteClientImpl.sendCommit(Sets.newHashSet(new ShuffleServerInfo(
        ""127.0.0.1-20001"", ""fakeIp"", SHUFFLE_SERVER_PORT)), testAppId, 0, 2);
    assertFalse(commitResult);

    // wait resource to be deleted
    Thread.sleep(6000);

    // commit is ok, but finish shuffle rpc will failed because resource was deleted
    commitResult = shuffleWriteClientImpl
        .sendCommit(Sets.newHashSet(shuffleServerInfo1, shuffleServerInfo2), testAppId, 0, 2);
    assertFalse(commitResult);
  }
",non-flaky,5
162727,OpenAPITools_openapi-generator,XmlItemTest.namespaceWrappedArrayTest,"    @Test
    public void namespaceWrappedArrayTest() {
        // TODO: test namespaceWrappedArray
    }
",non-flaky,5
26831,wildfly_wildfly,JndiPermissionTestCase.testSerialization,"    @Test
    public void testSerialization() {
        final JndiPermission jndiPermission = new JndiPermission(""foo/blap/-"", ""bind,lookup"");
        assertEquals(jndiPermission, ((SerializedJndiPermission)jndiPermission.writeReplace()).readResolve());
    }
",non-flaky,5
179484,abel533_Mapper,SafeUpdateByMethodTest.testSafeUpdateByExample,"    @Test(expected = PersistenceException.class)
    public void testSafeUpdateByExample() {
        SqlSession sqlSession = getSqlSession();
        try {
            CountryMapper mapper = sqlSession.getMapper(CountryMapper.class);
            mapper.updateByExampleSelective(new Country(), new Example(Country.class));
        } finally {
            sqlSession.close();
        }
    }
",non-flaky,5
86108,graylog2_graylog2-server,DBEventProcessorStateServiceTest.deleteByEventProcessorId,"    @Test
    public void deleteByEventProcessorId() {
        assertThat(stateService.deleteByEventDefinitionId(""54e3deadbeefdeadbeefaff3"")).isEqualTo(1);
        assertThat(stateService.deleteByEventDefinitionId(""nope"")).isEqualTo(0);
    }
",non-flaky,5
106643,Alluxio_alluxio,AlluxioFuseFileSystemTest.createWithLengthLimit,"  @Test
  public void createWithLengthLimit() throws Exception {
    String c256 = String.join("""", Collections.nCopies(16, ""0123456789ABCDEF""));
    mFileInfo.flags.set(O_WRONLY.intValue());
    assertEquals(-ErrorCodes.ENAMETOOLONG(),
        mFuseFs.create(""/foo/"" + c256, 0, mFileInfo));
  }
",non-flaky,5
91432,strapdata_elassandra,BasicWatcherTests.testModifyWatches,"    @TestLogging(""org.elasticsearch.xpack.watcher:DEBUG"")
    public void testModifyWatches() throws Exception {
        createIndex(""idx"");
        WatcherSearchTemplateRequest searchRequest = templateRequest(searchSource().query(matchAllQuery()), ""idx"");

        WatchSourceBuilder source = watchBuilder()
                .trigger(schedule(interval(""5s"")))
                .input(searchInput(searchRequest))
                .addAction(""_id"", indexAction(""idx"", ""action""));

        watcherClient().preparePutWatch(""_name"")
                .setSource(source.condition(new CompareCondition(""ctx.payload.hits.total"", CompareCondition.Op.EQ, 1L)))
                .get();

        timeWarp().clock().fastForwardSeconds(5);
        timeWarp().trigger(""_name"");
        assertWatchWithMinimumPerformedActionsCount(""_name"", 0, false);

        watcherClient().preparePutWatch(""_name"")
                .setSource(source.condition(new CompareCondition(""ctx.payload.hits.total"", CompareCondition.Op.EQ, 0L)))
                .get();

        timeWarp().clock().fastForwardSeconds(5);
        timeWarp().trigger(""_name"");
        refresh();
        assertWatchWithMinimumPerformedActionsCount(""_name"", 1, false);

        watcherClient().preparePutWatch(""_name"")
                .setSource(source
                        .trigger(schedule(Schedules.cron(""0/1 * * * * ? 2020"")))
                        .condition(new CompareCondition(""ctx.payload.hits.total"", CompareCondition.Op.EQ, 0L)))
                .get();

        timeWarp().clock().fastForwardSeconds(5);
        timeWarp().trigger(""_name"");
        long count = findNumberOfPerformedActions(""_name"");

        timeWarp().clock().fastForwardSeconds(5);
        timeWarp().trigger(""_name"");
        assertThat(count, equalTo(findNumberOfPerformedActions(""_name"")));
    }
",non-flaky,5
26846,wildfly_wildfly,WritableServiceBasedNamingStoreTestCase.testMultipleOwnersBindingReferences,"    @Test
    public void testMultipleOwnersBindingReferences() throws Exception {
        final Name name = new CompositeName(""test"");
        final ServiceName serviceName = store.buildServiceName(name);
        final Object value = new Object();

        // ensure bind does not exists
        try {
            store.lookup(name);
            fail(""Should have thrown name not found"");
        } catch (NameNotFoundException expect) {
        }
        // ensure the owners RuntimeBindReleaseService have no reference to the future bind
        final RuntimeBindReleaseService.References fooDuBindingReferences = (RuntimeBindReleaseService.References) container.getService(JndiNamingDependencyProcessor.serviceName(OWNER_FOO)).getValue();
        assertFalse(fooDuBindingReferences.contains(serviceName));
        final RuntimeBindReleaseService.References barDuBindingReferences = (RuntimeBindReleaseService.References) container.getService(JndiNamingDependencyProcessor.serviceName(OWNER_BAR)).getValue();
        assertFalse(barDuBindingReferences.contains(serviceName));

        WritableServiceBasedNamingStore.pushOwner(OWNER_FOO);
        try {
            store.bind(name, value);
            // Foo's RuntimeBindReleaseService should now have a reference to the new bind
            assertTrue(fooDuBindingReferences.contains(serviceName));
            // Bar's RuntimeBindReleaseService reference to the bind should not exist
            assertFalse(barDuBindingReferences.contains(serviceName));
        } finally {
            WritableServiceBasedNamingStore.popOwner();
        }

        WritableServiceBasedNamingStore.pushOwner(OWNER_BAR);
        try {
            store.rebind(name, value);
            // after rebind, Foo's RuntimeBindReleaseService reference to the bind should still exist
            assertTrue(fooDuBindingReferences.contains(serviceName));
            // after rebind, Bar's RuntimeBindReleaseService reference to the bind should now exist
            assertTrue(barDuBindingReferences.contains(serviceName));
        } finally {
            WritableServiceBasedNamingStore.popOwner();
        }

        WritableServiceBasedNamingStore.pushOwner(OWNER_FOO);
        try {
            store.unbind(name);
        } finally {
            WritableServiceBasedNamingStore.popOwner();
        }
    }
",non-flaky,5
106646,Alluxio_alluxio,AlluxioFuseFileSystemTest.getattrWithDelay,"  @Test
  public void getattrWithDelay() throws Exception {
    String path = ""/foo/bar"";
    AlluxioURI expectedPath = BASE_EXPECTED_URI.join(""/foo/bar"");

    // set up status
    FileInfo info = new FileInfo();
    info.setLength(0);
    info.setCompleted(false);
    URIStatus status = new URIStatus(info);

    // mock fs
    when(mFileSystem.getStatus(any(AlluxioURI.class))).thenReturn(status);

    FileStat stat = new FileStat(Runtime.getSystemRuntime());

    // Use another thread to open file so that
    // we could change the file status when opening it
    Thread t = new Thread(() -> mFuseFs.getattr(path, stat));
    t.start();
    Thread.sleep(1000);

    // If the file is not being written and is not completed,
    // we will wait for the file to complete
    verify(mFileSystem, atLeast(10)).getStatus(expectedPath);
    assertEquals(0, stat.st_size.longValue());

    info.setCompleted(true);
    info.setLength(1000);

    t.join();

    assertEquals(1000, stat.st_size.longValue());
  }
",non-flaky,5
76748,quarkusio_quarkus,CreateProjectMojoIT.testProjectGenerationWithExistingGradleFileShouldFail,"    @Test
    public void testProjectGenerationWithExistingGradleFileShouldFail() throws Exception {
        testDir = initProject(""projects/parent-gradle-it"", ""projects/project-generation-from-parent-gradle"");
        assertThat(testDir).isDirectory();
        invoker = initInvoker(testDir);
        InvocationResult result = setup(new Properties());

        assertThat(result.getExitCode()).isOne();
    }
",non-flaky,5
49,opensearch-project_OpenSearch,testReplicaThreadedThroughputDegradationAndRejection,"@Test
public void testReplicaThreadedThroughputDegradationAndRejection() throws Exception {
    Settings settings = Settings.builder().put(IndexingPressure.MAX_INDEXING_BYTES.getKey(), ""10KB"")
    .put(ShardIndexingPressureSettings.SHARD_INDEXING_PRESSURE_ENABLED.getKey(), true)
    .put(ShardIndexingPressureSettings.SHARD_INDEXING_PRESSURE_ENFORCED.getKey(), true)
    .put(ShardIndexingPressureMemoryManager.THROUGHPUT_DEGRADATION_LIMITS.getKey(), 1)
    .put(ShardIndexingPressureSettings.REQUEST_SIZE_WINDOW.getKey(), 100)
    .build();
    final int NUM_THREADS = scaledRandomIntBetween(100, 120);
    ShardIndexingPressure shardIndexingPressure = new ShardIndexingPressure(settings, clusterService);
    Index index = new Index(""IndexName"", ""UUID"");
    ShardId shardId1 = new ShardId(index, 0);
    fireConcurrentAndParallelRequestsForUniformThroughPut(NUM_THREADS, shardIndexingPressure, shardId1, 100, 100,
    OperationType.REPLICA);
    fireAllThenCompleteConcurrentRequestsWithUniformDelay(ShardIndexingPressureSettings.REQUEST_SIZE_WINDOW.get(settings),
    shardIndexingPressure, shardId1, 100, 200, OperationType.REPLICA);
    expectThrows(OpenSearchRejectedExecutionException.class,
    () -> shardIndexingPressure.markReplicaOperationStarted(shardId1, 11 * 1024, false));
    assertEquals(0, shardIndexingPressure.coldStats().getIndexingPressureShardStats(shardId1).getCurrentReplicaBytes());
    assertEquals(15, shardIndexingPressure.coldStats().getIndexingPressureShardStats(shardId1).getCurrentReplicaLimits());
}",concurrency,1
33873,apache_camel,FhirUpdateIT.testResourceAsString,"    @Test
    public void testResourceAsString() throws Exception {
        Date date = new SimpleDateFormat(""yyyy-MM-dd"").parse(""1998-04-29"");
        assertNotEquals(date, patient.getBirthDate());
        this.patient.setBirthDate(date);
        final Map<String, Object> headers = new HashMap<>();
        // parameter type is org.hl7.fhir.instance.model.api.IBaseResource
        headers.put(""CamelFhir.resourceAsString"", this.fhirContext.newJsonParser().encodeResourceToString(this.patient));
        // parameter type is org.hl7.fhir.instance.model.api.IIdType
        headers.put(""CamelFhir.id"", this.patient.getIdElement());
        // parameter type is ca.uhn.fhir.rest.api.PreferReturnEnum
        headers.put(""CamelFhir.preferReturn"", PreferReturnEnum.REPRESENTATION);

        MethodOutcome result = requestBodyAndHeaders(""direct://RESOURCE_AS_STRING"", null, headers);

        assertNotNull(result, ""resource result"");
        LOG.debug(""resource: "" + result);
        assertEquals(date, ((Patient) result.getResource()).getBirthDate(), ""Birth date not updated!"");
    }
",non-flaky,5
26794,MundaneImmortal_pair-distribution-app,DayPairsHelperTest.testGenerateNewDayPairsWithSmallestWeight,"	@Test
	public void testGenerateNewDayPairsWithSmallestWeight() {
		PairCombinations pairs = getLongPairsList();
		List<Developer> devs = Arrays.asList(new Developer(""dev1""), new Developer(""dev2""), new Developer(""dev3""),
				new Developer(""dev4""), new Developer(""dev5""), new Developer(""dev6""));
		List<String> tracks = Arrays.asList(""track1"", ""track2"", ""track3"");
		Map<Pair, Integer> pairsWeight = subject.buildPairsWeightFromPastPairing(pairs, devs);
		subject.buildDevelopersPairingDays(pairs, devs);
		
		DayPairs dayPairs = subject.generateNewDayPairs(tracks, devs, pairs, pairsWeight, getStandardCompanies());

		assertThat(dayPairs.getTracks().size(), is(3));
		assertThat(dayPairs.getTracks(), containsInAnyOrder(""track1"", ""track2"", ""track3""));
		System.out.println(dayPairs.getPairs());
		assertThat(dayPairs.hasPair(new Pair(Arrays.asList(new Developer(""dev1""), new Developer(""dev6"")))), is(true));
		assertThat(dayPairs.hasPair(new Pair(Arrays.asList(new Developer(""dev3""), new Developer(""dev2"")))), is(true));
		assertThat(dayPairs.hasPair(new Pair(Arrays.asList(new Developer(""dev5""), new Developer(""dev4"")))), is(true));
	}
",non-flaky,5
91447,strapdata_elassandra,LoggingListenerTests.annotatedTestMethod2,"        @TestLogging(""abc:TRACE,xyz:DEBUG"")
        public void annotatedTestMethod2() {

        }
",non-flaky,5
20920,NationalSecurityAgency_timely,MetricHistogramTest.testSerialization,"    @Test
    public void testSerialization() throws Exception {
        MetricParser metricParser = new MetricParser();
        Tag t1 = new Tag(""tag1=value1"");
        Tag t2 = new Tag(""tag2=value2"");
        Tag avg = new Tag(""sample=avg"");
        Tag min = new Tag(""sample=min"");
        Tag max = new Tag(""sample=max"");
        Tag sum = new Tag(""sample=sum"");
        Tag count = new Tag(""sample=count"");
        Tag p50 = new Tag(""sample=50p"");
        Tag p75 = new Tag(""sample=75p"");
        Tag p90 = new Tag(""sample=90p"");
        Tag p99 = new Tag(""sample=99p"");

        List<Tag> tags = new ArrayList<>();
        tags.add(t1);
        tags.add(t2);
        m.initialize(""sys.cpu.user"", tags);

        byte[] bytes = m.serialize(m);
        String puts = new String(bytes);
        for (String put : puts.split(""\n"")) {
            Metric metric = metricParser.parse(put);
            Assert.assertEquals(""sys.cpu.user_summarized"", metric.getName());
            metric.getTags().forEach(t -> {
                Assert.assertTrue(
                        t.equals(t1) || t.equals(t2) || t.equals(avg) || t.equals(min) || t.equals(max) || t.equals(sum)
                                || t.equals(count) || t.equals(p50) || t.equals(p75) || t.equals(p90) || t.equals(p99));
            });
        }
    }
",non-flaky,5
135737,Netflix_Hystrix,HystrixCommandTestWithCustomConcurrencyStrategy.testCommandDoesNotRequireContextConcurrencyStrategyProvidesItContextLeftUninitialized,"    @Test
    public void testCommandDoesNotRequireContextConcurrencyStrategyProvidesItContextLeftUninitialized() {
        HystrixConcurrencyStrategy strategy = new CustomConcurrencyStrategy(true);
        HystrixPlugins.getInstance().registerConcurrencyStrategy(strategy);

        //context is not set up
        HystrixRequestContext.setContextOnCurrentThread(null);
        HystrixCommand<Boolean> cmd = new TestCommand(false, false);
        assertTrue(cmd.execute()); //command execution not affected by missing context
        printRequestLog();
        assertNull(HystrixRequestLog.getCurrentRequest());
        assertNull(HystrixRequestLog.getCurrentRequest(strategy));
        assertNull(cmd.currentRequestLog);
    }
",non-flaky,5
77671,pholser_junit-quickcheck,ReferenceArrayPropertyParameterTypesTest.shouldHold,"    @Test public void stringArray() {
        @Property public void shouldHold(Foo[] f) {
        }
",non-flaky,5
113704,salesforce_reactive-grpc,CancellationPropagationIntegrationTest.serverCanCancelClientStreamExplicitly,"    @Test
    public void serverCanCancelClientStreamExplicitly() {
        TestService svc = new TestService();
        serverRule.getServiceRegistry().addService(svc);

        ReactorNumbersGrpc.ReactorNumbersStub stub = ReactorNumbersGrpc.newReactorStub(serverRule.getChannel());

        svc.setExplicitCancel(true);

        AtomicBoolean requestWasCanceled = new AtomicBoolean(false);
        AtomicBoolean requestDidProduce = new AtomicBoolean(false);

        Flux<NumberProto.Number> request = Flux
                .fromIterable(IntStream.range(0, NUMBER_OF_STREAM_ELEMENTS)::iterator)
                .delayElements(Duration.ofMillis(SEQUENCE_DELAY_MILLIS))
                .map(CancellationPropagationIntegrationTest::protoNum)
                .doOnNext(n -> {
                    requestDidProduce.set(true);
                    System.out.println(""P: "" + n.getNumber(0));
                })
                .doOnCancel(() -> {
                    requestWasCanceled.set(true);
                    System.out.println(""Client canceled"");
                });

        Mono<NumberProto.Number> observer = request.as(stub::requestPressure)
                .doOnSuccess(number -> System.out.println(number.getNumber(0)))
                .doOnError(throwable -> System.out.println(throwable.getMessage()));

        StepVerifier.create(observer)
                .expectNext(protoNum(-1))
                .verifyComplete();

        await().atMost(org.awaitility.Duration.FIVE_HUNDRED_MILLISECONDS).untilTrue(requestWasCanceled);

        assertThat(requestWasCanceled.get()).isTrue();
        assertThat(requestDidProduce.get()).isTrue();
    }
",non-flaky,5
112112,apache_shardingsphere-elasticjob,StatisticRdbRepositoryTest.assertAddJobRegisterStatistics,"    @Test
    public void assertAddJobRegisterStatistics() {
        assertTrue(repository.add(new JobRegisterStatistics(100, new Date())));
    }
",non-flaky,5
137094,spring-projects_spring-framework,AbstractAnnotationMetadataTests.getMemberClassNamesWhenHasNoMemberClassesReturnsEmptyArray,"	@Test
	public void getMemberClassNamesWhenHasNoMemberClassesReturnsEmptyArray() {
		assertThat(get(TestClass.class).getMemberClassNames()).isEmpty();
	}
",non-flaky,5
33903,apache_camel,Hl7v2PatientToFhirPatientIT.testUnmarshalWithExplicitUTF16Charset,"    @Test
    public void testUnmarshalWithExplicitUTF16Charset() throws Exception {
        MockEndpoint mock = getMockEndpoint(""mock:result"");
        mock.setExpectedMessageCount(1);

        // Message with explicit encoding in MSH
        String charset = ""ASCII"";
        byte[] body = HL7_MESSAGE.getBytes(Charset.forName(charset));
        template.sendBodyAndHeader(""direct:input"", new ByteArrayInputStream(body), Exchange.CHARSET_NAME, charset);

        mock.assertIsSatisfied();

        MethodOutcome result = mock.getExchanges().get(0).getIn().getBody(MethodOutcome.class);
        assertNotNull(result, ""resource result"");
        assertTrue(result.getCreated());
    }
",non-flaky,5
21201,androidx_androidx,PreferenceDataStoreTest.testGetStringWithDataStoreOnMgr,"    @Test
    public void testGetStringWithDataStoreOnMgr() {
        mManager.setPreferenceDataStore(mDataStore);
        mScreen.addPreference(mPreference);

        mPreference.getString(TEST_STR);

        verify(mDataStore, atLeastOnce()).getString(eq(KEY), eq(TEST_STR));
    }
",non-flaky,5
156137,soot-oss_soot,LoadingTest.testLoadingJava9to11Class,"  @Test
  public void testLoadingJava9to11Class() {
    G.reset();
    Options.v().set_soot_modulepath(""VIRTUAL_FS_FOR_JDK"");
    Scene.v().loadBasicClasses();

    SootClass klass1
        = SootModuleResolver.v().resolveClass(""java.lang.invoke.VarHandle"", SootClass.BODIES, Optional.of(""java.base""));

    assertTrue(klass1.getName().equals(""java.lang.invoke.VarHandle""));
    assertTrue(klass1.moduleName.equals(""java.base""));

    SootClass klass2 = SootModuleResolver.v().resolveClass(""java.lang.invoke.ConstantBootstraps"", SootClass.BODIES,
        Optional.of(""java.base""));

    assertTrue(klass2.getName().equals(""java.lang.invoke.ConstantBootstraps""));
    assertTrue(klass2.moduleName.equals(""java.base""));

    Scene.v().loadNecessaryClasses();
  }
",non-flaky,5
60910,apache_druid,PostAveragerAggregatorCalculatorTest.testApply,"  @Test
  public void testApply()
  {
    event.put(""count"", 10.0);
    event.put(""avgCount"", 12.0);

    Row result = pac.apply(row);

    Assert.assertEquals(10.0f / 12.0f, result.getMetric(""avgCountRatio"").floatValue(), 0.0);
  }
",non-flaky,5
26753,MundaneImmortal_pair-distribution-app,DevPairsCombinationsTest.testGetPastPairsForMissingHistory,"	@Test
	public void testGetPastPairsForMissingHistory() {
		DevPairCombinations devPairCombinations = new DevPairCombinations(getPairsListFromDevs(getStandardDevs()));
		
		
		assertThat(devPairCombinations.getPastPairs(3), is(nullValue()));
	}
",non-flaky,5
77635,pholser_junit-quickcheck,PeriodPropertyParameterTypesTest.shouldHold,"    @Test public void missingMin() {
        @Property public void shouldHold(@InRange(max = ""P36Y2M3D"") Period p) {
            assertThat(
                toBigInteger(p),
                lessThanOrEqualTo(toBigInteger(Period.parse(""P36Y2M3D""))));
        }
",non-flaky,5
70810,apache_kafka,PluginsTest.shouldInstantiateAndConfigureConverters,"    @Test
    public void shouldInstantiateAndConfigureConverters() {
        instantiateAndConfigureConverter(WorkerConfig.KEY_CONVERTER_CLASS_CONFIG, ClassLoaderUsage.CURRENT_CLASSLOADER);
        // Validate extra configs got passed through to overridden converters
        assertEquals(""true"", converter.configs.get(JsonConverterConfig.SCHEMAS_ENABLE_CONFIG));
        assertEquals(""foo1"", converter.configs.get(""extra.config""));

        instantiateAndConfigureConverter(WorkerConfig.VALUE_CONVERTER_CLASS_CONFIG, ClassLoaderUsage.PLUGINS);
        // Validate extra configs got passed through to overridden converters
        assertEquals(""true"", converter.configs.get(JsonConverterConfig.SCHEMAS_ENABLE_CONFIG));
        assertEquals(""foo2"", converter.configs.get(""extra.config""));
    }
",non-flaky,5
33675,alibaba_fastjson,JSONScannerTest.charArrayCompare1,"  @Test
  public void charArrayCompare1() throws Throwable {

    // Arrange
    String src = """";
    int offset = 7;
    char[] dest = { '\u0000' };

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""charArrayCompare"", Reflector.forName(""java.lang.String""), Reflector.forName(""int""), Reflector.forName(""char []""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, src, offset, dest);

    // Assert result
    Assert.assertEquals(false, retval);

  }
",non-flaky,5
58,wildfly_wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993.testBindAndRetrieveObjectFactoryFromNamingContext,"@Test
public void testBindAndRetrieveObjectFactoryFromNamingContext() throws Exception {
    final Reference reference = new Reference(""java.util.String"", TestObjectFactory.class.getName(), null);
    namingStore.bind(new CompositeName(""test""), reference);
    final Object result = namingContext.lookup(""test"");
    assertTrue(result instanceof String);
    assertEquals(""Test ParsedResult"", result);
}",test order dependency,4
156445,apache_commons-lang,DateUtilsFragmentTest.testMillisecondsOfSecondWithDate,"    @Test
    public void testMillisecondsOfSecondWithDate() {
        final long testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.SECOND);
        assertEquals(millis, testResult);
    }
",non-flaky,5
122619,vespa-engine_vespa,TextBufferImplTest.testDelete,"    @Test
    public void testDelete() {
        write(0, 0, ""foo\nbar\nzoo\n"");
        delete(0, 2, 2, 1);
        assertEquals(""fooo\n"", textBuffer.getString());

        delete(0, 4, 1, 0);
        assertEquals(""fooo"", textBuffer.getString());

        delete(0, 0, 0, 4);
        assertEquals("""", textBuffer.getString());

        delete(0, 0, 0, 0);
        assertEquals("""", textBuffer.getString());
    }
",non-flaky,5
243,alibaba_fastjson,test_date,"@Test
public void test_date() throws Exception {
    Date date1 = JSON.parseObject(""{\""gmtCreate\"":\""2018-09-12\""}"", VO.class).getGmtCreate();
    assertNotNull(date1);
    Date date2 = JSON.parseObject(""{\""gmtCreate\"":\""2018-09-12T15:10:19+00:00\""}"", VO.class).getGmtCreate();
    Date date3 = JSON.parseObject(""{\""gmtCreate\"":\""2018-09-12T15:10:19Z\""}"", VO.class).getGmtCreate();
    Date date4 = JSON.parseObject(""{\""gmtCreate\"":\""20180912T151019Z\""}"", VO.class).getGmtCreate();
    Date date5 = JSON.parseObject(""{\""gmtCreate\"":\""2018-09-12T15:10:19Z\""}"", VO.class).getGmtCreate();
    Date date6 = JSON.parseObject(""{\""gmtCreate\"":\""20180912\""}"", VO.class).getGmtCreate();
    long delta_2_1 = date2.getTime() - date1.getTime();
    assertEquals(83419000, delta_2_1);
    long delta_3_1 = date3.getTime() - date1.getTime();
    assertEquals(83419000, delta_3_1);
    long delta_4_3 = date4.getTime() - date3.getTime();
    assertEquals(0, delta_4_3);
    long delta_5_4 = date5.getTime() - date4.getTime();
    assertEquals(0, delta_5_4);
    long delta_6_1 = date6.getTime() - date1.getTime();
    assertEquals(0, delta_6_1);
}",time,2
86109,graylog2_graylog2-server,NotificationFacadeTest.exportEntity,"    @Test
    public void exportEntity() {
        final ModelId id = ModelId.of(""5d4d33753d27460ad18e0c4d"");
        final EntityDescriptor descriptor = EntityDescriptor.create(id, ModelTypes.NOTIFICATION_V1);
        final EntityDescriptorIds entityDescriptorIds = EntityDescriptorIds.of(descriptor);
        final Optional<Entity> entity = facade.exportEntity(descriptor, entityDescriptorIds);
        assertThat(entity).isPresent();
        final EntityV1 entityV1 = (EntityV1) entity.get();
        final NotificationEntity notificationEntity = objectMapper.convertValue(entityV1.data(),
                NotificationEntity.class);
        assertThat(notificationEntity.title().asString()).isEqualTo(""title"");
        assertThat(notificationEntity.description().asString()).isEqualTo(""description"");
        assertThat(notificationEntity.config().type()).isEqualTo(""email-notification-v1"");
    }
",non-flaky,5
19494,eclipse_xtext-core,JavaIoFileSystemAccessTest.testDirsAndFilesAreCreated,"	@Test
	public void testDirsAndFilesAreCreated() throws Exception {
		File dir = null;
		File textFile = null;
		File binFile = null;
		try {
			JavaIoFileSystemAccess fileSystemAccess = new JavaIoFileSystemAccess(
					IResourceServiceProvider.Registry.INSTANCE, new IEncodingProvider.Runtime());

			File tmpDir = configureFileSystemAccess(fileSystemAccess);
			fileSystemAccess.generateFile(""tmp/X"", ""XX"");
			fileSystemAccess.generateFile(""tmp/Y"", new StringInputStream(""\1\2\3""));

			dir = new File(tmpDir, ""tmp"");
			assertTrue(dir.exists());
			assertTrue(dir.isDirectory());

			textFile = new File(dir, ""X"");
			assertTrue(textFile.exists());
			assertTrue(textFile.isFile());
			assertEquals(""XX"", fileSystemAccess.readTextFile(""tmp/X""));

			binFile = new File(dir, ""Y"");
			assertTrue(binFile.exists());
			assertFalse(fileSystemAccess.isFile(""tmp"", IFileSystemAccess.DEFAULT_OUTPUT)); // isFile evaluates to false for directories
			assertTrue(fileSystemAccess.isFile(""tmp/Y"", IFileSystemAccess.DEFAULT_OUTPUT));
			assertTrue(binFile.isFile());
			InputStream stream = fileSystemAccess.readBinaryFile(""tmp/Y"");
			try {
				assertEquals(""\1\2\3"", new String(ByteStreams.toByteArray(stream)));
			} finally {
				stream.close();
			}

		} finally {
			try {
				if (textFile != null)
					textFile.delete();
			} finally {
				try {
					if (binFile != null)
						binFile.delete();
				} finally {
					if (dir != null)
						dir.delete();
				}
			}
		}
	}
",non-flaky,5
76987,Tencent_Firestorm,SparkFallbackReadTest.resultCompareTest,"  @Test
  public void resultCompareTest() throws Exception {
    run();
    checkShuffleData();
  }
",non-flaky,5
77636,pholser_junit-quickcheck,PeriodPropertyParameterTypesTest.shouldHold,"    @Test public void missingMax() {
       @Property public void shouldHold(@InRange(min = ""P36Y2M3D"") Period p) {
            assertThat(
                toBigInteger(p),
                greaterThanOrEqualTo(toBigInteger(Period.parse(""P36Y2M3D""))));
        }
",non-flaky,5
43067,trinodb_trino,BaseConnectorTest.testSelectInformationSchemaTables,"    @Test
    public void testSelectInformationSchemaTables()
    {
        String catalog = getSession().getCatalog().get();
        String schema = getSession().getSchema().get();
        String schemaPattern = schema.replaceAll(""^."", ""_"");

        assertQuery(""SELECT table_name FROM information_schema.tables WHERE table_schema = '"" + schema + ""' AND table_name = 'orders'"", ""VALUES 'orders'"");
        assertQuery(""SELECT table_name FROM information_schema.tables WHERE table_schema LIKE '"" + schema + ""' AND table_name LIKE '%rders'"", ""VALUES 'orders'"");
        assertQuery(""SELECT table_name FROM information_schema.tables WHERE table_schema LIKE '"" + schemaPattern + ""' AND table_name LIKE '%rders'"", ""VALUES 'orders'"");
        assertQuery(
                ""SELECT table_name FROM information_schema.tables "" +
                        ""WHERE table_catalog = '"" + catalog + ""' AND table_schema LIKE '"" + schema + ""' AND table_name LIKE '%orders'"",
                ""VALUES 'orders'"");
        assertQuery(""SELECT table_name FROM information_schema.tables WHERE table_catalog = 'something_else'"", ""SELECT '' WHERE false"");

        assertQuery(
                ""SELECT DISTINCT table_name FROM information_schema.tables WHERE table_schema = 'information_schema' OR rand() = 42 ORDER BY 1"",
                ""VALUES "" +
                        ""('applicable_roles'), "" +
                        ""('columns'), "" +
                        ""('enabled_roles'), "" +
                        ""('role_authorization_descriptors'), "" +
                        ""('roles'), "" +
                        ""('schemata'), "" +
                        ""('table_privileges'), "" +
                        ""('tables'), "" +
                        ""('views')"");
    }
",non-flaky,5
68,androidx_androidx,testUnsubscribeWithSubscriptionCallbackForMultipleSubscriptions,"@Test
public void testUnsubscribeWithSubscriptionCallbackForMultipleSubscriptions() throws Exception {
    connectMediaBrowserService();
    final List<StubSubscriptionCallback> subscriptionCallbacks = new ArrayList<>();
    final int pageSize = 1;
    for (int page = 0; page < 4; page++) {
        final StubSubscriptionCallback callback = new StubSubscriptionCallback();
        subscriptionCallbacks.add(callback);
        Bundle options = new Bundle();
        options.putInt(MediaBrowserCompat.EXTRA_PAGE, page);
        options.putInt(MediaBrowserCompat.EXTRA_PAGE_SIZE, pageSize);
        callback.reset(1);
        mMediaBrowser.subscribe(MEDIA_ID_ROOT, options, callback);
        callback.await(TIME_OUT_MS);
        assertEquals(1, callback.mChildrenLoadedWithOptionCount);
    }
    final int[] orderOfRemovingCallbacks = {2, 0, 3, 1};
    for (int i = 0; i < orderOfRemovingCallbacks.length; i++) {
        for (StubSubscriptionCallback callback : subscriptionCallbacks) {
            callback.reset(1);
        }
        mMediaBrowser.unsubscribe(MEDIA_ID_ROOT,
        subscriptionCallbacks.get(orderOfRemovingCallbacks[i]));
        callMediaBrowserServiceMethod(NOTIFY_CHILDREN_CHANGED, MEDIA_ID_ROOT,
        getApplicationContext());
        try {
            Thread.sleep(SLEEP_MS);
        } catch (InterruptedException e) {
            fail(""Unexpected InterruptedException occurred."");
        }
        for (int j = 0; j < 4; j++) {
            int childrenLoadedWithOptionsCount = subscriptionCallbacks
            .get(orderOfRemovingCallbacks[j]).mChildrenLoadedWithOptionCount;
            if (j <= i) {
                assertEquals(0, childrenLoadedWithOptionsCount);
            } else {
                assertEquals(1, childrenLoadedWithOptionsCount);
            }
        }
    }
}",async wait,0
315,apache_hadoop,TestRpcProgramNfs3.testFsstat,"  @Test(timeout = 60000)
  public void testFsstat() throws Exception {
    HdfsFileStatus status = nn.getRpcServer().getFileInfo(""/tmp/bar"");
    long dirId = status.getFileId();
    int namenodeId = Nfs3Utils.getNamenodeId(config);
    FileHandle handle = new FileHandle(dirId, namenodeId);
    XDR xdr_req = new XDR();
    FSSTAT3Request req = new FSSTAT3Request(handle);
    req.serialize(xdr_req);
    
    // Attempt by an unpriviledged user should fail.
    FSSTAT3Response response1 = nfsd.fsstat(xdr_req.asReadOnlyWrap(),
        securityHandlerUnpriviledged,
        new InetSocketAddress(""localhost"", 1234));
    assertEquals(""Incorrect return code:"", Nfs3Status.NFS3ERR_ACCES,
        response1.getStatus());

    // Attempt by a priviledged user should pass.
    FSSTAT3Response response2 = nfsd.fsstat(xdr_req.asReadOnlyWrap(),
        securityHandler, new InetSocketAddress(""localhost"", 1234));
    assertEquals(""Incorrect return code:"", Nfs3Status.NFS3_OK,
        response2.getStatus());
  }
",non-flaky,5
94611,square_okhttp,CacheTest.gzip,"  @Test public void etagConditionCanBeNonAscii() throws Exception {
  public Buffer gzip(String data) throws IOException {
    Buffer result = new Buffer();
    BufferedSink sink = Okio.buffer(new GzipSink(result));
    sink.writeUtf8(data);
    sink.close();
    return result;
  }
",non-flaky,5
114082,aws_aws-sdk-java-v2,ExpressionTest.joinValues_conflictingKey,"    @Test
    public void joinValues_conflictingKey() {
        Map<String, AttributeValue> values1 = new HashMap<>();
        values1.put(""one"", EnhancedAttributeValue.fromString(""1"").toAttributeValue());
        values1.put(""two"", EnhancedAttributeValue.fromString(""2"").toAttributeValue());
        Map<String, AttributeValue> values2 = new HashMap<>();
        values2.put(""three"", EnhancedAttributeValue.fromString(""3"").toAttributeValue());
        values2.put(""two"", EnhancedAttributeValue.fromString(""4"").toAttributeValue());

        exception.expect(IllegalArgumentException.class);
        exception.expectMessage(""two"");
        Expression.joinValues(values1, values2);
    }
",non-flaky,5
122599,vespa-engine_vespa,FileWriterTest.testWrite,"    @Test
    public void testWrite() {
        final String content = ""content"";
        final String permissions = ""rwxr-xr-x"";
        final String owner = ""owner"";
        final String group = ""group"";

        Path path = fileSystem.getPath(""/opt/vespa/tmp/file.txt"");
        FileWriter writer = new FileWriter(path, () -> content)
                .withPermissions(permissions)
                .withOwner(owner)
                .withGroup(group)
                .onlyIfFileDoesNotAlreadyExist();
        assertTrue(writer.converge(context));
        verify(context, times(1)).recordSystemModification(any(), eq(""Creating file "" + path));

        UnixPath unixPath = new UnixPath(path);
        assertEquals(content, unixPath.readUtf8File());
        assertEquals(permissions, unixPath.getPermissions());
        assertEquals(owner, unixPath.getOwner());
        assertEquals(group, unixPath.getGroup());
        Instant fileTime = unixPath.getLastModifiedTime();

        // Second time is a no-op.
        assertFalse(writer.converge(context));
        assertEquals(fileTime, unixPath.getLastModifiedTime());
    }
",non-flaky,5
118697,netty_netty,SmtpRequestEncoderTest.testEncodeRset,"    @Test
    public void testEncodeRset() {
        testEncode(SmtpRequests.rset(), ""RSET\r\n"");
    }
",non-flaky,5
77004,Tencent_Firestorm,ShuffleServerGrpcTest.shuffleResultTest,"  @Test
  public void shuffleResultTest() throws Exception {
    Map<Integer, List<Long>> partitionToBlockIds = Maps.newHashMap();
    List<Long> blockIds1 = getBlockIdList(1, 3);
    List<Long> blockIds2 = getBlockIdList(2, 2);
    List<Long> blockIds3 = getBlockIdList(3, 1);
    partitionToBlockIds.put(1, blockIds1);
    partitionToBlockIds.put(2, blockIds2);
    partitionToBlockIds.put(3, blockIds3);

    RssReportShuffleResultRequest request =
        new RssReportShuffleResultRequest(""shuffleResultTest"", 0, 0L, partitionToBlockIds, 1);
    try {
      shuffleServerClient.reportShuffleResult(request);
      fail(""Exception should be thrown"");
    } catch (Exception e) {
      assertTrue(e.getMessage().contains(""error happened when report shuffle result""));
    }

    RssGetShuffleResultRequest req = new RssGetShuffleResultRequest(""shuffleResultTest"", 1, 1);
    try {
      shuffleServerClient.getShuffleResult(req);
      fail(""Exception should be thrown"");
    } catch (Exception e) {
      assertTrue(e.getMessage().contains(""Can't get shuffle result""));
    }

    RssRegisterShuffleRequest rrsr = new RssRegisterShuffleRequest(""shuffleResultTest"", 100,
        Lists.newArrayList(new PartitionRange(0, 1)));
    shuffleServerClient.registerShuffle(rrsr);

    req = new RssGetShuffleResultRequest(""shuffleResultTest"", 0, 1);
    RssGetShuffleResultResponse result = shuffleServerClient.getShuffleResult(req);
    Roaring64NavigableMap blockIdBitmap = result.getBlockIdBitmap();
    assertEquals(Roaring64NavigableMap.bitmapOf(), blockIdBitmap);

    request =
        new RssReportShuffleResultRequest(""shuffleResultTest"", 0, 0L, partitionToBlockIds, 1);
    RssReportShuffleResultResponse response = shuffleServerClient.reportShuffleResult(request);
    assertEquals(ResponseStatusCode.SUCCESS, response.getStatusCode());
    req = new RssGetShuffleResultRequest(""shuffleResultTest"", 0, 1);
    result = shuffleServerClient.getShuffleResult(req);
    blockIdBitmap = result.getBlockIdBitmap();
    Roaring64NavigableMap expectedP1 = Roaring64NavigableMap.bitmapOf();
    addExpectedBlockIds(expectedP1, blockIds1);
    assertEquals(expectedP1, blockIdBitmap);

    req = new RssGetShuffleResultRequest(""shuffleResultTest"", 0, 2);
    result = shuffleServerClient.getShuffleResult(req);
    blockIdBitmap = result.getBlockIdBitmap();
    Roaring64NavigableMap expectedP2 = Roaring64NavigableMap.bitmapOf();
    addExpectedBlockIds(expectedP2, blockIds2);
    assertEquals(expectedP2, blockIdBitmap);

    req = new RssGetShuffleResultRequest(""shuffleResultTest"", 0, 3);
    result = shuffleServerClient.getShuffleResult(req);
    blockIdBitmap = result.getBlockIdBitmap();
    Roaring64NavigableMap expectedP3 = Roaring64NavigableMap.bitmapOf();
    addExpectedBlockIds(expectedP3, blockIds3);
    assertEquals(expectedP3, blockIdBitmap);

    partitionToBlockIds = Maps.newHashMap();
    blockIds1 = getBlockIdList(1, 3);
    blockIds2 = getBlockIdList(2, 2);
    blockIds3 = getBlockIdList(3, 1);
    partitionToBlockIds.put(1, blockIds1);
    partitionToBlockIds.put(2, blockIds2);
    partitionToBlockIds.put(3, blockIds3);

    request =
        new RssReportShuffleResultRequest(""shuffleResultTest"", 0, 1L, partitionToBlockIds, 1);
    shuffleServerClient.reportShuffleResult(request);

    req = new RssGetShuffleResultRequest(""shuffleResultTest"", 0, 1);
    result = shuffleServerClient.getShuffleResult(req);
    blockIdBitmap = result.getBlockIdBitmap();
    addExpectedBlockIds(expectedP1, blockIds1);
    assertEquals(expectedP1, blockIdBitmap);

    req = new RssGetShuffleResultRequest(""shuffleResultTest"", 0, 2);
    result = shuffleServerClient.getShuffleResult(req);
    blockIdBitmap = result.getBlockIdBitmap();
    addExpectedBlockIds(expectedP2, blockIds2);
    assertEquals(expectedP2, blockIdBitmap);

    req = new RssGetShuffleResultRequest(""shuffleResultTest"", 0, 3);
    result = shuffleServerClient.getShuffleResult(req);
    blockIdBitmap = result.getBlockIdBitmap();
    addExpectedBlockIds(expectedP3, blockIds3);
    assertEquals(expectedP3, blockIdBitmap);

    request =
        new RssReportShuffleResultRequest(""shuffleResultTest"", 1, 1L, Maps.newHashMap(), 1);
    shuffleServerClient.reportShuffleResult(request);
    req = new RssGetShuffleResultRequest(""shuffleResultTest"", 1, 1);
    result = shuffleServerClient.getShuffleResult(req);
    blockIdBitmap = result.getBlockIdBitmap();
    assertEquals(Roaring64NavigableMap.bitmapOf(), blockIdBitmap);

    // test with bitmapNum > 1
    partitionToBlockIds = Maps.newHashMap();
    blockIds1 = getBlockIdList(1, 3);
    blockIds2 = getBlockIdList(2, 2);
    blockIds3 = getBlockIdList(3, 1);
    partitionToBlockIds.put(1, blockIds1);
    partitionToBlockIds.put(2, blockIds2);
    partitionToBlockIds.put(3, blockIds3);
    request =
        new RssReportShuffleResultRequest(""shuffleResultTest"", 2, 1L, partitionToBlockIds, 3);
    shuffleServerClient.reportShuffleResult(request);
    // validate bitmap in shuffleTaskManager
    Roaring64NavigableMap[] bitmaps = shuffleServers.get(0).getShuffleTaskManager()
        .getPartitionsToBlockIds().get(""shuffleResultTest"").get(2);
    assertEquals(3, bitmaps.length);

    req = new RssGetShuffleResultRequest(""shuffleResultTest"", 2, 1);
    result = shuffleServerClient.getShuffleResult(req);
    blockIdBitmap = result.getBlockIdBitmap();
    expectedP1 = Roaring64NavigableMap.bitmapOf();
    addExpectedBlockIds(expectedP1, blockIds1);
    assertEquals(expectedP1, blockIdBitmap);

    req = new RssGetShuffleResultRequest(""shuffleResultTest"", 2, 2);
    result = shuffleServerClient.getShuffleResult(req);
    blockIdBitmap = result.getBlockIdBitmap();
    expectedP2 = Roaring64NavigableMap.bitmapOf();
    addExpectedBlockIds(expectedP2, blockIds2);
    assertEquals(expectedP2, blockIdBitmap);

    req = new RssGetShuffleResultRequest(""shuffleResultTest"", 2, 3);
    result = shuffleServerClient.getShuffleResult(req);
    blockIdBitmap = result.getBlockIdBitmap();
    expectedP3 = Roaring64NavigableMap.bitmapOf();
    addExpectedBlockIds(expectedP3, blockIds3);
    assertEquals(expectedP3, blockIdBitmap);

    partitionToBlockIds = Maps.newHashMap();
    blockIds1 = getBlockIdList((int) Constants.MAX_PARTITION_ID, 3);
    blockIds2 = getBlockIdList(2, 2);
    blockIds3 = getBlockIdList(3, 1);
    partitionToBlockIds.put((int) Constants.MAX_PARTITION_ID, blockIds1);
    partitionToBlockIds.put(2, blockIds2);
    partitionToBlockIds.put(3, blockIds3);
    // bimapNum = 2
    request =
        new RssReportShuffleResultRequest(""shuffleResultTest"", 4, 1L, partitionToBlockIds, 2);
    shuffleServerClient.reportShuffleResult(request);

    req = new RssGetShuffleResultRequest(""shuffleResultTest"", 4, (int) Constants.MAX_PARTITION_ID);
    result = shuffleServerClient.getShuffleResult(req);
    blockIdBitmap = result.getBlockIdBitmap();
    expectedP1 = Roaring64NavigableMap.bitmapOf();
    addExpectedBlockIds(expectedP1, blockIds1);
    assertEquals(expectedP1, blockIdBitmap);

    req = new RssGetShuffleResultRequest(""shuffleResultTest"", 4, 2);
    result = shuffleServerClient.getShuffleResult(req);
    blockIdBitmap = result.getBlockIdBitmap();
    expectedP2 = Roaring64NavigableMap.bitmapOf();
    addExpectedBlockIds(expectedP2, blockIds2);
    assertEquals(expectedP2, blockIdBitmap);

    req = new RssGetShuffleResultRequest(""shuffleResultTest"", 4, 3);
    result = shuffleServerClient.getShuffleResult(req);
    blockIdBitmap = result.getBlockIdBitmap();
    expectedP3 = Roaring64NavigableMap.bitmapOf();
    addExpectedBlockIds(expectedP3, blockIds3);
    assertEquals(expectedP3, blockIdBitmap);

    // wait resources are deleted
    Thread.sleep(12000);
    req = new RssGetShuffleResultRequest(""shuffleResultTest"", 1, 1);
    try {
      shuffleServerClient.getShuffleResult(req);
      fail(""Exception should be thrown"");
    } catch (Exception e) {
      assertTrue(e.getMessage().contains(""Can't get shuffle result""));
    }
  }
",non-flaky,5
162418,testcontainers_testcontainers-java,DockerfileTest.customizableImage,"    @Test
    public void customizableImage() {
        ImageFromDockerfile image = new ImageFromDockerfile() {
            @Override
            protected void configure(BuildImageCmd buildImageCmd) {
                super.configure(buildImageCmd);

                List<String> dockerfile = Arrays.asList(
                        ""FROM alpine:3.2"",
                        ""RUN echo 'hello from Docker build process'"",
                        ""CMD yes""
                );
                withFileFromString(""Dockerfile"", String.join(""\n"", dockerfile));

                buildImageCmd.withNoCache(true);
            }
        };

        verifyImage(image);
    }
",non-flaky,5
118707,netty_netty,SmtpResponseDecoderTest.testDecodeTwoLineResponse,"    @Test
    public void testDecodeTwoLineResponse() {
        EmbeddedChannel channel = newChannel();
        assertTrue(channel.writeInbound(newBuffer(""200-Hello\r\n200 Ok\r\n"")));
        assertTrue(channel.finish());

        SmtpResponse response = channel.readInbound();
        assertEquals(200, response.code());
        List<CharSequence> sequences = response.details();
        assertEquals(2, sequences.size());

        assertEquals(""Hello"", sequences.get(0).toString());
        assertEquals(""Ok"", sequences.get(1).toString());
        assertNull(channel.readInbound());
    }
",non-flaky,5
95696,togglz_togglz,AnnotationFeatureGroupTest.buildWillReturnFeatureGroupWhenFeatureGroupAnnotationIsPresentForClassLevelGroup,"    @Test
    public void buildWillReturnFeatureGroupWhenFeatureGroupAnnotationIsPresentForClassLevelGroup() throws Exception {
        FeatureGroup result = AnnotationFeatureGroup.build(ClassLevelGroup.class);

        assertThat(result, notNullValue());
        assertThat(result.getLabel(), is(CLASS_LEVEL_GROUP_LABEL));
        assertThat(result.contains(TestFeatures.FEATURE), is(true));
    }
",non-flaky,5
76954,Tencent_Firestorm,ShuffleWriteClientImplTest.testSendData,"  @Test
  public void testSendData() {
    ShuffleWriteClientImpl shuffleWriteClient =
        new ShuffleWriteClientImpl(""GRPC"", 3, 2000, 4);
    ShuffleServerClient mockShuffleServerClient = mock(ShuffleServerClient.class);
    ShuffleWriteClientImpl spyClient = spy(shuffleWriteClient);
    doReturn(mockShuffleServerClient).when(spyClient).getShuffleServerClient(any());
    when(mockShuffleServerClient.sendShuffleData(any())).thenReturn(
        new RssSendShuffleDataResponse(ResponseStatusCode.NO_BUFFER));

    List<ShuffleServerInfo> shuffleServerInfoList =
        Lists.newArrayList(new ShuffleServerInfo(""id"", ""host"", 0));
    List<ShuffleBlockInfo> shuffleBlockInfoList = Lists.newArrayList(new ShuffleBlockInfo(
        0, 0, 10, 10, 10, new byte[]{1}, shuffleServerInfoList, 10, 100, 0));
    SendShuffleDataResult result = spyClient.sendShuffleData(""appId"", shuffleBlockInfoList);

    assertTrue(result.getFailedBlockIds().contains(10L));
  }
",non-flaky,5
135796,Netflix_Hystrix,CumulativeCollapserEventCounterStreamTest.testCollapsedAndResponseFromCache,"    @Test
    public void testCollapsedAndResponseFromCache() {
        HystrixCollapserKey key = HystrixCollapserKey.Factory.asKey(""CumulativeCollapser-C"");
        stream = CumulativeCollapserEventCounterStream.getInstance(key, 10, 100);
        stream.startCachingStreamValuesIfUnstarted();

        final CountDownLatch latch = new CountDownLatch(1);
        stream.observe().take(10).subscribe(getSubscriber(latch));

        for (int i = 0; i < 3; i++) {
            CommandStreamTest.Collapser.from(key, i).observe();
            CommandStreamTest.Collapser.from(key, i).observe(); //same arg - should get a response from cache
            CommandStreamTest.Collapser.from(key, i).observe(); //same arg - should get a response from cache
        }

        try {
            assertTrue(latch.await(10000, TimeUnit.MILLISECONDS));
        } catch (InterruptedException ex) {
            fail(""Interrupted ex"");
        }
        assertEquals(HystrixEventType.Collapser.values().length, stream.getLatest().length);
        long[] expected = new long[HystrixEventType.Collapser.values().length];
        expected[HystrixEventType.Collapser.BATCH_EXECUTED.ordinal()] = 1;
        expected[HystrixEventType.Collapser.ADDED_TO_BATCH.ordinal()] = 3;
        expected[HystrixEventType.Collapser.RESPONSE_FROM_CACHE.ordinal()] = 6;
        System.out.println(""ReqLog : "" + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());
        assertArrayEquals(expected, stream.getLatest());
    }
",non-flaky,5
97698,vojtechhabarta_typescript-generator,TaggedUnionsTest.testGenericBaseWithNonGenericSubType,"    @Test
    public void testGenericBaseWithNonGenericSubType() {
        final Settings settings = TestUtils.settings();
        settings.outputFileType = TypeScriptFileType.implementationFile;
        settings.outputKind = TypeScriptOutputKind.module;
        settings.mapClasses = ClassMapping.asClasses;
        settings.mapEnum = EnumMapping.asEnum;
        settings.nonConstEnums = true;
        settings.mapPackagesToNamespaces = true;
        final String output = new TypeScriptGenerator(settings).generateTypeScript(Input.from(EntityCollection.class));
        Assert.assertTrue(output.contains(""type EntityUnion<T> = cz.habarta.typescript.generator.TaggedUnionsTest.Foo | cz.habarta.typescript.generator.TaggedUnionsTest.Bar""));
    }
",non-flaky,5
60876,apache_druid,RedisStandaloneCacheTest.testGetBulk,"  @Test
  public void testGetBulk()
  {
    Assert.assertNull(cache.get(new Cache.NamedKey(""the"", HI)));

    put(cache, ""the"", HI, 1);
    put(cache, ""the"", HO, 10);

    Cache.NamedKey key1 = new Cache.NamedKey(""the"", HI);
    Cache.NamedKey key2 = new Cache.NamedKey(""the"", HO);
    Cache.NamedKey key3 = new Cache.NamedKey(""a"", HI);

    Map<Cache.NamedKey, byte[]> result = cache.getBulk(
        Lists.newArrayList(
            key1,
            key2,
            key3
        )
    );

    Assert.assertEquals(1, Ints.fromByteArray(result.get(key1)));
    Assert.assertEquals(10, Ints.fromByteArray(result.get(key2)));
    Assert.assertEquals(null, result.get(key3));
  }
",non-flaky,5
112130,apache_shardingsphere-elasticjob,StatisticRdbRepositoryTest.assertFindLatestJobRegisterStatistics,"    @Test
    public void assertFindLatestJobRegisterStatistics() {
        repository.add(new JobRegisterStatistics(100, new Date()));
        repository.add(new JobRegisterStatistics(200, new Date()));
        Optional<JobRegisterStatistics> po = repository.findLatestJobRegisterStatistics();
        assertThat(po.get().getRegisteredCount(), is(200));
    }
",non-flaky,5
94688,square_okhttp,CacheAdapterTest.put,"  @Test public void put_httpsGet() throws Exception {
      @Override public CacheRequest put(URI uri, URLConnection connection) throws IOException {
        try {
          assertTrue(connection instanceof HttpsURLConnection);
          assertEquals(toUri(serverUrl), uri);
          assertEquals(serverUrl, connection.getURL());

          HttpsURLConnection cacheHttpsUrlConnection = (HttpsURLConnection) connection;
          HttpsURLConnection realHttpsUrlConnection =
              (HttpsURLConnection) CacheAdapterTest.this.connection;
          assertEquals(realHttpsUrlConnection.getCipherSuite(),
              cacheHttpsUrlConnection.getCipherSuite());
          assertEquals(realHttpsUrlConnection.getPeerPrincipal(),
              cacheHttpsUrlConnection.getPeerPrincipal());
          assertArrayEquals(realHttpsUrlConnection.getLocalCertificates(),
              cacheHttpsUrlConnection.getLocalCertificates());
          assertArrayEquals(realHttpsUrlConnection.getServerCertificates(),
              cacheHttpsUrlConnection.getServerCertificates());
          assertEquals(realHttpsUrlConnection.getLocalPrincipal(),
              cacheHttpsUrlConnection.getLocalPrincipal());
          return null;
        } catch (Throwable t) {
          throw new IOException(""unexpected cache failure"", t);
        }
      }
",non-flaky,5
177959,aosp-mirror_platform_frameworks_support,FileProviderTest.testStrategyExtraSeparators,"    @Test
    public void testStrategyExtraSeparators() throws Exception {
        final SimplePathStrategy strat = new SimplePathStrategy(""authority"");
        strat.addRoot(""tag"", mContext.getFilesDir());

        // When canonicalized, the path separators are trimmed
        File inFile = new File(mContext.getFilesDir(), ""//foo//bar//"");
        File expectedRoot = mContext.getFilesDir().getCanonicalFile();
        File outFile = new File(expectedRoot, ""/foo/bar"");
        final String expected = ""content://authority/tag/foo/bar"";

        assertEquals(expected,
                strat.getUriForFile(inFile).toString());
        assertEquals(outFile.getPath(),
                strat.getFileForUri(Uri.parse(expected)).getPath());
    }
",non-flaky,5
133963,CorfuDB_CorfuDB,LogUnitHandlerTest.testWriteRange,"    @Test
    public void testWriteRange() {
        ResponseMsg response = getResponseMsg(
                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.CHECK),
                getRangeWriteLogResponseMsg()
        );

        logUnitHandler.handleMessage(response, mockChannelHandlerContext);
        // Verify that the correct request was completed (once) with the appropriate value,
        // and that we did not complete exceptionally.
        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));
        verify(mockClientRouter).completeRequest(response.getHeader().getRequestId(), true);
    }
",non-flaky,5
368,apache_hadoop,TestPermissionSymlinks.testRenameSrcNotWritableFC,"  @Test(timeout = 5000)
  public void testRenameSrcNotWritableFC() throws Exception {
    fs.setPermission(linkParent, new FsPermission((short) 0555));
    doRenameSrcNotWritableFC();
  }
",non-flaky,5
156078,jReddit_jReddit,RedditScopeBuilderTest.testAdd,"    @Test
    public void testAdd() {
        builder.addScope(RedditScope.EDIT);
        assertEquals(RedditScope.EDIT.value(), builder.build());
        builder.removeScope(RedditScope.EDIT);
    }
",non-flaky,5
323,apache_hadoop,TestDFSClientCache.testGetUserGroupInformationSecure,"  @Test
  public void testGetUserGroupInformationSecure() throws IOException {
    String userName = ""user1"";
    String currentUser = ""test-user"";


    NfsConfiguration conf = new NfsConfiguration();
    conf.set(FileSystem.FS_DEFAULT_NAME_KEY, ""hdfs://localhost"");
    UserGroupInformation currentUserUgi
            = UserGroupInformation.createRemoteUser(currentUser);
    currentUserUgi.setAuthenticationMethod(KERBEROS);
    UserGroupInformation.setLoginUser(currentUserUgi);

    DFSClientCache cache = new DFSClientCache(conf);
    UserGroupInformation ugiResult
            = cache.getUserGroupInformation(userName, currentUserUgi);

    assertThat(ugiResult.getUserName(), is(userName));
    assertThat(ugiResult.getRealUser(), is(currentUserUgi));
    assertThat(
            ugiResult.getAuthenticationMethod(),
            is(UserGroupInformation.AuthenticationMethod.PROXY));
  }
",non-flaky,5
91412,strapdata_elassandra,PreBuiltXPackTransportClientTests.testPluginInstalled,"    @Test
    public void testPluginInstalled() {
        try (TransportClient client = new PreBuiltXPackTransportClient(Settings.EMPTY)) {
            Settings settings = client.settings();
            assertEquals(SecurityField.NAME4, NetworkModule.TRANSPORT_TYPE_SETTING.get(settings));
        }
    }
",non-flaky,5
99781,apache_cassandra,MessagingServiceTest.testUpdatesBackPressureOnSendWhenEnabledAndWithSupportedCallback,"    @Test
    public void testUpdatesBackPressureOnSendWhenEnabledAndWithSupportedCallback() throws UnknownHostException
    {
        MockBackPressureStrategy.MockBackPressureState backPressureState = (MockBackPressureStrategy.MockBackPressureState) messagingService.getBackPressureState(InetAddressAndPort.getByName(""127.0.0.2""));
        RequestCallback bpCallback = new BackPressureCallback();
        RequestCallback noCallback = new NoBackPressureCallback();
        Message<?> ignored = null;

        DatabaseDescriptor.setBackPressureEnabled(true);
        messagingService.updateBackPressureOnSend(InetAddressAndPort.getByName(""127.0.0.2""), noCallback, ignored);
        assertFalse(backPressureState.onSend);

        DatabaseDescriptor.setBackPressureEnabled(false);
        messagingService.updateBackPressureOnSend(InetAddressAndPort.getByName(""127.0.0.2""), bpCallback, ignored);
        assertFalse(backPressureState.onSend);

        DatabaseDescriptor.setBackPressureEnabled(true);
        messagingService.updateBackPressureOnSend(InetAddressAndPort.getByName(""127.0.0.2""), bpCallback, ignored);
        assertTrue(backPressureState.onSend);
    }
",non-flaky,5
97995,ReactiveX_RxJava,MergeTests.testMergeCovariance2,"    @Test
    public void testMergeCovariance2() {
        Observable<Media> o1 = Observable.from(new HorrorMovie(), new Movie(), new Media());
        Observable<Media> o2 = Observable.from(new Media(), new HorrorMovie());

        Observable<Observable<Media>> os = Observable.from(o1, o2);

        List<Media> values = Observable.merge(os).toList().toBlockingObservable().single();
    }
",non-flaky,5
19434,eclipse_xtext-core,XtextValidationTest.testBug322875_02,"	@Test
	public void testBug322875_02() throws Exception {
		URIConverter.URI_MAP.put(URI.createURI(""platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore""), URI.createURI(getClass().getResource(""/model/Ecore.ecore"").toExternalForm()));
		String testGrammar = ""grammar foo.Bar with org.eclipse.xtext.common.Terminals\n "" +
				"" import 'platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore'  "" +
				""Model returns EClass: name=ID;"";
		XtextResource resource = getResourceFromString(testGrammar);
		Diagnostic diag = Diagnostician.INSTANCE.validate(resource.getContents().get(0));
		assertNotNull(""diag"", diag);
		assertEquals(diag.toString(), 0, diag.getChildren().size());
		assertEquals(""diag.isOk"", Diagnostic.OK, diag.getSeverity());
	}
",non-flaky,5
94762,ktuukkan_marine-api,AbstractAISMessageListenerTest.testSequenceListenerWithMixedOrder,"    @Test
    public void testSequenceListenerWithMixedOrder() {

        SequenceListener sl = new SequenceListener();

        sl.sentenceRead(AIS_05_1);
        assertNull(sl.received);

        sl.sentenceRead(AIS_01);
        assertNull(sl.received);

        sl.sentenceRead(AIS_05_2);
        assertNull(sl.received);
    }
",non-flaky,5
60916,apache_druid,LongMeanNoNullAveragerFactoryTest.testCreateAverager,"  @Test
  public void testCreateAverager()
  {
    AveragerFactory<?, ?> fac = new LongMeanNoNullAveragerFactory(""test"", 5, 1, ""field"");
    Assert.assertThat(fac.createAverager(), IsInstanceOf.instanceOf(LongMeanNoNullAverager.class));
  }
",non-flaky,5
19502,eclipse_xtext-core,TraceRegionTest.testConstructorInvalidArgs_03,"	@Test(expected = IllegalArgumentException.class)
	public void testConstructorInvalidArgs_03() {
		new TraceRegion(0, 0, -1, 0, true, 0, 0, 0, 0, null, newURI());
	}
",non-flaky,5
170487,eclipse_jetty.project,ConnectorServerTest.testNoRegistryHostNonDefaultRegistryPort,"    @Test
    public void testNoRegistryHostNonDefaultRegistryPort() throws Exception
    {
        ServerSocket serverSocket = new ServerSocket(0);
        int registryPort = serverSocket.getLocalPort();
        serverSocket.close();
        connectorServer = new ConnectorServer(new JMXServiceURL(""service:jmx:rmi:///jndi/rmi://:"" + registryPort + ""/jmxrmi""), objectName);
        connectorServer.start();

        // Verify that I can connect to the RMI registry using a non-loopback address.
        new Socket(InetAddress.getLocalHost(), registryPort).close();
        assertThrows(ConnectException.class, () ->
        {
            // Verify that I cannot connect to the RMI registry using the loopback address.
            new Socket(InetAddress.getLoopbackAddress(), registryPort).close();
        });
    }
",non-flaky,5
156473,apache_commons-lang,DateUtilsFragmentTest.testMillisecondsOfYearWithDate,"    @Test
    public void testMillisecondsOfYearWithDate() {
        final long testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.YEAR);
        final Calendar cal = Calendar.getInstance();
        cal.setTime(aDate);
        assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE)
                                + (hours * DateUtils.MILLIS_PER_HOUR) + ((cal.get(Calendar.DAY_OF_YEAR) - 1)* DateUtils.MILLIS_PER_DAY),
                testResult);
    }
",non-flaky,5
99713,apache_cassandra,SettingsNodeTest.testDefaults,"    @Test
    public void testDefaults() throws Exception
    {
        SettingsNode settingsNode = new SettingsNode(new SettingsNode.Options());
        assertEquals(null, settingsNode.datacenter);
    }
",non-flaky,5
91416,strapdata_elassandra,TribeRestTestCase.compare,"    @TestGroup(enabled = true, sysProperty = ESRestTestCase.TESTS_REST)
            public int compare(RestTestCandidate o1, RestTestCandidate o2) {
                return o1.getTestPath().compareTo(o2.getTestPath());
            }
",non-flaky,5
97738,vojtechhabarta_typescript-generator,JsonUnwrappedTest.testPrivateField,"    @Test
    public void testPrivateField() {
        final Settings settings = TestUtils.settings();
        final String output = new TypeScriptGenerator(settings).generateTypeScript(Input.from(Person2.class));
        final String expected = ""\n""
                + ""interface Person2 {\n""
                + ""    first: string;\n""
                + ""    last: string;\n""
                + ""}\n""
                + ""\n""
                + ""interface Name {\n""
                + ""    first: string;\n""
                + ""    last: string;\n""
                + ""}\n""
                + """";
        Assert.assertEquals(expected.trim(), output.trim());
    }
",non-flaky,5
76971,Tencent_Firestorm,MetricsManagerTest.testMetricsManager,"  @Test
  public void testMetricsManager() {
    MetricsManager metricsManager = new MetricsManager();
    assertEquals(CollectorRegistry.defaultRegistry, metricsManager.getCollectorRegistry());

    CollectorRegistry expectedRegistry = new CollectorRegistry();
    metricsManager = new MetricsManager(expectedRegistry);
    assertEquals(expectedRegistry, metricsManager.getCollectorRegistry());

    String expectedName1 = ""counter"";
    String expectedHelp1 = ""Counter "" + expectedName1;
    metricsManager.addCounter(expectedName1);

    String expectedName2 = ""name2"";
    String expectedHelp2 = ""Gauge "" + expectedName2;
    String label = ""gaugeLabel"";
    Gauge gauge = metricsManager.addGauge(expectedName2, label);
    gauge.labels(""lv1"").inc();
    gauge.labels(""lv2"").inc();

    Map<String, MetricFamilySamples> metricsSamples = new HashMap<>();
    Enumeration<MetricFamilySamples> mfs = expectedRegistry.metricFamilySamples();
    while (mfs.hasMoreElements()) {
      MetricFamilySamples cur = mfs.nextElement();
      metricsSamples.put(cur.name, cur);
    }

    assertEquals(expectedHelp1, metricsSamples.get(expectedName1).help);
    assertEquals(1, metricsSamples.get(expectedName1).samples.size());

    assertEquals(expectedHelp2, metricsSamples.get(expectedName2).help);
    List<MetricFamilySamples.Sample> f = metricsSamples.get(expectedName2).samples;
    assertEquals(2, metricsSamples.get(expectedName2).samples.size());
    String[] actualLabelValues = metricsSamples
        .get(expectedName2).samples
        .stream().map(i -> i.labelValues.get(0))
        .collect(Collectors.toList()).toArray(new String[0]);
    Arrays.sort(actualLabelValues);
    assertArrayEquals(new String[]{""lv1"", ""lv2""}, actualLabelValues);
  }
",non-flaky,5
162669,OpenAPITools_openapi-generator,StoreApiTest.getOrderByIdTest,"    @Test
    public void getOrderByIdTest() {
        Long orderId = null;
        //Order response = api.getOrderById(orderId);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
",non-flaky,5
133999,CorfuDB_CorfuDB,ClusterResizeIT.clusterResizeTest,"    @Test(timeout = 300000)
    public void clusterResizeTest() {
        workflow(wf -> {
            wf.deploy();
            UniverseParams params = wf.getFixture().data();

            ClientParams clientFixture = ClientParams.builder().build();

            CorfuCluster corfuCluster = wf.getUniverse()
                    .getGroup(params.getGroupParamByIndex(0).getName());

            CorfuClient corfuClient = corfuCluster.getLocalCorfuClient();

            CorfuTable<String, String> table =
                    corfuClient.createDefaultCorfuTable(TestFixtureConst.DEFAULT_STREAM_NAME);

            for (int i = 0; i < TestFixtureConst.DEFAULT_TABLE_ITER; i++) {
                table.put(String.valueOf(i), String.valueOf(i));
            }

            List<CorfuServer> servers = Arrays.asList(
                    corfuCluster.getServerByIndex(1),
                    corfuCluster.getServerByIndex(2)
            );

            //should remove two nodes from corfu cluster
            {
                CorfuServer server0 = corfuCluster.getFirstServer();

                // Sequentially remove two nodes from cluster
                for (CorfuServer candidate : servers) {
                    corfuClient.getManagementView().removeNode(
                            candidate.getEndpoint(),
                            clientFixture.getNumRetry(),
                            clientFixture.getTimeout(),
                            clientFixture.getPollPeriod()
                    );
                }

                // Reset all nodes so that we do not end up with an OverwriteException.
                for (CorfuServer candidate : servers) {
                    corfuClient.getRuntime().getLayoutView().getRuntimeLayout()
                            .getBaseClient(candidate.getEndpoint()).reset();
                }

                // Verify layout contains only the node that is not removed
                corfuClient.invalidateLayout();
                assertThat(corfuClient.getLayout().getAllServers())
                        .containsExactly(server0.getEndpoint());

                // Verify data path working fine
                for (int x = 0; x < TestFixtureConst.DEFAULT_TABLE_ITER; x++) {
                    assertThat(table.get(String.valueOf(x))).isEqualTo(String.valueOf(x));
                }

                if (wf.getUniverseMode() == UniverseMode.VM) {
                    ScenarioUtils.waitUninterruptibly(Duration.ofSeconds(15));
                }
            }

            //should add two nodes back to corfu cluster
            {

                // Sequentially add two nodes back into cluster
                for (CorfuServer candidate : servers) {
                    corfuClient.getManagementView().addNode(
                            candidate.getEndpoint(),
                            clientFixture.getNumRetry(),
                            clientFixture.getTimeout(),
                            clientFixture.getPollPeriod()
                    );
                }

                // Verify layout should contain all three nodes
                corfuClient.invalidateLayout();
                assertThat(corfuClient.getLayout().getAllServers().size())
                        .isEqualTo(corfuCluster.nodes().size());

                // Verify data path working fine
                for (int x = 0; x < TestFixtureConst.DEFAULT_TABLE_ITER; x++) {
                    assertThat(table.get(String.valueOf(x))).isEqualTo(String.valueOf(x));
                }
            }

            corfuClient.shutdown();
        });
    }
",non-flaky,5
133946,CorfuDB_CorfuDB,BaseHandlerTest.testHandleRestart,"    @Test
    public void testHandleRestart() {
        ResponseMsg response = getResponseMsg(
                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.IGNORE),
                getRestartResponseMsg()
        );

        baseHandler.handleMessage(response, mockChannelHandlerContext);

        // Verify that the correct request was completed (once) with the appropriate value,
        // and that we did not complete exceptionally.
        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));
        verify(mockClientRouter).completeRequest(response.getHeader().getRequestId(), true);
    }
",non-flaky,5
99718,apache_cassandra,SettingsMiscTest.parsesVersionNoMatch,"    @Test
    public void parsesVersionNoMatch() throws Exception
    {
        String versionString = SettingsMisc.parseVersionFile(""VersionFileChangedFormat :("");
        assertEquals(""Unable to find version information"", versionString);
    }
",non-flaky,5
135735,Netflix_Hystrix,HystrixCommandTestWithCustomConcurrencyStrategy.testCommandRequiresContextConcurrencyStrategyDoesNotProvideItContextLeftUninitialized,"    @Test
    public void testCommandRequiresContextConcurrencyStrategyDoesNotProvideItContextLeftUninitialized() {
        HystrixConcurrencyStrategy strategy = new CustomConcurrencyStrategy(false);
        HystrixPlugins.getInstance().registerConcurrencyStrategy(strategy);

        //context is not set up
        HystrixRequestContext.setContextOnCurrentThread(null);
        HystrixCommand<Boolean> cmd = new TestCommand(true, true);
        assertTrue(cmd.execute()); //command execution not affected by missing context
        printRequestLog();
        assertNull(HystrixRequestLog.getCurrentRequest());
        assertNull(HystrixRequestLog.getCurrentRequest(strategy));
        assertNull(cmd.currentRequestLog);
    }
",non-flaky,5
98650,nutzam_nutz,SimpleAdaptorTest.issue_1310,"    @Test
    public void issue_1310() {
        resp = post(""/adaptor/issue1310"", new NutMap(""age"", ""123""));
        assertEquals(200, resp.getStatus());
        String str = resp.getContent();
        Issue1277 issue = Json.fromJson(Issue1277.class, str);
        assertEquals(123, issue.age);
        //assertEquals(""1495667792000"", resp.getContent());
    }
",non-flaky,5
89300,apache_samza,TestMonitorService.testShouldGroupRelevantMonitorConfigTogether,"  @Test
  public void testShouldGroupRelevantMonitorConfigTogether() {
    // Test that Monitor Loader groups relevant config together.
    Map<String, String> firstMonitorConfig = ImmutableMap.of(""monitor.monitor1.factory.class"",
                                                             ""org.apache.samza.monitor.DummyMonitor"",
                                                             ""monitor.monitor1.scheduling.interval.ms"",
                                                             ""100"");
    Map<String, String> secondMonitorConfig = ImmutableMap.of(""monitor.monitor2.factory.class"",
                                                              ""org.apache.samza.monitor.DummyMonitor"",
                                                              ""monitor.monitor2.scheduling.interval.ms"",
                                                              ""200"");
    MapConfig mapConfig = new MapConfig(ImmutableList.of(firstMonitorConfig, secondMonitorConfig));
    MonitorConfig expectedFirstConfig = new MonitorConfig(new MapConfig(firstMonitorConfig).subset(""monitor.monitor1.""));
    MonitorConfig expectedSecondConfig = new MonitorConfig(new MapConfig(secondMonitorConfig).subset(""monitor.monitor2.""));
    Map<String, MonitorConfig> expected = ImmutableMap.of(""monitor1"", expectedFirstConfig, ""monitor2"", expectedSecondConfig);
    assertEquals(expected, MonitorConfig.getMonitorConfigs(mapConfig));
  }
",non-flaky,5
122637,vespa-engine_vespa,YumTest.testQueryNotInstalled,"    @Test
    public void testQueryNotInstalled() {
        terminal.expectCommand(
                ""rpm -q fake-package --queryformat \""%{NAME}\\\\n%{EPOCH}\\\\n%{VERSION}\\\\n%{RELEASE}\\\\n%{ARCH}\"" 2>&1"",
                1,
                ""package fake-package is not installed"");

        Optional<YumPackageName> installed = yum.queryInstalled(taskContext, ""fake-package"");

        assertFalse(installed.isPresent());
    }
",non-flaky,5
98223,apache_jackrabbit,CreateRepositoryTest.createRepositories,"    @Test
    public void createRepositories() throws Exception {
        doCreateRepositories(""jackrabbit-1.1"");
    }
",non-flaky,5
112631,tbsalling_aismessages,AISMessageTest.isSerializable,"    @Test
    public void isSerializable() {
        // Type 1
        assertTrue(isSerializable(AISMessage.create(
            NMEAMessage.fromString(""!BSVDM,1,1,,A,1:02Ih001U0d=V:Op85<2aT>0<0F,0*3B"")
        )));

        // Type 4
        assertTrue(isSerializable(AISMessage.create(
            NMEAMessage.fromString(""!AIVDM,1,1,,B,4h3Ovk1udp6I9o>jPHEdjdW000S:,0*0C"")
        )));

        // Type 5
        assertTrue(isSerializable(AISMessage.create(
            NMEAMessage.fromString(""!BSVDM,2,1,5,A,5:02Ih01WrRsEH57J20H5P8u8N222222222222167H66663k085QBS1H,0*55""),
            NMEAMessage.fromString(""!BSVDM,2,2,5,A,888888888888880,2*38"")
        )));
    }
",non-flaky,5
21222,androidx_androidx,PreferenceDataStoreTest.testGetBooleanWithDataStoreOnMgr,"    @Test
    public void testGetBooleanWithDataStoreOnMgr() {
        mManager.setPreferenceDataStore(mDataStore);
        mScreen.addPreference(mPreference);

        mPreference.getBoolean(true);

        verify(mDataStore, atLeastOnce()).getBoolean(eq(KEY), eq(true));
    }
",non-flaky,5
20951,NationalSecurityAgency_timely,RateIteratorTest.testCounterRateWithReset,"    @Test
    public void testCounterRateWithReset() throws Exception {
        table.clear();
        long ts = System.currentTimeMillis();
        for (int j = 0; j < 10; j++) {
            for (int i = 0; i < 10; i++) {
                ts += 1000;
                Metric m = new Metric(""sys.cpu.user"", ts, i * 1.0D, tags);
                byte[] row = MetricAdapter.encodeRowKey(m);
                Key k = new Key(row, tags.get(0).join().getBytes(StandardCharsets.UTF_8),
                        MetricAdapter.encodeColQual(ts, """"), new byte[0], ts);
                Value v = new Value(MetricAdapter.encodeValue(m.getValue().getMeasure()));
                table.put(k, v);
            }
        }

        SortedMapIterator source = new SortedMapIterator(table);
        RateIterator iter = new RateIterator();
        IteratorSetting settings = new IteratorSetting(100, RateIterator.class);

        QueryRequest.RateOption option = new QueryRequest.RateOption();
        option.setCounter(true);
        option.setCounterMax(Long.MAX_VALUE);
        option.setResetValue(1);
        RateIterator.setRateOptions(settings, option);

        iter.init(source, settings.getOptions(), SCAN_IE);
        iter.seek(new Range(), EMPTY_COL_FAMS, true);
        for (int i = 0; i < 99; i++) {
            assertTrue(iter.hasTop());
            assertEquals(((i + 1) % 10 == 0 ? 0.0D : 0.001D), MetricAdapter.decodeValue(iter.getTopValue().get()),
                    0.0D);
            iter.next();
        }
        assertFalse(iter.hasTop());
    }
",non-flaky,5
76759,quarkusio_quarkus,CreateProjectMojoIT.testThatDefaultPackageAreReplaced,"    @Test
    public void testThatDefaultPackageAreReplaced() throws Exception {
        testDir = initEmptyProject(""projects/default-package-test"");
        assertThat(testDir).isDirectory();
        invoker = initInvoker(testDir);

        Properties properties = new Properties();
        properties.put(""className"", ""MyGreatResource"");
        properties.put(""extensions"", ""resteasy"");
        InvocationResult result = setup(properties);

        assertThat(result.getExitCode()).isZero();
        // As the directory is not empty (log) navigate to the artifactID directory
        testDir = new File(testDir, ""code-with-quarkus"");
        check(new File(testDir, ""src/main/java/org/acme/MyGreatResource.java""),
                ""package org.acme;"");
    }
",non-flaky,5
112144,apache_shardingsphere-elasticjob,ShardingItemParametersTest.assertNewWhenItemIsNotNumber,"    @Test(expected = JobConfigurationException.class)
    public void assertNewWhenItemIsNotNumber() {
        new ShardingItemParameters(""xxx=xxx"");
    }
",non-flaky,5
78277,apache_beam,StateTagTest.testBagEquality,"  @Test
  public void testBagEquality() {
    StateTag<?> fooVarInt1 = StateTags.bag(""foo"", VarIntCoder.of());
    StateTag<?> fooVarInt2 = StateTags.bag(""foo"", VarIntCoder.of());
    StateTag<?> fooBigEndian = StateTags.bag(""foo"", BigEndianIntegerCoder.of());
    StateTag<?> barVarInt = StateTags.bag(""bar"", VarIntCoder.of());

    assertEquals(fooVarInt1, fooVarInt2);
    assertNotEquals(fooVarInt1, fooBigEndian);
    assertNotEquals(fooVarInt1, barVarInt);
  }
",non-flaky,5
77438,opensearch-project_OpenSearch,DependencyLicensesTaskTests.givenProjectWithoutLicensesDirNorDependenciesThenShouldReturnSilently,"    @Test
    public void givenProjectWithoutLicensesDirNorDependenciesThenShouldReturnSilently() throws Exception {
        task.get().checkDependencies();
    }
",non-flaky,5
20939,NationalSecurityAgency_timely,AuthenticationServiceTest.testBasicAuthenticationLogin,"    @Test
    public void testBasicAuthenticationLogin() {
        UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(""test"", ""test1"");
        Authentication auth = AuthenticationService.getAuthenticationManager().authenticate(token);
        Collection<? extends GrantedAuthority> authorizations = auth.getAuthorities();
        authorizations.forEach(a -> {
            Assert.assertTrue(
                    a.getAuthority().equals(""A"") || a.getAuthority().equals(""B"") || a.getAuthority().equals(""C""));
        });
    }
",non-flaky,5
26892,wildfly_wildfly,InMemoryNamingStoreTestCase.testLookupEmptyName,"    @Test
    public void testLookupEmptyName() throws Exception {
        Object result = nameStore.lookup(new CompositeName());
        assertTrue(result instanceof NamingContext);
        result = nameStore.lookup(new CompositeName(""""));
        assertTrue(result instanceof NamingContext);
    }
",non-flaky,5
98365,Kong_unirest-java,InterceptorTest.setUp,"    @BeforeEach
    public void setUp() {
        super.setUp();
        interceptor = new UniInterceptor(""x-custom"", ""foo"");
    }
",non-flaky,5
95650,togglz_togglz,ShiroUsersTest.testShiroLoginAsFeatureAdmin,"    @Test
    public void testShiroLoginAsFeatureAdmin() throws Exception {

        WebClient client = new WebClient();

        TextPage beforeLogin = client.getPage(url + ""user"");
        assertTrue(beforeLogin.getContent().contains(""USER = null""));
        assertTrue(beforeLogin.getContent().contains(""ADMIN = null""));

        TextPage loginPage = client.getPage(url + ""login?user=ck"");
        assertTrue(loginPage.getContent().contains(""SUCCESS""));

        TextPage afterLogin = client.getPage(url + ""user"");
        assertTrue(afterLogin.getContent().contains(""USER = ck""));
        assertTrue(afterLogin.getContent().contains(""ADMIN = true""));

        TextPage logoutPage = client.getPage(url + ""logout"");
        assertTrue(logoutPage.getContent().contains(""SUCCESS""));

        TextPage afterLogout = client.getPage(url + ""user"");
        assertTrue(afterLogout.getContent().contains(""USER = null""));
        assertTrue(afterLogout.getContent().contains(""ADMIN = null""));

    }
",non-flaky,5
114046,aws_aws-sdk-java-v2,DeleteItemWithResponseIntegrationTest.deleteItem_returnConsumedCapacity_unset_consumedCapacityNull,"    @Test
    public void deleteItem_returnConsumedCapacity_unset_consumedCapacityNull() {
        Key key = Key.builder().partitionValue(1).sortValue(10).build();

        DeleteItemEnhancedResponse<Record> response = mappedTable.deleteItemWithResponse(r -> r.key(key));

        assertThat(response.consumedCapacity()).isNull();
    }
",non-flaky,5
26722,MundaneImmortal_pair-distribution-app,OpsPairsCombinationsTest.testGetPastPairs,"	@Test
	public void testGetPastPairs() {
		List<Developer> standardDevs = getStandardDevs();
		OpsPairCombinations devPairCombinations = new OpsPairCombinations(getPairsListFromDevs(standardDevs));
		
		
		assertThat(devPairCombinations.getPastPairs(0), is(getPairsListFromDevs(standardDevs).get(0).getPairs().values().stream().collect(Collectors.toList())));
		assertThat(devPairCombinations.getPastPairs(1), is(getPairsListFromDevs(standardDevs).get(1).getPairs().values().stream().collect(Collectors.toList())));
		assertThat(devPairCombinations.getPastPairs(2), is(getPairsListFromDevs(standardDevs).get(2).getPairs().values().stream().collect(Collectors.toList())));
	}
",non-flaky,5
104612,apache_pinot,SegmentPartitionLLCRealtimeClusterIntegrationTest.testPartitionRouting,"  @Test(dependsOnMethods = ""testPartitionMetadata"")
  public void testPartitionRouting()
      throws Exception {
    // Query partition 0
    {
      String query = ""SELECT COUNT(*) FROM mytable WHERE DestState = 'CA'"";
      JsonNode response = postQuery(query);

      String queryToCompare = ""SELECT COUNT(*) FROM mytable WHERE DestState BETWEEN 'CA' AND 'CA'"";
      JsonNode responseToCompare = postQuery(queryToCompare);

      // Should only query the segments for partition 0
      assertEquals(response.get(MetadataKey.NUM_SEGMENTS_QUERIED.getName()).asInt(), 2);
      assertEquals(responseToCompare.get(MetadataKey.NUM_SEGMENTS_QUERIED.getName()).asInt(), 4);

      assertEquals(response.get(""aggregationResults"").get(0).get(""value"").asInt(),
          responseToCompare.get(""aggregationResults"").get(0).get(""value"").asInt());
    }

    // Query partition 1
    {
      String query = ""SELECT COUNT(*) FROM mytable WHERE DestState = 'FL'"";
      JsonNode response = postQuery(query);

      String queryToCompare = ""SELECT COUNT(*) FROM mytable WHERE DestState BETWEEN 'FL' AND 'FL'"";
      JsonNode responseToCompare = postQuery(queryToCompare);

      // Should only query the segments for partition 1
      assertEquals(response.get(MetadataKey.NUM_SEGMENTS_QUERIED.getName()).asInt(), 2);
      assertEquals(responseToCompare.get(MetadataKey.NUM_SEGMENTS_QUERIED.getName()).asInt(), 4);

      assertEquals(response.get(""aggregationResults"").get(0).get(""value"").asInt(),
          responseToCompare.get(""aggregationResults"").get(0).get(""value"").asInt());
    }
  }
",non-flaky,5
177171,line_armeria,SamlServiceProviderTest.shouldConsumeAssertion_HttpRedirect,"    @Test
    public void shouldConsumeAssertion_HttpRedirect() throws Exception {
        final Response response =
                getAuthResponse(""http://"" + spHostname + ':' + rule.httpPort() + ""/saml/acs/redirect"");
        final AggregatedHttpResponse res = sendViaHttpRedirectBindingProtocol(""/saml/acs/redirect"",
                                                                              SAML_RESPONSE, response);

        assertThat(res.status()).isEqualTo(HttpStatus.FOUND);
        assertThat(res.headers().get(HttpHeaderNames.LOCATION)).isEqualTo(""/"");
    }
",non-flaky,5
179496,abel533_Mapper,TypeHandlerTest2.testInsert,"    @Test
    public void testInsert(){
        SqlSession sqlSession = getSqlSession();
        try {
            User2Mapper userMapper = sqlSession.getMapper(User2Mapper.class);

            User2 user = new User2();
            user.setId(3);
            user.setName(""liuzh"");
            Address address = new Address();
            address.setProvince(""Hebei"");
            address.setCity(""Qinhuangdao"");
            user.setAddress(address);
            user.setState(StateEnum.enabled);

            Assert.assertEquals(1, userMapper.insert(user));

            user = userMapper.selectByPrimaryKey(3);
            Assert.assertEquals(""liuzh"", user.getName());
            Assert.assertEquals(""Hebei"", user.getAddress().getProvince());
            Assert.assertEquals(""Qinhuangdao"", user.getAddress().getCity());
            Assert.assertEquals(StateEnum.enabled, user.getState());
        } finally {
            sqlSession.close();
        }
    }
",non-flaky,5
98247,apache_jackrabbit,ReadTest.testEmptyGlobRestriction3,"    @Test
    public void testEmptyGlobRestriction3()throws Exception{
        Node child2 = superuser.getNode(path).addNode(""child2"");
        String childNPath2 = child2.getPath();
        superuser.save();

        try {
            Group group1 = getTestGroup();
            Group group2 = getUserManager(superuser).createGroup(""group2"");
            group2.addMember(testUser);
            Group group3 = getUserManager(superuser).createGroup(""group3"");
            superuser.save();

            assertTrue(group1.isDeclaredMember(testUser));
            assertTrue(group2.isDeclaredMember(testUser));
            assertFalse(group3.isDeclaredMember(testUser));

            Privilege[] read = privilegesFromName(Privilege.JCR_READ);

            withdrawPrivileges(path, group1.getPrincipal(), read, Collections.EMPTY_MAP);
            Map<String, Value> emptyStringRestriction = new HashMap<String, Value>(getRestrictions(superuser, path));
            emptyStringRestriction.put(AccessControlConstants.P_GLOB.toString(), vf.createValue(""""));
            givePrivileges(path, group1.getPrincipal(), read, emptyStringRestriction);

            withdrawPrivileges(childNPath, group2.getPrincipal(), read, Collections.EMPTY_MAP);
            emptyStringRestriction = new HashMap<String, Value>(getRestrictions(superuser, childNPath));
            emptyStringRestriction.put(AccessControlConstants.P_GLOB.toString(), vf.createValue(""""));
            givePrivileges(childNPath, group2.getPrincipal(), read, emptyStringRestriction);

            withdrawPrivileges(childNPath2, group3.getPrincipal(), read, Collections.EMPTY_MAP);
            emptyStringRestriction = new HashMap<String, Value>(getRestrictions(superuser, childNPath2));
            emptyStringRestriction.put(AccessControlConstants.P_GLOB.toString(), vf.createValue(""""));
            givePrivileges(childNPath2, group3.getPrincipal(), read, emptyStringRestriction);

            // NOTE: test-session is created here and is expected to reflect the
            // group membership changes made above.
            Session testSession = getTestSession();
            assertTrue(testSession.nodeExists(path));
            assertTrue(testSession.nodeExists(childNPath));
            assertFalse(testSession.nodeExists(childNPath2));
        } finally {
            Authorizable g2 = getUserManager(superuser).getAuthorizable(""group2"");
            if (g2 != null) {
                g2.remove();
            }
            Authorizable g3 = getUserManager(superuser).getAuthorizable(""group3"");
            if (g3 != null) {
                g3.remove();
            }
            superuser.save();
        }
    }
",non-flaky,5
38214,palantir_atlasdb,RocksDbKeyValueServiceTest.testCreateTables,"    @Test
    public void testCreateTables() {
        db.putMetadataForTable(TABLE, ""yoyo"".getBytes());
        final byte[] meta = db.getMetadataForTable(TABLE);
        assertEquals(""yoyo"", new String(meta));
    }
",non-flaky,5
175738,GoogleCloudPlatform_google-cloud-eclipse,MultipleConnectionsTest.testDefaultBehaviour,"	@Test
	public void testDefaultBehaviour() throws CoreException, InterruptedException {
		connector = new SocketListenMultiConnector();
		Map<String, String> arguments = new HashMap<>();
		arguments.put(""port"", Integer.toString(port));
		connector.connect(arguments, new NullProgressMonitor(), launch);
		Thread.sleep(200);

		assertTrue(""first connect should succeed"", connect());
		assertFalse(""second connect should fail"", connect());
	}
",non-flaky,5
43108,trinodb_trino,BaseConnectorSmokeTest.ensureDistributedQueryRunner,"    @Test
    public void ensureDistributedQueryRunner()
    {
        assertThat(getQueryRunner().getNodeCount()).as(""query runner node count"")
                .isGreaterThanOrEqualTo(3);
    }
",non-flaky,5
160372,ConsenSys_teku,MinimalSigningHistoryTest.shouldReadMetadataFromMinimalJson,"  @Test
  public void shouldReadMetadataFromMinimalJson() throws IOException {
    final String minimalJson =
        Resources.toString(Resources.getResource(""format2_minimal.json""), StandardCharsets.UTF_8);

    JsonNode jsonNode = mapper.readTree(minimalJson);
    JsonNode metadataJson = jsonNode.get(""metadata"");
    Metadata metadata = mapper.treeToValue(metadataJson, Metadata.class);
    assertThat(metadata).isEqualTo(new Metadata(INTERCHANGE_VERSION, GENESIS_ROOT));

    List<SigningHistory> minimalSigningHistoryList =
        Arrays.asList(mapper.readValue(jsonNode.get(""data"").toString(), SigningHistory[].class));

    SigningHistory element =
        new SigningHistory(
            blsPubKey,
            new ValidatorSigningRecord(
                GENESIS_ROOT, UInt64.valueOf(81952), UInt64.valueOf(2290), UInt64.valueOf(3007)));
    assertThat(minimalSigningHistoryList).containsExactly(element);
  }
",non-flaky,5
178050,aosp-mirror_platform_frameworks_support,PlaybackControlSupportGlueTest.testFastForwardToMaxThenReset,"    @Test
    public void testFastForwardToMaxThenReset() {
        PlaybackControlsRow row = new PlaybackControlsRow();
        glue.setControlsRow(row);
        SparseArrayObjectAdapter adapter = (SparseArrayObjectAdapter)
                row.getPrimaryActionsAdapter();
        PlaybackControlsRow.MultiAction playPause = (PlaybackControlsRow.MultiAction) adapter
                .lookup(PlaybackControlSupportGlue.ACTION_PLAY_PAUSE);
        PlaybackControlsRow.MultiAction fastForward = (PlaybackControlsRow.MultiAction) adapter
                .lookup(PlaybackControlSupportGlue.ACTION_FAST_FORWARD);
        PlaybackControlsRow.MultiAction rewind = (PlaybackControlsRow.MultiAction) adapter
                .lookup(PlaybackControlSupportGlue.ACTION_REWIND);

        assertFalse(glue.isMediaPlaying());
        glue.onActionClicked(playPause);
        assertTrue(glue.isMediaPlaying());
        assertEquals(PlaybackControlSupportGlue.PLAYBACK_SPEED_NORMAL, glue.getCurrentSpeedId());
        assertEquals(0, fastForward.getIndex());
        assertEquals(0, rewind.getIndex());

        // click multiple times to reach PLAYBACK_SPEED_FAST_L2
        glue.onActionClicked(fastForward);
        assertEquals(PlaybackControlSupportGlue.PLAYBACK_SPEED_FAST_L0, glue.getCurrentSpeedId());
        assertEquals(1, fastForward.getIndex());
        assertEquals(0, rewind.getIndex());
        glue.onActionClicked(fastForward);
        assertEquals(PlaybackControlSupportGlue.PLAYBACK_SPEED_FAST_L1, glue.getCurrentSpeedId());
        assertEquals(2, fastForward.getIndex());
        assertEquals(0, rewind.getIndex());
        glue.onActionClicked(fastForward);
        assertEquals(PlaybackControlSupportGlue.PLAYBACK_SPEED_FAST_L2, glue.getCurrentSpeedId());
        assertEquals(3, fastForward.getIndex());
        assertEquals(0, rewind.getIndex());
        glue.onActionClicked(fastForward);
        assertEquals(PlaybackControlSupportGlue.PLAYBACK_SPEED_FAST_L2, glue.getCurrentSpeedId());
        assertEquals(3, fastForward.getIndex());
        assertEquals(0, rewind.getIndex());

        // press playPause again put it back to play
        glue.onActionClicked(playPause);
        assertEquals(PlaybackControlSupportGlue.PLAYBACK_SPEED_NORMAL, glue.getCurrentSpeedId());
        assertEquals(0, fastForward.getIndex());
        assertEquals(0, rewind.getIndex());
    }
",non-flaky,5
98252,apache_jackrabbit,UserManagerTest.testQueryUserWithSpecialCharId,"    @Test
    public void testQueryUserWithSpecialCharId() throws Exception {
        List<String> ids = Arrays.asList(""'"", ""]"");
        for (String id : ids) {
            User user = null;
            try {
                user = userMgr.createUser(id, ""pw"");
                superuser.save();

                boolean found = false;
                String query = ""{\""condition\"":[{\""named\"":\"""" + id + ""\""}]}"";
                AuthorizableQueryManager queryManager = new AuthorizableQueryManager(userMgr, superuser.getValueFactory());
                Iterator<Authorizable> it = queryManager.execute(query);
                while (it.hasNext() && !found) {
                    Authorizable a = it.next();
                    found = id.equals(a.getID());
                }
                assertTrue(found);
            } finally {
                if (user != null) {
                    user.remove();
                    superuser.save();
                }
            }
        }
    }
",non-flaky,5
177982,aosp-mirror_platform_frameworks_support,BidiFormatterTest.testIsRtl,"    @Test
    public void testIsRtl() {
        assertEquals(true, BidiFormatter.getInstance(true).isRtl(HE));
        assertEquals(true, BidiFormatter.getInstance(false).isRtl(HE));

        assertEquals(false, BidiFormatter.getInstance(true).isRtl(EN));
        assertEquals(false, BidiFormatter.getInstance(false).isRtl(EN));
    }
",non-flaky,5
38192,palantir_atlasdb,SchemasTest.testGetFullTableNameLegacy,"    @Test
    public void testGetFullTableNameLegacy() {
        MatcherAssert.assertThat(
                Schemas.getFullTableName(TABLE_NAME, Namespace.create(""met"")),
                Matchers.equalTo(TABLE_NAME)
        );
    }
",non-flaky,5
77528,dropwizard_dropwizard,DropwizardClientRuleTest.shouldGetDefaultStringBodyFromDropWizard,"    @Test
    public void shouldGetDefaultStringBodyFromDropWizard() throws IOException {
        final URL url = new URL(RULE_WITH_CLASS.baseUri() + ""/test"");
        assertThat(Resources.toString(url, StandardCharsets.UTF_8)).isEqualTo(TestResource.DEFAULT_MESSAGE);
    }
",non-flaky,5
113748,salesforce_reactive-grpc,ReactorGrpcSubscriberWhiteboxVerificationTest.triggerRequest,"@Test(timeOut = 3000)
    public Subscriber<Message> createSubscriber(WhiteboxSubscriberProbe<Message> probe) {
        return new ReactivePublisherBackpressureOnReadyHandlerClient<Message>(new StubServerCallStreamObserver()) {
            @Override
            public void onSubscribe(final Subscription s) {
                super.onSubscribe(s);

                // register a successful Subscription, and create a Puppet,
                // for the WhiteboxVerification to be able to drive its tests:
                probe.registerOnSubscribe(new SubscriberPuppet() {

                    @Override
                    public void triggerRequest(long elements) {
                        s.request(elements);
                    }
",non-flaky,5
91395,OpenLCB_OpenLCB_Java,DatagramRejectedMessageTest.testCTor,"    @Test
    public void testCTor() {
        NodeID id1 = new NodeID(new byte[]{1, 1, 0, 0, 0, 4});
        NodeID id2 = new NodeID(new byte[]{1, 1, 0, 0, 4, 4});
        DatagramRejectedMessage t = new DatagramRejectedMessage(id1,id2,1);
        Assert.assertNotNull(""exists"",t);
    }
",non-flaky,5
114087,aws_aws-sdk-java-v2,KeyTest.getKeyMap_partitionOnly,"    @Test
    public void getKeyMap_partitionOnly() {
        Map<String, AttributeValue> expectedResult = new HashMap<>();
        expectedResult.put(""gsi_id"", AttributeValue.builder().s(""id123"").build());
        assertThat(partitionOnlyKey.keyMap(FakeItemWithIndices.getTableSchema(), ""gsi_1""), is(expectedResult));
    }
",non-flaky,5
97976,ReactiveX_RxJava,ObservableTests.onSubscribe,"    @Test
    public void testOnSubscribeFails() {
        @SuppressWarnings(""unchecked"")
        Observer<String> observer = mock(Observer.class);
        final RuntimeException re = new RuntimeException(""bad impl"");
        Observable<String> o = Observable.create(new OnSubscribeFunc<String>() {

            @Override
            public Subscription onSubscribe(Observer<? super String> t1) {
                throw re;
            }
",non-flaky,5
95736,togglz_togglz,JDBCStateRepositoryTest.testShouldPropagateTheExceptionWhenWriteFails,"	@Test(expected = IllegalStateException.class)
	public void testShouldPropagateTheExceptionWhenWriteFails() throws SQLException {

		/*
		 * GIVEN a feature state to persist
		 */
		FeatureState state = new FeatureState(TestFeature.F1).enable();

		/**
		 * AND the datasource throws an exception when we try to get a
		 * connection
		 */
		DataSource spyedDataSource = Mockito.spy(dataSource);
		repository = new JDBCStateRepository(spyedDataSource, ""TOGGLZ"", true, DefaultMapSerializer.multiline());
		Mockito.when(spyedDataSource.getConnection()).thenThrow(new SQLException(""Failed to get a connection""));

		/*
		 * WHEN the feature state is persisted
		 */
		repository.setFeatureState(state);

		/*
		 * THEN an IllegalStateException is thrown
		 */
    }
",non-flaky,5
133898,julianghionoiu_dpnt-coverage,LanguageTest.should_throw_exception_if_language_not_recognised,"    @Test
    public void should_throw_exception_if_language_not_recognised() throws IllegalLanguageException {
        thrown.expect(IllegalLanguageException.class);
        Language.of(""none"");
    }
",non-flaky,5
137097,spring-projects_spring-framework,AbstractAnnotationMetadataTests.isAnnotatedWhenMatchesMetaAnnotationReturnsTrue,"	@Test
	public void isAnnotatedWhenMatchesMetaAnnotationReturnsTrue() {
		assertThat(get(WithMetaAnnotations.class).isAnnotated(MetaAnnotation2.class.getName())).isTrue();
	}
",non-flaky,5
156383,apache_commons-lang,ClassPathUtilsTest.testToFullyQualifiedPathClassNull,"    @Test
    public void testToFullyQualifiedPathClassNull() {
        assertThrows(NullPointerException.class, () -> ClassPathUtils.toFullyQualifiedPath(ClassPathUtils.class, null));
    }
",non-flaky,5
77461,opensearch-project_OpenSearch,LoggingListenerTests.annotatedTestMethod,"        @TestLogging(value = ""xyz:TRACE,foo:WARN,foo.bar:ERROR"", reason = ""testing TestLogging method annotations"")
        public void annotatedTestMethod() {

        }
",non-flaky,5
338,apache_hadoop,TestExportsTable.testHdfsExportPoint,"  @Test
  public void testHdfsExportPoint() throws IOException {
    NfsConfiguration config = new NfsConfiguration();
    MiniDFSCluster cluster = null;

    // Use emphral port in case tests are running in parallel
    config.setInt(""nfs3.mountd.port"", 0);
    config.setInt(""nfs3.server.port"", 0);
    config.set(""nfs.http.address"", ""0.0.0.0:0"");

    try {
      cluster = new MiniDFSCluster.Builder(config).numDataNodes(1).build();
      cluster.waitActive();

      // Start nfs
      final Nfs3 nfsServer = new Nfs3(config);
      nfsServer.startServiceInternal(false);

      Mountd mountd = nfsServer.getMountd();
      RpcProgramMountd rpcMount = (RpcProgramMountd) mountd.getRpcProgram();
      assertTrue(rpcMount.getExports().size() == 1);

      String exportInMountd = rpcMount.getExports().get(0);
      assertTrue(exportInMountd.equals(""/""));

    } finally {
      if (cluster != null) {
        cluster.shutdown();
      }
    }
  }
",non-flaky,5
159633,liquibase_liquibase,OracleIntegrationTest.testRunChangeLog,"    @Test
    public void testRunChangeLog() throws Exception {
        super.testRunChangeLog();    //To change body of overridden methods use File | Settings | File Templates.
    }
",non-flaky,5
283,apache_hadoop,TestOffsetRange.testConstructor3,"  @Test(expected = IllegalArgumentException.class)
  public void testConstructor3() throws IOException {
    new OffsetRange(-3, -1);
  }
",non-flaky,5
26849,wildfly_wildfly,NamingSubsystemTestCase.testCompositeBindingOps,"    @Test
    public void testCompositeBindingOps() throws Exception {
        final KernelServices services = createKernelServicesBuilder(createAdditionalInitialization()).setSubsystemXml(getSubsystemXml()).build();
        // add binding 'alookup' through composite op
        // note that a binding-type of 'lookup' requires 'lookup' attr value, which in this case is set by a followup step
        final ModelNode addr = Operations.createAddress(ModelDescriptionConstants.SUBSYSTEM, NamingExtension.SUBSYSTEM_NAME, NamingSubsystemModel.BINDING, ""java:global/alookup"");
        final ModelNode addOp = Operations.createAddOperation(addr);
        addOp.get(NamingSubsystemModel.BINDING_TYPE).set(NamingSubsystemModel.LOOKUP);
        final ModelNode compositeOp = Operations.CompositeOperationBuilder.create()
                .addStep(addOp)
                .addStep(Operations.createWriteAttributeOperation(addr, NamingSubsystemModel.LOOKUP, ""java:global/a""))
                .build().getOperation();
        ModelTestUtils.checkOutcome(services.executeOperation(compositeOp));
    }
",non-flaky,5
33739,alibaba_fastjson,FastJsonViewTest.test6,"    @Test
    public void test6() throws Exception {
        mockMvc.perform(
                (post(""/fastjsonview/test6"").characterEncoding(""UTF-8"")
                        .contentType(MediaType.APPLICATION_JSON))).andExpect(status
                ().isOk()).andDo(print()).andExpect(content().string(""{\""id\"":100}""));
    }
",non-flaky,5
26864,wildfly_wildfly,NamingEventCoordinatorTestCase.testFireObjectEvent,"    @Test
    public void testFireObjectEvent() throws Exception {
        final NamingEventCoordinator coordinator = new NamingEventCoordinator();

        final CollectingListener objectListener = new CollectingListener(1);
        coordinator.addListener(""test/path"", EventContext.OBJECT_SCOPE, objectListener);
        final CollectingListener subtreeListener = new CollectingListener(0);
        coordinator.addListener(""test"", EventContext.SUBTREE_SCOPE, subtreeListener);
        final CollectingListener oneLevelListener = new CollectingListener(0);
        coordinator.addListener(""test"", EventContext.ONELEVEL_SCOPE, oneLevelListener);

        coordinator.fireEvent(context, new CompositeName(""test/path""), null, null, NamingEvent.OBJECT_ADDED, ""bind"", EventContext.OBJECT_SCOPE);

        objectListener.latch.await(1, TimeUnit.SECONDS);

        assertEquals(1, objectListener.capturedEvents.size());
        assertTrue(oneLevelListener.capturedEvents.isEmpty());
        assertTrue(subtreeListener.capturedEvents.isEmpty());
    }
",non-flaky,5
135750,Netflix_Hystrix,HystrixPropertiesChainedArchaiusPropertyTest.testChainingString,"    @Test
    public void testChainingString() throws Exception {

        DynamicStringProperty node1 = new DynamicStringProperty(""node1"", ""v1"");
        StringProperty node2 = new HystrixPropertiesChainedArchaiusProperty.StringProperty(""node2"", node1);

        HystrixPropertiesChainedArchaiusProperty.StringProperty node3 = new HystrixPropertiesChainedArchaiusProperty.StringProperty(""node3"", node2);

        assertTrue("""" + node3.get(), ""v1"".equals(node3.get()));

        ConfigurationManager.getConfigInstance().setProperty(""node1"", ""v11"");
        assertTrue(""v11"".equals(node3.get()));

        ConfigurationManager.getConfigInstance().setProperty(""node2"", ""v22"");
        assertTrue(""v22"".equals(node3.get()));

        ConfigurationManager.getConfigInstance().clearProperty(""node1"");
        assertTrue(""v22"".equals(node3.get()));

        ConfigurationManager.getConfigInstance().setProperty(""node3"", ""v33"");
        assertTrue(""v33"".equals(node3.get()));

        ConfigurationManager.getConfigInstance().clearProperty(""node2"");
        assertTrue(""v33"".equals(node3.get()));

        ConfigurationManager.getConfigInstance().setProperty(""node2"", ""v222"");
        assertTrue(""v33"".equals(node3.get()));

        ConfigurationManager.getConfigInstance().clearProperty(""node3"");
        assertTrue(""v222"".equals(node3.get()));

        ConfigurationManager.getConfigInstance().clearProperty(""node2"");
        assertTrue(""v1"".equals(node3.get()));

        ConfigurationManager.getConfigInstance().setProperty(""node2"", ""v2222"");
        assertTrue(""v2222"".equals(node3.get()));
    }
",non-flaky,5
53146,cloudfoundry_uaa,SamlConfigTest.map_is_not_null_by_default,"    @Test
    public void map_is_not_null_by_default() {
        Map<String, SamlKey> keys = config.getKeys();
        assertNotNull(keys);
        assertEquals(0, keys.size());
        assertNull(config.getActiveKeyId());
    }
",non-flaky,5
20974,NationalSecurityAgency_timely,WebSocketRequestDeserializationTest.testRemoveDeserialization,"    @Test
    public void testRemoveDeserialization() throws Exception {
        // @formatter:off
		String json = ""{ ""
				       + ""\""operation\"" : \""remove\"",""
				       + "" \""sessionId\"": \""1234\"",""
				       + "" \""metric\"" : \""sys.cpu.user\""""
				    + ""}"";
		// @formatter:on
        WebSocketRequest request = JsonUtil.getObjectMapper().readValue(json.getBytes(), WebSocketRequest.class);
        Assert.assertNotNull(request);
        Assert.assertEquals(RemoveSubscription.class, request.getClass());
        Assert.assertEquals(""1234"", ((RemoveSubscription) request).getSessionId());
        Assert.assertEquals(""sys.cpu.user"", ((RemoveSubscription) request).getMetric());
    }
",non-flaky,5
26719,MundaneImmortal_pair-distribution-app,PairTest.testTrackDefault,"	@Test
	public void testTrackDefault() {
		Pair subject = new Pair();
		
		assertThat(subject.getTrack(), is(""""));
	}
",non-flaky,5
162765,OpenAPITools_openapi-generator,EnumTestTest.enumStringTest,"    @Test
    public void enumStringTest() {
        // TODO: test enumString
    }
",non-flaky,5
177189,line_armeria,RequestContextCurrentTraceContextTest.newScope_notOnEventLoop,"    @Test
    public void newScope_notOnEventLoop() {
        final TraceContext traceContext2 = TraceContext.newBuilder().traceId(1).spanId(2).build();

        try (SafeCloseable requestContextScope = ctx.push()) {
            try (Scope traceContextScope = currentTraceContext.newScope(traceContext)) {
                assertThat(traceContextScope).hasToString(""InitialRequestScope"");
                assertThat(currentTraceContext.get()).isEqualTo(traceContext);

                when(eventLoop.inEventLoop()).thenReturn(false);
                try (Scope traceContextScope2 = currentTraceContext.newScope(traceContext2)) {
                    assertThat(traceContextScope2).hasToString(""ThreadLocalScope"");
                    assertThat(currentTraceContext.get()).isEqualTo(traceContext2);
                }
                when(eventLoop.inEventLoop()).thenReturn(true);
                assertThat(currentTraceContext.get()).isEqualTo(traceContext);
            }
            // the first scope is attached to the request context and cleared when that's destroyed
            assertThat(currentTraceContext.get()).isEqualTo(traceContext);
        }
    }
",non-flaky,5
134,nutzam_nutz,JsonTest.test_empty_obj_toJson,"@Test
public void test_empty_obj_toJson() {
    String j = Json.toJson(new Person(), JsonFormat.compact().setQuoteName(true));
    assertEquals(""{\""age\"":0,\""num\"":0}"", j);
}",unordered collections,3
89359,apache_samza,TestKafkaCheckpointManager.testReadFailsOnSerdeExceptions,"  @Test(expected = SamzaException.class)
  public void testReadFailsOnSerdeExceptions() throws InterruptedException {
    setupSystemFactory(config());
    List<IncomingMessageEnvelope> checkpointEnvelopes =
        ImmutableList.of(newCheckpointV1Envelope(TASK0, buildCheckpointV1(INPUT_SSP0, ""0""), ""0""));
    setupConsumer(checkpointEnvelopes);
    // wire up an exception throwing serde with the checkpointManager
    CheckpointV1Serde checkpointV1Serde = mock(CheckpointV1Serde.class);
    doThrow(new RuntimeException(""serde failed"")).when(checkpointV1Serde).fromBytes(any());
    KafkaCheckpointManager checkpointManager =
        new KafkaCheckpointManager(CHECKPOINT_SPEC, this.systemFactory, true, config(), this.metricsRegistry,
            checkpointV1Serde, CHECKPOINT_V2_SERDE, KAFKA_CHECKPOINT_LOG_KEY_SERDE);
    checkpointManager.register(TASK0);

    // expect an exception
    checkpointManager.readLastCheckpoint(TASK0);
  }
",non-flaky,5
170482,eclipse_jetty.project,ObjectMBeanUtilTest.testInvokeNoSuchMethodException,"    @Test
    public void testInvokeNoSuchMethodException()
    {
        // DerivedMBean contains a managed method with the name good,
        // we must call this method without any arguments.
        ReflectionException e = assertThrows(ReflectionException.class, () ->
            objectMBean.invoke(""good"", new Object[0], new String[]{
                ""int aone""
            }));

        assertNotNull(e, ""A ReflectionException must have occurred by now as we cannot call a method with wrong signature"");
    }
",non-flaky,5
170534,eclipse_jetty.project,TestAnnotationInheritance.destroy,"    @AfterEach
    public void destroy() throws Exception
    {
        classNames.clear();
        InitialContext ic = new InitialContext();
        Context comp = (Context)ic.lookup(""java:comp"");
        comp.destroySubcontext(""env"");
    }
",non-flaky,5
135795,Netflix_Hystrix,CumulativeCollapserEventCounterStreamTest.testCollapsed,"    @Test
    public void testCollapsed() {
        HystrixCollapserKey key = HystrixCollapserKey.Factory.asKey(""CumulativeCollapser-B"");
        stream = CumulativeCollapserEventCounterStream.getInstance(key, 10, 100);
        stream.startCachingStreamValuesIfUnstarted();

        final CountDownLatch latch = new CountDownLatch(1);
        stream.observe().take(10).subscribe(getSubscriber(latch));

        for (int i = 0; i < 3; i++) {
            CommandStreamTest.Collapser.from(key, i).observe();
        }

        try {
            assertTrue(latch.await(10000, TimeUnit.MILLISECONDS));
        } catch (InterruptedException ex) {
            fail(""Interrupted ex"");
        }
        assertEquals(HystrixEventType.Collapser.values().length, stream.getLatest().length);
        long[] expected = new long[HystrixEventType.Collapser.values().length];
        expected[HystrixEventType.Collapser.BATCH_EXECUTED.ordinal()] = 1;
        expected[HystrixEventType.Collapser.ADDED_TO_BATCH.ordinal()] = 3;
        System.out.println(""ReqLog : "" + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());
        assertArrayEquals(expected, stream.getLatest());
    }
",non-flaky,5
179495,abel533_Mapper,TypeHandlerTest2.testSelect,"    @Test
    public void testSelect(){
        SqlSession sqlSession = getSqlSession();
        try {
            User2Mapper userMapper = sqlSession.getMapper(User2Mapper.class);
            List<User2> users = userMapper.selectAll();
            Assert.assertNotNull(users);
            Assert.assertEquals(2, users.size());

            Assert.assertEquals(""abel533"", users.get(0).getName());
            Assert.assertEquals(""Hebei"", users.get(0).getAddress().getProvince());
            Assert.assertEquals(""Shijiazhuang"", users.get(0).getAddress().getCity());
            Assert.assertEquals(StateEnum.enabled, users.get(0).getState());

            Assert.assertEquals(""isea533"", users.get(1).getName());
            Assert.assertEquals(""Hebei/Handan"", users.get(1).getAddress().toString());
            Assert.assertEquals(StateEnum.disabled, users.get(1).getState());

            User2 user = userMapper.selectByPrimaryKey(1);
            Assert.assertEquals(""abel533"", user.getName());
            Assert.assertEquals(""Hebei"", user.getAddress().getProvince());
            Assert.assertEquals(""Shijiazhuang"", user.getAddress().getCity());
            Assert.assertEquals(StateEnum.enabled, user.getState());
        } finally {
            sqlSession.close();
        }
    }
",non-flaky,5
106615,Alluxio_alluxio,AlluxioJniFuseFileSystemTest.chownWithoutValidUidAndGid,"  @Test
  public void chownWithoutValidUidAndGid() throws Exception {
    long uid = AlluxioJniFuseFileSystem.ID_NOT_SET_VALUE;
    long gid = AlluxioJniFuseFileSystem.ID_NOT_SET_VALUE;
    mFuseFs.chown(""/foo/bar"", uid, gid);
    verify(mFileSystem, never()).setAttribute(any());

    uid = AlluxioJniFuseFileSystem.ID_NOT_SET_VALUE_UNSIGNED;
    gid = AlluxioJniFuseFileSystem.ID_NOT_SET_VALUE_UNSIGNED;
    mFuseFs.chown(""/foo/bar"", uid, gid);
    verify(mFileSystem, never()).setAttribute(any());
  }
",non-flaky,5
78328,apache_beam,ReduceFnRunnerTest.testCombiningAccumulatingEventTime,"  @Test
  public void testCombiningAccumulatingEventTime() throws Exception {
    WindowingStrategy<?, IntervalWindow> strategy =
        WindowingStrategy.of((WindowFn<?, IntervalWindow>) FixedWindows.of(Duration.millis(100)))
            .withTimestampCombiner(TimestampCombiner.EARLIEST)
            .withMode(AccumulationMode.ACCUMULATING_FIRED_PANES)
            .withAllowedLateness(Duration.millis(1))
            .withTrigger(Repeatedly.forever(AfterWatermark.pastEndOfWindow()));

    ReduceFnTester<Integer, Integer, IntervalWindow> tester =
        ReduceFnTester.combining(strategy, Sum.ofIntegers(), VarIntCoder.of());

    injectElement(tester, 2); // processing timer @ 5000 + 10; EOW timer @ 100
    injectElement(tester, 5);

    tester.advanceInputWatermark(new Instant(1000));

    assertThat(
        tester.extractOutput(),
        contains(
            isSingleWindowedValue(
                equalTo(7), 2, 0, 100, PaneInfo.createPane(true, true, Timing.ON_TIME, 0, 0))));
  }
",non-flaky,5
89333,apache_samza,TestKafkaSystemAdminJava.testCreateStream,"  @Test
  public void testCreateStream() {
    StreamSpec spec = new StreamSpec(""testId"", ""testStream"", ""testSystem"", 8);
    KafkaSystemAdmin admin = systemAdmin();
    assertTrue(""createStream should return true if the stream does not exist and then is created."",
        admin.createStream(spec));
    admin.validateStream(spec);

    assertFalse(""createStream should return false if the stream already exists."", systemAdmin().createStream(spec));
  }
",non-flaky,5
26911,wildfly_wildfly,JSFModuleIdFactoryTestCase.getActiveJSFVersionsTest,"    @Test
    public void getActiveJSFVersionsTest() {
        List<String> versions = factory.getActiveJSFVersions();
        Assert.assertEquals(3, versions.size());
        Assert.assertTrue(versions.contains(""main""));
        Assert.assertFalse(versions.contains(""1.2""));
        Assert.assertTrue(versions.contains(""myfaces""));
        Assert.assertTrue(versions.contains(""myfaces2""));
    }
",non-flaky,5
110141,Wikidata_wikidata-toolkit,ClientConfigurationTest.testReportArgumentsShort,"	@Test
	public void testReportArgumentsShort() {
		String[] args = new String[] { ""-r"", ""output/report.txt"" };
		ClientConfiguration config = new ClientConfiguration(args);
		assertEquals(""output/report.txt"", config.getReportFileName());
	}
",non-flaky,5
19517,eclipse_xtext-core,TraceRegionTest.testAnnotate_02,"	@Test
	public void testAnnotate_02() {
		TraceRegion region = new TraceRegion(1, 1, 0, 0, true, 2, 3, 0, 0, null, newURI());
		assertEquals(""a<2:3[b]c"", region.getAnnotatedString(""abc""));
	}
",non-flaky,5
98074,vert-x3_vertx-mongo-client,WriteConcernParserTest.testWriteConcern,"  @Test
  public void testWriteConcern() {
    JsonObject config = new JsonObject();
    config.put(""writeConcern"", ""ACKNOWLEDGED"");

    WriteConcern wc = new WriteConcernParser(null, config).writeConcern();
    assertNotNull(wc);
    assertEquals(WriteConcern.ACKNOWLEDGED, wc);
  }
",non-flaky,5
33876,apache_camel,FhirUpdateIT.testResourceBySearchUrlAndResourceAsString,"    @Test
    public void testResourceBySearchUrlAndResourceAsString() throws Exception {
        Date date = new SimpleDateFormat(""yyyy-MM-dd"").parse(""1998-04-29"");
        assertNotEquals(date, patient.getBirthDate());
        this.patient.setBirthDate(date);
        String url = ""Patient?"" + Patient.SP_IDENTIFIER + '=' + URLEncoder.encode(this.patient.getId(), ""UTF-8"");
        final Map<String, Object> headers = new HashMap<>();
        // parameter type is org.hl7.fhir.instance.model.api.IBaseResource
        headers.put(""CamelFhir.resourceAsString"", this.fhirContext.newJsonParser().encodeResourceToString(this.patient));
        // parameter type is String
        headers.put(""CamelFhir.url"", url);
        // parameter type is ca.uhn.fhir.rest.api.PreferReturnEnum
        headers.put(""CamelFhir.preferReturn"", PreferReturnEnum.REPRESENTATION);

        MethodOutcome result = requestBodyAndHeaders(""direct://RESOURCE_BY_SEARCH_URL_AND_RESOURCE_AS_STRING"", null, headers);

        assertNotNull(result, ""resource result"");
        LOG.debug(""resource: "" + result);
        assertEquals(date, ((Patient) result.getResource()).getBirthDate(), ""Birth date not updated!"");
    }
",non-flaky,5
26725,MundaneImmortal_pair-distribution-app,OpsPairsCombinationsTest.testGetPastPairByTrack,"	@Test
	public void testGetPastPairByTrack() {
		List<Developer> standardDevs = getStandardDevs();
		OpsPairCombinations devPairCombinations = new OpsPairCombinations(getPairsListFromDevs(standardDevs));
		
		
		assertThat(devPairCombinations.getPastPairByTrack(0, ""track1""), is(getPairsListFromDevs(standardDevs).get(0).getPairByTrack(""track1"")));
		assertThat(devPairCombinations.getPastPairByTrack(1, ""track2""), is(getPairsListFromDevs(standardDevs).get(1).getPairByTrack(""track2"")));
		assertThat(devPairCombinations.getPastPairByTrack(2, ""track1""), is(getPairsListFromDevs(standardDevs).get(2).getPairByTrack(""track1"")));
	}
",non-flaky,5
112072,apache_shardingsphere-elasticjob,SimpleElasticJobTest.assertJobInit,"    @Test
    public void assertJobInit() {
        while (!FooSimpleElasticJob.isCompleted()) {
            WaitingUtils.waitingShortTime();
        }
        assertTrue(getRegCenter().isExisted(""/"" + getJobName() + ""/sharding""));
    }
",non-flaky,5
53214,cloudfoundry_uaa,ScimGroupEndpointsIntegrationTests.deleteGroupUpdatesUser,"    @Test
    public void deleteGroupUpdatesUser() {
        ScimGroup g1 = createGroup(DELETE_ME, DALE, VIDYA);
        validateUserGroups(DALE.getMemberId(), DELETE_ME);
        validateUserGroups(VIDYA.getMemberId(), DELETE_ME);

        deleteResource(groupEndpoint, g1.getId());

        // check that the group does not exist anymore
        @SuppressWarnings(""unchecked"")
        Map<String, Object> g2 = client.getForObject(
            serverRunning.getUrl(groupEndpoint + ""?filter=displayName eq \""{name}\""""), Map.class, DELETE_ME);
        assertTrue(g2.containsKey(""totalResults""));
        assertEquals(0, g2.get(""totalResults""));

        // check that group membership is updated
        validateUserGroups(DALE.getMemberId());
        validateUserGroups(VIDYA.getMemberId());
    }
",non-flaky,5
175777,GoogleCloudPlatform_google-cloud-eclipse,AppYamlValidatorTest.testValidate_absolutePathNotFile,"  @Test
  public void testValidate_absolutePathNotFile() {
    createAppYamlAsDirectory(basePath);

    String absolutePath = basePath + ""/app.yaml"";
    when(appYamlPath.getValue()).thenReturn(absolutePath);

    IStatus result = pathValidator.validate();
    assertEquals(IStatus.ERROR, result.getSeverity());
    assertEquals(""Not a file: "" + new Path(basePath + ""/app.yaml"").toOSString(),
        result.getMessage());
  }
",non-flaky,5
178037,aosp-mirror_platform_frameworks_support,GuidedDatePickerTest.testNonLeapToLeapYearTransition,"    @Test
    public void testNonLeapToLeapYearTransition() throws Throwable {
        long startTime = System.currentTimeMillis();
        Intent intent = new Intent();

        String title = ""Date Picker Transition Test"";
        String breadcrumb = ""Leap Year Transition Test Demo"";
        String description = ""Testing Feb transition from nonleap to leap year"";
        GuidanceStylist.Guidance guidance = new GuidanceStylist.Guidance(title, description,
                breadcrumb, null);

        List<GuidedAction> actionList = new ArrayList<>();

        Calendar cal = Calendar.getInstance();

        cal.set(Calendar.YEAR, 2017);   // 2017 is a non-leap year
        cal.set(Calendar.MONTH, Calendar.FEBRUARY);
        cal.set(Calendar.DAY_OF_MONTH, cal.getActualMaximum(Calendar.DAY_OF_MONTH));
        Date initialDate = cal.getTime();

        GuidedDatePickerAction action = new GuidedDatePickerAction.Builder(
                mContext)
                .id(0)
                .title(""Date"")
                .date(initialDate.getTime())
                .datePickerFormat(""DMY"")
                .build();

        actionList.add(action);

        GuidedStepAttributesTestFragment.clear();
        GuidedStepAttributesTestFragment.GUIDANCE = guidance;
        GuidedStepAttributesTestFragment.ACTION_LIST = actionList;

        initActivity(intent);

        DatePicker mPickerView = (DatePicker) mActivity.findViewById(
                R.id.guidedactions_activator_item);

        verticalScrollToFieldValue(Calendar.YEAR, 2016, new int[] {0, 1, 2},
                mPickerView, KeyEvent.KEYCODE_DPAD_UP);
        long executionTime = System.currentTimeMillis() - startTime;
        Log.d(TAG, ""testNonLeapToLeapYearTransition() Execution time: "" + executionTime);
        Thread.sleep(FINAL_WAIT);
    }
",non-flaky,5
110138,Wikidata_wikidata-toolkit,ClientConfigurationTest.testStdOutOutputArgumentsLong,"	@Test
	public void testStdOutOutputArgumentsLong() {
		String[] args = new String[] { ""--action"", ""json"", ""--stdout"" };
		ClientConfiguration config = new ClientConfiguration(args);
		assertTrue(config.isQuiet());
	}
",non-flaky,5
77583,dropwizard_dropwizard,JerseyClientBuilderTest.select,"    @Test
            public List<Proxy> select(URI uri) {
                return Collections.singletonList(new Proxy(Proxy.Type.HTTP, new InetSocketAddress(""192.168.53.12"", 8080)));
            }
",non-flaky,5
159696,liquibase_liquibase,AddAutoIncrementExecuteTest.execute_altSchema,"//    @Test
//    public void execute_altSchema() throws Exception {
//        new DatabaseTestTemplate().testOnAvailableDatabases(
//                new SqlStatementDatabaseTest(TestContext.ALT_SCHEMA, new AddColumnStatement(TestContext.ALT_SCHEMA, TABLE_NAME, NEW_COLUMN_NAME, ""varchar(50)"", ""new default"")) {
//                    protected void preExecuteAssert(DatabaseSnapshotGenerator snapshot) {
//                        assertNull(snapshot.getTable(TABLE_NAME).getColumn(NEW_COLUMN_NAME));
//                    }
//
//                    protected void postExecuteAssert(DatabaseSnapshotGenerator snapshot) {
//                        Column columnSnapshot = snapshot.getTable(TABLE_NAME).getColumn(NEW_COLUMN_NAME);
//                        assertNotNull(columnSnapshot);
//                        assertEquals(NEW_COLUMN_NAME.toUpperCase(), columnSnapshot.getName().toUpperCase());
//                        assertEquals(""new default"", columnSnapshot.getDefaultValue());
//
//                        assertEquals(true, columnSnapshot.isNullable());
//                    }
//
//                });
//    }
",non-flaky,5
78279,apache_beam,StateTagTest.testMapEquality,"  @Test
  public void testMapEquality() {
    StateTag<?> fooStringVarInt1 = StateTags.map(""foo"", StringUtf8Coder.of(), VarIntCoder.of());
    StateTag<?> fooStringVarInt2 = StateTags.map(""foo"", StringUtf8Coder.of(), VarIntCoder.of());
    StateTag<?> fooStringBigEndian =
        StateTags.map(""foo"", StringUtf8Coder.of(), BigEndianIntegerCoder.of());
    StateTag<?> fooVarIntBigEndian =
        StateTags.map(""foo"", VarIntCoder.of(), BigEndianIntegerCoder.of());
    StateTag<?> barStringVarInt = StateTags.map(""bar"", StringUtf8Coder.of(), VarIntCoder.of());

    assertEquals(fooStringVarInt1, fooStringVarInt2);
    assertNotEquals(fooStringVarInt1, fooStringBigEndian);
    assertNotEquals(fooStringBigEndian, fooVarIntBigEndian);
    assertNotEquals(fooStringVarInt1, fooVarIntBigEndian);
    assertNotEquals(fooStringVarInt1, barStringVarInt);
  }
",non-flaky,5
97993,ReactiveX_RxJava,MergeTests.testCovarianceOfMerge,"    @Test
    public void testCovarianceOfMerge() {
        Observable<HorrorMovie> horrors = Observable.from(new HorrorMovie());
        Observable<Observable<HorrorMovie>> metaHorrors = Observable.just(horrors);
        Observable.<Media> merge(metaHorrors);
    }
",non-flaky,5
112749,hwang-pku_ormlite-core,DatabaseConnectionProxyTest.testCloseQuietly,"	@Test
	public void testCloseQuietly() throws Exception {
		DatabaseConnection conn = createMock(DatabaseConnection.class);
		conn.closeQuietly();
		conn.close();
		DatabaseConnectionProxy proxy = new DatabaseConnectionProxy(conn);
		replay(conn);
		proxy.closeQuietly();
		proxy.close();
		verify(conn);
	}
",non-flaky,5
33741,alibaba_fastjson,FastJsonHttpMessageConverterTest.test2,"    @Test
    public void test2() throws Exception {

        String jsonStr = ""[{\""name\"":\""p1\"",\""sonList\"":[{\""name\"":\""s1\""}]},{\""name\"":\""p2\"",\""sonList\"":[{\""name\"":\""s2\""},{\""name\"":\""s3\""}]}]"";

        mockMvc.perform(
                (post(""/fastjson/test2"").characterEncoding(""UTF-8"").content(
                        jsonStr).contentType(MediaType.APPLICATION_JSON)))
                // .andExpect(status().isOk())
                .andDo(print());
    }
",non-flaky,5
77550,dropwizard_dropwizard,LogbackExcludedTest.testBuildConfigurationMetadata,"    @Test
    public void testBuildConfigurationMetadata(CheckedConsumer<String> classFilter) throws Exception {
        try (ByteArrayOutputStream byteStream = captureStderr();
                CustomClassLoader loader = new CustomClassLoader(classFilter)) {
            // create class objects from custom loader
            Class<ConfigurationMetadata> cmType = loader.reloadClass(ConfigurationMetadata.class);
            Class<ObjectMapper> omType = loader.reloadClass(ObjectMapper.class);
            Class<Configuration> confType = loader.reloadClass(Configuration.class);
            // construct ConfigurationMetadata object using class object associated with custom loader so that we can
            // simulate Logback not being in the classpath
            cmType.getConstructor(omType, Class.class).newInstance(omType.newInstance(), confType);

            // make sure nothing is emitted to stderr; previously the absence of Logback in the classpath would cause
            // ""class io.dropwizard.configuration.ConfigurationMetadata$1: Type ch.qos.logback.access.spi.IAccessEvent
            // not present"" to be emitted to stderr
            String err = byteStream.toString();
            assertThat(err).isEmpty();
        }
    }
",non-flaky,5
94656,square_okhttp,OptionalMethodTest.invokeBadArgs,"  @Test
  public void invokeBadArgs() throws Exception {
    SubClass1 subClass1 = new SubClass1();
    assertIllegalArgumentExceptionOnInvoke(METHOD_WITH_ARGS_CORRECT_PARAMS, subClass1); // no args
    assertIllegalArgumentExceptionOnInvoke(METHOD_WITH_ARGS_CORRECT_PARAMS, subClass1, 123);
    assertIllegalArgumentExceptionOnInvoke(METHOD_WITH_ARGS_CORRECT_PARAMS, subClass1, true);
    assertIllegalArgumentExceptionOnInvoke(METHOD_WITH_ARGS_CORRECT_PARAMS, subClass1,
        new Object());
    assertIllegalArgumentExceptionOnInvoke(METHOD_WITH_ARGS_CORRECT_PARAMS, subClass1, ""one"",
        ""two"");
  }
",non-flaky,5
98288,spotify_docker-client,RegistryAuthTest.testFromDockerConfig_MissingConfigFile,"  @Test
  public void testFromDockerConfig_MissingConfigFile() throws Exception {
    final Path randomPath = Paths.get(RandomStringUtils.randomAlphanumeric(16) + "".json"");
    expectedException.expect(FileNotFoundException.class);
    RegistryAuth.fromDockerConfig(randomPath).build();
  }
",non-flaky,5
178027,aosp-mirror_platform_frameworks_support,ListRowDataAdapterTest.adapterSize_nonVisibleRowRemoved,"    @Test
    public void adapterSize_nonVisibleRowRemoved() {
        int itemCount = 4;
        ArrayObjectAdapter adapter = new ArrayObjectAdapter(presenterSelector);
        adapter.add(new SectionRow(""section 1""));
        for (int i = 0; i < itemCount; i++) {
            HeaderItem headerItem = new HeaderItem(i, ""header ""+i);
            adapter.add(new ListRow(headerItem, createListRowAdapter()));
        }

        ListRowDataAdapter listRowDataAdapter = new ListRowDataAdapter(adapter);
        assertEquals(5, listRowDataAdapter.size());
        adapter.add(new DividerRow());
        assertEquals(5, listRowDataAdapter.size());

        listRowDataAdapter.registerObserver(dataObserver);
        adapter.removeItems(4, 1);
        verify(dataObserver, times(1)).onItemRangeRemoved(4, 1);
        assertEquals(4, listRowDataAdapter.size());

        adapter.removeItems(4, 1);
        verify(dataObserver, times(0)).onItemRangeInserted(anyInt(), anyInt());
        assertEquals(4, listRowDataAdapter.size());
    }
",non-flaky,5
33921,apache_camel,LdifRouteIT.modify,"    @Test
    public void modify() throws Exception {
        setupData(""/org/apache/camel/component/ldif/ModifySetup.ldif"");

        camel.addRoutes(createRouteBuilder(ENDPOINT_LDIF));
        camel.start();

        Endpoint endpoint = camel.getEndpoint(ENDPOINT_START);
        Exchange exchange = endpoint.createExchange();

        // then we set the LDAP filter on the in body
        URL loc = this.getClass().getResource(""/org/apache/camel/component/ldif/Modify.ldif"");
        exchange.getIn().setBody(loc.toString());

        // now we send the exchange to the endpoint, and receives the response
        // from Camel
        Exchange out = template.send(endpoint, exchange);

        // Check the results
        List<String> ldifResults = defaultLdapModuleOutAssertions(out);
        assertThat(ldifResults, notNullValue());
        assertThat(ldifResults.size(), equalTo(1));
        assertThat(ldifResults.get(0), equalTo(""success""));

        // Check LDAP
        SearchResult sr;
        NamingEnumeration<SearchResult> searchResults = ldapContext.search(""dc=example,dc=org"", ""(uid=test*)"", SEARCH_CONTROLS);
        assertNotNull(searchResults);

        boolean uidFound = false;
        while (searchResults.hasMore()) {
            sr = searchResults.next();
            if (sr.getName().contains(""uid=test4"")) {
                uidFound = true;

                // Check the attributes of the search result
                Attributes attribs = sr.getAttributes();
                assertNotNull(attribs);
                Attribute attrib = attribs.get(""sn"");
                assertNotNull(attribs);
                assertThat(1, equalTo(attrib.size()));
                assertThat(""5"", equalTo(attrib.get(0).toString()));
            }
        }

        assertThat(""uid=test4 not found"", uidFound, equalTo(true));
    }
",non-flaky,5
135714,Netflix_Hystrix,HystrixSubclassCommandTest.testRequestLogSuperClass,"    @Test
    public void testRequestLogSuperClass() {
        HystrixCommand<Integer> superCmd = new SuperCommand(""cache"", true);
        assertEquals(1, superCmd.execute().intValue());
        System.out.println(""REQ LOG : "" + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());
        HystrixRequestLog reqLog = HystrixRequestLog.getCurrentRequest();
        assertEquals(1, reqLog.getAllExecutedCommands().size());
        HystrixInvokableInfo<?> info = reqLog.getAllExecutedCommands().iterator().next();
        assertEquals(""SuperCommand"", info.getCommandKey().name());
    }
",non-flaky,5
177174,line_armeria,KeyStoreCredentialResolverBuilderTest.expectSuccessWithFile,"    @Test
    public void expectSuccessWithFile() throws Exception {
        final File file = folder.newFile();

        assertThat(file.length()).isZero();

        final KeyStore keyStore = KeyStore.getInstance(""JKS"");
        keyStore.load(null, null);
        keyStore.store(new FileOutputStream(file), """".toCharArray());

        assertThat(file.length()).isGreaterThan(0);
        assertThat(file.canRead()).isTrue();
        assertThat(file.exists()).isTrue();

        new KeyStoreCredentialResolverBuilder(file).build();
    }
",non-flaky,5
135789,Netflix_Hystrix,HystrixThreadPoolTest.call,"    @Test(timeout = 2500)
    public void testUnsubscribeHystrixThreadPool() throws InterruptedException {
        // methods are package-private so can't test it somewhere else
        HystrixThreadPool pool = Factory.getInstance(HystrixThreadPoolKey.Factory.asKey(""threadPoolFactoryTest""),
                HystrixThreadPoolProperties.Setter.getUnitTestPropertiesBuilder());
        
        final AtomicBoolean interrupted = new AtomicBoolean();
        final CountDownLatch start = new CountDownLatch(1);
        final CountDownLatch end = new CountDownLatch(1);

        HystrixContextScheduler hcs = new HystrixContextScheduler(HystrixPlugins.getInstance().getConcurrencyStrategy(), pool);

        Scheduler.Worker w = hcs.createWorker();

        try {
            w.schedule(new Action0() {
                @Override
                public void call() {
                    start.countDown();
                    try {
                        try {
                            Thread.sleep(5000);
                        } catch (InterruptedException ex) {
                            interrupted.set(true);
                        }
                    } finally {
                        end.countDown();
                    }
                }
",non-flaky,5
19468,eclipse_xtext-core,Bug318343Test.tearDown,"	@Test public void testScopeContainsNotT2() throws Exception {
	public void tearDown() throws Exception {
		resource1 = null;
		resource2 = null;
		globalScopeProvider = null;
		super.tearDown();
		
	}
",non-flaky,5
118784,netty_netty,ReadOnlyByteBufferBufTest.testCopyDirect,"    @Test
    public void testCopyDirect() {
        testCopy(true);
    }
",non-flaky,5
170537,eclipse_jetty.project,TestAnnotationInheritance.testTypeInheritanceHandling,"    @Test
    public void testTypeInheritanceHandling() throws Exception
    {
        Map<String, Set<String>> map = new ConcurrentHashMap<>();

        AnnotationParser parser = new AnnotationParser();
        ClassInheritanceHandler handler = new ClassInheritanceHandler(map);

        class Foo implements InterfaceD
        {
        }

        classNames.clear();
        classNames.add(ClassA.class.getName());
        classNames.add(ClassB.class.getName());
        classNames.add(InterfaceD.class.getName());
        classNames.add(Foo.class.getName());

        parser.parse(Collections.singleton(handler), classNames);

        assertNotNull(map);
        assertFalse(map.isEmpty());
        assertEquals(2, map.size());

        assertThat(map, hasKey(""org.eclipse.jetty.annotations.ClassA""));
        assertThat(map, hasKey(""org.eclipse.jetty.annotations.InterfaceD""));
        Set<String> classes = map.get(""org.eclipse.jetty.annotations.ClassA"");
        assertThat(classes, contains(""org.eclipse.jetty.annotations.ClassB""));

        classes = map.get(""org.eclipse.jetty.annotations.InterfaceD"");
        assertThat(classes, containsInAnyOrder(""org.eclipse.jetty.annotations.ClassB"",
            Foo.class.getName()));
    }
",non-flaky,5
135000,undertow-io_undertow,AnnotatedEndpointTest.testEncodingAndDecodingBinary,"    @Test
    public void testEncodingAndDecodingBinary() throws Exception {
        final byte[] payload = ""hello"".getBytes();
        final FutureResult latch = new FutureResult();

        WebSocketTestClient client = new WebSocketTestClient(WebSocketVersion.V13, new URI(""ws://"" + DefaultServer.getHostAddress(""default"") + "":"" + DefaultServer.getHostPort(""default"") + ""/ws/encoding/Stuart""));
        client.connect();
        client.send(new BinaryWebSocketFrame(Unpooled.wrappedBuffer(payload)), new FrameChecker(TextWebSocketFrame.class, ""hello Stuart"".getBytes(), latch));
        latch.getIoFuture().get();
        client.destroy();
    }
",non-flaky,5
118712,netty_netty,UnixChannelUtilTest.testPooledAllocatorIsBufferCopyNeededForWrite,"    @Test
    public void testPooledAllocatorIsBufferCopyNeededForWrite() {
        testIsBufferCopyNeededForWrite(PooledByteBufAllocator.DEFAULT);
    }
",non-flaky,5
178026,aosp-mirror_platform_frameworks_support,ListRowDataAdapterTest.adapterSize_visibleRowRemoved,"    @Test
    public void adapterSize_visibleRowRemoved() {
        int itemCount = 4;
        ArrayObjectAdapter adapter = new ArrayObjectAdapter(presenterSelector);
        adapter.add(new SectionRow(""section 1""));
        for (int i = 0; i < itemCount; i++) {
            HeaderItem headerItem = new HeaderItem(i, ""header ""+i);
            adapter.add(new ListRow(headerItem, createListRowAdapter()));
        }

        ListRowDataAdapter listRowDataAdapter = new ListRowDataAdapter(adapter);
        assertEquals(5, listRowDataAdapter.size());
        adapter.add(new DividerRow());
        assertEquals(5, listRowDataAdapter.size());

        listRowDataAdapter.registerObserver(dataObserver);
        adapter.removeItems(2, 2);
        verify(dataObserver, times(1)).onItemRangeRemoved(2, 2);
        assertEquals(3, listRowDataAdapter.size());
    }
",non-flaky,5
21191,androidx_androidx,PreferenceDataStoreTest.testThatDataStoreIsNullByDefault,"    @Test
    public void testThatDataStoreIsNullByDefault() {
        Preference preference = new Preference(mContext);
        mScreen.addPreference(preference);

        assertNull(preference.getPreferenceDataStore());
        assertNotNull(preference.getSharedPreferences());

        assertNull(mManager.getPreferenceDataStore());
        assertNotNull(mManager.getSharedPreferences());
    }
",non-flaky,5
84573,apache_zookeeper,LeaderElectionSupportTest.tearDown,"    @AfterEach
    public void tearDown() throws Exception {
        if (zooKeeper != null) {
            zooKeeper.delete(TEST_ROOT_NODE + Thread.currentThread().getId(), -1);
        }

        super.tearDown();
    }
",non-flaky,5
38288,palantir_atlasdb,AbstractTransactionTest.testRangePagingBatchSizeOneReverse,"    @Test
    public void testRangePagingBatchSizeOneReverse() {
        if (!supportsReverse()) {
            return;
        }
        int totalPuts = 100;
        for (int i = 0 ; i < totalPuts ; i++) {
            putDirect(""row""+i, ""col1"", ""v1"", 0);
        }

        RangeRequest rangeRequest = RangeRequest.reverseBuilder().batchHint(1).build();
        Map<RangeRequest, TokenBackedBasicResultsPage<RowResult<Value>, byte[]>> ranges = keyValueService.getFirstBatchForRanges(TEST_TABLE, Iterables.limit(Iterables.cycle(rangeRequest), 100), 1);
        assertEquals(1, ranges.keySet().size());
        assertEquals(1, ranges.values().iterator().next().getResults().size());
        assertEquals(""row99"", PtBytes.toString(ranges.values().iterator().next().getResults().iterator().next().getRowName()));
    }
",non-flaky,5
92604,FasterXML_jackson-databind,ImmutablesTypeSerializationTest.testImmutablesSimpleGenericRoundTrip,"    @Test
    public void testImmutablesSimpleGenericRoundTrip() throws IOException {
        Key<Account> original = ImmutableKey.<Account>builder()
                .id(ImmutableAccount.builder()
                        .id(1L)
                        .name(""foo"")
                        .build())
                .build();
        String json = MAPPER.writeValueAsString(original);
        Key<Account> deserialized = MAPPER.readValue(json, new TypeReference<Key<Account>>() {});
        assertEquals(original, deserialized);
    }
",non-flaky,5
178023,aosp-mirror_platform_frameworks_support,ListRowDataAdapterTest.adapterSize_nonVisibleRowPresent,"    @Test
    public void adapterSize_nonVisibleRowPresent() {
        int itemCount = 4;
        ArrayObjectAdapter adapter = new ArrayObjectAdapter(presenterSelector);
        adapter.add(new SectionRow(""section 1""));
        for (int i = 0; i < itemCount; i++) {
            HeaderItem headerItem = new HeaderItem(i, ""header ""+i);
            adapter.add(new ListRow(headerItem, createListRowAdapter()));
        }

        ListRowDataAdapter listRowDataAdapter = new ListRowDataAdapter(adapter);
        assertEquals(5, listRowDataAdapter.size());

        List<DividerRow> invisibleRows = new ArrayList<>();
        invisibleRows.add(new DividerRow());
        invisibleRows.add(new DividerRow());
        adapter.addAll(5, invisibleRows);
        verify(dataObserver, times(0)).onItemRangeInserted(anyInt(), anyInt());
        assertEquals(5, listRowDataAdapter.size());
    }
",non-flaky,5
84609,apache_zookeeper,ExportJvmInfoTest.doNotExportInfo,"    @Test
    public void doNotExportInfo() throws Exception {
        runTest(false);
    }
",non-flaky,5
77508,dropwizard_dropwizard,BasicCredentialsTest.hasAWorkingEqualsMethod,"    @Test
    public void hasAWorkingEqualsMethod() {
        assertThat(credentials)
            .isEqualTo(credentials)
            .isEqualTo(new BasicCredentials(""u"", ""p""))
            .isNotEqualTo(null)
            .isNotEqualTo(""string"")
            .isNotEqualTo(new BasicCredentials(""u1"", ""p""))
            .isNotEqualTo(new BasicCredentials(""u"", ""p1""));
    }
",non-flaky,5
137131,spring-projects_spring-framework,AbstractMethodMetadataTests.isAnnotatedWhenDoesNotMatchDirectOrMetaAnnotationReturnsFalse,"	@Test
	public void isAnnotatedWhenDoesNotMatchDirectOrMetaAnnotationReturnsFalse() {
		assertThat(getTagged(WithMethod.class).isAnnotated(
				DirectAnnotation.class.getName())).isFalse();
	}
",non-flaky,5
137105,spring-projects_spring-framework,AbstractAnnotationMetadataTests.hasAnnotationWhenDoesNotMatchDirectOrMetaAnnotationReturnsFalse,"	@Test
	public void hasAnnotationWhenDoesNotMatchDirectOrMetaAnnotationReturnsFalse() {
		assertThat(get(TestClass.class).hasAnnotation(DirectAnnotation1.class.getName())).isFalse();
	}
",non-flaky,5
94662,square_okhttp,OptionalMethodTest.invokeOptionalNonPublic,"  @Test
  public void invokeOptionalNonPublic() throws Exception {
    SubClass2 subClass2 = new SubClass2();
    assertFalse(NON_PUBLIC.isSupported(subClass2));
    assertErrorOnInvokeOptional(NON_PUBLIC, subClass2);
  }
",non-flaky,5
33754,alibaba_fastjson,FastJsonpHttpMessageConverter4Case2Test.test4_2,"    @Test
    public void test4_2() throws Exception {

        String jsonStr = ""{\""t\"":{\""id\"":123,\""name\"":\""ååå\""}}"";

        ResultActions actions = mockMvc.perform((post(""/fastjson/test4?callback=myUpdate"").characterEncoding(""UTF-8"")
                .content(jsonStr).contentType(MediaType.APPLICATION_JSON)));
        actions.andDo(print());
        actions.andExpect(status().isOk())
                .andExpect(content().contentType(APPLICATION_JAVASCRIPT))
                .andExpect(content().string(""/**/myUpdate(\""{\\\""t\\\"":{\\\""id\\\"":123,\\\""name\\\"":\\\""ååå\\\""}}\"")""));
    }
",non-flaky,5
179452,abel533_Mapper,VersionTest.testInsert,"    @Test
    public void testInsert() {
        SqlSession sqlSession = getSqlSession();
        try {
            UserTimestampMapper mapper = sqlSession.getMapper(UserTimestampMapper.class);
            UserTimestamp user = new UserTimestamp();
            user.setId(1);
            user.setJoinDate(new Timestamp(System.currentTimeMillis()));
            int count = mapper.insert(user);
            assertEquals(1, count);
        } finally {
            sqlSession.close();
        }
    }
",non-flaky,5
118767,netty_netty,ByteBufUtilTest.testDecodeUtf8,"    @Test
    public void testDecodeUtf8() {
        testDecodeString(""Some UTF-8 like Ã¤ÃâÅÅ"", CharsetUtil.UTF_8);
    }
",non-flaky,5
59637,looly_hutool,TokenizerUtilTest.jiebaTest,"	@Test
	public void jiebaTest() {
		TokenizerEngine engine = new JiebaEngine();
		Result result = engine.parse(text);
		String resultStr = IterUtil.join((Iterator<Word>)result, "" "");
		Assert.assertEquals(""è¿ ä¸¤ä¸ª æ¹æ³ ç åºå« å¨äº è¿åå¼"", resultStr);
	}
",non-flaky,5
33742,alibaba_fastjson,FastJsonHttpMessageConverterTest.test3,"    @Test
    public void test3() throws Exception {
        List<Object> list = this.mockMvc.perform(post(""/fastjson/test3""))
                .andReturn().getResponse().getHeaderValues(""Content-Length"");
        Assert.assertNotEquals(list.size(), 0);
    }
",non-flaky,5
70776,apache_kafka,RebalanceSourceConnectorsIntegrationTest.testRemovingWorker,"    @Test
    public void testRemovingWorker() throws Exception {
        // create test topic
        connect.kafka().createTopic(TOPIC_NAME, NUM_TOPIC_PARTITIONS);

        // setup up props for the source connector
        Map<String, String> props = new HashMap<>();
        props.put(CONNECTOR_CLASS_CONFIG, MonitorableSourceConnector.class.getSimpleName());
        props.put(TASKS_MAX_CONFIG, String.valueOf(NUM_TASKS));
        props.put(""throughput"", String.valueOf(1));
        props.put(""messages.per.poll"", String.valueOf(10));
        props.put(TOPIC_CONFIG, TOPIC_NAME);
        props.put(KEY_CONVERTER_CLASS_CONFIG, StringConverter.class.getName());
        props.put(VALUE_CONVERTER_CLASS_CONFIG, StringConverter.class.getName());

        waitForCondition(() -> this.assertWorkersUp(3),
                WORKER_SETUP_DURATION_MS, ""Connect workers did not start in time."");

        // start a source connector
        IntStream.range(0, 4).forEachOrdered(
            i -> {
                try {
                    connect.configureConnector(CONNECTOR_NAME + i, props);
                } catch (IOException e) {
                    throw new ConnectException(e);
                }
            });

        waitForCondition(() -> this.assertConnectorAndTasksRunning(CONNECTOR_NAME + 3, NUM_TASKS).orElse(false),
                CONNECTOR_SETUP_DURATION_MS, ""Connector tasks did not start in time."");

        connect.removeWorker();

        waitForCondition(() -> this.assertWorkersUp(2),
                WORKER_SETUP_DURATION_MS, ""Connect workers did not start in time."");

        waitForCondition(this::assertConnectorAndTasksAreUnique,
                WORKER_SETUP_DURATION_MS, ""Connect and tasks are imbalanced between the workers."");
    }
",non-flaky,5
86097,graylog2_graylog2-server,EventDefinitionDtoTest.testValidEventDefinition,"    @Test
    public void testValidEventDefinition() {
        final ValidationResult validationResult = testSubject.validate();
        assertThat(validationResult.failed()).isFalse();
        assertThat(validationResult.getErrors().size()).isEqualTo(0);
    }
",non-flaky,5
162730,OpenAPITools_openapi-generator,XmlItemTest.prefixNamespaceIntegerTest,"    @Test
    public void prefixNamespaceIntegerTest() {
        // TODO: test prefixNamespaceInteger
    }
",non-flaky,5
156104,soot-oss_soot,DefaultInterfaceTest.SubClassTest,"  @Test
  public void SubClassTest() throws FileNotFoundException, UnsupportedEncodingException {		
	  
	  String testClass = ""soot.defaultInterfaceMethods.JavaNCSSCheck"";
	  String abstractClass = ""soot.defaultInterfaceDifferentPackage.AbstractCheck"";
	  String classToAnalyze = ""soot.defaultInterfaceDifferentPackage.AbstractCheck"";
	  final SootMethod target =
		        prepareTarget(
		            methodSigFromComponents(testClass, voidType, mainClass),
		            testClass,
		            classToAnalyze);
		
		ArrayList<Edge> edges = GetCallGraph();
		
		assertEquals(edges.get(0).getTgt(), Scene.v().getMethod(""<soot.defaultInterfaceDifferentPackage.AbstractCheck: void log(java.lang.String,java.lang.String)>""));		
		
	}
",non-flaky,5
156092,soot-oss_soot,AsmMethodSourceTest.testSilsDisabled,"  @Test
  public void testSilsDisabled() {
    final String className = ""soot.asm.LocalNaming"";
    final String[] params = {};
    SootMethod target = prepareTarget(methodSigFromComponents(className, ""void"", ""test"", params), className);
    Body body = target.retrieveActiveBody();
    Set<String> localNames = body.getLocals().stream().map(Local::getName).collect(Collectors.toSet());
    // test if all expected Local names are present
    Assert.assertTrue(localNames.contains(""d""));
    Assert.assertTrue(localNames.contains(""f""));
    Assert.assertTrue(localNames.contains(""arr""));
  }
",non-flaky,5
104686,apache_pinot,RealtimeToOfflineSegmentsMinionClusterIntegrationTest.testVirtualColumnQueries,"  @Test(enabled = false)
  public void testVirtualColumnQueries() {
  }
",non-flaky,5
97716,vojtechhabarta_typescript-generator,DateTest.testJava8DateWithJackson2CustomSerialization,"    @Test
    public void testJava8DateWithJackson2CustomSerialization() {
        final Settings settings = TestUtils.settings();
        settings.customTypeMappings = Collections.singletonMap(""java.time.LocalDate"", ""[number, number, number]"");
        final String output = new TypeScriptGenerator(settings).generateTypeScript(Input.from(Java8Jackson2Dates.class));
        Assert.assertTrue(output.contains(""date: [number, number, number];""));
    }
",non-flaky,5
98099,vert-x3_vertx-mongo-client,ParsingSSLOptionsTest.testValidKeyAndCertificate,"  @Test
  public void testValidKeyAndCertificate() throws IOException {
    // given
    final File tmpKeyFile = tmpFolder.newFile(""validKey.pem"");
    try (final FileWriter tmpKeyWriter = new FileWriter(tmpKeyFile)) {
      tmpKeyWriter.write(""-----BEGIN PRIVATE KEY-----\n"" +
        ""MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDVmCecLdUZU917\n"" +
        ""hweVz4JqvZ9vZEi1rH+BG98HYfRR/h3QaobxPImZu3hzKHZ+MPbm94HunLPAVA9y\n"" +
        ""ZhvZMToNfOuD4TUPBPloBuNzwBfZk2O4CaXeG4ailVWUfm5t/l+RD/55zYKuhw1/\n"" +
        ""Vl9lcOryF2XAmPQ2F1gwEKK7wt1Ak8zw8/yeYgBv1/F+ibCMvR6FVj9ABBEfTM+o\n"" +
        ""Os4oy51otUv0h63GqYgXMJyLX7q+AGWdC3srwwLQROtkzi7y00g/YryXUoIqdXEI\n"" +
        ""7CrNL35rZXcZ5LfGRwFX9evX11PpT3OShYlsJBcFE9KMatRoIWd6xUKlxTk0yLjo\n"" +
        ""OUE2tsMJAgMBAAECggEAdewZAjqzidYpU0eLQoRcBj5GRaNiGRrxEgCnM1Y7IwFe\n"" +
        ""yG/nrEu11DASIdHXCXhS99Tx4SCWhLpkBM6m1VQ+LrAm/ppZRr+CSpJzBLaq9C5R\n"" +
        ""QYviDSu5Ow2jP+ZFZWiorlfcMLbrTRu2sfSnmkOrEpkkTh6jxTFCONcWYP8GU93D\n"" +
        ""YCA3hSH0li7CueS+GYJ1JB2Cd7buu+tOhl36AhBD96miExlgNn0YGpTJJ3I0Hb+O\n"" +
        ""lKIIQy+KK8f9TXrSeZC3OYlTtJaIr9ejspTXxIYN11EIit5MFEwnnkCglcsePjsx\n"" +
        ""qeOFRumJ5Nj5H8qyCNZ5MtzwbLkyktJzlumvnyr+AQKBgQDv/QfGKZJFeoCEWpoj\n"" +
        ""f+078JxSYyPVNXxbbr2NuN/V79hJBol87ukycz2CZkDCubIKfubc50eXDmhWCp4p\n"" +
        ""aJgl6BMhnovftYrIrGWJLwqXnwFwsKJSrJJqHlHDJDRGfUSQEWNclNeaB3Mr8W46\n"" +
        ""Zcaadeikstvka9xKA1LOCG3oIQKBgQDj2FFOxZK27KhY/9Oz1dUsPtAYYbLOor/P\n"" +
        ""Rbne3jICQStH3dnUEmWKIKrdYV1u2saw5djn3ujwB0xEXydRvRgiSF0qxYjbm9CG\n"" +
        ""TJaiHhTsQDjWkYMZaxk3gc7Yfh8DHF0wlvWpu1wMXNsCJ6jxqW2e+jSRioZICPK6\n"" +
        ""McWWmArd6QKBgDWjoHEyKXdOAhuTBJCarzOOe+IONpwY8EqfXc6nW6A9k2H/DAvY\n"" +
        ""elbEWyMiJ6deSeT+qCsHpoCkv707ck5fCmKulFgXT7wYn4Rqw+b9lKh+6Zt+X0mL\n"" +
        ""OM5vKGctWGHI7eIlgMfYnLfYom1X8QMsbE9puy3UrEFJulrwkzlpuOcBAoGAVRNV\n"" +
        ""sNsXIFSXu7uyueizU3UU0LXSRVQB2QxJDg3bkHnzBj+xcX15Cq2N/2G2uIjaPf1l\n"" +
        ""E5dpVQ70jGcXUG8SDuMEXs8pfg7dOvhoGpqu51RHpN7qm9ggr1g5+x6Ex+2UYmtL\n"" +
        ""yZfbFAasBE74x1ujQgRdEqct4sHsmFezVrro+9kCgYEAgl70mKk9yK/f7515OaO0\n"" +
        ""Y39tgVzpAG6RN1NKnY6NR5VNNemZx5jhKfk5byaYxX4XBjygD0sQ5KTpaZmoQIIX\n"" +
        ""FxuwhLRRMn6vtsEf1HexJAtRd82aL5wKS62l0AXG/CVLAygn4aSSqLrgTyFFVUR3\n"" +
        ""cASPpPIdZaKZG6q4Hmcpl58=\n"" +
        ""-----END PRIVATE KEY-----"");
    }
    final File tmpCertFile = tmpFolder.newFile(""validCert.pem"");
    try (final FileWriter tmpCertWriter = new FileWriter(tmpCertFile)) {
      tmpCertWriter.write(""-----BEGIN CERTIFICATE-----\n"" +
        ""MIICwTCCAamgAwIBAgIEBeVm4jANBgkqhkiG9w0BAQsFADARMQ8wDQYDVQQDEwZj\n"" +
        ""bGllbnQwHhcNMTgwNTI2MTEzNjUxWhcNMjEwNTI1MTEzNjUxWjARMQ8wDQYDVQQD\n"" +
        ""EwZjbGllbnQwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDVmCecLdUZ\n"" +
        ""U917hweVz4JqvZ9vZEi1rH+BG98HYfRR/h3QaobxPImZu3hzKHZ+MPbm94HunLPA\n"" +
        ""VA9yZhvZMToNfOuD4TUPBPloBuNzwBfZk2O4CaXeG4ailVWUfm5t/l+RD/55zYKu\n"" +
        ""hw1/Vl9lcOryF2XAmPQ2F1gwEKK7wt1Ak8zw8/yeYgBv1/F+ibCMvR6FVj9ABBEf\n"" +
        ""TM+oOs4oy51otUv0h63GqYgXMJyLX7q+AGWdC3srwwLQROtkzi7y00g/YryXUoIq\n"" +
        ""dXEI7CrNL35rZXcZ5LfGRwFX9evX11PpT3OShYlsJBcFE9KMatRoIWd6xUKlxTk0\n"" +
        ""yLjoOUE2tsMJAgMBAAGjITAfMB0GA1UdDgQWBBQ6xJBQsJCJdj/u0iTLYYD2qQsB\n"" +
        ""DDANBgkqhkiG9w0BAQsFAAOCAQEAfoquV375+eAGmfnlLxB30v9VhsFckrxFVpYs\n"" +
        ""XXC6h2G8MtXLpIEpgJo+4SZ4YjNwf/8m9J5j/duU8RukYanyzJdgkFFqKDBYCX7U\n"" +
        ""SD1nQP7729KnQgxtbR/+i3zkNgo7FATdkLq+HOxklNOEE24Ldenya39bsG779B9n\n"" +
        ""Sskcbq++7rMM+onDYBv6PbUKCm6nfqPspq809CLxSaUJg9+9ykut6hiyke/i7GEP\n"" +
        ""XIZHrM+mEvG00ES/zBIdV6TE0AIBP7q2MN7ylT509Ko9sUBMOZdEzikYp5GaRdiv\n"" +
        ""zG9q6rqK5COK614BwJFOD1DKV1BoDFsgugvfvm/mrc3QfIUPDA==\n"" +
        ""-----END CERTIFICATE-----"");
    }
    final JsonObject withSSLAndCertKeyPath = new JsonObject()
      .put(""ssl"", true)
      .put(""keyPath"", tmpKeyFile.getAbsolutePath())
      .put(""certPath"", tmpCertFile.getAbsolutePath());

    // when
    final SslSettings sslSettings = new MongoClientOptionsParser(vertx, withSSLAndCertKeyPath)
      .settings()
      .getSslSettings();

    // then
    assertNotNull(sslSettings.getContext());
  }
",non-flaky,5
162724,OpenAPITools_openapi-generator,XmlItemTest.namespaceIntegerTest,"    @Test
    public void namespaceIntegerTest() {
        // TODO: test namespaceInteger
    }
",non-flaky,5
86113,graylog2_graylog2-server,NotificationFacadeTest.listExcerpts,"    @Test
    public void listExcerpts() {
        final Set<EntityExcerpt> excerpts = facade.listEntityExcerpts();
        final EntityExcerpt excerpt = excerpts.iterator().next();
        assertThat(excerpt.title()).isEqualTo(""title"");
        assertThat(excerpt.id()).isEqualTo(ModelId.of(""5d4d33753d27460ad18e0c4d""));
        assertThat(excerpt.type()).isEqualTo(ModelTypes.NOTIFICATION_V1);
    }
",non-flaky,5
78254,apache_beam,StateInternalsTest.testWatermarkLatestState,"  @Test
  public void testWatermarkLatestState() throws Exception {
    WatermarkHoldState value = underTest.state(NAMESPACE_1, WATERMARK_LATEST_ADDR);

    // State instances are cached, but depend on the namespace.
    assertEquals(value, underTest.state(NAMESPACE_1, WATERMARK_LATEST_ADDR));
    assertFalse(value.equals(underTest.state(NAMESPACE_2, WATERMARK_LATEST_ADDR)));

    assertThat(value.read(), Matchers.nullValue());
    value.add(new Instant(2000));
    assertThat(value.read(), equalTo(new Instant(2000)));

    value.add(new Instant(3000));
    assertThat(value.read(), equalTo(new Instant(3000)));

    value.add(new Instant(1000));
    assertThat(value.read(), equalTo(new Instant(3000)));

    value.clear();
    assertThat(value.read(), equalTo(null));
    assertThat(underTest.state(NAMESPACE_1, WATERMARK_LATEST_ADDR), equalTo(value));
  }
",non-flaky,5
21181,androidx_androidx,SimplePreferenceComparisonCallbackTest.testTitleComparison,"    @Test
    public void testTitleComparison() throws Exception {
        mPref1.setTitle(""value 1"");

        assertFalse(""Compare non-null to null"",
                mComparisonCallback.arePreferenceContentsTheSame(mPref1, mPref2));
        assertFalse(""Compare null to non-null"",
                mComparisonCallback.arePreferenceContentsTheSame(mPref2, mPref1));

        mPref2.setTitle(""value 1"");

        assertTrue(""Compare identical"",
                mComparisonCallback.arePreferenceContentsTheSame(mPref1, mPref2));

        mPref2.setTitle(""value 2"");

        assertFalse(""Compare different"",
                mComparisonCallback.arePreferenceContentsTheSame(mPref1, mPref2));
    }
",non-flaky,5
77003,Tencent_Firestorm,ShuffleServerGrpcTest.clearResourceTest,"  @Test
  public void clearResourceTest() throws Exception {
    final ShuffleWriteClient shuffleWriteClient =
        ShuffleClientFactory.getInstance().createShuffleWriteClient(
            ""GRPC"", 2, 10000L, 4);
    shuffleWriteClient.registerCoordinators(""127.0.0.1:19999"");
    shuffleWriteClient.registerShuffle(
        new ShuffleServerInfo(""127.0.0.1-20001"", ""127.0.0.1"", 20001),
        ""clearResourceTest1"",
        0,
        Lists.newArrayList(new PartitionRange(0, 1)));

    shuffleWriteClient.sendAppHeartbeat(""clearResourceTest1"", 1000L);
    shuffleWriteClient.sendAppHeartbeat(""clearResourceTest2"", 1000L);

    RssRegisterShuffleRequest rrsr = new RssRegisterShuffleRequest(""clearResourceTest1"", 0,
        Lists.newArrayList(new PartitionRange(0, 1)));
    shuffleServerClient.registerShuffle(rrsr);
    rrsr = new RssRegisterShuffleRequest(""clearResourceTest2"", 0,
        Lists.newArrayList(new PartitionRange(0, 1)));
    shuffleServerClient.registerShuffle(rrsr);
    assertEquals(Sets.newHashSet(""clearResourceTest1"", ""clearResourceTest2""),
        shuffleServers.get(0).getShuffleTaskManager().getAppIds().keySet());

    // Thread will keep refresh clearResourceTest1 in coordinator
    Thread t = new Thread(() -> {
      int i = 0;
      while (i < 20) {
        shuffleWriteClient.sendAppHeartbeat(""clearResourceTest1"", 1000L);
        i++;
        try {
          Thread.sleep(1000);
        } catch (InterruptedException e) {
          return;
        }
      }
    });
    t.start();

    // Heartbeat is sent to coordinator too]
    Thread.sleep(3000);
    shuffleServerClient.registerShuffle(new RssRegisterShuffleRequest(""clearResourceTest1"", 0,
        Lists.newArrayList(new PartitionRange(0, 1))));
    assertEquals(Sets.newHashSet(""clearResourceTest1""),
        coordinators.get(0).getApplicationManager().getAppIds());
    // clearResourceTest2 will be removed because of rss.server.app.expired.withoutHeartbeat
    Thread.sleep(2000);
    assertEquals(Sets.newHashSet(""clearResourceTest1""),
        shuffleServers.get(0).getShuffleTaskManager().getAppIds().keySet());

    // clearResourceTest1 will be removed because of rss.server.app.expired.withoutHeartbeat
    t.interrupt();
    Thread.sleep(8000);
    assertEquals(0, shuffleServers.get(0).getShuffleTaskManager().getAppIds().size());

  }
",non-flaky,5
162722,OpenAPITools_openapi-generator,XmlItemTest.namespaceStringTest,"    @Test
    public void namespaceStringTest() {
        // TODO: test namespaceString
    }
",non-flaky,5
162714,OpenAPITools_openapi-generator,XmlItemTest.nameArrayTest,"    @Test
    public void nameArrayTest() {
        // TODO: test nameArray
    }
",non-flaky,5
98209,apache_jackrabbit,RepositoryServiceImplIT.testGetAgainstTrustedCertServerWithSystemProperties,"    @Test
    public void testGetAgainstTrustedCertServerWithSystemProperties() throws RepositoryException, ClientProtocolException, IOException {
        assumeTrue(""Cannot connect to http://www.apache.org"", canConnectTo(""http://www.apache.org""));
        // use dedicated trust store
        Path keyStorePath = tmpDirectory.getRoot().toPath().resolve(""emptyPKCS12.keystore"");
        try (InputStream is = this.getClass().getResourceAsStream(""emptyPKCS12.keystore"")) {
            Files.copy(is, keyStorePath);
        }
        String oldTrustStore = System.setProperty(""javax.net.ssl.trustStore"", keyStorePath.toString());
        String oldTrustStorePassword = System.setProperty(""javax.net.ssl.trustStorePassword"", ""storePassword"");
        String oldDebug = System.setProperty(""javax.net.debug"", ""ssl"");
        try {
            ConnectionOptions connectionOptions = ConnectionOptions.builder().useSystemProperties(true).build();
            RepositoryServiceImpl repositoryServiceImpl = RepositoryServiceImplTest.getRepositoryService(""https://jackrabbit.apache.org/jcr"", connectionOptions);
            HttpClient client = repositoryServiceImpl.getClient(null);
            HttpGet get = new HttpGet(""https://jackrabbit.apache.org/jcr/index.html"");
            // connection must fail as cert is not trusted due to used trust store being empty
            assertThrows(SSLException.class, () -> client.execute(get, new BasicResponseHandler()));
        } finally {
            setOrClearSystemProperty(""javax.net.ssl.trustStore"", oldTrustStore);
            setOrClearSystemProperty(""javax.net.ssl.trustStorePassword"", oldTrustStorePassword);
            setOrClearSystemProperty(""javax.net.debug"", oldDebug);
        }
    }
",non-flaky,5
106618,Alluxio_alluxio,AlluxioJniFuseFileSystemTest.flush,"  @Test
  public void flush() throws Exception {
    FileOutStream fos = mock(FileOutStream.class);
    AlluxioURI anyURI = any();
    CreateFilePOptions options = any();
    when(mFileSystem.createFile(anyURI, options)).thenReturn(fos);

    // open a file
    mFileInfo.flags.set(O_WRONLY.intValue());
    mFuseFs.create(""/foo/bar"", 0, mFileInfo);

    // then call flush into it
    mFuseFs.flush(""/foo/bar"", mFileInfo);
    verify(fos).flush();
  }
",non-flaky,5
91427,strapdata_elassandra,MachineLearningLicensingTests.resetLicensing,"@TestLogging(""org.elasticsearch.xpack.ml.action:DEBUG"")
    public void resetLicensing() {
        enableLicensing();

        ensureStableCluster(1);
        ensureYellow();
    }
",non-flaky,5
77638,pholser_junit-quickcheck,DistinctListPropertyParameterTypesTest.shouldHold,"    @Test public void distinctLists() {
        @Property public void shouldHold(
            @Size(min = 2, max = 5)
",non-flaky,5
30946,camunda-cloud_zeebe,ElasticsearchExporterTest.shouldFailOnWrongPrefix,"  @Test
  public void shouldFailOnWrongPrefix() {
    // given
    config.index.prefix = ""prefix_withunderscore"";

    createExporterAndTestHarness();

    // then
    assertThatThrownBy(() -> testHarness.configure(""els"", config))
        .isInstanceOf(ExporterException.class)
        .withFailMessage(
            ""Elasticsearch prefix must not contain underscore. Current value: ""
                + config.index.prefix);
  }
",non-flaky,5
137163,spring-projects_spring-framework,AnnotationsScannerTests.method,"		@TestAnnotation1
		public void method() {
		}
",non-flaky,5
78243,apache_beam,StateInternalsTest.testMergeBagIntoNewNamespace,"  @Test
  public void testMergeBagIntoNewNamespace() throws Exception {
    BagState<String> bag1 = underTest.state(NAMESPACE_1, STRING_BAG_ADDR);
    BagState<String> bag2 = underTest.state(NAMESPACE_2, STRING_BAG_ADDR);
    BagState<String> bag3 = underTest.state(NAMESPACE_3, STRING_BAG_ADDR);

    bag1.add(""Hello"");
    bag2.add(""World"");
    bag1.add(""!"");

    StateMerging.mergeBags(Arrays.asList(bag1, bag2, bag3), bag3);

    // Reading the merged bag gets both the contents
    assertThat(bag3.read(), containsInAnyOrder(""Hello"", ""World"", ""!""));
    assertThat(bag1.read(), Matchers.emptyIterable());
    assertThat(bag2.read(), Matchers.emptyIterable());
  }
",non-flaky,5
78274,apache_beam,StateNamespacesTest.testFromStringIntervalWindow,"  @Test
  public void testFromStringIntervalWindow() {
    assertStringKeyRoundTrips(
        intervalCoder, StateNamespaces.window(intervalCoder, intervalWindow(1000, 8000)));
    assertStringKeyRoundTrips(
        intervalCoder, StateNamespaces.window(intervalCoder, intervalWindow(1000, 8000)));

    assertStringKeyRoundTrips(
        intervalCoder,
        StateNamespaces.windowAndTrigger(intervalCoder, intervalWindow(1000, 8000), 18));
    assertStringKeyRoundTrips(
        intervalCoder,
        StateNamespaces.windowAndTrigger(intervalCoder, intervalWindow(1000, 8000), 19));
    assertStringKeyRoundTrips(
        intervalCoder,
        StateNamespaces.windowAndTrigger(intervalCoder, intervalWindow(2000, 8000), 19));
  }
",non-flaky,5
99733,apache_cassandra,FQLReplayTest.testResultHandlerMultipleResultSets,"    @Test
    public void testResultHandlerMultipleResultSets() throws IOException
    {
        List<String> targetHosts = Lists.newArrayList(""hosta"", ""hostb"", ""hostc"");
        File tmpDir = Files.createTempDirectory(""testresulthandler"").toFile();
        File queryDir = Files.createTempDirectory(""queries"").toFile();
        List<File> resultPaths = new ArrayList<>();
        targetHosts.forEach(host -> { File f = new File(tmpDir, host); f.mkdir(); resultPaths.add(f);});
        List<Pair<FQLQuery, List<ResultHandler.ComparableResultSet>>> resultSets = new ArrayList<>();
        Random random = new Random();
        for (int i = 0; i < 10; i++)
        {
            List<ResultHandler.ComparableResultSet> results = new ArrayList<>();
            List<ByteBuffer> values = Collections.singletonList(ByteBufferUtil.bytes(i * 50));
            for (int jj = 0; jj < targetHosts.size(); jj++)
            {
                results.add(createResultSet(5, 1 + random.nextInt(10), true));
            }
            FQLQuery q = i % 2 == 0
                         ? new FQLQuery.Single(""abc""+i,
                                             3,
                                             QueryOptions.forInternalCalls(values),
                                             i * 1000,
                                             12345,
                                             54321,
                                             ""select * from xyz where id = ""+i,
                                             values)
                         : new FQLQuery.Batch(""abc""+i,
                                              3,
                                              QueryOptions.forInternalCalls(values),
                                              i * 1000,
                                              i * 54321,
                                              i * 12345,
                                              com.datastax.driver.core.BatchStatement.Type.UNLOGGED,
                                              Lists.newArrayList(""select * from aaaa""),
                                              Collections.singletonList(values));

            resultSets.add(Pair.create(q, results));
        }
        try (ResultHandler rh = new ResultHandler(targetHosts, resultPaths, queryDir))
        {
            for (int i = 0; i < resultSets.size(); i++)
                rh.handleResults(resultSets.get(i).left, resultSets.get(i).right);
        }

        for (int i = 0; i < targetHosts.size(); i++)
            compareWithFile(resultPaths, queryDir, resultSets, i);
    }
",non-flaky,5
33858,apache_camel,FhirPatchIT.testPatchByStringId,"    @Test
    public void testPatchByStringId() throws Exception {
        final Map<String, Object> headers = new HashMap<>();
        // parameter type is String
        headers.put(""CamelFhir.patchBody"", PATCH);
        // parameter type is String
        headers.put(""CamelFhir.stringId"", this.patient.getId());
        // parameter type is ca.uhn.fhir.rest.api.PreferReturnEnum
        headers.put(""CamelFhir.preferReturn"", null);

        MethodOutcome result = requestBodyAndHeaders(""direct://PATCH_BY_SID"", null, headers);
        assertActive(result);
    }
",non-flaky,5
98307,spotify_docker-client,ImageRefTest.testImageWithTag,"  @Test
  public void testImageWithTag() {
    final ImageRef sut = new ImageRef(""foobar:12345"");
    assertThat(sut.getImage(), equalTo(""foobar""));
    assertThat(sut.getTag(), is(""12345""));
  }
",non-flaky,5
70843,apache_kafka,WorkerSourceTaskTest.testSendRecordsRetries,"    @Test
    public void testSendRecordsRetries() throws Exception {
        createWorkerTask();

        // Differentiate only by Kafka partition so we can reuse conversion expectations
        SourceRecord record1 = new SourceRecord(PARTITION, OFFSET, ""topic"", 1, KEY_SCHEMA, KEY, RECORD_SCHEMA, RECORD);
        SourceRecord record2 = new SourceRecord(PARTITION, OFFSET, ""topic"", 2, KEY_SCHEMA, KEY, RECORD_SCHEMA, RECORD);
        SourceRecord record3 = new SourceRecord(PARTITION, OFFSET, ""topic"", 3, KEY_SCHEMA, KEY, RECORD_SCHEMA, RECORD);

        // First round
        expectSendRecordOnce(false);
        // Any Producer retriable exception should work here
        expectSendRecordSyncFailure(new org.apache.kafka.common.errors.TimeoutException(""retriable sync failure""));

        // Second round
        expectSendRecordOnce(true);
        expectSendRecordOnce(false);

        PowerMock.replayAll();

        // Try to send 3, make first pass, second fail. Should save last two
        Whitebox.setInternalState(workerTask, ""toSend"", Arrays.asList(record1, record2, record3));
        Whitebox.invokeMethod(workerTask, ""sendRecords"");
        assertEquals(true, Whitebox.getInternalState(workerTask, ""lastSendFailed""));
        assertEquals(Arrays.asList(record2, record3), Whitebox.getInternalState(workerTask, ""toSend""));

        // Next they all succeed
        Whitebox.invokeMethod(workerTask, ""sendRecords"");
        assertEquals(false, Whitebox.getInternalState(workerTask, ""lastSendFailed""));
        assertNull(Whitebox.getInternalState(workerTask, ""toSend""));

        PowerMock.verifyAll();
    }
",non-flaky,5
26895,wildfly_wildfly,InMemoryNamingStoreTestCase.testBindUnbindLookup,"    @Test
    public void testBindUnbindLookup() throws Exception {
        final Name name = new CompositeName(""test"");
        final Object object = new Object();
        nameStore.bind(name, object, Object.class);
        final Object result = nameStore.lookup(name);
        assertEquals(object, result);
        nameStore.unbind(name);
        try {
            nameStore.lookup(name);
            fail(""Should have thrown and NameNotFoundException"");
        } catch(NameNotFoundException expected) {}
    }
",non-flaky,5
59652,looly_hutool,TemplateUtilTest.renderToFileTest,"	@Test
	public void renderToFileTest() {
		TemplateEngine engine = new BeetlEngine(new TemplateConfig(""templates"", ResourceMode.CLASSPATH));
		Template template = engine.getTemplate(""freemarker_test.ftl"");

		final Map<String, Object> bindingMap = new HashMap<>();
		bindingMap.put(""name"", ""aa"");
		File outputFile = new File(""e:/test.txt"");
		template.render(bindingMap, outputFile);
	}
",non-flaky,5
33914,apache_camel,GridFsConsumerIT.testPersistentTS,"    @Test
    public void testPersistentTS() throws Exception {
        runTest(""direct:create-pts"", GridFSBuckets.create(mongo.getDatabase(""test""), getBucket() + ""-pts""));
    }
",non-flaky,5
98023,vert-x3_vertx-mongo-client,UpdateOptionsTest.testDefaultOptionsJson,"  @Test
  public void testDefaultOptionsJson() {
    UpdateOptions options = new UpdateOptions(new JsonObject());
    UpdateOptions def = new UpdateOptions();
    assertEquals(def.getWriteOption(), options.getWriteOption());
    assertEquals(def.isMulti(), options.isMulti());
    assertEquals(def.isUpsert(), options.isUpsert());
    assertEquals(def.getArrayFilters(), options.getArrayFilters());
  }
",non-flaky,5
89318,apache_samza,TestKafkaSystemAdminWithMock.testGetSSPMetadataShouldTerminateAfterFiniteRetriesOnException,"  @Test(expected = SamzaException.class)
  public void testGetSSPMetadataShouldTerminateAfterFiniteRetriesOnException() throws Exception {
    SystemStreamPartition oneSSP = new SystemStreamPartition(TEST_SYSTEM, VALID_TOPIC, new Partition(0));
    SystemStreamPartition otherSSP = new SystemStreamPartition(TEST_SYSTEM, ""otherTopic"", new Partition(1));

    ImmutableSet<SystemStreamPartition> ssps = ImmutableSet.of(oneSSP, otherSSP);
    List<TopicPartition> topicPartitions = ssps.stream()
        .map(ssp -> new TopicPartition(ssp.getStream(), ssp.getPartition().getPartitionId()))
        .collect(Collectors.toList());

    when(mockKafkaConsumer.beginningOffsets(topicPartitions)).thenThrow(new RuntimeException())
        .thenThrow(new RuntimeException());

    kafkaSystemAdmin.getSSPMetadata(ssps, new ExponentialSleepStrategy(2,
        1, 1));
  }
",non-flaky,5
135074,undertow-io_undertow,CookiesTestCase.testEqualsInValueNotAllowed,"    @Test
    public void testEqualsInValueNotAllowed() {
        Map<String, Cookie> cookies = Cookies.parseRequestCookies(2, false, Arrays.asList(""CUSTOMER=WILE_E_COYOTE=THE_COYOTE; SHIPPING=FEDEX""));
        Cookie cookie = cookies.get(""CUSTOMER"");
        Assert.assertNotNull(cookie);
        Assert.assertEquals(""WILE_E_COYOTE"", cookie.getValue());
        cookie = cookies.get(""SHIPPING"");
        Assert.assertNotNull(cookie);
        Assert.assertEquals(""FEDEX"", cookie.getValue());
    }
",non-flaky,5
104683,apache_pinot,RealtimeToOfflineSegmentsMinionClusterIntegrationTest.testQueryExceptions,"  @Test(enabled = false)
  public void testQueryExceptions() {
  }
",non-flaky,5
60882,apache_druid,MaterializedViewSupervisorTest.testCheckSegmentsAndSubmitTasks,"  @Test
  public void testCheckSegmentsAndSubmitTasks() throws IOException
  {
    Set<DataSegment> baseSegments = Sets.newHashSet(
        new DataSegment(
            ""base"",
            Intervals.of(""2015-01-02T00Z/2015-01-03T00Z""),
            ""2015-01-03"",
            ImmutableMap.of(),
            ImmutableList.of(""dim1"", ""dim2""),
            ImmutableList.of(""m1""),
            new HashBasedNumberedShardSpec(0, 1, 0, 1, null, null, null),
            9,
            1024
        )
    );
    indexerMetadataStorageCoordinator.announceHistoricalSegments(baseSegments);
    EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();
    EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.absent()).anyTimes();
    EasyMock.expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes();
    EasyMock.expect(taskStorage.getStatus(""test_task1""))
            .andReturn(Optional.of(TaskStatus.failure(""test_task1"", ""Dummy task status failure err message"")))
            .anyTimes();
    EasyMock.expect(taskStorage.getStatus(""test_task2""))
            .andReturn(Optional.of(TaskStatus.running(""test_task2"")))
            .anyTimes();
    EasyMock.replay(taskStorage);

    Pair<Map<Interval, HadoopIndexTask>, Map<Interval, String>> runningTasksPair = supervisor.getRunningTasks();
    Map<Interval, HadoopIndexTask> runningTasks = runningTasksPair.lhs;
    Map<Interval, String> runningVersion = runningTasksPair.rhs;

    DataSchema dataSchema = new DataSchema(
        ""test_datasource"",
        null,
        null,
        null,
        TransformSpec.NONE,
        objectMapper
    );
    HadoopIOConfig hadoopIOConfig = new HadoopIOConfig(new HashMap<>(), null, null);
    HadoopIngestionSpec spec = new HadoopIngestionSpec(dataSchema, hadoopIOConfig, null);
    HadoopIndexTask task1 = new HadoopIndexTask(
        ""test_task1"",
        spec,
        null,
        null,
        null,
        objectMapper,
        null,
        null,
        null
    );
    runningTasks.put(Intervals.of(""2015-01-01T00Z/2015-01-02T00Z""), task1);
    runningVersion.put(Intervals.of(""2015-01-01T00Z/2015-01-02T00Z""), ""test_version1"");

    HadoopIndexTask task2 = new HadoopIndexTask(
        ""test_task2"",
        spec,
        null,
        null,
        null,
        objectMapper,
        null,
        null,
        null
    );
    runningTasks.put(Intervals.of(""2015-01-02T00Z/2015-01-03T00Z""), task2);
    runningVersion.put(Intervals.of(""2015-01-02T00Z/2015-01-03T00Z""), ""test_version2"");

    supervisor.checkSegmentsAndSubmitTasks();

    Map<Interval, HadoopIndexTask> expectedRunningTasks = new HashMap<>();
    Map<Interval, String> expectedRunningVersion = new HashMap<>();
    expectedRunningTasks.put(Intervals.of(""2015-01-02T00Z/2015-01-03T00Z""), task2);
    expectedRunningVersion.put(Intervals.of(""2015-01-02T00Z/2015-01-03T00Z""), ""test_version2"");

    Assert.assertEquals(expectedRunningTasks, runningTasks);
    Assert.assertEquals(expectedRunningVersion, runningVersion);

  }
",non-flaky,5
76681,quarkusio_quarkus,CustomAuthEmbeddedBase.testJaxrsPathAdminRoleSuccess,"    @Test
    public void testJaxrsPathAdminRoleSuccess() {
        RestAssured.given().auth().preemptive().basic(""scott"", ""jb0ss"")
                .when().get(""/jaxrs-secured/parameterized-paths/my/banking/admin"").then()
                .statusCode(200);
    }
",non-flaky,5
91442,strapdata_elassandra,DebPreservationTestCase.onlyCompatibleDistributions,"@TestCaseOrdering(TestCaseOrdering.AlphabeticOrder.class)
    public void onlyCompatibleDistributions() {
        assumeTrue(""only dpkg platforms"", isDPKG());
        assumeTrue(""only compatible distributions"", distribution().packaging.compatible);
    }
",non-flaky,5
176778,ctco_cukes,RandomGeneratorFacadeImplTest.byInvalidPattern,"    @Test(expected = CukesRuntimeException.class)
    public void byInvalidPattern() throws Exception {
        generator.byPattern(""b"");
    }
",non-flaky,5
175806,GoogleCloudPlatform_google-cloud-eclipse,ProjectSelectorSelectionChangedListenerTest.testSelectionChanged_changeSelectedProject,"  @Test
  public void testSelectionChanged_changeSelectedProject()
      throws ProjectRepositoryException, InterruptedException {
    when(projectRepository.getAppEngineApplication(any(Credential.class), eq(""oldProjectId"")))
        .thenThrow(new ProjectRepositoryException(""testException""));
    when(projectRepository.getAppEngineApplication(any(Credential.class), eq(""projectId"")))
        .thenReturn(AppEngine.NO_APPENGINE_APPLICATION);

    initSelectionAndAccountSelector(new GcpProject(""oldProjectName"", ""oldProjectId""));
    listener.selectionChanged(event);

    Job oldJob = listener.latestQueryJob;
    assertNotNull(oldJob);
    oldJob.join();

    initSelectionAndAccountSelector();
    listener.selectionChanged(event);

    Job newJob = listener.latestQueryJob;
    assertNotNull(newJob);
    assertNotEquals(oldJob, newJob);
    newJob.join();

    verify(projectRepository).getAppEngineApplication(any(Credential.class), eq(""oldProjectId""));
    verify(projectRepository).getAppEngineApplication(any(Credential.class), eq(""projectId""));
    verify(projectSelector).setStatusLink(EXPECTED_MESSAGE_WHEN_NO_APPLICATION, EXPECTED_LINK);
  }
",non-flaky,5
113730,salesforce_reactive-grpc,EndToEndIntegrationTest.oneToOne,"    @Test
    public void oneToOne() throws IOException {
        ReactorGreeterGrpc.ReactorGreeterStub stub = ReactorGreeterGrpc.newReactorStub(channel);
        Mono<HelloRequest> req = Mono.just(HelloRequest.newBuilder().setName(""reactorjava"").build());
        Mono<HelloResponse> resp = req.compose(stub::sayHello);

        StepVerifier.create(resp.map(HelloResponse::getMessage))
                .expectNext(""Hello reactorjava"")
                .verifyComplete();
    }
",non-flaky,5
40,apache_hadoop,TestDFSIO.testReadRandom,"@Test
public void testReadRandom() throws Exception {
    FileSystem fs = cluster.getFileSystem();
    long tStart = System.currentTimeMillis();
    bench.getConf().setLong(""test.io.skip.size"", 0);
    bench.randomReadTest(fs);
    long execTime = System.currentTimeMillis() - tStart;
    bench.analyzeResult(fs, TestType.TEST_TYPE_READ_RANDOM, execTime);
}",test order dependency,4
97740,vojtechhabarta_typescript-generator,DuplicatePropertyTest.testDuplicateProperty,"    @Test
    public void testDuplicateProperty() throws JsonProcessingException {
        final Settings settings = TestUtils.settings();
        settings.outputKind = TypeScriptOutputKind.module;
        settings.outputFileType = TypeScriptFileType.implementationFile;
        settings.mapClasses = ClassMapping.asClasses;
        final String output = new TypeScriptGenerator(settings).generateTypeScript(Input.from(DuplicateKindUsage.class));
        Assert.assertTrue(!output.contains(""DuplicateKindUnion""));
    }
",non-flaky,5
98214,apache_jackrabbit,ConnectionOptionsTest.testBuilder,"    @Test
    public void testBuilder() {
        ConnectionOptions.Builder builder = ConnectionOptions.builder();
        builder.allowSelfSignedCertificates(true);
        builder.disableHostnameVerification(false);
        builder.maxConnections(10);
        builder.connectionTimeoutMs(100);
        builder.requestTimeoutMs(200);
        builder.socketTimeoutMs(300);
        builder.proxyHost(""proxyHost"");
        builder.proxyPort(1234);
        builder.proxyUsername(""proxyUser"");
        builder.proxyPassword(""proxyPassword"");
        builder.proxyProtocol(""https:"");
        ConnectionOptions options = builder.build();
        Assert.assertEquals(true, options.isAllowSelfSignedCertificates());
        Assert.assertEquals(false, options.isDisableHostnameVerification());
        Assert.assertEquals(10, options.getMaxConnections());
        Assert.assertEquals(100, options.getConnectionTimeoutMs());
        Assert.assertEquals(200, options.getRequestTimeoutMs());
        Assert.assertEquals(300, options.getSocketTimeoutMs());
        Assert.assertEquals(""proxyHost"", options.getProxyHost());
        Assert.assertEquals(1234, options.getProxyPort());
        Assert.assertEquals(""proxyUser"", options.getProxyUsername());
        Assert.assertEquals(""proxyPassword"", options.getProxyPassword());
        Assert.assertEquals(""https:"", options.getProxyProtocol());
    }
",non-flaky,5
21186,androidx_androidx,SimplePreferenceComparisonCallbackTest.testTwoStateComparison,"    @Test
    public void testTwoStateComparison() throws Exception {
        final TwoStatePreference checkbox1 =
                new CheckBoxPreference(InstrumentationRegistry.getTargetContext());
        final TwoStatePreference checkbox2 =
                new CheckBoxPreference(InstrumentationRegistry.getTargetContext());

        checkbox1.setChecked(true);
        checkbox2.setChecked(true);

        assertTrue(""Compare checked"",
                mComparisonCallback.arePreferenceContentsTheSame(checkbox1, checkbox2));

        checkbox2.setChecked(false);

        assertFalse(""Compare checked/unchecked"",
                mComparisonCallback.arePreferenceContentsTheSame(checkbox1, checkbox2));
        assertFalse(""Compare unchecked/checked"",
                mComparisonCallback.arePreferenceContentsTheSame(checkbox2, checkbox1));

        checkbox1.setChecked(false);

        assertTrue(""Compare unchecked"",
                mComparisonCallback.arePreferenceContentsTheSame(checkbox1, checkbox2));
    }
",non-flaky,5
106620,Alluxio_alluxio,AlluxioJniFuseFileSystemTest.getattrWithDelay,"  @Test
  public void getattrWithDelay() throws Exception {
    String path = ""/foo/bar"";
    AlluxioURI expectedPath = BASE_EXPECTED_URI.join(""/foo/bar"");

    // set up status
    FileInfo info = new FileInfo();
    info.setLength(0);
    info.setCompleted(false);
    URIStatus status = new URIStatus(info);

    // mock fs
    when(mFileSystem.getStatus(any(AlluxioURI.class))).thenReturn(status);

    FileStat stat = FileStat.of(ByteBuffer.allocateDirect(256));

    // Use another thread to open file so that
    // we could change the file status when opening it
    Thread t = new Thread(() -> mFuseFs.getattr(path, stat));
    t.start();
    Thread.sleep(1000);

    // If the file is not being written and is not completed,
    // we will wait for the file to complete
    verify(mFileSystem, atLeast(10)).getStatus(expectedPath);
    assertEquals(0, stat.st_size.longValue());

    info.setCompleted(true);
    info.setLength(1000);

    t.join();

    assertEquals(1000, stat.st_size.longValue());
  }
",non-flaky,5
77696,pholser_junit-quickcheck,PrimitivePropertyParameterTypesTest.shouldHold,"    @Test public void rangedWrapperCharacter() {
        @Property public void shouldHold(@InRange(min = ""0"", max = ""9"") Character ch) {
            assertThat(ch, allOf(greaterThanOrEqualTo('0'), lessThanOrEqualTo('9')));
        }
",non-flaky,5
160342,ConsenSys_teku,MetricsDataFactoryTest.shouldDeserializeObjectFromString,"  @Test
  public void shouldDeserializeObjectFromString() throws JsonProcessingException {
    when(prometheusMock.streamObservations()).thenReturn(getMockObservations().stream());
    final MetricsDataFactory metricsDataFactory = new MetricsDataFactory(prometheusMock);
    final List<BaseMetricData> baseMetricData = metricsDataFactory.getMetricData(timeProvider);
    assertThat(baseMetricData.size()).isEqualTo(3);

    String listOfMetrics = jsonProvider.objectToJSON(baseMetricData);
    DeserializedMetricDataObject[] base =
        jsonProvider.jsonToObject(listOfMetrics, DeserializedMetricDataObject[].class);

    assertThat(base.length).isEqualTo(3);
  }
",non-flaky,5
135716,Netflix_Hystrix,HystrixThreadPoolMetricsTest.shouldYieldNoExecutedTasksOnStartup,"	@Test
	public void shouldYieldNoExecutedTasksOnStartup() throws Exception {
		//given
		final Collection<HystrixThreadPoolMetrics> instances = HystrixThreadPoolMetrics.getInstances();

		//then
		assertEquals(0, instances.size());

	}
",non-flaky,5
97734,vojtechhabarta_typescript-generator,OptionalAnnotationTest.testNullableTypeAnnotation,"    @Test
    public void testNullableTypeAnnotation() {
        Settings settings = TestUtils.settings();
        settings.optionalAnnotations.add(NullableType.class);
        final String output = new TypeScriptGenerator(settings).generateTypeScript(Input.from(BeanWithNullableType.class));
        Assert.assertTrue(output.contains(""property1?: string;""));
        Assert.assertTrue(output.contains(""property2?: string;""));
    }
",non-flaky,5
176822,ctco_cukes,EntityFacadeTest.stringValueIsCheckedAsString,"    @Test
    public void stringValueIsCheckedAsString() throws Exception {
        BasicAttributes entity = new BasicAttributes(true);
        entity.put(""userPassword"", ""hello"");

        Whitebox.setInternalState(entityFacade, ""entity"", entity);

        entityFacade.entityHasAttributeWithValue(""userpassword"", ""hello"");
    }
",non-flaky,5
84579,apache_zookeeper,LeaderElectionSupportTest.testOfferShuffle,"    @Test
    public void testOfferShuffle() throws InterruptedException {
        int testIterations = 10;
        final CountDownLatch latch = new CountDownLatch(testIterations);
        final AtomicInteger failureCounter = new AtomicInteger();
        List<Thread> threads = new ArrayList<>(testIterations);

        for (int i = 1; i <= testIterations; i++) {
            threads.add(runElectionSupportThread(latch, failureCounter, Math.min(i * 1200, 10000)));
        }

        if (!latch.await(60, TimeUnit.SECONDS)) {
            LOGGER.info(""Waited for all threads to start, but timed out. We had {} failures."", failureCounter);
        }
    }
",non-flaky,5
98613,nutzam_nutz,El2Test.run,"    @Test
    public void testIssue306() throws InterruptedException {
        int size = 100;
        final CountDownLatch count = new CountDownLatch(size);
        final List<Integer> error = new ArrayList<Integer>();
        for (int index = 0; index < size; index++) {
            new Thread() {
                public void run() {
                    try {
                        El.eval(""1+1"");
                    }
                    catch (Exception e) {
                        error.add(1);
                    }
                    finally {
                        count.countDown();
                    }
                }
",non-flaky,5
156454,apache_commons-lang,DateUtilsFragmentTest.testSecondsofHourWithCalendar,"    @Test
    public void testSecondsofHourWithCalendar() {
        final long testResult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.HOUR_OF_DAY);
        assertEquals(
                seconds
                        + (minutes
                                * DateUtils.MILLIS_PER_MINUTE / DateUtils.MILLIS_PER_SECOND),
                testResult);
    }
",non-flaky,5
112752,hwang-pku_ormlite-core,DatabaseConnectionProxyTest.testIsClosedNull,"	@Test
	public void testIsClosedNull() throws Exception {
		DatabaseConnectionProxy proxy = new DatabaseConnectionProxy(null);
		assertTrue(proxy.isClosed());
		proxy.close();
	}
",non-flaky,5
94814,ktuukkan_marine-api,AISMessage04Test.getUtcSecond,"    @Test
    public void getUtcSecond() throws Exception {
        assertEquals(20, msg.getUtcSecond());
    }
",non-flaky,5
112125,apache_shardingsphere-elasticjob,StatisticRdbRepositoryTest.assertFindLatestJobRunningStatisticsWhenTableIsEmpty,"    @Test
    public void assertFindLatestJobRunningStatisticsWhenTableIsEmpty() {
        assertFalse(repository.findLatestJobRunningStatistics().isPresent());
    }
",non-flaky,5
60892,apache_druid,KafkaEmitterTest.testKafkaEmitter,"  @Test(timeout = 15_000)
  public void testKafkaEmitter() throws InterruptedException
  {
    final List<ServiceMetricEvent> serviceMetricEvents = ImmutableList.of(
        ServiceMetricEvent.builder().build(""m1"", 1).build(""service"", ""host"")
    );

    final List<AlertEvent> alertEvents = ImmutableList.of(
        new AlertEvent(""service"", ""host"", ""description"")
    );

    final List<RequestLogEvent> requestLogEvents = ImmutableList.of(
        DefaultRequestLogEventBuilderFactory.instance().createRequestLogEventBuilder(""requests"",
            RequestLogLine.forSql("""", null, DateTimes.nowUtc(), null, new QueryStats(ImmutableMap.of()))
        ).build(""service"", ""host"")
    );

    int totalEvents = serviceMetricEvents.size() + alertEvents.size() + requestLogEvents.size();
    int totalEventsExcludingRequestLogEvents = totalEvents - requestLogEvents.size();

    final CountDownLatch countDownSentEvents = new CountDownLatch(
        requestTopic == null ? totalEventsExcludingRequestLogEvents : totalEvents);
    final KafkaProducer<String, String> producer = EasyMock.createStrictMock(KafkaProducer.class);
    final KafkaEmitter kafkaEmitter = new KafkaEmitter(
        new KafkaEmitterConfig("""", ""metrics"", ""alerts"", requestTopic, ""test-cluster"", null),
        new ObjectMapper()
    )
    {
      @Override
      protected Producer<String, String> setKafkaProducer()
      {
        return producer;
      }

      @Override
      protected void sendToKafka(final String topic, MemoryBoundLinkedBlockingQueue<String> recordQueue,
          Callback callback
      )
      {
        countDownSentEvents.countDown();
        super.sendToKafka(topic, recordQueue, callback);
      }
    };

    EasyMock.expect(producer.send(EasyMock.anyObject(), EasyMock.anyObject())).andReturn(null)
        .times(requestTopic == null ? totalEventsExcludingRequestLogEvents : totalEvents);
    EasyMock.replay(producer);
    kafkaEmitter.start();

    for (Event event : serviceMetricEvents) {
      kafkaEmitter.emit(event);
    }
    for (Event event : alertEvents) {
      kafkaEmitter.emit(event);
    }
    for (Event event : requestLogEvents) {
      kafkaEmitter.emit(event);
    }
    countDownSentEvents.await();

    Assert.assertEquals(0, kafkaEmitter.getMetricLostCount());
    Assert.assertEquals(0, kafkaEmitter.getAlertLostCount());
    Assert.assertEquals(requestTopic == null ? requestLogEvents.size() : 0, kafkaEmitter.getRequestLostCount());
    Assert.assertEquals(0, kafkaEmitter.getInvalidLostCount());

    while (true) {
      try {
        EasyMock.verify(producer);
        break;
      }
      catch (Throwable e) {
        // although the latch may have count down, producer.send may not have been called yet in KafkaEmitter
        // so wait for sometime before verifying the mock
        Thread.sleep(100);
        // just continue
      }
    }
  }
",non-flaky,5
110135,Wikidata_wikidata-toolkit,ClientConfigurationTest.testOfflineModeArgumentsShort,"	@Test
	public void testOfflineModeArgumentsShort() {
		String[] args = new String[] { ""-n"" };
		ClientConfiguration config = new ClientConfiguration(args);
		assertTrue(config.getOfflineMode());
	}
",non-flaky,5
177992,aosp-mirror_platform_frameworks_support,GuidedStepSupportFragmentTest.answer,"    @Test
    public void subActions() throws Throwable {
        final String firstFragmentName = generateMethodTestName(""first"");
        final String secondFragmentName = generateMethodTestName(""second"");
        final boolean[] expandSubActionInOnCreateView = new boolean[] {false};
        GuidedStepTestSupportFragment.Provider first = mockProvider(firstFragmentName);
        doAnswer(new Answer<Void>() {
            public Void answer(InvocationOnMock invocation) {
                GuidedStepTestSupportFragment.Provider obj = (GuidedStepTestSupportFragment.Provider)
                        invocation.getMock();
                if (expandSubActionInOnCreateView[0]) {
                    obj.getFragment().expandAction(obj.getFragment().findActionById(1000), false);
                }
                return null;
            }
",non-flaky,5
114130,aws_aws-sdk-java-v2,LocalDateTimeAttributeConverterTest.localDateTimeAttributeConverterNotAcceptOffsetTimeTest,"    @Test
    public void localDateTimeAttributeConverterNotAcceptOffsetTimeTest() {
        assertFails(() -> transformTo(converter, EnhancedAttributeValue.fromString(""1988-05-21T00:12:00+01:00"")
                                                                       .toAttributeValue()));
    }
",non-flaky,5
97718,vojtechhabarta_typescript-generator,JaxbTest.testJAXBElement,"    @Test
    public void testJAXBElement() {
        final Settings settings = TestUtils.settings();
        settings.jsonLibrary = JsonLibrary.jaxb;
        final String output = new TypeScriptGenerator(settings).generateTypeScript(Input.from(ClassWithJAXBElements.class));
        Assert.assertTrue(output.contains(""ExternalReference: string""));
        Assert.assertTrue(output.contains(""UserInformation: UserType""));
        Assert.assertTrue(output.contains(""Source: EndPointType""));
        Assert.assertTrue(output.contains(""AdditionalContextInfo: AdditionalContextType""));
    }
",non-flaky,5
162687,OpenAPITools_openapi-generator,TypeHolderDefaultTest.testTypeHolderDefault,"    @Test
    public void testTypeHolderDefault() {
        // TODO: test TypeHolderDefault
    }
",non-flaky,5
86084,graylog2_graylog2-server,EventDefinitionHandlerTest.updateWithSchedulingDisabled,"    @Test
    public void updateWithSchedulingDisabled() {
        final String newTitle = ""A NEW TITLE "" + DateTime.now(DateTimeZone.UTC).toString();
        final String newDescription = ""A NEW DESCRIPTION "" + DateTime.now(DateTimeZone.UTC).toString();

        final EventDefinitionDto existingDto = eventDefinitionService.get(""54e3deadbeefdeadbeef0000"").orElse(null);
        final JobDefinitionDto existingJobDefinition = jobDefinitionService.get(""54e3deadbeefdeadbeef0001"").orElse(null);
        final JobTriggerDto existingTrigger = jobTriggerService.get(""54e3deadbeefdeadbeef0002"").orElse(null);
        final TestEventProcessorConfig existingConfig = (TestEventProcessorConfig) existingDto.config();
        final TestEventProcessorConfig newConfig = existingConfig.toBuilder()
                .executeEveryMs(550000)
                .searchWithinMs(800000)
                .build();

        assertThat(existingDto).isNotNull();
        assertThat(existingJobDefinition).isNotNull();
        assertThat(existingTrigger).isNotNull();

        final EventDefinitionDto updatedDto = existingDto.toBuilder()
                .title(newTitle)
                .description(newDescription)
                .config(newConfig)
                .build();

        assertThat(handler.update(updatedDto, false)).isNotEqualTo(existingDto);

        assertThat(eventDefinitionService.get(existingDto.id())).isPresent().get().satisfies(dto -> {
            assertThat(dto.id()).isEqualTo(existingDto.id());
            assertThat(dto.title()).isEqualTo(newTitle);
            assertThat(dto.description()).isEqualTo(newDescription);
        });

        assertThat(jobDefinitionService.get(""54e3deadbeefdeadbeef0001"")).isNotPresent();
        assertThat(jobTriggerService.get(""54e3deadbeefdeadbeef0002"")).isNotPresent();
    }
",non-flaky,5
145,apache_pinot,SegmentGenerationWithTimeColumnTest.testMinAllowedValue,"@Test
public void testMinAllowedValue() {
    long millis = _validMinTime;
    DateTime dateTime = new DateTime(millis, DateTimeZone.UTC);
    LocalDateTime localDateTime = dateTime.toLocalDateTime();
    int year = localDateTime.getYear();
    int month = localDateTime.getMonthOfYear();
    int day = localDateTime.getDayOfMonth();
    Assert.assertEquals(year, 1971);
    Assert.assertEquals(month, 1);
    Assert.assertEquals(day, 1);
}",time,2
21221,androidx_androidx,PreferenceDataStoreTest.testGetBooleanWithDataStoreOnPref,"    @Test
    public void testGetBooleanWithDataStoreOnPref() {
        mPreference.setPreferenceDataStore(mDataStore);
        mScreen.addPreference(mPreference);

        mPreference.getBoolean(true);

        verify(mDataStore, atLeastOnce()).getBoolean(eq(KEY), eq(true));
    }
",non-flaky,5
269,wildfly_wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993.testUnbind,"@Test
public void testUnbind() throws Exception {
    final Name name = new CompositeName(""test"");
    final Object value = new Object();
    namingStore.bind(name, value);
    namingContext.unbind(name);
    try {
        namingStore.lookup(name);
        fail(""Should have thrown name not found"");
    } catch (NameNotFoundException expect) {}
    testActionPermission(JndiPermission.ACTION_BIND, namingContext, ""test"", value);
    testActionPermission(JndiPermission.ACTION_UNBIND, namingContext, ""test"");
    try {
        namingStore.lookup(name);
        fail(""Should have thrown name not found"");
    } catch (NameNotFoundException expect) {}
}",test order dependency,4
106591,Alluxio_alluxio,HdfsProxyUserValidationTaskTest.proxyUsersAndGroupsAllMissing,"  @Test
  public void proxyUsersAndGroupsAllMissing() {
    String userName = System.getProperty(""user.name"");

    // Proxyuser configured for bob, not the running user
    prepareHdfsConfFiles(ImmutableMap.of(""hadoop.proxyuser.bob.users"", ""user1,user3"",
            ""hadoop.proxyuser.bob.groups"", ""*""));

    HdfsProxyUserValidationTask task =
            new HdfsProxyUserValidationTask(""hdfs://namenode:9000/alluxio"", mConf);
    ValidationTaskResult result = task.validateImpl(ImmutableMap.of());
    assertEquals(ValidationUtils.State.FAILED, result.getState());
    assertThat(result.getResult(), containsString(
            ""Alluxio is not able to perform impersonation.""));
    assertThat(result.getAdvice(), containsString(
            String.format(""Please enable Alluxio user %s to impersonate"", userName)));
  }
",non-flaky,5
112644,tbsalling_aismessages,BinaryBroadcastMessageTest.canDecodeDac200Fi10InlandShipStaticAndVoyageRelatedData2,"    @Test
    public void canDecodeDac200Fi10InlandShipStaticAndVoyageRelatedData2() {
        AISMessage aisMessage = AISMessage.create(NMEAMessage.fromString(""!AIVDM,1,1,,A,83aDCr@j2P000000029Pt?cm0000,0*5F""));
        System.out.println(aisMessage.toString());

        assertTrue(aisMessage instanceof BinaryBroadcastMessage);
        BinaryBroadcastMessage binaryBroadcastMessage = (BinaryBroadcastMessage) aisMessage;
        assertEquals(200, binaryBroadcastMessage.getDesignatedAreaCode().intValue());
        assertEquals(10, binaryBroadcastMessage.getFunctionalId().intValue());

        ApplicationSpecificMessage asm = binaryBroadcastMessage.getApplicationSpecificMessage();
        assertEquals(200, asm.getDesignatedAreaCode());
        assertEquals(10, asm.getFunctionalId());

        assertTrue(asm instanceof InlandShipStaticAndVoyageRelatedData);
        InlandShipStaticAndVoyageRelatedData inlandMessage = (InlandShipStaticAndVoyageRelatedData) asm;

        assertEquals("""", inlandMessage.getUniqueEuropeanVesselIdentificationNumber());
        assertEquals(Float.valueOf(110.0f), inlandMessage.getLengthOfShip());
        assertEquals(Float.valueOf(12.0f), inlandMessage.getBeamOfShip());
        assertEquals(Integer.valueOf(8030), inlandMessage.getShipOrCombinationType());
        assertEquals(Integer.valueOf(5), inlandMessage.getHazardousCargo());
        assertEquals(Float.valueOf(0.0f), inlandMessage.getDraught());
        assertEquals(Integer.valueOf(0), inlandMessage.getLoaded());
        assertEquals(Integer.valueOf(0), inlandMessage.getQualityOfSpeedInformation());
        assertEquals(Integer.valueOf(0), inlandMessage.getQualityOfCourseInformation());
        assertEquals(Integer.valueOf(0), inlandMessage.getQualityOfHeadingInformation());
    }
",non-flaky,5
133991,CorfuDB_CorfuDB,PayloadTest.testBuildPayloadFromBuffer,"    @Test
    public void testBuildPayloadFromBuffer(){
        final int value = 12345;
        ByteBuf payload = Unpooled.buffer().writeInt(value);
        Integer result = CorfuProtocolCommon.fromBuffer(payload, Integer.class);

        assertThat(result).isEqualTo(value);
    }
",non-flaky,5
113785,salesforce_reactive-grpc,ReactivePublisherBackpressureOnReadyHandlerTest.onNextStopsPump,"    @Test
    public void onNextStopsPump() {
        ClientCallStreamObserver<Object> obs = mock(ClientCallStreamObserver.class);
        when(obs.isReady()).thenReturn(false);

        ReactivePublisherBackpressureOnReadyHandlerClient<Object> handler = new ReactivePublisherBackpressureOnReadyHandlerClient<Object>(obs);
        Subscription sub = mock(Subscription.class);

        handler.onSubscribe(sub);

        Object obj = new Object();
        handler.onNext(obj);

        verify(obs).onNext(obj);
        verify(sub, never()).request(1);
    }
",non-flaky,5
86090,graylog2_graylog2-server,EventDefinitionHandlerTest.unschedule,"    @Test
    public void unschedule() {
        assertThat(eventDefinitionService.get(""54e3deadbeefdeadbeef0000"")).isPresent();
        assertThat(jobDefinitionService.get(""54e3deadbeefdeadbeef0001"")).isPresent();
        assertThat(jobTriggerService.get(""54e3deadbeefdeadbeef0002"")).isPresent();

        handler.unschedule(""54e3deadbeefdeadbeef0000"");

        // Unschedule should NOT delete the event definition!
        assertThat(eventDefinitionService.get(""54e3deadbeefdeadbeef0000"")).isPresent();

        // Only the job definition and the trigger
        assertThat(jobDefinitionService.get(""54e3deadbeefdeadbeef0001"")).isNotPresent();
        assertThat(jobTriggerService.get(""54e3deadbeefdeadbeef0002"")).isNotPresent();
    }
",non-flaky,5
33709,alibaba_fastjson,JSONScannerTest.checkTime15,"  @Test
  public void checkTime15() throws Throwable {

    // Arrange
    JSONScanner objectUnderTest = ((JSONScanner)Reflector.getInstance(""com.alibaba.fastjson.parser.JSONScanner""));
    objectUnderTest.hasSpecial = false;
    objectUnderTest.token = 0;
    objectUnderTest.locale = null;
    objectUnderTest.np = 0;
    objectUnderTest.features = 0;
    Reflector.setField(objectUnderTest, ""text"", """");
    objectUnderTest.calendar = null;
    objectUnderTest.matchStat = 0;
    objectUnderTest.bp = 0;
    Reflector.setField(objectUnderTest, ""len"", 0);
    objectUnderTest.stringDefaultValue = """";
    objectUnderTest.pos = 0;
    objectUnderTest.sp = 0;
    objectUnderTest.sbuf = null;
    objectUnderTest.ch = '\u0000';
    objectUnderTest.timeZone = null;
    objectUnderTest.eofPos = 0;
    char h0 = '1';
    char h1 = '9';
    char m0 = '4';
    char m1 = '3';
    char s0 = '1';
    char s1 = '\u0430';

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkTime"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(objectUnderTest, h0, h1, m0, m1, s0, s1);

    // Assert result
    Assert.assertEquals(false, retval);

  }
",non-flaky,5
113788,salesforce_reactive-grpc,ReactivePublisherBackpressureOnReadyHandlerTest.exceptionInOnCompleteCancelsUpstreamSubscription,"    @Test
    public void exceptionInOnCompleteCancelsUpstreamSubscription() {
        ClientCallStreamObserver<Object> obs = mock(ClientCallStreamObserver.class);
        doThrow(new IllegalStateException(""won't be propagated to handler caller"")).when(obs).onCompleted();
        ReactivePublisherBackpressureOnReadyHandlerClient<Object> handler = new ReactivePublisherBackpressureOnReadyHandlerClient<Object>(obs);
        Subscription sub = mock(Subscription.class);
        handler.onSubscribe(sub);
        
        handler.onComplete();
        verify(obs).cancel(anyString(), any(Throwable.class));
        verify(obs).onError(any(Throwable.class));
    }
",non-flaky,5
175795,GoogleCloudPlatform_google-cloud-eclipse,RelativeFileFieldSetterTest.testFileDialogCanceled,"  @Test
  public void testFileDialogCanceled() {
    when(field.getText()).thenReturn("""");
    when(dialog.open()).thenReturn(null /* means canceled */);

    new RelativeFileFieldSetter(field, basePath, dialog).widgetSelected(event);
    verify(field, never()).setText(anyString());
  }
",non-flaky,5
122602,vespa-engine_vespa,TemplateTest.basic,"    @Test
    public void basic() {
        FileSystem fileSystem = TestFileSystem.create();
        Path templatePath = fileSystem.getPath(""/example.vm"");
        String templateContent = ""a $x, $y b"";
        new UnixPath(templatePath).writeUtf8File(templateContent);

        Path toPath = fileSystem.getPath(""/example"");
        TaskContext taskContext = mock(TaskContext.class);
        boolean converged = Template.at(templatePath)
                .set(""x"", ""foo"")
                .set(""y"", ""bar"")
                .getFileWriterTo(toPath)
                .converge(taskContext);

        assertTrue(converged);

        String actualContent = new UnixPath(toPath).readUtf8File();
        assertEquals(""a foo, bar b"", actualContent);
    }
",non-flaky,5
342,apache_hadoop,TestExportsTable.testHdfsInternalExportPoint,"  @Test
  public void testHdfsInternalExportPoint() throws IOException {
    NfsConfiguration config = new NfsConfiguration();
    MiniDFSCluster cluster = null;

    String exportPoint = ""/myexport1"";
    config.setStrings(NfsConfigKeys.DFS_NFS_EXPORT_POINT_KEY, exportPoint);
    // Use emphral port in case tests are running in parallel
    config.setInt(""nfs3.mountd.port"", 0);
    config.setInt(""nfs3.server.port"", 0);
    config.set(""nfs.http.address"", ""0.0.0.0:0"");
    Path base = new Path(exportPoint);

    try {
      cluster = new MiniDFSCluster.Builder(config).numDataNodes(1).build();
      cluster.waitActive();
      DistributedFileSystem hdfs = cluster.getFileSystem(0);
      hdfs.delete(base, true);
      hdfs.mkdirs(base);

      // Start nfs
      final Nfs3 nfsServer = new Nfs3(config);
      nfsServer.startServiceInternal(false);

      Mountd mountd = nfsServer.getMountd();
      RpcProgramMountd rpcMount = (RpcProgramMountd) mountd.getRpcProgram();
      assertTrue(rpcMount.getExports().size() == 1);

      String exportInMountd = rpcMount.getExports().get(0);
      assertTrue(exportInMountd.equals(exportPoint));

    } finally {
      if (cluster != null) {
        cluster.shutdown();
      }
    }
  }
",non-flaky,5
133935,CorfuDB_CorfuDB,LayoutHandlerTest.testCommit,"    @Test
    public void testCommit() {
        ResponseMsg responseACK = getResponseMsg(
                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.IGNORE),
                getCommitLayoutResponseMsg(true)
        );

        ResponseMsg responseNACK = getResponseMsg(
                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.CHECK),
                getCommitLayoutResponseMsg(false)
        );

        layoutHandler.handleMessage(responseACK, mockChannelHandlerContext);
        layoutHandler.handleMessage(responseNACK, mockChannelHandlerContext);

        // Verify that the correct request was completed (once) with the appropriate value,
        // and that we did not complete exceptionally.
        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));
        verify(mockClientRouter).completeRequest(responseACK.getHeader().getRequestId(), true);
        verify(mockClientRouter).completeRequest(responseNACK.getHeader().getRequestId(), false);
    }
",non-flaky,5
53141,cloudfoundry_uaa,AppsIntegrationTests.testHappyDay,"    @Test
    public void testHappyDay() throws Exception {

        RestOperations restTemplate = serverRunning.createRestTemplate();
        ResponseEntity<String> response = restTemplate.getForEntity(serverRunning.getUrl(""/api/apps""), String.class);
        // first make sure the resource is actually protected.
        assertNotSame(HttpStatus.OK, response.getStatusCode());
        HttpHeaders approvalHeaders = new HttpHeaders();
        OAuth2AccessToken accessToken = context.getAccessToken();
        approvalHeaders.set(""Authorization"", ""bearer "" + accessToken.getValue());

        ResponseEntity<String> result = serverRunning.getForString(""/api/apps"");
        assertEquals(HttpStatus.OK, result.getStatusCode());
        String body = result.getBody();
        assertTrue(""Wrong response: "" + body, body.contains(""dsyerapi.cloudfoundry.com""));

    }
",non-flaky,5
98355,Kong_unirest-java,ShutDownHooksTest.setUp,"    @Override @BeforeEach
    public void setUp() {
        super.setUp();
        clearUnirestHooks();
    }
",non-flaky,5
171,tbsalling_aismessages,7b0c4c708b6bb9a6da3d5737bcad1857ade8a931.canHandleFragmentedMessageReceived,"@Test
public void canHandleFragmentedMessageReceived() {
    NMEAMessage fragmentedNMEAMessage1 = NMEAMessage.fromString(""!AIVDM,2,1,3,B,55DA><02=6wpPuID000qTf059@DlU<00000000171lMDD4q20LmDp3hB,0*27"");
    NMEAMessage fragmentedNMEAMessage2 = NMEAMessage.fromString(""!AIVDM,2,2,3,B,p=Mh00000000000,2*4C"");
    final ArgumentCaptor<AISMessage> aisMessage = new ArgumentCaptor<>();
    context.checking(new Expectations() {{
        oneOf(aisMessageHandler).accept(with(aisMessage.getMatcher()));
    }});
    aisMessageReceiver.accept(fragmentedNMEAMessage1);
    aisMessageReceiver.accept(fragmentedNMEAMessage2);
    assertEquals(AISMessageType.ShipAndVoyageRelatedData, aisMessage.getCapturedObject().getMessageType());
}",test order dependency,4
70799,apache_kafka,PluginUtilsTest.testClientConfigProvider,"    @Test
    public void testClientConfigProvider() {
        assertFalse(PluginUtils.shouldLoadInIsolation(
                ""org.apache.kafka.common.config.provider.ConfigProvider"")
        );
        assertTrue(PluginUtils.shouldLoadInIsolation(
                ""org.apache.kafka.common.config.provider.FileConfigProvider"")
        );
        assertTrue(PluginUtils.shouldLoadInIsolation(
                ""org.apache.kafka.common.config.provider.FutureConfigProvider"")
        );
    }
",non-flaky,5
156416,apache_commons-lang,GmtTimeZoneTest.hoursOutOfRange,"    @Test
    public void hoursOutOfRange() {
        assertThrows(IllegalArgumentException.class, () -> new GmtTimeZone(false, 24, 0));
    }
",non-flaky,5
113784,salesforce_reactive-grpc,ReactivePublisherBackpressureOnReadyHandlerTest.onNextKeepsPumpRunning,"    @Test
    public void onNextKeepsPumpRunning() {
        ClientCallStreamObserver<Object> obs = mock(ClientCallStreamObserver.class);
        when(obs.isReady()).thenReturn(true);

        ReactivePublisherBackpressureOnReadyHandlerClient<Object> handler = new ReactivePublisherBackpressureOnReadyHandlerClient<Object>(obs);
        Subscription sub = mock(Subscription.class);

        handler.onSubscribe(sub);

        Object obj = new Object();
        handler.onNext(obj);

        verify(obs).onNext(obj);
        verify(sub).request(1);
    }
",non-flaky,5
122547,vespa-engine_vespa,SystemCtlTest.stop,"    @Test
    public void stop() {
        terminal.expectCommand(
                        ""systemctl show docker 2>&1"",
                        0,
                        ""a=b\n"" +
                                ""ActiveState=active\n"" +
                                ""bar=zoo\n"")
                .expectCommand(""systemctl stop docker 2>&1"", 0, """");

        assertTrue(new SystemCtl(terminal).stop(""docker"").converge(taskContext));
    }
",non-flaky,5
113976,apache_struts,NamedVariablePatternMatcherTest.testCompileWithMismatchedBracketsParses,"    @Test(expected = IllegalArgumentException.class)
    public void testCompileWithMismatchedBracketsParses() {
        NamedVariablePatternMatcher matcher = new NamedVariablePatternMatcher();

        matcher.compilePattern(""}"");
",non-flaky,5
43099,trinodb_trino,AbstractTestIntegrationSmokeTest.testShowTables,"    @Test
    public void testShowTables()
    {
        MaterializedResult actualTables = computeActual(""SHOW TABLES"").toTestTypes();
        MaterializedResult expectedTables = MaterializedResult.resultBuilder(getSession(), VARCHAR)
                .row(""orders"")
                .build();
        assertContains(actualTables, expectedTables);
    }
",non-flaky,5
53198,cloudfoundry_uaa,TotpMfaEndpointIntegrationTests.testQRCodeValidation,"    @Test
    public void testQRCodeValidation() {
        performLogin(username);
        assertEquals(zoneUrl + ""/login/mfa/register"", webDriver.getCurrentUrl());

        webDriver.findElement(By.id(""Next"")).click();
        assertEquals(zoneUrl + ""/login/mfa/verify"", webDriver.getCurrentUrl());
        webDriver.findElement(By.name(""code"")).sendKeys(""1111111111111111112222"");

        webDriver.findElement(By.id(""verify_code_btn"")).click();
        assertEquals(""Incorrect code, please try again."", webDriver.findElement(By.cssSelector(""form .error-color"")).getText());
    }
",non-flaky,5
91430,strapdata_elassandra,HttpInputIntegrationTests.testHttpInput,"@TestLogging(""org.elasticsearch.xpack.watcher:DEBUG,org.elasticsearch.xpack.watcher.WatcherIndexingListener:TRACE"")
    public void testHttpInput() throws Exception {
        createIndex(""index"");
        client().prepareIndex(""index"", ""type"", ""id"").setSource(""{}"", XContentType.JSON).setRefreshPolicy(IMMEDIATE).get();

        InetSocketAddress address = internalCluster().httpAddresses()[0];
        watcherClient().preparePutWatch(""_name"")
                .setSource(watchBuilder()
                        .trigger(schedule(interval(""5s"")))
                        .input(httpInput(HttpRequestTemplate.builder(address.getHostString(), address.getPort())
                                .path(""/index/_search"")
                                .body(Strings.toString(jsonBuilder().startObject().field(""size"", 1).endObject()))
                                .putHeader(""Content-Type"", new TextTemplate(""application/json""))))
                        .condition(new CompareCondition(""ctx.payload.hits.total"", CompareCondition.Op.EQ, 1L))
                        .addAction(""_id"", loggingAction(""anything"")))
                .get();

        timeWarp().trigger(""_name"");
        refresh();
        assertWatchWithMinimumPerformedActionsCount(""_name"", 1, false);
    }
",non-flaky,5
170491,eclipse_jetty.project,ConnectorServerTest.testAnyRMIHostBindsToAny,"    @Test
    public void testAnyRMIHostBindsToAny() throws Exception
    {
        connectorServer = new ConnectorServer(new JMXServiceURL(""service:jmx:rmi://0.0.0.0/jndi/rmi:///jmxrmi""), objectName);
        connectorServer.start();

        // Verify that I can connect to the RMI server using a non-loopback address.
        new Socket(InetAddress.getLocalHost(), connectorServer.getAddress().getPort()).close();
        // Verify that I can connect to the RMI server using the loopback address.
        new Socket(InetAddress.getLoopbackAddress(), connectorServer.getAddress().getPort()).close();
    }
",non-flaky,5
178018,aosp-mirror_platform_frameworks_support,PlaybackControlGlueTest.testMediaPlayPauseButtonOnFF,"    @Test
    public void testMediaPlayPauseButtonOnFF() {
        PlaybackControlsRow row = new PlaybackControlsRow();
        glue.setControlsRow(row);
        SparseArrayObjectAdapter adapter = (SparseArrayObjectAdapter)
                row.getPrimaryActionsAdapter();
        PlaybackControlsRow.MultiAction playPause = (PlaybackControlsRow.MultiAction) adapter
                .lookup(PlaybackControlGlue.ACTION_PLAY_PAUSE);
        PlaybackControlsRow.MultiAction fastForward = (PlaybackControlsRow.MultiAction) adapter
                .lookup(PlaybackControlGlue.ACTION_FAST_FORWARD);

        glue.onActionClicked(playPause);
        glue.onActionClicked(fastForward);
        assertEquals(PlaybackControlGlue.PLAYBACK_SPEED_FAST_L0, glue.getCurrentSpeedId());
        glue.onKey(null, KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE, new KeyEvent(KeyEvent.ACTION_DOWN,
                KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE));
        assertEquals(PlaybackControlGlue.PLAYBACK_SPEED_NORMAL, glue.getCurrentSpeedId());
    }
",non-flaky,5
112693,hwang-pku_ormlite-core,TransactionManagerTest.call,"	@Test
	public void testTransactionManagerTableName() throws Exception {
		ConnectionSource connectionSource = createMock(ConnectionSource.class);
		DatabaseConnection conn = createMock(DatabaseConnection.class);
		expect(conn.isAutoCommitSupported()).andReturn(false);
		Savepoint savePoint = createMock(Savepoint.class);
		expect(savePoint.getSavepointName()).andReturn(""name"").anyTimes();
		expect(conn.setSavePoint(isA(String.class))).andReturn(savePoint);
		conn.commit(savePoint);
		expect(connectionSource.getDatabaseType()).andReturn(databaseType);
		expect(connectionSource.getReadWriteConnection(FOO_TABLE_NAME)).andReturn(conn);
		expect(connectionSource.saveSpecialConnection(conn)).andReturn(true);
		connectionSource.clearSpecialConnection(conn);
		connectionSource.releaseConnection(conn);
		replay(connectionSource, conn, savePoint);
		TransactionManager tm = new TransactionManager(connectionSource);
		tm.callInTransaction(FOO_TABLE_NAME, new Callable<Void>() {
			@Override
			public Void call() {
				return null;
			}
",non-flaky,5
177163,line_armeria,SamlRequestIdManagerTest.shouldBeExpired,"    @Test
    public void shouldBeExpired() throws InterruptedException, UnsupportedEncodingException {
        final SamlRequestIdManager manager =
                SamlRequestIdManager.ofJwt(""me"", ""test"", 1, 0);

        final Instant started = Instant.now();
        final String id = manager.newId();
        assertThat(manager.validateId(id)).isTrue();

        await().pollDelay(Durations.TWO_HUNDRED_MILLISECONDS)
               .atMost(Durations.FIVE_SECONDS)
               .untilAsserted(() -> assertThat(manager.validateId(id)).isFalse());

        assertThat(java.time.Duration.between(started, Instant.now()).toMillis())
                .isGreaterThan(TimeUnit.SECONDS.toMillis(1));
    }
",non-flaky,5
89309,apache_samza,TestKafkaSystemAdminWithMock.testGetSystemStreamMetaDataForTopicWithNoMessage,"  @Test
  public void testGetSystemStreamMetaDataForTopicWithNoMessage() {
    // The topic with no messages will have beginningOffset = 0 and endOffset = 0
    when(mockKafkaConsumer.beginningOffsets(ImmutableList.of(testTopicPartition0, testTopicPartition1))).thenReturn(
        ImmutableMap.of(testTopicPartition0, 0L, testTopicPartition1, 0L));
    when(mockKafkaConsumer.endOffsets(ImmutableList.of(testTopicPartition0, testTopicPartition1))).thenReturn(
        ImmutableMap.of(testTopicPartition0, 0L, testTopicPartition1, 0L));

    Map<String, SystemStreamMetadata> metadataMap =
        kafkaSystemAdmin.getSystemStreamMetadata(ImmutableSet.of(VALID_TOPIC));
    assertEquals(""metadata should return for 1 topic"", metadataMap.size(), 1);

    // verify the metadata streamName
    assertEquals(""the stream name should be "" + VALID_TOPIC, metadataMap.get(VALID_TOPIC).getStreamName(), VALID_TOPIC);

    // verify the offset for each partition
    Map<Partition, SystemStreamMetadata.SystemStreamPartitionMetadata> systemStreamPartitionMetadata =
        metadataMap.get(VALID_TOPIC).getSystemStreamPartitionMetadata();
    assertEquals(""there are 2 partitions"", systemStreamPartitionMetadata.size(), 2);

    SystemStreamMetadata.SystemStreamPartitionMetadata partition0Metadata =
        systemStreamPartitionMetadata.get(new Partition(0));
    assertEquals(""oldest offset for partition 0"", partition0Metadata.getOldestOffset(), ""0"");
    assertEquals(""upcoming offset for partition 0"", partition0Metadata.getUpcomingOffset(), ""0"");
    assertEquals(""newest offset is not set due to abnormal upcoming offset"", partition0Metadata.getNewestOffset(),
        null);

    SystemStreamMetadata.SystemStreamPartitionMetadata partition1Metadata =
        systemStreamPartitionMetadata.get(new Partition(1));
    assertEquals(""oldest offset for partition 1"", partition1Metadata.getOldestOffset(), ""0"");
    assertEquals(""upcoming offset for partition 1"", partition1Metadata.getUpcomingOffset(), ""0"");
    assertEquals(""newest offset is not set due to abnormal upcoming offset"", partition1Metadata.getNewestOffset(),
        null);
  }
",non-flaky,5
33692,alibaba_fastjson,JSONScannerTest.checkDate15,"  @Test
  public void checkDate15() throws Throwable {

    // Arrange
    char y0 = '2';
    char y1 = '1';
    char y2 = '1';
    char y3 = '1';
    char M0 = '1';
    char M1 = '\u8031';
    int d0 = 0;
    int d1 = 0;

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkDate"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""int""), Reflector.forName(""int""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, y0, y1, y2, y3, M0, M1, d0, d1);

    // Assert result
    Assert.assertEquals(false, retval);

  }
",non-flaky,5
26772,MundaneImmortal_pair-distribution-app,DayPairsTest.testReplacePairWith,"	@Test
	public void testReplacePairWith() {
		DayPairs pairs = new DayPairs();
		Pair pair = new Pair(Arrays.asList(new Developer(""dev1""), new Developer(""dev2"")));
		Pair differentPair = new Pair();
		pairs.addPair(""track"", pair);
		
		assertThat(pairs.hasPair(pair), is(true));
		assertThat(pairs.hasPair(differentPair), is(false));
		
		pairs.replacePairWith(pair, differentPair);
		
		assertThat(pairs.hasPair(pair), is(false));
		assertThat(pairs.hasPair(differentPair), is(true));
	}
",non-flaky,5
78236,apache_beam,SimplePushbackSideInputDoFnRunnerTest.processElementSideInputReadyAllWindows,"  @Test
  public void processElementSideInputReadyAllWindows() {
    when(reader.isReady(Mockito.eq(singletonView), Mockito.any(BoundedWindow.class)))
        .thenReturn(true);

    ImmutableList<PCollectionView<?>> views = ImmutableList.of(singletonView);
    SimplePushbackSideInputDoFnRunner<Integer, Integer> runner = createRunner(views);

    WindowedValue<Integer> multiWindow =
        WindowedValue.of(
            2,
            new Instant(-2),
            ImmutableList.of(
                new IntervalWindow(new Instant(-500L), new Instant(0L)),
                new IntervalWindow(BoundedWindow.TIMESTAMP_MIN_VALUE, new Instant(250L)),
                GlobalWindow.INSTANCE),
            PaneInfo.ON_TIME_AND_ONLY_FIRING);
    Iterable<WindowedValue<Integer>> multiWindowPushback =
        runner.processElementInReadyWindows(multiWindow);
    assertThat(multiWindowPushback, emptyIterable());
    assertThat(
        underlying.inputElems,
        containsInAnyOrder(ImmutableList.copyOf(multiWindow.explodeWindows()).toArray()));
  }
",non-flaky,5
104653,apache_pinot,OfflineClusterIntegrationTest.testQueryWithOrderby,"  @Test
  public void testQueryWithOrderby()
      throws Exception {
    //test repeated columns in selection query
    String query = ""SELECT ArrTime, Carrier, DaysSinceEpoch FROM mytable ORDER BY DaysSinceEpoch DESC"";
    testQuery(query, Collections.singletonList(query));

    //test repeated columns in selection query
    query = ""SELECT ArrTime, DaysSinceEpoch, Carrier FROM mytable ORDER BY Carrier DESC"";
    testQuery(query, Collections.singletonList(query));

    //test repeated columns in selection query
    query = ""SELECT ArrTime, DaysSinceEpoch, Carrier FROM mytable ORDER BY Carrier DESC, ArrTime DESC"";
    testQuery(query, Collections.singletonList(query));
  }
",non-flaky,5
175796,GoogleCloudPlatform_google-cloud-eclipse,RelativeFileFieldSetterTest.testSetField,"  @Test
  public void testSetField() {
    when(field.getText()).thenReturn("""");
    when(dialog.open()).thenReturn(basePath + ""/sub/directory/app.yaml"");

    new RelativeFileFieldSetter(field, basePath, dialog).widgetSelected(event);
    verify(field).setText(""sub/directory/app.yaml"");
  }
",non-flaky,5
94672,square_okhttp,Http2Test.data,"  @Test public void maxLengthDataFrame() throws IOException {
      @Override public void data(boolean inFinished, int streamId, BufferedSource source,
          int length) throws IOException {
        assertFalse(inFinished);
        assertEquals(expectedStreamId, streamId);
        assertEquals(Http2.INITIAL_MAX_FRAME_SIZE, length);
        ByteString data = source.readByteString(length);
        for (byte b : data.toByteArray()) {
          assertEquals(2, b);
        }
      }
",non-flaky,5
170530,eclipse_jetty.project,TestSecurityAnnotationConversions.testRolesAllowedWithTransportGuarantee,"    @Test
    public void testRolesAllowedWithTransportGuarantee() throws Exception
    {
        //Assume we found 1 servlet with annotation with roles defined and
        //and a TransportGuarantee

        WebAppContext wac = makeWebAppContext(RolesServlet.class.getCanonicalName(), ""rolesServlet"", new String[]{
            ""/foo/*"", ""*.foo""
        });

        ServletSecurityAnnotationHandler annotationHandler = new ServletSecurityAnnotationHandler(wac);
        AnnotationIntrospector introspector = new AnnotationIntrospector(wac);
        introspector.registerHandler(annotationHandler);

        //set up the expected outcomes:compareResults
        //1 ConstraintMapping per ServletMapping
        Constraint expectedConstraint = new Constraint();
        expectedConstraint.setAuthenticate(true);
        expectedConstraint.setRoles(new String[]{""tom"", ""dick"", ""harry""});
        expectedConstraint.setDataConstraint(Constraint.DC_CONFIDENTIAL);

        ConstraintMapping[] expectedMappings = new ConstraintMapping[2];
        expectedMappings[0] = new ConstraintMapping();
        expectedMappings[0].setConstraint(expectedConstraint);
        expectedMappings[0].setPathSpec(""/foo/*"");

        expectedMappings[1] = new ConstraintMapping();
        expectedMappings[1].setConstraint(expectedConstraint);
        expectedMappings[1].setPathSpec(""*.foo"");
        introspector.introspect(new RolesServlet(), null);
        compareResults(expectedMappings, ((ConstraintAware)wac.getSecurityHandler()).getConstraintMappings());
    }
",non-flaky,5
77552,dropwizard_dropwizard,ResourceExtensionMocksTest.getPersonName,"    @Test
        public String getPersonName() {
            return person.getName();
        }
",non-flaky,5
84578,apache_zookeeper,LeaderElectionSupportTest.testNodes100,"    @Test
    public void testNodes100() throws Exception {
        int testIterations = 100;
        final CountDownLatch latch = new CountDownLatch(testIterations);
        final AtomicInteger failureCounter = new AtomicInteger();

        for (int i = 0; i < testIterations; i++) {
            runElectionSupportThread(latch, failureCounter);
        }

        assertEquals(0, failureCounter.get());

        if (!latch.await(20, TimeUnit.SECONDS)) {
            LOGGER.info(""Waited for all threads to start, but timed out. We had {} failures."", failureCounter);
        }
    }
",non-flaky,5
156132,soot-oss_soot,LocalPackerTest.nullAssignment,"  @Test
  public void nullAssignment() {
    SootMethod target =
        prepareTarget(methodSigFromComponents(TEST_TARGET_CLASS, ""void"", ""prefixVariableNames""), TEST_TARGET_CLASS);

    Body body = target.retrieveActiveBody();
    Assert.assertTrue(body instanceof JimpleBody);

    // Assert all local names are distinct
    Assert.assertTrue(body.getLocals().stream().map(Local::getName).distinct().count() == body.getLocalCount());

    LocalPacker.v().transform(body);

    // Assert all local names are distinct
    Assert.assertTrue(body.getLocals().stream().map(Local::getName).distinct().count() == body.getLocalCount());
  }
",non-flaky,5
175805,GoogleCloudPlatform_google-cloud-eclipse,ProjectSelectorSelectionChangedListenerTest.testSelectionChanged_whenCachedResultIsNoAppEngineApplication,"  @Test
  public void testSelectionChanged_whenCachedResultIsNoAppEngineApplication()
      throws ProjectRepositoryException {
    GcpProject gcpProject = new GcpProject(""projectName"", ""projectId"");
    initSelectionAndAccountSelector(gcpProject);
    gcpProject.setAppEngine(AppEngine.NO_APPENGINE_APPLICATION);

    listener.selectionChanged(event);
    assertNull(listener.latestQueryJob);
    verify(projectRepository, never()).getAppEngineApplication(any(Credential.class), anyString());
    verify(projectSelector).setStatusLink(EXPECTED_MESSAGE_WHEN_NO_APPLICATION, EXPECTED_LINK);
  }
",non-flaky,5
133917,cdancy_jenkins-rest,QueueApiLiveTest.testQueueItemSingleParameters,"    @Test
    public void testQueueItemSingleParameters() throws InterruptedException {
        Map<String, List<String>> params = new HashMap<>();
        params.put(""SomeKey"", Lists.newArrayList(""SomeVeryNewValue1""));
        IntegerResponse job1 = api.jobsApi().buildWithParameters(null,""QueueTestSingleParam"", params);
        assertNotNull(job1);
        assertTrue(job1.value() > 0);
        assertTrue(job1.errors().size() == 0);

        // Jenkins will reject two consecutive build requests when the build parameter values are the same
        // So we must set some different parameter values
        params = new HashMap<>();
        params.put(""SomeKey"", Lists.newArrayList(""SomeVeryNewValue2""));
        IntegerResponse job2 = api.jobsApi().buildWithParameters(null,""QueueTestSingleParam"", params);
        assertNotNull(job2);
        assertTrue(job2.value() > 0);
        assertTrue(job2.errors().size() == 0);

        QueueItem queueItem = getRunningQueueItem(job1.value());
        assertNotNull(queueItem);
        assertFalse(queueItem.cancelled());

        Map <String, String> map = Maps.newHashMap();
        map.put(""SomeKey"", ""SomeVeryNewValue1"");
        assertEquals(queueItem.params(), map);
    }
",non-flaky,5
133916,cdancy_jenkins-rest,QueueApiLiveTest.testGetRunningQueueItem,"    @Test
    public void testGetRunningQueueItem() throws InterruptedException {
        IntegerResponse job1 = api.jobsApi().build(null,""QueueTest"");
        assertNotNull(job1);
        assertTrue(job1.errors().size() == 0);
        IntegerResponse job2 = api.jobsApi().build(null,""QueueTest"");
        assertNotNull(job2);
        assertTrue(job2.errors().size() == 0);

        // job1 runs first, so we get its queueItem
        QueueItem queueItem = getRunningQueueItem(job1.value());

        // If null, it means the queueItem has been cancelled, which would not be normal in this test
        assertNotNull(queueItem);
        assertFalse(queueItem.cancelled());

        //  We exepect this build to run, consequently:
        //  * the why field should now be null
        //  * the executable field should NOT be null
        //  * the build number should be set to an integer
        //  * the url for the build should be set to a string
        assertNull(queueItem.why());
        assertNotNull(queueItem.executable());
    }
",non-flaky,5
86101,graylog2_graylog2-server,DBEventProcessorServiceTest.save,"    @Test
    public void save() {
        final EventDefinitionDto newDto = EventDefinitionDto.builder()
                .title(""Test"")
                .description(""A test event definition"")
                .config(TestEventProcessorConfig.builder()
                        .message(""This is a test event processor"")
                        .searchWithinMs(1000)
                        .executeEveryMs(1000)
                        .build())
                .priority(3)
                .alert(false)
                .notificationSettings(EventNotificationSettings.withGracePeriod(60000))
                .keySpec(ImmutableList.of(""a"", ""b""))
                .notifications(ImmutableList.of())
                .build();

        final EventDefinitionDto dto = dbService.save(newDto);

        assertThat(dto.id()).isNotBlank();
        assertThat(dto.title()).isEqualTo(""Test"");
        assertThat(dto.description()).isEqualTo(""A test event definition"");
        assertThat(dto.priority()).isEqualTo(3);
        assertThat(dto.keySpec()).isEqualTo(ImmutableList.of(""a"", ""b""));
        assertThat(dto.fieldSpec()).isEmpty();
        assertThat(dto.notifications()).isEmpty();
        assertThat(dto.storage()).hasSize(1);
        // We will always add a persist-to-streams handler for now
        assertThat(dto.storage()).containsOnly(PersistToStreamsStorageHandler.Config.createWithDefaultEventsStream());
    }
",non-flaky,5
78306,apache_beam,InMemoryMultimapSideInputViewTest.testValueGrouping,"  @Test
  public void testValueGrouping() {
    MultimapView<String, String> view =
        InMemoryMultimapSideInputView.fromIterable(
            StringUtf8Coder.of(),
            ImmutableList.of(KV.of(""A"", ""a1""), KV.of(""A"", ""a2""), KV.of(""B"", ""b1"")));
    assertEquals(view.get(""A""), ImmutableList.of(""a1"", ""a2""));
    assertEquals(view.get(""B""), ImmutableList.of(""b1""));
    assertEquals(view.get(""C""), ImmutableList.of());
  }
",non-flaky,5
179502,abel533_Mapper,TypeHandlerTest.testDelete,"    @Test
    public void testDelete(){
        SqlSession sqlSession = getSqlSession();
        try {
            UserMapper userMapper = sqlSession.getMapper(UserMapper.class);
            Assert.assertEquals(1, userMapper.deleteByPrimaryKey(1));

            User user = new User();
            Address address = new Address();
            address.setProvince(""Hebei"");
            address.setCity(""Handan"");
            user.setAddress(address);
            user.setState(StateEnum.enabled);
            Assert.assertEquals(0, userMapper.delete(user));

            user.setState(StateEnum.disabled);
            Assert.assertEquals(1, userMapper.delete(user));
        } finally {
            sqlSession.close();
        }
    }
",non-flaky,5
110152,Wikidata_wikidata-toolkit,NestedIteratorTest.removeNotSupported,"	@Test(expected = UnsupportedOperationException.class)
	public void removeNotSupported() {
		NestedIterator<String> nestedIterator = new NestedIterator<>(
				Collections.singletonList(Collections.singletonList(""Test"")));
		nestedIterator.remove();
	}
",non-flaky,5
135027,undertow-io_undertow,HttpStringTestCase.testCompareShorterFirst,"    @Test
    public void testCompareShorterFirst() {
        HttpString accept =  new HttpString(Headers.ACCEPT_STRING);
        Assert.assertEquals(accept.compareTo(Headers.ACCEPT_CHARSET), Headers.ACCEPT.compareTo(Headers.ACCEPT_CHARSET));

        HttpString acceptCharset =  new HttpString(Headers.ACCEPT_CHARSET_STRING);
        Assert.assertEquals(acceptCharset.compareTo(Headers.ACCEPT), Headers.ACCEPT_CHARSET.compareTo(Headers.ACCEPT));
    }
",non-flaky,5
175761,GoogleCloudPlatform_google-cloud-eclipse,GcpProjectQueryJobTest.testRun_abandonStaleJob,"  @Test
  public void testRun_abandonStaleJob() throws InterruptedException, ProjectRepositoryException {
    // Prepare another concurrent query job.
    Credential staleCredential = mock(Credential.class);

    List<GcpProject> anotherProjectList = mock(List.class);
    ProjectRepository projectRepository2 = mock(ProjectRepository.class);
    when(projectRepository2.getProjects(staleCredential)).thenReturn(anotherProjectList);

    Predicate<Job> notLatest = mock(Predicate.class);
    Job staleJob = new GcpProjectQueryJob(staleCredential, projectRepository2,
        projectSelector, dataBindingContext, notLatest);

    // This second job is stale, i.e., it was fired, but user has selected another credential.
    when(notLatest.apply(staleJob)).thenReturn(false);

    queryJob.schedule();
    queryJob.join();
    // Make the stale job complete even after ""queryJob"" finishes.
    staleJob.schedule();
    staleJob.join();

    verify(projectRepository).getProjects(credential);
    verify(projectRepository2).getProjects(staleCredential);

    verify(projectSelector).setProjects(projects);
    verify(projectSelector, never()).setProjects(anotherProjectList);
  }
",non-flaky,5
78290,apache_beam,SideInputHandlerTest.testIsEmpty,"  @Test
  public void testIsEmpty() {
    SideInputHandler sideInputHandler =
        new SideInputHandler(ImmutableList.of(view1), InMemoryStateInternals.<Void>forKey(null));

    assertFalse(sideInputHandler.isEmpty());

    // create an empty handler
    SideInputHandler emptySideInputHandler =
        new SideInputHandler(ImmutableList.of(), InMemoryStateInternals.<Void>forKey(null));

    assertTrue(emptySideInputHandler.isEmpty());
  }
",non-flaky,5
77574,dropwizard_dropwizard,OptionalFormParamResourceTest.getMessage,"    @Test
        public String getMessage(@FormParam(""message"") Optional<String> message) {
            return message.or(""Default Message"");
        }
",non-flaky,5
112759,hwang-pku_ormlite-core,RawResultsImplTest.testQueryRaw,"	@Test
	public void testQueryRaw() throws Exception {
		Dao<Foo, Integer> dao = createDao(Foo.class, true);
		Foo foo = new Foo();
		foo.val = 1;
		foo.equal = 10;
		assertEquals(1, dao.create(foo));
		QueryBuilder<Foo, Integer> qb = dao.queryBuilder();
		qb.where().eq(Foo.VAL_COLUMN_NAME, new SelectArg());
		GenericRawResults<String[]> rawResults = dao.queryRaw(qb.prepareStatementString(), Integer.toString(foo.val));
		List<String[]> results = rawResults.getResults();
		assertEquals(1, results.size());
		boolean found = false;
		String[] columnNames = rawResults.getColumnNames();
		for (int i = 0; i < rawResults.getNumberColumns(); i++) {
			if (columnNames[i].equalsIgnoreCase(Foo.ID_COLUMN_NAME)) {
				assertEquals(Integer.toString(foo.id), results.get(0)[0]);
				found = true;
			}
		}
		assertTrue(found);
	}
",non-flaky,5
159670,liquibase_liquibase,UnlockDatabaseChangeLogExecuteTest.generateSql,"    @Test
    public void generateSql() throws Exception {
        this.statementUnderTest = new UnlockDatabaseChangeLogStatement();
        assertCorrect(""update [databasechangeloglock] set [locked] = 0, [lockedby] = null, [lockgranted] = null where [id] = 1"", MSSQLDatabase.class, SybaseDatabase.class);
        assertCorrect(""update [databasechangeloglock] set [locked] = 0, [lockedby] = null, [lockgranted] = null where [id] = 1"", MSSQLDatabase.class, SybaseASADatabase.class);
        assertCorrect(""update [databasechangeloglock] set [locked] = 'f', [lockedby] = null, [lockgranted] = null where [id] = 1"", InformixDatabase.class);
        assertCorrect(""update [databasechangeloglock] set [locked] = false, [lockedby] = null, [lockgranted] = null where [id] = 1"", PostgresDatabase.class, HsqlDatabase.class, H2Database.class);
        assertCorrectOnRest(""update [databasechangeloglock] set [locked] = 0, [lockedby] = null, [lockgranted] = null where [id] = 1"");
    }
",non-flaky,5
86056,graylog2_graylog2-server,NotificationGracePeriodServiceTest.emptyKey,"    @Test
    public void emptyKey() {
        final NotificationGracePeriodService notificationGracePeriodService = new NotificationGracePeriodService();

        when(settings.gracePeriodMs()).thenReturn(10L);
        when(definition.notificationSettings()).thenReturn(settings);
        when(definition.id()).thenReturn(""1234"");

        final Event event = new TestEvent();
        event.setKeyTuple(ImmutableList.of());
        final Event event2 = new TestEvent();
        event.setKeyTuple(ImmutableList.of());
        event2.setEventTimestamp(event.getEventTimestamp().plus(1L));
        assertThat(notificationGracePeriodService.inGracePeriod(definition, ""5678"", event)).isFalse();
        assertThat(notificationGracePeriodService.inGracePeriod(definition, ""5678"", event2)).isTrue();
    }
",non-flaky,5
76981,Tencent_Firestorm,SparkClientWithLocalTest.readTest9,"  @Test
  public void readTest9() throws Exception {
    String testAppId = ""localReadTest9"";
    registerApp(testAppId, Lists.newArrayList(new PartitionRange(0, 0)));
    Map<Long, byte[]> expectedData = Maps.newHashMap();
    Roaring64NavigableMap blockIdBitmap = Roaring64NavigableMap.bitmapOf();
    Roaring64NavigableMap taskIdBitmap = Roaring64NavigableMap.bitmapOf(0);

    List<ShuffleBlockInfo> blocks;
    ShuffleReadClientImpl readClient;

    createTestData(testAppId, expectedData, blockIdBitmap, taskIdBitmap);
    Roaring64NavigableMap beforeAdded = RssUtils.deserializeBitMap(RssUtils.serializeBitMap(blockIdBitmap));
    // write data by another task, read data again, the cache for index file should be updated
    blocks = createShuffleBlockList(
        0, 0, 1, 3, 25, blockIdBitmap, Maps.newHashMap(), mockSSI);
    sendTestData(testAppId, blocks);
    // test with un-changed expected blockId
    readClient = new ShuffleReadClientImpl(StorageType.LOCALFILE.name(), testAppId, 0, 0, 100, 1,
        10, 1000, """", beforeAdded, taskIdBitmap,
        shuffleServerInfo, null);
    validateResult(readClient, expectedData);
    readClient.checkProcessedBlockIds();
    readClient.close();

    // test with changed expected blockId
    readClient = new ShuffleReadClientImpl(StorageType.LOCALFILE.name(), testAppId, 0, 0, 100, 1,
        10, 1000, """", blockIdBitmap, taskIdBitmap,
        shuffleServerInfo, null);
    validateResult(readClient, expectedData);
    readClient.checkProcessedBlockIds();
    readClient.close();
  }
",non-flaky,5
135059,undertow-io_undertow,PathMatcherTestCase.testSimpleMatchCase,"    @Test
    public void testSimpleMatchCase() {

        PathMatcher<String> pathMatcher = new PathMatcher<>();

        pathMatcher.addPrefixPath(""prefix"", ""response"");
        Assert.assertEquals(""response"", pathMatcher.match(""/prefix"").getValue());
        Assert.assertEquals(""response"", pathMatcher.match(""/prefix/"").getValue());

        pathMatcher.addPrefixPath(""/prefix"", ""new response"");
        Assert.assertEquals(""new response"", pathMatcher.match(""/prefix"").getValue());
        Assert.assertEquals(""new response"", pathMatcher.match(""/prefix/"").getValue());

        pathMatcher.addPrefixPath(""/prefix/"", ""different response"");
        Assert.assertEquals(""different response"", pathMatcher.match(""/prefix"").getValue());
        Assert.assertEquals(""different response"", pathMatcher.match(""/prefix/"").getValue());

        pathMatcher.addPrefixPath(""/prefix//////////////////////"", ""last response"");
        Assert.assertEquals(""last response"", pathMatcher.match(""/prefix"").getValue());
        Assert.assertEquals(""last response"", pathMatcher.match(""/prefix/"").getValue());

        pathMatcher.clearPaths();
        Assert.assertNull(pathMatcher.match(""/prefix"").getValue());
        Assert.assertNull(pathMatcher.match(""/prefix/"").getValue());
    }
",non-flaky,5
177217,line_armeria,AbstractStreamDecoderTest.empty_unpooled,"    @Test
    public void empty_unpooled() {
        final StreamDecoder decoder = newDecoder();
        final HttpData data = decoder.decode(HttpData.empty());
        assertThat(data.isPooled()).isFalse();
    }
",non-flaky,5
156150,soot-oss_soot,ClassRenamerTest.getOrAddNewName_renamePackage_nullPackage,"  @Test
  public void getOrAddNewName_renamePackage_nullPackage() {
    ClassRenamer.v().setRemovePackages(false);
    ClassRenamer.v().setRenamePackages(true);

    final String newName = ClassRenamer.v().getOrAddNewName(null, ""ClassName"");
    assertThat(newName, allOf(not(endsWith(""ClassName"")), not(containsString("".""))));

    final String newName0 = ClassRenamer.v().getOrAddNewName(null, ""ClassName"");
    assertThat(newName0, equalTo(newName)); // package names and class names are equal

    final String newName1 = ClassRenamer.v().getOrAddNewName(null, ""ClassName1"");
    assertThat(newName1, not(equalTo(newName)));
    assertThat(newName1.split(""\\."").length, equalTo(2));
    assertThat(newName.split(""\\."")[0], equalTo(newName.split(""\\."")[0])); // package names are equal
  }
",non-flaky,5
162716,OpenAPITools_openapi-generator,XmlItemTest.prefixStringTest,"    @Test
    public void prefixStringTest() {
        // TODO: test prefixString
    }
",non-flaky,5
30959,camunda-cloud_zeebe,POJOArrayTest.shouldSerializePOJOWithEmptyArray,"  @Test
  public void shouldSerializePOJOWithEmptyArray() {
    // given
    final POJOArray pojo = new POJOArray();

    final int writeLength = pojo.getLength();

    // when
    final UnsafeBuffer resultBuffer = new UnsafeBuffer(new byte[writeLength]);
    pojo.write(resultBuffer, 0);

    // then
    final Map<String, Object> msgPackMap =
        MsgPackUtil.asMap(resultBuffer, 0, resultBuffer.capacity());
    assertThat(msgPackMap).containsOnly(entry(""simpleArray"", ""[]""));
  }
",non-flaky,5
19475,eclipse_xtext-core,PathTraverserTest.testArchive,"	@Test
	public void testArchive() throws Exception {
		String path = pathTo(""nonemptyJar.jar"");
		Set<URI> uris = new PathTraverser().findAllResourceUris(path, everythingButDummy);
		assertEquals(3, uris.size());
	}
",non-flaky,5
135072,undertow-io_undertow,CookiesTestCase.testRequestCookieDomainPathVersion,"    @Test
    public void testRequestCookieDomainPathVersion() {
        Map<String, Cookie> cookies = Cookies.parseRequestCookies(1, false, Arrays.asList(
                ""CUSTOMER=WILE_E_COYOTE; $Domain=LOONEY_TUNES; $Version=1; $Path=/""));

        Assert.assertFalse(cookies.containsKey(""$Domain""));
        Assert.assertFalse(cookies.containsKey(""$Version""));
        Assert.assertFalse(cookies.containsKey(""$Path""));

        Cookie cookie = cookies.get(""CUSTOMER"");
        Assert.assertEquals(""CUSTOMER"", cookie.getName());
        Assert.assertEquals(""WILE_E_COYOTE"", cookie.getValue());
        Assert.assertEquals(""LOONEY_TUNES"", cookie.getDomain());
        Assert.assertEquals(1, cookie.getVersion());
        Assert.assertEquals(""/"", cookie.getPath());
    }
",non-flaky,5
113797,salesforce_reactive-grpc,ServerErrorIntegrationTest.oneToOne,"    @Test
    public void oneToOne() {
        RxGreeterGrpc.RxGreeterStub stub = RxGreeterGrpc.newRxStub(channel);
        Single<HelloResponse> resp = Single.just(HelloRequest.getDefaultInstance()).compose(stub::sayHello);
        TestObserver<HelloResponse> test = resp.test();

        test.awaitTerminalEvent(3, TimeUnit.SECONDS);
        test.assertError(t -> t instanceof StatusRuntimeException);
        test.assertError(t -> ((StatusRuntimeException)t).getStatus() == Status.INTERNAL);
    }
",non-flaky,5
113983,apache_struts,ConstantConfigTest.testGetAllAsStringsMap,"    @Test
    public void testGetAllAsStringsMap() throws Exception {
        ConstantConfig constantConfig = new ConstantConfig();

        boolean expectedDevMode = true;
        constantConfig.setDevMode(expectedDevMode);

        String expectedActionExtensions = "".action,.some,.another"";
        constantConfig.setActionExtension(Arrays.asList(expectedActionExtensions.split("","")));

        String expectedLanguage = ""fr"";
        constantConfig.setLocale(new Locale(expectedLanguage));

        Map<String, String> map = constantConfig.getAllAsStringsMap();

        Assert.assertEquals(String.valueOf(expectedDevMode), map.get(StrutsConstants.STRUTS_DEVMODE));
        Assert.assertEquals(expectedActionExtensions, map.get(StrutsConstants.STRUTS_ACTION_EXTENSION));
        Assert.assertEquals(null, map.get(StrutsConstants.STRUTS_I18N_RELOAD));
        Assert.assertEquals(expectedLanguage, map.get(StrutsConstants.STRUTS_LOCALE));
    }
",non-flaky,5
175821,GoogleCloudPlatform_google-cloud-eclipse,OpenUriSelectionListenerTest.testWidgetDefaultSelected_successful,"  @Test
  public void testWidgetDefaultSelected_successful() throws PartInitException, MalformedURLException {
    SelectionEvent selectionEvent = getEvent(VALID_URI);
    when(queryParameterProvider.getParameters()).thenReturn(Collections.singletonMap(URL_PARAM_PROJECT, PROJECT_ID));

    new OpenUriSelectionListener(queryParameterProvider, errorHandler, browserSupport)
      .widgetDefaultSelected(selectionEvent);
    verify(errorHandler, never()).handle(any(Exception.class), any(URI.class));
    verify(browser).openURL(new URL(VALID_URI + ""?project="" + PROJECT_ID));
  }
",non-flaky,5
94721,ktuukkan_marine-api,SpeedOverGroundTest.defaultValueIsNotAvailable,"    @Test
    public void defaultValueIsNotAvailable() {
        assertFalse(SpeedOverGround.isAvailable(1023));
    }
",non-flaky,5
175828,GoogleCloudPlatform_google-cloud-eclipse,BucketNameValidatorTest.testValidation_startWithHyphen,"  @Test
  public void testValidation_startWithHyphen() {
    assertThat(validator.validate(""-bucket"").getSeverity(), is(IStatus.ERROR));
  }
",non-flaky,5
137116,spring-projects_spring-framework,AbstractMethodMetadataTests.verifyToString,"	@Test
	public void verifyToString() throws Exception {
		assertThat(getTagged(WithMethod.class).toString())
			.endsWith(WithMethod.class.getName() + "".test()"");

		assertThat(getTagged(WithMethodWithOneArgument.class).toString())
			.endsWith(WithMethodWithOneArgument.class.getName() + "".test(java.lang.String)"");

		assertThat(getTagged(WithMethodWithTwoArguments.class).toString())
			.endsWith(WithMethodWithTwoArguments.class.getName() + "".test(java.lang.String,java.lang.Integer)"");
	}
",non-flaky,5
53140,cloudfoundry_uaa,ApiControllerTests.testWithUser,"    @Test
    public void testWithUser() throws Exception {
        controller.setInfo(new ClassPathResource(""info.tmpl""));
        HashMap<String, Object> model = new HashMap<String, Object>();
        View view = controller.info(model, new UsernamePasswordAuthenticationToken(testAccounts.getUserName(), ""<NONE>""));
        MockHttpServletResponse response = new MockHttpServletResponse();
        view.render(model, new MockHttpServletRequest(), response);
        String content = response.getContentAsString();
        assertTrue(""Wrong content: "" + content, content.contains(""\n  \""user\"": \""""+testAccounts.getUserName()+""\""""));
    }
",non-flaky,5
113703,salesforce_reactive-grpc,CancellationPropagationIntegrationTest.serverCanCancelClientStreamImplicitly,"    @Test
    public void serverCanCancelClientStreamImplicitly() {
        TestService svc = new TestService();
        serverRule.getServiceRegistry().addService(svc);

        ReactorNumbersGrpc.ReactorNumbersStub stub = ReactorNumbersGrpc.newReactorStub(serverRule.getChannel());

        svc.setExplicitCancel(false);

        AtomicBoolean requestWasCanceled = new AtomicBoolean(false);
        AtomicBoolean requestDidProduce = new AtomicBoolean(false);

        Flux<NumberProto.Number> request = Flux
                .fromIterable(IntStream.range(0, NUMBER_OF_STREAM_ELEMENTS)::iterator)
                .delayElements(Duration.ofMillis(SEQUENCE_DELAY_MILLIS))
                .map(CancellationPropagationIntegrationTest::protoNum)
                .doOnNext(x -> {
                    requestDidProduce.set(true);
                    System.out.println(""Produced: "" + x.getNumber(0));
                })
                .doOnCancel(() -> {
                    requestWasCanceled.set(true);
                    System.out.println(""Client canceled"");
                });

        Mono<NumberProto.Number> observer = request.as(stub::requestPressure)
                .doOnSuccess(number -> System.out.println(number.getNumber(0)))
                .doOnError(throwable -> System.out.println(throwable.getMessage()));

        StepVerifier.create(observer)
                .expectNext(protoNum(9))
                .verifyComplete();

        await().atMost(org.awaitility.Duration.FIVE_HUNDRED_MILLISECONDS).untilTrue(requestWasCanceled);

        assertThat(requestWasCanceled.get()).isTrue();
        assertThat(requestDidProduce.get()).isTrue();
    }
",non-flaky,5
20969,NationalSecurityAgency_timely,TestGorillaStore.testExtentOfStorage,"    @Test
    public void testExtentOfStorage() {

        GorillaStore gStore = new GorillaStore();

        HashMap<String, String> tags = new HashMap<>();
        tags.put(""host"", ""localhost"");

        long start = System.currentTimeMillis();
        long timestamp = start;

        for (int x = 1; x <= 100; x++) {

            System.out.println(""adding value x:"" + x);
            gStore.addValue(timestamp, 2.0);
            timestamp = timestamp + 1000;

            if (x % 10 == 0) {
                gStore.archiveCurrentCompressor();
            }
            if (x < 50) {
                continue;
            }

            System.out.println(""fetching values x:"" + x);
            long totalObservations = 0;

            List<WrappedGorillaDecompressor> decompressorList = gStore.getDecompressors(start, timestamp);
            Pair pair = null;
            for (WrappedGorillaDecompressor w : decompressorList) {
                while ((pair = w.readPair()) != null) {
                    totalObservations++;
                    // System.out.println(pair.getTimestamp() + "" --> "" +
                    // pair.getDoubleValue());
                }
            }

            Assert.assertEquals(""Unexpected number of total observations"", x, totalObservations);

        }

    }
",non-flaky,5
133956,CorfuDB_CorfuDB,SequencerHandlerTest.testTokenResponseDefaultMap,"    @Test
    public void testTokenResponseDefaultMap() {
        Token token = new Token(0L, 0L);
        Map<UUID, Long> backPointerMap = getTokenResponseDefaultMap();
        Map<UUID, Long> streamTails = getTokenResponseDefaultMap();
        ResponseMsg response = getResponseMsg(
                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.CHECK),
                getTokenResponseMsg(
                        TokenType.NORMAL,
                        TokenResponse.NO_CONFLICT_KEY,
                        TokenResponse.NO_CONFLICT_STREAM, token,
                        backPointerMap,
                        streamTails)
        );

        sequencerHandler.handleMessage(response, mockChannelHandlerContext);
        ArgumentCaptor<TokenResponse> captor = ArgumentCaptor.forClass(TokenResponse.class);
        // Verify that the correct request was completed (once) with the appropriate value,
        // and that we did not complete exceptionally.
        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));
        verify(mockClientRouter).completeRequest(eq(response.getHeader().getRequestId()), captor.capture());

        TokenResponse tokenResponse = captor.getValue();
        assertEquals(token, tokenResponse.getToken());
        assertEquals(TokenType.NORMAL, tokenResponse.getRespType());
        assertEquals(TokenResponse.NO_CONFLICT_STREAM, tokenResponse.getConflictStream());
        assertEquals(streamTails.size(), tokenResponse.getStreamTailsCount());
        assertEquals(backPointerMap, tokenResponse.getBackpointerMap());
        assertArrayEquals(tokenResponse.getConflictKey(), TokenResponse.NO_CONFLICT_KEY);
    }
",non-flaky,5
33666,alibaba_fastjson,TestIssues569.testFixBug569,"    @Test
    public void testFixBug569() {
        MyResponse resp1 = JSON.parseObject(jsonData, mType1, config, featureValues,
                features != null ? features : EMPTY_SERIALIZER_FEATURES);

        //expect MyResponse<List<Dept>>
        MyResponse resp = JSON.parseObject(jsonData, mType, config, featureValues,
                features != null ? features : EMPTY_SERIALIZER_FEATURES);
        Assert.assertNotNull(resp);
        Assert.assertNotNull(resp.getResult());
        Assert.assertEquals(ArrayList.class, resp.getResult().getClass());
    }
",non-flaky,5
19478,eclipse_xtext-core,AbstractReaderTest.pathTo,"	@Test public void testParseClassPath() throws Exception {
	public String pathTo(String string) throws Exception {
//		URL resource = getClass().getClassLoader().getResource();
		File base = new File(""./src/""+getClass().getName().replace('.', '/') + "".java"");
		URI fileURI = URI.createFileURI(base.getAbsolutePath());
//		System.out.println(fileURI);
		// this is a hack used in order to get a file URI for a bundleresource:/ URL
//		File f = (File) get(resource,""handler.bundleEntry.file"");
//		if (f!=null)
//			fileURI = URI.createFileURI(f.getAbsolutePath());
		
		URI fileURI2 = URI.createURI(string);
		return fileURI2.resolve(fileURI).toFileString();
	}
",non-flaky,5
112677,hwang-pku_ormlite-core,JavaxPersistenceTest.testUpperCaseFieldNames,"	@Test
	public void testUpperCaseFieldNames() throws Exception {
		Field[] fields = Javax.class.getDeclaredFields();
		UpperCaseFieldDatabaseType ucDatabaseType = new UpperCaseFieldDatabaseType();
		for (Field field : fields) {
			DatabaseFieldConfig config = new JavaxPersistenceImpl().createFieldConfig(ucDatabaseType, field);
			if (field.getName().equals(""id"")) {
				assertTrue(config.isId());
				assertFalse(config.isGeneratedId());
				assertEquals(""ID"", config.getFieldName());
			}
		}
	}
",non-flaky,5
60864,apache_druid,DistinctCountGroupByQueryTest.testGroupByWithDistinctCountAgg,"  @Test
  public void testGroupByWithDistinctCountAgg() throws Exception
  {
    IncrementalIndex index = new OnheapIncrementalIndex.Builder()
        .setIndexSchema(
            new IncrementalIndexSchema.Builder()
                .withQueryGranularity(Granularities.SECOND)
                .withMetrics(new CountAggregatorFactory(""cnt""))
                .build()
        )
        .setConcurrentEventAdd(true)
        .setMaxRowCount(1000)
        .build();

    String visitor_id = ""visitor_id"";
    String client_type = ""client_type"";
    long timestamp = DateTimes.of(""2010-01-01"").getMillis();
    index.add(
        new MapBasedInputRow(
            timestamp,
            Lists.newArrayList(visitor_id, client_type),
            ImmutableMap.of(visitor_id, ""0"", client_type, ""iphone"")
        )
    );
    index.add(
        new MapBasedInputRow(
            timestamp + 1,
            Lists.newArrayList(visitor_id, client_type),
            ImmutableMap.of(visitor_id, ""1"", client_type, ""iphone"")
        )
    );
    index.add(
        new MapBasedInputRow(
            timestamp + 2,
            Lists.newArrayList(visitor_id, client_type),
            ImmutableMap.of(visitor_id, ""2"", client_type, ""android"")
        )
    );

    GroupByQuery query = new GroupByQuery.Builder()
        .setDataSource(QueryRunnerTestHelper.DATA_SOURCE)
        .setGranularity(QueryRunnerTestHelper.ALL_GRAN)
        .setDimensions(new DefaultDimensionSpec(
            client_type,
            client_type
        ))
        .setInterval(QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC)
        .setLimitSpec(
            new DefaultLimitSpec(
                Collections.singletonList(new OrderByColumnSpec(client_type, OrderByColumnSpec.Direction.DESCENDING)),
                10
            )
        )
        .setAggregatorSpecs(QueryRunnerTestHelper.ROWS_COUNT, new DistinctCountAggregatorFactory(""UV"", visitor_id, null))
        .build();
    final Segment incrementalIndexSegment = new IncrementalIndexSegment(index, null);

    Iterable<ResultRow> results = GroupByQueryRunnerTestHelper.runQuery(
        factory,
        factory.createRunner(incrementalIndexSegment),
        query
    );

    List<ResultRow> expectedResults = Arrays.asList(
        GroupByQueryRunnerTestHelper.createExpectedRow(
            query,
            ""1970-01-01T00:00:00.000Z"",
            client_type, ""iphone"",
            ""UV"", 2L,
            ""rows"", 2L
        ),
        GroupByQueryRunnerTestHelper.createExpectedRow(
            query,
            ""1970-01-01T00:00:00.000Z"",
            client_type, ""android"",
            ""UV"", 1L,
            ""rows"", 1L
        )
    );
    TestHelper.assertExpectedObjects(expectedResults, results, ""distinct-count"");
  }
",non-flaky,5
30998,camunda-cloud_zeebe,ArrayValueTest.shouldAddValueAtBeginning,"  @Test
  public void shouldAddValueAtBeginning() {
    // given
    addIntValues(array, 1, 2, 3);

    // when
    // reset iterator to append at beginning
    array.iterator();
    addIntValues(array, 4, 5, 6);

    // then
    encodeAndDecode(array);
    assertIntValues(array, 4, 5, 6, 1, 2, 3);
  }
",non-flaky,5
59654,looly_hutool,AopTest.aopTest,"	@Test
	public void aopTest() {
		Animal cat = ProxyUtil.proxy(new Cat(), TimeIntervalAspect.class);
		String result = cat.eat();
		Assert.assertEquals(""ç«åé±¼"", result);
		cat.seize();
	}
",non-flaky,5
176817,ctco_cukes,LoadRunnerTransactionTest.formatShouldEscapeWhitespaces,"    @Test
    public void formatShouldEscapeWhitespaces() throws Exception {
        LoadRunnerTransaction trx = new LoadRunnerTransaction() {{
            setName(""hello world"");
            setTrxFlag(""LR_AUTO"");
        }};
        assertThat(trx.format(), containsString(""hello_world""));
    }
",non-flaky,5
94816,ktuukkan_marine-api,AISMessage04Test.getLongitudeInDegrees,"    @Test
    public void getLongitudeInDegrees() throws Exception {
        assertEquals(31.033513, msg.getLongitudeInDegrees(), 0.000001);
    }
",non-flaky,5
133987,CorfuDB_CorfuDB,ClusterHealthTest.testSequencerServersHealth,"    @Test
    public void testSequencerServersHealth(){
        Layout layout = layoutUtil.getLayout(servers);
        layout.setUnresponsiveServers(Collections.singletonList(server3));

        ClusterStatus status = clusterHealth.getSequencerServersClusterHealth(
                layout, layout.getAllActiveServers()
        );
        assertThat(status).isEqualTo(ClusterStatus.STABLE);

        //Unresponsive sequencer
        layout.setUnresponsiveServers(Collections.singletonList(server1));
        status = clusterHealth.getSequencerServersClusterHealth(
                layout, layout.getAllActiveServers()
        );
        assertThat(status).isEqualTo(ClusterStatus.UNAVAILABLE);
    }
",non-flaky,5
162684,OpenAPITools_openapi-generator,UserApiTest.loginUserTest,"    @Test
    public void loginUserTest() {
        String username = null;
        String password = null;
        //String response = api.loginUser(username, password);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
",non-flaky,5
177169,line_armeria,SamlServiceProviderTest.shouldRespondMetadataWithoutAuthentication,"    @Test
    public void shouldRespondMetadataWithoutAuthentication() throws Exception {
        final AggregatedHttpResponse resp = client.get(""/saml/metadata"").aggregate().join();
        assertThat(resp.status()).isEqualTo(HttpStatus.OK);
        assertThat(resp.contentType()).isEqualTo(CONTENT_TYPE_SAML_METADATA);

        final EntityDescriptor metadata =
                (EntityDescriptor) deserialize(resp.contentUtf8().getBytes());
        assertThat(metadata).isNotNull();

        final SPSSODescriptor sp = metadata.getSPSSODescriptor(SAMLConstants.SAML20P_NS);
        assertThat(sp.isAuthnRequestsSigned()).isTrue();
        assertThat(sp.getWantAssertionsSigned()).isTrue();

        final List<KeyDescriptor> kd = sp.getKeyDescriptors();
        assertThat(kd.get(0).getUse().name()).isEqualToIgnoringCase(""signing"");
        assertThat(kd.get(1).getUse().name()).isEqualToIgnoringCase(""encryption"");

        final List<SingleLogoutService> slo = sp.getSingleLogoutServices();
        assertThat(slo.get(0).getLocation())
                .isEqualTo(""http://"" + spHostname + ':' + rule.httpPort() + ""/saml/slo/post"");
        assertThat(slo.get(0).getBinding()).isEqualTo(SAMLConstants.SAML2_POST_BINDING_URI);
        assertThat(slo.get(1).getLocation())
                .isEqualTo(""http://"" + spHostname + ':' + rule.httpPort() + ""/saml/slo/redirect"");
        assertThat(slo.get(1).getBinding()).isEqualTo(SAMLConstants.SAML2_REDIRECT_BINDING_URI);

        final List<AssertionConsumerService> acs = sp.getAssertionConsumerServices();
        // index 0 (default)
        assertThat(acs.get(0).getIndex()).isEqualTo(0);
        assertThat(acs.get(0).isDefault()).isTrue();
        assertThat(acs.get(0).getLocation())
                .isEqualTo(""http://"" + spHostname + ':' + rule.httpPort() + ""/saml/acs/post"");
        assertThat(acs.get(0).getBinding()).isEqualTo(SAMLConstants.SAML2_POST_BINDING_URI);
        // index 1
        assertThat(acs.get(1).getIndex()).isEqualTo(1);
        assertThat(acs.get(1).isDefault()).isFalse();
        assertThat(acs.get(1).getLocation())
                .isEqualTo(""http://"" + spHostname + ':' + rule.httpPort() + ""/saml/acs/redirect"");
        assertThat(acs.get(1).getBinding()).isEqualTo(SAMLConstants.SAML2_REDIRECT_BINDING_URI);
    }
",non-flaky,5
176831,ctco_cukes,LDIFUtilsTest.readWithLineBreaks,"    @Test
    public void readWithLineBreaks() throws Exception {
        String ldif = ""dn: dc=example,dc=com\n"" +
            ""objectClass: top\n"" +
            ""test: this is\n"" +
            "" multi-line text\n"" +
            ""dc: example\n"";
        Map<String, Attributes> entities = LDIFUtils.read(new ByteArrayInputStream(ldif.getBytes()));
        assertThat(entities.size(), is(1));
        Attributes entity = entities.get(""dc=example,dc=com"");
        assertThat(entity.get(""test"").get(), is(""this is multi-line text""));

    }
",non-flaky,5
76745,quarkusio_quarkus,CreateJBangProjectMojoIT.testProjectGeneration,"    @Test
    public void testProjectGeneration() throws MavenInvocationException, IOException {
        testDir = initEmptyProject(""projects/project-generation"");
        assertThat(testDir).isDirectory();
        invoker = initInvoker(testDir);

        Properties properties = new Properties();
        properties.put(""outputDirectory"", ""jbang"");
        InvocationResult result = setup(properties);

        assertThat(result.getExitCode()).isZero();
    }
",non-flaky,5
95676,togglz_togglz,TogglzRuleWithAnnotationTest.featureShouldBeInactiveByDefault,"    @Test
    public void featureShouldBeInactiveByDefault()
    {
        assertFalse(MyFeatures.ONE.isActive());
        assertFalse(MyFeatures.TWO.isActive());
    }
",non-flaky,5
114043,aws_aws-sdk-java-v2,PutItemWithResponseIntegrationTest.putItem_returnItemCollectionMetrics_set_itemCollectionMetricsNotNull,"    @Test
    public void putItem_returnItemCollectionMetrics_set_itemCollectionMetricsNotNull() {
        Record record = new Record().setId(1).setId2(10);
        PutItemEnhancedRequest<Record> request = PutItemEnhancedRequest.builder(Record.class)
                                                                       .item(record)
                                                                       .returnItemCollectionMetrics(ReturnItemCollectionMetrics.SIZE)
                                                                       .build();

        PutItemEnhancedResponse<Record> response = mappedTable.putItemWithResponse(request);

        assertThat(response.itemCollectionMetrics()).isNotNull();
    }
",non-flaky,5
177207,line_armeria,HBaseClientCompatibilityTest.testGuavaConflict,"    @Test(expected = NotAllMetaRegionsOnlineException.class)
    public void testGuavaConflict() throws Exception {
        // Make sure Armeria is available in the class path.
        assertThat(Version.getAll(Server.class.getClassLoader())).isNotNull();
        // Make sure newer Guava is available in the class path.
        assertThat(Stopwatch.class.getDeclaredConstructor().getModifiers()).is(new Condition<>(
                value -> !Modifier.isPublic(value),
                ""Recent Guava Stopwatch should have non-public default constructor.""));

        final MetaTableLocator locator = new MetaTableLocator();
        final ZooKeeperWatcher zkw = mock(ZooKeeperWatcher.class);
        final RecoverableZooKeeper zk = mock(RecoverableZooKeeper.class);
        when(zkw.getRecoverableZooKeeper()).thenReturn(zk);
        when(zk.exists(any(), any())).thenReturn(new Stat(0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0));

        locator.waitMetaRegionLocation(zkw, 100);
    }
",non-flaky,5
98232,apache_jackrabbit,PerformanceTest.testPerformance,"    @Test
    public void testPerformance() throws Exception {
        testPerformance(""1.3"");
    }
",non-flaky,5
98104,vert-x3_vertx-mongo-client,ParsingStreamTypeTest.should_parse_stream_type_from_config_property,"  @Test
  public void should_parse_stream_type_from_config_property(String streamTypeString, Class<StreamFactoryFactory> streamType) {
    // given
    final JsonObject cfgWithStreamTypeProvided = new JsonObject().put(""streamType"", streamTypeString);

    // when
    final MongoClientSettings parsedSettings = new MongoClientOptionsParser(vertx, cfgWithStreamTypeProvided).settings();

    // then
    assertThat(parsedSettings.getStreamFactoryFactory(), instanceOf(streamType));
  }
",non-flaky,5
76994,Tencent_Firestorm,CoordinatorGrpcTest.getShuffleAssignmentsTest,"  @Test
  public void getShuffleAssignmentsTest() throws Exception {
    String appId = ""getShuffleAssignmentsTest"";
    CoordinatorTestUtils.waitForRegister(coordinatorClient,2);
    RssGetShuffleAssignmentsRequest request = new RssGetShuffleAssignmentsRequest(
        appId, 1, 10, 4, 1,
        Sets.newHashSet(Constants.SHUFFLE_SERVER_VERSION));
    RssGetShuffleAssignmentsResponse response = coordinatorClient.getShuffleAssignments(request);
    Set<Integer> expectedStart = Sets.newHashSet(0, 4, 8);

    Map<ShuffleServerInfo, List<PartitionRange>> serverToPartitionRanges = response.getServerToPartitionRanges();
    assertEquals(2, serverToPartitionRanges.size());
    List<PartitionRange> partitionRanges = Lists.newArrayList();
    for (List<PartitionRange> ranges : serverToPartitionRanges.values()) {
      partitionRanges.addAll(ranges);
    }
    for (PartitionRange pr : partitionRanges) {
      switch (pr.getStart()) {
        case 0:
          assertEquals(3, pr.getEnd());
          expectedStart.remove(0);
          break;
        case 4:
          assertEquals(7, pr.getEnd());
          expectedStart.remove(4);
          break;
        case 8:
          assertEquals(11, pr.getEnd());
          expectedStart.remove(8);
          break;
        default:
          fail(""Shouldn't be here"");
      }
    }
    assertTrue(expectedStart.isEmpty());

    request = new RssGetShuffleAssignmentsRequest(
        appId, 1, 10, 4, 2,
        Sets.newHashSet(Constants.SHUFFLE_SERVER_VERSION));
    response = coordinatorClient.getShuffleAssignments(request);
    serverToPartitionRanges = response.getServerToPartitionRanges();
    assertEquals(2, serverToPartitionRanges.size());
    partitionRanges = Lists.newArrayList();
    for (List<PartitionRange> ranges : serverToPartitionRanges.values()) {
      partitionRanges.addAll(ranges);
    }
    assertEquals(6, partitionRanges.size());
    int range0To3 = 0;
    int range4To7 = 0;
    int range8To11 = 0;
    for (PartitionRange pr : partitionRanges) {
      switch (pr.getStart()) {
        case 0:
          assertEquals(3, pr.getEnd());
          range0To3++;
          break;
        case 4:
          assertEquals(7, pr.getEnd());
          range4To7++;
          break;
        case 8:
          assertEquals(11, pr.getEnd());
          range8To11++;
          break;
        default:
          fail(""Shouldn't be here"");
      }
    }
    assertEquals(2, range0To3);
    assertEquals(2, range4To7);
    assertEquals(2, range8To11);

    request = new RssGetShuffleAssignmentsRequest(
        appId, 3, 2, 1, 1,
        Sets.newHashSet(""fake_version""));
    try {
      coordinatorClient.getShuffleAssignments(request);
      fail(""Exception should be thrown"");
    } catch (Exception e) {
      assertTrue(e.getMessage().contains(""Empty assignment""));
    }
  }
",non-flaky,5
91429,strapdata_elassandra,HistoryTemplateEmailMappingsTests.setUp,"@TestLogging(""org.elasticsearch.xpack.watcher:DEBUG,"" +
    public void setUp() throws Exception {
        super.setUp();
        server = EmailServer.localhost(logger);
    }
",non-flaky,5
91475,strapdata_elassandra,SpecificMasterNodesIT.testSimpleOnlyMasterNodeElection,"@TestLogging(""_root:DEBUG,org.elasticsearch.action.admin.cluster.state:TRACE"")
    public void testSimpleOnlyMasterNodeElection() throws IOException {
        logger.info(""--> start data node / non master node"");
        internalCluster().startNode(Settings.builder().put(Node.NODE_DATA_SETTING.getKey(), true).put(Node.NODE_MASTER_SETTING.getKey(), false)
            .put(""discovery.initial_state_timeout"", ""1s""));
        try {
            assertThat(client().admin().cluster().prepareState().setMasterNodeTimeout(""100ms"").execute().actionGet().getState().nodes().getMasterNodeId(), nullValue());
            fail(""should not be able to find master"");
        } catch (MasterNotDiscoveredException e) {
            // all is well, no master elected
        }
        logger.info(""--> start master node"");
        final String masterNodeName = internalCluster().startNode(Settings.builder().put(Node.NODE_DATA_SETTING.getKey(), false).put(Node.NODE_MASTER_SETTING.getKey(), true));
        assertThat(internalCluster().nonMasterClient().admin().cluster().prepareState().execute().actionGet().getState().nodes().getMasterNode().getName(), equalTo(masterNodeName));
        assertThat(internalCluster().masterClient().admin().cluster().prepareState().execute().actionGet().getState().nodes().getMasterNode().getName(), equalTo(masterNodeName));

        logger.info(""--> stop master node"");
        internalCluster().stopCurrentMasterNode();

        try {
            assertThat(client().admin().cluster().prepareState().setMasterNodeTimeout(""100ms"").execute().actionGet().getState().nodes().getMasterNodeId(), nullValue());
            fail(""should not be able to find master"");
        } catch (MasterNotDiscoveredException e) {
            // all is well, no master elected
        }

        logger.info(""--> start master node"");
        final String nextMasterEligibleNodeName = internalCluster().startNode(Settings.builder().put(Node.NODE_DATA_SETTING.getKey(), false).put(Node.NODE_MASTER_SETTING.getKey(), true));
        assertThat(internalCluster().nonMasterClient().admin().cluster().prepareState().execute().actionGet().getState().nodes().getMasterNode().getName(), equalTo(nextMasterEligibleNodeName));
        assertThat(internalCluster().masterClient().admin().cluster().prepareState().execute().actionGet().getState().nodes().getMasterNode().getName(), equalTo(nextMasterEligibleNodeName));
    }
",non-flaky,5
97957,ReactiveX_RxJava,ConcatTests.testConcatCovariance,"    @Test
    public void testConcatCovariance() {
        Observable<Media> o1 = Observable.<Media> from(new HorrorMovie(), new Movie());
        Observable<Media> o2 = Observable.from(new Media(), new HorrorMovie());

        Observable<Observable<Media>> os = Observable.from(o1, o2);

        List<Media> values = Observable.concat(os).toList().toBlockingObservable().single();
    }
",non-flaky,5
43107,trinodb_trino,AbstractTestIntegrationSmokeTest.testSelectInformationSchemaColumns,"    @Test
    public void testSelectInformationSchemaColumns()
    {
        String catalog = getSession().getCatalog().get();
        String schema = getSession().getSchema().get();
        String schemaPattern = schema.replaceAll("".$"", ""_"");

        @Language(""SQL"") String ordersTableWithColumns = ""VALUES "" +
                ""('orders', 'orderkey'), "" +
                ""('orders', 'custkey'), "" +
                ""('orders', 'orderstatus'), "" +
                ""('orders', 'totalprice'), "" +
                ""('orders', 'orderdate'), "" +
                ""('orders', 'orderpriority'), "" +
                ""('orders', 'clerk'), "" +
                ""('orders', 'shippriority'), "" +
                ""('orders', 'comment')"";

        assertQuery(""SELECT table_schema FROM information_schema.columns WHERE table_schema = '"" + schema + ""' GROUP BY table_schema"", ""VALUES '"" + schema + ""'"");
        assertQuery(""SELECT table_name FROM information_schema.columns WHERE table_name = 'orders' GROUP BY table_name"", ""VALUES 'orders'"");
        assertQuery(""SELECT table_name, column_name FROM information_schema.columns WHERE table_schema = '"" + schema + ""' AND table_name = 'orders'"", ordersTableWithColumns);
        assertQuery(""SELECT table_name, column_name FROM information_schema.columns WHERE table_schema = '"" + schema + ""' AND table_name LIKE '%rders'"", ordersTableWithColumns);
        assertQuery(""SELECT table_name, column_name FROM information_schema.columns WHERE table_schema LIKE '"" + schemaPattern + ""' AND table_name LIKE '_rder_'"", ordersTableWithColumns);
        assertQuery(
                ""SELECT table_name, column_name FROM information_schema.columns "" +
                        ""WHERE table_catalog = '"" + catalog + ""' AND table_schema = '"" + schema + ""' AND table_name LIKE '%orders%'"",
                ordersTableWithColumns);

        assertQuerySucceeds(""SELECT * FROM information_schema.columns"");
        assertQuery(""SELECT DISTINCT table_name, column_name FROM information_schema.columns WHERE table_name LIKE '_rders'"", ordersTableWithColumns);
        assertQuerySucceeds(""SELECT * FROM information_schema.columns WHERE table_catalog = '"" + catalog + ""'"");
        assertQuerySucceeds(""SELECT * FROM information_schema.columns WHERE table_catalog = '"" + catalog + ""' AND table_schema = '"" + schema + ""'"");
        assertQuery(""SELECT table_name, column_name FROM information_schema.columns WHERE table_catalog = '"" + catalog + ""' AND table_schema = '"" + schema + ""' AND table_name LIKE '_rders'"", ordersTableWithColumns);
        assertQuerySucceeds(""SELECT * FROM information_schema.columns WHERE table_catalog = '"" + catalog + ""' AND table_name LIKE '%'"");
        assertQuery(""SELECT column_name FROM information_schema.columns WHERE table_catalog = 'something_else'"", ""SELECT '' WHERE false"");

        assertQuery(
                ""SELECT DISTINCT table_name FROM information_schema.columns WHERE table_schema = 'information_schema' OR rand() = 42 ORDER BY 1"",
                ""VALUES "" +
                        ""('applicable_roles'), "" +
                        ""('columns'), "" +
                        ""('enabled_roles'), "" +
                        ""('role_authorization_descriptors'), "" +
                        ""('roles'), "" +
                        ""('schemata'), "" +
                        ""('table_privileges'), "" +
                        ""('tables'), "" +
                        ""('views')"");
    }
",non-flaky,5
33747,alibaba_fastjson,FastJsonpHttpMessageConverter4Case2Test.test1,"    @Test
    public void test1() throws Exception {

        JSONObject json = new JSONObject();

        json.put(""id"", 123);

        json.put(""name"", ""ååå"");

        mockMvc.perform(
                (post(""/fastjson/test1"").characterEncoding(""UTF-8"").content(json.toJSONString())
                        .contentType(MediaType.APPLICATION_JSON))).andExpect(status().isOk()).andDo(print());
    }
",non-flaky,5
110154,Wikidata_wikidata-toolkit,NestedIteratorTest.iterateBeyondOuterList,"	@Test(expected = NoSuchElementException.class)
	public void iterateBeyondOuterList() {
		NestedIterator<String> nestedIterator = new NestedIterator<>(
				Collections.<List<String>> emptyList());
		nestedIterator.next();
	}
",non-flaky,5
97959,ReactiveX_RxJava,ConcatTests.testConcatCovariance3,"    @Test
    public void testConcatCovariance3() {
        Observable<Movie> o1 = Observable.from(new HorrorMovie(), new Movie());
        Observable<Media> o2 = Observable.from(new Media(), new HorrorMovie());

        List<Media> values = Observable.concat(o1, o2).toList().toBlockingObservable().single();
        
        assertTrue(values.get(0) instanceof HorrorMovie);
        assertTrue(values.get(1) instanceof Movie);
        assertTrue(values.get(2) instanceof Media);
        assertTrue(values.get(3) instanceof HorrorMovie);
    }
",non-flaky,5
98279,spotify_docker-client,ProgressMessageTest.testNotADigest,"  @Test
  public void testNotADigest() throws Exception {
    assertNull(readMessage(""not-a-digest"").digest());
  }
",non-flaky,5
89360,apache_samza,TestKafkaCheckpointManager.testReadSucceedsOnKeySerdeExceptionsWhenValidationIsDisabled,"  @Test
  public void testReadSucceedsOnKeySerdeExceptionsWhenValidationIsDisabled() throws InterruptedException {
    setupSystemFactory(config());
    List<IncomingMessageEnvelope> checkpointEnvelopes =
        ImmutableList.of(newCheckpointV1Envelope(TASK0, buildCheckpointV1(INPUT_SSP0, ""0""), ""0""));
    setupConsumer(checkpointEnvelopes);
    // wire up an exception throwing serde with the checkpointManager
    CheckpointV1Serde checkpointV1Serde = mock(CheckpointV1Serde.class);
    doThrow(new RuntimeException(""serde failed"")).when(checkpointV1Serde).fromBytes(any());
    KafkaCheckpointManager checkpointManager =
        new KafkaCheckpointManager(CHECKPOINT_SPEC, this.systemFactory, false, config(), this.metricsRegistry,
            checkpointV1Serde, CHECKPOINT_V2_SERDE, KAFKA_CHECKPOINT_LOG_KEY_SERDE);
    checkpointManager.register(TASK0);

    // expect the read to succeed in spite of the exception from ExceptionThrowingSerde
    assertNull(checkpointManager.readLastCheckpoint(TASK0));
  }
",non-flaky,5
137120,spring-projects_spring-framework,AbstractMethodMetadataTests.isAbstractWhenAbstractReturnsTrue,"	@Test
	public void isAbstractWhenAbstractReturnsTrue() {
		assertThat(getTagged(WithAbstractMethod.class).isAbstract()).isTrue();
	}
",non-flaky,5
76986,Tencent_Firestorm,GroupByKeyTest.groupByTest,"  @Test
  public void groupByTest() throws Exception {
    run();
  }
",non-flaky,5
77513,dropwizard_dropwizard,DAOTestRuleTest.ruleCreatedSessionFactory,"    @Test
    public void ruleCreatedSessionFactory() {
        final SessionFactory sessionFactory = daoTestRule.getSessionFactory();

        assertThat(sessionFactory).isNotNull();
    }
",non-flaky,5
99719,apache_cassandra,OptionReplicationTest.defaultsToReplicationFactorOfOne,"    @Test
    public void defaultsToReplicationFactorOfOne() throws Exception
    {
        OptionReplication defaults = new OptionReplication();
        assertEquals(ImmutableMap.of(""replication_factor"", ""1""), defaults.getOptions());
    }
",non-flaky,5
77507,dropwizard_dropwizard,AuthFilterTest.filter,"    @Test
        public void filter(ContainerRequestContext requestContext) throws IOException {
            authenticate(requestContext, ""some-password"", ""SOME_SCHEME"");
        }
",non-flaky,5
170478,eclipse_jetty.project,ObjectMBeanUtilTest.testSetAttributesException,"    @Test
    public void testSetAttributesException()
    {
        AttributeList attributes = getAttributes(""fnameee"", ""charu"");

        attributes = objectMBean.setAttributes(attributes);

        // Original code eating the exception and returning zero size list
        assertEquals(0, attributes.size(), ""As there is no attribute with the name fnameee, this should return empty"");
    }
",non-flaky,5
43035,trinodb_trino,BaseDynamicPartitionPruningTest.testSemiJoinWithSelectiveBuildSide,"    @Test(timeOut = 30_000)
    public void testSemiJoinWithSelectiveBuildSide()
    {
        @Language(""SQL"") String selectQuery = ""SELECT * FROM partitioned_lineitem WHERE suppkey IN (SELECT suppkey FROM supplier WHERE name = 'Supplier#000000001')"";
        ResultWithQueryId<MaterializedResult> result = getDistributedQueryRunner().executeWithQueryId(
                getSession(),
                selectQuery);
        MaterializedResult expected = computeActual(withDynamicFilteringDisabled(), selectQuery);
        assertEqualsIgnoreOrder(result.getResult(), expected);

        OperatorStats probeStats = searchScanFilterAndProjectOperatorStats(result.getQueryId(), getQualifiedTableName(PARTITIONED_LINEITEM));
        // Probe-side is partially scanned
        assertEquals(probeStats.getInputPositions(), 615L);

        DynamicFiltersStats dynamicFiltersStats = getDynamicFilteringStats(result.getQueryId());
        assertEquals(dynamicFiltersStats.getTotalDynamicFilters(), 1L);
        assertEquals(dynamicFiltersStats.getLazyDynamicFilters(), 1L);
        assertEquals(dynamicFiltersStats.getReplicatedDynamicFilters(), 0L);
        assertEquals(dynamicFiltersStats.getDynamicFiltersCompleted(), 1L);

        DynamicFilterDomainStats domainStats = getOnlyElement(dynamicFiltersStats.getDynamicFilterDomainStats());
        assertEquals(domainStats.getSimplifiedDomain(), singleValue(BIGINT, 1L).toString(getSession().toConnectorSession()));
    }
",non-flaky,5
122582,vespa-engine_vespa,EditorTest.noop,"    @Test
    public void noop() {
        path.writeUtf8File(""line\n"");

        LineEditor lineEditor = mock(LineEditor.class);
        when(lineEditor.edit(any())).thenReturn(LineEdit.none());

        Editor editor = new Editor(path.toPath(), lineEditor);
        TaskContext context = mock(TaskContext.class);

        assertFalse(editor.converge(context));

        verify(lineEditor, times(1)).edit(any());

        // Verify the system modification message
        verify(context, times(0)).recordSystemModification(any(), any());

        // Verify same contents
        assertEquals(""line\n"", path.readUtf8File());
    }
",non-flaky,5
156388,apache_commons-lang,StringUtilsEmptyBlankTest.testIsEmpty,"    @Test
    public void testIsEmpty() {
        assertTrue(StringUtils.isEmpty(null));
        assertTrue(StringUtils.isEmpty(""""));
        assertFalse(StringUtils.isEmpty("" ""));
        assertFalse(StringUtils.isEmpty(""foo""));
        assertFalse(StringUtils.isEmpty(""  foo  ""));
    }
",non-flaky,5
122575,vespa-engine_vespa,StoredBooleanTest.testCompatibility,"    @Test
    public void testCompatibility() throws IOException {
        StoredInteger storedInteger = new StoredInteger(path);
        assertFalse(storedBoolean.value());

        storedInteger.write(context, 1);
        assertTrue(storedBoolean.value());

        storedInteger.write(context, 2);
        assertTrue(storedBoolean.value());

        storedInteger.write(context, 0);
        assertFalse(storedBoolean.value());

        Files.delete(path);
        assertFalse(storedBoolean.value());
    }
",non-flaky,5
86124,graylog2_graylog2-server,LegacyAlertConditionMigratorTest.run,"    @Test
    public void run() {
        final int migratedConditions = 10;
        final int migratedCallbacks = 4;

        assertThat(migrator.run(Collections.emptySet(), Collections.emptySet())).satisfies(result -> {
            assertThat(result.completedAlertConditions()).containsOnly(
                    ""00000000-0000-0000-0000-000000000001"",
                    ""00000000-0000-0000-0000-000000000002"",
                    ""00000000-0000-0000-0000-000000000003"",
                    ""00000000-0000-0000-0000-000000000004"",
                    ""00000000-0000-0000-0000-000000000005"",
                    ""00000000-0000-0000-0000-000000000006"",
                    ""00000000-0000-0000-0000-000000000007"",
                    ""00000000-0000-0000-0000-000000000008"",
                    ""00000000-0000-0000-0000-000000000009"",
                    ""00000000-0000-0000-0000-000000000010""
            );
            assertThat(result.completedAlarmCallbacks()).containsOnly(
                    ""54e3deadbeefdeadbeef0001"",
                    ""54e3deadbeefdeadbeef0002"",
                    ""54e3deadbeefdeadbeef0003"",
                    ""54e3deadbeefdeadbeef0004""
            );
        });

        // Make sure we use the EventDefinitionHandler to create the event definitions
        verify(eventDefinitionHandler, times(migratedConditions)).create(any(EventDefinitionDto.class), any(Optional.class));

        // Make sure we use the NotificationResourceHandler to create the notifications
        verify(notificationResourceHandler, times(migratedCallbacks)).create(any(NotificationDto.class), any(Optional.class));

        assertThat(eventDefinitionService.streamAll().count()).isEqualTo(migratedConditions);
        assertThat(notificationService.streamAll().count()).isEqualTo(migratedCallbacks);

        final NotificationDto httpNotification = notificationService.streamAll()
                .filter(n -> n.title().equals(""HTTP Callback Test""))
                .findFirst()
                .orElse(null);

        assertThat(httpNotification).isNotNull();
        assertThat(httpNotification.title()).isEqualTo(""HTTP Callback Test"");
        assertThat(httpNotification.description()).isEqualTo(""Migrated legacy alarm callback"");
        assertThat(httpNotification.config()).isInstanceOf(LegacyAlarmCallbackEventNotificationConfig.class);
        assertThat((LegacyAlarmCallbackEventNotificationConfig) httpNotification.config()).satisfies(config -> {
            assertThat(config.callbackType()).isEqualTo(""org.graylog2.alarmcallbacks.HTTPAlarmCallback"");
            assertThat(config.configuration().get(""url"")).isEqualTo(""http://localhost:11000/"");
        });

        final NotificationDto httpNotificationWithoutTitle = notificationService.streamAll()
                .filter(n -> n.title().equals(""Untitled""))
                .findFirst()
                .orElse(null);

        assertThat(httpNotificationWithoutTitle).isNotNull();
        assertThat(httpNotificationWithoutTitle.title()).isEqualTo(""Untitled"");
        assertThat(httpNotificationWithoutTitle.description()).isEqualTo(""Migrated legacy alarm callback"");
        assertThat(httpNotificationWithoutTitle.config()).isInstanceOf(LegacyAlarmCallbackEventNotificationConfig.class);
        assertThat((LegacyAlarmCallbackEventNotificationConfig) httpNotificationWithoutTitle.config()).satisfies(config -> {
            assertThat(config.callbackType()).isEqualTo(""org.graylog2.alarmcallbacks.HTTPAlarmCallback"");
            assertThat(config.configuration().get(""url"")).isEqualTo(""http://localhost:11000/"");
        });

        final NotificationDto emailNotification = notificationService.streamAll()
                .filter(n -> n.title().equals(""Email Callback Test""))
                .findFirst()
                .orElse(null);

        assertThat(emailNotification).isNotNull();
        assertThat(emailNotification.title()).isEqualTo(""Email Callback Test"");
        assertThat(emailNotification.description()).isEqualTo(""Migrated legacy alarm callback"");
        assertThat(emailNotification.config()).isInstanceOf(LegacyAlarmCallbackEventNotificationConfig.class);
        assertThat((LegacyAlarmCallbackEventNotificationConfig) emailNotification.config()).satisfies(config -> {
            assertThat(config.callbackType()).isEqualTo(""org.graylog2.alarmcallbacks.EmailAlarmCallback"");
            assertThat(config.configuration().get(""sender"")).isEqualTo(""graylog@example.org"");
            assertThat(config.configuration().get(""subject"")).isEqualTo(""Graylog alert for stream: ${stream.title}: ${check_result.resultDescription}"");
            assertThat((String) config.configuration().get(""body"")).contains(""Alert Description: ${check_result.resultDescription}\nDate: "");
            assertThat(config.configuration().get(""user_receivers"")).isEqualTo(Collections.emptyList());
            assertThat(config.configuration().get(""email_receivers"")).isEqualTo(Collections.singletonList(""jane@example.org""));
        });

        final NotificationDto slackNotification = notificationService.streamAll()
                .filter(n -> n.title().equals(""Slack Callback Test""))
                .findFirst()
                .orElse(null);

        assertThat(slackNotification).isNotNull();
        assertThat(slackNotification.title()).isEqualTo(""Slack Callback Test"");
        assertThat(slackNotification.description()).isEqualTo(""Migrated legacy alarm callback"");
        assertThat(slackNotification.config()).isInstanceOf(LegacyAlarmCallbackEventNotificationConfig.class);
        assertThat((LegacyAlarmCallbackEventNotificationConfig) slackNotification.config()).satisfies(config -> {
            assertThat(config.callbackType()).isEqualTo(""org.graylog2.plugins.slack.callback.SlackAlarmCallback"");
            assertThat(config.configuration().get(""icon_url"")).isEqualTo("""");
            assertThat(config.configuration().get(""graylog2_url"")).isEqualTo("""");
            assertThat(config.configuration().get(""link_names"")).isEqualTo(true);
            assertThat(config.configuration().get(""webhook_url"")).isEqualTo(""http://example.com/slack-hook"");
            assertThat(config.configuration().get(""color"")).isEqualTo(""#FF0000"");
            assertThat(config.configuration().get(""icon_emoji"")).isEqualTo("""");
            assertThat(config.configuration().get(""user_name"")).isEqualTo(""Graylog"");
            assertThat(config.configuration().get(""backlog_items"")).isEqualTo(5);
            assertThat(config.configuration().get(""custom_fields"")).isEqualTo("""");
            assertThat(config.configuration().get(""proxy_address"")).isEqualTo("""");
            assertThat(config.configuration().get(""channel"")).isEqualTo(""#channel"");
            assertThat(config.configuration().get(""notify_channel"")).isEqualTo(false);
            assertThat(config.configuration().get(""add_attachment"")).isEqualTo(true);
            assertThat(config.configuration().get(""short_mode"")).isEqualTo(false);
        });

        assertThat(eventDefinitionService.streamAll().filter(ed -> ed.title().equals(""Message Count - MORE"")).findFirst())
                .get()
                .satisfies(eventDefinition -> {
                    assertThat(eventDefinition.alert()).isTrue();
                    assertThat(eventDefinition.priority()).isEqualTo(2);
                    assertThat(eventDefinition.keySpec()).isEmpty();
                    assertThat(eventDefinition.notificationSettings().gracePeriodMs()).isEqualTo(120000);
                    assertThat(eventDefinition.notificationSettings().backlogSize()).isEqualTo(10);

                    assertThat(eventDefinition.notifications()).hasSize(2);
                    assertThat(eventDefinition.notifications().stream().map(EventNotificationHandler.Config::notificationId).collect(Collectors.toList()))
                            .containsOnly(httpNotification.id(), httpNotificationWithoutTitle.id());

                    assertThat((AggregationEventProcessorConfig) eventDefinition.config()).satisfies(config -> {
                        assertThat(config.streams()).containsExactly(""54e3deadbeefdeadbeef0001"");
                        assertThat(config.query()).isEqualTo(""hello:world"");
                        assertThat(config.groupBy()).isEmpty();
                        assertThat(config.searchWithinMs()).isEqualTo(10 * 60 * 1000);
                        assertThat(config.executeEveryMs()).isEqualTo(CHECK_INTERVAL * 1000);

                        assertThat(config.series()).hasSize(1);
                        assertThat(config.series().get(0).id()).isNotBlank();
                        assertThat(config.series().get(0).function()).isEqualTo(AggregationFunction.COUNT);
                        assertThat(config.series().get(0).field()).isNotPresent();

                        assertThat(config.conditions()).get().satisfies(conditions -> {
                            assertThat(conditions.expression()).get().satisfies(expression -> {
                                assertThat(expression).isInstanceOf(Expr.Greater.class);

                                final Expr.Greater greater = (Expr.Greater) expression;

                                assertThat(greater.left()).isEqualTo(Expr.NumberReference.create(config.series().get(0).id()));
                                assertThat(greater.right()).isEqualTo(Expr.NumberValue.create(1));
                            });
                        });
                    });
                });

        assertThat(eventDefinitionService.streamAll().filter(ed -> ed.title().equals(""Message Count - LESS"")).findFirst())
                .get()
                .satisfies(eventDefinition -> {
                    assertThat(eventDefinition.alert()).isTrue();
                    assertThat(eventDefinition.priority()).isEqualTo(2);
                    assertThat(eventDefinition.keySpec()).isEmpty();
                    assertThat(eventDefinition.notificationSettings().gracePeriodMs()).isEqualTo(0);
                    assertThat(eventDefinition.notificationSettings().backlogSize()).isEqualTo(0);

                    assertThat(eventDefinition.notifications()).hasSize(2);
                    assertThat(eventDefinition.notifications().stream().map(EventNotificationHandler.Config::notificationId).collect(Collectors.toList()))
                            .containsOnly(httpNotification.id(), httpNotificationWithoutTitle.id());

                    assertThat((AggregationEventProcessorConfig) eventDefinition.config()).satisfies(config -> {
                        assertThat(config.streams()).containsExactly(""54e3deadbeefdeadbeef0001"");
                        assertThat(config.query()).isEmpty();
                        assertThat(config.groupBy()).isEmpty();
                        assertThat(config.searchWithinMs()).isEqualTo(4 * 60 * 1000);
                        assertThat(config.executeEveryMs()).isEqualTo(CHECK_INTERVAL * 1000);

                        assertThat(config.series()).hasSize(1);
                        assertThat(config.series().get(0).id()).isNotBlank();
                        assertThat(config.series().get(0).function()).isEqualTo(AggregationFunction.COUNT);
                        assertThat(config.series().get(0).field()).isNotPresent();

                        assertThat(config.conditions()).get().satisfies(conditions -> {
                            assertThat(conditions.expression()).get().satisfies(expression -> {
                                assertThat(expression).isInstanceOf(Expr.Lesser.class);

                                final Expr.Lesser lesser = (Expr.Lesser) expression;

                                assertThat(lesser.left()).isEqualTo(Expr.NumberReference.create(config.series().get(0).id()));
                                assertThat(lesser.right()).isEqualTo(Expr.NumberValue.create(42));
                            });
                        });
                    });
                });

        assertThat(eventDefinitionService.streamAll().filter(ed -> ed.title().equals(""Field Value - HIGHER - MEAN"")).findFirst())
                .get()
                .satisfies(eventDefinition -> {
                    assertThat(eventDefinition.alert()).isTrue();
                    assertThat(eventDefinition.priority()).isEqualTo(2);
                    assertThat(eventDefinition.keySpec()).isEmpty();
                    assertThat(eventDefinition.notificationSettings().gracePeriodMs()).isEqualTo(60000);
                    assertThat(eventDefinition.notificationSettings().backlogSize()).isEqualTo(15);
                    assertThat(eventDefinition.notifications()).isEmpty();

                    assertThat((AggregationEventProcessorConfig) eventDefinition.config()).satisfies(config -> {
                        assertThat(config.streams()).containsExactly(""54e3deadbeefdeadbeef0002"");
                        assertThat(config.query()).isEqualTo(""*"");
                        assertThat(config.groupBy()).isEmpty();
                        assertThat(config.searchWithinMs()).isEqualTo(5 * 60 * 1000);
                        assertThat(config.executeEveryMs()).isEqualTo(CHECK_INTERVAL * 1000);

                        assertThat(config.series()).hasSize(1);
                        assertThat(config.series().get(0).id()).isNotBlank();
                        assertThat(config.series().get(0).function()).isEqualTo(AggregationFunction.AVG);
                        assertThat(config.series().get(0).field()).get().isEqualTo(""test_field_1"");

                        assertThat(config.conditions()).get().satisfies(conditions -> {
                            assertThat(conditions.expression()).get().satisfies(expression -> {
                                assertThat(expression).isInstanceOf(Expr.Greater.class);

                                final Expr.Greater greater = (Expr.Greater) expression;

                                assertThat(greater.left()).isEqualTo(Expr.NumberReference.create(config.series().get(0).id()));
                                assertThat(greater.right()).isEqualTo(Expr.NumberValue.create(23));
                            });
                        });
                    });
                });

        assertThat(eventDefinitionService.streamAll().filter(ed -> ed.title().equals(""Field Value - LOWER - SUM"")).findFirst())
                .get()
                .satisfies(eventDefinition -> {
                    assertThat(eventDefinition.alert()).isTrue();
                    assertThat(eventDefinition.priority()).isEqualTo(2);
                    assertThat(eventDefinition.keySpec()).isEmpty();
                    assertThat(eventDefinition.notificationSettings().gracePeriodMs()).isEqualTo(60000);
                    assertThat(eventDefinition.notificationSettings().backlogSize()).isEqualTo(15);
                    assertThat(eventDefinition.notifications()).isEmpty();

                    assertThat((AggregationEventProcessorConfig) eventDefinition.config()).satisfies(config -> {
                        assertThat(config.streams()).containsExactly(""54e3deadbeefdeadbeef0002"");
                        assertThat(config.query()).isEqualTo(""*"");
                        assertThat(config.groupBy()).isEmpty();
                        assertThat(config.searchWithinMs()).isEqualTo(5 * 60 * 1000);
                        assertThat(config.executeEveryMs()).isEqualTo(CHECK_INTERVAL * 1000);

                        assertThat(config.series()).hasSize(1);
                        assertThat(config.series().get(0).id()).isNotBlank();
                        assertThat(config.series().get(0).function()).isEqualTo(AggregationFunction.SUM);
                        assertThat(config.series().get(0).field()).get().isEqualTo(""test_field_1"");

                        assertThat(config.conditions()).get().satisfies(conditions -> {
                            assertThat(conditions.expression()).get().satisfies(expression -> {
                                assertThat(expression).isInstanceOf(Expr.Lesser.class);

                                final Expr.Lesser lesser = (Expr.Lesser) expression;

                                assertThat(lesser.left()).isEqualTo(Expr.NumberReference.create(config.series().get(0).id()));
                                assertThat(lesser.right()).isEqualTo(Expr.NumberValue.create(23));
                            });
                        });
                    });
                });

        assertThat(eventDefinitionService.streamAll().filter(ed -> ed.title().equals(""Field Value - LOWER - MIN"")).findFirst())
                .get()
                .satisfies(eventDefinition -> {
                    assertThat(eventDefinition.alert()).isTrue();
                    assertThat(eventDefinition.priority()).isEqualTo(2);
                    assertThat(eventDefinition.keySpec()).isEmpty();
                    assertThat(eventDefinition.notificationSettings().gracePeriodMs()).isEqualTo(60000);
                    assertThat(eventDefinition.notificationSettings().backlogSize()).isEqualTo(15);
                    assertThat(eventDefinition.notifications()).isEmpty();

                    assertThat((AggregationEventProcessorConfig) eventDefinition.config()).satisfies(config -> {
                        assertThat(config.streams()).containsExactly(""54e3deadbeefdeadbeef0002"");
                        assertThat(config.query()).isEqualTo(""*"");
                        assertThat(config.groupBy()).isEmpty();
                        assertThat(config.searchWithinMs()).isEqualTo(5 * 60 * 1000);
                        assertThat(config.executeEveryMs()).isEqualTo(CHECK_INTERVAL * 1000);

                        assertThat(config.series()).hasSize(1);
                        assertThat(config.series().get(0).id()).isNotBlank();
                        assertThat(config.series().get(0).function()).isEqualTo(AggregationFunction.MIN);
                        assertThat(config.series().get(0).field()).get().isEqualTo(""test_field_1"");

                        assertThat(config.conditions()).get().satisfies(conditions -> {
                            assertThat(conditions.expression()).get().satisfies(expression -> {
                                assertThat(expression).isInstanceOf(Expr.Lesser.class);

                                final Expr.Lesser lesser = (Expr.Lesser) expression;

                                assertThat(lesser.left()).isEqualTo(Expr.NumberReference.create(config.series().get(0).id()));
                                assertThat(lesser.right()).isEqualTo(Expr.NumberValue.create(23));
                            });
                        });
                    });
                });

        assertThat(eventDefinitionService.streamAll().filter(ed -> ed.title().equals(""Field Value - LOWER - MAX"")).findFirst())
                .get()
                .satisfies(eventDefinition -> {
                    assertThat(eventDefinition.alert()).isTrue();
                    assertThat(eventDefinition.priority()).isEqualTo(2);
                    assertThat(eventDefinition.keySpec()).isEmpty();
                    assertThat(eventDefinition.notificationSettings().gracePeriodMs()).isEqualTo(60000);
                    assertThat(eventDefinition.notificationSettings().backlogSize()).isEqualTo(15);
                    assertThat(eventDefinition.notifications()).isEmpty();

                    assertThat((AggregationEventProcessorConfig) eventDefinition.config()).satisfies(config -> {
                        assertThat(config.streams()).containsExactly(""54e3deadbeefdeadbeef0002"");
                        assertThat(config.query()).isEqualTo(""*"");
                        assertThat(config.groupBy()).isEmpty();
                        assertThat(config.searchWithinMs()).isEqualTo(5 * 60 * 1000);
                        assertThat(config.executeEveryMs()).isEqualTo(CHECK_INTERVAL * 1000);

                        assertThat(config.series()).hasSize(1);
                        assertThat(config.series().get(0).id()).isNotBlank();
                        assertThat(config.series().get(0).function()).isEqualTo(AggregationFunction.MAX);
                        assertThat(config.series().get(0).field()).get().isEqualTo(""test_field_1"");

                        assertThat(config.conditions()).get().satisfies(conditions -> {
                            assertThat(conditions.expression()).get().satisfies(expression -> {
                                assertThat(expression).isInstanceOf(Expr.Lesser.class);

                                final Expr.Lesser lesser = (Expr.Lesser) expression;

                                assertThat(lesser.left()).isEqualTo(Expr.NumberReference.create(config.series().get(0).id()));
                                assertThat(lesser.right()).isEqualTo(Expr.NumberValue.create(23));
                            });
                        });
                    });
                });

        assertThat(eventDefinitionService.streamAll().filter(ed -> ed.title().equals(""Field Value - LOWER - STDDEV"")).findFirst())
                .get()
                .satisfies(eventDefinition -> {
                    assertThat(eventDefinition.alert()).isTrue();
                    assertThat(eventDefinition.priority()).isEqualTo(2);
                    assertThat(eventDefinition.keySpec()).isEmpty();
                    assertThat(eventDefinition.notificationSettings().gracePeriodMs()).isEqualTo(60000);
                    assertThat(eventDefinition.notificationSettings().backlogSize()).isEqualTo(15);
                    assertThat(eventDefinition.notifications()).isEmpty();

                    assertThat((AggregationEventProcessorConfig) eventDefinition.config()).satisfies(config -> {
                        assertThat(config.streams()).containsExactly(""54e3deadbeefdeadbeef0002"");
                        assertThat(config.query()).isEqualTo(""*"");
                        assertThat(config.groupBy()).isEmpty();
                        assertThat(config.searchWithinMs()).isEqualTo(5 * 60 * 1000);
                        assertThat(config.executeEveryMs()).isEqualTo(CHECK_INTERVAL * 1000);

                        assertThat(config.series()).hasSize(1);
                        assertThat(config.series().get(0).id()).isNotBlank();
                        assertThat(config.series().get(0).function()).isEqualTo(AggregationFunction.STDDEV);
                        assertThat(config.series().get(0).field()).get().isEqualTo(""test_field_1"");

                        assertThat(config.conditions()).get().satisfies(conditions -> {
                            assertThat(conditions.expression()).get().satisfies(expression -> {
                                assertThat(expression).isInstanceOf(Expr.Greater.class);

                                final Expr.Greater greater = (Expr.Greater) expression;

                                assertThat(greater.left()).isEqualTo(Expr.NumberReference.create(config.series().get(0).id()));
                                assertThat(greater.right()).isEqualTo(Expr.NumberValue.create(23));
                            });
                        });
                    });
                });

        assertThat(eventDefinitionService.streamAll().filter(ed -> ed.title().equals(""Field Content - WITHOUT QUERY"")).findFirst())
                .get()
                .satisfies(eventDefinition -> {
                    assertThat(eventDefinition.alert()).isTrue();
                    assertThat(eventDefinition.priority()).isEqualTo(2);
                    assertThat(eventDefinition.keySpec()).isEmpty();
                    assertThat(eventDefinition.notificationSettings().gracePeriodMs()).isEqualTo(120000);
                    assertThat(eventDefinition.notificationSettings().backlogSize()).isEqualTo(100);

                    assertThat(eventDefinition.notifications()).hasSize(2);
                    assertThat(eventDefinition.notifications().stream().map(EventNotificationHandler.Config::notificationId).collect(Collectors.toSet()))
                            .containsOnly(emailNotification.id(), slackNotification.id());

                    assertThat((AggregationEventProcessorConfig) eventDefinition.config()).satisfies(config -> {
                        assertThat(config.streams()).containsExactly(""54e3deadbeefdeadbeef0003"");
                        assertThat(config.query()).isEqualTo(""test_field_2:\""hello\"""");
                        assertThat(config.groupBy()).isEmpty();
                        assertThat(config.searchWithinMs()).isEqualTo(CHECK_INTERVAL * 1000);
                        assertThat(config.executeEveryMs()).isEqualTo(CHECK_INTERVAL * 1000);

                        assertThat(config.series()).hasSize(1);
                        assertThat(config.series().get(0).id()).isNotBlank();
                        assertThat(config.series().get(0).function()).isEqualTo(AggregationFunction.COUNT);
                        assertThat(config.series().get(0).field()).isNotPresent();

                        assertThat(config.conditions()).get().satisfies(conditions -> {
                            assertThat(conditions.expression()).get().satisfies(expression -> {
                                assertThat(expression).isInstanceOf(Expr.Greater.class);

                                final Expr.Greater greater = (Expr.Greater) expression;

                                assertThat(greater.left()).isEqualTo(Expr.NumberReference.create(config.series().get(0).id()));
                                assertThat(greater.right()).isEqualTo(Expr.NumberValue.create(0));
                            });
                        });
                    });
                });

        assertThat(eventDefinitionService.streamAll().filter(ed -> ed.title().equals(""Field Content - WITH QUERY"")).findFirst())
                .get()
                .satisfies(eventDefinition -> {
                    assertThat(eventDefinition.alert()).isTrue();
                    assertThat(eventDefinition.priority()).isEqualTo(2);
                    assertThat(eventDefinition.keySpec()).isEmpty();
                    assertThat(eventDefinition.notificationSettings().gracePeriodMs()).isEqualTo(0);
                    assertThat(eventDefinition.notificationSettings().backlogSize()).isEqualTo(0);

                    assertThat(eventDefinition.notifications()).hasSize(2);
                    assertThat(eventDefinition.notifications().stream().map(EventNotificationHandler.Config::notificationId).collect(Collectors.toSet()))
                            .containsOnly(emailNotification.id(), slackNotification.id());

                    assertThat((AggregationEventProcessorConfig) eventDefinition.config()).satisfies(config -> {
                        assertThat(config.streams()).containsExactly(""54e3deadbeefdeadbeef0003"");
                        assertThat(config.query()).isEqualTo(""test_field_3:\""foo\"" AND foo:bar"");
                        assertThat(config.groupBy()).isEmpty();
                        assertThat(config.searchWithinMs()).isEqualTo(CHECK_INTERVAL * 1000);
                        assertThat(config.executeEveryMs()).isEqualTo(CHECK_INTERVAL * 1000);

                        assertThat(config.series()).hasSize(1);
                        assertThat(config.series().get(0).id()).isNotBlank();
                        assertThat(config.series().get(0).function()).isEqualTo(AggregationFunction.COUNT);
                        assertThat(config.series().get(0).field()).isNotPresent();

                        assertThat(config.conditions()).get().satisfies(conditions -> {
                            assertThat(conditions.expression()).get().satisfies(expression -> {
                                assertThat(expression).isInstanceOf(Expr.Greater.class);

                                final Expr.Greater greater = (Expr.Greater) expression;

                                assertThat(greater.left()).isEqualTo(Expr.NumberReference.create(config.series().get(0).id()));
                                assertThat(greater.right()).isEqualTo(Expr.NumberValue.create(0));
                            });
                        });
                    });
                });

        assertThat(eventDefinitionService.streamAll().filter(ed -> ed.title().equals(""Untitled"")).findFirst())
                .get()
                .satisfies(eventDefinition -> {
                    assertThat(eventDefinition.alert()).isTrue();
                    assertThat(eventDefinition.priority()).isEqualTo(2);
                    assertThat(eventDefinition.keySpec()).isEmpty();
                    assertThat(eventDefinition.notificationSettings().gracePeriodMs()).isEqualTo(0);
                    assertThat(eventDefinition.notificationSettings().backlogSize()).isEqualTo(0);

                    assertThat(eventDefinition.notifications()).hasSize(2);
                    assertThat(eventDefinition.notifications().stream().map(EventNotificationHandler.Config::notificationId).collect(Collectors.toSet()))
                            .containsOnly(emailNotification.id(), slackNotification.id());

                    assertThat((AggregationEventProcessorConfig) eventDefinition.config()).satisfies(config -> {
                        assertThat(config.streams()).containsExactly(""54e3deadbeefdeadbeef0003"");
                        assertThat(config.query()).isEqualTo(""test_field_3:\""foo\"" AND foo:bar"");
                        assertThat(config.groupBy()).isEmpty();
                        assertThat(config.searchWithinMs()).isEqualTo(CHECK_INTERVAL * 1000);
                        assertThat(config.executeEveryMs()).isEqualTo(CHECK_INTERVAL * 1000);

                        assertThat(config.series()).hasSize(1);
                        assertThat(config.series().get(0).id()).isNotBlank();
                        assertThat(config.series().get(0).function()).isEqualTo(AggregationFunction.COUNT);
                        assertThat(config.series().get(0).field()).isNotPresent();

                        assertThat(config.conditions()).get().satisfies(conditions -> {
                            assertThat(conditions.expression()).get().satisfies(expression -> {
                                assertThat(expression).isInstanceOf(Expr.Greater.class);

                                final Expr.Greater greater = (Expr.Greater) expression;

                                assertThat(greater.left()).isEqualTo(Expr.NumberReference.create(config.series().get(0).id()));
                                assertThat(greater.right()).isEqualTo(Expr.NumberValue.create(0));
                            });
                        });
                    });
                });
    }
",non-flaky,5
110126,Wikidata_wikidata-toolkit,ClientTest.testInsertDumpInformation,"	@Test
	public void testInsertDumpInformation() throws IOException {
		DirectoryManagerFactory
				.setDirectoryManagerClass(MockDirectoryManager.class);

		MockDirectoryManager mdm = new MockDirectoryManager(
				Paths.get(""/output/""), false);

		String[] args = { ""-n"", ""-a"", ""rdf"", ""-o"", ""/output/wikidata.rdf"",
				""--rdftasks"", ""aliases"", ""-r"", ""/output/report-{DATE}.txt"" };

		Client client = new Client(mockDpc, args);
		client.performActions();

		assertTrue(mdm.hasFile(""/output/report-""
				+ client.clientConfiguration.getDateStamp() + "".txt""));
	}
",non-flaky,5
162427,testcontainers_testcontainers-java,GenericContainerRuleTest.customLabelTest,"    @Test
    public void customLabelTest() {
        try (final GenericContainer alpineCustomLabel = new GenericContainer(""alpine:3.2"")
            .withLabel(""our.custom"", ""label"")
            .withCommand(""top"")) {

            alpineCustomLabel.start();

            Map<String, String> labels = alpineCustomLabel.getCurrentContainerInfo().getConfig().getLabels();
            assertTrue(""org.testcontainers label is present"", labels.containsKey(""org.testcontainers""));
            assertTrue(""our.custom label is present"", labels.containsKey(""our.custom""));
            assertEquals(""our.custom label value is label"", labels.get(""our.custom""), ""label"");
        }
    }
",non-flaky,5
113997,apache_struts,UploadedFileConverterTest.convertUploadedFileArrayToFile,"    @Test
    public void convertUploadedFileArrayToFile() throws Exception {
        // given
        UploadedFileConverter ufc = new UploadedFileConverter();
        UploadedFile[] uploadedFile = new UploadedFile[] { new StrutsUploadedFile(tempFile) };

        // when
        Object result = ufc.convertValue(context, target, member, propertyName, uploadedFile, File.class);

        // then
        assertThat(result).isInstanceOf(File.class);
        File file = (File) result;
        assertThat(file.length()).isEqualTo(tempFile.length());
        assertThat(file.getAbsolutePath()).isEqualTo(tempFile.getAbsolutePath());
    }
",non-flaky,5
162415,testcontainers_testcontainers-java,DockerNetworkModeTest.testBridgedNetworkContainer,"    @Test
    public void testBridgedNetworkContainer() throws TimeoutException {
        String output = getContainerOutput(bridgedNetwork);

        assertTrue(""'bridge' network can access the internet"", output.contains(""seq=1""));
    }
",non-flaky,5
354,apache_struts,13d9053050c9e4fb2ef049db6a37d3f6eebf48fa.testRender_ok.2,"@Test
public void testRender_ok() {
    final Mock mockResponse = mock(RenderResponse.class);
    mockResponse.stubs().method(ANYTHING);
    PortletMode mode = PortletMode.VIEW;
    Map<String, String[]> requestParams = new HashMap<String, String[]>();
    requestParams.put(ACTION_PARAM, new String[] { ""/view/testAction"" });
    requestParams.put(EVENT_ACTION, new String[] { ""true"" });
    requestParams.put(MODE_PARAM, new String[] { mode.toString() });
    Map<String, Object> sessionMap = new HashMap<String, Object>();
    Map<String, String> initParams = new HashMap<String, String>();
    initParams.put(""viewNamespace"", ""/view"");
    initParams.put(StrutsConstants.STRUTS_ALWAYS_SELECT_FULL_NAMESPACE,
    ""true"");
    initPortletConfig(initParams, new HashMap<String, Object>());
    initRequest(requestParams, new HashMap<String, Object>(), sessionMap,
    PortletMode.VIEW, WindowState.NORMAL, false, null);
    setupActionFactory(""/view"", ""testAction"", ""success"",
    EasyMock.createNiceMock(ValueStack.class));
    mockInvocation.expects(once()).method(""getStack"")
    .will(returnValue(null));
    try {
        dispatcher
        .setActionProxyFactory((ActionProxyFactory) mockActionFactory
        .proxy());
        dispatcher.init((PortletConfig) mockConfig.proxy());
        dispatcher.render((RenderRequest) mockRequest.proxy(),
        (RenderResponse) mockResponse.proxy());
    } catch (Exception e) {
        e.printStackTrace();
        fail(""Error occured"");
    }
}",test order dependency,4
134012,CorfuDB_CorfuDB,LoggingMeterRegistryTest.testWriteGauge,"    @Test
    public void testWriteGauge() {
        Meter.Id id = new Meter.Id(""metric"", Tags.of(""endpoint"", ""localhost:9000""),
                null, null, Meter.Type.GAUGE);
        LoggingMeterRegistryWithHistogramSupport registry = getInstance();
        Stream<String> stream = registry.writeGauge(id, 20.0);
        String line = stream.findFirst().orElseThrow(IllegalArgumentException::new);
        assertTrue(line.contains(""metric,endpoint=localhost:9000,metric_type=gauge value=20""));
    }
",non-flaky,5
19501,eclipse_xtext-core,TraceRegionTest.testConstructorInvalidArgs_02,"	@Test(expected = IllegalArgumentException.class)
	public void testConstructorInvalidArgs_02() {
		new TraceRegion(0, -1, 0, 0, true, 0, 0, 0, 0, null, newURI());
	}
",non-flaky,5
110120,Wikidata_wikidata-toolkit,ClientTest.testRdfOutput,"	@Test
	public void testRdfOutput() {
		String[] args = { ""-a"", ""rdf"", ""-o"", ""output/wikidata.rdf"" };
		ClientConfiguration configuration = new ClientConfiguration(args);
		DumpProcessingAction action = configuration.actions.get(0);
		action.open();
		action.close();
		assertTrue(action
				.getReport()
				.matches(
						""Finished serialization of \\d+ RDF triples in file output/wikidata.rdf""));
	}
",non-flaky,5
19490,eclipse_xtext-core,EcoreUtil2Test.testClone_2,"	@Test
	public void testClone_2() throws Exception {
		ResourceSetImpl sourceSet = new DerivedStateAwareResourceSet();
		DerivedStateAwareResource resource = (DerivedStateAwareResource) sourceSet.createResource(URI
				.createURI(""http://derived.res""));
		boolean stateToCheck = !resource.isFullyInitialized();
		resource.setFullyInitialized(stateToCheck);
		
		Resource targetRes = EcoreUtil2.clone(new DerivedStateAwareResourceSet(), sourceSet).getResources().get(0);
		
		assertTrue(targetRes instanceof DerivedStateAwareResource);
		assertEquals(""FullyInitialized flag not copied "", stateToCheck, ((DerivedStateAwareResource) targetRes).isFullyInitialized());
	}
",non-flaky,5
170517,eclipse_jetty.project,TestAnnotationParser.testBasedirExclusion,"    @Test
    public void testBasedirExclusion() throws Exception
    {
        // Build up basedir, which itself has a path segment that violates java package and classnaming.
        // The basedir should have no effect on annotation scanning.
        // Intentionally using a base director name that starts with a "".""
        // This mimics what you see in jenkins, hudson, hadoop, solr, camel, and selenium for their 
        // installed and/or managed webapps
        File basedir = testdir.getPathFile("".base/workspace/classes"").toFile();
        FS.ensureEmpty(basedir);

        // Copy in class that is known to have annotations.
        copyClass(ClassA.class, basedir);

        // Setup Tracker
        TrackingAnnotationHandler tracker = new TrackingAnnotationHandler(Sample.class.getName());

        // Setup annotation scanning
        AnnotationParser parser = new AnnotationParser();

        // Parse
        parser.parse(Collections.singleton(tracker), basedir.toURI());

        // Validate
        assertThat(""Found Class"", tracker.foundClasses, contains(ClassA.class.getName()));
    }
",non-flaky,5
60955,apache_druid,RowBucketIterableTest.testApplyMultipleInterval,"  @Test
  public void testApplyMultipleInterval()
  {
    intervals = new ArrayList<>();
    intervals.add(INTERVAL_JAN_1_4);
    intervals.add(INTERVAL_JAN_6_8);

    List<Row> expectedDay1 = Arrays.asList(JAN_1_M_10, JAN_1_F_20);
    List<Row> expectedDay2 = Collections.singletonList(JAN_2_M_10);
    List<Row> expectedDay3 = Collections.singletonList(JAN_3_F_20);
    List<Row> expectedDay4 = Arrays.asList(JAN_4_M_10, JAN_4_F_20, JAN_4_U_30);
    List<Row> expectedDay6 = Collections.singletonList(JAN_6_M_10);
    List<Row> expectedDay7 = Collections.singletonList(JAN_7_F_20);
    List<Row> expectedDay8 = Collections.singletonList(JAN_8_U_30);

    rows = new ArrayList<>();
    rows.add(JAN_1_M_10);
    rows.add(JAN_1_F_20);
    rows.add(JAN_2_M_10);
    rows.add(JAN_3_F_20);
    rows.add(JAN_4_M_10);
    rows.add(JAN_4_F_20);
    rows.add(JAN_4_U_30);
    rows.add(JAN_6_M_10);
    rows.add(JAN_7_F_20);
    rows.add(JAN_8_U_30);

    Sequence<Row> seq = Sequences.simple(rows);
    RowBucketIterable rbi = new RowBucketIterable(seq, intervals, ONE_DAY);
    Iterator<RowBucket> iter = rbi.iterator();

    RowBucket actual = iter.next();
    Assert.assertEquals(expectedDay1, actual.getRows());

    actual = iter.next();
    Assert.assertEquals(expectedDay2, actual.getRows());

    actual = iter.next();
    Assert.assertEquals(expectedDay3, actual.getRows());

    actual = iter.next();
    Assert.assertEquals(expectedDay4, actual.getRows());

    actual = iter.next();
    Assert.assertEquals(expectedDay6, actual.getRows());

    actual = iter.next();
    Assert.assertEquals(expectedDay7, actual.getRows());

    actual = iter.next();
    Assert.assertEquals(expectedDay8, actual.getRows());
  }
",non-flaky,5
156062,jReddit_jReddit,RedditOAuthAgentTest.testTokenFromInfo,"    @Test
    public void testTokenFromInfo() {
        RedditToken token = subject.tokenFromInfo(accessToken, tokenType, expiresIn, scope);
        assertEquals(accessToken, token.getAccessToken());
        assertEquals(tokenType, token.getTokenType());
        assertEquals(expiresIn, token.getExpirationSpan());
        assertTrue(token.hasScope(RedditScope.EDIT));
        assertTrue(token.hasScope(RedditScope.FLAIR));
        assertFalse(token.hasScope(RedditScope.PRIVATEMESSAGE));
    }
",non-flaky,5
118755,netty_netty,ByteBufUtilTest.testWriteUtf8CompositeWrapped,"    @Test
    public void testWriteUtf8CompositeWrapped() {
        String utf8 = ""Some UTF-8 like Ã¤ÃâÅÅ"";
        ByteBuf buf = Unpooled.buffer(16);
        buf.writeBytes(utf8.getBytes(CharsetUtil.UTF_8));
        ByteBuf buf2 = new WrappedCompositeByteBuf(Unpooled.compositeBuffer().addComponent(
                Unpooled.buffer(8)).addComponent(Unpooled.buffer(24)));
        // write some byte so we start writing with an offset.
        buf2.writeByte(1);
        ByteBufUtil.writeUtf8(buf2, utf8);

        // Skip the previously written byte.
        assertEquals(buf, buf2.skipBytes(1));

        buf.release();
        buf2.release();
    }
",non-flaky,5
76948,Tencent_Firestorm,ShuffleReadClientImplTest.readTest9,"  @Test
  public void readTest9() {
    // empty data
    ShuffleReadClientImpl readClient = new ShuffleReadClientImpl(StorageType.HDFS.name(),
        ""appId"", 0, 1, 100, 2, 10, 1000,
        ""basePath"", Roaring64NavigableMap.bitmapOf(), Roaring64NavigableMap.bitmapOf(),
        Lists.newArrayList(), new Configuration());
    assertNull(readClient.readShuffleBlockData());
    readClient.checkProcessedBlockIds();
  }
",non-flaky,5
78259,apache_beam,StateInternalsTest.testBagWithBadCoderEquality,"  @Test
  public void testBagWithBadCoderEquality() throws Exception {
    // Ensure two instances of the bad coder are distinct; models user who fails to
    // override equals() or inherit from CustomCoder for StructuredCoder
    assertThat(
        new StringCoderWithIdentityEquality(), not(equalTo(new StringCoderWithIdentityEquality())));

    BagState<String> state1 = underTest.state(NAMESPACE_1, STRING_BAG_ADDR1);
    state1.add(""hello"");

    BagState<String> state2 = underTest.state(NAMESPACE_1, STRING_BAG_ADDR2);
    assertThat(state2.read(), containsInAnyOrder(""hello""));
  }
",non-flaky,5
135761,Netflix_Hystrix,HystrixPluginsTest.testDynamicSystemProperties,"    @Test
    public void testDynamicSystemProperties() throws Exception {
        //On the off chance this is the first test lets not screw up all the other tests
        HystrixPlugins.getInstance();
        
        System.setProperty(""hystrix.plugin.HystrixDynamicProperties.implementation"", 
                ""com.netflix.hystrix.strategy.properties.HystrixDynamicPropertiesSystemProperties"");
        
        HystrixPlugins plugins = setupMockServiceLoader();
        assertTrue(plugins.getDynamicProperties() instanceof HystrixDynamicPropertiesSystemProperties);
        
        HystrixDynamicProperties p = plugins.getDynamicProperties();
        //Some minimum testing of system properties wrapper
        //this probably should be in its own test class.
        assertTrue(p.getBoolean(""USE_DEFAULT"", true).get());
        assertEquals(""string"", p.getString(""USE_DEFAULT"", ""string"").get());
        assertEquals(1L, p.getLong(""USE_DEFAULT"", 1L).get().longValue());
        assertEquals(1, p.getInteger(""USE_DEFAULT"", 1).get().intValue());
        assertNotNull(p.getString(""path.separator"", null).get());
        
        assertEvents(""[debug: [Created HystrixDynamicProperties instance from System property named \""hystrix.plugin.HystrixDynamicProperties.implementation\"". Using class: {}, com.netflix.hystrix.strategy.properties.HystrixDynamicPropertiesSystemProperties]]"");

        System.clearProperty(""hystrix.plugin.HystrixDynamicProperties.implementation"");

    }
",non-flaky,5
77664,pholser_junit-quickcheck,OffsetTimePropertyParameterTypesTest.shouldHold,"    @Test public void rangedOffsetTime() {
        @Property public void shouldHold(
            @InRange(
",non-flaky,5
91377,OpenLCB_OpenLCB_Java,ThrottleFunctionDatagramTest.testCTor,"    @Test
    public void testCTor() {
        ThrottleFunctionDatagram t = new ThrottleFunctionDatagram(0,0);
        Assert.assertNotNull(""exists"",t);
    }
",non-flaky,5
175765,GoogleCloudPlatform_google-cloud-eclipse,FlexDeployPreferencesPanelTest.testGetHelpContextId,"  @Test
  public void testGetHelpContextId() {
    FlexDeployPreferencesPanel panel = createPanel(true /* requireValues */);

    assertEquals(
        ""com.google.cloud.tools.eclipse.appengine.deploy.ui.DeployAppEngineFlexProjectContext"",
        panel.getHelpContextId());
  }
",non-flaky,5
177196,line_armeria,BraveServiceTest.tearDown,"    @AfterEach
    public void tearDown() {
        Tracing.current().close();
    }
",non-flaky,5
335,apache_hadoop,TestOpenFileCtxCache.testEviction,"  @Test
  public void testEviction() throws IOException, InterruptedException {
    NfsConfiguration conf = new NfsConfiguration();

    // Only two entries will be in the cache
    conf.setInt(NfsConfigKeys.DFS_NFS_MAX_OPEN_FILES_KEY, 2);

    DFSClient dfsClient = Mockito.mock(DFSClient.class);
    Nfs3FileAttributes attr = new Nfs3FileAttributes();
    HdfsDataOutputStream fos = Mockito.mock(HdfsDataOutputStream.class);
    Mockito.when(fos.getPos()).thenReturn((long) 0);

    OpenFileCtx context1 = new OpenFileCtx(fos, attr, ""/dumpFilePath"",
        dfsClient, new ShellBasedIdMapping(new NfsConfiguration()));
    OpenFileCtx context2 = new OpenFileCtx(fos, attr, ""/dumpFilePath"",
        dfsClient, new ShellBasedIdMapping(new NfsConfiguration()));
    OpenFileCtx context3 = new OpenFileCtx(fos, attr, ""/dumpFilePath"",
        dfsClient, new ShellBasedIdMapping(new NfsConfiguration()));
    OpenFileCtx context4 = new OpenFileCtx(fos, attr, ""/dumpFilePath"",
        dfsClient, new ShellBasedIdMapping(new NfsConfiguration()));
    OpenFileCtx context5 = new OpenFileCtx(fos, attr, ""/dumpFilePath"",
        dfsClient, new ShellBasedIdMapping(new NfsConfiguration()));

    OpenFileCtxCache cache = new OpenFileCtxCache(conf, 10 * 60 * 100);

    boolean ret = cache.put(new FileHandle(1), context1);
    assertTrue(ret);
    Thread.sleep(1000);
    ret = cache.put(new FileHandle(2), context2);
    assertTrue(ret);
    ret = cache.put(new FileHandle(3), context3);
    assertFalse(ret);
    assertTrue(cache.size() == 2);

    // Wait for the oldest stream to be evict-able, insert again
    Thread.sleep(NfsConfigKeys.DFS_NFS_STREAM_TIMEOUT_MIN_DEFAULT);
    assertTrue(cache.size() == 2);

    ret = cache.put(new FileHandle(3), context3);
    assertTrue(ret);
    assertTrue(cache.size() == 2);
    assertTrue(cache.get(new FileHandle(1)) == null);

    // Test inactive entry is evicted immediately
    context3.setActiveStatusForTest(false);
    ret = cache.put(new FileHandle(4), context4);
    assertTrue(ret);

    // Now the cache has context2 and context4
    // Test eviction failure if all entries have pending work.
    context2.getPendingWritesForTest().put(new OffsetRange(0, 100),
        new WriteCtx(null, 0, 0, 0, null, null, null, 0, false, null));
    context4.getPendingCommitsForTest().put(new Long(100),
        new CommitCtx(0, null, 0, attr));
    Thread.sleep(NfsConfigKeys.DFS_NFS_STREAM_TIMEOUT_MIN_DEFAULT);
    ret = cache.put(new FileHandle(5), context5);
    assertFalse(ret);
  }
",non-flaky,5
98318,spotify_docker-client,DefaultDockerClientUnitTest.testCapAddAndDrop,"  @Test
  public void testCapAddAndDrop() throws Exception {
    final DefaultDockerClient dockerClient = new DefaultDockerClient(
        builder, clientBuilderSupplier);

    final HostConfig hostConfig = HostConfig.builder()
        .capAdd(ImmutableList.of(""foo"", ""bar""))
        .capAdd(ImmutableList.of(""baz"", ""qux""))
        .build();

    final ContainerConfig containerConfig = ContainerConfig.builder()
        .hostConfig(hostConfig)
        .build();

    //noinspection unchecked
    when(asyncInvoker.method(
        anyString(), any(Entity.class), any(Class.class)))
        .thenReturn(Futures.immediateFuture(ContainerCreation.builder().build()));

    dockerClient.createContainer(containerConfig);

    final ArgumentCaptor<String> methodArg = ArgumentCaptor.forClass(String.class);
    final ArgumentCaptor<Entity> entityArg = ArgumentCaptor.forClass(Entity.class);
    final ArgumentCaptor<Class> classArg = ArgumentCaptor.forClass(Class.class);

    //noinspection unchecked
    verify(asyncInvoker, times(1)).method(
        methodArg.capture(), entityArg.capture(), classArg.capture());

    final Entity expectedEntity = Entity.entity(
        containerConfig, new Variant(MediaType.valueOf(APPLICATION_JSON), (String) null, null));

    // Check that we've called the right method on the underlying AsyncInvoker with the right params
    assertThat(methodArg.getValue(), equalTo(""POST""));
    assertThat(entityArg.getValue(), equalTo(expectedEntity));
    assertThat(classArg.getValue(), instanceOf(Class.class));
  }
",non-flaky,5
112672,hwang-pku_ormlite-core,VersionUtilsTest.testCheckCoreVersusJdbcVersionsBad,"	@Test(expected = IllegalStateException.class)
	public void testCheckCoreVersusJdbcVersionsBad() {
		VersionUtils.setThrownOnErrors(true);
		VersionUtils.checkCoreVersusJdbcVersions(""xxx"");
	}
",non-flaky,5
98672,nutzam_nutz,UploadingUnitTest.test_limit_file_name_fail,"    @Test(expected = UploadUnsupportedFileNameException.class)
    public void test_limit_file_name_fail() throws UploadException {
        MockHttpServletRequest req = Mock.servlet.request();
        req.setPathInfo(""/nutz/junit/uploading"");
        File blue = Files.findFile(""org/nutz/mvc/upload/files/quick/blue.png"");

        MultipartInputStream ins = Mock.servlet.insmulti(charset);
        ins.append(""blue"", blue);
        req.setInputStream(ins);
        req.init();

        /*
         * æä»¶è¶å¤§ï¼ä¼éå¶
         */
        Uploading up = UploadUnit.TYPE.born();
        up.parse(req,
                 UploadingContext.create(tmps)
                                 .setNameFilter(""^(.+[.])(gif|jpg)$""));
    }
",non-flaky,5
175788,GoogleCloudPlatform_google-cloud-eclipse,AppEngineApplicationQueryJobTest.testRun_projectHasApplication,"  @Test
  public void testRun_projectHasApplication()
      throws ProjectRepositoryException, InterruptedException {
    AppEngine appEngine = AppEngine.withId(""unique-id"");
    when(projectRepository.getAppEngineApplication(credential, ""projectId"")).thenReturn(appEngine);

    queryJob.schedule();
    queryJob.join();

    verify(isLatestQueryJob, never()).apply(queryJob);
    verify(projectSelector, never()).isDisposed();
    verify(projectSelector, never()).setStatusLink(anyString(), anyString());

    assertTrue(appEngine == project.getAppEngine());
  }
",non-flaky,5
137155,spring-projects_spring-framework,AnnotationUtilsTests.annotatedOnRoot,"	@Test  // gh-23929
		public void annotatedOnRoot() {
		}
",non-flaky,5
176792,ctco_cukes,ContextInflaterTest.testInflateGroups_multipleExist,"    @Test
    public void testInflateGroups_multipleExist() throws Exception {
        doReturn(Optional.of(""foo"")).when(world).get(""foo"");
        doReturn(Optional.of(""bar"")).when(world).get(""bar"");
        String value = inflater.inflateGroups(""{(foo)} {(bar)}"", Sets.newHashSet(""foo"", ""bar""));
        assertThat(value, equalTo(""foo bar""));
    }
",non-flaky,5
162417,testcontainers_testcontainers-java,DockerfileTest.simpleDockerfileWorks,"    @Test
    public void simpleDockerfileWorks() {
        ImageFromDockerfile image = new ImageFromDockerfile()
                .withFileFromString(""folder/someFile.txt"", ""hello"")
                .withFileFromClasspath(""test.txt"", ""mappable-resource/test-resource.txt"")
                .withFileFromClasspath(""Dockerfile"", ""mappable-dockerfile/Dockerfile"");

        verifyImage(image);
    }
",non-flaky,5
118711,netty_netty,SmtpResponseDecoderTest.testDecodeInvalidLine,"    @Test(expected = DecoderException.class)
    public void testDecodeInvalidLine() {
        EmbeddedChannel channel = newChannel();
        assertTrue(channel.writeInbound(newBuffer(""Ok\r\n"")));
    }
",non-flaky,5
26827,wildfly_wildfly,JndiPermissionTestCase.testNameImplies,"    @Test
    public void testNameImplies() {
        // check the compat <<ALL BINDINGS>> name
        assertEquals(new JndiPermission(""<<ALL BINDINGS>>"", ""*""), new JndiPermission(""-"", ""*""));

        // check the root - name
        assertTrue(new JndiPermission(""-"", ""*"").implies(new JndiPermission(""-"", ""*"")));
        assertTrue(new JndiPermission(""-"", ""*"").implies(new JndiPermission("""", ""*"")));
        assertTrue(new JndiPermission(""-"", ""*"").implies(new JndiPermission(""foo"", ""*"")));
        assertTrue(new JndiPermission(""-"", ""*"").implies(new JndiPermission(""/foo"", ""*"")));
        assertTrue(new JndiPermission(""-"", ""*"").implies(new JndiPermission(""foo/"", ""*"")));
        assertTrue(new JndiPermission(""-"", ""*"").implies(new JndiPermission(""foo/bar/baz/zap"", ""*"")));
        assertTrue(new JndiPermission(""-"", ""*"").implies(new JndiPermission(""java:foo"", ""*"")));

        // check the non-root - name
        assertTrue(new JndiPermission(""/-"", ""*"").implies(new JndiPermission(""/-"", ""*"")));
        assertTrue(new JndiPermission(""/-"", ""*"").implies(new JndiPermission(""/"", ""*"")));
        assertTrue(new JndiPermission(""/-"", ""*"").implies(new JndiPermission(""//"", ""*"")));
        assertTrue(new JndiPermission(""/-"", ""*"").implies(new JndiPermission(""////"", ""*"")));
        assertTrue(new JndiPermission(""/-"", ""*"").implies(new JndiPermission(""/foo"", ""*"")));
        assertTrue(new JndiPermission(""/-"", ""*"").implies(new JndiPermission(""/foo"", ""*"")));
        assertTrue(new JndiPermission(""/-"", ""*"").implies(new JndiPermission(""/foo/"", ""*"")));
        assertTrue(new JndiPermission(""/-"", ""*"").implies(new JndiPermission(""/foo/bar/baz/zap"", ""*"")));
        assertTrue(new JndiPermission(""/-"", ""*"").implies(new JndiPermission(""java:/foo"", ""*"")));

        assertTrue(new JndiPermission(""foo/-"", ""*"").implies(new JndiPermission(""foo/-"", ""*"")));
        assertTrue(new JndiPermission(""foo/-"", ""*"").implies(new JndiPermission(""foo/foo"", ""*"")));
        assertTrue(new JndiPermission(""foo/-"", ""*"").implies(new JndiPermission(""foo/foo"", ""*"")));
        assertTrue(new JndiPermission(""foo/-"", ""*"").implies(new JndiPermission(""foo/foo/"", ""*"")));
        assertTrue(new JndiPermission(""foo/-"", ""*"").implies(new JndiPermission(""foo/foo/bar/baz/zap"", ""*"")));
        assertTrue(new JndiPermission(""foo/-"", ""*"").implies(new JndiPermission(""java:foo/foo"", ""*"")));

        // check the * name
        assertTrue(new JndiPermission(""*"", ""*"").implies(new JndiPermission("""", ""*"")));
        assertTrue(new JndiPermission(""*"", ""*"").implies(new JndiPermission(""foo"", ""*"")));
        assertFalse(new JndiPermission(""*"", ""*"").implies(new JndiPermission(""foo/bar"", ""*"")));
        assertFalse(new JndiPermission(""*"", ""*"").implies(new JndiPermission(""foo/"", ""*"")));
        assertFalse(new JndiPermission(""*"", ""*"").implies(new JndiPermission(""/foo"", ""*"")));
        assertTrue(new JndiPermission(""*/*"", ""*"").implies(new JndiPermission(""/foo"", ""*"")));
        assertTrue(new JndiPermission(""/*"", ""*"").implies(new JndiPermission(""/foo"", ""*"")));
        assertTrue(new JndiPermission(""*/foo"", ""*"").implies(new JndiPermission(""/foo"", ""*"")));

        // check java: support
        assertEquals(new JndiPermission(""java:"", ""*""), new JndiPermission("""", ""*""));
        assertEquals(new JndiPermission(""java:/"", ""*""), new JndiPermission(""/"", ""*""));
        assertEquals(new JndiPermission(""java:-"", ""*""), new JndiPermission(""-"", ""*""));
        assertEquals(new JndiPermission(""java:*"", ""*""), new JndiPermission(""*"", ""*""));
    }
",non-flaky,5
86085,graylog2_graylog2-server,EventDefinitionHandlerTest.updateWithSchedulingReEnabled,"    @Test
    public void updateWithSchedulingReEnabled() {
        final String newTitle = ""A NEW TITLE "" + DateTime.now(DateTimeZone.UTC).toString();
        final String newDescription = ""A NEW DESCRIPTION "" + DateTime.now(DateTimeZone.UTC).toString();

        final EventDefinitionDto existingDto = eventDefinitionService.get(""54e3deadbeefdeadbeef0000"").orElse(null);
        final TestEventProcessorConfig existingConfig = (TestEventProcessorConfig) existingDto.config();
        final TestEventProcessorConfig newConfig = existingConfig.toBuilder()
                .executeEveryMs(550000)
                .searchWithinMs(800000)
                .build();

        assertThat(existingDto).isNotNull();

        final EventDefinitionDto updatedDto = existingDto.toBuilder()
                .title(newTitle)
                .description(newDescription)
                .config(newConfig)
                .build();

        assertThat(handler.update(updatedDto, true)).isNotEqualTo(existingDto);

        assertThat(eventDefinitionService.get(existingDto.id())).isPresent().get().satisfies(dto -> {
            assertThat(dto.id()).isEqualTo(existingDto.id());
            assertThat(dto.title()).isEqualTo(newTitle);
            assertThat(dto.description()).isEqualTo(newDescription);
        });

        final JobDefinitionDto newJobDefinition = jobDefinitionService.getByConfigField(""event_definition_id"", existingDto.id())
                .orElseThrow(AssertionError::new);
        assertThat(newJobDefinition.title()).isEqualTo(newTitle);
        assertThat(newJobDefinition.description()).isEqualTo(newDescription);
        assertThat(((EventProcessorExecutionJob.Config) newJobDefinition.config()).processingHopSize()).isEqualTo(550000);

        assertThat(jobTriggerService.getForJob(newJobDefinition.id()).get(0)).satisfies(trigger -> {
            final IntervalJobSchedule schedule = (IntervalJobSchedule) trigger.schedule();
            assertThat(schedule.interval()).isEqualTo(550000);
        });
    }
",non-flaky,5
33886,apache_camel,FhirMetaIT.testGetFromServer,"    @Test
    public void testGetFromServer() throws Exception {
        // using Class message body for single parameter ""metaType""
        IBaseMetaType result = requestBody(""direct://GET_FROM_SERVER"", Meta.class);
        assertNotNull(result, ""getFromServer result"");
        LOG.debug(""getFromServer: "" + result);
    }
",non-flaky,5
98328,spotify_docker-client,DockerHostTest.testFromTcpSocketNoCert,"  @Test
  public void testFromTcpSocketNoCert() throws Exception {
    final String tcpSocket = ""tcp://127.0.0.1:2375"";
    final DockerHost dockerHost = DockerHost.from(tcpSocket, null);

    assertThat(dockerHost.host(), equalTo(""127.0.0.1:2375""));
    assertThat(dockerHost.uri(), equalTo(new URI(""http://127.0.0.1:2375"")));
    assertThat(dockerHost.bindUri(), equalTo(new URI(tcpSocket)));
    assertThat(dockerHost.port(), equalTo(2375));
    assertThat(dockerHost.address(), equalTo(""127.0.0.1""));
    assertThat(dockerHost.dockerCertPath(), nullValue());
  }
",non-flaky,5
162749,OpenAPITools_openapi-generator,NameTest._123numberTest,"    @Test
    public void _123numberTest() {
        // TODO: test _123number
    }
",non-flaky,5
76758,quarkusio_quarkus,CreateProjectMojoIT.testProjectGenerationFromScratchWithAppConfigParameter,"    @Test
    public void testProjectGenerationFromScratchWithAppConfigParameter() throws MavenInvocationException, IOException {
        testDir = initEmptyProject(""projects/project-generation-with-config-param"");
        assertThat(testDir).isDirectory();
        invoker = initInvoker(testDir);

        Properties properties = new Properties();
        properties.put(""projectGroupId"", ""org.acme"");
        properties.put(""projectArtifactId"", ""acme"");
        properties.put(""projectVersion"", ""1.0.0-SNAPSHOT"");

        List<String> configs = Arrays.asList(""custom.app.config1=val1"",
                ""custom.app.config2=val2"", ""lib.config=val3"");
        properties.put(""appConfig"", StringUtils.join(configs, "", ""));

        InvocationResult result = setup(properties);

        assertThat(result.getExitCode()).isZero();

        // As the directory is not empty (log) navigate to the artifactID directory
        testDir = new File(testDir, ""acme"");

        assertThat(new File(testDir, ""pom.xml"")).isFile();
        assertThat(new File(testDir, ""src/main/java"")).isDirectory();

        String file = Files
                .asCharSource(new File(testDir, ""src/main/resources/application.properties""), Charsets.UTF_8)
                .read();
        configs.forEach(conf -> Assertions.assertTrue(file.contains(conf)));

    }
",non-flaky,5
366,apache_hadoop,TestPermissionSymlinks.testRenameLinkTargetNotWritableFC,"  @Test(timeout = 5000)
  public void testRenameLinkTargetNotWritableFC() throws Exception {
    fs.setPermission(target, new FsPermission((short) 0555));
    fs.setPermission(targetParent, new FsPermission((short) 0555));
    doRenameLinkTargetNotWritableFC();
  }
",non-flaky,5
365,apache_hadoop,TestPermissionSymlinks.testAclGetFileLinkStatusTargetNotReadable,"  @Test
  public void testAclGetFileLinkStatusTargetNotReadable() throws Exception {
    fs.setAcl(target, Arrays.asList(
      aclEntry(ACCESS, USER, READ_WRITE),
      aclEntry(ACCESS, USER, user.getUserName(), NONE),
      aclEntry(ACCESS, GROUP, READ),
      aclEntry(ACCESS, OTHER, READ)));
    doGetFileLinkStatusTargetNotReadable();
  }
",non-flaky,5
77631,pholser_junit-quickcheck,PeriodPropertyParameterTypesTest.shouldHold,"    @Test public void period() {
        @Property public void shouldHold(Period p) {
        }
",non-flaky,5
77658,pholser_junit-quickcheck,InstantPropertyParameterTypesTest.shouldHold,"    @Test public void malformedMin() {
        @Property public void shouldHold(
            @InRange(min = ""@#!@#@"", max = ""2012-12-31T23:59:59.999999999Z"") Instant i) {
        }
",non-flaky,5
30935,camunda-cloud_zeebe,ElasticsearchExporterTest.shouldNotFailOnOpenIfElasticIsUnreachable,"  @Test
  public void shouldNotFailOnOpenIfElasticIsUnreachable() {
    // given
    final ElasticsearchClient client =
        Mockito.spy(new ElasticsearchClient(config, LoggerFactory.getLogger(""test"")));
    final ElasticsearchExporter exporter = createExporter(client);
    config.index.createTemplate = true;

    // when - then : only fails when trying to export, not before
    openExporter(exporter);
    assertThatThrownBy(testHarness::export).isInstanceOf(ElasticsearchExporterException.class);
  }
",non-flaky,5
97975,ReactiveX_RxJava,ObservableTests.testSequenceEqual,"    @Test
    public void testSequenceEqual() {
        Observable<Integer> first = Observable.from(1, 2, 3);
        Observable<Integer> second = Observable.from(1, 2, 4);
        @SuppressWarnings(""unchecked"")
        Observer<Boolean> result = mock(Observer.class);
        Observable.sequenceEqual(first, second).subscribe(result);
        verify(result, times(2)).onNext(true);
        verify(result, times(1)).onNext(false);
    }
",non-flaky,5
106654,Alluxio_alluxio,AlluxioFuseFileSystemTest.readOffset,"  @Test
  public void readOffset() throws Exception {
    // mocks set-up
    AlluxioURI expectedPath = BASE_EXPECTED_URI.join(""/foo/bar"");
    setUpOpenMock(expectedPath);

    FileInStream fakeInStream = mock(FileInStream.class);
    when(fakeInStream.read(any(byte[].class),
        anyInt(), anyInt())).then((Answer<Integer>) invocationOnMock -> {
          byte[] myDest = (byte[]) invocationOnMock.getArguments()[0];
          for (byte i = 0; i < (int) invocationOnMock.getArgument(2); i++) {
            myDest[i] = (byte) (i + 1);
          }
          return myDest.length;
        });
    AtomicInteger callCounter = new AtomicInteger();
    when(fakeInStream.remaining()).then((Answer<Long>) invocationOnMock -> {
      if (callCounter.getAndIncrement() == 0) {
        return 4L;
      } else {
        return 3L;
      }
    });

    when(mFileSystem.openFile(expectedPath)).thenReturn(fakeInStream);
    mFileInfo.flags.set(O_RDONLY.intValue());

    // prepare something to read to it
    Runtime r = Runtime.getSystemRuntime();
    Pointer ptr = r.getMemoryManager().allocateTemporary(2, true);

    // actual test
    mFuseFs.open(""/foo/bar"", mFileInfo);

    mFuseFs.read(""/foo/bar"", ptr, 2, 1, mFileInfo);
    final byte[] dst = new byte[2];
    ptr.get(0, dst, 0, 2);
    final byte[] expected = new byte[] {1, 2};

    assertArrayEquals(""Source and dst data should be equal"", expected, dst);
  }
",non-flaky,5
26758,MundaneImmortal_pair-distribution-app,DevPairsCombinationsTest.testIsRotationTimeForTwoDayPair,"	@Test
	public void testIsRotationTimeForTwoDayPair() {
		List<Developer> standardDevs = getStandardDevs();
		DevPairCombinations devPairCombinations = new DevPairCombinations(getPairsListFromDevs(standardDevs));
		
		
		assertThat(devPairCombinations.isRotationTime(Arrays.asList(""track1"", ""track2""), standardDevs, false), is(true));
	}
",non-flaky,5
156458,apache_commons-lang,DateUtilsFragmentTest.testMillisecondsOfDayWithCalendar,"    @Test
    public void testMillisecondsOfDayWithCalendar() {
        long testresult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.DATE);
        final long expectedValue = millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR);
        assertEquals(expectedValue, testresult);
        testresult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.DAY_OF_YEAR);
        assertEquals(expectedValue, testresult);
    }
",non-flaky,5
70827,apache_kafka,PluginDescTest.testPluginDescEquality,"    @Test
    public void testPluginDescEquality() {
        PluginDesc<Connector> connectorDescPluginPath = new PluginDesc<>(
                Connector.class,
                snaphotVersion,
                pluginLoader
        );

        PluginDesc<Connector> connectorDescClasspath = new PluginDesc<>(
                Connector.class,
                snaphotVersion,
                systemLoader
        );

        assertEquals(connectorDescPluginPath, connectorDescClasspath);
        assertEquals(connectorDescPluginPath.hashCode(), connectorDescClasspath.hashCode());

        PluginDesc<Converter> converterDescPluginPath = new PluginDesc<>(
                Converter.class,
                noVersion,
                pluginLoader
        );

        PluginDesc<Converter> converterDescClasspath = new PluginDesc<>(
                Converter.class,
                noVersion,
                systemLoader
        );

        assertEquals(converterDescPluginPath, converterDescClasspath);
        assertEquals(converterDescPluginPath.hashCode(), converterDescClasspath.hashCode());

        PluginDesc<Transformation> transformDescPluginPath = new PluginDesc<>(
                Transformation.class,
                null,
                pluginLoader
        );

        PluginDesc<Transformation> transformDescClasspath = new PluginDesc<>(
                Transformation.class,
                noVersion,
                pluginLoader
        );

        assertNotEquals(transformDescPluginPath, transformDescClasspath);
    }
",non-flaky,5
95688,togglz_togglz,ArchaiusStateRepositoryTest.shouldReadFalseStateWithoutStrategyAndParameters,"    @Test
    public void shouldReadFalseStateWithoutStrategyAndParameters() {

        addState(TestFeature.F1.name(), false);

        FeatureState state = repository.getFeatureState(TestFeature.F1);

        assertNotNull(state);
        assertEquals(TestFeature.F1, state.getFeature());
        assertEquals(false, state.isEnabled());
        assertEquals(null, state.getStrategyId());
        assertEquals(0, state.getParameterNames().size());
    }
",non-flaky,5
86073,graylog2_graylog2-server,AggregationEventProcessorTest.testEventsFromAggregationResultWithEmptyResultAndNoConfiguredStreamsUsesAllStreamsAsSourceStreams,"    @Test
    public void testEventsFromAggregationResultWithEmptyResultAndNoConfiguredStreamsUsesAllStreamsAsSourceStreams() {
        final DateTime now = DateTime.now(DateTimeZone.UTC);
        final AbsoluteRange timerange = AbsoluteRange.create(now.minusHours(1), now.plusHours(1));

        // We expect to get the end of the aggregation timerange as event time
        final TestEvent event1 = new TestEvent(timerange.to());
        final TestEvent event2 = new TestEvent(timerange.to());
        when(eventFactory.createEvent(any(EventDefinition.class), eq(now), anyString()))
                .thenReturn(event1)  // first invocation return value
                .thenReturn(event2); // second invocation return value

        when(streamService.loadAll()).thenReturn(ImmutableList.of(
                new StreamMock(Collections.singletonMap(""_id"", ""stream-1""), Collections.emptyList()),
                new StreamMock(Collections.singletonMap(""_id"", ""stream-2""), Collections.emptyList()),
                new StreamMock(Collections.singletonMap(""_id"", ""stream-3""), Collections.emptyList()),
                new StreamMock(Collections.singletonMap(""_id"", StreamImpl.DEFAULT_STREAM_ID), Collections.emptyList()),
                new StreamMock(Collections.singletonMap(""_id"", StreamImpl.DEFAULT_EVENTS_STREAM_ID), Collections.emptyList()),
                new StreamMock(Collections.singletonMap(""_id"", StreamImpl.DEFAULT_SYSTEM_EVENTS_STREAM_ID), Collections.emptyList())
        ));

        final EventDefinitionDto eventDefinitionDto = EventDefinitionDto.builder()
                .id(""dto-id-1"")
                .title(""Test Aggregation"")
                .description(""A test aggregation event processors"")
                .priority(1)
                .alert(false)
                .notificationSettings(EventNotificationSettings.withGracePeriod(60000))
                .config(AggregationEventProcessorConfig.builder()
                        .query("""")
                        .streams(ImmutableSet.of()) // No configured streams!
                        .groupBy(ImmutableList.of(""group_field_one"", ""group_field_two""))
                        .series(ImmutableList.of())
                        .conditions(null)
                        .searchWithinMs(30000)
                        .executeEveryMs(30000)
                        .build())
                .keySpec(ImmutableList.of())
                .build();
        final AggregationEventProcessorParameters parameters = AggregationEventProcessorParameters.builder()
                .timerange(timerange)
                .build();

        final AggregationEventProcessor eventProcessor = new AggregationEventProcessor(eventDefinitionDto, searchFactory, eventProcessorDependencyCheck, stateService, moreSearch, streamService, messages);

        final AggregationResult result = AggregationResult.builder()
                .effectiveTimerange(timerange)
                .totalAggregatedMessages(0)
                .sourceStreams(ImmutableSet.of()) // No streams in result
                .keyResults(ImmutableList.of(
                        AggregationKeyResult.builder()
                                .key(ImmutableList.of(""one"", ""two""))
                                .timestamp(now)
                                .seriesValues(ImmutableList.of(
                                        AggregationSeriesValue.builder()
                                                .key(ImmutableList.of(""a""))
                                                .value(0.0d)
                                                .series(AggregationSeries.builder()
                                                        .id(""abc123"")
                                                        .function(AggregationFunction.COUNT)
                                                        .build())
                                                .build()
                                ))
                                .build()
                ))
                .build();

        final ImmutableList<EventWithContext> eventsWithContext = eventProcessor.eventsFromAggregationResult(eventFactory, parameters, result);

        assertThat(eventsWithContext).hasSize(1);

        assertThat(eventsWithContext.get(0)).satisfies(eventWithContext -> {
            final Event event = eventWithContext.event();

            assertThat(event.getId()).isEqualTo(event1.getId());
            assertThat(event.getMessage()).isEqualTo(event1.getMessage());
            assertThat(event.getEventTimestamp()).isEqualTo(timerange.to());
            assertThat(event.getTimerangeStart()).isEqualTo(timerange.from());
            assertThat(event.getTimerangeEnd()).isEqualTo(timerange.to());
            // Must contain all existing streams but the default event streams!
            assertThat(event.getSourceStreams()).containsOnly(
                    ""stream-1"",
                    ""stream-2"",
                    ""stream-3"",
                    StreamImpl.DEFAULT_STREAM_ID
            );

            final Message message = eventWithContext.messageContext().orElse(null);

            assertThat(message).isNotNull();
            assertThat(message.getField(""group_field_one"")).isEqualTo(""one"");
            assertThat(message.getField(""group_field_two"")).isEqualTo(""two"");
            assertThat(message.getField(""aggregation_key"")).isEqualTo(""one|two"");
            assertThat(message.getField(""aggregation_value_count"")).isEqualTo(0.0d);
        });
    }
",non-flaky,5
113707,salesforce_reactive-grpc,ServerErrorIntegrationTest.oneToOne,"    @Test
    public void oneToOne() {
        ReactorGreeterGrpc.ReactorGreeterStub stub = ReactorGreeterGrpc.newReactorStub(channel);
        Mono<HelloResponse> resp = Mono.just(HelloRequest.getDefaultInstance()).compose(stub::sayHello);

        StepVerifier.create(resp)
                .verifyErrorMatches(t -> t instanceof StatusRuntimeException && ((StatusRuntimeException)t).getStatus() == Status.INTERNAL);
    }
",non-flaky,5
106580,Alluxio_alluxio,HdfsVersionValidationTaskTest.cdhVersionParsing,"  @Test
  public void cdhVersionParsing() {
    String versionStr = ""Hadoop 2.6.0-cdh5.16.2\n""
            + ""Subversion http://github.com/cloudera/hadoop -r ""
            + ""4f94d60caa4cbb9af0709a2fd96dc3861af9cf20\n""
            + ""Compiled by jenkins on 2019-06-03T10:41Z\n""
            + ""Compiled with protoc 2.5.0\n""
            + ""From source with checksum 79b9b24a29c6358b53597c3b49575e37\n""
            + ""This command was run using /usr/lib/hadoop/hadoop-common-2.6.0-cdh5.16.2.jar"";

    HdfsVersionValidationTask task = new HdfsVersionValidationTask(sConf);
    String version = task.parseVersion(versionStr);
    assertEquals(""cdh5.16.2"", version);
  }
",non-flaky,5
178000,aosp-mirror_platform_frameworks_support,VideoFragmentTest.run,"    @Test
    public void setSurfaceViewCallbackBeforeCreate() {
        Intent intent = new Intent();
        mActivity = activityTestRule.launchActivity(intent);

        InstrumentationRegistry.getInstrumentation().runOnMainSync(new Runnable() {
            @Override
            public void run() {
                mActivity.replaceVideoFragment();
            }
",non-flaky,5
177971,aosp-mirror_platform_frameworks_support,ColorUtilsTest.testColorToXYZ,"    @Test
    public void testColorToXYZ() {
        for (TestEntry entry : sEntryList) {
            verifyColorToXYZ(entry.rgb, entry.xyz);
        }
    }
",non-flaky,5
20990,NationalSecurityAgency_timely,MessageFormatTest.testNumberFormat,"    @Test
    public void testNumberFormat() {
        String m = ""sys.cpu.user"";
        long time = System.currentTimeMillis();
        double value = ThreadLocalRandom.current().nextDouble(0.0D, 100.0D);
        String put = MessageFormat.format(FMT, m, time, value, ""host=localhost"", ""rack=r1"");
        NumberFormat formattedDouble = DecimalFormat.getInstance();
        formattedDouble.setMaximumFractionDigits(3);
        String newValue = formattedDouble.format(value);
        Assert.assertEquals(""put sys.cpu.user "" + time + "" "" + newValue + "" host=localhost rack=r1"", put);
    }
",non-flaky,5
99760,apache_cassandra,AsyncStreamingInputPlusTest.rebufferTimeout,"    @Test
    public void rebufferTimeout() throws IOException
    {
        long timeoutMillis = 1000;
        inputPlus = new AsyncStreamingInputPlus(channel, timeoutMillis, TimeUnit.MILLISECONDS);

        long startNanos = System.nanoTime();
        try
        {
            inputPlus.readInt();
            Assert.fail(""should not have been able to read from the queue"");
        }
        catch (InputTimeoutException e)
        {
            // this is the success case, and is expected. any other exception is a failure.
        }

        long durationNanos = System.nanoTime() - startNanos;
        Assert.assertTrue(TimeUnit.MILLISECONDS.toNanos(timeoutMillis) <= durationNanos);
    }
",non-flaky,5
91434,strapdata_elassandra,TimeThrottleIntegrationTests.testTimeThrottle,"@TestLogging(""org.elasticsearch.xpack.watcher:DEBUG,"" +
    public void testTimeThrottle(){
        String id = randomAlphaOfLength(20);
        PutWatchResponse putWatchResponse = watcherClient().preparePutWatch()
                .setId(id)
                .setSource(watchBuilder()
                        .trigger(schedule(interval(""5s"")))
                        .input(simpleInput())
                        .addAction(""my-logging-action"", loggingAction(""foo""))
                        .defaultThrottlePeriod(TimeValue.timeValueSeconds(30)))
                .get();
        assertThat(putWatchResponse.isCreated(), is(true));

        timeWarp().trigger(id);
        assertHistoryEntryExecuted(id);

        timeWarp().clock().fastForward(TimeValue.timeValueMillis(4000));
        timeWarp().trigger(id);
        assertHistoryEntryThrottled(id);

        timeWarp().clock().fastForwardSeconds(30);
        timeWarp().trigger(id);
        assertHistoryEntryExecuted(id);

        assertTotalHistoryEntries(id, 3);
    }
",non-flaky,5
98616,nutzam_nutz,El2Test.test_issue314,"    @Test
    public void test_issue314() {
        Context context = Lang.context();
        
        context.set(""String"", String.class);
        
        Issue314 i314 = new Issue314();
        List<String> list = new ArrayList<String>();
        list.add(""123"");
        i314.setList(list);
        context.set(""map"", i314);
        
        assertEquals(""123"", El.eval(context, ""String.valueOf(123)""));
        assertEquals(""123"", El.eval(context, ""map.list.get(0)""));
    }
",non-flaky,5
30928,camunda-cloud_zeebe,MsgPackWritingExceptionTest.shouldNotReadNegativeSize,"  @Test
  public void shouldNotReadNegativeSize() throws Exception {
    // given
    final MsgPackWriter writer = new MsgPackWriter();
    writer.wrap(actualValueBuffer, WRITE_OFFSET);

    // then
    exception.expect(MsgpackWriterException.class);
    exception.expectMessage(expectedExceptionMessage);

    // when
    codeUnderTest.accept(writer);
  }
",non-flaky,5
77452,opensearch-project_OpenSearch,NastyInnerClasses.annotatedTestMethod,"        @Test
        public void annotatedTestMethod() {

        }
",non-flaky,5
97673,vojtechhabarta_typescript-generator,SpringTest.testInheritance,"    @Test
    public void testInheritance() {
        final Settings settings = TestUtils.settings();
        settings.outputFileType = TypeScriptFileType.implementationFile;
        settings.generateSpringApplicationClient = true;
        final String output = new TypeScriptGenerator(settings).generateTypeScript(Input.from(Controller6.class));
        Assert.assertTrue(output.contains(""doSomethingElse(id: number): RestResponse<number>""));
        Assert.assertTrue(output.contains(""doSomethingElseAgain(): RestResponse<number>""));
        Assert.assertTrue(output.contains(""uriEncoding`test/c`""));
        Assert.assertFalse(output.contains(""uriEncoding`test/b`""));
    }
",non-flaky,5
30944,camunda-cloud_zeebe,ElasticsearchExporterTest.shouldUpdatePositionAfterDelay,"  @Test
  public void shouldUpdatePositionAfterDelay() {
    // given
    config.index.event = true;
    createAndOpenExporter();

    // when
    final List<Record> exported =
        testHarness.stream(
                r ->
                    r.getMetadata()
                        .setValueType(ValueType.PROCESS_INSTANCE)
                        .setRecordType(RecordType.EVENT))
            .export(4);
    testHarness.getController().runScheduledTasks(Duration.ofSeconds(config.bulk.delay));

    // then record was indexed and the exporter record position was updated
    verify(esClient, times(4)).index(any());
    assertThat(testHarness.getController().getPosition()).isEqualTo(exported.get(3).getPosition());
  }
",non-flaky,5
135712,Netflix_Hystrix,HystrixSubclassCommandTest.testRequestCacheSuperClass,"    @Test
    public void testRequestCacheSuperClass() {
        HystrixCommand<Integer> superCmd1 = new SuperCommand(""cache"", true);
        assertEquals(1, superCmd1.execute().intValue());
        HystrixCommand<Integer> superCmd2 = new SuperCommand(""cache"", true);
        assertEquals(1, superCmd2.execute().intValue());
        HystrixCommand<Integer> superCmd3 = new SuperCommand(""no-cache"", true);
        assertEquals(1, superCmd3.execute().intValue());
        System.out.println(""REQ LOG : "" + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());
        HystrixRequestLog reqLog = HystrixRequestLog.getCurrentRequest();
        assertEquals(3, reqLog.getAllExecutedCommands().size());
        List<HystrixInvokableInfo<?>> infos = new ArrayList<HystrixInvokableInfo<?>>(reqLog.getAllExecutedCommands());
        HystrixInvokableInfo<?> info1 = infos.get(0);
        assertEquals(""SuperCommand"", info1.getCommandKey().name());
        assertEquals(1, info1.getExecutionEvents().size());
        HystrixInvokableInfo<?> info2 = infos.get(1);
        assertEquals(""SuperCommand"", info2.getCommandKey().name());
        assertEquals(2, info2.getExecutionEvents().size());
        assertEquals(HystrixEventType.RESPONSE_FROM_CACHE, info2.getExecutionEvents().get(1));
        HystrixInvokableInfo<?> info3 = infos.get(2);
        assertEquals(""SuperCommand"", info3.getCommandKey().name());
        assertEquals(1, info3.getExecutionEvents().size());
    }
",non-flaky,5
94772,ktuukkan_marine-api,AISMessage24ParserTest.getCallSign,"    @Test
    public void getCallSign() throws Exception {
        assertEquals(""CALLSIG"", partB.getCallSign());
    }
",non-flaky,5
43119,trinodb_trino,BaseConnectorSmokeTest.testInsert,"    @Test
    public void testInsert()
    {
        if (!hasBehavior(SUPPORTS_INSERT)) {
            assertQueryFails(""INSERT INTO region (regionkey) VALUES (42)"", ""This connector does not support inserts"");
            return;
        }

        if (!hasBehavior(SUPPORTS_CREATE_TABLE)) {
            throw new AssertionError(""Cannot test INSERT without CREATE TABLE, the test needs to be implemented in a connector-specific way"");
        }

        try (TestTable table = new TestTable(getQueryRunner()::execute, ""test_insert_"", ""(a bigint, b double)"")) {
            assertUpdate(""INSERT INTO "" + table.getName() + "" (a, b) VALUES (42, -38.5)"", 1);
            assertThat(query(""SELECT CAST(a AS bigint), b FROM "" + table.getName()))
                    .matches(""VALUES (BIGINT '42', -385e-1)"");
        }
    }
",non-flaky,5
91400,OpenLCB_OpenLCB_Java,GridConnectOutputTest.run,"    @Test
    public void testCTor() {
        GridConnectOutput t = new GridConnectOutput(new java.io.ByteArrayOutputStream(), new Runnable(){
    public void run(){
    }
",non-flaky,5
89343,apache_samza,TestKafkaSystemAdminJava.testStartpointUpcomingVisitorShouldResolveToCorrectOffset,"  @Test
  public void testStartpointUpcomingVisitorShouldResolveToCorrectOffset() {
    // Define dummy variables for testing.
    final KafkaConsumer consumer = Mockito.mock(KafkaConsumer.class);

    final KafkaStartpointToOffsetResolver kafkaStartpointToOffsetResolver = new KafkaStartpointToOffsetResolver(consumer);

    final StartpointUpcoming testStartpointSpecific = new StartpointUpcoming();

    // Mock the consumer interactions.
    Mockito.when(consumer.endOffsets(ImmutableSet.of(TEST_TOPIC_PARTITION))).thenReturn(ImmutableMap.of(TEST_TOPIC_PARTITION, 10L));

    // Invoke the consumer with startpoint.
    String resolvedOffset = kafkaStartpointToOffsetResolver.visit(TEST_SYSTEM_STREAM_PARTITION, testStartpointSpecific);
    Assert.assertEquals(TEST_OFFSET, resolvedOffset);
  }
",non-flaky,5
114054,aws_aws-sdk-java-v2,EnhancedTypeTest.anonymousCreationCapturesComplexTypeArguments,"    @Test
    public void anonymousCreationCapturesComplexTypeArguments() {
        EnhancedType<Map<String, List<List<String>>>> enhancedType = new EnhancedType<Map<String, List<List<String>>>>(){};
        assertThat(enhancedType.rawClass()).isEqualTo(Map.class);
        assertThat(enhancedType.rawClassParameters().get(0).rawClass()).isEqualTo(String.class);
        assertThat(enhancedType.rawClassParameters().get(1).rawClass()).isEqualTo(List.class);
        assertThat(enhancedType.rawClassParameters().get(1).rawClassParameters().get(0).rawClass()).isEqualTo(List.class);
        assertThat(enhancedType.rawClassParameters().get(1).rawClassParameters().get(0).rawClassParameters().get(0).rawClass())
            .isEqualTo(String.class);
    }
",non-flaky,5
114106,aws_aws-sdk-java-v2,OptionalAttributeConvertersTest.optionalIntConverterWorksCorrectly,"    @Test
    public void optionalIntConverterWorksCorrectly() {
        OptionalIntAttributeConverter converter = OptionalIntAttributeConverter.create();

        assertThat(transformFrom(converter, OptionalInt.empty())).isEqualTo(nullValue().toAttributeValue());
        assertThat(transformFrom(converter, OptionalInt.of(Integer.MIN_VALUE))).isEqualTo(fromNumber(""-2147483648"").toAttributeValue());
        assertThat(transformFrom(converter, OptionalInt.of(0))).isEqualTo(fromNumber(""0"").toAttributeValue());
        assertThat(transformFrom(converter, OptionalInt.of(Integer.MAX_VALUE))).isEqualTo(fromNumber(""2147483647"").toAttributeValue());

        assertThat(transformTo(converter, nullValue().toAttributeValue())).isEmpty();
        assertThat(transformTo(converter, fromNumber(""-2147483648""))).hasValue(Integer.MIN_VALUE);
        assertThat(transformTo(converter, fromNumber(""0""))).hasValue(0);
        assertThat(transformTo(converter, fromNumber(""2147483647""))).hasValue(Integer.MAX_VALUE);
    }
",non-flaky,5
106625,Alluxio_alluxio,AlluxioJniFuseFileSystemTest.incompleteFileCannotOpen,"  @Test
  public void incompleteFileCannotOpen() throws Exception {
    AlluxioURI expectedPath = BASE_EXPECTED_URI.join(""/foo/bar"");
    FileInfo fi = setUpOpenMock(expectedPath);
    fi.setCompleted(false);

    when(mFileSystem.openFile(expectedPath)).thenThrow(new FileIncompleteException(expectedPath));
    assertEquals(-ErrorCodes.EFAULT(), mFuseFs.open(""/foo/bar"", mFileInfo));
  }
",non-flaky,5
95727,togglz_togglz,DefaultFeatureManagerTest.testShouldHandleEnabledFlagCorrectlyWithCustomStrategy,"    @Test
    public void testShouldHandleEnabledFlagCorrectlyWithCustomStrategy() {

        // enabled for admin
        featureUserProvider.setFeatureUser(new SimpleFeatureUser(""admin"", false));
        assertEquals(true, manager.isActive(MyFeatures.DELETE_USERS));

        // disable feature, but keep configuration
        FeatureState state = repository.getFeatureState(MyFeatures.DELETE_USERS);
        state.setEnabled(false);
        repository.setFeatureState(state);

        // enabled for admin
        assertEquals(false, manager.isActive(MyFeatures.DELETE_USERS));

    }
",non-flaky,5
118713,netty_netty,UnixChannelUtilTest.testUnPooledAllocatorIsBufferCopyNeededForWrite,"    @Test
    public void testUnPooledAllocatorIsBufferCopyNeededForWrite() {
        testIsBufferCopyNeededForWrite(UnpooledByteBufAllocator.DEFAULT);
    }
",non-flaky,5
20946,NationalSecurityAgency_timely,TimeSeriesGroupingIteratorTest.testManySparseTimeSeries,"    @Test
    public void testManySparseTimeSeries() throws Exception {
        table.clear();
        long ts = System.currentTimeMillis();
        List<Tag> tags1 = new ArrayList<>();
        tags1.add(new Tag(""host"", ""r01n01""));
        List<Tag> tags2 = new ArrayList<>();
        tags2.add(new Tag(""host"", ""r01n02""));
        List<Tag> tags3 = new ArrayList<>();
        tags3.add(new Tag(""host"", ""r01n03""));
        for (int i = 0; i < 100; i++) {
            ts += 1000;
            Metric m = new Metric(""sys.cpu.user"", ts, i * 1.0D, tags1);
            byte[] row = MetricAdapter.encodeRowKey(m);
            Key k = new Key(row, tags1.get(0).join().getBytes(StandardCharsets.UTF_8),
                    MetricAdapter.encodeColQual(ts, """"), new byte[0], ts);
            Value v = new Value(MetricAdapter.encodeValue(m.getValue().getMeasure()));
            table.put(k, v);
            // jitter the time on the second time series
            Metric m2 = new Metric(""sys.cpu.user"", ts + 50, i * 2.0D, tags2);
            byte[] row2 = MetricAdapter.encodeRowKey(m2);
            Key k2 = new Key(row2, tags2.get(0).join().getBytes(StandardCharsets.UTF_8),
                    MetricAdapter.encodeColQual(ts, """"), new byte[0], ts + 50);
            Value v2 = new Value(MetricAdapter.encodeValue(m2.getValue().getMeasure()));
            table.put(k2, v2);
            Metric m3 = new Metric(""sys.cpu.user"", ts, i * 3.0D, tags3);
            byte[] row3 = MetricAdapter.encodeRowKey(m3);
            Key k3 = new Key(row3, tags3.get(0).join().getBytes(StandardCharsets.UTF_8),
                    MetricAdapter.encodeColQual(ts, """"), new byte[0], ts);
            Value v3 = new Value(MetricAdapter.encodeValue(m3.getValue().getMeasure()));
            table.put(k3, v3);
        }

        SortedMapIterator source = new SortedMapIterator(table);
        TimeSeriesGroupingIterator iter = new TimeSeriesGroupingIterator();
        IteratorSetting settings = new IteratorSetting(100, TimeSeriesGroupingIterator.class);
        settings.addOption(TimeSeriesGroupingIterator.FILTER, ""0.20,0.20,0.20,0.20,0.20"");
        iter.init(source, settings.getOptions(), SCAN_IE);
        iter.seek(new Range(), EMPTY_COL_FAMS, true);

        LinkedList<Double> first = new LinkedList<>();
        first.add(0D);
        first.add(1D);
        first.add(2D);
        first.add(3D);
        first.add(4D);
        LinkedList<Double> second = new LinkedList<>();
        second.add(0D);
        second.add(2D);
        second.add(4D);
        second.add(6D);
        second.add(8D);
        LinkedList<Double> third = new LinkedList<>();
        third.add(0D);
        third.add(3D);
        third.add(6D);
        third.add(9D);
        third.add(12D);

        // this section changed when the key structure changed so that identical
        // colFam values sorted consecutively within an given time period
        for (int i = 4; i < 100; i++) {
            checkNextResult(iter, first);
            shiftAndAdd(first, 1);
        }
        for (int i = 4; i < 100; i++) {
            System.out.println(i);
            checkNextResult(iter, second);
            shiftAndAdd(second, 2);
        }
        for (int i = 4; i < 100; i++) {
            checkNextResult(iter, third);
            shiftAndAdd(third, 3);
        }
        assertFalse(iter.hasTop());
    }
",non-flaky,5
135731,Netflix_Hystrix,HystrixCommandMetricsTest.onCompleted,"    @Test
    public void testCurrentConcurrentExecutionCount() throws InterruptedException {
        String key = ""cmd-metrics-C"";

        HystrixCommandMetrics metrics = null;
        List<Observable<Boolean>> cmdResults = new ArrayList<Observable<Boolean>>();

        int NUM_CMDS = 8;
        for (int i = 0; i < NUM_CMDS; i++) {
            HystrixCommand<Boolean> cmd = new SuccessCommand(key, 900);
            if (metrics == null) {
                metrics = cmd.metrics;
            }
            Observable<Boolean> eagerObservable = cmd.observe();
            cmdResults.add(eagerObservable);
        }

        try {
            Thread.sleep(150);
        } catch (InterruptedException ie) {
            fail(ie.getMessage());
        }
        System.out.println(""ReqLog: "" + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());
        assertEquals(NUM_CMDS, metrics.getCurrentConcurrentExecutionCount());

        final CountDownLatch latch = new CountDownLatch(1);
        Observable.merge(cmdResults).subscribe(new Subscriber<Boolean>() {
            @Override
            public void onCompleted() {
                System.out.println(""All commands done"");
                latch.countDown();
            }
",non-flaky,5
104670,apache_pinot,LuceneRealtimeClusterIntegrationTest.testTextSearchCountQuery,"  @Test
  public void testTextSearchCountQuery()
      throws Exception {
    // Keep posting queries until all records are consumed
    long previousResult = 0;
    while (getCurrentCountStarResult() < NUM_RECORDS) {
      long result = getTextColumnQueryResult();
      assertTrue(result >= previousResult);
      previousResult = result;
      Thread.sleep(100);
    }

    //Lucene index on consuming segments to update the latest records
    TestUtils.waitForCondition(aVoid -> {
      try {
        return getTextColumnQueryResult() == NUM_MATCHING_RECORDS;
      } catch (Exception e) {
        fail(""Caught exception while getting text column query result"");
        return false;
      }
    }, 10_000L, ""Failed to reach expected number of matching records"");
  }
",non-flaky,5
33678,alibaba_fastjson,JSONScannerTest.checkDate1,"  @Test
  public void checkDate1() throws Throwable {

    // Arrange
    char y0 = '2';
    char y1 = '1';
    char y2 = '1';
    char y3 = '1';
    char M0 = '1';
    char M1 = '0';
    int d0 = 51;
    int d1 = 48;

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkDate"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""int""), Reflector.forName(""int""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, y0, y1, y2, y3, M0, M1, d0, d1);

    // Assert result
    Assert.assertEquals(true, retval);

  }
",non-flaky,5
78327,apache_beam,ReduceFnRunnerTest.testCombiningAccumulatingProcessingTimeSeparateBundles,"  @Test
  public void testCombiningAccumulatingProcessingTimeSeparateBundles() throws Exception {
    WindowingStrategy<?, IntervalWindow> strategy =
        WindowingStrategy.of((WindowFn<?, IntervalWindow>) FixedWindows.of(Duration.millis(100)))
            .withTimestampCombiner(TimestampCombiner.EARLIEST)
            .withMode(AccumulationMode.ACCUMULATING_FIRED_PANES)
            .withAllowedLateness(Duration.ZERO)
            .withTrigger(
                Repeatedly.forever(
                    AfterProcessingTime.pastFirstElementInPane().plusDelayOf(Duration.millis(10))));

    ReduceFnTester<Integer, Integer, IntervalWindow> tester =
        ReduceFnTester.combining(strategy, Sum.ofIntegers(), VarIntCoder.of());

    tester.advanceProcessingTime(new Instant(5000));
    injectElement(tester, 2); // processing timer @ 5000 + 10; EOW timer @ 100
    injectElement(tester, 5);

    tester.advanceInputWatermark(new Instant(100));
    tester.advanceProcessingTime(new Instant(5011));

    assertThat(
        tester.extractOutput(),
        contains(
            isSingleWindowedValue(
                equalTo(7), 2, 0, 100, PaneInfo.createPane(true, true, Timing.ON_TIME, 0, 0))));
  }
",non-flaky,5
33748,alibaba_fastjson,FastJsonpHttpMessageConverter4Case2Test.test1_2,"    @Test
    public void test1_2() throws Exception {

        JSONObject json = new JSONObject();

        json.put(""id"", 123);

        json.put(""name"", ""ååå"");

        ResultActions actions = mockMvc.perform((post(""/fastjson/test1?callback=fnUpdateSome"").characterEncoding(
                ""UTF-8"").content(json.toJSONString()).contentType(MediaType.APPLICATION_JSON)));
        actions.andDo(print());
        actions.andExpect(status().isOk()).andExpect(content().contentType(APPLICATION_JAVASCRIPT))
                .andExpect(content().string(""/**/fnUpdateSome({\""name\"":\""ååå\"",\""id\"":123})""));
    }
",non-flaky,5
84602,apache_zookeeper,PrometheusMetricsProviderTest.setup,"    @BeforeEach
    public void setup() throws Exception {
        CollectorRegistry.defaultRegistry.clear();
        provider = new PrometheusMetricsProvider();
        Properties configuration = new Properties();
        configuration.setProperty(""httpPort"", ""0""); // ephemeral port
        configuration.setProperty(""exportJvmInfo"", ""false"");
        provider.configure(configuration);
        provider.start();
    }
",non-flaky,5
20924,NationalSecurityAgency_timely,MetricParserTest.testParseMalformatted,"    @Test
    public void testParseMalformatted() {

        MetricParser parser = new MetricParser();
        try {
            // parser should throw an exception
            parser.parse(""put mymetric 12341234 5.0 tag1 tag2=value2"");
            Assert.fail();
        } catch (IllegalArgumentException e) {

        }
    }
",non-flaky,5
99712,apache_cassandra,MultiResultLoggerTest.delegatesPrintlnToAdditionalPrintStreams,"    @Test
    public void delegatesPrintlnToAdditionalPrintStreams() throws Exception
    {
        ByteArrayOutputStream output = new ByteArrayOutputStream();
        PrintStream additionalPrintStream = new PrintStream(output, true);
        MultiResultLogger underTest = new MultiResultLogger(new PrintStream(NOOP));

        underTest.addStream(additionalPrintStream);
        underTest.println();

        assertEquals(""\n"", output.toString());
    }
",non-flaky,5
33856,apache_camel,FhirValidateIT.testResourceAsString,"    @Test
    public void testResourceAsString() throws Exception {
        Patient bobbyHebb = new Patient().addName(new HumanName().addGiven(""Bobby"").setFamily(""Hebb""));
        // using org.hl7.fhir.instance.model.api.IBaseResource message body for single parameter ""resource""
        MethodOutcome result
                = requestBody(""direct://RESOURCE_AS_STRING"", this.fhirContext.newXmlParser().encodeResourceToString(bobbyHebb));

        assertNotNull(result, ""resource result"");
        LOG.debug(""resource: "" + result);
        assertNotNull(result.getOperationOutcome());
        assertTrue(((OperationOutcome) result.getOperationOutcome()).getText().getDivAsString()
                .contains(""No issues detected during validation""));
    }
",non-flaky,5
104623,apache_pinot,RealtimeClusterIntegrationTest.testInstanceShutdown,"  @Test
  public void testInstanceShutdown()
      throws Exception {
    super.testInstanceShutdown();
  }
",non-flaky,5
95715,togglz_togglz,EnumBasedFeatureProviderTest.shouldReturnNullForOwnerNameByDefault,"    @Test
    public void shouldReturnNullForOwnerNameByDefault() {
        FeatureProvider provider = new EnumBasedFeatureProvider(ValidFeatureEnum.class);
        FeatureMetaData metaData = provider.getMetaData(ValidFeatureEnum.FEATURE1);
        assertThat(metaData.getAttributes())
            .doesNotContainValue(""Christian"");
    }
",non-flaky,5
38232,palantir_atlasdb,TextUtilsTest.testEscapeHtmlWhitespaceHandling,"    @Test
    public void testEscapeHtmlWhitespaceHandling() {
        String input2 = ""a b  c   d    e"";
        String output2 = ""a b &nbsp;c &nbsp; d &nbsp; &nbsp;e"";
        assertTrue(output2.equals(TextUtils.escapeHtml(input2)));

        String input3 = ""line 1\nline 2 \n\n line4"";
        String output3f = ""line 1<br/>line 2 <br/><br/> line4"";
        String output3t = ""line 1line 2  line4"";
        assertTrue(output3f.equals(TextUtils.escapeHtml(input3, false)));
        assertTrue(output3t.equals(TextUtils.escapeHtml(input3, true)));
    }
",non-flaky,5
112132,apache_shardingsphere-elasticjob,JobCoreConfigurationTest.assertBuildRequiredProperties,"    @Test
    public void assertBuildRequiredProperties() {
        JobCoreConfiguration actual = JobCoreConfiguration.newBuilder(""test_job"", ""0/1 * * * * ?"", 3).build();
        assertRequiredProperties(actual);
        assertDefaultValues(actual);
    }
",non-flaky,5
77510,dropwizard_dropwizard,DropwizardAppRuleWithExplicitTest.runWithExplicitConfig,"    @Test
    public void runWithExplicitConfig() {
        Map<String, String> response = RULE.client().target(""http://localhost:"" + RULE.getLocalPort() + ""/test"")
            .request()
            .get(new GenericType<Map<String, String>>() {
            });
        assertThat(response).containsOnly(entry(""message"", ""stuff!""));
    }
",non-flaky,5
104677,apache_pinot,RealtimeToOfflineSegmentsMinionClusterIntegrationTest.testGeneratedQueriesWithMultiValues,"  @Test(enabled = false)
  public void testGeneratedQueriesWithMultiValues() {
  }
",non-flaky,5
104637,apache_pinot,OfflineClusterIntegrationTest.testRangeIndexTriggering,"  @Test(dependsOnMethods = ""testBloomFilterTriggering"")
  public void testRangeIndexTriggering()
      throws Exception {
    long numTotalDocs = getCountStarResult();
    assertEquals(postQuery(TEST_UPDATED_RANGE_INDEX_QUERY).get(""numEntriesScannedInFilter"").asLong(), numTotalDocs);

    // Update table config and trigger reload
    TableConfig tableConfig = getOfflineTableConfig();
    tableConfig.getIndexingConfig().setRangeIndexColumns(UPDATED_RANGE_INDEX_COLUMNS);
    updateTableConfig(tableConfig);
    reloadOfflineTable(getTableName());
    TestUtils.waitForCondition(aVoid -> {
      try {
        JsonNode queryResponse = postQuery(TEST_UPDATED_RANGE_INDEX_QUERY);
        // Total docs should not change during reload
        assertEquals(queryResponse.get(""totalDocs"").asLong(), numTotalDocs);
        return queryResponse.get(""numEntriesScannedInFilter"").asLong() < numTotalDocs;
      } catch (Exception e) {
        throw new RuntimeException(e);
      }
    }, 600_000L, ""Failed to generate range index"");

    // Update table config to remove the new range index, and
    // reload table to clean the new range index physically.
    tableConfig = getOfflineTableConfig();
    tableConfig.getIndexingConfig().setRangeIndexColumns(getRangeIndexColumns());
    updateTableConfig(tableConfig);
    reloadOfflineTable(getTableName());
    TestUtils.waitForCondition(aVoid -> {
      try {
        JsonNode queryResponse = postQuery(TEST_UPDATED_RANGE_INDEX_QUERY);
        // Total docs should not change during reload, but num entries scanned
        // gets back to total number of documents as the index is removed.
        assertEquals(queryResponse.get(""totalDocs"").asLong(), numTotalDocs);
        return queryResponse.get(""numEntriesScannedInFilter"").asLong() == numTotalDocs;
      } catch (Exception e) {
        throw new RuntimeException(e);
      }
    }, 600_000L, ""Failed to cleanup obsolete index"");

    assertEquals(getTableSize(getTableName()), _tableSizeAfterRemovingIndex);
  }
",non-flaky,5
70817,apache_kafka,PluginsTest.newPluginShouldServiceLoadWithPluginClassLoader,"    @Test
    public void newPluginShouldServiceLoadWithPluginClassLoader() {
        TestPlugins.assertAvailable();
        Converter plugin = plugins.newPlugin(
            TestPlugins.SERVICE_LOADER,
            new AbstractConfig(new ConfigDef(), Collections.emptyMap()),
            Converter.class
        );

        assertInstanceOf(SamplingTestPlugin.class, plugin, ""Cannot collect samples"");
        Map<String, SamplingTestPlugin> samples = ((SamplingTestPlugin) plugin).flatten();
        // Assert that the service loaded subclass is found in both environments
        assertTrue(samples.containsKey(""ServiceLoadedSubclass.static""));
        assertTrue(samples.containsKey(""ServiceLoadedSubclass.dynamic""));
        assertPluginClassLoaderAlwaysActive(samples);
    }
",non-flaky,5
97967,ReactiveX_RxJava,ObservableTests.testCountAFewItems,"    @Test
    public void testCountAFewItems() {
        Observable<String> observable = Observable.from(""a"", ""b"", ""c"", ""d"");
        observable.count().subscribe(w);
        // we should be called only once
        verify(w, times(1)).onNext(anyInt());
        verify(w).onNext(4);
        verify(w, never()).onError(any(Throwable.class));
        verify(w, times(1)).onCompleted();
    }
",non-flaky,5
170516,eclipse_jetty.project,TestAnnotationParser.testJep238MultiReleaseInJarJDK10,"    @Test
    public void testJep238MultiReleaseInJarJDK10() throws Exception
    {
        File jdk10Jar = MavenTestingUtils.getTestResourceFile(""jdk10/multirelease-10.jar"");
        AnnotationParser parser = new AnnotationParser();
        DuplicateClassScanHandler handler = new DuplicateClassScanHandler();
        Set<Handler> handlers = Collections.singleton(handler);
        parser.parse(handlers, new PathResource(jdk10Jar));
        // Should throw no exceptions
    }
",non-flaky,5
162398,testcontainers_testcontainers-java,WorkingDirectoryTest.checkOutput,"    @Test
    public void checkOutput() {
        String listing = toStringConsumer.toUtf8String();

        assertTrue(""Directory listing contains expected /etc content"", listing.contains(""hostname""));
        assertTrue(""Directory listing contains expected /etc content"", listing.contains(""init.d""));
        assertTrue(""Directory listing contains expected /etc content"", listing.contains(""passwd""));
    }
",non-flaky,5
76698,quarkusio_quarkus,UnitET.unitStyleTest,"    @Test
    public void unitStyleTest() {
        HelloResource res = new HelloResource();
        Assertions.assertEquals(""Hi"", res.sayHello());
    }
",non-flaky,5
368,apache_hadoop,TestDFSIO.testWrite,"@Test
public void testWrite() throws Exception {
    FileSystem fs = cluster.getFileSystem();
    long tStart = System.currentTimeMillis();
    bench.writeTest(fs);
    long execTime = System.currentTimeMillis() - tStart;
    bench.analyzeResult(fs, TestType.TEST_TYPE_WRITE, execTime);
}",test order dependency,4
175803,GoogleCloudPlatform_google-cloud-eclipse,ProjectSelectorSelectionChangedListenerTest.testSelectionChanged_hasAppEngineApplication,"  @Test
  public void testSelectionChanged_hasAppEngineApplication()
      throws ProjectRepositoryException, InterruptedException {
    initSelectionAndAccountSelector();
    when(projectRepository.getAppEngineApplication(any(Credential.class), anyString()))
        .thenReturn(AppEngine.withId(""id""));

    listener.selectionChanged(event);
    listener.latestQueryJob.join();
    verify(projectSelector).clearStatusLink();
  }
",non-flaky,5
112094,apache_shardingsphere-elasticjob,RotateServerByNameJobShardingStrategyTest.assertSharding2,"    @Test
    public void assertSharding2() {
        Map<JobInstance, List<Integer>> expected = new HashMap<>();
        expected.put(new JobInstance(""host2@-@0""), Collections.singletonList(0));
        expected.put(new JobInstance(""host0@-@0""), Collections.singletonList(1));
        expected.put(new JobInstance(""host1@-@0""), Collections.<Integer>emptyList());
        assertThat(rotateServerByNameJobShardingStrategy.sharding(Arrays.asList(new JobInstance(""host0@-@0""), new JobInstance(""host1@-@0""), new JobInstance(""host2@-@0"")), ""2"", 2), is(expected));
    }
",non-flaky,5
33695,alibaba_fastjson,JSONScannerTest.checkTime1,"  @Test
  public void checkTime1() throws Throwable {

    // Arrange
    JSONScanner objectUnderTest = ((JSONScanner)Reflector.getInstance(""com.alibaba.fastjson.parser.JSONScanner""));
    objectUnderTest.hasSpecial = false;
    objectUnderTest.token = 0;
    objectUnderTest.locale = null;
    objectUnderTest.np = 0;
    objectUnderTest.features = 0;
    Reflector.setField(objectUnderTest, ""text"", """");
    objectUnderTest.calendar = null;
    objectUnderTest.matchStat = 0;
    objectUnderTest.bp = 0;
    Reflector.setField(objectUnderTest, ""len"", 0);
    objectUnderTest.stringDefaultValue = """";
    objectUnderTest.pos = 0;
    objectUnderTest.sp = 0;
    objectUnderTest.sbuf = null;
    objectUnderTest.ch = '\u0000';
    objectUnderTest.timeZone = null;
    objectUnderTest.eofPos = 0;
    char h0 = '\u0000';
    char h1 = '\u0000';
    char m0 = '\u0000';
    char m1 = '\u0000';
    char s0 = '\u0000';
    char s1 = '\u0000';

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkTime"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(objectUnderTest, h0, h1, m0, m1, s0, s1);

    // Assert result
    Assert.assertEquals(false, retval);

  }
",non-flaky,5
76972,Tencent_Firestorm,ShufflePartitionedBlockTest.shufflePartitionedBlockTest,"  @Test
  public void shufflePartitionedBlockTest() {
    byte[] buf = new byte[3];
    new Random().nextBytes(buf);

    ShufflePartitionedBlock b1 = new ShufflePartitionedBlock(1, 1, 2, 3, 1, buf);
    assertEquals(1, b1.getLength());
    assertEquals(2, b1.getCrc());
    assertEquals(3, b1.getBlockId());

    ShufflePartitionedBlock b3 = new ShufflePartitionedBlock(1, 1, 2, 3, 3, buf);
    assertArrayEquals(buf, b3.getData());
  }
",non-flaky,5
179489,abel533_Mapper,SafeDeleteByFieldTest.testSafeDeleteByExampleNull,"    @Test(expected = PersistenceException.class)
    public void testSafeDeleteByExampleNull() {
        SqlSession sqlSession = getSqlSession();
        try {
            CountryMapper mapper = sqlSession.getMapper(CountryMapper.class);
            mapper.deleteByExample(null);
        } finally {
            sqlSession.close();
        }
    }
",non-flaky,5
33738,alibaba_fastjson,FastJsonViewTest.test5,"    @Test
    public void test5() throws Exception {
        mockMvc.perform(
                (post(""/fastjsonview/test5"").characterEncoding(""UTF-8"")
                        .contentType(MediaType.APPLICATION_JSON))).andExpect(status
                ().isOk()).andDo(print()).andExpect(content().string(""{\""description\"":\""fastjsonviewæ³¨è§£æµè¯\"",\""id\"":100,\""name\"":\""æµè¯\"",\""rootDepartment\"":{\""children\"":[],\""id\"":1,\""members\"":[],\""name\"":\""é¨é¨1\""},\""stock\"":\""haha\""}""));
    }
",non-flaky,5
19442,eclipse_xtext-core,TypeHierarchyHelperTest.testImcompatipleFeatures,"	@Test
	public void testImcompatipleFeatures() throws Exception {
		EClassInfo a = addClass(""a"");
		EClassInfo b = addClass(""b"");
		EClassInfo c = addClass(""c"");
		b.addSupertype(a);
		c.addSupertype(a);
		addAttribute(b, INT, ""f1"");
		addAttribute(c, STRING, ""f1"");

		assertEquals(0, a.getEClass().getEStructuralFeatures().size());
		assertEquals(1, b.getEClass().getEStructuralFeatures().size());
		assertEquals(1, c.getEClass().getEStructuralFeatures().size());

		liftUpFeatures();

		assertEquals(0, a.getEClass().getEStructuralFeatures().size());
		assertEquals(1, b.getEClass().getEStructuralFeatures().size());
		assertEquals(1, c.getEClass().getEStructuralFeatures().size());
	}
",non-flaky,5
77697,pholser_junit-quickcheck,PrimitivePropertyParameterTypesTest.shouldHold,"    @Test public void leftOpenEndedRangedWrapperCharacter() {
        @Property public void shouldHold(@InRange(max = ""\u00FF"") Character ch) {
            assertThat(ch, lessThanOrEqualTo('\u00FF'));
        }
",non-flaky,5
98068,vert-x3_vertx-mongo-client,FindOptionsTest.testOptionsJson,"  @Test
  public void testOptionsJson() {
    JsonObject json = new JsonObject();

    JsonObject fields = randomJsonObject();
    json.put(""fields"", fields);

    JsonObject sort = randomJsonObject();
    json.put(""sort"", sort);

    int limit = TestUtils.randomInt();
    json.put(""limit"", limit);

    int skip = TestUtils.randomInt();
    json.put(""skip"", skip);

    FindOptions options = new FindOptions(json);
    assertEquals(fields, options.getFields());
    assertEquals(sort, options.getSort());
    assertEquals(limit, options.getLimit());
    assertEquals(skip, options.getSkip());
  }
",non-flaky,5
92613,FasterXML_jackson-databind,ObjectReaderValueOfWithValueTypeTest.testValueOfReaderWithValueType,"    @Test
    public void testValueOfReaderWithValueType() throws IOException {
        when(objectReader.forType((Class<?>) any())).thenReturn(objectReader);
        when(objectReader.readValue((Reader) any())).thenReturn(pojo);
        when(objectReader.readValue((Reader) any(), (Class<?>) any())).thenCallRealMethod();

        Reader source = new StringReader(""{}"");
        POJO result = objectReader.readValue(source, POJO.class);

        assertEquals(result, pojo);
        verify(objectReader).forType(POJO.class);
        verify(objectReader).readValue(source);
    }
",non-flaky,5
134017,CorfuDB_CorfuDB,LoggingMeterRegistryTest.testSummaryPercentiles,"    @Test
    public void testSummaryPercentiles() {
        AggregateSink sink = new AggregateSink();

        LoggingMeterRegistryWithHistogramSupport registry = getInstance(sink);

        DistributionSummary summary = DistributionSummary.builder(""summary"")
                .publishPercentileHistogram()
                .publishPercentiles(0.99, 0.95, 0.5)
                .tags(""endpoint"", ""localhost:9000"")
                .register(registry);

        for (int i = 0; i < 3; i++) {
            summary.record(100);
            try {
                Thread.sleep(1000);
            } catch (InterruptedException ie) {

            }
        }
        assertTrue(sink.substringIsPresent(""summary_percentile,endpoint=localhost:9000,phi=0.99,metric_type=gauge value=100""));
        assertTrue(sink.substringIsPresent(""summary_percentile,endpoint=localhost:9000,phi=0.95,metric_type=gauge value=100""));
        assertTrue(sink.substringIsPresent(""summary_percentile,endpoint=localhost:9000,phi=0.5,metric_type=gauge value=100""));
    }
",non-flaky,5
114105,aws_aws-sdk-java-v2,OptionalAttributeConvertersTest.optionalDoubleConverterWorksCorrectly,"    @Test
    public void optionalDoubleConverterWorksCorrectly() {
        OptionalDoubleAttributeConverter converter = OptionalDoubleAttributeConverter.create();

        assertThat(transformFrom(converter, OptionalDouble.empty())).isEqualTo(nullValue().toAttributeValue());
        assertThat(transformFrom(converter, OptionalDouble.of(-Double.MAX_VALUE))).isEqualTo(fromNumber(""-1.7976931348623157E308"").toAttributeValue());
        assertThat(transformFrom(converter, OptionalDouble.of(-Double.MIN_VALUE))).isEqualTo(fromNumber(""-4.9E-324"").toAttributeValue());
        assertThat(transformFrom(converter, OptionalDouble.of(0.0))).isEqualTo(fromNumber(""0.0"").toAttributeValue());
        assertThat(transformFrom(converter, OptionalDouble.of(Double.MIN_VALUE))).isEqualTo(fromNumber(""4.9E-324"").toAttributeValue());
        assertThat(transformFrom(converter, OptionalDouble.of(Double.MAX_VALUE))).isEqualTo(fromNumber(""1.7976931348623157E308"").toAttributeValue());

        assertThat(transformTo(converter, nullValue().toAttributeValue())).isEmpty();
        assertThat(transformTo(converter, fromNumber(""-1.7976931348623157E308""))).hasValue(-Double.MAX_VALUE);
        assertThat(transformTo(converter, fromNumber(""-4.9E-324""))).hasValue(-Double.MIN_VALUE);
        assertThat(transformTo(converter, fromNumber(""0.0""))).hasValue(0.0);
        assertThat(transformTo(converter, fromNumber(""4.9E-324""))).hasValue(Double.MIN_VALUE);
        assertThat(transformTo(converter, fromNumber(""1.7976931348623157E308""))).hasValue(Double.MAX_VALUE);
    }
",non-flaky,5
94683,square_okhttp,HttpResponseCacheTest.get,"  @Test public void getInstalledWithWrongTypeInstalled() {
      public CacheResponse get(URI uri, String requestMethod,
          Map<String, List<String>> requestHeaders) {
        return null;
      }
",non-flaky,5
104682,apache_pinot,RealtimeToOfflineSegmentsMinionClusterIntegrationTest.testQueriesFromQueryFile,"  @Test(enabled = false)
  public void testQueriesFromQueryFile() {
  }
",non-flaky,5
26918,wildfly_wildfly,MailTransformersTestCase.testRejectingTransformersEAP_7_0_0,"    @Test
    public void testRejectingTransformersEAP_7_0_0() throws Exception {
        testRejectingTransformers(EAP_7_0_0, MODEL_VERSION_EAP70);
    }
",non-flaky,5
77539,dropwizard_dropwizard,PersonResourceExceptionMapperTest.testDefaultExceptionMapper,"    @Test
    public void testDefaultExceptionMapper() {
        assertThat(RESOURCES.target(""/person/blah/runtime-exception"")
            .request()
            .post(Entity.json(""{}""))
            .readEntity(String.class))
            .isEqualTo(""Something went wrong: I'm an exception!"");
    }
",non-flaky,5
98586,nutzam_nutz,El2Test.multiStageOperation,"    @Test
    public void multiStageOperation() {
        assertEquals(3, El.eval(""1 + 1 + 1""));
        assertEquals(1, El.eval(""1+1-1""));
        assertEquals(-1, El.eval(""1-1-1""));
        assertEquals(1, El.eval(""1-(1-1)""));
        assertEquals(7, El.eval(""1+2*3""));
        assertEquals(2 * 4 + 2 * 3 + 4 * 5, El.eval(""2*4+2*3+4*5""));
        assertEquals(9 + 8 * 7 + (6 + 5) * ((4 - 1 * 2 + 3)), El.eval(""9+8*7+(6+5)*((4-1*2+3))""));
        assertEquals(.3 + .2 * .5, El.eval("".3+.2*.5""));
        assertEquals((.5 + 0.1) * .9, El.eval(""(.5 + 0.1)*.9""));
    }
",non-flaky,5
98281,spotify_docker-client,ProgressMessageTest.testDigest_Docker18,"  @Test
  public void testDigest_Docker18() throws Exception {
    final String status = ""some-image-tag: digest: "" + digest + "" size: 1234"";
    assertEquals(digest, readMessage(status).digest());
  }
",non-flaky,5
98034,vert-x3_vertx-mongo-client,MongoClientBulkWriteResultTest.testCopyMongoClientBulkWriteResult,"  @Test
  public void testCopyMongoClientBulkWriteResult() {
    MongoClientBulkWriteResult mongoClientBulkWriteResultOrigin = new MongoClientBulkWriteResult(TestUtils.randomLong(),
        TestUtils.randomLong(), TestUtils.randomLong(), TestUtils.randomLong(), randomUpsertIds());

    MongoClientBulkWriteResult mongoClientBulkWriteResultCopy = new MongoClientBulkWriteResult(
        mongoClientBulkWriteResultOrigin);

    assertEquals(mongoClientBulkWriteResultCopy.getMatchedCount(), mongoClientBulkWriteResultOrigin.getMatchedCount());
    assertEquals(mongoClientBulkWriteResultCopy.getModifiedCount(),
        mongoClientBulkWriteResultOrigin.getModifiedCount());
    assertEquals(mongoClientBulkWriteResultCopy.getInsertedCount(),
        mongoClientBulkWriteResultOrigin.getInsertedCount());
    assertEquals(mongoClientBulkWriteResultCopy.getDeletedCount(), mongoClientBulkWriteResultOrigin.getDeletedCount());
    assertEquals(mongoClientBulkWriteResultCopy.getUpserts(), mongoClientBulkWriteResultOrigin.getUpserts());
  }
",non-flaky,5
19459,eclipse_xtext-core,ImportedNamespaceAwareLocalScopeProviderTest.iterator,"	@Test public void testResourceSetReferencingResourceSet() throws Exception {
			public Iterator<EObject> iterator() {
				return res1.getAllContents();
			}
",non-flaky,5
91484,strapdata_elassandra,IndexingMasterFailoverIT.run,"    @TestLogging(""_root:DEBUG"")
    public void testMasterFailoverDuringIndexingWithMappingChanges() throws Throwable {
        logger.info(""--> start 4 nodes, 3 master, 1 data"");

        final Settings sharedSettings = Settings.builder()
                .put(FaultDetection.PING_TIMEOUT_SETTING.getKey(), ""1s"") // for hitting simulated network failures quickly
                .put(FaultDetection.PING_RETRIES_SETTING.getKey(), ""1"") // for hitting simulated network failures quickly
                .put(""discovery.zen.join_timeout"", ""10s"")  // still long to induce failures but to long so test won't time out
                .put(DiscoverySettings.PUBLISH_TIMEOUT_SETTING.getKey(), ""1s"") // <-- for hitting simulated network failures quickly
                .put(ElectMasterService.DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), 2)
                .build();

        internalCluster().startMasterOnlyNodes(3, sharedSettings);

        String dataNode = internalCluster().startDataOnlyNode(sharedSettings);

        logger.info(""--> wait for all nodes to join the cluster"");
        ensureStableCluster(4);

        // We index data with mapping changes into cluster and have master failover at same time
        client().admin().indices().prepareCreate(""myindex"")
                .setSettings(Settings.builder().put(""index.number_of_shards"", 1).put(""index.number_of_replicas"", 0))
                .get();
        ensureGreen(""myindex"");

        final CyclicBarrier barrier = new CyclicBarrier(2);

        Thread indexingThread = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    barrier.await();
                } catch (InterruptedException e) {
                    logger.warn(""Barrier interrupted"", e);
                    return;
                } catch (BrokenBarrierException e) {
                    logger.warn(""Broken barrier"", e);
                    return;
                }
                for (int i = 0; i < 10; i++) {
                    // index data with mapping changes
                    IndexResponse response = client(dataNode).prepareIndex(""myindex"", ""mytype"").setSource(""field_"" + i, ""val"").get();
                    assertEquals(DocWriteResponse.Result.CREATED, response.getResult());
                }
            }
",non-flaky,5
98080,vert-x3_vertx-mongo-client,WriteConcernParserTest.testAdvancedWriteConcern_w_int_only,"  @Test
  public void testAdvancedWriteConcern_w_int_only() {
    WriteConcern expected = new WriteConcern(123);
    JsonObject config = new JsonObject();
    config.put(""w"", 123);

    WriteConcern wc = new WriteConcernParser(null, config).writeConcern();
    assertNotNull(wc);
    assertEquals(expected, wc);
  }
",non-flaky,5
106667,Alluxio_alluxio,BaseFileSystemTest.delete,"  @Test
  public void delete() throws Exception {
    AlluxioURI file = new AlluxioURI(""/file"");
    DeletePOptions deleteOptions = DeletePOptions.newBuilder().setRecursive(true).build();
    mFileSystem.delete(file, deleteOptions);
    verify(mFileSystemMasterClient).delete(file,
        FileSystemOptions.deleteDefaults(mConf).toBuilder().mergeFrom(deleteOptions).build());

    verifyFilesystemContextAcquiredAndReleased();
  }
",non-flaky,5
59627,looly_hutool,FtpTest.cdTest,"	@Test
	public void cdTest() {
		Ftp ftp = new Ftp(""looly.centos"");
		
		ftp.cd(""/file/aaa"");
		Console.log(ftp.pwd());
		
		IoUtil.close(ftp);
	}
",non-flaky,5
77502,dropwizard_dropwizard,NoAuthPolymorphicPrincipalEntityTest.setUp,"    @BeforeEach
    public void setUp() throws Exception {
        super.setUp();
    }
",non-flaky,5
60914,apache_druid,DoubleSumAveragerFactoryTest.testCreateAverager,"  @Test
  public void testCreateAverager()
  {
    AveragerFactory<?, ?> fac = new DoubleSumAveragerFactory(""test"", 5, 1, ""field"");
    Assert.assertThat(fac.createAverager(), IsInstanceOf.instanceOf(DoubleSumAverager.class));
  }
",non-flaky,5
33698,alibaba_fastjson,JSONScannerTest.checkTime4,"  @Test
  public void checkTime4() throws Throwable {

    // Arrange
    JSONScanner objectUnderTest = ((JSONScanner)Reflector.getInstance(""com.alibaba.fastjson.parser.JSONScanner""));
    objectUnderTest.hasSpecial = false;
    objectUnderTest.token = 0;
    objectUnderTest.locale = null;
    objectUnderTest.np = 0;
    objectUnderTest.features = 0;
    Reflector.setField(objectUnderTest, ""text"", """");
    objectUnderTest.calendar = null;
    objectUnderTest.matchStat = 0;
    objectUnderTest.bp = 0;
    Reflector.setField(objectUnderTest, ""len"", 0);
    objectUnderTest.stringDefaultValue = """";
    objectUnderTest.pos = 0;
    objectUnderTest.sp = 0;
    objectUnderTest.sbuf = null;
    objectUnderTest.ch = '\u0000';
    objectUnderTest.timeZone = null;
    objectUnderTest.eofPos = 0;
    char h0 = '0';
    char h1 = ' ';
    char m0 = '\u0000';
    char m1 = '\u0000';
    char s0 = '\u0000';
    char s1 = '\u0000';

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkTime"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(objectUnderTest, h0, h1, m0, m1, s0, s1);

    // Assert result
    Assert.assertEquals(false, retval);

  }
",non-flaky,5
179483,abel533_Mapper,SafeUpdateByMethodTest.testSafeUpdateNull2,"    @Test(expected = PersistenceException.class)
    public void testSafeUpdateNull2() {
        SqlSession sqlSession = getSqlSession();
        try {
            CountryMapper mapper = sqlSession.getMapper(CountryMapper.class);
            mapper.updateByExample(null, null);
        } finally {
            sqlSession.close();
        }
    }
",non-flaky,5
19432,eclipse_xtext-core,XtextValidationTest.testBug322875_01,"	@Test
	public void testBug322875_01() throws Exception {
		String testGrammar = ""grammar foo.Bar with org.eclipse.xtext.common.Terminals\n "" +
				"" import 'classpath:/org/eclipse/xtext/xtext/XtextValidationTest.ecore'  "" +
				"" import 'http://www.eclipse.org/2008/Xtext' as xtext\n"" +
				""Bug322875 returns Bug322875: referencesETypeFromClasspathPackage=[xtext::Grammar];"";
		XtextResource resource = getResourceFromStringAndExpect(testGrammar,1);
		assertFalse(resource.getErrors().toString(), resource.getErrors().isEmpty());
		assertBug322875(resource);
	}
",non-flaky,5
89346,apache_samza,TestKafkaSystemProducerJava.apply,"  @Test
  public void testInstantiateProducer() {
    KafkaSystemProducer ksp = new KafkaSystemProducer(""SysName"", new ExponentialSleepStrategy(2.0, 200, 10000),
      new AbstractFunction0<Producer<byte[], byte[]>>() {
        @Override
        public Producer<byte[], byte[]> apply() {
          return new KafkaProducer<>(new HashMap<String, Object>());
        }
      }, new KafkaSystemProducerMetrics(""SysName"", new MetricsRegistryMap()), new AbstractFunction0<Object>() {
        @Override
        public Object apply() {
          return System.currentTimeMillis();
        }
",non-flaky,5
78267,apache_beam,LateDataUtilsTest.beforeEndOfGlobalWindowSame,"  @Test
  public void beforeEndOfGlobalWindowSame() {
    FixedWindows windowFn = FixedWindows.of(Duration.standardMinutes(5));
    Duration allowedLateness = Duration.standardMinutes(2);
    WindowingStrategy<?, ?> strategy =
        WindowingStrategy.globalDefault()
            .withWindowFn(windowFn)
            .withAllowedLateness(allowedLateness);

    IntervalWindow window = windowFn.assignWindow(new Instant(10));
    assertThat(
        LateDataUtils.garbageCollectionTime(window, strategy),
        equalTo(window.maxTimestamp().plus(allowedLateness)));
  }
",non-flaky,5
162673,OpenAPITools_openapi-generator,PetApiTest.findPetsByStatusTest,"    @Test
    public void findPetsByStatusTest() {
        List<String> status = null;
        //List<Pet> response = api.findPetsByStatus(status);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
",non-flaky,5
95725,togglz_togglz,DefaultFeatureManagerTest.testIsActive,"    @Test
    public void testIsActive() {

        // DELETE_USERS disabled for unknown user
        featureUserProvider.setFeatureUser(null);
        assertEquals(false, manager.isActive(MyFeatures.DELETE_USERS));

        // DELETE_USERS enabled for admin user
        featureUserProvider.setFeatureUser(new SimpleFeatureUser(""admin"", false));
        assertEquals(true, manager.isActive(MyFeatures.DELETE_USERS));

        // DELETE_USERS enabled for other user
        featureUserProvider.setFeatureUser(new SimpleFeatureUser(""somebody"", false));
        assertEquals(false, manager.isActive(MyFeatures.DELETE_USERS));

        // EXPERIMENTAL disabled for all
        featureUserProvider.setFeatureUser(null);
        assertEquals(false, manager.isActive(MyFeatures.EXPERIMENTAL));

        // MISSING_STRATEGY disabled for all
        assertEquals(false, manager.isActive(MyFeatures.MISSING_STRATEGY));

        // EMPTY_STRATEGY enabled for all
        assertEquals(true, manager.isActive(MyFeatures.EMPTY_STRATEGY));
    }
",non-flaky,5
175818,GoogleCloudPlatform_google-cloud-eclipse,OpenUriSelectionListenerTest.testWidgetSelected_errorInvokingBrowser,"  @Test
  public void testWidgetSelected_errorInvokingBrowser() throws PartInitException {
    SelectionEvent selectionEvent = getEvent(VALID_URI);
    doThrow(new PartInitException(""fake exception"")).when(browser).openURL(any(URL.class));

    new OpenUriSelectionListener(queryParameterProvider, errorHandler, browserSupport).widgetSelected(selectionEvent);
    verify(errorHandler).handle(captor.capture(), any(URI.class));
    assertThat(captor.getValue(), instanceOf(PartInitException.class));
  }
",non-flaky,5
94730,ktuukkan_marine-api,Longitude28Test.zeroIsCorrect,"    @Test
    public void zeroIsCorrect() {
        assertTrue(Longitude28.isCorrect(0));
    }
",non-flaky,5
159640,liquibase_liquibase,AbstractIntegrationTest.testRunChangeLog,"    @Test
    public void testRunChangeLog() throws Exception {
        assumeNotNull(this.getDatabase());

        runCompleteChangeLog();
    }
",non-flaky,5
112649,tbsalling_aismessages,BaseStationReportTest.canDecodeCommunicationState,"    @Test
    public void canDecodeCommunicationState() {
        AISMessage aisMessage = AISMessage.create(NMEAMessage.fromString(""!AIVDM,1,1,,A,400TcdiuiT7VDR>3nIfr6>i00000,0*78""));

        System.out.println(aisMessage.toString());

        assertEquals(AISMessageType.BaseStationReport, aisMessage.getMessageType());
        assertEquals((Integer) 0, aisMessage.getRepeatIndicator());
        BaseStationReport message = (BaseStationReport) aisMessage;
        assertEquals(MMSI.valueOf(601011), message.getSourceMmsi());
        assertEquals((Integer) 2012, message.getYear());
        assertEquals((Integer) 6, message.getMonth());
        assertEquals((Integer) 8, message.getDay());
        assertEquals((Integer) 7, message.getHour());
        assertEquals((Integer) 38, message.getMinute());
        assertEquals((Integer) 20, message.getSecond());
        assertTrue(message.getPositionAccurate());
        assertEquals(Float.valueOf(-29.870832f), message.getLatitude());
        assertEquals(Float.valueOf(31.033514f), message.getLongitude());
        assertEquals(PositionFixingDevice.Gps, message.getPositionFixingDevice());
        assertFalse(message.getRaimFlag());

        SOTDMACommunicationState sotdmaCommunicationState = message.getCommunicationState();
        assertEquals(SyncState.UTCDirect, sotdmaCommunicationState.getSyncState());
        assertNull(sotdmaCommunicationState.getNumberOfReceivedStations());
        assertNull(sotdmaCommunicationState.getSlotNumber());
        assertEquals(Integer.valueOf(0), sotdmaCommunicationState.getSlotOffset());
        assertEquals(Integer.valueOf(0), sotdmaCommunicationState.getSlotTimeout());
        assertNull(sotdmaCommunicationState.getUtcHour());
        assertNull(sotdmaCommunicationState.getUtcMinute());
    }
",non-flaky,5
76739,quarkusio_quarkus,RemoteDevMojoIT.testThatTheApplicationIsReloadedOnJavaChange,"    @Test
    public void testThatTheApplicationIsReloadedOnJavaChange()
            throws MavenInvocationException, IOException, InterruptedException {
        testDir = initProject(""projects/classic-remote-dev"", ""projects/project-classic-run-java-change-remote"");
        agentDir = initProject(""projects/classic-remote-dev"", ""projects/project-classic-run-java-change-local"");
        runAndCheck();

        // Edit the ""Hello"" message.
        File source = new File(agentDir, ""src/main/java/org/acme/HelloResource.java"");
        String uuid = UUID.randomUUID().toString();
        filter(source, Collections.singletonMap(""return \""hello\"";"", ""return \"""" + uuid + ""\"";""));

        // Wait until we get ""uuid""
        await()
                .pollDelay(1, TimeUnit.SECONDS)
                .atMost(1, TimeUnit.MINUTES).until(() -> DevModeTestUtils.getHttpResponse(""/app/hello"").contains(uuid));

        await()
                .pollDelay(1, TimeUnit.SECONDS)
                .pollInterval(1, TimeUnit.SECONDS)
                .until(source::isFile);

        filter(source, Collections.singletonMap(uuid, ""carambar""));

        // Wait until we get ""carambar""
        await()
                .pollDelay(1, TimeUnit.SECONDS)
                .atMost(1, TimeUnit.MINUTES).until(() -> DevModeTestUtils.getHttpResponse(""/app/hello"").contains(""carambar""));

        //also verify that the dev ui console is disabled
        DevModeTestUtils.getHttpResponse(""/q/dev"", 404, 10, TimeUnit.SECONDS);
    }
",non-flaky,5
176800,ctco_cukes,ContextCapturerTest.shouldInvokeCaptureValuesFromPatternIfAtLeastOneGroupFound,"    @Test
    public void shouldInvokeCaptureValuesFromPatternIfAtLeastOneGroupFound() throws Exception {
        capturer.capture(""{(hello)}"", ""world"");
        verify(capturer).captureValuesFromPattern(anyString(), anyListOf(String.class), anyString());
    }
",non-flaky,5
159626,liquibase_liquibase,H2IntegrationTest.h2IsExcludedFromRunningChangeset,"    @Test
    public void h2IsExcludedFromRunningChangeset() throws Exception {
        runChangeLogFile(dbmsExcludeChangelog);
    }
",non-flaky,5
110131,Wikidata_wikidata-toolkit,ClientConfigurationTest.testUnknownAction,"	@Test
	public void testUnknownAction() {
		String[] args = new String[] { ""-a"", ""notImplemented"" };
		ClientConfiguration config = new ClientConfiguration(args);
		assertEquals(0, config.getActions().size());
	}
",non-flaky,5
314,apache_hadoop,TestRpcProgramNfs3.testReaddirplus,"  @Test(timeout = 60000)
  public void testReaddirplus() throws Exception {
    HdfsFileStatus status = nn.getRpcServer().getFileInfo(testdir);
    long dirId = status.getFileId();
    int namenodeId = Nfs3Utils.getNamenodeId(config);
    FileHandle handle = new FileHandle(dirId, namenodeId);
    XDR xdr_req = new XDR();
    READDIRPLUS3Request req = new READDIRPLUS3Request(handle, 0, 0, 3, 2);
    req.serialize(xdr_req);
    
    // Attempt by an unprivileged user should fail.
    READDIRPLUS3Response response1 = nfsd.readdirplus(xdr_req.asReadOnlyWrap(),
        securityHandlerUnpriviledged,
        new InetSocketAddress(""localhost"", 1234));
    assertEquals(""Incorrect return code:"", Nfs3Status.NFS3ERR_ACCES,
        response1.getStatus());

    // Attempt by a privileged user should pass.
    READDIRPLUS3Response response2 = nfsd.readdirplus(xdr_req.asReadOnlyWrap(),
        securityHandler, new InetSocketAddress(""localhost"", 1234));
    assertEquals(""Incorrect return code:"", Nfs3Status.NFS3_OK,
        response2.getStatus());
  }
",non-flaky,5
86091,graylog2_graylog2-server,EventDefinitionHandlerTest.unscheduleWithMissingEventDefinition,"    @Test
    public void unscheduleWithMissingEventDefinition() {
        final String id = ""54e3deadbeefdeadbeef9999"";

        // The event definition should not exist so our test works
        assertThat(eventDefinitionService.get(id)).isNotPresent();

        assertThatThrownBy(() -> handler.unschedule(id))
                .hasMessageContaining(""doesn't exist"")
                .isInstanceOf(IllegalArgumentException.class);
    }
",non-flaky,5
113753,salesforce_reactive-grpc,ReactorConsumerStreamObserverTest.onErrorDelegates,"    @Test
    public void onErrorDelegates() {
        ClientCallStreamObserver<Object> obs = mock(ClientCallStreamObserver.class);
        ReactorConsumerStreamObserver rxObs = new ReactorConsumerStreamObserver();
        Subscriber<Object> sub = mock(Subscriber.class);

        rxObs.beforeStart(obs);
        rxObs.getRxConsumer().subscribe(sub);

        Throwable obj = new Exception(""test error"");
        StepVerifier.create(rxObs.getRxConsumer())
                .then(() -> rxObs.onError(obj))
                .expectErrorMessage(""test error"")
                .verify(Duration.ofSeconds(3));
    }
",non-flaky,5
162710,OpenAPITools_openapi-generator,XmlItemTest.nameStringTest,"    @Test
    public void nameStringTest() {
        // TODO: test nameString
    }
",non-flaky,5
77483,opensearch-project_OpenSearch,FsHealthServiceTests.testLoggingOnHungIO,"    @TestLogging(value = ""org.opensearch.monitor.fs:WARN"", reason = ""to ensure that we log on hung IO at WARN level"")
    public void testLoggingOnHungIO() throws Exception {
        long slowLogThreshold = randomLongBetween(100, 200);
        final Settings settings = Settings.builder().put(FsHealthService.SLOW_PATH_LOGGING_THRESHOLD_SETTING.getKey(),
            slowLogThreshold + ""ms"").build();
        FileSystem fileSystem = PathUtils.getDefaultFileSystem();
        TestThreadPool testThreadPool = new TestThreadPool(getClass().getName(), settings);
        FileSystemFsyncHungProvider disruptFileSystemProvider = new FileSystemFsyncHungProvider(fileSystem,
            randomLongBetween(slowLogThreshold + 1 , 400), testThreadPool);
        fileSystem = disruptFileSystemProvider.getFileSystem(null);
        PathUtilsForTesting.installMock(fileSystem);
        final ClusterSettings clusterSettings = new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS);

        MockLogAppender mockAppender = new MockLogAppender();
        mockAppender.start();

        Logger logger = LogManager.getLogger(FsHealthService.class);
        Loggers.addAppender(logger, mockAppender);
        try (NodeEnvironment env = newNodeEnvironment()) {
            FsHealthService fsHealthService = new FsHealthService(settings, clusterSettings, testThreadPool, env);
            int counter = 0;
            for(Path path : env.nodeDataPaths()){
                mockAppender.addExpectation(
                    new MockLogAppender.SeenEventExpectation(
                        ""test"" + ++counter,
                        FsHealthService.class.getCanonicalName(),
                        Level.WARN,
                        ""health check of ["" + path + ""] took [*ms] which is above the warn threshold*""));
            }

            //disrupt file system
            disruptFileSystemProvider.injectIODelay.set(true);
            fsHealthService.new FsHealthMonitor().run();
            assertEquals(env.nodeDataPaths().length, disruptFileSystemProvider.getInjectedPathCount());
            assertBusy(mockAppender::assertAllExpectationsMatched);
        } finally {
            Loggers.removeAppender(logger, mockAppender);
            mockAppender.stop();
            PathUtilsForTesting.teardown();
            ThreadPool.terminate(testThreadPool, 500, TimeUnit.MILLISECONDS);
        }
    }
",non-flaky,5
94754,ktuukkan_marine-api,Latitude27Test.largeValueIsNotCorrect,"    @Test
    public void largeValueIsNotCorrect() {
        assertFalse(Latitude27.isCorrect(1+90*60*10000));
    }
",non-flaky,5
160389,ConsenSys_teku,ChainDataProviderTest.validatorParameterToIndex_shouldThrowWhenStoreNotFound,"  @Test
  public void validatorParameterToIndex_shouldThrowWhenStoreNotFound() {
    final ChainDataProvider provider =
        new ChainDataProvider(spec, null, mockCombinedChainDataClient);
    assertThrows(
        ChainDataUnavailableException.class, () -> provider.validatorParameterToIndex(""1""));
  }
",non-flaky,5
91451,strapdata_elassandra,RecoveryDuringReplicationTests.testResyncAfterPrimaryPromotion,"    @TestLogging(""org.elasticsearch.index.shard:TRACE,org.elasticsearch.action.resync:TRACE"")
    public void testResyncAfterPrimaryPromotion() throws Exception {
        // TODO: check translog trimming functionality once rollback is implemented in Lucene (ES trimming is done)
        Map<String, String> mappings =
            Collections.singletonMap(""type"", ""{ \""type\"": { \""properties\"": { \""f\"": { \""type\"": \""keyword\""} }}}"");
        try (ReplicationGroup shards = new ReplicationGroup(buildIndexMetaData(2, mappings))) {
            shards.startAll();
            int initialDocs = randomInt(10);

            for (int i = 0; i < initialDocs; i++) {
                final IndexRequest indexRequest = new IndexRequest(index.getName(), ""type"", ""initial_doc_"" + i)
                    .source(""{ \""f\"": \""normal\""}"", XContentType.JSON);
                shards.index(indexRequest);
            }

            boolean syncedGlobalCheckPoint = randomBoolean();
            if (syncedGlobalCheckPoint) {
                shards.syncGlobalCheckpoint();
            }

            final IndexShard oldPrimary = shards.getPrimary();
            final IndexShard newPrimary = shards.getReplicas().get(0);
            final IndexShard justReplica = shards.getReplicas().get(1);

            // simulate docs that were inflight when primary failed
            final int extraDocs = randomInt(5);
            logger.info(""--> indexing {} extra docs"", extraDocs);
            for (int i = 0; i < extraDocs; i++) {
                final IndexRequest indexRequest = new IndexRequest(index.getName(), ""type"", ""extra_doc_"" + i)
                    .source(""{ \""f\"": \""normal\""}"", XContentType.JSON);
                final BulkShardRequest bulkShardRequest = indexOnPrimary(indexRequest, oldPrimary);
                indexOnReplica(bulkShardRequest, shards, newPrimary);
            }

            final int extraDocsToBeTrimmed = randomIntBetween(0, 10);
            logger.info(""--> indexing {} extra docs to be trimmed"", extraDocsToBeTrimmed);
            for (int i = 0; i < extraDocsToBeTrimmed; i++) {
                final IndexRequest indexRequest = new IndexRequest(index.getName(), ""type"", ""extra_trimmed_"" + i)
                    .source(""{ \""f\"": \""trimmed\""}"", XContentType.JSON);
                final BulkShardRequest bulkShardRequest = indexOnPrimary(indexRequest, oldPrimary);
                // have to replicate to another replica != newPrimary one - the subject to trim
                indexOnReplica(bulkShardRequest, shards, justReplica);
            }

            logger.info(""--> resyncing replicas seqno_stats primary {} replica {}"", oldPrimary.seqNoStats(), newPrimary.seqNoStats());
            PrimaryReplicaSyncer.ResyncTask task = shards.promoteReplicaToPrimary(newPrimary).get();
            if (syncedGlobalCheckPoint) {
                assertEquals(extraDocs, task.getResyncedOperations());
            } else {
                assertThat(task.getResyncedOperations(), greaterThanOrEqualTo(extraDocs));
            }
            shards.assertAllEqual(initialDocs + extraDocs);
            for (IndexShard replica : shards.getReplicas()) {
                assertThat(replica.getMaxSeqNoOfUpdatesOrDeletes(),
                    greaterThanOrEqualTo(shards.getPrimary().getMaxSeqNoOfUpdatesOrDeletes()));
            }

            // check translog on replica is trimmed
            int translogOperations = 0;
            try(Translog.Snapshot snapshot = getTranslog(justReplica).newSnapshot()) {
                Translog.Operation next;
                while ((next = snapshot.next()) != null) {
                    translogOperations++;
                    assertThat(""unexpected op: "" + next, (int)next.seqNo(), lessThan(initialDocs + extraDocs));
                    assertThat(""unexpected primaryTerm: "" + next.primaryTerm(), next.primaryTerm(),
                        is(oldPrimary.getPendingPrimaryTerm()));
                    final Translog.Source source = next.getSource();
                    assertThat(source.source.utf8ToString(), is(""{ \""f\"": \""normal\""}""));
                }
            }
            assertThat(translogOperations, is(initialDocs + extraDocs));
        }
    }
",non-flaky,5
98284,spotify_docker-client,RegistryAuthTest.testFromDockerConfig_FullDockerCfg,"  @Test
  public void testFromDockerConfig_FullDockerCfg() throws Exception {
    final RegistryAuth registryAuth = RegistryAuth.fromDockerConfig(getTestFilePath(
        ""dockerConfig/fullDockerCfg"")).build();
    assertThat(registryAuth, equalTo(DOCKER_AUTH_CONFIG));
  }
",non-flaky,5
21183,androidx_androidx,SimplePreferenceComparisonCallbackTest.testIconComparison,"    @Test
    public void testIconComparison() throws Exception {
        final Drawable drawable1 = new ComparisonDrawable(1);
        final Drawable drawable1a = new ComparisonDrawable(1);
        final Drawable drawable2 = new ComparisonDrawable(2);

        mPref1.setIcon(drawable1);

        assertFalse(""Compare non-null to null"",
                mComparisonCallback.arePreferenceContentsTheSame(mPref1, mPref2));
        assertFalse(""Compare null to non-null"",
                mComparisonCallback.arePreferenceContentsTheSame(mPref2, mPref1));

        mPref2.setIcon(drawable1);

        assertTrue(""Compare aliased"",
                mComparisonCallback.arePreferenceContentsTheSame(mPref1, mPref2));

        mPref2.setIcon(drawable1a);

        assertTrue(""Compare equal"",
                mComparisonCallback.arePreferenceContentsTheSame(mPref1, mPref2));

        mPref2.setIcon(drawable2);

        assertFalse(""Compare unequal"",
                mComparisonCallback.arePreferenceContentsTheSame(mPref1, mPref2));
    }
",non-flaky,5
38209,palantir_atlasdb,RocksDbKeyValueServiceTest.testGetRowCellOverlap,"    @Test
    public void testGetRowCellOverlap() {
        final Cell cell = Cell.create(""12"".getBytes(), ""34"".getBytes());
        final Cell cell2 = Cell.create(""1"".getBytes(), ""23"".getBytes());
        db.put(TABLE, ImmutableMap.of(cell, ""v1"".getBytes()), 2);
        db.put(TABLE, ImmutableMap.of(cell2, ""v2"".getBytes()), 2);
        final Map<Cell, Value> rows = db.getRows(TABLE, ImmutableList.of(""12"".getBytes()), ColumnSelection.all(), 3);
        assertEquals(1, rows.size());
    }
",non-flaky,5
95707,togglz_togglz,EnumBasedFeatureProviderTest.shouldFailForNull,"    @Test(expected = IllegalArgumentException.class)
    public void shouldFailForNull() {
        new EnumBasedFeatureProvider(null);
    }
",non-flaky,5
177233,line_armeria,PropertiesEndpointGroupTest.resourceWithDefaultPort,"    @Test
    public void resourceWithDefaultPort() {
        final PropertiesEndpointGroup endpointGroupA =
                PropertiesEndpointGroup.builder(getClass().getClassLoader(),
                                                ""server-list.properties"",
                                                ""serverA.hosts"")
                                       .defaultPort(80)
                                       .build();

        final PropertiesEndpointGroup endpointGroupB =
                PropertiesEndpointGroup.builder(getClass().getClassLoader(),
                                                ""server-list.properties"",
                                                ""serverB.hosts"")
                                       .defaultPort(8080)
                                       .build();

        assertThat(endpointGroupA.endpoints()).containsExactlyInAnyOrder(Endpoint.parse(""127.0.0.1:8080""),
                                                                         Endpoint.parse(""127.0.0.1:8081""),
                                                                         Endpoint.parse(""127.0.0.1:80""));
        assertThat(endpointGroupB.endpoints()).containsExactlyInAnyOrder(Endpoint.parse(""127.0.0.1:8082""),
                                                                         Endpoint.parse(""127.0.0.1:8083""));
    }
",non-flaky,5
86133,graylog2_graylog2-server,TemplateFieldValueProviderTest.templateNumberFormatting,"    @Test
    public void templateNumberFormatting() {
        final TestEvent event = new TestEvent();
        final EventWithContext eventWithContext = EventWithContext.create(event, newMessage(ImmutableMap.of(""count"", 10241234, ""avg"", 1024.42)));

        final FieldValue fieldValue = newTemplate(""count: ${source.count} avg: ${source.avg}"").doGet(""test"", eventWithContext);

        assertThat(fieldValue.value()).isEqualTo(""count: 10241234 avg: 1024.42"");
    }
",non-flaky,5
86082,graylog2_graylog2-server,EventDefinitionHandlerTest.createWithoutSchedule,"    @Test
    public void createWithoutSchedule() {
        final EventDefinitionDto newDto = EventDefinitionDto.builder()
                .title(""Test"")
                .description(""A test event definition"")
                .config(TestEventProcessorConfig.builder()
                        .message(""This is a test event processor"")
                        .searchWithinMs(300000)
                        .executeEveryMs(60001)
                        .build())
                .priority(3)
                .alert(false)
                .notificationSettings(EventNotificationSettings.withGracePeriod(60000))
                .keySpec(ImmutableList.of(""a"", ""b""))
                .notifications(ImmutableList.of())
                .build();

        final EventDefinitionDto dto = handler.createWithoutSchedule(newDto, Optional.empty());

        // Handler should create the event definition
        assertThat(eventDefinitionService.get(dto.id())).isPresent();

        // Handler should NOT create a job definition for the event definition/processor
        assertThat(jobDefinitionService.getByConfigField(""event_definition_id"", dto.id())).isNotPresent();

        // And the handler should also NOT create a job trigger for the created job definition
        assertThat(jobTriggerService.nextRunnableTrigger()).isNotPresent();
    }
",non-flaky,5
76993,Tencent_Firestorm,CoordinatorGrpcTest.getShuffleRegisterInfoTest,"  @Test
  public void getShuffleRegisterInfoTest() {
    GetShuffleAssignmentsResponse testResponse = generateShuffleAssignmentsResponse();
    Map<ShuffleServerInfo, List<PartitionRange>> serverToPartitionRanges =
        coordinatorClient.getServerToPartitionRanges(testResponse);
    List<ShuffleRegisterInfo> expected = Arrays.asList(
        new ShuffleRegisterInfo(new ShuffleServerInfo(""id1"", ""0.0.0.1"", 100),
            Lists.newArrayList(new PartitionRange(0, 1))),
        new ShuffleRegisterInfo(new ShuffleServerInfo(""id2"", ""0.0.0.2"", 100),
            Lists.newArrayList(new PartitionRange(0, 1))),
        new ShuffleRegisterInfo(new ShuffleServerInfo(""id3"", ""0.0.0.3"", 100),
            Lists.newArrayList(new PartitionRange(2, 3))),
        new ShuffleRegisterInfo(new ShuffleServerInfo(""id4"", ""0.0.0.4"", 100),
            Lists.newArrayList(new PartitionRange(2, 3))));
    assertEquals(4, serverToPartitionRanges.size());
    for (ShuffleRegisterInfo sri : expected) {
      List<PartitionRange> partitionRanges = serverToPartitionRanges.get(sri.getShuffleServerInfo());
      assertEquals(sri.getPartitionRanges(), partitionRanges);
    }
  }
",non-flaky,5
76690,quarkusio_quarkus,SimpleET.testGreetingEndpoint,"    @Test
    public void testGreetingEndpoint() {
        String uuid = UUID.randomUUID().toString();
        given()
                .pathParam(""name"", uuid)
                .when().get(""/hello/greeting/{name}"")
                .then()
                .statusCode(200)
                .body(is(""hello "" + uuid));
    }
",non-flaky,5
156148,soot-oss_soot,ClassRenamerTest.getOrAddNewName_nullClassName,"  @Test
  public void getOrAddNewName_nullClassName() {
    ClassRenamer.v().setRemovePackages(false);
    ClassRenamer.v().setRenamePackages(false);

    final String newName = ClassRenamer.v().getOrAddNewName(""pac.age"", null);
    assertThat(newName, startsWith(""pac.age.""));
    assertThat(newName.split(""\\."").length, equalTo(3));

    assertThat(ClassRenamer.v().getOrAddNewName(""pac.age"", null), not(equalTo(newName)));
  }
",non-flaky,5
78235,apache_beam,SimplePushbackSideInputDoFnRunnerTest.processElementSideInputNotReadySomeWindows,"  @Test
  public void processElementSideInputNotReadySomeWindows() {
    when(reader.isReady(Mockito.eq(singletonView), Mockito.eq(GlobalWindow.INSTANCE)))
        .thenReturn(false);
    when(reader.isReady(
            Mockito.eq(singletonView),
            org.mockito.AdditionalMatchers.not(Mockito.eq(GlobalWindow.INSTANCE))))
        .thenReturn(true);

    SimplePushbackSideInputDoFnRunner<Integer, Integer> runner =
        createRunner(ImmutableList.of(singletonView));

    IntervalWindow littleWindow = new IntervalWindow(new Instant(-500L), new Instant(0L));
    IntervalWindow bigWindow =
        new IntervalWindow(BoundedWindow.TIMESTAMP_MIN_VALUE, new Instant(250L));
    WindowedValue<Integer> multiWindow =
        WindowedValue.of(
            2,
            new Instant(-2),
            ImmutableList.of(littleWindow, bigWindow, GlobalWindow.INSTANCE),
            PaneInfo.NO_FIRING);
    Iterable<WindowedValue<Integer>> multiWindowPushback =
        runner.processElementInReadyWindows(multiWindow);
    assertThat(
        multiWindowPushback,
        containsInAnyOrder(WindowedValue.timestampedValueInGlobalWindow(2, new Instant(-2L))));
    assertThat(
        underlying.inputElems,
        containsInAnyOrder(
            WindowedValue.of(
                2, new Instant(-2), ImmutableList.of(littleWindow), PaneInfo.NO_FIRING),
            WindowedValue.of(2, new Instant(-2), ImmutableList.of(bigWindow), PaneInfo.NO_FIRING)));
  }
",non-flaky,5
114058,aws_aws-sdk-java-v2,EnhancedTypeTest.helperCreationMethodsWork,"    @Test
    public void helperCreationMethodsWork() {
        assertThat(EnhancedType.of(String.class).rawClass()).isEqualTo(String.class);

        assertThat(EnhancedType.listOf(String.class)).satisfies(v -> {
            assertThat(v.rawClass()).isEqualTo(List.class);
            assertThat(v.rawClassParameters()).hasSize(1);
            assertThat(v.rawClassParameters().get(0).rawClass()).isEqualTo(String.class);
        });

        assertThat(EnhancedType.mapOf(String.class, Integer.class)).satisfies(v -> {
            assertThat(v.rawClass()).isEqualTo(Map.class);
            assertThat(v.rawClassParameters()).hasSize(2);
            assertThat(v.rawClassParameters().get(0).rawClass()).isEqualTo(String.class);
            assertThat(v.rawClassParameters().get(1).rawClass()).isEqualTo(Integer.class);
        });
    }
",non-flaky,5
134990,undertow-io_undertow,AnnotatedEndpointTest.testWebSocketInRootContext,"    @Test
    public void testWebSocketInRootContext() throws Exception {
        final byte[] payload = ""hello"".getBytes();
        final FutureResult latch = new FutureResult();

        WebSocketTestClient client = new WebSocketTestClient(WebSocketVersion.V13, new URI(""ws://"" + DefaultServer.getHostAddress(""default"") + "":"" + DefaultServer.getHostPort(""default"") + ""/ws""));
        client.connect();
        client.send(new TextWebSocketFrame(Unpooled.wrappedBuffer(payload)), new FrameChecker(TextWebSocketFrame.class, ""hello"".getBytes(), latch));
        latch.getIoFuture().get();
        client.destroy();
    }
",non-flaky,5
21011,NationalSecurityAgency_timely,TimelyTcpIT.testPersistence,"    @Test
    public void testPersistence() throws Exception {
        final Server s = new Server(conf);
        s.run();
        try {
            put(""sys.cpu.user "" + TEST_TIME + "" 1.0 tag1=value1 tag2=value2"",
                    ""sys.cpu.idle "" + (TEST_TIME + 1) + "" 1.0 tag3=value3 tag4=value4"",
                    ""sys.cpu.idle "" + (TEST_TIME + 2) + "" 1.0 tag3=value3 tag4=value4"");
            sleepUninterruptibly(WAIT_SECONDS, TimeUnit.SECONDS);
        } finally {
            s.shutdown();
        }
        final ZooKeeperInstance inst = new ZooKeeperInstance(mac.getClientConfig());
        final Connector connector = inst.getConnector(""root"", new PasswordToken(""secret"".getBytes(UTF_8)));
        assertTrue(connector.namespaceOperations().exists(""timely""));
        assertTrue(connector.tableOperations().exists(""timely.metrics""));
        assertTrue(connector.tableOperations().exists(""timely.meta""));
        int count = 0;
        for (final Entry<Key, Value> entry : connector.createScanner(""timely.metrics"", Authorizations.EMPTY)) {
            LOG.info(""Entry: "" + entry);
            final double value = ByteBuffer.wrap(entry.getValue().get()).getDouble();
            assertEquals(1.0, value, 1e-9);
            count++;
        }
        assertEquals(6, count);
        count = 0;
        for (final Entry<Key, Value> entry : connector.createScanner(""timely.meta"", Authorizations.EMPTY)) {
            LOG.info(""Meta entry: "" + entry);
            count++;
        }
        assertEquals(10, count);
        // count w/out versioning iterator to make sure that the optimization
        // for writing is working
        connector.tableOperations().removeIterator(""timely.meta"", ""vers"", EnumSet.of(IteratorScope.scan));
        // wait for zookeeper propagation
        sleepUninterruptibly(WAIT_SECONDS, TimeUnit.SECONDS);
        count = 0;
        for (final Entry<Key, Value> entry : connector.createScanner(""timely.meta"", Authorizations.EMPTY)) {
            LOG.info(""Meta no vers iter: "" + entry);
            count++;
        }
        assertEquals(10, count);
    }
",non-flaky,5
77457,opensearch-project_OpenSearch,WildflyIT.testRestClient,"@TestRuleLimitSysouts.Limit(bytes = 14000)
    public void testRestClient() throws URISyntaxException, IOException {
        final String baseUrl = buildBaseUrl();

        try (CloseableHttpClient client = HttpClientBuilder.create().build()) {
            final String endpoint = baseUrl + ""/employees/1"";
            logger.info(""Connecting to uri: "" + baseUrl);

            final HttpPut put = new HttpPut(new URI(endpoint));

            final String body = ""{""
                + ""  \""first_name\"": \""John\"",""
                + ""  \""last_name\"": \""Smith\"",""
                + ""  \""age\"": 25,""
                + ""  \""about\"": \""I love to go rock climbing\"",""
                + ""  \""interests\"": [""
                + ""    \""sports\"",""
                + ""    \""music\""""
                + ""  ]""
                + ""}"";

            put.setEntity(new StringEntity(body, ContentType.APPLICATION_JSON));
            try (CloseableHttpResponse response = client.execute(put)) {
                int status = response.getStatusLine().getStatusCode();
                assertThat(
                    ""expected a 201 response but got: "" + status + "" - body: "" + EntityUtils.toString(response.getEntity()),
                    status,
                    equalTo(201)
                );
            }

            logger.info(""Fetching resource at "" + endpoint);

            final HttpGet get = new HttpGet(new URI(endpoint));
            try (
                CloseableHttpResponse response = client.execute(get);
                XContentParser parser = JsonXContent.jsonXContent.createParser(
                    new NamedXContentRegistry(ClusterModule.getNamedXWriteables()),
                    DeprecationHandler.THROW_UNSUPPORTED_OPERATION,
                    response.getEntity().getContent()
                )
            ) {
                final Map<String, Object> map = parser.map();
                assertThat(map.get(""first_name""), equalTo(""John""));
                assertThat(map.get(""last_name""), equalTo(""Smith""));
                assertThat(map.get(""age""), equalTo(25));
                assertThat(map.get(""about""), equalTo(""I love to go rock climbing""));
                final Object interests = map.get(""interests"");
                assertThat(interests, instanceOf(List.class));
                @SuppressWarnings(""unchecked"")
                final List<String> interestsAsList = (List<String>) interests;
                assertThat(interestsAsList, containsInAnyOrder(""sports"", ""music""));
            }
        }
    }
",non-flaky,5
76691,quarkusio_quarkus,ParamET.testHelloEndpoint,"    @Test
    public void testHelloEndpoint() {
        given()
                .when().get(""/hello"")
                .then()
                .statusCode(200)
                .body(is(""hello""));
    }
",non-flaky,5
38269,palantir_atlasdb,AbstractSerializableTransactionTest.testCellReadWriteFailure2,"    @Test
    public void testCellReadWriteFailure2() {
        String initialValue = ""100"";
        Transaction t0 = startTransaction();
        put(t0, ""row1"", ""col1"", initialValue);
        put(t0, ""row2"", ""col1"", initialValue);
        t0.commit();

        Transaction t1 = startTransaction();
        BatchingVisitables.copyToList(t1.getRange(TEST_TABLE, RangeRequest.builder().build()));
        put(t1, ""row22"", ""col1"", initialValue);

        Transaction t2 = startTransaction();
        put(t2, ""row2"", ""col1"", ""101"");
        t2.commit();

        try {
            t1.commit();
            fail();
        } catch (TransactionSerializableConflictException e) {
            // this is expectecd to throw because it is a write skew
        }
    }
",non-flaky,5
114131,aws_aws-sdk-java-v2,LocalDateTimeAttributeConverterTest.localDateTimeAttributeConverterNotAcceptZonedTimeTest,"    @Test
    public void localDateTimeAttributeConverterNotAcceptZonedTimeTest() {
        assertFails(() -> transformTo(converter, EnhancedAttributeValue.fromString(""1988-05-21T00:12:00+01:00[Europe/Paris]"")
                                                                       .toAttributeValue()));
    }
",non-flaky,5
135053,undertow-io_undertow,NetworkUtilsAddressParsingTestCase.testIpV6Hostname,"    @Test(expected = IOException.class)
    public void testIpV6Hostname() throws IOException {
        NetworkUtils.parseIpv6Address(""localhost"");
    }
",non-flaky,5
98249,apache_jackrabbit,ComparableArrayTest.testInsert,"    @Test
    public void testInsert() throws RepositoryException {
        ComparableArray ca = new ComparableArray(""a"", 1);
        assertEquals(""a"", ca.toString());
        assertEquals(1, ca.getOffset());

        // insert before
        ca.insert(""b"", 0);
        assertEquals(""[b, a]"", ca.toString());
        assertEquals(0, ca.getOffset());

        // insert after
        ca.insert(""c"", 3);
        assertEquals(""[b, a, null, c]"", ca.toString());
        assertEquals(0, ca.getOffset());

        // insert inside
        ca.insert(""d"", 2);
        assertEquals(""[b, a, d, c]"", ca.toString());
        assertEquals(0, ca.getOffset());
    }
",non-flaky,5
112092,apache_shardingsphere-elasticjob,AverageAllocationJobShardingStrategyTest.shardingForServersLessThanShardingCountAliquantFor10ShardingCountAnd3Servers,"    @Test
    public void shardingForServersLessThanShardingCountAliquantFor10ShardingCountAnd3Servers() {
        Map<JobInstance, List<Integer>> expected = new LinkedHashMap<>(3, 1);
        expected.put(new JobInstance(""host0@-@0""), Arrays.asList(0, 1, 2, 9));
        expected.put(new JobInstance(""host1@-@0""), Arrays.asList(3, 4, 5));
        expected.put(new JobInstance(""host2@-@0""), Arrays.asList(6, 7, 8));
        assertThat(jobShardingStrategy.sharding(Arrays.asList(new JobInstance(""host0@-@0""), new JobInstance(""host1@-@0""), new JobInstance(""host2@-@0"")), ""test_job"", 10), is(expected));
    }
",non-flaky,5
170477,eclipse_jetty.project,ObjectMBeanUtilTest.testSetAttributesForCollectionTypeAttribute,"    @Test
    public void testSetAttributesForCollectionTypeAttribute() throws Exception
    {
        ArrayList<Derived> aliasNames = new ArrayList<>(Arrays.asList(getArrayTypeAttribute()));

        derivedManaged.setAliasNames(aliasNames);
        mBeanDerivedManaged.getMBeanInfo();

        assertNotNull(mBeanDerivedManaged.getAttribute(""aliasNames""), ""Address object shouldn't be null"");
        assertNull(mBeanDerivedManaged.getAttribute(""derived""), ""Derived object shouldn't registered with container so its value will be null"");
    }
",non-flaky,5
89304,apache_samza,TestMonitorService.monitor,"  @Test
  public void testScheduledExecutorSchedulingProvider() {
    // Test that the monitor is scheduled by the ScheduledExecutorSchedulingProvider
    ScheduledExecutorService executorService = Executors.newScheduledThreadPool(1);

    // notifyingMonitor.monitor() should be called repeatedly.
    final CountDownLatch wasCalledLatch = new CountDownLatch(3);

    final Monitor notifyingMonitor = new Monitor() {
      @Override
      public void monitor() {
        wasCalledLatch.countDown();
      }
",non-flaky,5
160355,ConsenSys_teku,SlashingProtectionExporterTest.shouldRequirePubkeyInFilename,"  @Test
  public void shouldRequirePubkeyInFilename(@TempDir Path tempDir) throws URISyntaxException {
    final SlashingProtectionExporter exporter = new SlashingProtectionExporter(tempDir);
    final Optional<String> error =
        exporter.readSlashProtectionFile(
            new File(Resources.getResource(""slashProtectionWithGenesisRoot.yml"").toURI()),
            LOG::debug);
    assertThat(error.orElse(""""))
        .contains(""Public key in file slashProtectionWithGenesisRoot.yml does not appear valid."");
  }
",non-flaky,5
113990,apache_struts,URLDecoderUtilTest.testURLDecodeStringValidIso88591Middle,"    @Test
    public void testURLDecodeStringValidIso88591Middle() {

        String result = URLDecoderUtil.decode(""xx%41xx"", ""ISO-8859-1"");
        assertEquals(""xxAxx"", result);
    }
",non-flaky,5
160428,ConsenSys_teku,ValidatorDataProviderTest.getAttesterDuties_shouldHandleEmptyIndexesList,"  @TestTemplate
  public void getAttesterDuties_shouldHandleEmptyIndexesList() {
    final Bytes32 previousTargetRoot = dataStructureUtil.randomBytes32();
    when(validatorApiChannel.getAttestationDuties(eq(ONE), any()))
        .thenReturn(
            completedFuture(
                Optional.of(
                    new tech.pegasys.teku.validator.api.AttesterDuties(
                        previousTargetRoot, emptyList()))));
    final SafeFuture<Optional<PostAttesterDutiesResponse>> future =
        provider.getAttesterDuties(UInt64.ONE, List.of());
    assertThat(future).isCompleted();
    Optional<PostAttesterDutiesResponse> maybeData = future.join();
    assertThat(maybeData.isPresent()).isTrue();
    assertThat(maybeData.get().data).isEmpty();
  }
",non-flaky,5
43058,trinodb_trino,BaseConnectorTest.testDescribeTable,"    @Test
    public void testDescribeTable()
    {
        MaterializedResult expectedColumns = MaterializedResult.resultBuilder(getSession(), VARCHAR, VARCHAR, VARCHAR, VARCHAR)
                .row(""orderkey"", ""bigint"", """", """")
                .row(""custkey"", ""bigint"", """", """")
                .row(""orderstatus"", ""varchar(1)"", """", """")
                .row(""totalprice"", ""double"", """", """")
                .row(""orderdate"", ""date"", """", """")
                .row(""orderpriority"", ""varchar(15)"", """", """")
                .row(""clerk"", ""varchar(15)"", """", """")
                .row(""shippriority"", ""integer"", """", """")
                .row(""comment"", ""varchar(79)"", """", """")
                .build();
        MaterializedResult actualColumns = computeActual(""DESCRIBE orders"");
        assertEquals(actualColumns, expectedColumns);
    }
",non-flaky,5
162424,testcontainers_testcontainers-java,GenericContainerRuleTest.simpleMongoDbTest,"    @Test
    public void simpleMongoDbTest() {
        MongoClient mongoClient = new MongoClient(mongo.getContainerIpAddress(), mongo.getMappedPort(MONGO_PORT));
        MongoDatabase database = mongoClient.getDatabase(""test"");
        MongoCollection<Document> collection = database.getCollection(""testCollection"");

        Document doc = new Document(""name"", ""foo"")
                .append(""value"", 1);
        collection.insertOne(doc);

        Document doc2 = collection.find(new Document(""name"", ""foo"")).first();
        assertEquals(""A record can be inserted into and retrieved from MongoDB"", 1, doc2.get(""value""));
    }
",non-flaky,5
20927,NationalSecurityAgency_timely,TagListParserTest.testListCombineMap,"    @Test
    public void testListCombineMap() {
        Map<String, String> map = new TreeMap<>();
        map.put(""tag1"", ""value1"");
        map.put(""tag2"", ""value2"");
        String combined = new TagListParser().combine(map);
        Assert.assertEquals(""tag1=value1,tag2=value2"", combined);
    }
",non-flaky,5
91418,strapdata_elassandra,TokenAuthIntegTests.testExpiredTokensDeletedAfterExpiration,"    @TestLogging(""org.elasticsearch.xpack.security.authc:DEBUG"")
    public void testExpiredTokensDeletedAfterExpiration() throws Exception {
        final Client client = client().filterWithHeader(Collections.singletonMap(""Authorization"",
                UsernamePasswordToken.basicAuthHeaderValue(SecuritySettingsSource.TEST_SUPERUSER,
                        SecuritySettingsSourceField.TEST_PASSWORD_SECURE_STRING)));
        SecurityClient securityClient = new SecurityClient(client);
        CreateTokenResponse response = securityClient.prepareCreateToken()
                .setGrantType(""password"")
                .setUsername(SecuritySettingsSource.TEST_USER_NAME)
                .setPassword(new SecureString(SecuritySettingsSourceField.TEST_PASSWORD.toCharArray()))
                .get();

        Instant created = Instant.now();

        InvalidateTokenResponse invalidateResponse = securityClient
                .prepareInvalidateToken(response.getTokenString())
                .setType(InvalidateTokenRequest.Type.ACCESS_TOKEN)
                .get();
        assertTrue(invalidateResponse.isCreated());
        AtomicReference<String> docId = new AtomicReference<>();
        assertBusy(() -> {
            SearchResponse searchResponse = client.prepareSearch(SecurityIndexManager.SECURITY_INDEX_NAME)
                    .setSource(SearchSourceBuilder.searchSource()
                            .query(QueryBuilders.termQuery(""doc_type"", TokenService.INVALIDATED_TOKEN_DOC_TYPE)))
                    .setSize(1)
                    .setTerminateAfter(1)
                    .get();
            assertThat(searchResponse.getHits().getTotalHits(), equalTo(1L));
            docId.set(searchResponse.getHits().getAt(0).getId());
        });

        // hack doc to modify the time to the day before
        Instant dayBefore = created.minus(1L, ChronoUnit.DAYS);
        assertTrue(Instant.now().isAfter(dayBefore));
        client.prepareUpdate(SecurityIndexManager.SECURITY_INDEX_NAME, ""doc"", docId.get())
                .setDoc(""expiration_time"", dayBefore.toEpochMilli())
                .setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE)
                .get();

        AtomicBoolean deleteTriggered = new AtomicBoolean(false);
        assertBusy(() -> {
            if (deleteTriggered.compareAndSet(false, true)) {
                // invalidate a invalid token... doesn't matter that it is bad... we just want this action to trigger the deletion
                try {
                    securityClient.prepareInvalidateToken(""fooobar"")
                            .setType(randomFrom(InvalidateTokenRequest.Type.values()))
                            .execute()
                            .actionGet();
                } catch (ElasticsearchSecurityException e) {
                    assertEquals(""token malformed"", e.getMessage());
                }
            }
            client.admin().indices().prepareRefresh(SecurityIndexManager.SECURITY_INDEX_NAME).get();
            SearchResponse searchResponse = client.prepareSearch(SecurityIndexManager.SECURITY_INDEX_NAME)
                    .setSource(SearchSourceBuilder.searchSource()
                            .query(QueryBuilders.termQuery(""doc_type"", TokenService.INVALIDATED_TOKEN_DOC_TYPE)))
                    .setSize(0)
                    .setTerminateAfter(1)
                    .get();
            assertThat(searchResponse.getHits().getTotalHits(), equalTo(0L));
        }, 30, TimeUnit.SECONDS);
    }
",non-flaky,5
113773,salesforce_reactive-grpc,CancellableStreamObserverTest.run,"    @Test
    public void statusExceptionTriggersHandler() {
        ClientResponseObserver<Object, Object> delegate = mock(ClientResponseObserver.class);
        final AtomicBoolean called = new AtomicBoolean(false);

        CancellableStreamObserver<Object, Object> observer = new CancellableStreamObserver<Object, Object>(delegate, new Runnable() {
            @Override
            public void run() {
                called.set(true);
            }
",non-flaky,5
122560,vespa-engine_vespa,CommandLineTest.waitingForTerminationExceptionStillClosesChild,"    @Test
    public void waitingForTerminationExceptionStillClosesChild() {
        TestChildProcess2 child = new TestChildProcess2(0, """");
        child.throwInWaitForTermination(new NegativeArraySizeException());
        terminal.interceptCommand(commandLine.toString(), command -> child);
        assertFalse(child.closeCalled());
        try {
            commandLine.add(""foo"").execute();
            fail();
        } catch (NegativeArraySizeException e) {
            // OK
        }

        assertTrue(child.closeCalled());
    }
",non-flaky,5
170479,eclipse_jetty.project,ObjectMBeanUtilTest.testInvokeMBeanException,"    @Test
    public void testInvokeMBeanException()
    {
        ReflectionException e = assertThrows(ReflectionException.class, () -> objectMBean.invoke(""doodle2"", new Object[0], new String[0]));

        assertNotNull(e, ""An ReflectionException must have occurred by now as doodle2() in Derived bean is private"");
    }
",non-flaky,5
160429,ConsenSys_teku,ValidatorDataProviderTest.getAttesterDuties_shouldReturnDutiesForKnownValidator,"  @TestTemplate
  public void getAttesterDuties_shouldReturnDutiesForKnownValidator() {
    AttesterDuty v1 = new AttesterDuty(BLSTestUtil.randomPublicKey(0), 1, 2, 3, 15, 4, ONE);
    AttesterDuty v2 = new AttesterDuty(BLSTestUtil.randomPublicKey(1), 11, 12, 13, 15, 14, ZERO);
    when(validatorApiChannel.getAttestationDuties(eq(ONE), any()))
        .thenReturn(
            completedFuture(
                Optional.of(
                    new AttesterDuties(dataStructureUtil.randomBytes32(), List.of(v1, v2)))));

    final SafeFuture<Optional<PostAttesterDutiesResponse>> future =
        provider.getAttesterDuties(ONE, List.of(1, 11));
    assertThat(future).isCompleted();
    final Optional<PostAttesterDutiesResponse> maybeList = future.join();
    final PostAttesterDutiesResponse list = maybeList.orElseThrow();
    assertThat(list.data).containsExactlyInAnyOrder(asAttesterDuty(v1), asAttesterDuty(v2));
  }
",non-flaky,5
26715,MundaneImmortal_pair-distribution-app,PairTest.testIsCommunitydPairFalse,"	@Test
	public void testIsCommunitydPairFalse()  {
		Pair subject = new Pair();
		
		subject.setCommunityPair(false);
		
		assertThat(subject.isCommunityPair(), is(false));
	}
",non-flaky,5
162705,OpenAPITools_openapi-generator,XmlItemTest.attributeStringTest,"    @Test
    public void attributeStringTest() {
        // TODO: test attributeString
    }
",non-flaky,5
97733,vojtechhabarta_typescript-generator,OptionalAnnotationTest.testJavaxNullableWithJackson2,"    @Test
    public void testJavaxNullableWithJackson2() {
        testJavaxNullableUsingTypeScriptGenerator(JsonLibrary.jackson2);
    }
",non-flaky,5
178005,aosp-mirror_platform_frameworks_support,BrowseSupportFragmentTest.run,"    @Test
    public void testSelectCardOnARow() throws Throwable {
        final int selectRow = 10;
        final int selectItem = 20;
        Intent intent = new Intent();
        final long dataLoadingDelay = 1000;
        intent.putExtra(BrowseSupportFragmentTestActivity.EXTRA_LOAD_DATA_DELAY, dataLoadingDelay);
        intent.putExtra(BrowseSupportFragmentTestActivity.EXTRA_ADD_TO_BACKSTACK , true);
        mActivity = activityTestRule.launchActivity(intent);

        Thread.sleep(dataLoadingDelay + TRANSITION_LENGTH);

        Presenter.ViewHolderTask itemTask = Mockito.spy(
                new ItemSelectionTask(mActivity, selectRow));

        final ListRowPresenter.SelectItemViewHolderTask task =
                new ListRowPresenter.SelectItemViewHolderTask(selectItem);
        task.setItemTask(itemTask);

        mActivity.runOnUiThread(new Runnable() {
            @Override
            public void run() {
                mActivity.getBrowseTestSupportFragment().setSelectedPosition(selectRow, true, task);
            }
",non-flaky,5
135080,undertow-io_undertow,CookiesTestCase.testSimpleJSONObjectInRequestCookies,"    @Test
    public void testSimpleJSONObjectInRequestCookies() {
        Map<String, Cookie> cookies = Cookies.parseRequestCookies(2, true, Arrays.asList(
                ""CUSTOMER={\""v1\"":1, \""id\"":\""some_unique_id\"", \""c\"":\""http://www.google.com?q=love me\""};""
                + "" $Domain=LOONEY_TUNES; $Version=1; $Path=/; SHIPPING=FEDEX""));

        Cookie cookie = cookies.get(""CUSTOMER"");
        Assert.assertEquals(""CUSTOMER"", cookie.getName());
        Assert.assertEquals(""{\""v1\"":1, \""id\"":\""some_unique_id\"", \""c\"":\""http://www.google.com?q=love me\""}"",
               cookie.getValue());
        Assert.assertEquals(""LOONEY_TUNES"", cookie.getDomain());
        Assert.assertEquals(1, cookie.getVersion());
        Assert.assertEquals(""/"", cookie.getPath());

        cookie = cookies.get(""SHIPPING"");
        Assert.assertEquals(""SHIPPING"", cookie.getName());
        Assert.assertEquals(""FEDEX"", cookie.getValue());
        Assert.assertEquals(""LOONEY_TUNES"", cookie.getDomain());
        Assert.assertEquals(1, cookie.getVersion());
        Assert.assertEquals(""/"", cookie.getPath());
    }
",non-flaky,5
177161,line_armeria,SamlRequestIdManagerTest.shouldBeDifferentToEachOther,"    @Test
    public void shouldBeDifferentToEachOther() throws UnsupportedEncodingException {
        final SamlRequestIdManager manager =
                SamlRequestIdManager.ofJwt(""me"", ""test"", 60, 5);

        final String id1 = manager.newId();
        final String id2 = manager.newId();
        final String id3 = manager.newId();

        assertThat(id1).isNotEqualTo(id2).isNotEqualTo(id3);
        assertThat(id2).isNotEqualTo(id3);
    }
",non-flaky,5
348,apache_hadoop,TestNetworkTopology.testRacks,"  @Test
  public void testRacks() throws Exception {
    assertEquals(cluster.getNumOfRacks(), 6);
    assertTrue(cluster.isOnSameRack(dataNodes[0], dataNodes[1]));
    assertFalse(cluster.isOnSameRack(dataNodes[1], dataNodes[2]));
    assertTrue(cluster.isOnSameRack(dataNodes[2], dataNodes[3]));
    assertTrue(cluster.isOnSameRack(dataNodes[3], dataNodes[4]));
    assertFalse(cluster.isOnSameRack(dataNodes[4], dataNodes[5]));
    assertTrue(cluster.isOnSameRack(dataNodes[5], dataNodes[6]));
  }
",non-flaky,5
99740,apache_cassandra,FQLReplayTest.testBadPort,"    @Test(expected = RuntimeException.class)
    public void testBadPort()
    {
        fromString(""aaa:bbb@abc.com:xyz"");
    }
",non-flaky,5
77682,pholser_junit-quickcheck,PrimitivePropertyParameterTypesTest.shouldHold,"    @Test public void rightOpenEndedRangedPrimitiveByte() {
        @Property public void shouldHold(@InRange(min = ""0"") byte b) {
            assertThat(b, greaterThanOrEqualTo((byte) 0));
        }
",non-flaky,5
84593,apache_zookeeper,BinaryInputArchiveTest.testInt,"    @Test
    public void testInt() {
        final int expected = 4;
        final String tag = ""tag1"";
        checkWriterAndReader(
                (oa) -> oa.writeInt(expected, tag),
                (ia) -> {
                    int actual = ia.readInt(tag);
                    assertEquals(expected, actual);
                }
        );
    }
",non-flaky,5
21187,androidx_androidx,SimplePreferenceComparisonCallbackTest.testDropDownComparison,"    @Test
    public void testDropDownComparison() throws Exception {
        final Preference dropdown1 =
                new DropDownPreference(InstrumentationRegistry.getTargetContext());
        final Preference dropdown2 =
                new DropDownPreference(InstrumentationRegistry.getTargetContext());

        assertTrue(""Compare aliased drop down pref"",
                mComparisonCallback.arePreferenceContentsTheSame(dropdown1, dropdown1));
        assertFalse(""Compare distinct drop down prefs"",
                mComparisonCallback.arePreferenceContentsTheSame(dropdown1, dropdown2));
    }
",non-flaky,5
98087,vert-x3_vertx-mongo-client,ParsingSSLOptionsTest.ssl_should_be_disabled_by_default,"  @Test
  public void ssl_should_be_disabled_by_default() {
    // given
    final JsonObject configWithoutSSLInfo = new JsonObject().put(
      ""connection_string"", ""mongodb://localhost:27017/mydb?replicaSet=myRs""
    );

    // when
    final MongoClientSettings parsedSettings = new MongoClientOptionsParser(vertx, configWithoutSSLInfo).settings();

    // then
    assertFalse(parsedSettings.getSslSettings().isEnabled());
    assertFalse(parsedSettings.getSslSettings().isInvalidHostNameAllowed());
  }
",non-flaky,5
77527,dropwizard_dropwizard,DropwizardClientRuleTest.shouldGetStringBodyFromDropWizard,"    @Test
    public void shouldGetStringBodyFromDropWizard() throws IOException {
        final URL url = new URL(RULE_WITH_INSTANCE.baseUri() + ""/test"");
        assertThat(""foo"").isEqualTo(Resources.toString(url, StandardCharsets.UTF_8));
    }
",non-flaky,5
53190,cloudfoundry_uaa,ExternalIdentityProviderDefinitionTest.testEquals2,"    @Test
    public void testEquals2() {
        ExternalIdentityProviderDefinition def = new ExternalIdentityProviderDefinition();
        def.setStoreCustomAttributes(false);
        assertFalse(definition.equals(def));
    }
",non-flaky,5
106668,Alluxio_alluxio,BaseFileSystemTest.deleteException,"  @Test
  public void deleteException() throws Exception {
    AlluxioURI file = new AlluxioURI(""/file"");
    DeletePOptions deleteOptions = DeletePOptions.newBuilder().setRecursive(true).build();
    doThrow(EXCEPTION).when(mFileSystemMasterClient).delete(file,
        FileSystemOptions.deleteDefaults(mConf)
            .toBuilder().mergeFrom(deleteOptions).build());
    try {
      mFileSystem.delete(file, deleteOptions);
      fail(SHOULD_HAVE_PROPAGATED_MESSAGE);
    } catch (Exception e) {
      assertSame(EXCEPTION, e);
    }

    verifyFilesystemContextAcquiredAndReleased();
  }
",non-flaky,5
94771,ktuukkan_marine-api,AISMessage24ParserTest.getSerialNumber,"    @Test
    public void getSerialNumber() throws Exception {
        // TODO correct?
        assertEquals(220599, partB.getSerialNumber());
    }
",non-flaky,5
357,apache_hadoop,TestPermission.testBackwardCompatibility,"  @Test
  public void testBackwardCompatibility() {
    // Test 1 - old configuration key with decimal 
    // umask value should be handled when set using 
    // FSPermission.setUMask() API
    FsPermission perm = new FsPermission((short)18);
    Configuration conf = new Configuration();
    FsPermission.setUMask(conf, perm);
    assertEquals(18, FsPermission.getUMask(conf).toShort());

    // Test 2 - new configuration key is handled
    conf = new Configuration();
    conf.set(FsPermission.UMASK_LABEL, ""022"");
    assertEquals(18, FsPermission.getUMask(conf).toShort());

    // Test 3 - equivalent valid umask
    conf = new Configuration();
    conf.set(FsPermission.UMASK_LABEL, ""0022"");
    assertEquals(18, FsPermission.getUMask(conf).toShort());

    // Test 4 - invalid umask
    conf = new Configuration();
    conf.set(FsPermission.UMASK_LABEL, ""1222"");
    try {
      FsPermission.getUMask(conf);
      fail(""expect IllegalArgumentException happen"");
    } catch (IllegalArgumentException e) {
     //pass, exception successfully trigger
    }

    // Test 5 - invalid umask
    conf = new Configuration();
    conf.set(FsPermission.UMASK_LABEL, ""01222"");
    try {
      FsPermission.getUMask(conf);
      fail(""expect IllegalArgumentException happen"");
    } catch (IllegalArgumentException e) {
     //pass, exception successfully trigger
    }
  }
",non-flaky,5
94686,square_okhttp,CacheAdapterTest.put,"  @Test public void put_httpGet() throws Exception {
      @Override public CacheRequest put(URI uri, URLConnection connection) throws IOException {
        try {
          assertTrue(connection instanceof HttpURLConnection);
          assertFalse(connection instanceof HttpsURLConnection);

          assertEquals(response.length, connection.getContentLength());

          HttpURLConnection httpUrlConnection = (HttpURLConnection) connection;
          assertEquals(""GET"", httpUrlConnection.getRequestMethod());
          assertTrue(httpUrlConnection.getDoInput());
          assertFalse(httpUrlConnection.getDoOutput());

          assertEquals(""Fantastic"", httpUrlConnection.getResponseMessage());
          assertEquals(toUri(serverUrl), uri);
          assertEquals(serverUrl, connection.getURL());
          assertEquals(""value"", connection.getRequestProperty(""key""));

          // Check retrieval by string key.
          assertEquals(statusLine, httpUrlConnection.getHeaderField(null));
          assertEquals(""c"", httpUrlConnection.getHeaderField(""A""));
          // The RI and OkHttp supports case-insensitive matching for this method.
          assertEquals(""c"", httpUrlConnection.getHeaderField(""a""));
          return null;
        } catch (Throwable t) {
          throw new IOException(""unexpected cache failure"", t);
        }
      }
",non-flaky,5
156437,apache_commons-lang,DateUtilsFragmentTest.testMinuteFragmentInLargerUnitWithDate,"    @Test
    public void testMinuteFragmentInLargerUnitWithDate() {
        assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MINUTE));
        assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MINUTE));
        assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MINUTE));
    }
",non-flaky,5
112136,apache_shardingsphere-elasticjob,JobCoreConfigurationTest.assertBuildWhenTotalSHardingCountIsNegative,"    @Test(expected = IllegalArgumentException.class)
    public void assertBuildWhenTotalSHardingCountIsNegative() {
        JobCoreConfiguration.newBuilder(null, ""0/1 * * * * ?"", -1).build();
    }
",non-flaky,5
104675,apache_pinot,RealtimeToOfflineSegmentsMinionClusterIntegrationTest.testBrokerResponseMetadata,"  @Test(enabled = false)
  public void testBrokerResponseMetadata() {
  }
",non-flaky,5
78232,apache_beam,SimplePushbackSideInputDoFnRunnerTest.startFinishBundleDelegates,"  @Test
  public void startFinishBundleDelegates() {
    PushbackSideInputDoFnRunner runner = createRunner(ImmutableList.of(singletonView));

    assertThat(underlying.started, is(true));
    assertThat(underlying.finished, is(false));
    runner.finishBundle();
    assertThat(underlying.finished, is(true));
  }
",non-flaky,5
77653,pholser_junit-quickcheck,Primitive3DArrayPropertyParameterTypesTest.shouldHold,"    @Test public void wrapperLongArray() {
        @Property(trials = 2) public void shouldHold(Long[][][] ell) {
        }
",non-flaky,5
113750,salesforce_reactive-grpc,BackpressureChunkingTest.chunkOperatorCorrectlyChunks,"    @Test
    public void chunkOperatorCorrectlyChunks() {
        final List<Long> requests = new ArrayList<>();
        int chunkSize = ReactiveBackpressureChunker.DEFAULT_CHUNK_SIZE;

        Flux<Integer> chunked = Flux.range(0, chunkSize + 4)
                .doOnRequest(requests::add)
                .transform(Operators.lift(new BackpressureChunkingLifter<Integer>()));

        StepVerifier.create(chunked)
                .expectNext(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19)
                .verifyComplete();

        assertThat(requests).containsExactly((long) chunkSize, (long) chunkSize);
    }
",non-flaky,5
114027,apache_struts,JSONPopulatorTest.testParseBadInput,"            // @Test(expected = JSONException.class)
        }
    }
",non-flaky,5
94804,ktuukkan_marine-api,AISMessage09ParserTest.getAssignedModeFlag,"    @Test
    public void getAssignedModeFlag() throws Exception {
        // 0 == Autonomous and continuous mode (default)
        assertEquals(false, msg.getAssignedModeFlag());
    }
",non-flaky,5
134019,CorfuDB_CorfuDB,LogReplicationClientTest.testHandleLeadershipResponse,"    @Test
    public void testHandleLeadershipResponse() {
        final LogReplicationLeadershipResponseMsg leadershipResponse = LogReplicationLeadershipResponseMsg
                .newBuilder().build();
        final ResponseMsg response = ResponseMsg.newBuilder().setPayload(
                CorfuMessage.ResponsePayloadMsg.newBuilder()
                        .setLrLeadershipResponse(leadershipResponse).build()).build();

        ArgumentCaptor<PayloadCase> argument = ArgumentCaptor.forClass(PayloadCase.class);

        lrClient.receive(response);
        verify(handlerMap, atLeast(1)).get(argument.capture());
        Assertions.assertThat(argument.getValue()).isEqualTo(PayloadCase.LR_LEADERSHIP_RESPONSE);
    }
",non-flaky,5
59608,looly_hutool,ExpressionUtilTest.mvelTest,"	@Test
	public void mvelTest(){
		ExpressionEngine engine = new MvelEngine();

		final Dict dict = Dict.create()
				.set(""a"", 100.3)
				.set(""b"", 45)
				.set(""c"", -199.100);
		final Object eval = engine.eval(""a-(b-c)"", dict);
		Assert.assertEquals(-143.8, (double)eval, 2);
	}
",non-flaky,5
89297,apache_samza,TestLocalStoreMonitor.shouldDeleteTaskStoreWhenTaskPreferredStoreIsNotLocalHost,"  @Test
  public void shouldDeleteTaskStoreWhenTaskPreferredStoreIsNotLocalHost() throws Exception {
    Task task = new Task(""notLocalHost"", ""test-task"", ""0"", new ArrayList<>(), ImmutableList.of(""test-store""));
    Mockito.when(jobsClientMock.getTasks(Mockito.any())).thenReturn(ImmutableList.of(task));
    localStoreMonitor.monitor();
    assertTrue(""Task store directory should not exist."", !taskStoreDir.exists());
    assertEquals(taskStoreSize, localStoreMonitorMetrics.diskSpaceFreedInBytes.getCount());
    assertEquals(1, localStoreMonitorMetrics.noOfDeletedTaskPartitionStores.getCount());
  }
",non-flaky,5
135051,undertow-io_undertow,NetworkUtilsAddressParsingTestCase.testIpV6AddressMultipleColons,"    @Test(expected = IOException.class)
    public void testIpV6AddressMultipleColons() throws IOException {
        NetworkUtils.parseIpv6Address(""2001:1db8:100::3:6:ff00:42:8329"");
    }
",non-flaky,5
135783,Netflix_Hystrix,CollapsedRequestSubjectTest.testSetResponseAfterUnsubscribe,"    @Test(expected = CancellationException.class)
    public void testSetResponseAfterUnsubscribe() throws InterruptedException, ExecutionException {
        CollapsedRequestSubject<String, String> cr = new CollapsedRequestSubject<String, String>(""hello"");
        Observable<String> o = cr.toObservable();
        Future<String> f = o.toBlocking().toFuture();

        // cancel/unsubscribe
        f.cancel(true);

        try {
            cr.setResponse(""theResponse"");
        } catch (IllegalStateException e) {
            fail(""this should have done nothing as it was unsubscribed already"");
        }

        // expect CancellationException after cancelling
        f.get();
    }
",non-flaky,5
76929,Tencent_Firestorm,WriteBufferManagerTest.addRecordTest,"  @Test
  public void addRecordTest() {
    SparkConf conf = getConf();
    WriteBufferManager wbm = createManager(conf);
    wbm.setShuffleWriteMetrics(new ShuffleWriteMetrics());
    String testKey = ""Key"";
    String testValue = ""Value"";
    List<ShuffleBlockInfo> result = wbm.addRecord(0, testKey, testValue);
    // single buffer is not full, there is no data return
    assertEquals(0, result.size());
    assertEquals(512, wbm.getAllocatedBytes());
    assertEquals(32, wbm.getUsedBytes());
    assertEquals(0, wbm.getInSendListBytes());
    assertEquals(1, wbm.getBuffers().size());
    wbm.addRecord(0, testKey, testValue);
    wbm.addRecord(0, testKey, testValue);
    wbm.addRecord(0, testKey, testValue);
    result = wbm.addRecord(0, testKey, testValue);
    // single buffer is full
    assertEquals(1, result.size());
    assertEquals(512, wbm.getAllocatedBytes());
    assertEquals(96, wbm.getUsedBytes());
    assertEquals(96, wbm.getInSendListBytes());
    assertEquals(0, wbm.getBuffers().size());
    wbm.addRecord(0, testKey, testValue);
    wbm.addRecord(1, testKey, testValue);
    wbm.addRecord(2, testKey, testValue);
    // single buffer is not full, and less than spill size
    assertEquals(512, wbm.getAllocatedBytes());
    assertEquals(192, wbm.getUsedBytes());
    assertEquals(96, wbm.getInSendListBytes());
    assertEquals(3, wbm.getBuffers().size());
    // all buffer size > spill size
    wbm.addRecord(3, testKey, testValue);
    wbm.addRecord(4, testKey, testValue);
    result = wbm.addRecord(5, testKey, testValue);
    assertEquals(6, result.size());
    assertEquals(512, wbm.getAllocatedBytes());
    assertEquals(288, wbm.getUsedBytes());
    assertEquals(288, wbm.getInSendListBytes());
    assertEquals(0, wbm.getBuffers().size());
    // free memory
    wbm.freeAllocatedMemory(96);
    assertEquals(416, wbm.getAllocatedBytes());
    assertEquals(192, wbm.getUsedBytes());
    assertEquals(192, wbm.getInSendListBytes());

    assertEquals(11, wbm.getShuffleWriteMetrics().recordsWritten());
    assertTrue(wbm.getShuffleWriteMetrics().bytesWritten() > 0);

    wbm.freeAllocatedMemory(192);
    wbm.addRecord(0, testKey, testValue);
    wbm.addRecord(1, testKey, testValue);
    wbm.addRecord(2, testKey, testValue);
    result = wbm.clear();
    assertEquals(3, result.size());
    assertEquals(224, wbm.getAllocatedBytes());
    assertEquals(96, wbm.getUsedBytes());
    assertEquals(96, wbm.getInSendListBytes());
  }
",non-flaky,5
77632,pholser_junit-quickcheck,PeriodPropertyParameterTypesTest.shouldHold,"    @Test public void rangedPeriod() {
        @Property public void shouldHold(
            @InRange(min = ""P1Y2M3D"", max = ""P36Y2M3D"") Period p) {

            assertThat(
                toBigInteger(p),
                allOf(
                    greaterThanOrEqualTo(toBigInteger(Period.parse(""P1Y2M3D""))),
                    lessThanOrEqualTo(toBigInteger(Period.parse(""P36Y2M3D"")))));
        }
",non-flaky,5
98343,Kong_unirest-java,ApacheClientTest.tearDown,"    @AfterEach
    public void tearDown() {
        super.tearDown();
        requestConfigUsed = false;
    }
",non-flaky,5
97688,vojtechhabarta_typescript-generator,CustomTypeConversionTest.processType,"    @Test
    public void testCustomOptional() throws Exception {
        final Settings settings = TestUtils.settings();
        settings.mapDate = DateMapping.asString;
        settings.customTypeProcessor = new TypeProcessor() {
            @Override
            public TypeProcessor.Result processType(Type javaType, TypeProcessor.Context context) {
                final Type[] typeArguments = tryGetParameterizedTypeArguments(javaType, CustomOptional.class);
                if (typeArguments != null) {
                    final TypeProcessor.Result result = context.processType(typeArguments[0]);
                    return new Result(result.getTsType().optional(), result.getDiscoveredClasses());
                }
                return null;
            }
",non-flaky,5
156443,apache_commons-lang,DateUtilsFragmentTest.testDateFragmentInLargerUnitWithDate,"    @Test
    public void testDateFragmentInLargerUnitWithDate() {
        assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.DATE));
    }
",non-flaky,5
113781,salesforce_reactive-grpc,ReactiveBackpressureChunkerTest.errorPropagatesDown,"    @Test
    public void errorPropagatesDown() {
        int chunkSize = 3;
        ReactiveBackpressureChunker<Object> chunker = new ReactiveBackpressureChunker<Object>(chunkSize);
        UpstreamSubscription upstreamSubscription = new UpstreamSubscription();
        DownstreamSubscriber downstreamSubscriber = new DownstreamSubscriber();

        Subscriber<Object> chunkSubscriber = chunker.apply(downstreamSubscriber);
        chunkSubscriber.onSubscribe(upstreamSubscription);

        Throwable t = new Throwable();
        chunkSubscriber.onError(t);
        assertThat(downstreamSubscriber.lastThrowable).isEqualTo(t);
    }
",non-flaky,5
176820,ctco_cukes,EntityFacadeTest.byteArrayValueIsCheckedAsString,"    @Test
    public void byteArrayValueIsCheckedAsString() throws Exception {
        BasicAttributes entity = new BasicAttributes(true);
        entity.put(""userPassword"", new byte[]{50, 82, 115, 48, 67, 99, 54, 74});

        Whitebox.setInternalState(entityFacade, ""entity"", entity);

        entityFacade.entityHasAttributeWithValue(""userpassword"", ""2Rs0Cc6J"");
    }
",non-flaky,5
94735,ktuukkan_marine-api,Longitude28Test.defaultValueIsNotAvailable,"    @Test
    public void defaultValueIsNotAvailable() {
        assertFalse(Longitude28.isAvailable(181*60*10000));
    }
",non-flaky,5
30970,camunda-cloud_zeebe,POJOArrayTest.shouldFailOnRemovingWhenEntryHasBeenAddedBefore,"  @Test
  public void shouldFailOnRemovingWhenEntryHasBeenAddedBefore() {
    // given
    final POJOArray pojo = new POJOArray();

    final DirectBuffer buffer =
        encodeMsgPack(
            (w) -> {
              w.writeMapHeader(1);
              encodeSimpleArrayProp(w);
            });

    pojo.wrap(buffer);
    final Iterator<MinimalPOJO> iterator = pojo.simpleArray().iterator();
    iterator.next();
    pojo.simpleArray().add().setLongProp(999L);

    // then
    exception.expect(IllegalStateException.class);

    // when
    iterator.remove();
  }
",non-flaky,5
21001,NationalSecurityAgency_timely,DownsampleIteratorTest.simpleGetTwoSamples,"    @Test
    public void simpleGetTwoSamples() throws Exception {
        DownsampleIterator iter = new DownsampleIterator();
        Map<Set<Tag>, Downsample> samples = runQuery(iter, testData2, 100, -1);
        assertEquals(2, samples.size());
        for (Tag tag : new Tag[] { new Tag(""host"", ""host1""), new Tag(""host"", ""host2"") }) {
            Downsample dsample = samples.get(Collections.singleton(tag));
            assertNotNull(dsample);
            long ts = 0;
            double value = .2;
            if (tag.getValue().equals(""host2"")) {
                value = .5;
            }
            int count = 0;
            for (Sample sample : dsample) {
                assertEquals(ts, sample.timestamp);
                ts += 100;
                assertEquals(value, sample.value, 0.0001);
                count++;
            }
            assertEquals(10, count);
        }
    }
",non-flaky,5
91450,strapdata_elassandra,RecoveryDuringReplicationTests.testRecoveryAfterPrimaryPromotion,"    @TestLogging(""org.elasticsearch.index.shard:TRACE,org.elasticsearch.indices.recovery:TRACE"")
    public void testRecoveryAfterPrimaryPromotion() throws Exception {
        try (ReplicationGroup shards = createGroup(2)) {
            shards.startAll();
            int totalDocs = shards.indexDocs(randomInt(10));
            int committedDocs = 0;
            if (randomBoolean()) {
                shards.flush();
                committedDocs = totalDocs;
            }

            final IndexShard oldPrimary = shards.getPrimary();
            final IndexShard newPrimary = shards.getReplicas().get(0);
            final IndexShard replica = shards.getReplicas().get(1);
            if (randomBoolean()) {
                // simulate docs that were inflight when primary failed, these will be rolled back
                final int rollbackDocs = randomIntBetween(1, 5);
                logger.info(""--> indexing {} rollback docs"", rollbackDocs);
                for (int i = 0; i < rollbackDocs; i++) {
                    final IndexRequest indexRequest = new IndexRequest(index.getName(), ""type"", ""rollback_"" + i)
                            .source(""{}"", XContentType.JSON);
                    final BulkShardRequest bulkShardRequest = indexOnPrimary(indexRequest, oldPrimary);
                    indexOnReplica(bulkShardRequest, shards, replica);
                }
                if (randomBoolean()) {
                    oldPrimary.flush(new FlushRequest(index.getName()));
                }
            }

            shards.promoteReplicaToPrimary(newPrimary).get();

            // check that local checkpoint of new primary is properly tracked after primary promotion
            assertThat(newPrimary.getLocalCheckpoint(), equalTo(totalDocs - 1L));
            assertThat(IndexShardTestCase.getReplicationTracker(newPrimary)
                .getTrackedLocalCheckpointForShard(newPrimary.routingEntry().allocationId().getId()).getLocalCheckpoint(),
                equalTo(totalDocs - 1L));

            // index some more
            int moreDocs = shards.indexDocs(randomIntBetween(0, 5));
            totalDocs += moreDocs;

            // As a replica keeps a safe commit, the file-based recovery only happens if the required translog
            // for the sequence based recovery are not fully retained and extra documents were added to the primary.
            boolean expectSeqNoRecovery = (moreDocs == 0 || randomBoolean());
            int uncommittedOpsOnPrimary = 0;
            if (expectSeqNoRecovery == false) {
                IndexMetaData.Builder builder = IndexMetaData.builder(newPrimary.indexSettings().getIndexMetaData());
                builder.settings(Settings.builder().put(newPrimary.indexSettings().getSettings())
                    .put(IndexSettings.INDEX_TRANSLOG_RETENTION_AGE_SETTING.getKey(), ""-1"")
                    .put(IndexSettings.INDEX_TRANSLOG_RETENTION_SIZE_SETTING.getKey(), ""-1"")
                    .put(IndexSettings.INDEX_SOFT_DELETES_RETENTION_OPERATIONS_SETTING.getKey(), 0)
                );
                newPrimary.indexSettings().updateIndexMetaData(builder.build());
                newPrimary.onSettingsChanged();
                // Make sure the global checkpoint on the new primary is persisted properly,
                // otherwise the deletion policy won't trim translog
                assertBusy(() -> {
                    shards.syncGlobalCheckpoint();
                    assertThat(newPrimary.getLastSyncedGlobalCheckpoint(), equalTo(newPrimary.seqNoStats().getMaxSeqNo()));
                });
                newPrimary.flush(new FlushRequest().force(true));
                if (replica.indexSettings().isSoftDeleteEnabled()) {
                    // We need an extra flush to advance the min_retained_seqno on the new primary so ops-based won't happen.
                    // The min_retained_seqno only advances when a merge asks for the retention query.
                    newPrimary.flush(new FlushRequest().force(true));
                }
                uncommittedOpsOnPrimary = shards.indexDocs(randomIntBetween(0, 10));
                totalDocs += uncommittedOpsOnPrimary;
            }

            if (randomBoolean()) {
                uncommittedOpsOnPrimary = 0;
                shards.syncGlobalCheckpoint();
                newPrimary.flush(new FlushRequest());
            }

            oldPrimary.close(""demoted"", false);
            oldPrimary.store().close();

            IndexShard newReplica = shards.addReplicaWithExistingPath(oldPrimary.shardPath(), oldPrimary.routingEntry().currentNodeId());
            shards.recoverReplica(newReplica);

            if (expectSeqNoRecovery) {
                assertThat(newReplica.recoveryState().getIndex().fileDetails(), empty());
                assertThat(newReplica.recoveryState().getTranslog().recoveredOperations(), equalTo(totalDocs - committedDocs));
            } else {
                assertThat(newReplica.recoveryState().getIndex().fileDetails(), not(empty()));
                assertThat(newReplica.recoveryState().getTranslog().recoveredOperations(), equalTo(uncommittedOpsOnPrimary));
            }
            // Make sure that flushing on a recovering shard is ok.
            shards.flush();
            shards.assertAllEqual(totalDocs);
        }
    }
",non-flaky,5
20996,NationalSecurityAgency_timely,DownsampleTest.testCombineMissingReport,"    @Test
    public void testCombineMissingReport() throws Exception {
        Downsample ds = new Downsample(0, 1000, 100, new Avg());
        for (int i = 0; i < 1000; i += 100) {
            if (i != 700) {
                ds.add(i, .2);
            }
        }
        Downsample result = Downsample.combineDownsample(Collections.singleton(ds), null);
        int count = 0;
        for (Sample s : result) {
            assertEquals(.2, s.value, 0.0D);
            count++;
        }
        assertEquals(9, count);
    }
",non-flaky,5
99743,apache_cassandra,FQLCompareTest.endToEnd,"    @Test
    public void endToEnd() throws IOException
    {
        List<String> targetHosts = Lists.newArrayList(""hosta"", ""hostb"");
        File tmpDir = Files.createTempDirectory(""testresulthandler"").toFile();
        File queryDir = Files.createTempDirectory(""queries"").toFile();
        List<File> resultPaths = generateResultSets(targetHosts, tmpDir, queryDir, true, false);
        Compare.compare(queryDir.toString(), resultPaths.stream().map(File::toString).collect(Collectors.toList()));
    }
",non-flaky,5
137125,spring-projects_spring-framework,AbstractMethodMetadataTests.isFinalWhenNonFinalReturnsFalse,"	@Test
	public void isFinalWhenNonFinalReturnsFalse() {
		assertThat(getTagged(WithMethod.class).isFinal()).isFalse();
	}
",non-flaky,5
162738,OpenAPITools_openapi-generator,ModelApiResponseTest.testModelApiResponse,"    @Test
    public void testModelApiResponse() {
        // TODO: test ModelApiResponse
    }
",non-flaky,5
98640,nutzam_nutz,SimpleAdaptorTest.test_reader_as_string,"    @Test
    public void test_reader_as_string() {
        resp = post(""/adaptor/reader"", ""I am abc"");
        if (resp.getStatus() != 200) {
            fail();
        }
        assertEquals(""I am abc"", resp.getContent());
    }
",non-flaky,5
89301,apache_samza,TestMonitorService.testMonitorExceptionIsolation,"  @Test
  public void testMonitorExceptionIsolation() {
    // Test that an exception from a monitor doesn't bubble up out of the scheduler.
    Map<String, String> configMap =
        ImmutableMap.of(String.format(""monitor.name.%s"", CONFIG_MONITOR_FACTORY_CLASS),
                        ExceptionThrowingMonitorFactory.class.getCanonicalName());
    SamzaRestConfig config = new SamzaRestConfig(new MapConfig(configMap));
    SamzaMonitorService monitorService = new SamzaMonitorService(config,
                                                                 METRICS_REGISTRY);

    // This will throw if the exception isn't caught within the provider.
    monitorService.start();
    monitorService.stop();
  }
",non-flaky,5
26773,MundaneImmortal_pair-distribution-app,DayPairsTest.testGetTrackByPair,"	@Test
	public void testGetTrackByPair() {
		DayPairs pairs = new DayPairs();
		Pair pair = new Pair(Arrays.asList(new Developer(""dev1""), new Developer(""dev2"")));
		Pair differentPair = new Pair();
		pairs.addPair(""track"", pair);
		
		assertThat(pairs.getTrackByPair(pair), is(equalTo(""track"")));
		assertThat(pairs.getTrackByPair(differentPair), is(nullValue()));
	}
",non-flaky,5
26762,MundaneImmortal_pair-distribution-app,DayPairsTest.testGetPairsNewInstance,"	@Test
	public void testGetPairsNewInstance() {
		assertThat(new DayPairs().getPairs().isEmpty(), is(true));
	}
",non-flaky,5
135786,Netflix_Hystrix,HystrixThreadPoolTest.testShutdown,"    @Test
    public void testShutdown() {
        // other unit tests will probably have run before this so get the count
        int count = Factory.threadPools.size();

        HystrixThreadPool pool = Factory.getInstance(HystrixThreadPoolKey.Factory.asKey(""threadPoolFactoryTest""),
                HystrixThreadPoolProperties.Setter.getUnitTestPropertiesBuilder());

        assertEquals(count + 1, Factory.threadPools.size());
        assertFalse(pool.getExecutor().isShutdown());

        Factory.shutdown();

        // ensure all pools were removed from the cache
        assertEquals(0, Factory.threadPools.size());
        assertTrue(pool.getExecutor().isShutdown());
    }
",non-flaky,5
112696,hwang-pku_ormlite-core,TransactionManagerTest.call,"	@Test
	public void testTransactionManagerRollbackNullSavePoint() throws Exception {
		ConnectionSource connectionSource = createMock(ConnectionSource.class);
		DatabaseConnection conn = createMock(DatabaseConnection.class);
		expect(conn.isAutoCommitSupported()).andReturn(false);
		expect(conn.setSavePoint(isA(String.class))).andReturn(null);
		conn.rollback(null);
		expect(connectionSource.getDatabaseType()).andReturn(databaseType);
		expect(connectionSource.getReadWriteConnection(null)).andReturn(conn);
		expect(connectionSource.saveSpecialConnection(conn)).andReturn(true);
		connectionSource.clearSpecialConnection(conn);
		connectionSource.releaseConnection(conn);
		replay(connectionSource, conn);
		TransactionManager tm = new TransactionManager(connectionSource);
		try {
			tm.callInTransaction(new Callable<Void>() {
				@Override
				public Void call() throws Exception {
					throw new SQLException(""you better roll back!!"");
				}
",non-flaky,5
98350,Kong_unirest-java,ClientFactoryTest.before,"    @AfterEach
    public void before(){
        Unirest.shutDown(true);
    }
",non-flaky,5
86132,graylog2_graylog2-server,TemplateFieldValueProviderTest.templateCalculation,"    @Test
    @Ignore(""template engine doesn't support expressions"")
    public void templateCalculation() {
        final TestEvent event = new TestEvent();
        final EventWithContext eventWithContext = EventWithContext.create(event, newMessage(ImmutableMap.of(""bytes"", 1024)));

        final FieldValue fieldValue = newTemplate(""${source.bytes / 1024}"").doGet(""test"", eventWithContext);

        assertThat(fieldValue.value()).isEqualTo(""1"");
    }
",non-flaky,5
104695,apache_pinot,LLCRealtimeClusterIntegrationTest.testSegmentFlushSize,"  @Test
  public void testSegmentFlushSize() {
    String realtimeTableName = TableNameBuilder.REALTIME.tableNameWithType(getTableName());
    List<SegmentZKMetadata> segmentsZKMetadata =
        ZKMetadataProvider.getSegmentsZKMetadata(_propertyStore, realtimeTableName);
    for (SegmentZKMetadata segmentZKMetadata : segmentsZKMetadata) {
      assertEquals(segmentZKMetadata.getSizeThresholdToFlushSegment(),
          getRealtimeSegmentFlushSize() / getNumKafkaPartitions());
    }
  }
",non-flaky,5
137085,spring-projects_spring-framework,AbstractAnnotationMetadataTests.isIndependentWhenIndependentReturnsTrue,"	@Test
	public void isIndependentWhenIndependentReturnsTrue() {
		assertThat(get(AbstractAnnotationMetadataTests.class).isIndependent()).isTrue();
		assertThat(get(TestClass.class).isIndependent()).isTrue();
	}
",non-flaky,5
159637,liquibase_liquibase,OracleIntegrationTest.testDiffExternalForeignKeys,"    @Test
    public void testDiffExternalForeignKeys() throws Exception {
        //cross-schema security for oracle is a bother, ignoring test for now
    }
",non-flaky,5
94676,square_okhttp,Http2Test.headers,"  @Test public void streamIdHasReservedBit() throws IOException {
      @Override public void headers(boolean inFinished, int streamId,
          int associatedStreamId, List<Header> headerBlock) {
        assertFalse(inFinished);
        assertEquals(expectedStreamId, streamId);
        assertEquals(-1, associatedStreamId);
        assertEquals(headerEntries(""foo"", ""barrr"", ""baz"", ""qux""), headerBlock);
      }
",non-flaky,5
219,graylog2_graylog2-server,KafkaJournalTest.serverStatusThrottledIfJournalUtilizationIsHigherThanThreshold,"@Test
public void serverStatusThrottledIfJournalUtilizationIsHigherThanThreshold() throws Exception {
    serverStatus.running();
    final Size segmentSize = Size.kilobytes(1L);
    final KafkaJournal journal = new KafkaJournal(journalDirectory, scheduler, segmentSize, Duration.standardSeconds(1L), Size.kilobytes(4L), Duration.standardSeconds(1L), 1000000, Duration.standardSeconds(1L), 90, new MetricRegistry(), serverStatus);
    createBulkChunks(journal, segmentSize, 4);
    journal.flushDirtyLogs();
    journal.cleanupLogs();
    assertThat(serverStatus.getLifecycle()).isEqualTo(THROTTLED);
}",concurrency,1
106661,Alluxio_alluxio,AlluxioFuseFileSystemTest.write,"  @Test
  public void write() throws Exception {
    FileOutStream fos = mock(FileOutStream.class);
    AlluxioURI anyURI = any();
    CreateFilePOptions options = any();
    when(mFileSystem.createFile(anyURI, options)).thenReturn(fos);

    // open a file
    mFileInfo.flags.set(O_WRONLY.intValue());
    mFuseFs.create(""/foo/bar"", 0, mFileInfo);

    // prepare something to write into it
    Runtime r = Runtime.getSystemRuntime();
    Pointer ptr = r.getMemoryManager().allocateTemporary(4, true);
    byte[] expected = {42, -128, 1, 3};
    ptr.put(0, expected, 0, 4);

    mFuseFs.write(""/foo/bar"", ptr, 4, 0, mFileInfo);
    verify(fos).write(expected);

    // the second write is no-op because the writes must be sequential and overwriting is supported
    mFuseFs.write(""/foo/bar"", ptr, 4, 0, mFileInfo);
    verify(fos, times(1)).write(expected);
  }
",non-flaky,5
160384,ConsenSys_teku,ChainDataProviderTest.getGenesisTime_shouldReturnValueIfStoreAvailable,"  @Test
  public void getGenesisTime_shouldReturnValueIfStoreAvailable() {
    final UInt64 genesis = beaconStateInternal.getGenesis_time();
    final ChainDataProvider provider =
        new ChainDataProvider(spec, recentChainData, combinedChainDataClient);

    final UInt64 result = provider.getGenesisTime();
    assertEquals(genesis, result);
  }
",non-flaky,5
110127,Wikidata_wikidata-toolkit,ClientTest.testNonExistingLocalDump,"	@Test
	public void testNonExistingLocalDump() {
		String[] args = { ""-f"", ""./asfjl.json"" };
		Client client = new Client(mockDpc, args);
		client.performActions();

		Mockito.verify(mockDpc, Mockito.never()).processDump(
				Mockito.<MwDumpFile> any());
	}
",non-flaky,5
89349,apache_samza,TestKafkaSystemDescriptor.testSDConfigsWithOverrides,"  @Test
  public void testSDConfigsWithOverrides() {
    KafkaSystemDescriptor sd =
        new KafkaSystemDescriptor(""kafka"")
            .withConsumerZkConnect(ImmutableList.of(""localhost:1234""))
            .withProducerBootstrapServers(ImmutableList.of(""localhost:567"", ""localhost:890""))
            .withDefaultStreamOffsetDefault(SystemStreamMetadata.OffsetType.OLDEST)
            .withConsumerAutoOffsetReset(""smallest"")
            .withConsumerFetchMessageMaxBytes(1024 * 1024)
            .withSamzaFetchThreshold(10000)
            .withSamzaFetchThresholdBytes(1024 * 1024)
            .withConsumerConfigs(ImmutableMap.of(""custom-consumer-config-key"", ""custom-consumer-config-value""))
            .withProducerConfigs(ImmutableMap.of(""custom-producer-config-key"", ""custom-producer-config-value""))
            .withDefaultStreamConfigs(ImmutableMap.of(""custom-stream-config-key"", ""custom-stream-config-value""));

    Map<String, String> generatedConfigs = sd.toConfig();
    assertEquals(""org.apache.samza.system.kafka.KafkaSystemFactory"", generatedConfigs.get(""systems.kafka.samza.factory""));
    assertEquals(""localhost:1234"", generatedConfigs.get(""systems.kafka.consumer.zookeeper.connect""));
    assertEquals(""localhost:567,localhost:890"", generatedConfigs.get(""systems.kafka.producer.bootstrap.servers""));
    assertEquals(""smallest"", generatedConfigs.get(""systems.kafka.consumer.auto.offset.reset""));
    assertEquals(""1048576"", generatedConfigs.get(""systems.kafka.consumer.fetch.message.max.bytes""));
    assertEquals(""10000"", generatedConfigs.get(""systems.kafka.samza.fetch.threshold""));
    assertEquals(""1048576"", generatedConfigs.get(""systems.kafka.samza.fetch.threshold.bytes""));
    assertEquals(""custom-consumer-config-value"", generatedConfigs.get(""systems.kafka.consumer.custom-consumer-config-key""));
    assertEquals(""custom-producer-config-value"", generatedConfigs.get(""systems.kafka.producer.custom-producer-config-key""));
    assertEquals(""custom-stream-config-value"", generatedConfigs.get(""systems.kafka.default.stream.custom-stream-config-key""));
    assertEquals(""oldest"", generatedConfigs.get(""systems.kafka.default.stream.samza.offset.default""));
    assertEquals(11, generatedConfigs.size());
  }
",non-flaky,5
162388,testcontainers_testcontainers-java,MountableFileTest.forClasspathResourceWithPermission,"    @Test
    public void forClasspathResourceWithPermission() throws Exception {
        final MountableFile mountableFile = MountableFile.forClasspathResource(""mappable-resource/test-resource.txt"",
                TEST_FILE_MODE);

        performChecks(mountableFile);
        assertEquals(""Valid file mode."", BASE_FILE_MODE | TEST_FILE_MODE, mountableFile.getFileMode());
    }
",non-flaky,5
136452,kiwiproject_dropwizard-service-utilities,StandardExceptionMappersTest.setRegisterDefaultExceptionMappers,"        @Test
                public void setRegisterDefaultExceptionMappers(Boolean registerDefaultExceptionMappers) {
                    assertThat(registerDefaultExceptionMappers).isFalse();
                }
",non-flaky,5
33745,alibaba_fastjson,FastJsonHttpMessageConverterTest.test6,"    @Test
    public void test6() throws Exception {

        mockMvc.perform(
                (post(""/fastjson/test6"").characterEncoding(""UTF-8"")
                        .param(""userId"", ""1234"")
                        .param(""flag"", ""0"")
                        .contentType(MediaType.APPLICATION_FORM_URLENCODED)))
                .andDo(print());
    }
",non-flaky,5
106641,Alluxio_alluxio,AlluxioFuseFileSystemTest.chownWithoutValidUidAndGid,"  @Test
  public void chownWithoutValidUidAndGid() throws Exception {
    long uid = AlluxioFuseFileSystem.ID_NOT_SET_VALUE;
    long gid = AlluxioFuseFileSystem.ID_NOT_SET_VALUE;
    mFuseFs.chown(""/foo/bar"", uid, gid);
    verify(mFileSystem, never()).setAttribute(any());

    uid = AlluxioFuseFileSystem.ID_NOT_SET_VALUE_UNSIGNED;
    gid = AlluxioFuseFileSystem.ID_NOT_SET_VALUE_UNSIGNED;
    mFuseFs.chown(""/foo/bar"", uid, gid);
    verify(mFileSystem, never()).setAttribute(any());
  }
",non-flaky,5
113708,salesforce_reactive-grpc,ServerErrorIntegrationTest.oneToMany,"    @Test
    public void oneToMany() {
        ReactorGreeterGrpc.ReactorGreeterStub stub = ReactorGreeterGrpc.newReactorStub(channel);
        Flux<HelloResponse> resp = Mono.just(HelloRequest.getDefaultInstance()).as(stub::sayHelloRespStream);
        Flux<HelloResponse> test = resp
                .doOnNext(System.out::println)
                .doOnError(throwable -> System.out.println(throwable.getMessage()))
                .doOnComplete(() -> System.out.println(""Completed""))
                .doOnCancel(() -> System.out.println(""Client canceled""));

        StepVerifier.create(test)
                .verifyErrorMatches(t -> t instanceof StatusRuntimeException && ((StatusRuntimeException)t).getStatus() == Status.INTERNAL);
    }
",non-flaky,5
162421,testcontainers_testcontainers-java,GenericContainerRuleTest.simpleRedisTest,"//    @Test
//    public void simpleRedisTest() {
//        String ipAddress = redis.getContainerIpAddress();
//        Integer port = redis.getMappedPort(REDIS_PORT);
//
//        // Use Redisson to obtain a List that is backed by Redis
//        Config redisConfig = new Config();
//        redisConfig.useSingleServer().setAddress(ipAddress + "":"" + port);
//
//        Redisson redisson = Redisson.create(redisConfig);
//
//        List<String> testList = redisson.getList(""test"");
//        testList.add(""foo"");
//        testList.add(""bar"");
//        testList.add(""baz"");
//
//        List<String> testList2 = redisson.getList(""test"");
//        assertEquals(""The list contains the expected number of items (redis is working!)"", 3, testList2.size());
//        assertTrue(""The list contains an item that was put in (redis is working!)"", testList2.contains(""foo""));
//        assertTrue(""The list contains an item that was put in (redis is working!)"", testList2.contains(""bar""));
//        assertTrue(""The list contains an item that was put in (redis is working!)"", testList2.contains(""baz""));
//    }
",non-flaky,5
156402,apache_commons-lang,FastDateFormatTest.test_getInstance_String_TimeZone,"    @Test
    public void test_getInstance_String_TimeZone() {

        final FastDateFormat format1 = FastDateFormat.getInstance(""MM/DD/yyyy"",
                TimeZone.getTimeZone(""Atlantic/Reykjavik""));
        final FastDateFormat format2 = FastDateFormat.getInstance(""MM/DD/yyyy"");
        final FastDateFormat format3 = FastDateFormat.getInstance(""MM/DD/yyyy"", TimeZone.getDefault());
        final FastDateFormat format4 = FastDateFormat.getInstance(""MM/DD/yyyy"", TimeZone.getDefault());
        final FastDateFormat format5 = FastDateFormat.getInstance(""MM-DD-yyyy"", TimeZone.getDefault());
        final FastDateFormat format6 = FastDateFormat.getInstance(""MM-DD-yyyy"");

        assertNotSame(format1, format2);
        assertEquals(TimeZone.getTimeZone(""Atlantic/Reykjavik""), format1.getTimeZone());
        assertEquals(TimeZone.getDefault(), format2.getTimeZone());
        assertSame(format3, format4);
        assertNotSame(format3, format5);
        assertNotSame(format4, format6);
    }
",non-flaky,5
95716,togglz_togglz,EnumBasedFeatureProviderTest.shouldReturnInfoLinkIfAnnotationPresent,"    @Test
    public void shouldReturnInfoLinkIfAnnotationPresent() {
        FeatureProvider provider = new EnumBasedFeatureProvider(ValidFeatureEnum.class);
        FeatureMetaData metaData = provider.getMetaData(ValidFeatureEnum.WITH_LINK);
        assertThat(metaData.getAttributes())
            .containsValue(""https://github.com/togglz/togglz/pull/33"");
    }
",non-flaky,5
135032,undertow-io_undertow,DateUtilsTestCase.testParseIE9Date,"    @Test
    public void testParseIE9Date() {

        String ie9Header = ""Wed, 12 Feb 2014 04:43:29 GMT; length=142951"";

        Date ie9Date = DateUtils.parseDate(ie9Header);
        Assert.assertNotNull(ie9Date);

        Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone(""GMT""));
        calendar.set(2014, Calendar.FEBRUARY, 12, 4, 43, 29);
        calendar.set(Calendar.MILLISECOND, 0);

        Assert.assertEquals(calendar.getTime(), ie9Date);

    }
",non-flaky,5
94795,ktuukkan_marine-api,AISMessage21ParserTest.hasLongitude,"    @Test
    public void hasLongitude() {
        assertEquals(true, msg.hasLongitude());
    }
",non-flaky,5
156,opensource4you_astraea,MetricsTest.testBytes,"@Test
void testBytes() throws InterruptedException {
    final CountDownLatch countDownLatch = new CountDownLatch(1);
    final Metrics metrics = new Metrics();
    final LongAdder longAdder = new LongAdder();
    final long input = 100;
    final int loopCount = 10000;
    Thread adder = new Thread(() -> {
        try {
            countDownLatch.await();
        } catch (InterruptedException ignore) {
        }
        for (int i = 0; i < loopCount; ++i) {
            metrics.addBytes(input);
        }
    });
    Thread getter = new Thread(() -> {
        try {
            countDownLatch.await();
        } catch (InterruptedException ignore) {
        }
        for (int i = 0; i < loopCount; ++i) {
            longAdder.add(metrics.bytesThenReset());
        }
    });
    adder.start();
    getter.start();
    countDownLatch.countDown();
    adder.join();
    longAdder.add(metrics.bytesThenReset());
    Assertions.assertEquals(loopCount * input, longAdder.sum());
}",concurrency,1
124,spotify_docker-client,DefaultDockerClientTest.testListTaskWithCriteria,"@Test
public void testListTaskWithCriteria() throws Exception {
    requireDockerApiVersionAtLeast(""1.24"", ""swarm support"");
    final ServiceSpec spec = createServiceSpec(randomName());
    assertThat(sut.listTasks().size(), is(0));
    sut.createService(spec);
    await().until(numberOfTasks(sut), is(greaterThan(0)));
    final Task task = sut.listTasks().get(1);
    final List<Task> tasksWithId = sut.listTasks(Task.find().taskId(task.id()).build());
    assertThat(tasksWithId.size(), is(1));
    assertThat(tasksWithId.get(0), equalTo(task));
    final List<Task> tasksWithServiceName = sut.listTasks(Task.find().serviceName(spec.name()).build());
    assertThat(tasksWithServiceName.size(), is(greaterThanOrEqualTo(1)));
    final Set<String> taskIds = Sets.newHashSet(Lists.transform(tasksWithServiceName, new Function<Task, String>()));
    assertThat(task.id(), isIn(taskIds));
}",async wait,0
60957,apache_druid,TDigestSketchAggregatorFactoryTest.testResultArraySignature,"  @Test
  public void testResultArraySignature()
  {
    final TimeseriesQuery query =
        Druids.newTimeseriesQueryBuilder()
              .dataSource(""dummy"")
              .intervals(""2000/3000"")
              .granularity(Granularities.HOUR)
              .aggregators(
                  new CountAggregatorFactory(""count""),
                  new TDigestSketchAggregatorFactory(""tdigest"", ""col"", null)
              )
              .postAggregators(
                  new FieldAccessPostAggregator(""tdigest-access"", ""tdigest""),
                  new FinalizingFieldAccessPostAggregator(""tdigest-finalize"", ""tdigest"")
              )
              .build();

    Assert.assertEquals(
        RowSignature.builder()
                    .addTimeColumn()
                    .add(""count"", ColumnType.LONG)
                    .add(""tdigest"", TDigestSketchAggregatorFactory.TYPE)
                    .add(""tdigest-access"", TDigestSketchAggregatorFactory.TYPE)
                    .add(""tdigest-finalize"", TDigestSketchAggregatorFactory.TYPE)
                    .build(),
        new TimeseriesQueryQueryToolChest().resultArraySignature(query)
    );
  }
",non-flaky,5
114113,aws_aws-sdk-java-v2,InstantAsStringAttributeConvertersTest.InstantAsStringAttributeConverterExceedLowerBoundTest,"    @Test
    public void InstantAsStringAttributeConverterExceedLowerBoundTest() {
        assertFails(() -> transformTo(CONVERTER, EnhancedAttributeValue.fromString(""-1000000001-12-31T23:59:59.999999999Z"")
                                                                       .toAttributeValue()));
    }
",non-flaky,5
162707,OpenAPITools_openapi-generator,XmlItemTest.attributeIntegerTest,"    @Test
    public void attributeIntegerTest() {
        // TODO: test attributeInteger
    }
",non-flaky,5
175781,GoogleCloudPlatform_google-cloud-eclipse,AppYamlValidatorTest.testValidateRuntime_malformedAppYaml,"  @Test
  public void testValidateRuntime_malformedAppYaml() throws IOException {
    File appYaml = createAppYamlFile(tempFolder.getRoot().toString(), "": m a l f o r m e d !"");
    IStatus result = AppYamlValidator.validateRuntime(appYaml);
    assertEquals(IStatus.ERROR, result.getSeverity());
    assertEquals(""Malformed app.yaml."", result.getMessage());
  }
",non-flaky,5
114096,aws_aws-sdk-java-v2,TableSchemaTest.builder_constructsStaticTableSchemaBuilder,"    @Test
    public void builder_constructsStaticTableSchemaBuilder() {
        StaticTableSchema.Builder<FakeItem> builder = TableSchema.builder(FakeItem.class);
        assertThat(builder).isNotNull();
    }
",non-flaky,5
122587,vespa-engine_vespa,FileFinderTest.all_files_recursive_with_prune_relative,"        @Test
        public void all_files_recursive_with_prune_relative() {
            assertFileHelper(FileFinder.files(testRoot()).prune(fileSystem.getPath(""test"")),

                    of(""file-1.json"", ""test.json"", ""test.txt""),
                    of(""test"", ""test/file.txt"", ""test/data.json"", ""test/subdir-1"", ""test/subdir-1/test"", ""test/subdir-2""));
        }
",non-flaky,5
339,testcontainers_testcontainers-java,appliesOuterTimeout,"@Test
public void appliesOuterTimeout() {
    final WaitStrategy underTest = new WaitAllStrategy()
    .withStrategy(strategy1)
    .withStartupTimeout(Duration.ofMillis(10));
    doAnswer(invocation -> {
        Uninterruptibles.sleepUninterruptibly(20, TimeUnit.MILLISECONDS);
        return null;
    }).when(strategy1).waitUntilReady(eq(container));
    assertThrows(""The outer strategy timeout applies"", TimeoutException.class, () -> {
        underTest.waitUntilReady(container);
    });
}",async wait,0
78249,apache_beam,StateInternalsTest.testCombiningValue,"  @Test
  public void testCombiningValue() throws Exception {

    GroupingState<Integer, Integer> value = underTest.state(NAMESPACE_1, SUM_INTEGER_ADDR);

    // State instances are cached, but depend on the namespace.
    assertEquals(value, underTest.state(NAMESPACE_1, SUM_INTEGER_ADDR));
    assertFalse(value.equals(underTest.state(NAMESPACE_2, SUM_INTEGER_ADDR)));

    assertThat(value.read(), equalTo(0));
    value.add(2);
    assertThat(value.read(), equalTo(2));

    value.add(3);
    assertThat(value.read(), equalTo(5));

    value.clear();
    assertThat(value.read(), equalTo(0));
    assertThat(underTest.state(NAMESPACE_1, SUM_INTEGER_ADDR), equalTo(value));
  }
",non-flaky,5
33909,apache_camel,ConsumerIntegrationIT.configure,"    @Test
            public void configure() {
                from(""beanstalk:"" + tubeName).to(""mock:result"");
            }
",non-flaky,5
122622,vespa-engine_vespa,IPAddressesTest.throws_when_multiple_ipv6_addresses,"    @Test(expected = RuntimeException.class)
    public void throws_when_multiple_ipv6_addresses() {
        mock.addAddress(""localhost"", ""2001::1"")
                .addAddress(""localhost"", ""2001::2"");
        mock.getIPv6Address(""localhost"");
    }
",non-flaky,5
114034,aws_aws-sdk-java-v2,__handlerClassName__Test.handleRequest_shouldReturnConstantValue,"    @Test
    public void handleRequest_shouldReturnConstantValue() {
        ${handlerClassName} function = new ${handlerClassName}();
        Object result = function.handleRequest(""echo"", null);
        assertEquals(""echo"", result);
    }
",non-flaky,5
112114,apache_shardingsphere-elasticjob,StatisticRdbRepositoryTest.assertFindTaskResultStatisticsWithDifferentFromDate,"    @Test
    public void assertFindTaskResultStatisticsWithDifferentFromDate() {
        Date now = new Date();
        Date yesterday = getYesterday();
        for (StatisticInterval each : StatisticInterval.values()) {
            assertTrue(repository.add(new TaskResultStatistics(100, 0, each, yesterday)));
            assertTrue(repository.add(new TaskResultStatistics(100, 0, each, now)));
            assertThat(repository.findTaskResultStatistics(yesterday, each).size(), is(2));
            assertThat(repository.findTaskResultStatistics(now, each).size(), is(1));
        }
    }
",non-flaky,5
94689,square_okhttp,ResponseCacheTest.assertCookies,"  @Test public void getHeadersRetainsCached200LevelWarnings() throws Exception {
  public void assertCookies(URL url, String... expectedCookies) throws Exception {
    List<String> actualCookies = new ArrayList<>();
    for (HttpCookie cookie : cookieManager.getCookieStore().get(url.toURI())) {
      actualCookies.add(cookie.toString());
    }
    assertEquals(Arrays.asList(expectedCookies), actualCookies);
  }
",non-flaky,5
177170,line_armeria,SamlServiceProviderTest.shouldConsumeAssertion_HttpPost,"    @Test
    public void shouldConsumeAssertion_HttpPost() throws Exception {
        final Response response =
                getAuthResponse(""http://"" + spHostname + ':' + rule.httpPort() + ""/saml/acs/post"");
        final AggregatedHttpResponse res = sendViaHttpPostBindingProtocol(""/saml/acs/post"",
                                                                          SAML_RESPONSE, response);

        assertThat(res.status()).isEqualTo(HttpStatus.FOUND);
        assertThat(res.headers().get(HttpHeaderNames.LOCATION)).isEqualTo(""/"");
    }
",non-flaky,5
112120,apache_shardingsphere-elasticjob,StatisticRdbRepositoryTest.assertFindTaskRunningStatisticsWithDifferentFromDate,"    @Test
    public void assertFindTaskRunningStatisticsWithDifferentFromDate() {
        Date now = new Date();
        Date yesterday = getYesterday();
        assertTrue(repository.add(new TaskRunningStatistics(100, yesterday)));
        assertTrue(repository.add(new TaskRunningStatistics(100, now)));
        assertThat(repository.findTaskRunningStatistics(yesterday).size(), is(2));
        assertThat(repository.findTaskRunningStatistics(now).size(), is(1));
    }
",non-flaky,5
175745,GoogleCloudPlatform_google-cloud-eclipse,AppEngineDeployPreferencesPanelTest.testAutoSelectSingleAccount_loadGcpProjects,"  @Test
  public void testAutoSelectSingleAccount_loadGcpProjects()
      throws ProjectRepositoryException, InterruptedException {
    when(loginService.getAccounts()).thenReturn(oneAccountSet);
    initializeProjectRepository();
    deployPanel = createPanel(true /* requireValues */);
    assertNotNull(deployPanel.latestGcpProjectQueryJob);
    deployPanel.latestGcpProjectQueryJob.join();

    Table projectTable = getProjectSelector().getViewer().getTable();
    assertThat(projectTable.getItemCount(), is(2));
  }
",non-flaky,5
179477,abel533_Mapper,SafeUpdateByFieldTest.testSafeUpdateNull,"    @Test(expected = PersistenceException.class)
    public void testSafeUpdateNull() {
        SqlSession sqlSession = getSqlSession();
        try {
            CountryMapper mapper = sqlSession.getMapper(CountryMapper.class);
            mapper.updateByExample(new Country(), null);
        } finally {
            sqlSession.close();
        }
    }
",non-flaky,5
38196,palantir_atlasdb,SchemasTest.testDeleteTable,"    @Test
    public void testDeleteTable() {
        mockery.checking(new Expectations(){{
            oneOf(kvs).dropTable(with(equal(TABLE_REF)));
        }});
        Schemas.deleteTable(kvs, TABLE_REF);
    }
",non-flaky,5
98577,nutzam_nutz,AdvancedTestAll.testFailure,"        //å¾å°ææå¸¦@Testçæ¹æ³
            public void testFailure(Failure failure) throws Exception {
                result.addError(asTest(failure.getDescription()), failure.getException());
            }
",non-flaky,5
19428,eclipse_xtext-core,GenericModuleTest.bindFoo,"	@Test public void testSingletonBinding() throws Exception {
			public Class<Foo> bindFoo() {
				return Foo.class;
			}
",non-flaky,5
26752,MundaneImmortal_pair-distribution-app,DevPairsCombinationsTest.testGetPastPairsFiltersOps,"	@Test
	public void testGetPastPairsFiltersOps() {
		List<DayPairs> pairsListFromDevs = getPairsListFromDevs(getStandardDevs());
		Pair opsPair = pairsListFromDevs.get(0).getPairByTrack(""track1"");
		opsPair.setOpsPair(true);
		DevPairCombinations devPairCombinations = new DevPairCombinations(pairsListFromDevs);
		
		
		assertThat(devPairCombinations.getPastPairs(0), is(Arrays.asList(pairsListFromDevs.get(0).getPairByTrack(""track2""))));
	}
",non-flaky,5
59617,looly_hutool,BeanValidatorUtilTest.beanValidatorTest,"	@Test
	public void beanValidatorTest() {
		BeanValidationResult result = ValidationUtil.warpValidate(new TestClass());
		Assert.assertFalse(result.isSuccess());
		Assert.assertEquals(2, result.getErrorMessages().size());
	}
",non-flaky,5
136459,kiwiproject_dropwizard-service-utilities,MonitoredJobTest.handle,"        @Test
                public void handle(MonitoredJob job, Exception exception) {
                    taskHandledCount.incrementAndGet();
                }
",non-flaky,5
118768,netty_netty,ByteBufUtilTest.testToStringDoesNotThrowIndexOutOfBounds,"    @Test
    public void testToStringDoesNotThrowIndexOutOfBounds() {
        CompositeByteBuf buffer = Unpooled.compositeBuffer();
        try {
            byte[] bytes = ""1234"".getBytes(CharsetUtil.UTF_8);
            buffer.addComponent(Unpooled.buffer(bytes.length).writeBytes(bytes));
            buffer.addComponent(Unpooled.buffer(bytes.length).writeBytes(bytes));
            assertEquals(""1234"", buffer.toString(bytes.length, bytes.length, CharsetUtil.UTF_8));
        } finally {
            buffer.release();
        }
    }
",non-flaky,5
84619,apache_zookeeper,ServerConfigTest.setUp,"    @BeforeEach
    public void setUp() {
        serverConfig = new ServerConfig();
    }
",non-flaky,5
77018,Tencent_Firestorm,ShuffleStorageUtilsTest.getShuffleDataPathWithRangeTest,"  @Test
  public void getShuffleDataPathWithRangeTest() {
    String result = ShuffleStorageUtils.getShuffleDataPathWithRange(""appId"", 0, 1, 3, 6);
    assertEquals(""appId/0/0-2"", result);
    result = ShuffleStorageUtils.getShuffleDataPathWithRange(""appId"", 0, 2, 3, 6);
    assertEquals(""appId/0/0-2"", result);
    result = ShuffleStorageUtils.getShuffleDataPathWithRange(""appId"", 0, 3, 3, 6);
    assertEquals(""appId/0/3-5"", result);
    result = ShuffleStorageUtils.getShuffleDataPathWithRange(""appId"", 0, 5, 3, 6);
    assertEquals(""appId/0/3-5"", result);
    try {
      ShuffleStorageUtils.getShuffleDataPathWithRange(""appId"", 0, 6, 3, 6);
      fail(""shouldn't be here"");
    } catch (Exception e) {
      assertTrue(e.getMessage().startsWith(""Can't generate ShuffleData Path""));
    }
    result = ShuffleStorageUtils.getShuffleDataPathWithRange(""appId"", 0, 6, 3, 7);
    assertEquals(""appId/0/6-8"", result);
  }
",non-flaky,5
112137,apache_shardingsphere-elasticjob,LiteJobConfigurationTest.assertBuildAllProperties,"    @Test
    public void assertBuildAllProperties() {
        LiteJobConfiguration actual = LiteJobConfiguration.newBuilder(
                new SimpleJobConfiguration(JobCoreConfiguration.newBuilder(""test_job"", ""0/1 * * * * ?"", 3).build(), TestSimpleJob.class.getCanonicalName()))
                .monitorExecution(false).maxTimeDiffSeconds(1000).monitorPort(8888).jobShardingStrategyClass(""testClass"").disabled(true).overwrite(true).reconcileIntervalMinutes(60).build();
        assertFalse(actual.isMonitorExecution());
        assertThat(actual.getMaxTimeDiffSeconds(), is(1000));
        assertThat(actual.getMonitorPort(), is(8888));
        assertThat(actual.getJobShardingStrategyClass(), is(""testClass""));
        assertTrue(actual.isDisabled());
        assertTrue(actual.isOverwrite());
        assertThat(actual.getReconcileIntervalMinutes(), is(60));
    }
",non-flaky,5
98368,Kong_unirest-java,UploadProgressTest.setUp,"    @Override @BeforeEach
    public void setUp() {
        super.setUp();
        this.monitor = new TestMonitor();
    }
",non-flaky,5
98342,Kong_unirest-java,ApacheClientTest.setUp,"    @BeforeEach
    public void setUp() {
        super.setUp();
    }
",non-flaky,5
135057,undertow-io_undertow,ContentTypeParsingTestCase.testCharsetParsing,"    @Test
    public void testCharsetParsing() {
        Assert.assertEquals(null, Headers.extractQuotedValueFromHeader(""text/html; other-data=\""charset=UTF-8\"""", ""charset""));
        Assert.assertEquals(null, Headers.extractQuotedValueFromHeader(""text/html;"", ""charset""));
        Assert.assertEquals(""UTF-8"", Headers.extractQuotedValueFromHeader(""text/html; charset=\""UTF-8\"""", ""charset""));
        Assert.assertEquals(""UTF-8"", Headers.extractQuotedValueFromHeader(""text/html; charset=UTF-8"", ""charset""));
        Assert.assertEquals(""UTF-8"", Headers.extractQuotedValueFromHeader(""text/html; charset=\""UTF-8\""; foo=bar"", ""charset""));
        Assert.assertEquals(""UTF-8"", Headers.extractQuotedValueFromHeader(""text/html; charset=UTF-8 foo=bar"", ""charset""));
        Assert.assertEquals(""UTF-8"", Headers.extractQuotedValueFromHeader(""text/html; badcharset=bad charset=UTF-8 foo=bar"", ""charset""));
        Assert.assertEquals(""UTF-8"", Headers.extractQuotedValueFromHeader(""text/html;charset=UTF-8"", ""charset""));
        Assert.assertEquals(""UTF-8"", Headers.extractQuotedValueFromHeader(""text/html;\tcharset=UTF-8"", ""charset""));
    }
",non-flaky,5
156401,apache_commons-lang,FastDateFormatTest.test_getInstance_String,"    @Test
    public void test_getInstance_String() {
        final FastDateFormat format1 = FastDateFormat.getInstance(""MM/DD/yyyy"");
        final FastDateFormat format2 = FastDateFormat.getInstance(""MM-DD-yyyy"");
        final FastDateFormat format3 = FastDateFormat.getInstance(""MM-DD-yyyy"");

        assertNotSame(format1, format2);
        assertSame(format2, format3);
        assertEquals(""MM/DD/yyyy"", format1.getPattern());
        assertEquals(TimeZone.getDefault(), format1.getTimeZone());
        assertEquals(TimeZone.getDefault(), format2.getTimeZone());
    }
",non-flaky,5
133957,CorfuDB_CorfuDB,SequencerHandlerTest.testBootstrapSequencerResponse,"    @Test
    public void testBootstrapSequencerResponse() {
        ResponseMsg responseAck = getResponseMsg(
                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.IGNORE),
                getBootstrapSequencerResponseMsg(true)
        );
        ResponseMsg responseNack = getResponseMsg(
                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.CHECK),
                getBootstrapSequencerResponseMsg(false)
        );

        sequencerHandler.handleMessage(responseAck, mockChannelHandlerContext);
        sequencerHandler.handleMessage(responseNack, mockChannelHandlerContext);
        // Verify that the correct request was completed with the appropriate value,
        // and that we did not complete exceptionally.
        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));
        verify(mockClientRouter).completeRequest(responseAck.getHeader().getRequestId(), true);
        verify(mockClientRouter).completeRequest(responseNack.getHeader().getRequestId(), false);
    }
",non-flaky,5
112100,apache_shardingsphere-elasticjob,DistributeOnceElasticJobListenerTest.assertBeforeJobExecutedWhenIsAllStarted,"    @Test
    public void assertBeforeJobExecutedWhenIsAllStarted() {
        when(guaranteeService.isAllStarted()).thenReturn(true);
        distributeOnceElasticJobListener.beforeJobExecuted(shardingContexts);
        verify(guaranteeService).registerStart(Sets.newHashSet(0, 1));
        verify(elasticJobListenerCaller).before();
        verify(guaranteeService).clearAllStartedInfo();
    }
",non-flaky,5
112143,apache_shardingsphere-elasticjob,ShardingItemParametersTest.assertNewWhenPairFormatInvalid,"    @Test(expected = JobConfigurationException.class)
    public void assertNewWhenPairFormatInvalid() {
        new ShardingItemParameters(""xxx-xxx"");
    }
",non-flaky,5
106652,Alluxio_alluxio,AlluxioFuseFileSystemTest.openWithDelay,"  @Test
  public void openWithDelay() throws Exception {
    AlluxioURI expectedPath = BASE_EXPECTED_URI.join(""/foo/bar"");
    FileInfo fi = setUpOpenMock(expectedPath);
    fi.setCompleted(false);
    when(mFileSystem.openFile(expectedPath)).thenThrow(new FileIncompleteException(expectedPath));

    // Use another thread to open file so that
    // we could change the file status when opening it
    Thread t = new Thread(() -> mFuseFs.open(""/foo/bar"", mFileInfo));
    t.start();
    Thread.sleep(1000);
    // If the file exists but is not completed, we will wait for the file to complete
    verify(mFileSystem, atLeast(10)).getStatus(expectedPath);

    fi.setCompleted(true);
    t.join();
    verify(mFileSystem, times(2)).openFile(expectedPath);
  }
",non-flaky,5
60961,apache_druid,TDigestSketchToQuantilesPostAggregatorTest.testSerde,"  @Test
  public void testSerde() throws Exception
  {
    TDigestSketchToQuantilesPostAggregator there =
        new TDigestSketchToQuantilesPostAggregator(""post"", new ConstantPostAggregator("""", 100), new double[]{0.25, 0.75});

    DefaultObjectMapper mapper = new DefaultObjectMapper();
    TDigestSketchToQuantilesPostAggregator andBackAgain = mapper.readValue(
        mapper.writeValueAsString(there),
        TDigestSketchToQuantilesPostAggregator.class
    );

    Assert.assertEquals(there, andBackAgain);
    Assert.assertArrayEquals(there.getCacheKey(), andBackAgain.getCacheKey());
    Assert.assertEquals(there.getDependentFields(), andBackAgain.getDependentFields());
  }
",non-flaky,5
112645,tbsalling_aismessages,BinaryBroadcastMessageTest.failsWithInvalidMessageWhenDecodingShortMessage,"    @Test(expected = InvalidMessage.class)
    public void failsWithInvalidMessageWhenDecodingShortMessage() {
        AISMessage aisMessage = AISMessage.create(NMEAMessage.fromString(""!AIVDM,1,1,,A,83aDCr@,0*5F""));
        BinaryBroadcastMessage binaryBroadcastMessage = (BinaryBroadcastMessage) aisMessage;

        ApplicationSpecificMessage asm = binaryBroadcastMessage.getApplicationSpecificMessage();

        System.out.println(aisMessage);
    }
",non-flaky,5
43085,trinodb_trino,AbstractTestIntegrationSmokeTest.testColumnsInReverseOrder,"    @Test
    public void testColumnsInReverseOrder()
    {
        assertQuery(""SELECT shippriority, clerk, totalprice FROM orders"");
    }
",non-flaky,5
91454,strapdata_elassandra,InternalEngineMergeIT.testMergesHappening,"    @TestLogging(""_root:DEBUG"")
    public void testMergesHappening() throws InterruptedException, IOException, ExecutionException {
        final int numOfShards = randomIntBetween(1, 5);
        // some settings to keep num segments low
        assertAcked(prepareCreate(""test"").setSettings(Settings.builder()
                .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, numOfShards)
                .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)
                .build()));
        long id = 0;
        final int rounds = scaledRandomIntBetween(50, 300);
        logger.info(""Starting rounds [{}] "", rounds);
        for (int i = 0; i < rounds; ++i) {
            final int numDocs = scaledRandomIntBetween(100, 1000);
            BulkRequestBuilder request = client().prepareBulk();
            for (int j = 0; j < numDocs; ++j) {
                request.add(Requests.indexRequest(""test"").type(""type1"").id(Long.toString(id++)).source(jsonBuilder().startObject().field(""l"", randomLong()).endObject()));
            }
            BulkResponse response = request.execute().actionGet();
            refresh();
            assertNoFailures(response);
            IndicesStatsResponse stats = client().admin().indices().prepareStats(""test"").setSegments(true).setMerge(true).get();
            logger.info(""index round [{}] - segments {}, total merges {}, current merge {}"", i, stats.getPrimaries().getSegments().getCount(), stats.getPrimaries().getMerge().getTotal(), stats.getPrimaries().getMerge().getCurrent());
        }
        final long upperNumberSegments = 2 * numOfShards * 10;
        awaitBusy(() -> {
            IndicesStatsResponse stats = client().admin().indices().prepareStats().setSegments(true).setMerge(true).get();
            logger.info(""numshards {}, segments {}, total merges {}, current merge {}"", numOfShards, stats.getPrimaries().getSegments().getCount(), stats.getPrimaries().getMerge().getTotal(), stats.getPrimaries().getMerge().getCurrent());
            long current = stats.getPrimaries().getMerge().getCurrent();
            long count = stats.getPrimaries().getSegments().getCount();
            return count < upperNumberSegments && current == 0;
        });
        IndicesStatsResponse stats = client().admin().indices().prepareStats().setSegments(true).setMerge(true).get();
        logger.info(""numshards {}, segments {}, total merges {}, current merge {}"", numOfShards, stats.getPrimaries().getSegments().getCount(), stats.getPrimaries().getMerge().getTotal(), stats.getPrimaries().getMerge().getCurrent());
        long count = stats.getPrimaries().getSegments().getCount();
        assertThat(count, Matchers.lessThanOrEqualTo(upperNumberSegments));
    }
",non-flaky,5
114120,aws_aws-sdk-java-v2,InstantAsStringAttributeConvertersTest.InstantAsStringAttributeConverterNotAcceptLocalTimeTest,"    @Test
    public void InstantAsStringAttributeConverterNotAcceptLocalTimeTest() {
        assertFails(() -> transformTo(CONVERTER, EnhancedAttributeValue.fromString(""00:12:00.000000001"")
                                                                       .toAttributeValue()));
    }
",non-flaky,5
89305,apache_samza,TestKafkaSystemConsumerMetrics.testKafkaSystemConsumerMetrics,"  @Test
  public void testKafkaSystemConsumerMetrics() {
    String systemName = ""system"";
    TopicPartition tp1 = new TopicPartition(""topic1"", 1);
    TopicPartition tp2 = new TopicPartition(""topic2"", 2);
    String clientName = ""clientName"";

    // record expected values for further comparison
    Map<String, String> expectedValues = new HashMap<>();

    ReadableMetricsRegistry registry = new MetricsRegistryMap();
    KafkaSystemConsumerMetrics metrics = new KafkaSystemConsumerMetrics(systemName, registry);

    // initialize the metrics for the partitions
    metrics.registerTopicPartition(tp1);
    metrics.registerTopicPartition(tp2);

    // initialize the metrics for the host:port
    metrics.registerClientProxy(clientName);

    metrics.setOffsets(tp1, 1001);
    metrics.setOffsets(tp2, 1002);
    expectedValues.put(metrics.offsets().get(tp1).getName(), ""1001"");
    expectedValues.put(metrics.offsets().get(tp2).getName(), ""1002"");

    metrics.incBytesReads(tp1, 10);
    metrics.incBytesReads(tp1, 5); // total 15
    expectedValues.put(metrics.bytesRead().get(tp1).getName(), ""15"");

    metrics.incReads(tp1);
    metrics.incReads(tp1); // total 2
    expectedValues.put(metrics.reads().get(tp1).getName(), ""2"");

    metrics.setHighWatermarkValue(tp2, 1000);
    metrics.setHighWatermarkValue(tp2, 1001); // final value 1001
    expectedValues.put(metrics.highWatermark().get(tp2).getName(), ""1001"");

    metrics.setLagValue(tp1, 200);
    metrics.setLagValue(tp1, 201); // final value 201
    expectedValues.put(metrics.lag().get(tp1).getName(), ""201"");

    metrics.incClientBytesReads(clientName, 100); // broker-bytes-read
    metrics.incClientBytesReads(clientName, 110); // total 210
    expectedValues.put(metrics.clientBytesRead().get(clientName).getName(), ""210"");

    metrics.incClientReads(clientName); // messages-read
    metrics.incClientReads(clientName); // total 2
    expectedValues.put(metrics.clientReads().get(clientName).getName(), ""2"");

    metrics.setNumTopicPartitions(clientName, 2); // ""topic-partitions""
    metrics.setNumTopicPartitions(clientName, 3); // final value 3
    expectedValues.put(metrics.topicPartitions().get(clientName).getName(), ""3"");


    String groupName = metrics.group();
    Assert.assertEquals(groupName, KafkaSystemConsumerMetrics.class.getName());
    Assert.assertEquals(metrics.systemName(), systemName);

    Map<String, Metric> metricMap = registry.getGroup(groupName);
    validate(metricMap, expectedValues);
  }
",non-flaky,5
60930,apache_druid,BaseAveragerTest.testBaseAverager,"  @Test
  public void testBaseAverager()
  {
    BaseAverager<Integer, Integer> avg = new TestAverager(Integer.class, 5, ""test"", ""field"", 1);

    Assert.assertEquals(""test"", avg.getName());
    Assert.assertEquals(5, avg.getNumBuckets());
    Assert.assertEquals(5, avg.getBuckets().length);
    Assert.assertTrue(avg.getBuckets().getClass().isArray());
  }
",non-flaky,5
179465,abel533_Mapper,KeySqlTest.testUserSqlBefore,"    @Test
    public void testUserSqlBefore() {
        SqlSession sqlSession = getSqlSession();
        try {
            UserSqlBeforeMapper mapper = sqlSession.getMapper(UserSqlBeforeMapper.class);

            UserSqlBefore user = new UserSqlBefore();
            user.setName(""liuzh"");
            Assert.assertEquals(1, mapper.insert(user));
            Assert.assertEquals(new Integer(12345), user.getId());

            user = mapper.selectByPrimaryKey(12345);
            Assert.assertEquals(""liuzh"", user.getName());
        } finally {
            sqlSession.close();
        }
    }
",non-flaky,5
38263,palantir_atlasdb,AbstractSerializableTransactionTest.testCycleWithReadOnly,"    @Test
    public void testCycleWithReadOnly() {
        // readOnly has a r/w dep on t2 and t2 has a r/w on t1 and t1 has a w/r dep on readOnly
        // This creates a cycle that is valid under SI, but not SSI
        // The main issue is that readOnly reads an invalid state of the world. because it reads the updated value of
        // t1, but the old value of t2.

        String initialValue = ""100"";
        String newValue = ""101"";
        Transaction t0 = startTransaction();
        put(t0, ""row1"", ""col1"", initialValue);
        put(t0, ""row2"", ""col1"", initialValue);
        t0.commit();

        Transaction t1 = startTransaction();
        put(t1, ""row1"", ""col1"", newValue);
        Transaction t2 = startTransaction();
        String row1Get = get(t2, ""row1"", ""col1"");
        assertEquals(initialValue, row1Get);
        put(t2, ""row2"", ""col1"", row1Get);

        t1.commit();
        Transaction readOnly = startTransaction();
        assertEquals(newValue, get(readOnly, ""row1"", ""col1""));
        assertEquals(initialValue, get(readOnly, ""row2"", ""col1""));

        try {
            t2.commit();
            fail();
        } catch (TransactionSerializableConflictException e) {
            // this is expectecd to throw because it is a write skew
        }
    }
",non-flaky,5
122609,vespa-engine_vespa,UnixPathTest.owner,"    @Test
    public void owner() {
        Path path = fs.getPath(""file.txt"");
        UnixPath unixPath = new UnixPath(path);
        unixPath.writeUtf8File(""foo"");

        unixPath.setOwner(""owner"");
        assertEquals(""owner"", unixPath.getOwner());

        unixPath.setGroup(""group"");
        assertEquals(""group"", unixPath.getGroup());
    }
",non-flaky,5
70861,apache_kafka,TransformationConfigTest.testEmbeddedConfigTimestampRouter,"    @Test
    public void testEmbeddedConfigTimestampRouter() {
        // Validate that we can construct a Connector config containing the extended config for the transform
        HashMap<String, String> connProps = new HashMap<>();
        connProps.put(""name"", ""foo"");
        connProps.put(""connector.class"", MockConnector.class.getName());
        connProps.put(""transforms"", ""example"");
        connProps.put(""transforms.example.type"", TimestampRouter.class.getName());

        Plugins plugins = null; // Safe when we're only constructing the config
        new ConnectorConfig(plugins, connProps);
    }
",non-flaky,5
113766,salesforce_reactive-grpc,ReactiveStreamObserverPublisherServerTest.onErrorDelegates,"    @Test
    public void onErrorDelegates() {
        ServerCallStreamObserver<Object> obs = mock(ServerCallStreamObserver.class);
        Subscriber<Object> sub = mock(Subscriber.class);

        ReactiveStreamObserverPublisherServer<Object> pub = new ReactiveStreamObserverPublisherServer<Object>(obs);
        pub.subscribe(sub);

        Throwable obj = new Exception();

        pub.onError(obj);
        verify(sub).onError(obj);
    }
",non-flaky,5
162748,OpenAPITools_openapi-generator,NameTest.propertyTest,"    @Test
    public void propertyTest() {
        // TODO: test property
    }
",non-flaky,5
118737,netty_netty,ByteBufUtilTest.decodeRandomHexBytesWithEvenLength,"    @Test
    public void decodeRandomHexBytesWithEvenLength() {
        decodeRandomHexBytes(256);
    }
",non-flaky,5
94805,ktuukkan_marine-api,AISMessage09ParserTest.getRAIMFlag,"    @Test
    public void getRAIMFlag() throws Exception {
        // 0 = RAIM not in use (default)
        assertEquals(false, msg.getRAIMFlag());
    }
",non-flaky,5
77547,dropwizard_dropwizard,ResourceTestRuleTest.testValidationGroupsException,"    @Test
    public void testValidationGroupsException() {
        final Response resp = resourceTestRule.target(""/person/blah/validation-groups-exception"")
                .request()
                .post(Entity.json(""{}""));
        assertThat(resp.getStatus()).isEqualTo(Response.Status.INTERNAL_SERVER_ERROR.getStatusCode());
        assertThat(resp.readEntity(String.class))
                .isEqualTo(""{\""code\"":500,\""message\"":\""Parameters must have the same"" +
                        "" validation groups in validationGroupsException\""}"");
    }
",non-flaky,5
19452,eclipse_xtext-core,ImportedNamespaceAwareLocalScopeProviderTest.iterator,"	@Test public void testLocalElementsNotFromIndex() throws Exception {
			public Iterator<EObject> iterator() {
				return resource.getAllContents();
			}
",non-flaky,5
43076,trinodb_trino,BaseConnectorTest.verifySupportsDeleteDeclaration,"    @Test
    public void verifySupportsDeleteDeclaration()
    {
        if (hasBehavior(SUPPORTS_DELETE)) {
            // Covered by testDeleteAllDataFromTable
            return;
        }

        skipTestUnless(hasBehavior(SUPPORTS_CREATE_TABLE));
        try (TestTable table = new TestTable(getQueryRunner()::execute, ""test_supports_delete"", ""AS SELECT * FROM region"")) {
            assertQueryFails(""DELETE FROM "" + table.getName(), ""This connector does not support deletes"");
        }
    }
",non-flaky,5
118765,netty_netty,ByteBufUtilTest.testWriteUtf8Wrapped,"    @Test
    public void testWriteUtf8Wrapped() {
        String usAscii = ""Some UTF-8 like Ã¤ÃâÅÅ"";
        ByteBuf buf = unreleasableBuffer(Unpooled.buffer(16));
        assertWrapped(buf);
        buf.writeBytes(usAscii.getBytes(CharsetUtil.UTF_8));
        ByteBuf buf2 = unreleasableBuffer(Unpooled.buffer(16));
        assertWrapped(buf2);
        ByteBufUtil.writeUtf8(buf2, usAscii);

        assertEquals(buf, buf2);

        buf.release();
        buf2.release();
    }
",non-flaky,5
159618,liquibase_liquibase,MySQLIntegrationTest.dateDefaultValue,"    @Test
    public void dateDefaultValue() throws Exception {
        if (getDatabase() == null) {
            return;
        }
        ExecutorService.getInstance().getExecutor(getDatabase()).execute(new RawSqlStatement(""DROP TABLE IF "" +
                                                                                                     ""EXISTS ad""));
        
        try {
            ExecutorService.getInstance().getExecutor(getDatabase()).execute(new RawSqlStatement(""CREATE TABLE ad (\n"" +
                                                                                                         ""ad_id int(10) unsigned NOT NULL AUTO_INCREMENT,\n"" +
                                                                                                         ""advertiser_id int(10) unsigned NOT NULL,\n"" +
                                                                                                         ""ad_type_id int(10) unsigned NOT NULL,\n"" +
                                                                                                         ""name varchar(155) NOT NULL DEFAULT '',\n"" +
                                                                                                         ""label varchar(155)NOT NULL DEFAULT '',\n"" +
                                                                                                         ""description text NOT NULL,\n"" +
                                                                                                         ""active tinyint(1) NOT NULL DEFAULT '0',\n"" +
                                                                                                         ""created datetime NOT NULL DEFAULT '0000-00-00 00:00:00',\n"" +
                                                                                                         ""updated datetime DEFAULT '0000-00-00 00:00:00',\n"" +
                                                                                                         ""PRIMARY KEY (ad_id),\n"" +
                                                                                                         ""KEY active (active)\n"" +
                                                                                                         "")""));
        } catch (DatabaseException e) {
            if (e.getCause() instanceof SQLSyntaxErrorException) {
                Scope.getCurrentScope().getLog(getClass()).warning(LogType.LOG, ""MySQL returned DatabaseException"", e);
                assumeTrue(""MySQL seems to run in strict mode (no datetime literals with 0000-00-00 allowed). "" + ""Cannot run this test"", false);
                
            } else {
                throw e;
            }
        }
        
        DatabaseSnapshot snapshot = SnapshotGeneratorFactory.getInstance().createSnapshot(CatalogAndSchema.DEFAULT, getDatabase(), new SnapshotControl(getDatabase()));
        Column createdColumn = snapshot.get(new Column().setRelation(new Table().setName(""ad"").setSchema(new Schema())).setName(""created""));
        
        Object defaultValue = createdColumn.getDefaultValue();
        assertNotNull(defaultValue);
        assertEquals(""0000-00-00 00:00:00"", defaultValue);
    }
",non-flaky,5
30983,camunda-cloud_zeebe,ObjectMappingDefaultValuesTest.shouldReturnDefaultValueAfterReset,"  @Test
  public void shouldReturnDefaultValueAfterReset() {
    // given
    final MutableDirectBuffer msgPackBuffer =
        encodeMsgPack(
            (w) -> {
              w.writeMapHeader(2);
              w.writeString(wrapString(""noDefaultValueProp""));
              w.writeInteger(123123L);
              w.writeString(wrapString(""defaultValueProp""));
              w.writeInteger(987L);
            });

    final long defaultValue = -1L;
    final DefaultValuesPOJO pojo = new DefaultValuesPOJO(defaultValue);
    pojo.wrap(msgPackBuffer);

    // when
    pojo.reset();

    // then
    assertThat(pojo.getDefaultValueProperty()).isEqualTo(defaultValue);
  }
",non-flaky,5
176783,ctco_cukes,BaseContextHandlerTest.shouldExtractTwoGroupsInPattern,"    @Test
    public void shouldExtractTwoGroupsInPattern() throws Exception {
        List<String> groups = capturer.extractGroups(""{(hello)}, {(world)}"");
        assertThat(groups, contains(""hello"", ""world""));
    }
",non-flaky,5
98109,vert-x3_vertx-mongo-client,CredentialListParserTest.testAuth_GSSAPI,"  @Test
  public void testAuth_GSSAPI() {
    JsonObject config = new JsonObject();
    String username = TestUtils.randomAlphaString(8);
    String authSource = TestUtils.randomAlphaString(10);
    config.put(""username"", username);
    config.put(""authSource"", authSource);
    config.put(""authMechanism"", ""GSSAPI"");

    List<MongoCredential> credentials = new CredentialListParser(null, config).credentials();
    assertEquals(1, credentials.size());
    MongoCredential credential = credentials.get(0);
    assertEquals(username, credential.getUserName());
    assertNotEquals(authSource, credential.getSource()); // It should ignore the source we pass in

    assertEquals(AuthenticationMechanism.GSSAPI, credential.getAuthenticationMechanism());
  }
",non-flaky,5
156123,soot-oss_soot,AbstractLambdaMetaFactoryCGTest.methodRefWithParameters,"  @Test
  public void methodRefWithParameters() {
    String testClass = ""soot.lambdaMetaFactory.MethodRefWithParameters"";

    final SootMethod target
        = prepareTarget(methodSigFromComponents(testClass, TEST_METHOD_RET, TEST_METHOD_NAME), testClass);

    final CallGraph cg = Scene.v().getCallGraph();

    final String referencedMethodName = ""staticWithCaptures"";

    final String metaFactoryClass = getMetaFactoryNameMethodRef(testClass, referencedMethodName);

    final SootMethod bootstrap
        = Scene.v().getMethod(methodSigFromComponents(metaFactoryClass, ""java.util.function.BiFunction"", ""bootstrap$""));
    final SootMethod metaFactoryConstructor
        = Scene.v().getMethod(methodSigFromComponents(metaFactoryClass, ""void"", ""<init>""));
    final SootMethod apply = Scene.v().getMethod(
        methodSigFromComponents(metaFactoryClass, ""java.lang.Object"", ""apply"", ""java.lang.Object"", ""java.lang.Object""));
    final SootMethod referencedMethod
        = Scene.v().getMethod(methodSigFromComponents(testClass, ""int"", referencedMethodName, ""int"", ""java.lang.Integer""));

    final List<Edge> edgesFromTarget = newArrayList(cg.edgesOutOf(target));

    assertTrue(""There should be an edge from main to the bootstrap method of the synthetic LambdaMetaFactory"",
        edgesFromTarget.stream().anyMatch(e -> e.tgt().equals(bootstrap) && e.isStatic()));
    assertTrue(""There should be an edge to the constructor of the LambdaMetaFactory in the bootstrap method"",
        newArrayList(cg.edgesOutOf(bootstrap)).stream()
            .anyMatch(e -> e.tgt().equals(metaFactoryConstructor) && e.isSpecial()));
    assertTrue(""There should be an interface invocation on the referenced method"",
        edgesFromTarget.stream().anyMatch(e -> e.getTgt().equals(apply) && e.kind() == Kind.INTERFACE));
    assertTrue(""There should be a static call to the referenced method"",
        newArrayList(cg.edgesOutOf(apply)).stream().anyMatch(e -> e.getTgt().equals(referencedMethod) && e.isStatic()));

    validateAllBodies(target.getDeclaringClass(), bootstrap.getDeclaringClass());
  }
",non-flaky,5
98215,apache_jackrabbit,FieldValueParserTest.testDavComplianceHeader,"    @Test
    public void testDavComplianceHeader() {

        List<String> l;

        l = FieldValueParser.tokenizeList(""1"");
        assertArrayEquals(new String[]{""1""}, l.toArray());

        l = FieldValueParser.tokenizeList(""1,2,,,,,3,,bind,"");
        assertArrayEquals(new String[]{""1"",""2"",""3"",""bind""}, l.toArray());

        l = FieldValueParser.tokenizeList(""1,2,<http://example.com/foo,bar>"");
        assertArrayEquals(new String[]{""1"",""2"",""<http://example.com/foo,bar>""}, l.toArray());
    }
",non-flaky,5
86072,graylog2_graylog2-server,AggregationEventProcessorTest.testEventsFromAggregationResultWithEmptyResultUsesEventDefinitionStreamAsSourceStreams,"    @Test
    public void testEventsFromAggregationResultWithEmptyResultUsesEventDefinitionStreamAsSourceStreams() {
        final DateTime now = DateTime.now(DateTimeZone.UTC);
        final AbsoluteRange timerange = AbsoluteRange.create(now.minusHours(1), now.plusHours(1));

        // We expect to get the end of the aggregation timerange as event time
        final TestEvent event1 = new TestEvent(timerange.to());
        final TestEvent event2 = new TestEvent(timerange.to());
        when(eventFactory.createEvent(any(EventDefinition.class), eq(now), anyString()))
                .thenReturn(event1)  // first invocation return value
                .thenReturn(event2); // second invocation return value

        final EventDefinitionDto eventDefinitionDto = EventDefinitionDto.builder()
                .id(""dto-id-1"")
                .title(""Test Aggregation"")
                .description(""A test aggregation event processors"")
                .priority(1)
                .alert(false)
                .notificationSettings(EventNotificationSettings.withGracePeriod(60000))
                .config(AggregationEventProcessorConfig.builder()
                        .query("""")
                        .streams(ImmutableSet.of(""stream-2""))
                        .groupBy(ImmutableList.of(""group_field_one"", ""group_field_two""))
                        .series(ImmutableList.of())
                        .conditions(null)
                        .searchWithinMs(30000)
                        .executeEveryMs(30000)
                        .build())
                .keySpec(ImmutableList.of())
                .build();
        final AggregationEventProcessorParameters parameters = AggregationEventProcessorParameters.builder()
                .timerange(timerange)
                .build();

        final AggregationEventProcessor eventProcessor = new AggregationEventProcessor(eventDefinitionDto, searchFactory, eventProcessorDependencyCheck, stateService, moreSearch, streamService, messages);

        final AggregationResult result = AggregationResult.builder()
                .effectiveTimerange(timerange)
                .totalAggregatedMessages(0)
                .sourceStreams(ImmutableSet.of()) // No streams in result
                .keyResults(ImmutableList.of(
                        AggregationKeyResult.builder()
                                .key(ImmutableList.of(""one"", ""two""))
                                .timestamp(now)
                                .seriesValues(ImmutableList.of(
                                        AggregationSeriesValue.builder()
                                                .key(ImmutableList.of(""a""))
                                                .value(0.0d)
                                                .series(AggregationSeries.builder()
                                                        .id(""abc123"")
                                                        .function(AggregationFunction.COUNT)
                                                        .build())
                                                .build()
                                ))
                                .build()
                ))
                .build();

        final ImmutableList<EventWithContext> eventsWithContext = eventProcessor.eventsFromAggregationResult(eventFactory, parameters, result);

        assertThat(eventsWithContext).hasSize(1);

        assertThat(eventsWithContext.get(0)).satisfies(eventWithContext -> {
            final Event event = eventWithContext.event();

            assertThat(event.getId()).isEqualTo(event1.getId());
            assertThat(event.getMessage()).isEqualTo(event1.getMessage());
            assertThat(event.getEventTimestamp()).isEqualTo(timerange.to());
            assertThat(event.getTimerangeStart()).isEqualTo(timerange.from());
            assertThat(event.getTimerangeEnd()).isEqualTo(timerange.to());
            // Must contain the stream from the event definition because there is none in the result
            assertThat(event.getSourceStreams()).containsOnly(""stream-2"");

            final Message message = eventWithContext.messageContext().orElse(null);

            assertThat(message).isNotNull();
            assertThat(message.getField(""group_field_one"")).isEqualTo(""one"");
            assertThat(message.getField(""group_field_two"")).isEqualTo(""two"");
            assertThat(message.getField(""aggregation_key"")).isEqualTo(""one|two"");
            assertThat(message.getField(""aggregation_value_count"")).isEqualTo(0.0d);
        });
    }
",non-flaky,5
33691,alibaba_fastjson,JSONScannerTest.checkDate14,"  @Test
  public void checkDate14() throws Throwable {

    // Arrange
    char y0 = '2';
    char y1 = '1';
    char y2 = '1';
    char y3 = '1';
    char M0 = '1';
    char M1 = '0';
    int d0 = 51;
    int d1 = -2147483600;

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkDate"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""int""), Reflector.forName(""int""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, y0, y1, y2, y3, M0, M1, d0, d1);

    // Assert result
    Assert.assertEquals(false, retval);

  }
",non-flaky,5
170455,eclipse_jetty.project,ObjectMBeanTest.testMBeanForString,"    @Test
    public void testMBeanForString()
    {
        String obj = ""foo"";
        Object mbean = container.mbeanFor(obj);
        assertNotNull(mbean);
        container.beanAdded(null, obj);
        ObjectName objectName = container.findMBean(obj);
        assertNotNull(objectName);
    }
",non-flaky,5
156390,apache_commons-lang,StringUtilsEmptyBlankTest.testIsAnyEmpty,"    @Test
    public void testIsAnyEmpty() {
        assertTrue(StringUtils.isAnyEmpty((String) null));
        assertFalse(StringUtils.isAnyEmpty((String[]) null));
        assertTrue(StringUtils.isAnyEmpty(null, ""foo""));
        assertTrue(StringUtils.isAnyEmpty("""", ""bar""));
        assertTrue(StringUtils.isAnyEmpty(""bob"", """"));
        assertTrue(StringUtils.isAnyEmpty(""  bob  "", null));
        assertFalse(StringUtils.isAnyEmpty("" "", ""bar""));
        assertFalse(StringUtils.isAnyEmpty(""foo"", ""bar""));
    }
",non-flaky,5
135005,undertow-io_undertow,TestMessagesReceivedInOrder.onOpen,"    @Test
    public void testMessagesReceivedInOrder() throws Exception {
        stacks.clear();
        EchoSocket.receivedEchos = new FutureResult<>();
        final ClientEndpointConfig clientEndpointConfig = ClientEndpointConfig.Builder.create().build();
        final CountDownLatch done = new CountDownLatch(1);
        final AtomicReference<String> error = new AtomicReference<>();
        ContainerProvider.getWebSocketContainer()
                .connectToServer(new Endpoint() {
                                     @Override
                                     public void onOpen(final Session session, EndpointConfig endpointConfig) {

                                         try {
                                             RemoteEndpoint.Basic rem = session.getBasicRemote();
                                             List<String> messages = new ArrayList<>();
                                             for (int i = 0; i < MESSAGES; i++) {
                                                 byte[] data = new byte[2048];
                                                 (new Random()).nextBytes(data);
                                                 String crc = md5(data);
                                                 rem.sendBinary(ByteBuffer.wrap(data));
                                                 messages.add(crc);
                                             }

                                             List<String> received = EchoSocket.receivedEchos.getIoFuture().get();
                                             StringBuilder sb = new StringBuilder();
                                             boolean fail = false;
                                             for (int i = 0; i < messages.size(); i++) {
                                                 if (received.size() <= i) {
                                                     fail = true;
                                                     sb.append(i + "": should be "" + messages.get(i) + "" but is empty."");
                                                 } else {
                                                     if (!messages.get(i).equals(received.get(i))) {
                                                         fail = true;
                                                         sb.append(i + "": should be "" + messages.get(i) + "" but is "" + received.get(i) + "" (but found at "" + received.indexOf(messages.get(i)) + "")."");
                                                     }
                                                 }
                                             }
                                             if(fail) {
                                                 error.set(sb.toString());
                                             }
                                             done.countDown();

                                         } catch (Throwable t) {
                                             System.out.println(t);
                                         }
                                     }
",non-flaky,5
156381,apache_commons-lang,ClassPathUtilsTest.testToFullyQualifiedNamePackageString,"    @Test
    public void testToFullyQualifiedNamePackageString() {
        final String expected = ""org.apache.commons.lang3.Test.properties"";
        final String actual = ClassPathUtils.toFullyQualifiedName(ClassPathUtils.class.getPackage(), ""Test.properties"");

        assertEquals(expected, actual);
    }
",non-flaky,5
77535,dropwizard_dropwizard,ResourceTestRuleWithGrizzlyTest.testExceptionMapper,"    @Test
    public void testExceptionMapper() {
        final Response resp = resourceTestRule.target(""test"").request()
                .post(Entity.json(""""));
        assertThat(resp.getStatus()).isEqualTo(500);
        assertThat(resp.readEntity(String.class)).isEqualTo(""Can't touch this"");
    }
",non-flaky,5
91477,strapdata_elassandra,PrimaryAllocationIT.testPrimaryReplicaResyncFailed,"    @TestLogging(""_root:DEBUG, org.elasticsearch.cluster.routing.allocation:TRACE, org.elasticsearch.cluster.action.shard:TRACE,"" +
    public void testPrimaryReplicaResyncFailed() throws Exception {
        String master = internalCluster().startMasterOnlyNode(Settings.EMPTY);
        final int numberOfReplicas = between(2, 3);
        final String oldPrimary = internalCluster().startDataOnlyNode();
        assertAcked(
            prepareCreate(""test"", Settings.builder().put(indexSettings())
                .put(SETTING_NUMBER_OF_SHARDS, 1)
                .put(SETTING_NUMBER_OF_REPLICAS, numberOfReplicas)));
        final ShardId shardId = new ShardId(clusterService().state().metaData().index(""test"").getIndex(), 0);
        final Set<String> replicaNodes = new HashSet<>(internalCluster().startDataOnlyNodes(numberOfReplicas));
        ensureGreen();
        assertAcked(
            client(master).admin().cluster().prepareUpdateSettings()
                .setTransientSettings(Settings.builder().put(""cluster.routing.allocation.enable"", ""none"")).get());
        logger.info(""--> Indexing with gap in seqno to ensure that some operations will be replayed in resync"");
        long numDocs = scaledRandomIntBetween(5, 50);
        for (int i = 0; i < numDocs; i++) {
            IndexResponse indexResult = index(""test"", ""doc"", Long.toString(i));
            assertThat(indexResult.getShardInfo().getSuccessful(), equalTo(numberOfReplicas + 1));
        }
        final IndexShard oldPrimaryShard = internalCluster().getInstance(IndicesService.class, oldPrimary).getShardOrNull(shardId);
        EngineTestCase.generateNewSeqNo(IndexShardTestCase.getEngine(oldPrimaryShard)); // Make gap in seqno.
        long moreDocs = scaledRandomIntBetween(1, 10);
        for (int i = 0; i < moreDocs; i++) {
            IndexResponse indexResult = index(""test"", ""doc"", Long.toString(numDocs + i));
            assertThat(indexResult.getShardInfo().getSuccessful(), equalTo(numberOfReplicas + 1));
        }
        final Set<String> replicasSide1 = Sets.newHashSet(randomSubsetOf(between(1, numberOfReplicas - 1), replicaNodes));
        final Set<String> replicasSide2 = Sets.difference(replicaNodes, replicasSide1);
        NetworkDisruption partition = new NetworkDisruption(new TwoPartitions(replicasSide1, replicasSide2), new NetworkDisconnect());
        internalCluster().setDisruptionScheme(partition);
        logger.info(""--> isolating some replicas during primary-replica resync"");
        partition.startDisrupting();
        internalCluster().stopRandomNode(InternalTestCluster.nameFilter(oldPrimary));
        // Checks that we fails replicas in one side but not mark them as stale.
        assertBusy(() -> {
            ClusterState state = client(master).admin().cluster().prepareState().get().getState();
            final IndexShardRoutingTable shardRoutingTable = state.routingTable().shardRoutingTable(shardId);
            final String newPrimaryNode = state.getRoutingNodes().node(shardRoutingTable.primary.currentNodeId()).node().getName();
            assertThat(newPrimaryNode, not(equalTo(oldPrimary)));
            Set<String> selectedPartition = replicasSide1.contains(newPrimaryNode) ? replicasSide1 : replicasSide2;
            assertThat(shardRoutingTable.activeShards(), hasSize(selectedPartition.size()));
            for (ShardRouting activeShard : shardRoutingTable.activeShards()) {
                assertThat(state.getRoutingNodes().node(activeShard.currentNodeId()).node().getName(), isIn(selectedPartition));
            }
            assertThat(state.metaData().index(""test"").inSyncAllocationIds(shardId.id()), hasSize(numberOfReplicas + 1));
        }, 1, TimeUnit.MINUTES);
        assertAcked(
            client(master).admin().cluster().prepareUpdateSettings()
                .setTransientSettings(Settings.builder().put(""cluster.routing.allocation.enable"", ""all"")).get());
        partition.stopDisrupting();
        partition.ensureHealthy(internalCluster());
        logger.info(""--> stop disrupting network and re-enable allocation"");
        assertBusy(() -> {
            ClusterState state = client(master).admin().cluster().prepareState().get().getState();
            assertThat(state.routingTable().shardRoutingTable(shardId).activeShards(), hasSize(numberOfReplicas));
            assertThat(state.metaData().index(""test"").inSyncAllocationIds(shardId.id()), hasSize(numberOfReplicas + 1));
            for (String node : replicaNodes) {
                IndexShard shard = internalCluster().getInstance(IndicesService.class, node).getShardOrNull(shardId);
                assertThat(shard.getLocalCheckpoint(), equalTo(numDocs + moreDocs));
            }
        }, 30, TimeUnit.SECONDS);
        internalCluster().assertConsistentHistoryBetweenTranslogAndLuceneIndex();
    }
",non-flaky,5
60915,apache_druid,LongMaxAveragerFactoryTest.testCreateAverager,"  @Test
  public void testCreateAverager()
  {
    AveragerFactory<?, ?> fac = new LongMaxAveragerFactory(""test"", 5, 1, ""field"");
    Assert.assertThat(fac.createAverager(), IsInstanceOf.instanceOf(LongMaxAverager.class));
  }
",non-flaky,5
118686,netty_netty,XmlDecoderTest.shouldDecodeXmlHeader,"    @Test
    public void shouldDecodeXmlHeader() {
        Object temp;

        write(XML3);

        temp = channel.readInbound();
        assertThat(temp, instanceOf(XmlDocumentStart.class));
        assertThat(((XmlDocumentStart) temp).version(), is(""1.1""));
        assertThat(((XmlDocumentStart) temp).encoding(), is(""UTF-8""));
        assertThat(((XmlDocumentStart) temp).standalone(), is(true));
        assertThat(((XmlDocumentStart) temp).encodingScheme(), is(""UTF-8""));

        temp = channel.readInbound();
        assertThat(temp, instanceOf(XmlElementStart.class));
        assertThat(((XmlElementStart) temp).name(), is(""netty""));
        assertThat(((XmlElementStart) temp).prefix(), is(""""));
        assertThat(((XmlElementStart) temp).namespace(), is(""""));
        assertThat(((XmlElementStart) temp).attributes().size(), is(0));
        assertThat(((XmlElementStart) temp).namespaces().size(), is(0));

        temp = channel.readInbound();
        assertThat(temp, instanceOf(XmlElementEnd.class));
        assertThat(((XmlElementEnd) temp).name(), is(""netty""));
        assertThat(((XmlElementEnd) temp).prefix(), is(""""));
        assertThat(((XmlElementEnd) temp).namespace(), is(""""));
        assertThat(((XmlElementEnd) temp).namespaces().size(), is(0));

        temp = channel.readInbound();
        assertThat(temp, nullValue());
    }
",non-flaky,5
156089,soot-oss_soot,TypeBasedReflectionModelAnySubTypeTest.anySubTypeTypestateResolution,"  @Test
  public void anySubTypeTypestateResolution() {
    SootMethod entryPoint = prepareTarget(TEST_TYPESTATE_ENTRY_POINT, TEST_PACKAGE);
    commonInvokeTest(entryPoint);
  }
",non-flaky,5
97958,ReactiveX_RxJava,ConcatTests.testConcatCovariance2,"    @Test
    public void testConcatCovariance2() {
        Observable<Media> o1 = Observable.from(new HorrorMovie(), new Movie(), new Media());
        Observable<Media> o2 = Observable.from(new Media(), new HorrorMovie());

        Observable<Observable<Media>> os = Observable.from(o1, o2);

        List<Media> values = Observable.concat(os).toList().toBlockingObservable().single();
    }
",non-flaky,5
60913,apache_druid,DoubleMinAveragerFactoryTest.testCreateAverager,"  @Test
  public void testCreateAverager()
  {
    AveragerFactory<?, ?> fac = new DoubleMinAveragerFactory(""test"", 5, 1, ""field"");
    Assert.assertThat(fac.createAverager(), IsInstanceOf.instanceOf(DoubleMinAverager.class));
  }
",non-flaky,5
99707,apache_cassandra,DistributionGaussianTest.negValueGaussian,"    @Test
    public void negValueGaussian()
    {
        Distribution dist = OptionDistribution.get(""gaussian(-1000..-10)"").get();
        assertTrue(dist instanceof DistributionBoundApache);

        assertEquals(-1000, dist.minValue());
        assertEquals( -10, dist.maxValue());
        assertEquals(-504, dist.average());

        assertEquals(-1000, dist.inverseCumProb(0d));
        assertEquals(-10, dist.inverseCumProb(1d));
    }
",non-flaky,5
162698,OpenAPITools_openapi-generator,ArrayTestTest.arrayArrayOfIntegerTest,"    @Test
    public void arrayArrayOfIntegerTest() {
        // TODO: test arrayArrayOfInteger
    }
",non-flaky,5
38271,palantir_atlasdb,AbstractSerializableTransactionTest.testColumnSelection2,"    @Test
    public void testColumnSelection2() {
        String initialValue = ""100"";
        Transaction t0 = startTransaction();
        put(t0, ""row1"", ""col1"", initialValue);
        put(t0, ""row1"", ""col2"", initialValue);
        put(t0, ""row2"", ""col1"", initialValue);
        t0.commit();

        Transaction t1 = startTransaction();
        BatchingVisitables.copyToList(t1.getRange(TEST_TABLE, RangeRequest.builder().retainColumns(ImmutableList.of(PtBytes.toBytes(""col1""))).build()));
        BatchingVisitables.copyToList(t1.getRange(TEST_TABLE, RangeRequest.builder().retainColumns(ImmutableList.of(PtBytes.toBytes(""col2""))).build()));

        // We need to do at least one put so we don't get caught by the read only code path
        put(t1, ""row22"", ""col2"", initialValue);

        t1.commit();
    }
",non-flaky,5
99708,apache_cassandra,MultiResultLoggerTest.delegatesToInitialPrintStream,"    @Test
    public void delegatesToInitialPrintStream() throws Exception
    {
        ByteArrayOutputStream output = new ByteArrayOutputStream();
        PrintStream printStream = new PrintStream(output, true);
        MultiResultLogger underTest = new MultiResultLogger(printStream);

        underTest.println(""Very important result"");

        assertEquals(""Very important result\n"", output.toString());
    }
",non-flaky,5
77511,dropwizard_dropwizard,DAOTestRuleWithoutLoggingBootstrapTest.ruleCreatedSessionFactory,"    @Test
    public void ruleCreatedSessionFactory() {
        final SessionFactory sessionFactory = daoTestRule.getSessionFactory();

        assertThat(sessionFactory).isNotNull();
    }
",non-flaky,5
91407,OpenLCB_OpenLCB_Java,DatagramAcknowledgedMessageTest.testCTor,"    @Test
    public void testCTor() {
        NodeID id1 = new NodeID(new byte[]{1, 1, 0, 0, 0, 4});
        NodeID id2 = new NodeID(new byte[]{1, 1, 0, 0, 4, 4});
        DatagramAcknowledgedMessage t = new DatagramAcknowledgedMessage(id1,id2);
        Assert.assertNotNull(""exists"",t);
    }
",non-flaky,5
89293,apache_samza,TestLocalStoreMonitor.shouldDeleteLocalStoreWhenLastModifiedTimeOfOffsetFileIsGreaterThanOffsetTTL,"  @Test
  public void shouldDeleteLocalStoreWhenLastModifiedTimeOfOffsetFileIsGreaterThanOffsetTTL() throws Exception {
    File offsetFile = createOffsetFile(taskStoreDir);
    offsetFile.setLastModified(0);
    localStoreMonitor.monitor();
    assertTrue(""Offset file should not exist."", !offsetFile.exists());
    assertEquals(0, localStoreMonitorMetrics.diskSpaceFreedInBytes.getCount());
  }
",non-flaky,5
104625,apache_pinot,RealtimeClusterIntegrationTest.testSqlQueriesFromQueryFile,"  @Test
  public void testSqlQueriesFromQueryFile()
      throws Exception {
    super.testSqlQueriesFromQueryFile();
  }
",non-flaky,5
94608,square_okhttp,CacheTest.assertCookies,"  @Test public void getHeadersRetainsCached200LevelWarnings() throws Exception {
  public void assertCookies(HttpUrl url, String... expectedCookies) throws Exception {
    List<String> actualCookies = new ArrayList<>();
    for (HttpCookie cookie : cookieManager.getCookieStore().get(url.uri())) {
      actualCookies.add(cookie.toString());
    }
    assertEquals(Arrays.asList(expectedCookies), actualCookies);
  }
",non-flaky,5
76949,Tencent_Firestorm,ShuffleReadClientImplTest.readTest10,"  @Test
  public void readTest10() throws Exception {
    String basePath = HDFS_URI + ""clientReadTest10"";
    HdfsShuffleWriteHandler writeHandler =
        new HdfsShuffleWriteHandler(""appId"", 0, 0, 1, basePath, ""test"", conf);

    Map<Long, byte[]> expectedData = Maps.newHashMap();
    Roaring64NavigableMap blockIdBitmap = Roaring64NavigableMap.bitmapOf();
    Roaring64NavigableMap taskIdBitmap = Roaring64NavigableMap.bitmapOf(0);
    writeTestData(writeHandler, 5, 30, 0, expectedData, blockIdBitmap);
    Roaring64NavigableMap wrongBlockIdBitmap = Roaring64NavigableMap.bitmapOf();
    LongIterator iter = blockIdBitmap.getLongIterator();
    while (iter.hasNext()) {
      wrongBlockIdBitmap.addLong(iter.next() + (1 << Constants.TASK_ATTEMPT_ID_MAX_LENGTH));
    }

    ShuffleReadClientImpl readClient = new ShuffleReadClientImpl(StorageType.HDFS.name(),
        ""appId"", 0, 0, 100, 2, 10, 100,
        basePath, wrongBlockIdBitmap, taskIdBitmap, Lists.newArrayList(), new Configuration());
    assertNull(readClient.readShuffleBlockData());
    try {
      readClient.checkProcessedBlockIds();
      fail(EXPECTED_EXCEPTION_MESSAGE);
    } catch (Exception e) {
      assertTrue(e.getMessage().contains(""Blocks read inconsistent:""));
    }
  }
",non-flaky,5
160381,ConsenSys_teku,ChainDataProviderTest.setup,"  @BeforeEach
  public void setup() {
    slot = UInt64.valueOf(specConfig.getSlotsPerEpoch() * 3L);
    actualBalance = specConfig.getMaxEffectiveBalance().plus(100000);
    storageSystem.chainUpdater().initializeGenesis(true, actualBalance, Optional.empty());
    bestBlock = storageSystem.chainUpdater().advanceChain(slot);
    storageSystem.chainUpdater().updateBestBlock(bestBlock);

    recentChainData = storageSystem.recentChainData();
    beaconStateInternal = bestBlock.getState();

    combinedChainDataClient = storageSystem.combinedChainDataClient();
    blockRoot = bestBlock.getRoot();
  }
",non-flaky,5
94620,square_okhttp,InterceptorTest.intercept,"  @Test public void networkInterceptorsCannotShortCircuitResponses() throws Exception {
      @Override public Response intercept(Chain chain) throws IOException {
        return new Response.Builder()
            .request(chain.request())
            .protocol(Protocol.HTTP_1_1)
            .code(200)
            .message(""Intercepted!"")
            .body(ResponseBody.create(MediaType.parse(""text/plain; charset=utf-8""), ""abc""))
            .build();
      }
",non-flaky,5
156045,jReddit_jReddit,SubredditTest.testAllSubredditFields,"    @Test
    public void testAllSubredditFields() {
        
        // Field values
        String submit_text_html = null;
        Boolean user_is_banned = null;
        String id = ""SubredditID"";
        String kind = Kind.SUBREDDIT.value();
        String submit_text = ""submit text for subreddit"";
        String display_name = ""subredditDisplayName"";
        String header_img = ""http://a.thumbs.redditmedia.com/yyL5sveWcgkCPKbr.png"";
        String description_html = ""&lt;div&gt;HTML description for subreddit&lt;/d&gt;"";
        String title = ""SubredditTitle"";
        Boolean over18 = false;
        Boolean user_is_moderator = null;
        String header_title = ""Header title for subreddit"";
        String description = ""Description for subreddit"";
        String submit_link_label = ""Submit link label"";
        String accounts_active = null;
        Boolean public_traffic = true;
        JSONArray header_size = JsonHelpers.jsonArrayOf(160, 64);
        long subscribers = 289252;
        String submit_text_label = ""Submit text label"";
        String name = kind + ""_"" + id;
        double created = 1201242956.0;
        String url = ""/r/"" + display_name;
        double created_utc = 1201242956.0;
        Boolean user_is_contributor = null;
        String public_description = ""Public description of subreddit"";
        long comment_score_hide_mins = 0;
        String subreddit_type = ""public"";
        String submission_type = ""any"";
        Boolean user_is_subscriber = null;
        
        // Create JSON Object
        JSONObject data = new JSONObject();
        data.put(""submit_text_html"", submit_text_html);
        data.put(""user_is_banned"", user_is_banned);
        data.put(""id"", id);
        data.put(""submit_text"", submit_text);
        data.put(""display_name"", display_name);
        data.put(""header_img"", header_img);
        data.put(""description_html"", description_html);
        data.put(""title"", title);
        data.put(""over18"", over18);
        data.put(""user_is_moderator"", user_is_moderator);
        data.put(""header_title"", header_title);
        data.put(""description"", description);
        data.put(""submit_link_label"", submit_link_label);
        data.put(""accounts_active"", accounts_active);
        data.put(""public_traffic"", public_traffic);
        data.put(""header_size"", header_size);
        data.put(""subscribers"", subscribers);
        data.put(""submit_text_label"", submit_text_label);
        data.put(""name"", name);
        data.put(""created"", created);
        data.put(""url"", url);
        data.put(""created_utc"", created_utc);
        data.put(""user_is_contributor"", user_is_contributor);
        data.put(""public_description"", public_description);
        data.put(""comment_score_hide_mins"", comment_score_hide_mins);
        data.put(""subreddit_type"", subreddit_type);
        data.put(""submission_type"", submission_type);
        data.put(""user_is_subscriber"", user_is_subscriber);
        
        // Parse
        Subreddit s = new Subreddit(data);
        
        // Test data fields
        assertEquals(s.getDisplayName(), display_name);
        assertEquals(s.getTitle(), title);
        assertEquals(s.getURL(), url);
        assertEquals(s.getCreated(), created, 0);
        assertEquals(s.getCreatedUTC(), created_utc, 0);
        assertEquals(s.isNSFW(), over18);
        assertEquals(s.getSubscribers(), subscribers);
        assertEquals(s.getDescription(), description);
        assertEquals(s.getSubredditType(), subreddit_type);
        
        // Possible tests to activate:
//        assertEquals(s.getSubmitTextHTML(), submit_text_html);
//        assertEquals(s.isUserBanned(), user_is_banned);
//        assertEquals(s.getSubmitText(), submit_text);
//        assertEquals(s.getHeaderIMG(), header_img);
//        assertEquals(s.getDescriptionHTML(), description_html);
//        assertEquals(s.isUserModerator(), user_is_moderator);
//        assertEquals(s.getHeaderTitle(), header_title);
//        assertEquals(s.getSubmitLinkLabel(), submit_link_label);
//        assertEquals(s.getAccountsActive(), accounts_active);
//        assertEquals(s.getPublicTraffic(), public_traffic);
//        assertEquals(s.getHeaderSize(), header_size);
//        assertEquals(s.getSubmitTextLabel(), submit_text_label);
//        assertEquals(s.isUserContributor(), user_is_contributor);
//        assertEquals(s.getPublicDescription(), public_description);
//        assertEquals(s.getCommentScoreHideMins(), comment_score_hide_mins, 0);
//        assertEquals(s.getSubmissionType(), submission_type);
//        assertEquals(s.isUserSubscriber(), user_is_subscriber);
        
    }
",non-flaky,5
156127,soot-oss_soot,Issue1146Test.getVertrag2Test,"  @Test
  public void getVertrag2Test() {
    String testClass = ""soot.lambdaMetaFactory.Issue1146"";

    final SootMethod target = prepareTarget(
        methodSigFromComponents(testClass, ""soot.lambdaMetaFactory.Issue1146$Vertrag"", ""getVertrag2"", ""java.lang.String""),
        testClass, ""java.util.function.Function"");
    // if no exception is thrown, everything is working as intended
  }
",non-flaky,5
43038,trinodb_trino,BaseDynamicPartitionPruningTest.testRightJoinWithEmptyBuildSide,"    @Test(timeOut = 30_000)
    public void testRightJoinWithEmptyBuildSide()
    {
        @Language(""SQL"") String selectQuery = ""SELECT * FROM partitioned_lineitem l RIGHT JOIN supplier s ON l.suppkey = s.suppkey WHERE name = 'abc'"";
        ResultWithQueryId<MaterializedResult> result = getDistributedQueryRunner().executeWithQueryId(
                getSession(),
                selectQuery);
        MaterializedResult expected = computeActual(withDynamicFilteringDisabled(), selectQuery);
        assertEqualsIgnoreOrder(result.getResult(), expected);

        OperatorStats probeStats = searchScanFilterAndProjectOperatorStats(result.getQueryId(), getQualifiedTableName(PARTITIONED_LINEITEM));
        assertEquals(probeStats.getInputPositions(), 0L);

        DynamicFiltersStats dynamicFiltersStats = getDynamicFilteringStats(result.getQueryId());
        assertEquals(dynamicFiltersStats.getTotalDynamicFilters(), 1L);
        assertEquals(dynamicFiltersStats.getLazyDynamicFilters(), 1L);
        assertEquals(dynamicFiltersStats.getReplicatedDynamicFilters(), 0L);
        assertEquals(dynamicFiltersStats.getDynamicFiltersCompleted(), 1L);

        DynamicFilterDomainStats domainStats = getOnlyElement(dynamicFiltersStats.getDynamicFilterDomainStats());
        assertEquals(domainStats.getSimplifiedDomain(), none(BIGINT).toString(getSession().toConnectorSession()));
    }
",non-flaky,5
110158,Wikidata_wikidata-toolkit,DirectoryManagerFactoryTest.createDirectoryManagerIoException,"	@Test(expected = IOException.class)
	public void createDirectoryManagerIoException() throws IOException {
		DirectoryManagerFactory.createDirectoryManager(
				""/nonexisting-directory/123456789/hopefully"", true);
	}
",non-flaky,5
333,apache_hadoop,TestViewfsWithNfs3.testNfsRenameMultiNN,"  @Test (timeout = 60000)
  public void testNfsRenameMultiNN() throws Exception {
    HdfsFileStatus fromFileStatus = nn1.getRpcServer().getFileInfo(""/user1"");
    int fromNNId = Nfs3Utils.getNamenodeId(config, hdfs1.getUri());
    FileHandle fromHandle =
        new FileHandle(fromFileStatus.getFileId(), fromNNId);

    HdfsFileStatus toFileStatus = nn2.getRpcServer().getFileInfo(""/user2"");
    int toNNId = Nfs3Utils.getNamenodeId(config, hdfs2.getUri());
    FileHandle toHandle = new FileHandle(toFileStatus.getFileId(), toNNId);

    HdfsFileStatus statusBeforeRename =
        nn1.getRpcServer().getFileInfo(""/user1/renameMultiNN"");
    Assert.assertEquals(statusBeforeRename.isDirectory(), false);

    testNfsRename(fromHandle, ""renameMultiNN"",
        toHandle, ""renameMultiNNFail"", Nfs3Status.NFS3ERR_INVAL);

    HdfsFileStatus statusAfterRename =
        nn2.getRpcServer().getFileInfo(""/user2/renameMultiNNFail"");
    Assert.assertEquals(statusAfterRename, null);

    statusAfterRename = nn1.getRpcServer().getFileInfo(""/user1/renameMultiNN"");
    Assert.assertEquals(statusAfterRename.isDirectory(), false);
  }
",non-flaky,5
70855,apache_kafka,TransformationConfigTest.testEmbeddedConfigInsertField,"    @Test
    public void testEmbeddedConfigInsertField() {
        // Validate that we can construct a Connector config containing the extended config for the transform
        HashMap<String, String> connProps = new HashMap<>();
        connProps.put(""name"", ""foo"");
        connProps.put(""connector.class"", MockConnector.class.getName());
        connProps.put(""transforms"", ""example"");
        connProps.put(""transforms.example.type"", InsertField.Value.class.getName());

        Plugins plugins = null; // Safe when we're only constructing the config
        new ConnectorConfig(plugins, connProps);
    }
",non-flaky,5
177185,line_armeria,RequestContextCurrentTraceContextTest.get_returnsNullWhenCurrentRequestContext_hasNoTraceAttribute,"    @Test
    public void get_returnsNullWhenCurrentRequestContext_hasNoTraceAttribute() {
        try (SafeCloseable requestContextScope = ctx.push()) {
            assertThat(currentTraceContext.get()).isNull();
        }
    }
",non-flaky,5
99767,apache_cassandra,RateBasedBackPressureTest.testBackPressureStateUpdates,"    @Test
    public void testBackPressureStateUpdates()
    {
        long windowSize = 6000;
        TestTimeSource timeSource = new TestTimeSource();
        RateBasedBackPressure strategy = new RateBasedBackPressure(ImmutableMap.of(HIGH_RATIO, ""0.9"", FACTOR, ""10"", FLOW, ""FAST""), timeSource, windowSize);

        RateBasedBackPressureState state = strategy.newState(InetAddressAndPort.getLoopbackAddress());
        state.onMessageSent(null);
        assertEquals(0, state.incomingRate.size());
        assertEquals(0, state.outgoingRate.size());

        state = strategy.newState(InetAddressAndPort.getLoopbackAddress());
        state.onResponseReceived();
        assertEquals(1, state.incomingRate.size());
        assertEquals(1, state.outgoingRate.size());

        state = strategy.newState(InetAddressAndPort.getLoopbackAddress());
        state.onResponseTimeout();
        assertEquals(0, state.incomingRate.size());
        assertEquals(1, state.outgoingRate.size());
    }
",non-flaky,5
21210,androidx_androidx,PreferenceDataStoreTest.testGetIntWithDataStoreOnMgr,"    @Test
    public void testGetIntWithDataStoreOnMgr() {
        mManager.setPreferenceDataStore(mDataStore);
        mScreen.addPreference(mPreference);

        mPreference.getInt(1);

        verify(mDataStore, atLeastOnce()).getInt(eq(KEY), eq(1));
    }
",non-flaky,5
113973,apache_struts,RequiredFieldValidatorTest.testCollectionObject,"    @Test
    public void testCollectionObject() throws Exception {
        // given
        RequiredFieldValidator rfv = container.inject(RequiredFieldValidator.class);
        rfv.setValueStack(ActionContext.getContext().getValueStack());
        rfv.setFieldName(""shorts"");
        rfv.setDefaultMessage(""${fieldName} field is required!"");
        ValidationAction action = new ValidationAction();
        action.setShorts(new ArrayList<Short>());
        DummyValidatorContext context = new DummyValidatorContext(action, container.getInstance(TextProviderFactory.class));
        rfv.setValidatorContext(context);

        // when
        rfv.validate(action);

        // then
        assertTrue(context.hasFieldErrors());
        assertEquals(1, context.getFieldErrors().size());
        assertNotNull(context.getFieldErrors().get(""shorts""));
        assertEquals(""shorts field is required!"", context.getFieldErrors().get(""shorts"").get(0));
    }
",non-flaky,5
77429,opensearch-project_OpenSearch,BwcVersionsTests.testExceptionOnEmpty,"    @Test(expected = IllegalArgumentException.class)
    public void testExceptionOnEmpty() {
        new BwcVersions(asList(""foo"", ""bar""), Version.fromString(""7.0.0""));
    }
",non-flaky,5
77626,pholser_junit-quickcheck,DurationPropertyParameterTypesTest.shouldHold,"    @Test public void missingMin() {
        @Property public void shouldHold(
            @InRange(max = ""PT2562047788015215H30M7.999999999S"") Duration d) {

            assertThat(
                d,
                lessThanOrEqualTo(
                    Duration.parse(""PT2562047788015215H30M7.999999999S"")));
        }
",non-flaky,5
159635,liquibase_liquibase,OracleIntegrationTest.viewCreatedOnCorrectSchema,"    @Test
    public void viewCreatedOnCorrectSchema() throws Exception {
        assumeNotNull(this.getDatabase());

        Liquibase liquibase = createLiquibase(this.viewOnSchemaChangeLog);
        clearDatabase();

        try {
            liquibase.update(this.contexts);
        } catch (ValidationFailedException e) {
            e.printDescriptiveError(System.out);
            throw e;
        }

        Statement queryIndex = ((JdbcConnection) this.getDatabase().getConnection()).getUnderlyingConnection().createStatement();

        ResultSet indexOwner = queryIndex.executeQuery(""SELECT owner FROM ALL_VIEWS WHERE view_name = 'V_BOOK2'"");

        assertTrue(indexOwner.next());

        String owner = indexOwner.getString(""owner"");

        assertEquals(""LBCAT2"", owner);

        // check that the automatically rollback now works too
        try {
            liquibase.rollback( new Date(0),this.contexts);
        } catch (ValidationFailedException e) {
            e.printDescriptiveError(System.out);
            throw e;
        }
    }
",non-flaky,5
77435,opensearch-project_OpenSearch,UpdateShasTaskTests.whenLicensesDirDoesntExistThenShouldThrowException,"    @Test
    public void whenLicensesDirDoesntExistThenShouldThrowException() throws IOException, NoSuchAlgorithmException {
        expectedException.expect(GradleException.class);
        expectedException.expectMessage(containsString(""isn't a valid directory""));

        task.updateShas();
    }
",non-flaky,5
106614,Alluxio_alluxio,AlluxioJniFuseFileSystemTest.chownWithoutValidUid,"  @Test
  public void chownWithoutValidUid() throws Exception {
    String userName = System.getProperty(""user.name"");
    long uid = AlluxioJniFuseFileSystem.ID_NOT_SET_VALUE;
    long gid = AlluxioFuseUtils.getGid(userName);
    mFuseFs.chown(""/foo/bar"", uid, gid);

    String groupName = AlluxioFuseUtils.getGroupName(userName);
    AlluxioURI expectedPath = BASE_EXPECTED_URI.join(""/foo/bar"");
    SetAttributePOptions options = SetAttributePOptions.newBuilder().setGroup(groupName).build();
    verify(mFileSystem).setAttribute(expectedPath, options);

    uid = AlluxioJniFuseFileSystem.ID_NOT_SET_VALUE_UNSIGNED;
    mFuseFs.chown(""/foo/bar"", uid, gid);
    verify(mFileSystem, times(2)).setAttribute(expectedPath, options);
  }
",non-flaky,5
118699,netty_netty,SmtpRequestEncoderTest.testEncodeHelpWithArg,"    @Test
    public void testEncodeHelpWithArg() {
        testEncode(SmtpRequests.help(""MAIL""), ""HELP MAIL\r\n"");
    }
",non-flaky,5
76755,quarkusio_quarkus,CreateProjectMojoIT.testProjectGenerationFromScratchWithExtensions,"    @Test
    public void testProjectGenerationFromScratchWithExtensions() throws Exception {
        testDir = initEmptyProject(""projects/project-generation-with-resources-and-extension"");
        assertThat(testDir).isDirectory();
        invoker = initInvoker(testDir);

        Properties properties = new Properties();
        properties.put(""projectGroupId"", ""org.acme"");
        properties.put(""projectArtifactId"", ""acme"");
        properties.put(""className"", ""org.acme.MyResource"");
        properties.put(""extensions"", ""resteasy,smallrye-metrics"");
        InvocationResult result = setup(properties);

        assertThat(result.getExitCode()).isZero();

        // As the directory is not empty (log) navigate to the artifactID directory
        testDir = new File(testDir, ""acme"");

        assertThat(new File(testDir, ""pom.xml"")).isFile();
        assertThat(new File(testDir, ""src/main/java"")).isDirectory();

        check(new File(testDir, ""src/main/java/org/acme/MyResource.java""), ""package org.acme;"");

        assertThat(FileUtils.readFileToString(new File(testDir, ""pom.xml""), ""UTF-8""))
                .contains(""quarkus-resteasy"", ""quarkus-smallrye-metrics"").doesNotContain(""missing"");

        Model model = loadPom(testDir);
        assertThat(model.getDependencyManagement().getDependencies().stream()
                .anyMatch(d -> d.getArtifactId().equals(MojoUtils.TEMPLATE_PROPERTY_QUARKUS_PLATFORM_ARTIFACT_ID_VALUE)
                        && d.getVersion().equals(MojoUtils.TEMPLATE_PROPERTY_QUARKUS_PLATFORM_VERSION_VALUE)
                        && d.getScope().equals(""import"")
                        && d.getType().equals(""pom""))).isTrue();

        assertThat(
                model.getDependencies().stream().anyMatch(d -> d.getArtifactId().equalsIgnoreCase(""quarkus-resteasy"")
                        && d.getVersion() == null)).isTrue();

        assertThat(model.getDependencies().stream()
                .anyMatch(d -> d.getArtifactId().equalsIgnoreCase(""quarkus-smallrye-metrics"")
                        && d.getVersion() == null)).isTrue();
    }
",non-flaky,5
178043,aosp-mirror_platform_frameworks_support,GuidedStepAttributesTest.testDisabledActions,"    @Test
    public void testDisabledActions() throws Throwable {

        Intent intent = new Intent();
        Resources res = mContext.getResources();

        final int NUM_SEARCH_ACTIONS = 10;
        final List<Integer> DISABLED_ACTIONS = new ArrayList<>(
                Arrays.asList(1, 3, 5, 7));
        final int ACTION_ID_REVERT_BUTTON = 0;
        final int ACTION_ID_SEARCH_BEGIN = ACTION_ID_REVERT_BUTTON + 1;
        int ACTION_ID_SEARCH_END = ACTION_ID_SEARCH_BEGIN;

        // sequence of clicked actions simulated in the test
        List<Integer> CLICK_SEQUENCE = new ArrayList<>();

        // Expected Clicked sequence can be different from focused ones since some of the actions
        // are disabled hence not clickable
        List<Integer> EXPECTED_FOCUSED_SEQUENCE = new ArrayList<>();
        List<Integer> EXPECTED_CLICKED_SEQUENCE = new ArrayList<>();
        // Expected actions state according to list of DISABLED_ACTIONS: false for disabled actions
        List<Boolean> EXPECTED_ACTIONS_STATE = new ArrayList<>(
                Arrays.asList(new Boolean[NUM_SEARCH_ACTIONS])
        );
        Collections.fill(EXPECTED_ACTIONS_STATE, Boolean.TRUE);

        for(int i = 0; i < NUM_SEARCH_ACTIONS; i++) {
            CLICK_SEQUENCE.add(i + 1);
        }
        for(int clickedActionId : CLICK_SEQUENCE) {
            EXPECTED_FOCUSED_SEQUENCE.add(clickedActionId);
            if (!DISABLED_ACTIONS.contains(clickedActionId - 1))
                EXPECTED_CLICKED_SEQUENCE.add(clickedActionId);
            else
                EXPECTED_CLICKED_SEQUENCE.add(-1);
        }

        String title = ""Guided Actions Enabled Test"";
        String breadcrumb = ""Enabled Test Demo"";
        String description = """";
        GuidanceStylist.Guidance guidance = new GuidanceStylist.Guidance(title, description,
                breadcrumb, null);

        List<GuidedAction> actionList = new ArrayList<>();
        actionList.add(new GuidedAction.Builder(mContext)
                .id(ACTION_ID_REVERT_BUTTON)
                .title(res.getString(R.string.invert_title))
                .description(res.getString(R.string.revert_description))
                .build()
        );

        for (int i = 0; i < NUM_SEARCH_ACTIONS; i++ ) {
            actionList.add(new GuidedAction.Builder(mContext)
                    .id(ACTION_ID_SEARCH_END++)
                    .title(res.getString(R.string.search) + """" + i)
                    .description(res.getString(R.string.search_description) + i)
                    .build()
            );
        }
        for(int action_id : DISABLED_ACTIONS ) {
            if ( action_id >= 0 && action_id < NUM_SEARCH_ACTIONS ) {
                actionList.get(action_id + 1).setEnabled(false);
                EXPECTED_ACTIONS_STATE.set(action_id, Boolean.FALSE);
            }
        }

        GuidedStepAttributesTestFragment.clear();
        GuidedStepAttributesTestFragment.GUIDANCE = guidance;
        GuidedStepAttributesTestFragment.ACTION_LIST = actionList;
        GuidedStepAttributesTestFragment.setActionClickCallback(ACTION_ID_REVERT_BUTTON,
                sRevertCallback);

        initActivity(intent);

        examineEnabledAndDisabledActions(actionList, CLICK_SEQUENCE, EXPECTED_FOCUSED_SEQUENCE,
                EXPECTED_CLICKED_SEQUENCE);
    }
",non-flaky,5
112650,tbsalling_aismessages,StandardClassBCSPositionReportTest.canDecode1,"    @Test
    public void canDecode1() {
        AISMessage aisMessage = AISMessage.create(NMEAMessage.fromString(""!AIVDM,1,1,,A,B5NJ;PP005l4ot5Isbl03wsUkP06,0*76""));

        System.out.println(aisMessage.toString());

        assertEquals(AISMessageType.StandardClassBCSPositionReport, aisMessage.getMessageType());
        StandardClassBCSPositionReport message = (StandardClassBCSPositionReport) aisMessage;
        assertEquals(Integer.valueOf(0), message.getRepeatIndicator());
        assertEquals(MMSI.valueOf(367430530), message.getSourceMmsi());
        assertEquals(""00000000"", message.getRegionalReserved1());
        assertEquals((Float) 0.0f, message.getSpeedOverGround());
        assertEquals((Integer) 0, message.getRawSpeedOverGround());
        assertFalse(message.getPositionAccurate());
        assertEquals(Float.valueOf(37.785034f), message.getLatitude());
        assertEquals((Integer)22671021, message.getRawLatitude());
        assertEquals(Float.valueOf(-122.26732f), message.getLongitude());
        assertEquals((Integer)(-73360392), message.getRawLongitude());
        assertEquals(Float.valueOf(0.0f), message.getCourseOverGround());
        assertEquals((Integer) 0, message.getRawCourseOverGround());
        assertEquals((Integer) 511, message.getTrueHeading());
        assertEquals((Integer) 55, message.getSecond());
        assertEquals(""00"", message.getRegionalReserved2());
        assertTrue(message.getCsUnit());
        assertFalse(message.getDisplay());
        assertTrue(message.getDsc());
        assertTrue(message.getBand());
        assertTrue(message.getMessage22());
        assertFalse(message.getAssigned());
        assertFalse(message.getRaimFlag());
        //assertEquals(""11100000000000000110"", message.getRadioStatus());
    }
",non-flaky,5
98243,apache_jackrabbit,UtilsGetPathTest.testGetOrCreateByPathNoRoot,"    @Test
    public void testGetOrCreateByPathNoRoot() throws RepositoryException {
        String base = testRoot + ""/foo"";
        Node inter = JcrUtils.getOrCreateByPath(base, ""nt:unstructured"", superuser);
        assertEquals(base, inter.getPath());
        superuser.save();

        // test what happens if getRootNode() throws
        Session mockedSession = Mockito.spy(superuser);
        Mockito.when(mockedSession.getRootNode()).thenThrow(new AccessDeniedException(""access denied""));
        Mockito.when(mockedSession.getNode(""/"")).thenThrow(new AccessDeniedException(""access denied""));
        Mockito.when(mockedSession.getItem(""/"")).thenThrow(new AccessDeniedException(""access denied""));
        Mockito.when(mockedSession.nodeExists(""/"")).thenReturn(false);

        Node result = JcrUtils.getOrCreateByPath(base + ""/bar"", false, null, null, mockedSession, false);
        mockedSession.save();
        assertEquals(base + ""/bar"", result.getPath());

        // already exists -> nop
        Node result2 = JcrUtils.getOrCreateByPath(base + ""/bar"", false, null, null, mockedSession, false);
        mockedSession.save();
        assertEquals(base + ""/bar"", result2.getPath());

        // create unique
        Node result3 = JcrUtils.getOrCreateByPath(base + ""/bar"", true, null, null, mockedSession, false);
        mockedSession.save();
        assertEquals(base + ""/bar0"", result3.getPath());

        // already exists with createUnique == false should pass even when parent isn't readable
        Mockito.when(mockedSession.getNode(base)).thenThrow(new AccessDeniedException(""access denied""));
        Mockito.when(mockedSession.getItem(base)).thenThrow(new AccessDeniedException(""access denied""));
        Mockito.when(mockedSession.nodeExists(base)).thenReturn(false);
        Node result4 = JcrUtils.getOrCreateByPath(base + ""/bar"", false, null, null, mockedSession, false);
        mockedSession.save();
        assertEquals(base + ""/bar"", result4.getPath());
    }
",non-flaky,5
166,wildfly_wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993.testRejectionEAP7,"@Test
public void testRejectionsEAP7() throws Exception {
    testTransformer(""subsystem.xml"", ModelTestControllerVersion.EAP_7_0_0, ModelVersion.create(2, 0), ""wildfly-naming"");
}",test order dependency,4
43063,trinodb_trino,BaseConnectorTest.testExplainAnalyzeVerbose,"    @Test
    public void testExplainAnalyzeVerbose()
    {
        assertExplainAnalyze(""EXPLAIN ANALYZE VERBOSE SELECT * FROM orders"");
        assertExplainAnalyze(""EXPLAIN ANALYZE VERBOSE SELECT rank() OVER (PARTITION BY orderkey ORDER BY clerk DESC) FROM orders"");
        assertExplainAnalyze(""EXPLAIN ANALYZE VERBOSE SELECT rank() OVER (PARTITION BY orderkey ORDER BY clerk DESC) FROM orders WHERE orderkey < 0"");
    }
",non-flaky,5
156144,soot-oss_soot,ClassRenamerTest.getPackageName,"  @Test
  public void getPackageName() {
    assertNull(ClassRenamer.getPackageName(""""));
    assertNull(ClassRenamer.getPackageName(null));
    assertNull(ClassRenamer.getPackageName("".""));
    assertNull(ClassRenamer.getPackageName(""ClassName""));
    assertEquals(""com.sable"", ClassRenamer.getPackageName(""com.sable.Soot""));
  }
",non-flaky,5
98277,spotify_docker-client,HostConfigTest.testPreventDuplicateBinds,"  @Test
  public void testPreventDuplicateBinds() {
    final HostConfig hostConfig = HostConfig.builder()
        .appendBinds(""/one:/one"")
        .appendBinds(""/one:/one"")
        .appendBinds(""/one:/one"")
        .build();

    assertThat(hostConfig.binds(), contains(""/one:/one""));
  }
",non-flaky,5
281,soot-oss_soot,TestDominance.TestSimpleDiamond,"@Test
public void TestSimpleDiamond() {
    Node x = new Node(4);
    Node n = new Node(1).addkid(new Node(2).addkid(x)).addkid(new Node(3).addkid(x));
    Graph g = new Graph(n);
    MHGDominatorsFinder<Node> finder = new MHGDominatorsFinder<Node>(g);
    DominatorTree<Node> tree = new DominatorTree<Node>(finder);
    assertThat(tree.getHeads().size(), is(1));
    DominatorNode<Node> head = tree.getHeads().get(0);
    assertThat(head.getGode().id, is(1));
    Set<Integer> kids = kid_ids(head);
    assertThat(kids.size(), is(3));
    assertThat(kids, contains(2, 3, 4));
}",unordered collections,3
230,alibaba_fastjson,Issue1492.test_for_issue,"@Test
public void test_for_issue() throws Exception {
    DubboResponse resp = new DubboResponse();
    JSONObject obj = new JSONObject();
    obj.put(""key1"", ""value1"");
    obj.put(""key2"", ""value2"");
    resp.setData(obj);
    String str = JSON.toJSONString(resp);
    System.out.println(str);
    DubboResponse resp1 = JSON.parseObject(str, DubboResponse.class);
    assertEquals(str, JSON.toJSONString(resp1));
    JSONArray arr = new JSONArray();
    arr.add(""key1"");
    arr.add(""key2"");
    resp.setData(arr);
    String str2 = JSON.toJSONString(resp);
    System.out.println(str2);
    DubboResponse resp2 = JSON.parseObject(str2, DubboResponse.class);
    assertEquals(str2, JSON.toJSONString(resp2));
}",unordered collections,3
177963,aosp-mirror_platform_frameworks_support,FileProviderTest.testReadFile,"    @Test
    public void testReadFile() throws Exception {
        final File file = new File(mContext.getFilesDir(), TEST_FILE);
        final Uri uri = stageFileAndGetUri(file, TEST_DATA);

        assertContentsEquals(TEST_DATA, uri);
    }
",non-flaky,5
33907,apache_camel,DeleteProducerIntegrationIT.configure,"    @Test
            public void configure() {
                from(""direct:start"").to(""beanstalk:"" + tubeName + ""?command=delete"").to(""mock:result"");
            }
",non-flaky,5
162697,OpenAPITools_openapi-generator,ArrayTestTest.arrayOfStringTest,"    @Test
    public void arrayOfStringTest() {
        // TODO: test arrayOfString
    }
",non-flaky,5
159661,liquibase_liquibase,AbstractIntegrationTest.testContextsWithHyphensWorkInFormattedSql,"    @Test
    public void testContextsWithHyphensWorkInFormattedSql() throws Exception {
        assumeNotNull(this.getDatabase());
        Liquibase liquibase = createLiquibase(""changelogs/common/sqlstyle/formatted.changelog.sql"");
        liquibase.update(""hyphen-context-using-sql,camelCaseContextUsingSql"");

        SnapshotGeneratorFactory tableSnapshotGenerator = SnapshotGeneratorFactory.getInstance();
        assertNotNull(tableSnapshotGenerator.has(new Table().setName(""hyphen_context""), database));
        assertNotNull(tableSnapshotGenerator.has(new Table().setName(""camel_context""), database));
        assertNotNull(tableSnapshotGenerator.has(new Table().setName(""bar_id""), database));
        assertNotNull(tableSnapshotGenerator.has(new Table().setName(""foo_id""), database));
    }
",non-flaky,5
89,wildfly_wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993.testLookupReference,"@Test
public void testLookupReference() throws Exception {
    final Name name = new CompositeName(""test"");
    final Reference reference = new Reference(String.class.getName(), new StringRefAddr(""blah"", ""test""), TestObjectFactory.class.getName(), null);
    namingStore.bind(name, reference);
    Object result = namingContext.lookup(name);
    assertEquals(""test"", result);
    result = testActionPermission(JndiPermission.ACTION_LOOKUP, namingContext, ""test"");
    assertEquals(""test"", result);
}",test order dependency,4
374,apache_hadoop,TestPermissionSymlinks.run,"  @Test
  public void testAccess() throws Exception {
    fs.setPermission(target, new FsPermission((short) 0002));
    fs.setAcl(target, Arrays.asList(
        aclEntry(ACCESS, USER, ALL),
        aclEntry(ACCESS, GROUP, NONE),
        aclEntry(ACCESS, USER, user.getShortUserName(), WRITE),
        aclEntry(ACCESS, OTHER, WRITE)));
    FileContext myfc = user.doAs(new PrivilegedExceptionAction<FileContext>() {
      @Override
      public FileContext run() throws IOException {
        return FileContext.getFileContext(conf);
      }
",non-flaky,5
97955,ReactiveX_RxJava,ConcatTests.testConcatWithObservableOfObservable,"    @Test
    public void testConcatWithObservableOfObservable() {
        Observable<String> o1 = Observable.from(""one"", ""two"");
        Observable<String> o2 = Observable.from(""three"", ""four"");
        Observable<String> o3 = Observable.from(""five"", ""six"");

        Observable<Observable<String>> os = Observable.from(o1, o2, o3);

        List<String> values = Observable.concat(os).toList().toBlockingObservable().single();

        assertEquals(""one"", values.get(0));
        assertEquals(""two"", values.get(1));
        assertEquals(""three"", values.get(2));
        assertEquals(""four"", values.get(3));
    }
",non-flaky,5
135,apache_hadoop,testPendingAndInvalidate,"@Test
public class Test {
    public void testPendingAndInvalidate() throws Exception {
        final Configuration CONF = new HdfsConfiguration();
        MiniDFSCluster cluster = new MiniDFSCluster.Builder(CONF).numDataNodes(DATANODE_COUNT).build();
        cluster.waitActive();
        FSNamesystem namesystem = cluster.getNamesystem();
        BlockManager bm = namesystem.getBlockManager();
        DistributedFileSystem fs = cluster.getFileSystem();
        try {
            Path filePath = new Path(""/tmp.txt"");
            DFSTestUtil.createFile(fs, filePath, 1024, (short) 3, 0L);
            for (DataNode dn : cluster.getDataNodes()) {
                DataNodeTestUtils.setHeartbeatsDisabledForTests(dn, true);
            }
            LocatedBlock block = NameNodeAdapter.getBlockLocations(
            cluster.getNameNode(), filePath.toString(), 0, 1).get(0);
            cluster.getNamesystem().writeLock();
            try {
                bm.findAndMarkBlockAsCorrupt(block.getBlock(), block.getLocations()[0],
                ""STORAGE_ID"", ""TEST"");
            } finally {
                cluster.getNamesystem().writeUnlock();
            }
            BlockManagerTestUtil.computeAllPendingWork(bm);
            BlockManagerTestUtil.updateState(bm);
            assertEquals(bm.getPendingReconstructionBlocksCount(), 1L);
            BlockInfo storedBlock = bm.getStoredBlock(block.getBlock().getLocalBlock());
            assertEquals(bm.pendingReconstruction.getNumReplicas(storedBlock), 2);
            fs.delete(filePath, true);
            int retries = 10;
            long pendingNum = bm.getPendingReconstructionBlocksCount();
            while (pendingNum != 0 && retries-- > 0) {
                Thread.sleep(1000);
                BlockManagerTestUtil.updateState(bm);
                pendingNum = bm.getPendingReconstructionBlocksCount();
            }
            assertEquals(pendingNum, 0L);
        } finally {
            cluster.shutdown();
        }
    }
}",concurrency,1
84641,apache_zookeeper,EnforceAuthenticationTest.testServerStartShouldFailWhenEnforceAuthSchemeIsNotConfigured,"    @Test
    public void testServerStartShouldFailWhenEnforceAuthSchemeIsNotConfigured() throws Exception {
        Map<String, String> prop = new HashMap<>();
        prop.put(removeZooKeeper(AuthenticationHelper.ENFORCE_AUTH_ENABLED), ""true"");
        testServerCannotStart(prop);
    }
",non-flaky,5
156102,soot-oss_soot,ResolveFieldInitializersTest.initializedInMethodRef,"  @Test
  public void initializedInMethodRef() {
    prepareTarget(methodSigFromComponents(TEST_TARGET_CLASS, ""void"", ""<init>""), TEST_TARGET_CLASS);
    SootClass sootClass = Scene.v().getSootClass(""java.util.ArrayDeque"");
    assertEquals(SootClass.SIGNATURES, sootClass.resolvingLevel());
  }
",non-flaky,5
162762,OpenAPITools_openapi-generator,ReadOnlyFirstTest.barTest,"    @Test
    public void barTest() {
        // TODO: test bar
    }
",non-flaky,5
162734,OpenAPITools_openapi-generator,OuterCompositeTest.testOuterComposite,"    @Test
    public void testOuterComposite() {
        // TODO: test OuterComposite
    }
",non-flaky,5
177966,aosp-mirror_platform_frameworks_support,FileProviderTest.testDelete,"    @Test
    public void testDelete() throws Exception {
        final File file = new File(mContext.getFilesDir(), TEST_FILE);
        final Uri uri = stageFileAndGetUri(file, TEST_DATA);

        assertContentsEquals(TEST_DATA, uri);

        assertEquals(1, mResolver.delete(uri, null, null));
        assertEquals(0, mResolver.delete(uri, null, null));

        try {
            assertContentsEquals(new byte[0], uri);
            fail(""Somehow read missing file?"");
        } catch(FileNotFoundException e) {
        }
    }
",non-flaky,5
84628,apache_zookeeper,ZKClientConfigTest.testDefaultConfiguration,"    @Test
    public void testDefaultConfiguration() {
        Map<String, String> properties = new HashMap<>();
        properties.put(ZK_SASL_CLIENT_USERNAME, ""zookeeper1"");
        properties.put(LOGIN_CONTEXT_NAME_KEY, ""Client1"");
        properties.put(ENABLE_CLIENT_SASL_KEY, ""true"");
        properties.put(ZOOKEEPER_SERVER_REALM, ""zookeeper/hadoop.hadoop.com"");
        properties.put(DISABLE_AUTO_WATCH_RESET, ""true"");
        properties.put(ZOOKEEPER_CLIENT_CNXN_SOCKET, ""ClientCnxnSocketNetty"");
        properties.put(SECURE_CLIENT, ""true"");

        for (Map.Entry<String, String> e : properties.entrySet()) {
            System.setProperty(e.getKey(), e.getValue());
        }
        /**
         * ZKClientConfig should get initialized with system properties
         */
        ZKClientConfig conf = new ZKClientConfig();
        for (Map.Entry<String, String> e : properties.entrySet()) {
            assertEquals(e.getValue(), conf.getProperty(e.getKey()));
        }
        /**
         * clear properties
         */
        for (Map.Entry<String, String> e : properties.entrySet()) {
            System.clearProperty(e.getKey());
        }

        conf = new ZKClientConfig();
        /**
         * test that all the properties are null
         */
        for (Map.Entry<String, String> e : properties.entrySet()) {
            String result = conf.getProperty(e.getKey());
            assertNull(result);
        }
    }
",non-flaky,5
43120,trinodb_trino,BaseConnectorSmokeTest.verifySupportsDeleteDeclaration,"    @Test
    public void verifySupportsDeleteDeclaration()
    {
        if (hasBehavior(SUPPORTS_DELETE)) {
            // Covered by testDeleteAllDataFromTable
            return;
        }

        skipTestUnless(hasBehavior(SUPPORTS_CREATE_TABLE));
        try (TestTable table = new TestTable(getQueryRunner()::execute, ""test_supports_delete"", ""AS SELECT * FROM region"")) {
            assertQueryFails(""DELETE FROM "" + table.getName(), ""This connector does not support deletes"");
        }
    }
",non-flaky,5
122616,vespa-engine_vespa,FileAttributesCacheTest.exists,"    @Test
    public void exists() {
        UnixPath unixPath = mock(UnixPath.class);
        FileAttributesCache cache = new FileAttributesCache(unixPath);

        when(unixPath.getAttributesIfExists()).thenReturn(Optional.empty());
        assertFalse(cache.get().isPresent());
        verify(unixPath, times(1)).getAttributesIfExists();
        verifyNoMoreInteractions(unixPath);

        FileAttributes attributes = mock(FileAttributes.class);
        when(unixPath.getAttributesIfExists()).thenReturn(Optional.of(attributes));
        assertTrue(cache.get().isPresent());
        verify(unixPath, times(1 + 1)).getAttributesIfExists();
        verifyNoMoreInteractions(unixPath);

        assertEquals(attributes, cache.getOrThrow());
        verifyNoMoreInteractions(unixPath);
    }
",non-flaky,5
135055,undertow-io_undertow,NetworkUtilsAddressParsingTestCase.testIpV6AddressStartsWithColon,"    @Test(expected = IOException.class)
    public void testIpV6AddressStartsWithColon() throws IOException {
        NetworkUtils.parseIpv6Address("":2001:1db8:100:3:6:ff00:42:8329"");
    }
",non-flaky,5
179486,abel533_Mapper,SafeDeleteByFieldTest.testSafeDelete,"    @Test(expected = PersistenceException.class)
    public void testSafeDelete() {
        SqlSession sqlSession = getSqlSession();
        try {
            CountryMapper mapper = sqlSession.getMapper(CountryMapper.class);
            mapper.delete(new Country());
        } finally {
            sqlSession.close();
        }
    }
",non-flaky,5
98609,nutzam_nutz,El2Test.testIssue279,"    @Test
    public void testIssue279() throws InterruptedException {
        Context context = Lang.context();
        context.set(""math"", Maths.class);
        System.out.println(Maths.class.toString());
        assertEquals(""class org.nutz.lang.Maths"", El.eval(context, ""math.toString()""));

        NutConf.load(""org/nutz/el/issue279/279.js"");
        assertEquals(El.eval(""uuuid(false)""), ""abc"");
        assertEquals(El.eval(""uuuid()""), ""abc"");
    }
",non-flaky,5
92596,FasterXML_jackson-databind,TestTypeFactoryWithClassLoader.testDefaultTypeFactoryNotAffectedByWithConstructors,"@Test
public void testDefaultTypeFactoryNotAffectedByWithConstructors() {
	TypeFactory sut = mapper.getTypeFactory().withModifier(typeModifier).withClassLoader(classLoader);
	Assert.assertEquals(classLoader, sut.getClassLoader());
	Assert.assertEquals(typeModifier,sut._modifiers[0]);
	Assert.assertNull(mapper.getTypeFactory().getClassLoader());
	Assert.assertArrayEquals(null,mapper.getTypeFactory()._modifiers);
}
",non-flaky,5
114039,aws_aws-sdk-java-v2,MyApacheFunctionTest.handleRequest_shouldReturnConstantValue,"    @Test
    public void handleRequest_shouldReturnConstantValue() {
        MyApacheFunction function = new MyApacheFunction();
        Object result = function.handleRequest(""echo"", null);
        assertEquals(""echo"", result);
    }
",non-flaky,5
95697,togglz_togglz,EnumFeatureMetaDataTest.constructorWillPopulateGroupsFromAnnotations,"    @Test
    public void constructorWillPopulateGroupsFromAnnotations() throws Exception {
        // act
        EnumFeatureMetaData metaData = new EnumFeatureMetaData(TestFeatures.FEATURE);

        // assert
        Set<FeatureGroup> groups = metaData.getGroups();

        assertThat(groups, notNullValue());
        assertThat(groups.size(), is(2));

        // verify field level group is there
        FeatureGroup group1 = Iterables.find(groups, createFeatureGroupLabelPredicate(FIELD_LEVEL_GROUP_LABEL));
        assertThat(group1.contains(TestFeatures.FEATURE), is(true));

        // verify class level group is there
        FeatureGroup group2 = Iterables.find(groups, createFeatureGroupLabelPredicate(CLASS_LEVEL_GROUP_LABEL));
        assertThat(group2.contains(TestFeatures.FEATURE), is(true));
    }
",non-flaky,5
162438,testcontainers_testcontainers-java,GenericContainerRuleTest.shouldCopyFileFromContainerTest,"    @Test
    public void shouldCopyFileFromContainerTest() throws IOException, InterruptedException {
        final File tempResultFolder = Files.createTempDir();

        try (final GenericContainer alpineCopyToContainer = new GenericContainer(""alpine:3.2"")
                .withCommand(""top"")) {

            alpineCopyToContainer.start();
            final MountableFile mountableFile = MountableFile.forClasspathResource(""test_copy_to_container.txt"");
            alpineCopyToContainer.copyFileToContainer(mountableFile, ""/home/"");
            alpineCopyToContainer.copyFileFromContainer(""/home/test_copy_to_container.txt"",
                    tempResultFolder.getAbsolutePath() + ""/test_copy_from_container.txt"");

            File expectedFile = new File(mountableFile.getResolvedPath());
            File actualFile = new File(tempResultFolder.getAbsolutePath() + ""/test_copy_from_container.txt"");
            assertTrue(""Files aren't same "", FileUtils.contentEquals(expectedFile,actualFile));
        }
    }
",non-flaky,5
43083,trinodb_trino,BaseConnectorTest.testMaterializedViewColumnName,"    @Test(dataProvider = ""testColumnNameDataProvider"")
    public void testMaterializedViewColumnName(String columnName)
    {
        skipTestUnless(hasBehavior(SUPPORTS_CREATE_MATERIALIZED_VIEW));

        if (!requiresDelimiting(columnName)) {
            testMaterializedViewColumnName(columnName, false);
        }
        testMaterializedViewColumnName(columnName, true);
    }
",non-flaky,5
78255,apache_beam,StateInternalsTest.testWatermarkEndOfWindowState,"  @Test
  public void testWatermarkEndOfWindowState() throws Exception {
    WatermarkHoldState value = underTest.state(NAMESPACE_1, WATERMARK_EOW_ADDR);

    // State instances are cached, but depend on the namespace.
    assertEquals(value, underTest.state(NAMESPACE_1, WATERMARK_EOW_ADDR));
    assertFalse(value.equals(underTest.state(NAMESPACE_2, WATERMARK_EOW_ADDR)));

    assertThat(value.read(), Matchers.nullValue());
    value.add(new Instant(2000));
    assertThat(value.read(), equalTo(new Instant(2000)));

    value.clear();
    assertThat(value.read(), equalTo(null));
    assertThat(underTest.state(NAMESPACE_1, WATERMARK_EOW_ADDR), equalTo(value));
  }
",non-flaky,5
97737,vojtechhabarta_typescript-generator,JsonUnwrappedTest.test,"    @Test
    public void test() {
        final Settings settings = TestUtils.settings();
        final String output = new TypeScriptGenerator(settings).generateTypeScript(Input.from(Person.class));
        final String expected = ""\n""
                + ""interface Person {\n""
                + ""    AageA: number;\n""
                + ""    AfirstA: string;\n""
                + ""    AlastA: string;\n""
                + ""    A_first2A: string;\n""
                + ""    A_last2A: string;\n""
                + ""    Aname3A: Name;\n""
                + ""    BageB: number;\n""
                + ""    BfirstB: string;\n""
                + ""    BlastB: string;\n""
                + ""    B_first2B: string;\n""
                + ""    B_last2B: string;\n""
                + ""    Bname3B: Name;\n""
                + ""}\n""
                + ""\n""
                + ""interface Parent {\n""
                + ""    age: number;\n""
                + ""    first: string;\n""
                + ""    last: string;\n""
                + ""    _first2: string;\n""
                + ""    _last2: string;\n""
                + ""    name3: Name;\n""
                + ""}\n""
                + ""\n""
                + ""interface Name {\n""
                + ""    first: string;\n""
                + ""    last: string;\n""
                + ""}\n""
                + """";
        Assert.assertEquals(expected.trim(), output.trim());
    }
",non-flaky,5
84627,apache_zookeeper,ClientCnxnSocketFragilityTest.testClientCnxnSocketFragility,"    @Test
    public void testClientCnxnSocketFragility() throws Exception {
        System.setProperty(ZKClientConfig.ZOOKEEPER_CLIENT_CNXN_SOCKET,
                FragileClientCnxnSocketNIO.class.getName());
        System.setProperty(ZKClientConfig.ZOOKEEPER_REQUEST_TIMEOUT, ""1000"");
        final int[] clientPorts = new int[SERVER_COUNT];
        StringBuilder sb = new StringBuilder();
        String server;

        for (int i = 0; i < SERVER_COUNT; i++) {
            clientPorts[i] = PortAssignment.unique();
            server = ""server."" + i + ""=127.0.0.1:"" + PortAssignment.unique() + "":""
                    + PortAssignment.unique() + "":participant;127.0.0.1:"" + clientPorts[i];
            sb.append(server + ""\n"");
        }
        String currentQuorumCfgSection = sb.toString();
        MainThread[] mt = new MainThread[SERVER_COUNT];

        for (int i = 0; i < SERVER_COUNT; i++) {
            mt[i] = new MainThread(i, clientPorts[i], currentQuorumCfgSection, false);
            mt[i].start();
        }

        // Ensure server started
        for (int i = 0; i < SERVER_COUNT; i++) {
            assertTrue(ClientBase.waitForServerUp(""127.0.0.1:"" + clientPorts[i], CONNECTION_TIMEOUT),
                    ""waiting for server "" + i + "" being up"");
        }
        String path = ""/testClientCnxnSocketFragility"";
        String data = ""balabala"";
        ClientWatcher watcher = new ClientWatcher();
        zk = new CustomZooKeeper(getCxnString(clientPorts), SESSION_TIMEOUT, watcher);
        watcher.watchFor(zk);

        // Let's see some successful operations
        zk.create(path, data.getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);
        assertEquals(new String(zk.getData(path, false, new Stat())), data);
        assertTrue(!watcher.isSessionExpired());

        // Let's make a broken operation
        socket.mute();
        boolean catchKeeperException = false;
        try {
            zk.getData(path, false, new Stat());
        } catch (KeeperException e) {
            catchKeeperException = true;
            assertFalse(e instanceof KeeperException.SessionExpiredException);
        }
        socket.unmute();
        assertTrue(catchKeeperException);
        assertTrue(!watcher.isSessionExpired());

        GetDataRetryForeverBackgroundTask retryForeverGetData =
                new GetDataRetryForeverBackgroundTask(zk, path);
        retryForeverGetData.startTask();
        // Let's make a broken network
        socket.mute();

        // Let's attempt to close ZooKeeper
        cnxn.attemptClose();

        // Wait some time to expect continuous reconnecting.
        // We try to make reconnecting hit the unsafe region.
        cnxn.waitUntilHitUnsafeRegion();

        // close zk with timeout 1000 milli seconds
        closeZookeeper(zk);
        TimeUnit.MILLISECONDS.sleep(3000);

        // Since we already close zookeeper, we expect that the zk should not be alive.
        assertTrue(!zk.isAlive());
        assertTrue(!watcher.isSessionExpired());

        retryForeverGetData.syncCloseTask();
        for (int i = 0; i < SERVER_COUNT; i++) {
            mt[i].shutdown();
        }
    }
",non-flaky,5
135045,undertow-io_undertow,NetworkUtilsAddressParsingTestCase.testIpV4Hostname2,"    @Test(expected = IOException.class)
    public void testIpV4Hostname2() throws IOException {
        NetworkUtils.parseIpv4Address(""ff"");
    }
",non-flaky,5
97989,ReactiveX_RxJava,ThrottleFirstTests.testThrottle,"    @Test
    public void testThrottle() {
        @SuppressWarnings(""unchecked"")
        Observer<Integer> observer = mock(Observer.class);
        TestScheduler s = new TestScheduler();
        PublishSubject<Integer> o = PublishSubject.create();
        o.throttleFirst(500, TimeUnit.MILLISECONDS, s).subscribe(observer);

        // send events with simulated time increments
        s.advanceTimeTo(0, TimeUnit.MILLISECONDS);
        o.onNext(1); // deliver
        o.onNext(2); // skip
        s.advanceTimeTo(501, TimeUnit.MILLISECONDS);
        o.onNext(3); // deliver
        s.advanceTimeTo(600, TimeUnit.MILLISECONDS);
        o.onNext(4); // skip
        s.advanceTimeTo(700, TimeUnit.MILLISECONDS);
        o.onNext(5); // skip
        o.onNext(6); // skip
        s.advanceTimeTo(1001, TimeUnit.MILLISECONDS);
        o.onNext(7); // deliver
        s.advanceTimeTo(1501, TimeUnit.MILLISECONDS);
        o.onCompleted();

        InOrder inOrder = inOrder(observer);
        inOrder.verify(observer).onNext(1);
        inOrder.verify(observer).onNext(3);
        inOrder.verify(observer).onNext(7);
        inOrder.verify(observer).onCompleted();
        inOrder.verifyNoMoreInteractions();
    }
",non-flaky,5
114008,apache_struts,TestNGStrutsTestCaseTest.testRun,"        @Test 
        public void testRun() {
            ran = true;
            mgr = this.configurationManager;
            du = Dispatcher.getInstance();
        }
",non-flaky,5
89299,apache_samza,TestMonitorService.testMonitorsShouldBeInstantiatedProperly,"  @Test
  public void testMonitorsShouldBeInstantiatedProperly() {
    // Test that a monitor should be instantiated properly by invoking
    // the appropriate factory method.
    Map<String, String> configMap = ImmutableMap.of(CONFIG_MONITOR_FACTORY_CLASS,
                                                    DummyMonitorFactory.class.getCanonicalName());
    Monitor monitor = null;
    try {
      monitor = MonitorLoader.instantiateMonitor(""testMonitor"", new MonitorConfig(new MapConfig(configMap)),
          METRICS_REGISTRY);
    } catch (InstantiationException e) {
      fail();
    }
    assertNotNull(monitor);
    // Object should implement the monitor().
    try {
      monitor.monitor();
    } catch (Exception e) {
      fail();
    }
  }
",non-flaky,5
26737,MundaneImmortal_pair-distribution-app,DeveloperTest.testCompany,"	@Test
	public void testCompany() {
		Developer developer = new Developer(""developerId"");
		developer.setCompany(new Company(""my-company""));
		
		assertThat(developer.getCompany().getName(), is(""my-company""));
	}
",non-flaky,5
21188,androidx_androidx,PreferenceIconSpaceTest.bindViewHolder_iconSpaceReserved_shouldReserveIconSpace,"    @Test
    public void bindViewHolder_iconSpaceReserved_shouldReserveIconSpace() {
        PreferenceViewHolder holder = PreferenceViewHolder.createInstanceForTests(mViewGroup);
        mPreference.setIconSpaceReserved(true);
        mPreference.onBindViewHolder(holder);

        verify(mIconView).setVisibility(View.INVISIBLE);
        verify(mImageFrame).setVisibility(View.INVISIBLE);
    }
",non-flaky,5
278,wildfly_wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993.testFireSubTreeEvent,"@Test
public void testFireSubTreeEvent() throws Exception {
    final NamingEventCoordinator coordinator = new NamingEventCoordinator();
    final CollectingListener objectListener = new CollectingListener(0);
    coordinator.addListener(""test/path"", EventContext.OBJECT_SCOPE, objectListener);
    final CollectingListener subtreeListener = new CollectingListener(1);
    coordinator.addListener(""test"", EventContext.SUBTREE_SCOPE, subtreeListener);
    final CollectingListener oneLevelListener = new CollectingListener(0);
    coordinator.addListener(""test"", EventContext.ONELEVEL_SCOPE, oneLevelListener);
    coordinator.fireEvent(context, new CompositeName(""test/path""), null, null, NamingEvent.OBJECT_ADDED, ""bind"", EventContext.SUBTREE_SCOPE);
    subtreeListener.latch.await(1, TimeUnit.SECONDS);
    assertTrue(objectListener.capturedEvents.isEmpty());
    assertTrue(oneLevelListener.capturedEvents.isEmpty());
    assertEquals(1, subtreeListener.capturedEvents.size());
}",test order dependency,4
98006,ReactiveX_RxJava,StartWithTests.startWithIterable,"    @Test
    public void startWithIterable() {
        List<String> li = new ArrayList<String>();
        li.add(""alpha"");
        li.add(""beta"");
        List<String> values = Observable.from(""one"", ""two"").startWith(li).toList().toBlockingObservable().single();

        assertEquals(""alpha"", values.get(0));
        assertEquals(""beta"", values.get(1));
        assertEquals(""one"", values.get(2));
        assertEquals(""two"", values.get(3));
    }
",non-flaky,5
162731,OpenAPITools_openapi-generator,XmlItemTest.prefixNamespaceBooleanTest,"    @Test
    public void prefixNamespaceBooleanTest() {
        // TODO: test prefixNamespaceBoolean
    }
",non-flaky,5
110109,Wikidata_wikidata-toolkit,JsonSerializationActionTest.testDefaults,"	@Test
	public void testDefaults() {
		String[] args = new String[] { ""-a"", ""json"" };
		DumpProcessingOutputAction action = DumpProcessingOutputActionTest
				.getActionFromArgs(args);

		assertTrue(action instanceof JsonSerializationAction);
		assertFalse(action.needsSites());
		assertTrue(action.isReady());
		assertEquals(action.getActionName(), ""JsonSerializationAction"");
	}
",non-flaky,5
21217,androidx_androidx,PreferenceDataStoreTest.testGetFloatWithDataStoreOnPref,"    @Test
    public void testGetFloatWithDataStoreOnPref() {
        mPreference.setPreferenceDataStore(mDataStore);
        mScreen.addPreference(mPreference);

        mPreference.getFloat(1f);

        verify(mDataStore, atLeastOnce()).getFloat(eq(KEY), eq(1f));
    }
",non-flaky,5
30990,camunda-cloud_zeebe,ObjectMappingTest.shouldNotDeserializePOJOFromNonMap,"  @Test
  public void shouldNotDeserializePOJOFromNonMap() {
    // given
    final POJO pojo = new POJO();

    final DirectBuffer buffer =
        encodeMsgPack(
            (w) -> {
              w.writeString(wrapString(""stringProp""));
              w.writeFloat(123123.123123d);
            });

    // then
    exception.expect(RuntimeException.class);
    exception.expectMessage(
        ""Could not deserialize object [POJO]. Deserialization stuck at offset 1"");

    // when
    pojo.wrap(buffer);
  }
",non-flaky,5
162745,OpenAPITools_openapi-generator,NameTest.testName,"    @Test
    public void testName() {
        // TODO: test Name
    }
",non-flaky,5
156068,jReddit_jReddit,RedditOAuthAgentTest.testRefreshTokenOAuthSystemException,"    @Test(expected=RedditOAuthException.class)
    public void testRefreshTokenOAuthSystemException() throws OAuthSystemException, OAuthProblemException, RedditOAuthException {
        when(mockOAuthClient.accessToken(any(OAuthClientRequest.class))).thenThrow(new OAuthSystemException());
        subject.refreshToken(mockRedditTokenRefreshable);
    }
",non-flaky,5
106590,Alluxio_alluxio,HdfsProxyUserValidationTaskTest.proxyUserNotWildcard,"  @Test
  public void proxyUserNotWildcard() {
    String userName = System.getProperty(""user.name"");

    // Configured proxy users and groups, but not wildcard
    String proxyUserKey = String.format(""hadoop.proxyuser.%s.users"", userName);
    String proxyGroupKey = String.format(""hadoop.proxyuser.%s.groups"", userName);
    prepareHdfsConfFiles(ImmutableMap.of(proxyUserKey, ""user1,user2"", proxyGroupKey, ""groups""));

    HdfsProxyUserValidationTask task =
            new HdfsProxyUserValidationTask(""hdfs://namenode:9000/alluxio"", mConf);
    ValidationTaskResult result = task.validateImpl(ImmutableMap.of());
    assertEquals(ValidationUtils.State.WARNING, result.getState());
    assertThat(result.getResult(), containsString(
            String.format(""%s=user1,user2 and %s=groups"", proxyUserKey, proxyGroupKey)));
    assertThat(result.getAdvice(), containsString(
            ""Please make sure that includes all users/groups Alluxio needs to impersonate as.""));
  }
",non-flaky,5
146,Alluxio_alluxio,FileSystemMasterIntegrationTest.lastModificationTimeAddCheckpointTest,"@Test
public void lastModificationTimeAddCheckpointTest() throws Exception {
    long fileId = mFsMaster.create(new TachyonURI(""/testFile""), CreateOptions.defaults());
    long opTimeMs = System.currentTimeMillis();
    mFsMaster.persistFileInternal(fileId, 1, opTimeMs);
    FileInfo fileInfo = mFsMaster.getFileInfo(fileId);
    Assert.assertEquals(opTimeMs, fileInfo.lastModificationTimeMs);
}",time,2
113992,apache_struts,URLDecoderUtilTest.testURLDecodeStringValidUtf8Start,"    @Test
    public void testURLDecodeStringValidUtf8Start() {
        String result = URLDecoderUtil.decode(""%c3%aaxxxx"", ""UTF-8"");
        assertEquals(""\u00eaxxxx"", result);
    }
",non-flaky,5
137107,spring-projects_spring-framework,AbstractAnnotationMetadataTests.hasMetaAnnotationWhenMatchesMetaAnnotationReturnsTrue,"	@Test
	public void hasMetaAnnotationWhenMatchesMetaAnnotationReturnsTrue() {
		assertThat(get(WithMetaAnnotations.class).hasMetaAnnotation(MetaAnnotation1.class.getName())).isTrue();
		assertThat(get(WithMetaAnnotations.class).hasMetaAnnotation(MetaAnnotation2.class.getName())).isTrue();
	}
",non-flaky,5
33902,apache_camel,FhirReadIT.testResourceByUrlAndStringResourcePrettyPrint,"    @Test
    public void testResourceByUrlAndStringResourcePrettyPrint() throws Exception {
        final Map<String, Object> headers = new HashMap<>();
        // parameter type is String
        headers.put(""CamelFhir.resourceClass"", ""Patient"");
        // parameter type is String
        headers.put(""CamelFhir.url"", this.patient.getId());
        headers.put(ExtraParameters.PRETTY_PRINT.getHeaderName(), Boolean.TRUE);

        Patient result = requestBodyAndHeaders(""direct://RESOURCE_BY_URL_AND_STRING_RESOURCE"", null, headers);

        assertValidResponse(result);
    }
",non-flaky,5
106642,Alluxio_alluxio,AlluxioFuseFileSystemTest.create,"  @Test
  public void create() throws Exception {
    mFileInfo.flags.set(O_WRONLY.intValue());
    mFuseFs.create(""/foo/bar"", 0, mFileInfo);
    AlluxioURI expectedPath = BASE_EXPECTED_URI.join(""/foo/bar"");
    verify(mFileSystem).createFile(expectedPath, CreateFilePOptions.newBuilder()
        .setMode(new alluxio.security.authorization.Mode((short) 0).toProto())
        .build());
  }
",non-flaky,5
131,apache_beam,testClientConnecting,"@Test
public void testClientConnecting() throws Exception {
    PipelineOptions options = PipelineOptionsFactory.create();
    Endpoints.ApiServiceDescriptor descriptor = findOpenPort();
    BeamFnControlService service =
    new BeamFnControlService(
    descriptor,
    ServerStreamObserverFactory.fromOptions(options)::from,
    GrpcContextHeaderAccessorProvider.getHeaderAccessor());
    Server server =
    ServerFactory.fromOptions(options).create(descriptor, ImmutableList.of(service));
    String url = service.getApiServiceDescriptor().getUrl();
    BeamFnControlGrpc.BeamFnControlStub clientStub =
    BeamFnControlGrpc.newStub(ManagedChannelBuilder.forTarget(url).usePlaintext(true).build());
    clientStub.control(requestObserver);
    try (FnApiControlClient client = service.get()) {
        assertNotNull(client);
    }
    server.shutdown();
    server.awaitTermination(1, TimeUnit.SECONDS);
    server.shutdownNow();
    verify(requestObserver).onCompleted();
    verifyNoMoreInteractions(requestObserver);
}",async wait,0
91387,OpenLCB_OpenLCB_Java,OlcbInterfaceTest.put,"    @Test
    public void testCTor() {
        NodeID nodeID = new NodeID(new byte[]{1,2,3,4,5,6});
        Connection testConnection = new AbstractConnection(){
            public void put(Message msg, Connection node) {
            }
",non-flaky,5
89336,apache_samza,TestKafkaSystemAdminJava.testValidateStreamWrongName,"  @Test(expected = StreamValidationException.class)
  public void testValidateStreamWrongName() {
    StreamSpec spec1 = new StreamSpec(""testId"", ""testStreamName1"", ""testSystem"", 8);
    StreamSpec spec2 = new StreamSpec(""testId"", ""testStreamName2"", ""testSystem"", 8);

    assertTrue(""createStream should return true if the stream does not exist and then is created."",
        systemAdmin().createStream(spec1));

    systemAdmin().validateStream(spec2);
  }
",non-flaky,5
19504,eclipse_xtext-core,TraceRegionTest.testConstructorInvalidArgs_05,"	@Test(expected = IllegalArgumentException.class)
	public void testConstructorInvalidArgs_05() {
		new TraceRegion(0, 0, 0, 0, true, 0, 0, 0, 0, null, null);
	}
",non-flaky,5
43080,trinodb_trino,BaseConnectorTest.testUpdate,"    @Test
    public void testUpdate()
    {
        if (!hasBehavior(SUPPORTS_UPDATE)) {
            // Note this change is a no-op, if actually run
            assertQueryFails(""UPDATE nation SET nationkey = nationkey + regionkey WHERE regionkey < 1"", ""This connector does not support updates"");
            return;
        }

        try (TestTable table = new TestTable(getQueryRunner()::execute, ""test_update"", ""AS TABLE tpch.tiny.nation"")) {
            String tableName = table.getName();
            assertUpdate(""UPDATE "" + tableName + "" SET nationkey = 100 + nationkey WHERE regionkey = 2"", 5);
            assertThat(query(""SELECT * FROM "" + tableName))
                    .skippingTypesCheck()
                    .matches(""SELECT IF(regionkey=2, nationkey + 100, nationkey) nationkey, name, regionkey, comment FROM tpch.tiny.nation"");

            // UPDATE after UPDATE
            assertUpdate(""UPDATE "" + tableName + "" SET nationkey = nationkey * 2 WHERE regionkey IN (2,3)"", 10);
            assertThat(query(""SELECT * FROM "" + tableName))
                    .skippingTypesCheck()
                    .matches(""SELECT CASE regionkey WHEN 2 THEN 2*(nationkey+100) WHEN 3 THEN 2*nationkey ELSE nationkey END nationkey, name, regionkey, comment FROM tpch.tiny.nation"");
        }
    }
",non-flaky,5
118706,netty_netty,SmtpResponseDecoderTest.testDecodeOneLineResponseChunked,"    @Test
    public void testDecodeOneLineResponseChunked() {
        EmbeddedChannel channel = newChannel();
        assertFalse(channel.writeInbound(newBuffer(""200 Ok"")));
        assertTrue(channel.writeInbound(newBuffer(""\r\n"")));
        assertTrue(channel.finish());

        SmtpResponse response = channel.readInbound();
        assertEquals(200, response.code());
        List<CharSequence> sequences = response.details();
        assertEquals(1, sequences.size());

        assertEquals(""Ok"", sequences.get(0).toString());
        assertNull(channel.readInbound());
    }
",non-flaky,5
134011,CorfuDB_CorfuDB,NodeDownAndLinkFailureIT.nodeDownAndLinkFailureTest,"    @Test(timeout = 300000)
    public void nodeDownAndLinkFailureTest() {
        workflow(wf -> {
            wf.deploy();

            CorfuCluster corfuCluster = wf.getUniverse()
                    .getGroup(wf.getFixture().data().getGroupParamByIndex(0).getName());

            CorfuClient corfuClient = corfuCluster.getLocalCorfuClient();

            CorfuTable<String, String> table = corfuClient.createDefaultCorfuTable(DEFAULT_STREAM_NAME);
            for (int i = 0; i < DEFAULT_TABLE_ITER; i++) {
                table.put(String.valueOf(i), String.valueOf(i));
            }

            //Should fail one link then one node and then heal
            CorfuServer server0 = corfuCluster.getServerByIndex(0);
            CorfuServer server1 = corfuCluster.getServerByIndex(1);
            CorfuServer server2 = corfuCluster.getServerByIndex(2);

            long currEpoch = corfuClient.getLayout().getEpoch();

            log.info(""Stop server2 and wait for layout's unresponsive servers to change"");
            server2.stop(Duration.ofSeconds(10));
            waitForNextEpoch(corfuClient, currEpoch + 1);
            assertThat(corfuClient.getLayout().getUnresponsiveServers()).containsExactly(server2.getEndpoint());
            currEpoch++;

            // Create link failure between server0 and server1
            // After this, cluster becomes unavailable.
            // NOTE: cannot use waitForClusterDown() since the partition only happens on server side, client
            // can still connect to two nodes, write to table so system down handler will not be triggered.
            log.info(""Create link failure between server0 and server1"");
            server0.disconnect(Collections.singletonList(server1));

            // Restart the stopped node, server0 and server1 still partitioned,
            // wait for the one with larger endpoint be marked as unresponsive.
            log.info(""Restart the stopped node, server0 and server1 still partitioned wait for "" +
                    ""the one with larger endpoint be marked as unresponsive."");
            server2.start();

            waitForLayoutChange(layout -> layout.getUnresponsiveServers()
                    .equals(Collections.singletonList(server1.getEndpoint())), corfuClient);

            // Cluster status should be DEGRADED after one node is marked unresponsive
            ClusterStatusReport clusterStatusReport = corfuClient
                    .getManagementView()
                    .getClusterStatus();
            assertThat(clusterStatusReport.getClusterStatus()).isEqualTo(ClusterStatus.DEGRADED);

            log.info(""Repair the partition between server0 and server1"");
            server0.reconnect(Collections.singletonList(server1));
            //TODO why we update epoch many times?
            waitForUnresponsiveServersChange(size -> size == 0, corfuClient);

            Duration sleepDuration = Duration.ofSeconds(1);
            // Verify cluster status is STABLE
            clusterStatusReport = corfuClient.getManagementView().getClusterStatus();
            while (!clusterStatusReport.getClusterStatus().equals(ClusterStatus.STABLE)) {
                clusterStatusReport = corfuClient.getManagementView().getClusterStatus();
                Sleep.sleepUninterruptibly(sleepDuration);
            }
            assertThat(clusterStatusReport.getClusterStatus()).isEqualTo(ClusterStatus.STABLE);

            // Verify data path working fine
            for (int i = 0; i < DEFAULT_TABLE_ITER; i++) {
                assertThat(table.get(String.valueOf(i))).isEqualTo(String.valueOf(i));
            }

            corfuClient.shutdown();
        });
    }
",non-flaky,5
77545,dropwizard_dropwizard,ResourceTestRuleTest.testDefaultJsonProcessingMapper,"    @Test
    public void testDefaultJsonProcessingMapper() {
        assertThat(resourceTestRule.target(""/person/blah/runtime-exception"")
                .request()
                .post(Entity.json(""{ \""he: \""ho\""}""))
                .readEntity(String.class))
                .isEqualTo(""{\""code\"":400,\""message\"":\""Unable to process JSON\""}"");
    }
",non-flaky,5
59651,looly_hutool,TemplateUtilTest.thymeleafEngineTest,"	@Test
	public void thymeleafEngineTest() {
		// å­ç¬¦ä¸²æ¨¡æ¿
		TemplateEngine engine = TemplateUtil.createEngine(
				new TemplateConfig(""templates"").setCustomEngine(ThymeleafEngine.class));
		Template template = engine.getTemplate(""<h3 th:text=\""${message}\""></h3>"");
		String result = template.render(Dict.create().set(""message"", ""Hutool""));
		Assert.assertEquals(""<h3>Hutool</h3>"", result);
		
		//ClassPathæ¨¡æ¿
		engine = TemplateUtil.createEngine(
				new TemplateConfig(""templates"", ResourceMode.CLASSPATH).setCustomEngine(ThymeleafEngine.class));
		template = engine.getTemplate(""thymeleaf_test.ttl"");
		result = template.render(Dict.create().set(""message"", ""Hutool""));
		Assert.assertEquals(""<h3>Hutool</h3>"", result);
	}
",non-flaky,5
133997,CorfuDB_CorfuDB,NodeDownAndPartitionedIT.nodeDownAndPartitionTest,"    @Test(timeout = 300000)
    public void nodeDownAndPartitionTest() {
        workflow(wf -> {
            wf.deploy();

            CorfuCluster corfuCluster = wf.getUniverse()
                    .getGroup(wf.getFixture().data().getGroupParamByIndex(0).getName());

            CorfuClient corfuClient = corfuCluster.getLocalCorfuClient();

            CorfuTable<String, String> table = corfuClient
                    .createDefaultCorfuTable(DEFAULT_STREAM_NAME);

            for (int i = 0; i < DEFAULT_TABLE_ITER; i++) {
                table.put(String.valueOf(i), String.valueOf(i));
            }

            //Should stop one node and partition another one""
            CorfuServer server0 = corfuCluster.getServerByIndex(0);
            CorfuServer server1 = corfuCluster.getServerByIndex(1);
            CorfuServer server2 = corfuCluster.getServerByIndex(2);

            // Stop one node and partition another one
            server1.stop(Duration.ofSeconds(10));
            server2.disconnect(Arrays.asList(server0, server1));

            waitUninterruptibly(Duration.ofSeconds(20));

            // Verify cluster status
            corfuClient.invalidateLayout();
            ClusterStatusReport clusterStatusReport = corfuClient
                    .getManagementView()
                    .getClusterStatus();
            assertThat(clusterStatusReport.getClusterStatus()).isEqualTo(ClusterStatus.STABLE);

            // Wait for failure detector finds cluster is down before recovering
            waitForClusterDown(table);

            // Recover cluster by restarting the stopped node, removing
            // partition and wait for layout's unresponsive servers to change
            server1.start();
            server2.reconnect(Arrays.asList(server0, server1));
            waitForUnresponsiveServersChange(size -> size == 0, corfuClient);

            // Check that the segments are merged and all the servers are equal to 3
            waitForLayoutChange(layout -> layout.getSegments().size() == 1 &&
                    layout.getAllServers().size() == 3, corfuClient);
            // wait for the cluster to be up
            waitForClusterUp(table, ""0"");

            clusterStatusReport = corfuClient.getManagementView().getClusterStatus();
            assertThat(clusterStatusReport.getClusterStatus()).isEqualTo(ClusterStatus.STABLE);

            // Verify data path working fine
            for (int i = 0; i < DEFAULT_TABLE_ITER; i++) {
                assertThat(table.get(String.valueOf(i))).isEqualTo(String.valueOf(i));
            }

            corfuClient.shutdown();
        });
    }
",non-flaky,5
76960,Tencent_Firestorm,RssConfTest.testOptionWithNoDefault,"    @Test
    public void testOptionWithNoDefault() {
        RssConf cfg = new RssConf();
        cfg.setInteger(""int-key"", 11);
        cfg.setString(""string-key"", ""abc"");

        ConfigOption<String> presentStringOption = ConfigOptions
                .key(""string-key"")
                .stringType()
                .noDefaultValue();

        assertEquals(""abc"", cfg.getString(presentStringOption));
        assertEquals(""abc"", cfg.getValue(presentStringOption));

        // test getting default when no value is present

        ConfigOption<String> stringOption = ConfigOptions
                .key(""test"")
                .stringType()
                .noDefaultValue();

        // getting strings for null should work
        assertNull(cfg.getValue(stringOption));
        assertNull(cfg.getString(stringOption));

        // overriding the null default should work
        assertEquals(""override"", cfg.getString(stringOption, ""override""));
    }
",non-flaky,5
175739,GoogleCloudPlatform_google-cloud-eclipse,MultipleConnectionsTest.testSingleConnectionBehaviour,"	@Test
	public void testSingleConnectionBehaviour() throws CoreException, InterruptedException {
		connector = new SocketListenMultiConnector();
		Map<String, String> arguments = new HashMap<>();
		arguments.put(""port"", Integer.toString(port));
		arguments.put(""connectionLimit"", ""1"");
		connector.connect(arguments, new NullProgressMonitor(), launch);
		Thread.sleep(200);

		assertTrue(""first connect should succeed"", connect());
		assertFalse(""second connect should fail"", connect());
	}
",non-flaky,5
98301,spotify_docker-client,UnixTimestampSerializerTest.testToString,"  @Test
  public void testToString() throws Exception {
    final long timestamp = 1487357474682L;
    final String expectedJson = ""{\""date\"":1487357474}"";
    final TestClass testClass = new TestClass(new Date(timestamp));

    final String json = OBJECT_MAPPER.writeValueAsString(testClass);
    assertThat(json, equalTo(expectedJson));
  }
",non-flaky,5
177999,aosp-mirror_platform_frameworks_support,DetailsParallaxManagerTest.setupTest,"    @Test
    public void setupTest() {
        double delta = 0.0002;
        DetailsParallaxManager dpm = new DetailsParallaxManager(
                mActivity.getDetailsFragment().getRowsFragment().getVerticalGridView());

        assertNotNull(dpm.getParallax());

        ParallaxRecyclerViewSource.ChildPositionProperty frameTop = dpm.getFrameTop();
        assertEquals(0f, frameTop.getFraction(), delta);
        assertEquals(0f, frameTop.getAdapterPosition(), delta);


        ParallaxRecyclerViewSource.ChildPositionProperty frameBottom = dpm.getFrameBottom();
        assertEquals(1f, frameBottom.getFraction(), delta);
        assertEquals(0f, frameBottom.getAdapterPosition(), delta);
    }
",non-flaky,5
33877,apache_camel,FhirSearchIT.testSearchByUrl,"    @Test
    public void testSearchByUrl() throws Exception {
        String url = ""Patient?given=Vincent&family=Freeman&_format=json"";
        Bundle result = requestBody(""direct://SEARCH_BY_URL"", url);

        LOG.debug(""searchByUrl: "" + result);
        assertNotNull(result, ""searchByUrl result"");
        Patient patient = (Patient) result.getEntry().get(0).getResource();
        assertNotNull(patient);
        assertEquals(""Freeman"", patient.getName().get(0).getFamily());
    }
",non-flaky,5
19513,eclipse_xtext-core,TraceRegionTest.testLeafIterator_TwoGrandChildren_NoGaps_01,"	@Test
	public void testLeafIterator_TwoGrandChildren_NoGaps_01() {
		TraceRegion root = new TraceRegion(0, 2, 0, 2, true, 2, 3, 0, 0, null, newURI());
		TraceRegion parent = new TraceRegion(0, 2, 0, 2, true, 2, 3, 0, 0, root, null);
		TraceRegion first = new TraceRegion(0, 1, 0, 1, true, 2, 3, 0, 0, parent, null);
		TraceRegion second = new TraceRegion(1, 1, 1, 2, true, 3, 4, 0, 0, parent, null);
		Iterator<AbstractTraceRegion> iter = root.leafIterator();
		assertEquals(Arrays.asList(first, second).iterator(), iter);
	}
",non-flaky,5
162435,testcontainers_testcontainers-java,GenericContainerRuleTest.createContainerCmdHookTest,"    @Test
    public void createContainerCmdHookTest() {
        // Use random name to avoid the conflicts between the tests
        String randomName = Base58.randomString(5);
        try(
                GenericContainer container = new GenericContainer<>(""redis:3.0.2"")
                        .withCommand(""redis-server"", ""--help"")
                        .withCreateContainerCmdModifier(cmd -> cmd.withName(""overrideMe""))
                        // Preserves the order
                        .withCreateContainerCmdModifier(cmd -> cmd.withName(randomName))
                        // Allows to override pre-configured values by GenericContainer
                        .withCreateContainerCmdModifier(cmd -> cmd.withCmd(""redis-server"", ""--port"", ""6379""))
        ) {
            container.start();

            assertEquals(""Name is configured"", ""/"" + randomName, container.getContainerInfo().getName());
            assertEquals(""Command is configured"", ""[redis-server, --port, 6379]"", Arrays.toString(container.getContainerInfo().getConfig().getCmd()));
        }
    }
",non-flaky,5
77017,Tencent_Firestorm,ShuffleStorageUtilsTest.mergeSegmentsTest,"  @Test
  public void mergeSegmentsTest() {
    List<FileBasedShuffleSegment> segments = Lists.newArrayList(
        new FileBasedShuffleSegment(1, 0, 40, 0, 0, 0));
    List<DataFileSegment> fileSegments = ShuffleStorageUtils.mergeSegments(""path"", segments, 100);
    assertEquals(1, fileSegments.size());
    for (DataFileSegment seg : fileSegments) {
      assertEquals(0, seg.getOffset());
      assertEquals(40, seg.getLength());
      assertEquals(""path"", seg.getPath());
      List<BufferSegment> bufferSegments = seg.getBufferSegments();
      assertEquals(1, bufferSegments.size());
      assertEquals(new BufferSegment(1, 0, 40, 0, 0, 0), bufferSegments.get(0));
    }

    segments = Lists.newArrayList(
        new FileBasedShuffleSegment(1, 0, 40, 0, 0, 0),
        new FileBasedShuffleSegment(2, 40, 40, 0, 0, 0),
        new FileBasedShuffleSegment(3, 80, 20, 0, 0, 0));
    fileSegments = ShuffleStorageUtils.mergeSegments(""path"", segments, 100);
    assertEquals(1, fileSegments.size());
    for (DataFileSegment seg : fileSegments) {
      assertEquals(0, seg.getOffset());
      assertEquals(100, seg.getLength());
      assertEquals(""path"", seg.getPath());
      List<BufferSegment> bufferSegments = seg.getBufferSegments();
      assertEquals(3, bufferSegments.size());
      Set<Long> testedBlockIds = Sets.newHashSet();
      for (BufferSegment segment : bufferSegments) {
        if (segment.getBlockId() == 1) {
          assertTrue(segment.equals(new BufferSegment(1, 0, 40, 0, 0, 0)));
          testedBlockIds.add(1L);
        } else if (segment.getBlockId() == 2) {
          assertTrue(segment.equals(new BufferSegment(2, 40, 40, 0, 0, 0)));
          testedBlockIds.add(2L);
        } else if (segment.getBlockId() == 3) {
          assertTrue(segment.equals(new BufferSegment(3, 80, 20, 0, 0, 0)));
          testedBlockIds.add(3L);
        }
      }
      assertEquals(3, testedBlockIds.size());
    }

    segments = Lists.newArrayList(
        new FileBasedShuffleSegment(1, 0, 40, 0, 0, 0),
        new FileBasedShuffleSegment(2, 40, 40, 0, 0, 0),
        new FileBasedShuffleSegment(3, 80, 20, 0, 0, 0),
        new FileBasedShuffleSegment(4, 100, 20, 0, 0, 0));
    fileSegments = ShuffleStorageUtils.mergeSegments(""path"", segments, 100);
    assertEquals(2, fileSegments.size());
    boolean tested = false;
    for (DataFileSegment seg : fileSegments) {
      if (seg.getOffset() == 100) {
        tested = true;
        assertEquals(20, seg.getLength());
        assertEquals(""path"", seg.getPath());
        List<BufferSegment> bufferSegments = seg.getBufferSegments();
        assertEquals(1, bufferSegments.size());
        assertTrue(bufferSegments.get(0).equals(new BufferSegment(4, 0, 20, 0, 0, 0)));
      }
    }
    assertTrue(tested);

    segments = Lists.newArrayList(
        new FileBasedShuffleSegment(1, 0, 40, 0, 0, 0),
        new FileBasedShuffleSegment(2, 40, 40, 0, 0, 0),
        new FileBasedShuffleSegment(3, 80, 20, 0, 0, 0),
        new FileBasedShuffleSegment(4, 100, 20, 0, 0, 0),
        new FileBasedShuffleSegment(5, 120, 100, 0, 0, 0));
    fileSegments = ShuffleStorageUtils.mergeSegments(""path"", segments, 100);
    assertEquals(2, fileSegments.size());
    tested = false;
    for (DataFileSegment seg : fileSegments) {
      if (seg.getOffset() == 100) {
        tested = true;
        assertEquals(120, seg.getLength());
        assertEquals(""path"", seg.getPath());
        List<BufferSegment> bufferSegments = seg.getBufferSegments();
        assertEquals(2, bufferSegments.size());
        Set<Long> testedBlockIds = Sets.newHashSet();
        for (BufferSegment segment : bufferSegments) {
          if (segment.getBlockId() == 4) {
            assertTrue(segment.equals(new BufferSegment(4, 0, 20, 0, 0, 0)));
            testedBlockIds.add(4L);
          } else if (segment.getBlockId() == 5) {
            assertTrue(segment.equals(new BufferSegment(5, 20, 100, 0, 0, 0)));
            testedBlockIds.add(5L);
          }
        }
        assertEquals(2, testedBlockIds.size());
      }
    }
    assertTrue(tested);

    segments = Lists.newArrayList(
        new FileBasedShuffleSegment(1, 10, 40, 0, 0, 0),
        new FileBasedShuffleSegment(2, 80, 20, 0, 0, 0),
        new FileBasedShuffleSegment(3, 500, 120, 0, 0, 0),
        new FileBasedShuffleSegment(4, 700, 20, 0, 0, 0));
    fileSegments = ShuffleStorageUtils.mergeSegments(""path"", segments, 100);
    assertEquals(3, fileSegments.size());
    Set<Long> expectedOffset = Sets.newHashSet(10L, 500L, 700L);
    for (DataFileSegment seg : fileSegments) {
      if (seg.getOffset() == 10) {
        validResult(seg, 90, 1, 40, 2, 70);
        expectedOffset.remove(10L);
      }
      if (seg.getOffset() == 500) {
        assertEquals(120, seg.getLength());
        List<BufferSegment> bufferSegments = seg.getBufferSegments();
        assertEquals(1, bufferSegments.size());
        assertTrue(bufferSegments.get(0).equals(new BufferSegment(3, 0, 120, 0, 0, 0)));
        expectedOffset.remove(500L);
      }
      if (seg.getOffset() == 700) {
        assertEquals(20, seg.getLength());
        List<BufferSegment> bufferSegments = seg.getBufferSegments();
        assertEquals(1, bufferSegments.size());
        assertTrue(bufferSegments.get(0).equals(new BufferSegment(4, 0, 20, 0, 0, 0)));
        expectedOffset.remove(700L);
      }
    }
    assertTrue(expectedOffset.isEmpty());

    segments = Lists.newArrayList(
        new FileBasedShuffleSegment(5, 500, 120, 0, 0, 0),
        new FileBasedShuffleSegment(3, 630, 10, 0, 0, 0),
        new FileBasedShuffleSegment(2, 80, 20, 0, 0, 0),
        new FileBasedShuffleSegment(1, 10, 40, 0, 0, 0),
        new FileBasedShuffleSegment(6, 769, 20, 0, 0, 0),
        new FileBasedShuffleSegment(4, 700, 20, 0, 0, 0));
    fileSegments = ShuffleStorageUtils.mergeSegments(""path"", segments, 100);
    assertEquals(4, fileSegments.size());
    expectedOffset = Sets.newHashSet(10L, 500L, 630L, 700L);
    for (DataFileSegment seg : fileSegments) {
      if (seg.getOffset() == 10) {
        validResult(seg, 90, 1, 40, 2, 70);
        expectedOffset.remove(10L);
      }
      if (seg.getOffset() == 500) {
        assertEquals(120, seg.getLength());
        List<BufferSegment> bufferSegments = seg.getBufferSegments();
        assertEquals(1, bufferSegments.size());
        assertTrue(bufferSegments.get(0).equals(new BufferSegment(5, 0, 120, 0, 0, 0)));
        expectedOffset.remove(500L);
      }
      if (seg.getOffset() == 630) {
        assertEquals(10, seg.getLength());
        List<BufferSegment> bufferSegments = seg.getBufferSegments();
        assertEquals(1, bufferSegments.size());
        assertTrue(bufferSegments.get(0).equals(new BufferSegment(3, 0, 10, 0, 0, 0)));
        expectedOffset.remove(630L);
      }
      if (seg.getOffset() == 700) {
        validResult(seg, 89, 4, 20, 6, 69);
        expectedOffset.remove(700L);
      }
    }
    assertTrue(expectedOffset.isEmpty());
  }
",non-flaky,5
351,apache_hadoop,TestNetworkTopology.testRemove,"  @Test
  public void testRemove() throws Exception {
    for(int i=0; i<dataNodes.length; i++) {
      cluster.remove(dataNodes[i]);
    }
    for(int i=0; i<dataNodes.length; i++) {
      assertFalse(cluster.contains(dataNodes[i]));
    }
    assertEquals(0, cluster.getNumOfLeaves());
    assertEquals(0, cluster.clusterMap.getChildren().size());
    for(int i=0; i<dataNodes.length; i++) {
      cluster.add(dataNodes[i]);
    }
  }
",non-flaky,5
156391,apache_commons-lang,StringUtilsEmptyBlankTest.testIsNoneEmpty,"    @Test
    public void testIsNoneEmpty() {
        assertFalse(StringUtils.isNoneEmpty((String) null));
        assertTrue(StringUtils.isNoneEmpty((String[]) null));
        assertFalse(StringUtils.isNoneEmpty(null, ""foo""));
        assertFalse(StringUtils.isNoneEmpty("""", ""bar""));
        assertFalse(StringUtils.isNoneEmpty(""bob"", """"));
        assertFalse(StringUtils.isNoneEmpty(""  bob  "", null));
        assertTrue(StringUtils.isNoneEmpty("" "", ""bar""));
        assertTrue(StringUtils.isNoneEmpty(""foo"", ""bar""));
    }
",non-flaky,5
38285,palantir_atlasdb,AbstractTransactionTest.testRangePagingBatches,"    @Test
    public void testRangePagingBatches() {
        int totalPuts = 101;
        for (int i = 0 ; i < totalPuts ; i++) {
            putDirect(""row""+i, ""col1"", ""v1"", 0);
        }

        Map<RangeRequest, TokenBackedBasicResultsPage<RowResult<Value>, byte[]>> ranges = keyValueService.getFirstBatchForRanges(TEST_TABLE, Iterables.limit(Iterables.cycle(RangeRequest.builder().batchHint(1000).build()), 100), 1);
        assertEquals(1, ranges.keySet().size());
        assertEquals(totalPuts, ranges.values().iterator().next().getResults().size());
    }
",non-flaky,5
112647,tbsalling_aismessages,PositionReportClassAResponseToInterrogationTest.digest,"    @Test
    public void digest() throws NoSuchAlgorithmException {
        AISMessage aisMessage = AISMessage.create(NMEAMessage.fromString(""!AIVDM,1,1,,A,34RjBV0028o:pnNEBeU<pJF>0PT@,0*3F""));
        byte[] digest = aisMessage.digest();
        String digestAsString = String.format(""%040x"", new java.math.BigInteger(1, digest));
        assertEquals(""673ac3b20886868cafe7376e05092bf625f00b75"", digestAsString);
    }
",non-flaky,5
53165,cloudfoundry_uaa,ScimGroupTests.testPatchZoneIdFails,"    @Test
    public void testPatchZoneIdFails(){
        group.setZoneId(""uaa"");
        patch.setZoneId(""zoneid"");

        assertTrue(group.getZoneId().equals(""uaa""));
        assertTrue(patch.getZoneId().equals(""zoneid""));

        group.patch(patch);

        assertTrue(group.getZoneId().equals(""uaa""));
        assertTrue(patch.getZoneId().equals(""zoneid""));
    }
",non-flaky,5
43059,trinodb_trino,BaseConnectorTest.testMaterializedView,"    @Test
    public void testMaterializedView()
    {
        if (!hasBehavior(SUPPORTS_CREATE_MATERIALIZED_VIEW)) {
            assertQueryFails(""CREATE MATERIALIZED VIEW nation_mv AS SELECT * FROM nation"", ""This connector does not support creating materialized views"");
            return;
        }

        QualifiedObjectName view = new QualifiedObjectName(
                getSession().getCatalog().orElseThrow(),
                getSession().getSchema().orElseThrow(),
                ""test_materialized_view_"" + randomTableSuffix());
        QualifiedObjectName otherView = new QualifiedObjectName(
                getSession().getCatalog().orElseThrow(),
                ""other_schema"",
                ""test_materialized_view_"" + randomTableSuffix());
        QualifiedObjectName viewWithComment = new QualifiedObjectName(
                getSession().getCatalog().orElseThrow(),
                getSession().getSchema().orElseThrow(),
                ""test_materialized_view_with_comment_"" + randomTableSuffix());

        createTestingMaterializedView(view, Optional.empty());
        createTestingMaterializedView(otherView, Optional.of(""sarcastic comment""));
        createTestingMaterializedView(viewWithComment, Optional.of(""mv_comment""));

        // verify comment
        MaterializedResult materializedRows = computeActual(""SHOW CREATE MATERIALIZED VIEW "" + viewWithComment);
        assertThat((String) materializedRows.getOnlyValue()).contains(""COMMENT 'mv_comment'"");
        assertThat(query(
                ""SELECT table_name, comment FROM system.metadata.table_comments "" +
                        ""WHERE catalog_name = '"" + view.getCatalogName() + ""' AND "" +
                        ""schema_name = '"" + view.getSchemaName() + ""'""))
                .skippingTypesCheck()
                .containsAll(""VALUES ('"" + view.getObjectName() + ""', null), ('"" + viewWithComment.getObjectName() + ""', 'mv_comment')"");

        // reading
        assertThat(query(""SELECT * FROM "" + view))
                .skippingTypesCheck()
                .matches(""SELECT * FROM nation"");
        assertThat(query(""SELECT * FROM "" + viewWithComment))
                .skippingTypesCheck()
                .matches(""SELECT * FROM nation"");

        // table listing
        assertThat(query(""SHOW TABLES""))
                .skippingTypesCheck()
                .containsAll(""VALUES '"" + view.getObjectName() + ""'"");
        // information_schema.tables without table_name filter
        assertThat(query(
                ""SELECT table_name, table_type FROM information_schema.tables "" +
                        ""WHERE table_schema = '"" + view.getSchemaName() + ""'""))
                .skippingTypesCheck()
                .containsAll(""VALUES ('"" + view.getObjectName() + ""', 'BASE TABLE')""); // TODO table_type should probably be ""* VIEW""
        // information_schema.tables with table_name filter
        assertQuery(
                ""SELECT table_name, table_type FROM information_schema.tables "" +
                        ""WHERE table_schema = '"" + view.getSchemaName() + ""' and table_name = '"" + view.getObjectName() + ""'"",
                ""VALUES ('"" + view.getObjectName() + ""', 'BASE TABLE')"");

        // system.jdbc.tables without filter
        assertThat(query(""SELECT table_schem, table_name, table_type FROM system.jdbc.tables""))
                .skippingTypesCheck()
                .containsAll(""VALUES ('"" + view.getSchemaName() + ""', '"" + view.getObjectName() + ""', 'TABLE')"");

        // system.jdbc.tables with table prefix filter
        assertQuery(
                ""SELECT table_schem, table_name, table_type "" +
                        ""FROM system.jdbc.tables "" +
                        ""WHERE table_cat = '"" + view.getCatalogName() + ""' AND "" +
                        ""table_schem = '"" + view.getSchemaName() + ""' AND "" +
                        ""table_name = '"" + view.getObjectName() + ""'"",
                ""VALUES ('"" + view.getSchemaName() + ""', '"" + view.getObjectName() + ""', 'TABLE')"");

        // column listing
        assertThat(query(""SHOW COLUMNS FROM "" + view.getObjectName()))
                .projected(0) // column types can very between connectors
                .skippingTypesCheck()
                .matches(""VALUES 'nationkey', 'name', 'regionkey', 'comment'"");

        assertThat(query(""DESCRIBE "" + view.getObjectName()))
                .projected(0) // column types can very between connectors
                .skippingTypesCheck()
                .matches(""VALUES 'nationkey', 'name', 'regionkey', 'comment'"");

        // information_schema.columns without table_name filter
        assertThat(query(
                ""SELECT table_name, column_name "" +
                        ""FROM information_schema.columns "" +
                        ""WHERE table_schema = '"" + view.getSchemaName() + ""'""))
                .skippingTypesCheck()
                .containsAll(
                        ""SELECT * FROM (VALUES '"" + view.getObjectName() + ""') "" +
                                ""CROSS JOIN UNNEST(ARRAY['nationkey', 'name', 'regionkey', 'comment'])"");

        // information_schema.columns with table_name filter
        assertThat(query(
                ""SELECT table_name, column_name "" +
                        ""FROM information_schema.columns "" +
                        ""WHERE table_schema = '"" + view.getSchemaName() + ""' and table_name = '"" + view.getObjectName() + ""'""))
                .skippingTypesCheck()
                .containsAll(
                        ""SELECT * FROM (VALUES '"" + view.getObjectName() + ""') "" +
                                ""CROSS JOIN UNNEST(ARRAY['nationkey', 'name', 'regionkey', 'comment'])"");

        // view-specific listings
        checkInformationSchemaViewsForMaterializedView(view.getSchemaName(), view.getObjectName());

        // system.jdbc.columns without filter
        @Language(""SQL"") String expectedValues = ""VALUES ('"" + view.getSchemaName() + ""', '"" + view.getObjectName() + ""', 'nationkey'), "" +
                ""('"" + view.getSchemaName() + ""', '"" + view.getObjectName() + ""', 'name'), "" +
                ""('"" + view.getSchemaName() + ""', '"" + view.getObjectName() + ""', 'regionkey'), "" +
                ""('"" + view.getSchemaName() + ""', '"" + view.getObjectName() + ""', 'comment')"";
        assertThat(query(
                ""SELECT table_schem, table_name, column_name FROM system.jdbc.columns""))
                .skippingTypesCheck()
                .containsAll(expectedValues);

        // system.jdbc.columns with schema filter
        assertThat(query(
                ""SELECT table_schem, table_name, column_name "" +
                        ""FROM system.jdbc.columns "" +
                        ""WHERE table_schem LIKE '%"" + view.getSchemaName() + ""%'""))
                .skippingTypesCheck()
                .containsAll(expectedValues);

        // system.jdbc.columns with table filter
        assertQuery(
                ""SELECT table_schem, table_name, column_name "" +
                        ""FROM system.jdbc.columns "" +
                        ""WHERE table_name LIKE '%"" + view.getObjectName() + ""%'"",
                expectedValues);

        // details
        assertThat(((String) computeScalar(""SHOW CREATE MATERIALIZED VIEW "" + view.getObjectName())))
                .matches(""(?s)"" +
                        ""CREATE MATERIALIZED VIEW \\Q"" + view + ""\\E"" +
                        "".* AS\n"" +
                        ""SELECT \\*\n"" +
                        ""FROM\n"" +
                        ""  nation"");

        // we only want to test filtering materialized views in different schemas,
        // `viewWithComment` is in the same schema as `view` so it is not needed
        assertUpdate(""DROP MATERIALIZED VIEW "" + viewWithComment);

        // test filtering materialized views in system metadata table
        assertThat(query(listMaterializedViewsSql(""catalog_name = '"" + view.getCatalogName() + ""'"")))
                .skippingTypesCheck()
                .containsAll(getTestingMaterializedViewsResultRows(view, otherView));

        assertThat(query(
                listMaterializedViewsSql(
                        ""catalog_name = '"" + otherView.getCatalogName() + ""'"",
                        ""schema_name = '"" + otherView.getSchemaName() + ""'"")))
                .skippingTypesCheck()
                .containsAll(getTestingMaterializedViewsResultRow(otherView, ""sarcastic comment""));

        assertThat(query(
                listMaterializedViewsSql(
                        ""catalog_name = '"" + view.getCatalogName() + ""'"",
                        ""schema_name = '"" + view.getSchemaName() + ""'"",
                        ""name = '"" + view.getObjectName() + ""'"")))
                .skippingTypesCheck()
                .containsAll(getTestingMaterializedViewsResultRow(view, """"));

        assertThat(query(
                listMaterializedViewsSql(""schema_name LIKE '%"" + view.getSchemaName() + ""%'"")))
                .skippingTypesCheck()
                .containsAll(getTestingMaterializedViewsResultRow(view, """"));

        assertThat(query(
                listMaterializedViewsSql(""name LIKE '%"" + view.getObjectName() + ""%'"")))
                .skippingTypesCheck()
                .containsAll(getTestingMaterializedViewsResultRow(view, """"));

        // verify write in transaction
        if (!hasBehavior(SUPPORTS_MULTI_STATEMENT_WRITES)) {
            assertThatThrownBy(() -> inTransaction(session -> computeActual(session, ""REFRESH MATERIALIZED VIEW "" + view)))
                    .hasMessageMatching(""Catalog only supports writes using autocommit: \\w+"");
        }

        assertUpdate(""DROP MATERIALIZED VIEW "" + view);
        assertUpdate(""DROP MATERIALIZED VIEW "" + otherView);

        assertQueryReturnsEmptyResult(listMaterializedViewsSql(""name = '"" + view.getObjectName() + ""'""));
        assertQueryReturnsEmptyResult(listMaterializedViewsSql(""name = '"" + otherView.getObjectName() + ""'""));
        assertQueryReturnsEmptyResult(listMaterializedViewsSql(""name = '"" + viewWithComment.getObjectName() + ""'""));
    }
",non-flaky,5
97667,vojtechhabarta_typescript-generator,SpringTest.testPathParameterWithReservedWord,"    @Test
    public void testPathParameterWithReservedWord() {
        final Settings settings = TestUtils.settings();
        settings.outputFileType = TypeScriptFileType.implementationFile;
        settings.generateSpringApplicationClient = true;
        final String output = new TypeScriptGenerator(settings).generateTypeScript(Input.from(ControllerWithReservedWord.class));
        Assert.assertTrue(output.contains(""getLogs(_class: string): RestResponse<string[]>""));
        Assert.assertTrue(output.contains(""uriEncoding`logs/${_class}`""));
    }
",non-flaky,5
94808,ktuukkan_marine-api,AISMessage09ParserTest.hasLongitude,"    @Test
    public void hasLongitude() {
        assertEquals(true, msg.hasLongitude());
    }
",non-flaky,5
104664,apache_pinot,OfflineClusterIntegrationTest.testHardcodedServerPartitionedSqlQueries,"  @Test
  public void testHardcodedServerPartitionedSqlQueries()
      throws Exception {
    super.testHardcodedServerPartitionedSqlQueries();
  }
",non-flaky,5
222,apache_struts,13d9053050c9e4fb2ef049db6a37d3f6eebf48fa.testProcessAction_ok,"@Test
public void testProcessAction_ok() {
    final Mock mockResponse = mock(ActionResponse.class);
    PortletMode mode = PortletMode.VIEW;
    Map<String, String> initParams = new HashMap<String, String>();
    initParams.put(""viewNamespace"", ""/view"");
    Map<String, String[]> requestParams = new HashMap<String, String[]>();
    requestParams.put(ACTION_PARAM, new String[]{""/view/testAction""});
    requestParams.put(MODE_PARAM, new String[]{mode.toString()});
    initParams.put(StrutsConstants.STRUTS_ALWAYS_SELECT_FULL_NAMESPACE, ""true"");
    initPortletConfig(initParams, new HashMap<String, Object>());
    initRequest(requestParams, new HashMap<String, Object>(), new HashMap<String, Object>(), PortletMode.VIEW, WindowState.NORMAL, true, null);
    setupActionFactory(""/view"", ""testAction"", ""success"", EasyMock.createNiceMock(ValueStack.class));
    try {
        dispatcher
        .setActionProxyFactory((ActionProxyFactory) mockActionFactory
        .proxy());
        dispatcher.init((PortletConfig) mockConfig.proxy());
        dispatcher.processAction((ActionRequest) mockRequest.proxy(),
        (ActionResponse) mockResponse.proxy());
    } catch (Exception e) {
        e.printStackTrace();
        fail(""Error occured"");
    }
}",test order dependency,4
177225,line_armeria,FileWatcherRegistryTest.emptyGroupStopsBackgroundThread,"    @Test
    public void emptyGroupStopsBackgroundThread() throws Exception {

        final File file = folder.newFile(""temp-file.properties"");
        final File file2 = folder.newFile(""temp-file2.properties"");

        final FileWatcherRegistry fileWatcherRegistry =
                new FileWatcherRegistry();
        final FileWatchRegisterKey key1 = fileWatcherRegistry.register(file.toPath(), () -> {});
        final FileWatchRegisterKey key2 = fileWatcherRegistry.register(file2.toPath(), () -> {});

        assertThat(fileWatcherRegistry.isRunning()).isTrue();

        fileWatcherRegistry.unregister(key1);

        assertThat(fileWatcherRegistry.isRunning()).isTrue();

        fileWatcherRegistry.unregister(key2);

        assertThat(fileWatcherRegistry.isRunning()).isFalse();
    }
",non-flaky,5
159668,liquibase_liquibase,AbstractMssqlIntegrationTest.impossibleDefaultSchema,"    @Test
    public void impossibleDefaultSchema() {
        Exception caughtException = null;
        try {
            getDatabase().setDefaultSchemaName(""lbuser"");
        } catch (Exception ex) {
            caughtException = ex;
        }
        assertNotNull(""Must not allow using a defaultSchemaName that is different from the DB user's login schema."",
            caughtException);

    }
",non-flaky,5
26876,wildfly_wildfly,NamingContextTestCase.testLookupEmptyName,"    @Test
    public void testLookupEmptyName() throws Exception {
        Object result = namingContext.lookup(new CompositeName());
        assertTrue(result instanceof NamingContext);
        result = namingContext.lookup(new CompositeName(""""));
        assertTrue(result instanceof NamingContext);

        //the same with security permissions
        result = testActionPermission(JndiPermission.ACTION_LOOKUP, namingContext, null);
        assertTrue(result instanceof NamingContext);
        result = testActionPermission(JndiPermission.ACTION_LOOKUP, namingContext, """");
        assertTrue(result instanceof NamingContext);
    }
",non-flaky,5
92607,FasterXML_jackson-databind,ObjectReaderValueOfWithValueTypeTest.testValueOfStringWithValueType,"    @Test
    public void testValueOfStringWithValueType() throws IOException {
        when(objectReader.readValue((String) any())).thenReturn(pojo);
        when(objectReader.forType((Class<?>) any())).thenReturn(objectReader);
        when(objectReader.readValue((String) any(), (Class<?>) any())).thenCallRealMethod();

        String source = """";
        POJO result = objectReader.readValue(source, POJO.class);

        assertEquals(result, pojo);
        verify(objectReader).forType(POJO.class);
        verify(objectReader).readValue(source);
    }
",non-flaky,5
77019,Tencent_Firestorm,ShuffleStorageUtilsTest.getStorageIndexTest,"  @Test
  public void getStorageIndexTest() {
    int index = ShuffleStorageUtils.getStorageIndex(3, ""abcde"", 3, 1);
    assertEquals(2, index);
    index = ShuffleStorageUtils.getStorageIndex(3, ""abcde"", 3, 4);
    assertEquals(1, index);
  }
",non-flaky,5
162718,OpenAPITools_openapi-generator,XmlItemTest.prefixIntegerTest,"    @Test
    public void prefixIntegerTest() {
        // TODO: test prefixInteger
    }
",non-flaky,5
77512,dropwizard_dropwizard,DropwizardAppRuleResetConfigOverrideTest.test2,"    @Test
    public void test2() throws Exception {
        dropwizardAppRule.before();
        assertThat(System.getProperty(""app-rule-reset.message"")).isEqualTo(""A new way to say Hooray!"");
        assertThat(System.getProperty(""app-rule-reset.extra"")).isNull();
        dropwizardAppRule.after();

        System.setProperty(""app-rule-reset.extra"", ""Some extra system property"");
        dropwizardAppRule.before();
        assertThat(System.getProperty(""app-rule-reset.message"")).isEqualTo(""A new way to say Hooray!"");
        assertThat(System.getProperty(""app-rule-reset.extra"")).isEqualTo(""Some extra system property"");
        dropwizardAppRule.after();

        assertThat(System.getProperty(""app-rule-reset.message"")).isNull();
        assertThat(System.getProperty(""app-rule-reset.extra"")).isEqualTo(""Some extra system property"");
        System.clearProperty(""app-rule-reset.extra"");
    }
",non-flaky,5
156114,soot-oss_soot,SootMethodRefImplTest.testCachingInvalidation,"  @Test
  public void testCachingInvalidation() throws Exception {
    SootMethod m1 = prepareTarget(methodSigFromComponents(TEST_TARGET_CLASS, ""void"", ""m1""), TEST_TARGET_CLASS);
    final SootClass clas = m1.getDeclaringClass();

    // There are only 3 methods in the class originally.
    Assert.assertEquals(Arrays.asList(""<init>"", ""m1"", ""m2""),
        clas.getMethods().stream().map(SootMethod::getName).sorted().collect(Collectors.toList()));

    // Ensure the previous value of SootMethodRefImpl#resolveCache
    // is not used if the referenced method itself is modified.
    final Body b = m1.retrieveActiveBody();
    final SootMethodRef mRef = getMethodRef(b);
    Assert.assertEquals(""m2"", mRef.getName());

    // Get the original referenced method appearing in the test source (i.e. ""m2"")
    final SootMethod origM = mRef.resolve();
    Assert.assertTrue(!origM.isPhantom());
    Assert.assertEquals(""m2"", origM.getName());

    // Change the name of the method so the method reference no
    // longer refers to that method.
    origM.setName(""newMethodName"");
    Assert.assertEquals(""newMethodName"", origM.getName());

    // Changing the method itself does not change the reference
    Assert.assertEquals(""m2"", mRef.getName());

    // There are still just 3 methods in the class (but ""m2"" was renamed).
    Assert.assertEquals(Arrays.asList(""<init>"", ""m1"", ""newMethodName""),
        clas.getMethods().stream().map(SootMethod::getName).sorted().collect(Collectors.toList()));

    // When resolving the reference, the cached value is not used since the
    // original method was renamed. It now gives a different method (that was
    // created automatically since a method with the name ""m2"" no longer exists).
    final SootMethod newM = mRef.resolve();
    Assert.assertNotSame(origM, newM);
    Assert.assertEquals(""m2"", newM.getName());

    // There are now 4 methods since resolving ""m2"" created it again.
    Assert.assertEquals(Arrays.asList(""<init>"", ""m1"", ""m2"", ""newMethodName""),
        clas.getMethods().stream().map(SootMethod::getName).sorted().collect(Collectors.toList()));
  }
",non-flaky,5
177184,line_armeria,RequestContextCurrentTraceContextTest.get_returnsNullWhenNoCurrentRequestContext,"    @Test
    public void get_returnsNullWhenNoCurrentRequestContext() {
        assertThat(currentTraceContext.get()).isNull();
    }
",non-flaky,5
135724,Netflix_Hystrix,CommonHystrixCommandTests.run,"    @Test
    public void testExecutionHookSemaphoreRejectedSuccessfulFallback() {
        assertHooksOnSuccess(
                new Func0<C>() {
                    @Override
                    public C call() {
                        AbstractCommand.TryableSemaphore semaphore = new AbstractCommand.TryableSemaphoreActual(HystrixProperty.Factory.asProperty(2));

                        final C cmd1 = getLatentCommand(ExecutionIsolationStrategy.SEMAPHORE, ExecutionResult.SUCCESS, 1500, FallbackResult.SUCCESS, semaphore);
                        final C cmd2 = getLatentCommand(ExecutionIsolationStrategy.SEMAPHORE, ExecutionResult.SUCCESS, 1500, FallbackResult.SUCCESS, semaphore);

                        //saturate the semaphore
                        new Thread() {
                            @Override
                            public void run() {
                                cmd1.observe();
                            }
",non-flaky,5
26897,wildfly_wildfly,InMemoryNamingStoreTestCase.testRebindInvalidContext,"    @Test
    public void testRebindInvalidContext() throws Exception {
        try {
            nameStore.rebind(new CompositeName(""subcontext/test""), new Object(), Object.class);
            fail(""Should have thrown and NameNotFoundException"");
        } catch(NameNotFoundException expected){}
    }
",non-flaky,5
331,androidx_androidx,testSetCallbackWithNull,"@Test
public void testSetCallbackWithNull() throws Exception {
    mSession.setActive(true);
    mCallback.reset(1);
    mSession.setCallback(null, mHandler);
    assertEquals(""Callback shouldn't be called."", 0, mCallback.mOnPlayCalledCount);
}",async wait,0
112714,hwang-pku_ormlite-core,BaseConnectionSourceTest.testClearNone,"	@Test
	public void testClearNone() {
		OurConnectionSource cs = new OurConnectionSource();
		cs.clearSpecialConnection(createMock(DatabaseConnection.class));
		cs.close();
	}
",non-flaky,5
77541,dropwizard_dropwizard,ResourceTestRuleTest.testGetPerson,"    @Test
    public void testGetPerson() {
        assertThat(resourceTestRule.target(""/person/blah"").request()
                .get(Person.class))
                .isEqualTo(person);
        verify(peopleStore).fetchPerson(""blah"");
    }
",non-flaky,5
33857,apache_camel,FhirPatchIT.testPatchById,"    @Test
    public void testPatchById() throws Exception {
        final Map<String, Object> headers = new HashMap<>();
        // parameter type is String
        headers.put(""CamelFhir.patchBody"", PATCH);
        // parameter type is org.hl7.fhir.instance.model.api.IIdType
        headers.put(""CamelFhir.id"", this.patient.getIdElement());
        // parameter type is ca.uhn.fhir.rest.api.PreferReturnEnum
        headers.put(""CamelFhir.preferReturn"", null);

        MethodOutcome result = requestBodyAndHeaders(""direct://PATCH_BY_ID"", null, headers);
        assertNotNull(result, ""patchById result"");
        assertActive(result);
    }
",non-flaky,5
309,apache_hadoop,TestRpcProgramNfs3.testSymlink,"  @Test(timeout = 60000)
  public void testSymlink() throws Exception {
    HdfsFileStatus status = nn.getRpcServer().getFileInfo(testdir);
    long dirId = status.getFileId();
    int namenodeId = Nfs3Utils.getNamenodeId(config);
    XDR xdr_req = new XDR();
    FileHandle handle = new FileHandle(dirId, namenodeId);
    SYMLINK3Request req = new SYMLINK3Request(handle, ""fubar"", new SetAttr3(),
        ""bar"");
    req.serialize(xdr_req);

    // Attempt by an unprivileged user should fail.
    SYMLINK3Response response1 = nfsd.symlink(xdr_req.asReadOnlyWrap(),
        securityHandlerUnpriviledged,
        new InetSocketAddress(""localhost"", 1234));
    assertEquals(""Incorrect return code:"", Nfs3Status.NFS3ERR_ACCES,
        response1.getStatus());

    // Attempt by a privileged user should pass.
    SYMLINK3Response response2 = nfsd.symlink(xdr_req.asReadOnlyWrap(),
        securityHandler, new InetSocketAddress(""localhost"", 1234));
    assertEquals(""Incorrect return code:"", Nfs3Status.NFS3_OK,
        response2.getStatus());
  }
",non-flaky,5
112674,hwang-pku_ormlite-core,VersionUtilsTest.testCheckCoreVersusAndroidVersionsBad,"	@Test(expected = IllegalStateException.class)
	public void testCheckCoreVersusAndroidVersionsBad() {
		VersionUtils.setThrownOnErrors(true);
		VersionUtils.checkCoreVersusAndroidVersions(""xxx"");
	}
",non-flaky,5
78246,apache_beam,StateInternalsTest.testMergeSetIntoSource,"  @Test
  public void testMergeSetIntoSource() throws Exception {

    SetState<String> set1 = underTest.state(NAMESPACE_1, STRING_SET_ADDR);
    SetState<String> set2 = underTest.state(NAMESPACE_2, STRING_SET_ADDR);

    set1.add(""Hello"");
    set2.add(""Hello"");
    set2.add(""World"");
    set1.add(""!"");

    StateMerging.mergeSets(Arrays.asList(set1, set2), set1);

    // Reading the merged set gets both the contents
    assertThat(set1.read(), containsInAnyOrder(""Hello"", ""World"", ""!""));
    assertThat(set2.read(), Matchers.emptyIterable());
  }
",non-flaky,5
110194,Wikidata_wikidata-toolkit,RdfConverterTest.testStatementNoValue,"	@Test
	public void testStatementNoValue() throws RDFHandlerException,
			RDFParseException, IOException {
		PropertyIdValue pid = dataObjectFactory.getPropertyIdValue(""P31"", ""http://www.wikidata.org/"");
		Statement statement = StatementBuilder
				.forSubjectAndProperty(ItemIdValue.NULL, pid)
				.withNoValue().build();
		this.rdfConverter.writeStatement(statement);
		this.rdfWriter.finish();
		Model model = RdfTestHelpers.parseRdf(this.out.toString());
		assertEquals(model, RdfTestHelpers.parseRdf(RdfTestHelpers
				.getResourceFromFile(""StatementNoValue.rdf"")));
	}
",non-flaky,5
133982,CorfuDB_CorfuDB,ClientHandshakeHandlerTest.testResponsePassedAfterHandshake,"    @Test
    public void testResponsePassedAfterHandshake() {
        // Take out the handshake request message upon channelActive.
        Object out = embeddedChannel.readOutbound();
        assertTrue(out instanceof RequestMsg);
        assertTrue(((RequestMsg) out).getPayload().hasHandshakeRequest());
        // Get a HandshakeRequestMsg with specified server node id.
        ResponseMsg handshakeResponse = getResponseMsg(
                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.IGNORE),
                getHandshakeResponseMsg(SERVER_NODEID)
        );
        // Get a ping ResponseMsg
        ResponseMsg pingResponse = getResponseMsg(
                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.IGNORE),
                getPingResponseMsg()
        );

        embeddedChannel.writeInbound(handshakeResponse);
        embeddedChannel.writeInbound(pingResponse);

        // Verify that the ping response is passed to next handler.
        Object in = embeddedChannel.readInbound();
        assertEquals(in, pingResponse);
        // Verify that there is no outbound messages.
        assertNull(embeddedChannel.readOutbound());
    }
",non-flaky,5
162389,testcontainers_testcontainers-java,MountableFileTest.forHostFilePathWithPermission,"    @Test
    public void forHostFilePathWithPermission() throws Exception {
        final Path file = createTempFile(""somepath"");
        final MountableFile mountableFile = MountableFile.forHostPath(file.toString(), TEST_FILE_MODE);
        performChecks(mountableFile);
        assertEquals(""Valid file mode."", BASE_FILE_MODE | TEST_FILE_MODE, mountableFile.getFileMode());
    }
",non-flaky,5
53202,cloudfoundry_uaa,TotpMfaEndpointIntegrationTests.testManualMfaRegistrationFlow,"    @Test
    public void testManualMfaRegistrationFlow() {
        performLogin(username);
        assertEquals(zoneUrl + ""/login/mfa/register"", webDriver.getCurrentUrl());

        webDriver.findElement(By.linkText(""manual setup instructions"")).click();

        assertEquals(zoneUrl + ""/login/mfa/manual"", webDriver.getCurrentUrl());

        String key = webDriver.findElement(By.id(""key"")).getText();
        String account = webDriver.findElement(By.id(""account"")).getText();
        assertFalse(""secret not found"", key.isEmpty());
        assertFalse(""account not found"", account.isEmpty());

        webDriver.findElement(By.id(""Next"")).click();
        assertEquals(zoneUrl + ""/login/mfa/verify"", webDriver.getCurrentUrl());

        verifyCodeOnRegistration(key, ""/"");
    }
",non-flaky,5
137112,spring-projects_spring-framework,AbstractAnnotationMetadataTests.getAnnotatedMethodsReturnsMatchingAnnotatedAndMetaAnnotatedMethods,"	@Test
	public void getAnnotatedMethodsReturnsMatchingAnnotatedAndMetaAnnotatedMethods() {
		assertThat(get(WithDirectAndMetaAnnotatedMethods.class).getAnnotatedMethods(MetaAnnotation2.class.getName()))
			.extracting(MethodMetadata::getMethodName)
			.containsExactlyInAnyOrder(""direct"", ""meta"");
	}
",non-flaky,5
135031,undertow-io_undertow,DateUtilsTestCase.testParseChromeDate,"    @Test
    public void testParseChromeDate() {

        String chromeHeader = ""Mon, 31 Mar 2014 09:44:00 GMT"";
        Date chromeDate = DateUtils.parseDate(chromeHeader);

        Assert.assertNotNull(chromeDate);

        Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone(""GMT""));
        calendar.set(2014, Calendar.MARCH, 31, 9, 44, 00);
        calendar.set(Calendar.MILLISECOND, 0);

        Assert.assertEquals(calendar.getTime(), chromeDate);

    }
",non-flaky,5
30969,camunda-cloud_zeebe,POJOArrayTest.shouldFailOnRemovingEntryTwice,"  @Test
  public void shouldFailOnRemovingEntryTwice() {
    // given
    final POJOArray pojo = new POJOArray();

    final DirectBuffer buffer =
        encodeMsgPack(
            (w) -> {
              w.writeMapHeader(1);
              encodeSimpleArrayProp(w);
            });

    pojo.wrap(buffer);
    final Iterator<MinimalPOJO> iterator = pojo.simpleArray().iterator();
    iterator.next();
    iterator.remove();

    // then
    exception.expect(IllegalStateException.class);

    // when
    iterator.remove();
  }
",non-flaky,5
70841,apache_kafka,WorkerSourceTaskTest.testSendRecordsCorruptTimestamp,"    @Test(expected = InvalidRecordException.class)
    public void testSendRecordsCorruptTimestamp() throws Exception {
        final Long timestamp = -3L;
        createWorkerTask();

        List<SourceRecord> records = Collections.singletonList(
                new SourceRecord(PARTITION, OFFSET, ""topic"", null, KEY_SCHEMA, KEY, RECORD_SCHEMA, RECORD, timestamp)
        );

        Capture<ProducerRecord<byte[], byte[]>> sent = expectSendRecordAnyTimes();

        PowerMock.replayAll();

        Whitebox.setInternalState(workerTask, ""toSend"", records);
        Whitebox.invokeMethod(workerTask, ""sendRecords"");
        assertEquals(null, sent.getValue().timestamp());

        PowerMock.verifyAll();
    }
",non-flaky,5
110195,Wikidata_wikidata-toolkit,RdfConverterTest.testWriteBasicDeclarations,"	@Test
	public void testWriteBasicDeclarations() throws RDFHandlerException,
			RDFParseException, IOException {
		this.rdfConverter.writeBasicDeclarations();
		this.rdfWriter.finish();
		Model model = RdfTestHelpers.parseRdf(this.out.toString());
		assertEquals(RdfTestHelpers.parseRdf(RdfTestHelpers
				.getResourceFromFile(""BasicDeclarations.rdf"")), model);
	}
",non-flaky,5
98239,apache_jackrabbit,PerformanceTest.testPerformance,"    @Test
    public void testPerformance() throws Exception {
        testPerformance(""1.4"");
    }
",non-flaky,5
84613,apache_zookeeper,GetEphemeralsTest.testGetEphemeralsSync,"    @Test
    public void testGetEphemeralsSync() throws KeeperException, InterruptedException {
        List<String> actual = zk.getEphemerals();
        assertEquals(actual.size(), expected.length, ""Expected ephemeral count for allPaths"");
        for (int i = 0; i < expected.length; i++) {
            String path = expected[i];
            assertTrue(actual.contains(path), String.format(""Path=%s exists in get All Ephemerals list "", path));
        }
    }
",non-flaky,5
70820,apache_kafka,PluginsTest.newConverterShouldConfigureWithPluginClassLoader,"    @Test
    public void newConverterShouldConfigureWithPluginClassLoader() {
        TestPlugins.assertAvailable();
        props.put(WorkerConfig.KEY_CONVERTER_CLASS_CONFIG, TestPlugins.SAMPLING_CONVERTER);
        ClassLoader classLoader = plugins.delegatingLoader().pluginClassLoader(TestPlugins.SAMPLING_CONVERTER);
        ClassLoader savedLoader = Plugins.compareAndSwapLoaders(classLoader);
        createConfig();
        Plugins.compareAndSwapLoaders(savedLoader);

        Converter plugin = plugins.newConverter(
            config,
            WorkerConfig.KEY_CONVERTER_CLASS_CONFIG,
            ClassLoaderUsage.PLUGINS
        );

        assertInstanceOf(SamplingTestPlugin.class, plugin, ""Cannot collect samples"");
        Map<String, SamplingTestPlugin> samples = ((SamplingTestPlugin) plugin).flatten();
        assertTrue(samples.containsKey(""configure""));
        assertPluginClassLoaderAlwaysActive(samples);
    }
",non-flaky,5
76684,quarkusio_quarkus,CustomAuthEmbeddedBase.testJaxrsUserRoleSuccess,"    @Test
    public void testJaxrsUserRoleSuccess() {
        RestAssured.given().auth().preemptive().basic(""scott"", ""jb0ss"")
                .when().get(""/jaxrs-secured/subject/secured"").then()
                .statusCode(200)
                .body(equalTo(""scott""));
    }
",non-flaky,5
122613,vespa-engine_vespa,UnixPathTest.deleteRecursively,"    @Test
    public void deleteRecursively() throws Exception {
        // Create the following file tree:
        //
        // /dir1
        //  |--- dir2
        //      |--- file1
        // /link1 -> /dir1/dir2
        //
        var dir1 = fs.getPath(""/dir1"");
        var dir2 = dir1.resolve(""dir2"");
        var file1 = dir2.resolve(""file1"");
        Files.createDirectories(dir2);
        Files.writeString(file1, ""file1"");
        var link1 = Files.createSymbolicLink(fs.getPath(""/link1""), dir2);

        new UnixPath(link1).deleteRecursively();
        assertTrue(""Deleting "" + link1 + "" recursively does not remove "" + dir2, Files.exists(dir2));
        assertTrue(""Deleting "" + link1 + "" recursively does not remove "" + file1, Files.exists(file1));

        new UnixPath(dir1).deleteRecursively();
        assertFalse(dir1 + "" deleted recursively"", Files.exists(file1));
        assertFalse(dir1 + "" deleted recursively"", Files.exists(dir2));
        assertFalse(dir1 + "" deleted recursively"", Files.exists(dir1));
    }
",non-flaky,5
53199,cloudfoundry_uaa,TotpMfaEndpointIntegrationTests.checkAccessForTotpPage,"    @Test
    public void checkAccessForTotpPage() throws Exception {
        webDriver.get(zoneUrl + ""/logout.do"");
        webDriver.manage().deleteAllCookies();
        webDriver.get(zoneUrl + ""/login/mfa/register"");
        assertEquals(zoneUrl + ""/login"", webDriver.getCurrentUrl());
    }
",non-flaky,5
94785,ktuukkan_marine-api,AISMessage21ParserTest.getStarboard,"    @Test
    public void getStarboard() throws Exception {
        assertEquals(5, msg.getStarboard());
    }
",non-flaky,5
162695,OpenAPITools_openapi-generator,ClassModelTest.propertyClassTest,"    @Test
    public void propertyClassTest() {
        // TODO: test propertyClass
    }
",non-flaky,5
97748,vojtechhabarta_typescript-generator,UtilsTest.testPathJoin,"    @Test
    public void testPathJoin() {
        Assert.assertEquals(""controller"", Utils.joinPath(""/controller"", null));
        Assert.assertEquals(""controller/"", Utils.joinPath(""/controller/"", null));
        Assert.assertEquals(""path"", Utils.joinPath(null, ""/path""));
        Assert.assertEquals(""path/"", Utils.joinPath(null, ""/path/""));
        Assert.assertEquals("""", Utils.joinPath(null, ""/""));
        Assert.assertEquals("""", Utils.joinPath(""/"", null));
        Assert.assertEquals(""path"", Utils.joinPath(""/"", ""path""));

        Assert.assertEquals(""controller"", Utils.joinPath(""/controller"", """"));
        Assert.assertEquals(""controller/"", Utils.joinPath(""/controller"", ""/""));
        Assert.assertEquals(""controller/path"", Utils.joinPath(""/controller"", ""/path""));
        Assert.assertEquals(""controller/path"", Utils.joinPath(""/controller"", ""path""));
        Assert.assertEquals(""controller/path/"", Utils.joinPath(""/controller"", ""/path/""));

        Assert.assertEquals(""controller/"", Utils.joinPath(""/controller/"", """"));
        Assert.assertEquals(""controller/"", Utils.joinPath(""/controller/"", ""/""));
        Assert.assertEquals(""controller/path"", Utils.joinPath(""/controller/"", ""/path""));
        Assert.assertEquals(""controller/path"", Utils.joinPath(""/controller/"", ""path""));
        Assert.assertEquals(""controller/path/"", Utils.joinPath(""/controller/"", ""/path/""));
    }
",non-flaky,5
97747,vojtechhabarta_typescript-generator,UtilsTest.testGlobToRegexp,"    @Test
    public void testGlobToRegexp() {
        Assert.assertEquals(""\\Q\\E.*\\QJson\\E"", Utils.globsToRegexps(Arrays.asList(""**Json"")).get(0).toString());
        Assert.assertEquals(""\\Qcz.habarta.test.\\E[^.\\$]*\\Q\\E"", Utils.globsToRegexps(Arrays.asList(""cz.habarta.test.*"")).get(0).toString());
    }
",non-flaky,5
76719,quarkusio_quarkus,QuarkusCodestartBuildIT.testGradleKotlinDSL,"    @ParameterizedTest
    public void testGradleKotlinDSL(String language) throws Exception {
        final List<String> codestarts = getExtensionCodestarts();
        generateProjectRunTests(""gradle-kotlin-dsl"", language, codestarts);
    }
",non-flaky,5
162428,testcontainers_testcontainers-java,GenericContainerRuleTest.exceptionThrownWhenTryingToOverrideTestcontainersLabels,"    @Test
    public void exceptionThrownWhenTryingToOverrideTestcontainersLabels() {
        assertThrows(""When trying to overwrite an 'org.testcontainers' label, withLabel() throws an exception"",
            IllegalArgumentException.class,
            () -> {
                new GenericContainer(""alpine:3.2"")
                    .withLabel(""org.testcontainers.foo"", ""false"");
            }
        );
    }
",non-flaky,5
30925,camunda-cloud_zeebe,MsgPackWriterTest.testWriteMessage,"  @Test
  public void testWriteMessage() throws Exception {
    // given
    final MsgPackWriter writer = new MsgPackWriter();
    writer.wrap(actualValueBuffer, WRITE_OFFSET);

    final ByteArrayBuilder builder = new ByteArrayBuilder();
    expectedValueWriter.accept(builder);
    final byte[] expectedValue = builder.value;

    // when
    actualValueWriter.accept(writer);

    // then
    assertThat(writer.getOffset()).isEqualTo(WRITE_OFFSET + expectedValue.length);
    assertThatBuffer(actualValueBuffer).hasBytes(expectedValue, WRITE_OFFSET);
  }
",non-flaky,5
17,camunda-cloud_zeebe,PriorityElectionTimerTest.shouldHighPriorityNodeStartElectionFirst,"@Test
public void shouldHighPriorityNodeStartElectionFirst() {
    final AtomicBoolean highPrioElectionTriggered = spy(new AtomicBoolean());
    final AtomicBoolean lowPrioElectionTriggered = spy(new AtomicBoolean());
    final int targetPriority = 4;
    final PriorityElectionTimer timerHighPrio = new PriorityElectionTimer(Duration.ofMillis(100), threadContext, () -> highPrioElectionTriggered.set(true), log, targetPriority, targetPriority);
    final PriorityElectionTimer timerLowPrio = new PriorityElectionTimer(Duration.ofMillis(100), threadContext, () -> lowPrioElectionTriggered.set(true), log, targetPriority, 1);
    timerLowPrio.reset();
    timerHighPrio.reset();
    Awaitility.await().until(highPrioElectionTriggered::get);
    Awaitility.await().until(lowPrioElectionTriggered::get);
    final var inorder = Mockito.inOrder(highPrioElectionTriggered, lowPrioElectionTriggered);
    inorder.verify(highPrioElectionTriggered).set(true);
    inorder.verify(lowPrioElectionTriggered).set(true);
}",async wait,0
106610,Alluxio_alluxio,FuseFileInfoTest.offset,"  @Test
  public void offset() {
    FuseFileInfo jnifi = FuseFileInfo.of(ByteBuffer.allocate(256));
    ru.serce.jnrfuse.struct.FuseFileInfo jnrfi =
        ru.serce.jnrfuse.struct.FuseFileInfo.of(Pointer.wrap(Runtime.getSystemRuntime(), 0x0));
    assertEquals(jnrfi.flags.offset(), jnifi.flags.offset());
    assertEquals(jnrfi.fh.offset(), jnifi.fh.offset());
  }
",non-flaky,5
77559,dropwizard_dropwizard,OptionalIntMessageBodyWriterTest.showWithQueryParam,"    @Test
        public OptionalInt showWithQueryParam(@QueryParam(""id"") OptionalInt id) {
            return id;
        }
",non-flaky,5
84625,apache_zookeeper,ClientCnxnSocketTest.tearDown,"    @AfterEach
    public void tearDown() {
        ClientCnxnSocketNetty.clearTestAllocator();
        TestByteBufAllocator.checkForLeaks();
    }
",non-flaky,5
89277,apache_samza,TestJobsResource.testGetJobs,"  @Test
   public void testGetJobs()
      throws IOException {

    Response resp = target(""v1/jobs"").request().get();
    assertEquals(200, resp.getStatus());
    final Job[] jobs = objectMapper.readValue(resp.readEntity(String.class), Job[].class);
    assertEquals(4, jobs.length);

    assertEquals(MockJobProxy.JOB_INSTANCE_1_NAME, jobs[0].getJobName());
    assertEquals(MockJobProxy.JOB_INSTANCE_1_ID, jobs[0].getJobId());
    assertStatusNotDefault(jobs[0]);
    assertEquals(MockJobProxy.JOB_INSTANCE_2_NAME, jobs[1].getJobName());
    assertEquals(MockJobProxy.JOB_INSTANCE_2_ID, jobs[1].getJobId());
    assertStatusNotDefault(jobs[1]);
    assertEquals(MockJobProxy.JOB_INSTANCE_3_NAME, jobs[2].getJobName());
    assertEquals(MockJobProxy.JOB_INSTANCE_3_ID, jobs[2].getJobId());
    assertStatusNotDefault(jobs[2]);
    assertEquals(MockJobProxy.JOB_INSTANCE_4_NAME, jobs[3].getJobName());
    assertEquals(MockJobProxy.JOB_INSTANCE_4_ID, jobs[3].getJobId());
    assertStatusNotDefault(jobs[3]);
    resp.close();
  }
",non-flaky,5
104679,apache_pinot,RealtimeToOfflineSegmentsMinionClusterIntegrationTest.testHardcodedQueries,"  @Test(enabled = false)
  public void testHardcodedQueries() {
  }
",non-flaky,5
113737,salesforce_reactive-grpc,ReactiveClientStandardServerInteropTest.manyToOne,"    @Test
    public void manyToOne() {
        ReactorGreeterGrpc.ReactorGreeterStub stub = ReactorGreeterGrpc.newReactorStub(channel);
        Flux<String> reactorRequest = Flux.just(""A"", ""B"", ""C"");
        Mono<String> reactorResponse = reactorRequest.map(this::toRequest).as(stub::sayHelloReqStream).map(this::fromResponse);

        StepVerifier.create(reactorResponse)
                .expectNext(""Hello A and B and C"")
                .verifyComplete();
    }
",non-flaky,5
95660,togglz_togglz,TestFeatureManagerTest.shouldSupportReadingWithNamedFeature,"    @Test
    public void shouldSupportReadingWithNamedFeature() {

        // enable
        manager.enable(MyFeatures.ONE);
        assertTrue(manager.isActive(new NamedFeature(""ONE"")));

        // disable
        manager.disable(MyFeatures.ONE);
        assertFalse(manager.isActive(new NamedFeature(""ONE"")));

    }
",non-flaky,5
112162,apache_shardingsphere-elasticjob,JobConfigurationGsonTypeAdapterTest.assertFromScriptJobJson,"    @Test
    public void assertFromScriptJobJson() {
        TestJobRootConfiguration actual = GsonFactory.getGson().fromJson(
                APIJsonConstants.getScriptJobJson(ThrowJobExceptionHandler.class.getCanonicalName()), TestJobRootConfiguration.class);
        TestJobRootConfiguration expected = new TestJobRootConfiguration(new TestScriptJobConfiguration(""test.sh"", ThrowJobExceptionHandler.class).getTypeConfig());
        assertThat(GsonFactory.getGson().toJson(actual), is(GsonFactory.getGson().toJson(expected)));
    }
",non-flaky,5
95695,togglz_togglz,AnnotationFeatureGroupTest.buildWillReturnFeatureGroupWhenFeatureGroupAnnotationIsPresentForFieldLevelGroup,"    @Test
    public void buildWillReturnFeatureGroupWhenFeatureGroupAnnotationIsPresentForFieldLevelGroup() throws Exception {
        FeatureGroup result = AnnotationFeatureGroup.build(FieldLevelGroup.class);

        assertThat(result, notNullValue());
        assertThat(result.getLabel(), is(FIELD_LEVEL_GROUP_LABEL));
        assertThat(result.contains(TestFeatures.FEATURE), is(true));
    }
",non-flaky,5
156116,soot-oss_soot,AbstractLambdaMetaFactoryCGTest.lambdaWithCaptures,"  @Test
  public void lambdaWithCaptures() {
    String testClass = ""soot.lambdaMetaFactory.LambdaWithCaptures"";

    final SootMethod target
        = prepareTarget(methodSigFromComponents(testClass, TEST_METHOD_RET, TEST_METHOD_NAME), testClass);

    final CallGraph cg = Scene.v().getCallGraph();

    final String metaFactoryClass = getMetaFactoryNameLambda(testClass, TEST_METHOD_NAME);

    final SootMethod bootstrap = Scene.v().getMethod(methodSigFromComponents(metaFactoryClass, ""java.util.function.Supplier"",
        ""bootstrap$"", testClass, ""java.lang.String""));
    final SootMethod metaFactoryConstructor
        = Scene.v().getMethod(methodSigFromComponents(metaFactoryClass, ""void"", ""<init>"", testClass, ""java.lang.String""));
    final SootMethod get = Scene.v().getMethod(methodSigFromComponents(metaFactoryClass, ""java.lang.Object"", ""get""));
    final SootMethod lambdaBody
        = Scene.v().getMethod(methodSigFromComponents(testClass, ""java.lang.String"", ""lambda$main$0"", ""java.lang.String""));
    final SootMethod getString = Scene.v().getMethod(methodSigFromComponents(testClass, ""java.lang.String"", ""getString""));

    final List<Edge> edgesFromTarget = newArrayList(cg.edgesOutOf(target));

    assertTrue(""There should be an edge from main to the bootstrap method of the synthetic LambdaMetaFactory"",
        edgesFromTarget.stream().anyMatch(e -> e.tgt().equals(bootstrap) && e.isStatic()));
    assertTrue(""There should be an edge to the constructor of the LambdaMetaFactory in the bootstrap method"",
        newArrayList(cg.edgesOutOf(bootstrap)).stream()
            .anyMatch(e -> e.tgt().equals(metaFactoryConstructor) && e.isSpecial()));
    assertTrue(
        ""There should be an interface invocation on the synthetic LambdaMetaFactory's implementation of the functional interface in the main method"",
        edgesFromTarget.stream().anyMatch(e -> e.getTgt().equals(get) && e.kind() == Kind.INTERFACE));
    assertTrue(
        ""There should be a virtual call to the lambda body implementation in the generated functional interface implementation of the synthetic LambdaMetaFactory"",
        newArrayList(cg.edgesOutOf(get)).stream().anyMatch(e -> e.getTgt().equals(lambdaBody) && e.isVirtual()));

    assertTrue(""There should be a special call to the getString method in actual lambda body implementation"",
        newArrayList(cg.edgesOutOf(lambdaBody)).stream().anyMatch(e -> e.getTgt().equals(getString) && e.isSpecial()));

    validateAllBodies(target.getDeclaringClass(), bootstrap.getDeclaringClass());
  }
",non-flaky,5
89371,apache_samza,TestKafkaCheckpointManager.testReadCheckpointPriority,"  @Test
  public void testReadCheckpointPriority() throws InterruptedException {
    Config config = config(ImmutableMap.of(TaskConfig.CHECKPOINT_READ_VERSIONS, ""2,1""));
    setupSystemFactory(config);
    CheckpointV2 checkpointV2 = buildCheckpointV2(INPUT_SSP0, ""1"");
    List<IncomingMessageEnvelope> checkpointEnvelopes =
        ImmutableList.of(newCheckpointV1Envelope(TASK0, buildCheckpointV1(INPUT_SSP0, ""0""), ""0""),
            newCheckpointV2Envelope(TASK0, checkpointV2, ""1""));
    setupConsumer(checkpointEnvelopes);
    KafkaCheckpointManager kafkaCheckpointManager = buildKafkaCheckpointManager(true, config);
    kafkaCheckpointManager.register(TASK0);
    Checkpoint actualCheckpoint = kafkaCheckpointManager.readLastCheckpoint(TASK0);
    assertEquals(checkpointV2, actualCheckpoint);
  }
",non-flaky,5
159692,liquibase_liquibase,AddAutoIncrementExecuteTest.execute_intDefault,"//    @Test
//    public void execute_intDefault() throws Exception {
//        new DatabaseTestTemplate().testOnAvailableDatabases(
//                new SqlStatementDatabaseTest(null, new AddColumnStatement(null, TABLE_NAME, NEW_COLUMN_NAME, ""int"", 42)) {
//                    protected void preExecuteAssert(DatabaseSnapshotGenerator snapshot) {
//                        assertNull(snapshot.getTable(TABLE_NAME).getColumn(NEW_COLUMN_NAME));
//                    }
//
//                    protected void postExecuteAssert(DatabaseSnapshotGenerator snapshot) {
//                        Column columnSnapshot = snapshot.getTable(TABLE_NAME).getColumn(NEW_COLUMN_NAME);
//                        assertNotNull(columnSnapshot);
//                        assertEquals(NEW_COLUMN_NAME.toUpperCase(), columnSnapshot.getName().toUpperCase());
//                        if (snapshot.getDatabase() instanceof OracleDatabase) {
//                            assertEquals(""NUMBER"", columnSnapshot.getShortName().toUpperCase());
//                        } else {
//                            assertTrue(columnSnapshot.getShortName().toUpperCase().startsWith(""INT""));
//                        }
//                        assertEquals(42, ((Number) columnSnapshot.getDefaultValue()).intValue());
//
//                        assertEquals(true, columnSnapshot.isNullable());
//                    }
//
//                }
//
//        );
//    }
",non-flaky,5
112150,apache_shardingsphere-elasticjob,ShardingItemsTest.assertToItemListForDuplicated,"    @Test
    public void assertToItemListForDuplicated() {
        assertThat(ShardingItems.toItemList(""0,1,2,2""), is(Arrays.asList(0, 1, 2)));
    }
",non-flaky,5
94624,square_okhttp,InterceptorTest.intercept,"  @Test public void networkInterceptorsObserveNetworkHeaders() throws Exception {
      @Override public Response intercept(Chain chain) throws IOException {
        // The network request has everything: User-Agent, Host, Accept-Encoding.
        Request networkRequest = chain.request();
        assertNotNull(networkRequest.header(""User-Agent""));
        assertEquals(server.getHostName() + "":"" + server.getPort(),
            networkRequest.header(""Host""));
        assertNotNull(networkRequest.header(""Accept-Encoding""));

        // The network response also has everything, including the raw gzipped content.
        Response networkResponse = chain.proceed(networkRequest);
        assertEquals(""gzip"", networkResponse.header(""Content-Encoding""));
        return networkResponse;
      }
",non-flaky,5
122583,vespa-engine_vespa,EditorTest.testMissingFile,"    @Test
    public void testMissingFile() {
        LineEditor lineEditor = mock(LineEditor.class);
        when(lineEditor.onComplete()).thenReturn(List.of(""line""));

        TaskContext context = mock(TaskContext.class);
        var editor = new Editor(path.toPath(), lineEditor);
        editor.converge(context);

        assertEquals(""line\n"", path.readUtf8File());
    }
",non-flaky,5
137152,spring-projects_spring-framework,OrderSourceProviderTests.getOrder,"	@Test
		public int getOrder() {
			return order;
		}
",non-flaky,5
160436,ConsenSys_teku,StateSelectorFactoryTest.defaultStateSelector_shouldThrowBadRequestException,"  @Test
  public void defaultStateSelector_shouldThrowBadRequestException() {
    assertThrows(BadRequestException.class, () -> factory.defaultStateSelector(""a""));
  }
",non-flaky,5
97758,vojtechhabarta_typescript-generator,DefaultTypeProcessorTest.testRawTypes,"    @Test
    public void testRawTypes() {
        final String output = new TypeScriptGenerator(TestUtils.settings()).generateTypeScript(Input.from(DummyBean.class));
        Assert.assertTrue(output.contains(""rawListProperty: any[]""));
        Assert.assertTrue(output.contains(""rawMapProperty: { [index: string]: any }""));
    }
",non-flaky,5
26891,wildfly_wildfly,InMemoryNamingStoreTestCase.testLookupNameNotFound,"    @Test
    public void testLookupNameNotFound() throws Exception {
        try {
            nameStore.lookup(new CompositeName(""test""));
            fail(""Should have thrown and NameNotFoundException"");
        } catch(NameNotFoundException expected) {}
    }
",non-flaky,5
60922,apache_druid,DoubleMeanNoNullAveragerFactoryTest.testCreateAverager,"  @Test
  public void testCreateAverager()
  {
    AveragerFactory<?, ?> fac = new DoubleMeanNoNullAveragerFactory(""test"", 5, 1, ""field"");
    Assert.assertThat(fac.createAverager(), IsInstanceOf.instanceOf(DoubleMeanNoNullAverager.class));
  }
",non-flaky,5
86100,graylog2_graylog2-server,DBEventProcessorServiceTest.loadPersisted,"    @Test
    public void loadPersisted() {
        final List<EventDefinitionDto> dtos = dbService.streamAll().collect(Collectors.toList());

        assertThat(dtos).hasSize(1);

        assertThat(dtos.get(0)).satisfies(dto -> {
            assertThat(dto.id()).isNotBlank();
            assertThat(dto.title()).isEqualTo(""Test"");
            assertThat(dto.description()).isEqualTo(""A test event definition"");
            assertThat(dto.priority()).isEqualTo(2);
            assertThat(dto.keySpec()).isEqualTo(ImmutableList.of(""username""));
            assertThat(dto.fieldSpec()).isEmpty();
            assertThat(dto.notifications()).isEmpty();
            assertThat(dto.storage()).hasSize(1);

            assertThat(dto.config()).isInstanceOf(TestEventProcessorConfig.class);
            assertThat(dto.config()).satisfies(abstractConfig -> {
                final TestEventProcessorConfig config = (TestEventProcessorConfig) abstractConfig;

                assertThat(config.type()).isEqualTo(""__test_event_processor_config__"");
                assertThat(config.message()).isEqualTo(""This is a test event processor"");
            });
        });
    }
",non-flaky,5
43028,trinodb_trino,BaseDynamicPartitionPruningTest.testJoinWithEmptyBuildSide,"    @Test(timeOut = 30_000)
    public void testJoinWithEmptyBuildSide()
    {
        @Language(""SQL"") String selectQuery = ""SELECT * FROM partitioned_lineitem JOIN supplier ON partitioned_lineitem.suppkey = supplier.suppkey AND supplier.name = 'abc'"";
        ResultWithQueryId<MaterializedResult> result = getDistributedQueryRunner().executeWithQueryId(
                getSession(),
                selectQuery);
        MaterializedResult expected = computeActual(withDynamicFilteringDisabled(), selectQuery);
        assertEqualsIgnoreOrder(result.getResult(), expected);

        OperatorStats probeStats = searchScanFilterAndProjectOperatorStats(result.getQueryId(), getQualifiedTableName(PARTITIONED_LINEITEM));
        assertEquals(probeStats.getInputPositions(), 0L);

        DynamicFiltersStats dynamicFiltersStats = getDynamicFilteringStats(result.getQueryId());
        assertEquals(dynamicFiltersStats.getTotalDynamicFilters(), 1L);
        assertEquals(dynamicFiltersStats.getLazyDynamicFilters(), 1L);
        assertEquals(dynamicFiltersStats.getReplicatedDynamicFilters(), 0L);
        assertEquals(dynamicFiltersStats.getDynamicFiltersCompleted(), 1L);

        DynamicFilterDomainStats domainStats = getOnlyElement(dynamicFiltersStats.getDynamicFilterDomainStats());
        assertEquals(domainStats.getSimplifiedDomain(), none(BIGINT).toString(getSession().toConnectorSession()));
        assertTrue(domainStats.getCollectionDuration().isPresent());
    }
",non-flaky,5
170527,eclipse_jetty.project,TestAnnotationConfiguration.testDiscoveredTrueWithSCIs,"    @Test
    public void testDiscoveredTrueWithSCIs() throws Exception
    {
        ClassLoader old = Thread.currentThread().getContextClassLoader();
        Thread.currentThread().setContextClassLoader(webAppLoader);
        try
        {
            //test 2.5 webapp with configurationDiscovered=true loads both server and webapp scis
            AnnotationConfiguration config = new AnnotationConfiguration();
            WebAppContext context = new WebAppContext();
            List<ServletContainerInitializer> scis;
            context.setConfigurationDiscovered(true);
            context.setClassLoader(webAppLoader);
            context.getMetaData().setWebDescriptor(new WebDescriptor(Resource.newResource(web25)));
            context.getMetaData().setWebInfClassesResources(classes);
            context.getMetaData().addWebInfResource(Resource.newResource(testSciJar.toURI().toURL()));
            context.getServletContext().setEffectiveMajorVersion(2);
            context.getServletContext().setEffectiveMinorVersion(5);
            scis = config.getNonExcludedInitializers(context);
            assertNotNull(scis);
            assertEquals(3, scis.size());
            assertEquals(""com.acme.ServerServletContainerInitializer"", scis.get(0).getClass().getName()); //container path
            assertEquals(""com.acme.webinf.WebInfClassServletContainerInitializer"", scis.get(1).getClass().getName()); // web-inf
            assertEquals(""com.acme.initializer.FooInitializer"", scis.get(2).getClass().getName()); //web-inf jar no web-fragment
        }
        finally
        {
            Thread.currentThread().setContextClassLoader(old);
        }
    }
",non-flaky,5
118722,netty_netty,DetectPeerCloseWithoutReadTest.clientCloseWithoutServerReadIsDetectedExtraReadRequested,"    @Test(timeout = 10000)
    public void clientCloseWithoutServerReadIsDetectedExtraReadRequested() throws InterruptedException {
        clientCloseWithoutServerReadIsDetected0(true);
    }
",non-flaky,5
20916,NationalSecurityAgency_timely,MetricHistogramTest.test50thPercentile,"    @Test
    public void test50thPercentile() throws Exception {
        Assert.assertEquals(50.0D, m.getPercentile(50), 0.0D);
    }
",non-flaky,5
19436,eclipse_xtext-core,XtextValidationTest.testBug_280413_03,"	@Test
	public void testBug_280413_03() throws Exception {
		XtextResource resource = getResourceFromString(
				""grammar org.foo.Bar with org.eclipse.xtext.common.Terminals\n"" +
				""import 'classpath:/org/eclipse/xtext/Xtext.ecore' as xtext\n"" +
				""ParserRule returns xtext::ParserRule: name = ID;"");
		assertTrue(resource.getErrors().toString(), resource.getErrors().isEmpty());
		assertTrue(resource.getWarnings().toString(), resource.getWarnings().isEmpty());

		Diagnostic diag = Diagnostician.INSTANCE.validate(resource.getContents().get(0));
		assertNotNull(""diag"", diag);
		assertEquals(diag.getSeverity(), Diagnostic.OK);
		assertTrue(diag.getChildren().toString(), diag.getChildren().isEmpty());
	}
",non-flaky,5
178006,aosp-mirror_platform_frameworks_support,BrowseSupportFragmentTest.run,"    @Test
    public void activityRecreate_notCrash() throws Throwable {
        final long dataLoadingDelay = 1000;
        Intent intent = new Intent();
        intent.putExtra(BrowseSupportFragmentTestActivity.EXTRA_LOAD_DATA_DELAY, dataLoadingDelay);
        intent.putExtra(BrowseSupportFragmentTestActivity.EXTRA_ADD_TO_BACKSTACK , false);
        intent.putExtra(BrowseSupportFragmentTestActivity.EXTRA_SET_ADAPTER_AFTER_DATA_LOAD, true);
        mActivity = activityTestRule.launchActivity(intent);

        Thread.sleep(dataLoadingDelay + TRANSITION_LENGTH);

        InstrumentationRegistry.getInstrumentation().callActivityOnRestart(mActivity);
        activityTestRule.runOnUiThread(new Runnable() {
            @Override
            public void run() {
                mActivity.recreate();
            }
",non-flaky,5
98051,vert-x3_vertx-mongo-client,GridFsTest.testFindWithMetadata,"  @Test
  public void testFindWithMetadata() {
    String fileName = createTempFileWithContent((1024 * 3) + 70);

    AtomicReference<MongoGridFsClient> gridFsClient = new AtomicReference<>();

    Promise<MongoGridFsClient> gridFsClientPromise = Promise.promise();

    JsonObject meta = new JsonObject();
    meta.put(""nick_name"", ""Puhi the eel"");

    GridFsUploadOptions options = new GridFsUploadOptions();
    options.setMetadata(meta);

    mongoClient.createGridFsBucketService(""fs"", gridFsClientPromise);

    gridFsClientPromise.future().compose(mongoGridFsClient -> {
      assertNotNull(mongoGridFsClient);
      gridFsClient.set(mongoGridFsClient);
      Promise<Void> dropPromise = Promise.promise();
      mongoGridFsClient.drop(dropPromise);
      return dropPromise.future();
    }).compose(dropped -> {
      Promise<String> uploadPromise = Promise.promise();
      gridFsClient.get().uploadFileWithOptions(fileName, options, uploadPromise);
      return uploadPromise.future();
    }).compose(id -> {
      assertNotNull(id);
      Promise<List<String>> findPromise = Promise.promise();
      JsonObject query = new JsonObject().put(""metadata.nick_name"", ""Puhi the eel"");
      gridFsClient.get().findIds(query, findPromise);
      return findPromise.future();
    }).compose(list -> {
      assertTrue(list.size() > 0);
      testComplete();
      return Future.succeededFuture();
    }).onComplete(event -> {
      if (event.failed()) {
        fail(event.cause());
      }
    });
    await();
  }
",non-flaky,5
135794,Netflix_Hystrix,CumulativeCollapserEventCounterStreamTest.testEmptyStreamProducesZeros,"    @Test
    public void testEmptyStreamProducesZeros() {
        HystrixCollapserKey key = HystrixCollapserKey.Factory.asKey(""CumulativeCollapser-A"");
        stream = CumulativeCollapserEventCounterStream.getInstance(key, 10, 100);
        stream.startCachingStreamValuesIfUnstarted();

        final CountDownLatch latch = new CountDownLatch(1);
        stream.observe().take(10).subscribe(getSubscriber(latch));

        //no writes

        try {
            assertTrue(latch.await(10000, TimeUnit.MILLISECONDS));
        } catch (InterruptedException ex) {
            fail(""Interrupted ex"");
        }
        System.out.println(""ReqLog : "" + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());
        assertEquals(HystrixEventType.Collapser.values().length, stream.getLatest().length);
        assertEquals(0, stream.getLatest(HystrixEventType.Collapser.ADDED_TO_BATCH));
        assertEquals(0, stream.getLatest(HystrixEventType.Collapser.BATCH_EXECUTED));
        assertEquals(0, stream.getLatest(HystrixEventType.Collapser.RESPONSE_FROM_CACHE));
    }
",non-flaky,5
86076,graylog2_graylog2-server,PivotAggregationSearchTest.testExtractValuesWithNullValues,"    @Test
    public void testExtractValuesWithNullValues() throws Exception {
        final AbsoluteRange timerange = AbsoluteRange.create(DateTime.now(DateTimeZone.UTC).minusSeconds(3600), DateTime.now(DateTimeZone.UTC));
        final AggregationSeries seriesCount = AggregationSeries.create(""abc123"", AggregationFunction.COUNT, ""source"");
        final AggregationSeries seriesAvg = AggregationSeries.create(""abc123"", AggregationFunction.AVG, ""some_field"");
        final AggregationEventProcessorConfig config = AggregationEventProcessorConfig.builder()
                .query("""")
                .streams(Collections.emptySet())
                .groupBy(Collections.emptyList())
                .series(ImmutableList.of(seriesCount, seriesAvg))
                .conditions(null)
                .searchWithinMs(30000)
                .executeEveryMs(30000)
                .build();
        final AggregationEventProcessorParameters parameters = AggregationEventProcessorParameters.builder()
                .streams(Collections.emptySet())
                .timerange(timerange)
                .batchSize(500)
                .build();

        final PivotAggregationSearch pivotAggregationSearch = new PivotAggregationSearch(
                config,
                parameters,
                ""test"",
                eventDefinition,
                searchJobService,
                queryEngine,
                EventsConfigurationTestProvider.create(),
                moreSearch,
                permittedStreams);

        final PivotResult pivotResult = PivotResult.builder()
                .id(""test"")
                .effectiveTimerange(timerange)
                .total(1)
                .addRow(PivotResult.Row.builder()
                        .key(ImmutableList.of(timerange.getTo().toString()))
                        .addValue(PivotResult.Value.create(ImmutableList.of(""metric/count/source/abc123""), 42, true, ""row-leaf""))
                        // A ""null"" value can happen with some Elasticsearch aggregations (e.g. avg on a non-existent field)
                        .addValue(PivotResult.Value.create(ImmutableList.of(""metric/avg/some_field/abc123""), null, true, ""row-leaf""))
                        .source(""leaf"")
                        .build())
                .build();

        final ImmutableList<AggregationKeyResult> results = pivotAggregationSearch.extractValues(pivotResult);

        assertThat(results.size()).isEqualTo(1);

        assertThat(results.get(0)).isEqualTo(AggregationKeyResult.builder()
                .key(ImmutableList.of())
                .timestamp(timerange.getTo())
                .seriesValues(ImmutableList.of(
                        AggregationSeriesValue.builder()
                                .key(ImmutableList.of())
                                .value(42.0)
                                .series(seriesCount)
                                .build(),
                        AggregationSeriesValue.builder()
                                .key(ImmutableList.of())
                                .value(Double.NaN) // For ""null"" we expect NaN
                                .series(seriesAvg)
                                .build()
                ))
                .build());
    }
",non-flaky,5
43117,trinodb_trino,BaseConnectorSmokeTest.testCreateTable,"    @Test
    public void testCreateTable()
    {
        if (!hasBehavior(SUPPORTS_CREATE_TABLE)) {
            assertQueryFails(""CREATE TABLE xxxx (a bigint, b double)"", ""This connector does not support creating tables"");
            return;
        }

        String tableName = ""test_create_"" + randomTableSuffix();
        assertUpdate(""CREATE TABLE "" + tableName + "" (a bigint, b double)"");
        assertThat(query(""SELECT a, b FROM "" + tableName))
                .returnsEmptyResult();
        assertUpdate(""DROP TABLE "" + tableName);
    }
",non-flaky,5
86048,graylog2_graylog2-server,EventProcessorDependencyCheckTest.hasMessagesIndexedUpTo,"    @Test
    public void hasMessagesIndexedUpTo() {
        final DateTime timestamp = DateTime.now(DateTimeZone.UTC);

        when(dbProcessingStatusService.earliestPostIndexingTimestamp()).thenReturn(Optional.of(timestamp));

        assertThat(dependencyCheck.hasMessagesIndexedUpTo(timestamp)).isTrue();
        assertThat(dependencyCheck.hasMessagesIndexedUpTo(timestamp.minusHours(1))).isTrue();
        assertThat(dependencyCheck.hasMessagesIndexedUpTo(timestamp.plusHours(1))).isFalse();

        // The method should always return false if there is no value for the max indexed timestamp available
        when(dbProcessingStatusService.earliestPostIndexingTimestamp()).thenReturn(Optional.empty());

        assertThat(dependencyCheck.hasMessagesIndexedUpTo(timestamp)).isFalse();
        assertThat(dependencyCheck.hasMessagesIndexedUpTo(timestamp.minusHours(1))).isFalse();
        assertThat(dependencyCheck.hasMessagesIndexedUpTo(timestamp.plusHours(1))).isFalse();
    }
",non-flaky,5
89361,apache_samza,TestKafkaCheckpointManager.testStart,"  @Test
  public void testStart() {
    setupSystemFactory(config());
    String oldestOffset = ""1"";
    String newestOffset = ""2"";
    SystemStreamMetadata checkpointTopicMetadata = new SystemStreamMetadata(CHECKPOINT_TOPIC,
        ImmutableMap.of(new Partition(0), new SystemStreamPartitionMetadata(oldestOffset, newestOffset,
            Integer.toString(Integer.parseInt(newestOffset) + 1))));
    when(this.systemAdmin.getSystemStreamMetadata(Collections.singleton(CHECKPOINT_TOPIC))).thenReturn(
        ImmutableMap.of(CHECKPOINT_TOPIC, checkpointTopicMetadata));

    KafkaCheckpointManager checkpointManager = buildKafkaCheckpointManager(true, config());

    checkpointManager.start();

    verify(this.systemProducer).start();
    verify(this.systemAdmin).start();
    verify(this.systemConsumer).register(CHECKPOINT_SSP, oldestOffset);
    verify(this.systemConsumer).start();
  }
",non-flaky,5
76985,Tencent_Firestorm,RepartitionTest.testMemoryRelease,"  @Test
  public void testMemoryRelease() throws Exception {
    String fileName = generateTextFile(10000, 10000);
    SparkConf sparkConf = createSparkConf();
    updateSparkConfWithRss(sparkConf);
    sparkConf.set(""spark.executor.memory"", ""500m"");
    updateRssStorage(sparkConf);

    // oom if there has no memory release
    runSparkApp(sparkConf, fileName);
  }
",non-flaky,5
26718,MundaneImmortal_pair-distribution-app,PairTest.testIsCommunityPairTrue,"	@Test
	public void testIsCommunityPairTrue()  {
		Pair subject = new Pair();
		
		subject.setCommunityPair(true);
		
		assertThat(subject.isCommunityPair(), is(true));
	}
",non-flaky,5
76677,quarkusio_quarkus,CustomAuthEmbeddedBase.testSecureAccessSuccess,"    @Test()
    public void testSecureAccessSuccess() {
        RestAssured.given().auth().preemptive().basic(""stuart"", ""test"")
                .when().get(""/secure-test"").then()
                .statusCode(200);
    }
",non-flaky,5
289,apache_hadoop,TestWrites.testCheckCommit,"  @Test
  public void testCheckCommit() throws IOException {
    DFSClient dfsClient = Mockito.mock(DFSClient.class);
    Nfs3FileAttributes attr = new Nfs3FileAttributes();
    HdfsDataOutputStream fos = Mockito.mock(HdfsDataOutputStream.class);
    Mockito.when(fos.getPos()).thenReturn((long) 0);

    NfsConfiguration conf = new NfsConfiguration();
    conf.setBoolean(NfsConfigKeys.LARGE_FILE_UPLOAD, false);
    OpenFileCtx ctx = new OpenFileCtx(fos, attr, ""/dumpFilePath"", dfsClient,
        new ShellBasedIdMapping(conf), false, conf);

    COMMIT_STATUS ret;

    // Test inactive open file context
    ctx.setActiveStatusForTest(false);
    Channel ch = Mockito.mock(Channel.class);
    ret = ctx.checkCommit(dfsClient, 0, ch, 1, attr, false);
    Assert.assertTrue(ret == COMMIT_STATUS.COMMIT_INACTIVE_CTX);

    ctx.getPendingWritesForTest().put(new OffsetRange(5, 10),
        new WriteCtx(null, 0, 0, 0, null, null, null, 0, false, null));
    ret = ctx.checkCommit(dfsClient, 0, ch, 1, attr, false);
    Assert.assertTrue(ret == COMMIT_STATUS.COMMIT_INACTIVE_WITH_PENDING_WRITE);

    // Test request with non zero commit offset
    ctx.setActiveStatusForTest(true);
    Mockito.when(fos.getPos()).thenReturn((long) 10);
    ctx.setNextOffsetForTest(10);
    COMMIT_STATUS status = ctx.checkCommitInternal(5, null, 1, attr, false);
    Assert.assertTrue(status == COMMIT_STATUS.COMMIT_DO_SYNC);
    // Do_SYNC state will be updated to FINISHED after data sync
    ret = ctx.checkCommit(dfsClient, 5, ch, 1, attr, false);
    Assert.assertTrue(ret == COMMIT_STATUS.COMMIT_FINISHED);
    
    status = ctx.checkCommitInternal(10, ch, 1, attr, false);
    Assert.assertTrue(status == COMMIT_STATUS.COMMIT_DO_SYNC);
    ret = ctx.checkCommit(dfsClient, 10, ch, 1, attr, false);
    Assert.assertTrue(ret == COMMIT_STATUS.COMMIT_FINISHED);

    ConcurrentNavigableMap<Long, CommitCtx> commits = ctx
        .getPendingCommitsForTest();
    Assert.assertTrue(commits.size() == 0);
    ret = ctx.checkCommit(dfsClient, 11, ch, 1, attr, false);
    Assert.assertTrue(ret == COMMIT_STATUS.COMMIT_WAIT);
    Assert.assertTrue(commits.size() == 1);
    long key = commits.firstKey();
    Assert.assertTrue(key == 11);

    // Test request with zero commit offset
    commits.remove(new Long(11));
    // There is one pending write [5,10]
    ret = ctx.checkCommit(dfsClient, 0, ch, 1, attr, false);
    Assert.assertTrue(ret == COMMIT_STATUS.COMMIT_WAIT);
    Assert.assertTrue(commits.size() == 1);
    key = commits.firstKey();
    Assert.assertTrue(key == 9);

    // Empty pending writes
    ctx.getPendingWritesForTest().remove(new OffsetRange(5, 10));
    ret = ctx.checkCommit(dfsClient, 0, ch, 1, attr, false);
    Assert.assertTrue(ret == COMMIT_STATUS.COMMIT_FINISHED);
  }
",non-flaky,5
20940,NationalSecurityAgency_timely,AuthenticationServiceTest.testX509AuthenticationLogin,"    @Test
    public void testX509AuthenticationLogin() {
        PreAuthenticatedAuthenticationToken token = new PreAuthenticatedAuthenticationToken(""example.com"",
                ""doesn't matter what I put here"");
        Authentication auth = AuthenticationService.getAuthenticationManager().authenticate(token);
        Collection<? extends GrantedAuthority> authorizations = auth.getAuthorities();
        authorizations.forEach(a -> {
            Assert.assertTrue(
                    a.getAuthority().equals(""D"") || a.getAuthority().equals(""E"") || a.getAuthority().equals(""F""));
        });
    }
",non-flaky,5
177165,line_armeria,SamlRequestIdManagerTest.shouldFail,"    @Test
    public void shouldFail() {
        assertThatThrownBy(() -> SamlRequestIdManager.ofJwt(""me"", ""test"", 0, 0))
                .isInstanceOf(IllegalArgumentException.class);
        assertThatThrownBy(() -> SamlRequestIdManager.ofJwt(""me"", ""test"", -1, 0))
                .isInstanceOf(IllegalArgumentException.class);
        assertThatThrownBy(() -> SamlRequestIdManager.ofJwt(""me"", ""test"", 1, -1))
                .isInstanceOf(IllegalArgumentException.class);
    }
",non-flaky,5
122600,vespa-engine_vespa,FileWriterTest.testAtomicWrite,"    @Test
    public void testAtomicWrite() {
        FileWriter writer = new FileWriter(fileSystem.getPath(""/foo/bar""))
                .atomicWrite(true);

        assertTrue(writer.converge(context, ""content""));

        verify(context).recordSystemModification(any(), eq(""Creating file /foo/bar""));
        assertEquals(""content"", new UnixPath(writer.path()).readUtf8File());
    }
",non-flaky,5
104673,apache_pinot,RealtimeToOfflineSegmentsMinionClusterIntegrationTest.testBrokerDebugOutput,"  @Test(enabled = false)
  public void testBrokerDebugOutput() {
  }
",non-flaky,5
19506,eclipse_xtext-core,TraceRegionTest.testLeafIterator_OneChild,"	@Test
	public void testLeafIterator_OneChild() {
		TraceRegion parent = new TraceRegion(0, 1, 1, 2, true, 2, 3, 0, 0, null, newURI());
		TraceRegion region = new TraceRegion(0, 1, 1, 2, true, 2, 3, 0, 0, parent, null);
		Iterator<AbstractTraceRegion> iter = parent.leafIterator();
		assertEquals(Collections.singleton(region).iterator(), iter);
	}
",non-flaky,5
135060,undertow-io_undertow,PathMatcherTestCase.testSimpleDefaultCase,"    @Test
    public void testSimpleDefaultCase() {

        PathMatcher<String> pathMatcher = new PathMatcher<>();

        pathMatcher.addPrefixPath(""/"", ""default"");
        Assert.assertEquals(""default"", pathMatcher.getPrefixPath(""/""));
        Assert.assertEquals(""default"", pathMatcher.match(""/"").getValue());

        pathMatcher.addPrefixPath(""//////"", ""needs normalize default"");
        Assert.assertEquals(""needs normalize default"", pathMatcher.getPrefixPath(""/""));
        Assert.assertEquals(""needs normalize default"", pathMatcher.match(""/"").getValue());

        pathMatcher.clearPaths();
        Assert.assertNull(pathMatcher.getPrefixPath(""/""));
    }
",non-flaky,5
97739,vojtechhabarta_typescript-generator,DuplicatePropertyTest.testJacksonDuplicateProperty,"    @Test
    public void testJacksonDuplicateProperty() throws JsonProcessingException {
        final DuplicateKind1 object = new DuplicateKind1();
        object.kind = ""kind_invalid"";
        final String json = new ObjectMapper().writeValueAsString(object);
        // {""kind"":""kind_1"",""kind"":""kind_invalid""}
        Assert.assertTrue(json.contains(""\""kind\"":\""kind_1\""""));
        Assert.assertTrue(json.contains(""\""kind\"":\""kind_invalid\""""));
    }
",non-flaky,5
175787,GoogleCloudPlatform_google-cloud-eclipse,AppEngineApplicationQueryJobTest.testRun_projectHasNoApplication,"  @Test
  public void testRun_projectHasNoApplication()
      throws ProjectRepositoryException, InterruptedException {
    when(projectRepository.getAppEngineApplication(credential, ""projectId""))
        .thenReturn(AppEngine.NO_APPENGINE_APPLICATION);
    assertNull(project.getAppEngine());

    queryJob.schedule();
    queryJob.join();

    verify(projectRepository).getAppEngineApplication(credential, ""projectId"");
    verify(isLatestQueryJob).apply(queryJob);
    verify(projectSelector).isDisposed();
    verify(projectSelection).isEmpty();
    verify(projectSelector).setStatusLink(EXPECTED_MESSAGE_WHEN_NO_APPLICATION, EXPECTED_LINK);

    assertEquals(AppEngine.NO_APPENGINE_APPLICATION, project.getAppEngine());
  }
",non-flaky,5
137082,spring-projects_spring-framework,AbstractAnnotationMetadataTests.isAnnotationWhenNotAnnotationReturnsFalse,"	@Test
	public void isAnnotationWhenNotAnnotationReturnsFalse() {
		assertThat(get(TestClass.class).isAnnotation()).isFalse();
		assertThat(get(TestInterface.class).isAnnotation()).isFalse();
	}
",non-flaky,5
20959,NationalSecurityAgency_timely,MetricAgeOffFilterTest.testMixed,"    @Test
    public void testMixed() throws Exception {
        MetricAgeOffFilter filter = new MetricAgeOffFilter();
        HashMap<String, String> options = new HashMap<>();
        options.put(MetricAgeOffFilter.AGE_OFF_PREFIX + ""default"", Integer.toString(1 * ONE_DAY));
        filter.init(null, options, null);
        assertTrue(filter.accept(new Key(MetricAdapter.encodeRowKey(""sys.cpu.idle"", TEST_TIME), new byte[0],
                new byte[0], new byte[0], TEST_TIME), null));
        assertTrue(filter.accept(new Key(MetricAdapter.encodeRowKey(""sys.cpu.idle"", TEST_TIME + 1), new byte[0],
                new byte[0], new byte[0], TEST_TIME + 1), null));
        assertTrue(filter.accept(new Key(MetricAdapter.encodeRowKey(""sys.cpu.idle"", TEST_TIME + 2), new byte[0],
                new byte[0], new byte[0], TEST_TIME + 2), null));
        assertTrue(filter.accept(new Key(MetricAdapter.encodeRowKey(""sys.cpu.idle"", TEST_TIME + 3), new byte[0],
                new byte[0], new byte[0], TEST_TIME + 3), null));
        assertTrue(filter.accept(new Key(MetricAdapter.encodeRowKey(""sys.cpu.idle"", TEST_TIME + 4), new byte[0],
                new byte[0], new byte[0], TEST_TIME + 4), null));
        assertTrue(filter.accept(new Key(MetricAdapter.encodeRowKey(""sys.cpu.idle"", TEST_TIME + 5), new byte[0],
                new byte[0], new byte[0], TEST_TIME + 5), null));
        assertTrue(filter.accept(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME), new byte[0],
                new byte[0], new byte[0], TEST_TIME), null));
        assertTrue(filter.accept(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME + 1), new byte[0],
                new byte[0], new byte[0], TEST_TIME + 1), null));
        assertTrue(filter.accept(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME + 2), new byte[0],
                new byte[0], new byte[0], TEST_TIME + 2), null));
        assertTrue(filter.accept(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME + 3), new byte[0],
                new byte[0], new byte[0], TEST_TIME + 3), null));
        assertTrue(filter.accept(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME + 4), new byte[0],
                new byte[0], new byte[0], TEST_TIME + 4), null));
        assertTrue(filter.accept(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME + 5), new byte[0],
                new byte[0], new byte[0], TEST_TIME + 5), null));
    }
",non-flaky,5
59612,looly_hutool,AviatorTest.simpleTest,"	@Test
	public void simpleTest(){
		Foo foo = new Foo(100, 3.14f, new Date());
		ExpressionEngine engine = new AviatorEngine();
		String exp =
				""\""[foo i=\""+ foo.i + \"", f=\"" + foo.f + \"", date.year=\"" + (foo.date.year+1900) + \"", date.month=\"" + foo.date.month + \"", bars[0].name=\"" + #foo.bars[0].name + \""]\"""";
		String result = (String) engine.eval(exp, Dict.create().set(""foo"", foo));
		Assert.assertEquals(""[foo i=100, f=3.14, date.year=2020, date.month=10, bars[0].name=bar]"", result);

		// Assignment.
		exp = ""#foo.bars[0].name='hello aviator' ; #foo.bars[0].name"";
		result = (String) engine.eval(exp, Dict.create().set(""foo"", foo));
		Assert.assertEquals(""hello aviator"", result);
		Assert.assertEquals(""hello aviator"", foo.bars[0].getName());

		exp = ""foo.bars[0] = nil ; foo.bars[0]"";
		result = (String) engine.eval(exp, Dict.create().set(""foo"", foo));
		Console.log(""Execute expression: "" + exp);
		Assert.assertNull(result);
		Assert.assertNull(foo.bars[0]);
	}
",non-flaky,5
156469,apache_commons-lang,DateUtilsFragmentTest.testMinutesOfMonthWithDate,"    @Test
    public void testMinutesOfMonthWithDate() {
        final long testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.MONTH);
        assertEquals(minutes
                                + ((hours * DateUtils.MILLIS_PER_HOUR) + ((days - 1) * DateUtils.MILLIS_PER_DAY))
                        / DateUtils.MILLIS_PER_MINUTE,
                testResult);
    }
",non-flaky,5
26903,wildfly_wildfly,InMemoryNamingStoreTestCase.testListBindings,"    @Test
    public void testListBindings() throws Exception {
        final Name name = new CompositeName(""test"");
        final Object object = new Object();
        nameStore.bind(name, object);
        final Name nameTwo = new CompositeName(""testTwo"");
        final Object objectTwo = new Object();
        nameStore.bind(nameTwo, objectTwo);
        final Name nameThree = new CompositeName(""testThree"");
        final Object objectThree = new Object();
        nameStore.bind(nameThree, objectThree);

        nameStore.bind(new CompositeName(""testContext/test""), ""test"");

        final List<Binding> results = nameStore.listBindings(new CompositeName());
        assertEquals(4, results.size());
        final Set<String> expected = new HashSet<String>(Arrays.asList(""test"", ""testTwo"", ""testThree"", ""testContext""));
        for(Binding result : results) {
            final String resultName = result.getName();
            if(""test"".equals(resultName)) {
                assertEquals(Object.class.getName(), result.getClassName());
                assertEquals(object, result.getObject());
            } else if(""testTwo"".equals(resultName)) {
                assertEquals(Object.class.getName(), result.getClassName());
                assertEquals(objectTwo, result.getObject());
            } else if(""testThree"".equals(resultName)) {
                assertEquals(Object.class.getName(), result.getClassName());
                assertEquals(objectThree, result.getObject());
            } else if(""testContext"".equals(resultName)) {
                assertEquals(Context.class.getName(), result.getClassName());
            } else {
                fail(""Unknown result name: "" + resultName);
            }
            expected.remove(resultName);
        }
        assertTrue(""Not all expected results were returned"", expected.isEmpty());
    }
",non-flaky,5
104611,apache_pinot,SegmentPartitionLLCRealtimeClusterIntegrationTest.testPartitionMetadata,"  @Test
  public void testPartitionMetadata() {
    int[] numSegmentsForPartition = new int[2];
    String realtimeTableName = TableNameBuilder.REALTIME.tableNameWithType(getTableName());
    List<SegmentZKMetadata> segmentsZKMetadata = _helixResourceManager.getSegmentsZKMetadata(realtimeTableName);
    for (SegmentZKMetadata segmentZKMetadata : segmentsZKMetadata) {
      SegmentPartitionMetadata segmentPartitionMetadata = segmentZKMetadata.getPartitionMetadata();
      assertNotNull(segmentPartitionMetadata);
      Map<String, ColumnPartitionMetadata> columnPartitionMetadataMap =
          segmentPartitionMetadata.getColumnPartitionMap();
      assertEquals(columnPartitionMetadataMap.size(), 1);
      ColumnPartitionMetadata columnPartitionMetadata = columnPartitionMetadataMap.get(PARTITION_COLUMN);
      assertNotNull(columnPartitionMetadata);
      assertTrue(columnPartitionMetadata.getFunctionName().equalsIgnoreCase(""murmur""));
      assertEquals(columnPartitionMetadata.getNumPartitions(), 2);
      int partitionGroupId = new LLCSegmentName(segmentZKMetadata.getSegmentName()).getPartitionGroupId();
      assertEquals(columnPartitionMetadata.getPartitions(), Collections.singleton(partitionGroupId));
      numSegmentsForPartition[partitionGroupId]++;
    }

    // There should be 2 segments for partition 0, 2 segments for partition 1
    assertEquals(numSegmentsForPartition[0], 2);
    assertEquals(numSegmentsForPartition[1], 2);
  }
",non-flaky,5
118685,netty_netty,XmlDecoderTest.shouldDecodeRequestWithSimpleXml,"    @Test
    public void shouldDecodeRequestWithSimpleXml() {
        Object temp;

        write(XML1);

        temp = channel.readInbound();
        assertThat(temp, instanceOf(XmlDocumentStart.class));
        assertThat(((XmlDocumentStart) temp).version(), is(""1.0""));
        assertThat(((XmlDocumentStart) temp).encoding(), is(""UTF-8""));
        assertThat(((XmlDocumentStart) temp).standalone(), is(false));
        assertThat(((XmlDocumentStart) temp).encodingScheme(), is(nullValue()));

        temp = channel.readInbound();
        assertThat(temp, instanceOf(XmlDTD.class));
        assertThat(((XmlDTD) temp).text(), is(""employee.dtd""));

        temp = channel.readInbound();
        assertThat(temp, instanceOf(XmlProcessingInstruction.class));
        assertThat(((XmlProcessingInstruction) temp).target(), is(""xml-stylesheet""));
        assertThat(((XmlProcessingInstruction) temp).data(), is(""type=\""text/css\"" href=\""netty.css\""""));

        temp = channel.readInbound();
        assertThat(temp, instanceOf(XmlProcessingInstruction.class));
        assertThat(((XmlProcessingInstruction) temp).target(), is(""xml-test""));
        assertThat(((XmlProcessingInstruction) temp).data(), is(""""));

        temp = channel.readInbound();
        assertThat(temp, instanceOf(XmlElementStart.class));
        assertThat(((XmlElementStart) temp).name(), is(""employee""));
        assertThat(((XmlElementStart) temp).prefix(), is(""""));
        assertThat(((XmlElementStart) temp).namespace(), is(""""));
        assertThat(((XmlElementStart) temp).attributes().size(), is(0));
        assertThat(((XmlElementStart) temp).namespaces().size(), is(1));
        assertThat(((XmlElementStart) temp).namespaces().get(0).prefix(), is(""nettya""));
        assertThat(((XmlElementStart) temp).namespaces().get(0).uri(), is(""http://netty.io/netty/a""));

        temp = channel.readInbound();
        assertThat(temp, instanceOf(XmlElementStart.class));
        assertThat(((XmlElementStart) temp).name(), is(""id""));
        assertThat(((XmlElementStart) temp).prefix(), is(""nettya""));
        assertThat(((XmlElementStart) temp).namespace(), is(""http://netty.io/netty/a""));
        assertThat(((XmlElementStart) temp).attributes().size(), is(0));
        assertThat(((XmlElementStart) temp).namespaces().size(), is(0));

        temp = channel.readInbound();
        assertThat(temp, instanceOf(XmlEntityReference.class));
        assertThat(((XmlEntityReference) temp).name(), is(""plusmn""));
        assertThat(((XmlEntityReference) temp).text(), is(""""));

        temp = channel.readInbound();
        assertThat(temp, instanceOf(XmlCharacters.class));
        assertThat(((XmlCharacters) temp).data(), is(""1""));

        temp = channel.readInbound();
        assertThat(temp, instanceOf(XmlElementEnd.class));
        assertThat(((XmlElementEnd) temp).name(), is(""id""));
        assertThat(((XmlElementEnd) temp).prefix(), is(""nettya""));
        assertThat(((XmlElementEnd) temp).namespace(), is(""http://netty.io/netty/a""));

        temp = channel.readInbound();
        assertThat(temp, instanceOf(XmlCharacters.class));
        assertThat(((XmlCharacters) temp).data(), is(""\n""));

        temp = channel.readInbound();
        assertThat(temp, nullValue());

        write(XML2);

        temp = channel.readInbound();
        assertThat(temp, instanceOf(XmlElementStart.class));
        assertThat(((XmlElementStart) temp).name(), is(""name""));
        assertThat(((XmlElementStart) temp).prefix(), is(""""));
        assertThat(((XmlElementStart) temp).namespace(), is(""""));
        assertThat(((XmlElementStart) temp).attributes().size(), is(1));
        assertThat(((XmlElementStart) temp).attributes().get(0).name(), is(""type""));
        assertThat(((XmlElementStart) temp).attributes().get(0).value(), is(""given""));
        assertThat(((XmlElementStart) temp).attributes().get(0).prefix(), is(""""));
        assertThat(((XmlElementStart) temp).attributes().get(0).namespace(), is(""""));
        assertThat(((XmlElementStart) temp).namespaces().size(), is(0));

        temp = channel.readInbound();
        assertThat(temp, instanceOf(XmlCharacters.class));
        assertThat(((XmlCharacters) temp).data(), is(""Alba""));

        temp = channel.readInbound();
        assertThat(temp, instanceOf(XmlElementEnd.class));
        assertThat(((XmlElementEnd) temp).name(), is(""name""));
        assertThat(((XmlElementEnd) temp).prefix(), is(""""));
        assertThat(((XmlElementEnd) temp).namespace(), is(""""));

        temp = channel.readInbound();
        assertThat(temp, instanceOf(XmlCdata.class));
        assertThat(((XmlCdata) temp).data(), is("" <some data &gt;/> ""));

        temp = channel.readInbound();
        assertThat(temp, instanceOf(XmlCharacters.class));
        assertThat(((XmlCharacters) temp).data(), is(""   ""));

        temp = channel.readInbound();
        assertThat(temp, instanceOf(XmlComment.class));
        assertThat(((XmlComment) temp).data(), is("" namespaced ""));

        temp = channel.readInbound();
        assertThat(temp, instanceOf(XmlElementStart.class));
        assertThat(((XmlElementStart) temp).name(), is(""salary""));
        assertThat(((XmlElementStart) temp).prefix(), is(""nettyb""));
        assertThat(((XmlElementStart) temp).namespace(), is(""http://netty.io/netty/b""));
        assertThat(((XmlElementStart) temp).attributes().size(), is(1));
        assertThat(((XmlElementStart) temp).attributes().get(0).name(), is(""period""));
        assertThat(((XmlElementStart) temp).attributes().get(0).value(), is(""weekly""));
        assertThat(((XmlElementStart) temp).attributes().get(0).prefix(), is(""nettyb""));
        assertThat(((XmlElementStart) temp).attributes().get(0).namespace(), is(""http://netty.io/netty/b""));
        assertThat(((XmlElementStart) temp).namespaces().size(), is(1));
        assertThat(((XmlElementStart) temp).namespaces().get(0).prefix(), is(""nettyb""));
        assertThat(((XmlElementStart) temp).namespaces().get(0).uri(), is(""http://netty.io/netty/b""));

        temp = channel.readInbound();
        assertThat(temp, instanceOf(XmlCharacters.class));
        assertThat(((XmlCharacters) temp).data(), is(""100""));

        temp = channel.readInbound();
        assertThat(temp, instanceOf(XmlElementEnd.class));
        assertThat(((XmlElementEnd) temp).name(), is(""salary""));
        assertThat(((XmlElementEnd) temp).prefix(), is(""nettyb""));
        assertThat(((XmlElementEnd) temp).namespace(), is(""http://netty.io/netty/b""));
        assertThat(((XmlElementEnd) temp).namespaces().size(), is(1));
        assertThat(((XmlElementEnd) temp).namespaces().get(0).prefix(), is(""nettyb""));
        assertThat(((XmlElementEnd) temp).namespaces().get(0).uri(), is(""http://netty.io/netty/b""));

        temp = channel.readInbound();
        assertThat(temp, instanceOf(XmlElementStart.class));
        assertThat(((XmlElementStart) temp).name(), is(""last""));
        assertThat(((XmlElementStart) temp).prefix(), is(""""));
        assertThat(((XmlElementStart) temp).namespace(), is(""""));
        assertThat(((XmlElementStart) temp).attributes().size(), is(0));
        assertThat(((XmlElementStart) temp).namespaces().size(), is(0));

        temp = channel.readInbound();
        assertThat(temp, instanceOf(XmlElementEnd.class));
        assertThat(((XmlElementEnd) temp).name(), is(""last""));
        assertThat(((XmlElementEnd) temp).prefix(), is(""""));
        assertThat(((XmlElementEnd) temp).namespace(), is(""""));
        assertThat(((XmlElementEnd) temp).namespaces().size(), is(0));

        temp = channel.readInbound();
        assertThat(temp, instanceOf(XmlElementEnd.class));
        assertThat(((XmlElementEnd) temp).name(), is(""employee""));
        assertThat(((XmlElementEnd) temp).prefix(), is(""""));
        assertThat(((XmlElementEnd) temp).namespace(), is(""""));
        assertThat(((XmlElementEnd) temp).namespaces().size(), is(1));
        assertThat(((XmlElementEnd) temp).namespaces().get(0).prefix(), is(""nettya""));
        assertThat(((XmlElementEnd) temp).namespaces().get(0).uri(), is(""http://netty.io/netty/a""));

        temp = channel.readInbound();
        assertThat(temp, nullValue());
    }
",non-flaky,5
99768,apache_cassandra,RateBasedBackPressureTest.testBackPressureIsNotUpdatedBeyondInfinity,"    @Test
    public void testBackPressureIsNotUpdatedBeyondInfinity() throws Exception
    {
        long windowSize = 6000;
        TestTimeSource timeSource = new TestTimeSource();
        RateBasedBackPressure strategy = new RateBasedBackPressure(ImmutableMap.of(HIGH_RATIO, ""0.9"", FACTOR, ""10"", FLOW, ""FAST""), timeSource, windowSize);
        RateBasedBackPressureState state = strategy.newState(InetAddressAndPort.getLoopbackAddress());

        // Get initial rate:
        double initialRate = state.rateLimiter.getRate();
        assertEquals(Double.POSITIVE_INFINITY, initialRate, 0.0);

        // Update incoming and outgoing rate equally:
        state.incomingRate.update(1);
        state.outgoingRate.update(1);

        // Move time ahead:
        timeSource.sleep(windowSize, TimeUnit.MILLISECONDS);

        // Verify the rate doesn't change because already at infinity:
        strategy.apply(Sets.newHashSet(state), 1, TimeUnit.SECONDS);
        assertEquals(initialRate, state.rateLimiter.getRate(), 0.0);
    }
",non-flaky,5
30917,camunda-cloud_zeebe,MsgPackReadingTest.shouldReadMsgPack,"  @Test
  public void shouldReadMsgPack() {
    // given
    final ByteArrayBuilder builder = new ByteArrayBuilder();
    given.accept(builder);

    final byte[] givenBytes = builder.value;
    final DirectBuffer buf = new UnsafeBuffer(givenBytes);

    final MsgPackReader reader = new MsgPackReader();
    reader.wrap(buf, 0, buf.capacity());

    // when/then
    assertion.accept(reader);
    assertThat(reader.getOffset()).isEqualTo(givenBytes.length);
  }
",non-flaky,5
137109,spring-projects_spring-framework,AbstractAnnotationMetadataTests.hasAnnotatedMethodsWhenMatchesDirectAnnotationReturnsTrue,"	@Test
	public void hasAnnotatedMethodsWhenMatchesDirectAnnotationReturnsTrue() {
		assertThat(get(WithAnnotatedMethod.class).hasAnnotatedMethods(DirectAnnotation1.class.getName())).isTrue();
	}
",non-flaky,5
86043,graylog2_graylog2-server,NotificationDtoTest.testValidateLegacyWithEmptyConfigParameters,"    @Test
    public void testValidateLegacyWithEmptyConfigParameters() {
        final LegacyAlarmCallbackEventNotificationConfig emptyConfig = LegacyAlarmCallbackEventNotificationConfig.Builder.create()
                .callbackType("""")
                .configuration(new HashMap<>())
                .build();
        final NotificationDto emptyNotification = getLegacyNotification().toBuilder().config(emptyConfig).build();
        final ValidationResult validationResult = emptyNotification.validate();
        assertThat(validationResult.failed()).isTrue();
        assertThat(validationResult.getErrors()).containsOnlyKeys(""callback_type"");
    }
",non-flaky,5
112721,hwang-pku_ormlite-core,DatabaseConnectionProxyTest.testIsAutoCommit,"	@Test
	public void testIsAutoCommit() throws Exception {
		DatabaseConnection conn = createMock(DatabaseConnection.class);
		boolean autoCommit = false;
		expect(conn.isAutoCommit()).andReturn(autoCommit);
		conn.close();
		DatabaseConnectionProxy proxy = new DatabaseConnectionProxy(conn);
		replay(conn);
		assertEquals(autoCommit, proxy.isAutoCommit());
		proxy.close();
		verify(conn);
	}
",non-flaky,5
38256,palantir_atlasdb,AbstractAtlasDbKeyValueServiceTest.testCannotModifyValuesAfterWrite,"    @Test
    public void testCannotModifyValuesAfterWrite() {
        byte[] data = new byte[1];
        byte[] unmodifiedData = Arrays.copyOf(data, data.length);

        Cell cell = Cell.create(row0, column0);

        Value val = Value.create(data, TEST_TIMESTAMP + 1);

        keyValueService.putWithTimestamps(TEST_TABLE, ImmutableMultimap.of(cell, val));

        data[0] = (byte) 50;

        assertThat(keyValueService.get(TEST_TABLE, ImmutableMap.of(cell, TEST_TIMESTAMP + 3)).get(cell).getContents(),
                is(unmodifiedData));

        keyValueService.delete(TEST_TABLE, ImmutableMultimap.of(cell, TEST_TIMESTAMP + 1));
    }
",non-flaky,5
135739,Netflix_Hystrix,HystrixCommandTestWithCustomConcurrencyStrategy.testCommandDoesNotRequireContextConcurrencyStrategyDoesNotProvideItContextLeftUninitialized,"    @Test
    public void testCommandDoesNotRequireContextConcurrencyStrategyDoesNotProvideItContextLeftUninitialized() {
        HystrixConcurrencyStrategy strategy = new CustomConcurrencyStrategy(false);
        HystrixPlugins.getInstance().registerConcurrencyStrategy(strategy);

        //context is not set up
        HystrixRequestContext.setContextOnCurrentThread(null);
        HystrixCommand<Boolean> cmd = new TestCommand(true, true);
        assertTrue(cmd.execute()); //command execution unaffected by missing context
        printRequestLog();
        assertNull(HystrixRequestLog.getCurrentRequest());
        assertNull(HystrixRequestLog.getCurrentRequest(strategy));
        assertNull(cmd.currentRequestLog);
    }
",non-flaky,5
89292,apache_samza,TestLocalStoreMonitor.shouldDeleteLocalTaskStoreWhenItHasNoOffsetFile,"  @Test
  public void shouldDeleteLocalTaskStoreWhenItHasNoOffsetFile() throws Exception {
    localStoreMonitor.monitor();
    assertTrue(""Task store directory should not exist."", !taskStoreDir.exists());
    assertEquals(taskStoreSize, localStoreMonitorMetrics.diskSpaceFreedInBytes.getCount());
    assertEquals(1, localStoreMonitorMetrics.noOfDeletedTaskPartitionStores.getCount());
  }
",non-flaky,5
176782,ctco_cukes,BaseContextHandlerTest.shouldExtractSingleGroupInPattern,"    @Test
    public void shouldExtractSingleGroupInPattern() throws Exception {
        List<String> groups = capturer.extractGroups(""{(hello)}"");
        assertThat(groups, contains(""hello""));
    }
",non-flaky,5
156047,jReddit_jReddit,CommentTest.testAllCommentFields,"    @Test
    public void testAllCommentFields() {
        
        // Field values
        String subreddit_id = ""SubrID"";
        String banned_by = null;
        String subreddit = ""SubredditName"";
        String likes = null;
        String replies = """";
        boolean saved = false;
        String id = ""CommID"";
        String kind = ""t1"";
        long gilded = 0;
        String author = ""author"";
        String parent_id = ""ParID"";
        long score = 2;
        String approved_by = null;
        long controversiality = 0;
        String body = ""comment body"";
        boolean edited = false;
        String author_flair_css_class = null;
        long downs = 0;
        String body_html = ""&lt;div&gt;"" + body + ""&lt;/div&gt;"";
        String link_id = ""LinkIdentifier"";
        boolean score_hidden = false;
        String name = kind + ""_"" + id;
        double created = 1404969798.0;
        String author_flair_text = null;
        double created_utc = 1404940998.0;
        long ups = 2;
        String num_reports = null;
        String distinguished = null;
        
        // Create JSON Object
        JSONObject data = new JSONObject();
        data.put(""subreddit_id"", subreddit_id);
        data.put(""banned_by"", banned_by);
        data.put(""subreddit"", subreddit);
        data.put(""likes"", likes);
        data.put(""replies"", replies);
        data.put(""saved"", saved);
        data.put(""id"", id);
        data.put(""gilded"", gilded);
        data.put(""author"", author);
        data.put(""parent_id"", parent_id);
        data.put(""score"", score);
        data.put(""approved_by"", approved_by);
        data.put(""controversiality"", controversiality);
        data.put(""body"", body);
        data.put(""edited"", edited);
        data.put(""author_flair_css_class"", author_flair_css_class);
        data.put(""downs"", downs);
        data.put(""body_html"", body_html);
        data.put(""link_id"", link_id);
        data.put(""score_hidden"", score_hidden);
        data.put(""name"", name);
        data.put(""created"", created);
        data.put(""author_flair_text"", author_flair_text);
        data.put(""created_utc"", created_utc);
        data.put(""ups"", ups);
        data.put(""num_reports"", num_reports);
        data.put(""distinguished"", distinguished);
        
        // Parse
        Comment c = new Comment(data);
        
        // Test data fields
        assertEquals(c.getFullName(), name);
        assertEquals(c.getAuthor(), author);
        assertEquals(c.getBody(), body);
        assertEquals(c.getCreated(), created, 0);
        assertEquals(c.getCreatedUTC(), created_utc, 0);
        assertEquals(c.getDownvotes(), downs, 0);
        assertEquals(c.getEdited(), edited);
        assertEquals(c.getGilded(), gilded, 0);
        assertEquals(c.getIdentifier(), id);
       // assertEquals(c.getKind(), kind);
        assertEquals(c.getParentId(), parent_id);
        assertEquals(c.getScore(), score, 0);
        assertEquals(c.getUpvotes(), ups, 0);
        assertEquals(c.getSubreddit(), subreddit);
        assertEquals(c.getSubredditId(), subreddit_id);
        assertEquals(c.getLinkId(), link_id);
        assertEquals(c.getBodyHTML(), body_html);
        assertEquals(c.isScoreHidden(), score_hidden);
        
        // Possible tests to activate:
//        assertEquals(c.getBannedBy(), banned_by);
//        assertEquals(c.getLikes(), likes);
//        assertEquals(c.getApprovedBy(), approved_by);
//        assertEquals(c.getAuthorFlairCSSClass(), author_flair_css_class);
//        assertEquals(c.getAuthorFlairText(), author_flair_text);
//        assertEquals(c.getNumReports(), num_reports);
//        assertEquals(c.getDistinguised(), distinguished);
        
    }
",non-flaky,5
26792,MundaneImmortal_pair-distribution-app,DayPairsHelperTest.testGenerateNewDayPairs,"	@Test
	public void testGenerateNewDayPairs() {
		PairCombinations pairs = getPairsList();
		List<Developer> devs = getStandardDevs();
		List<String> tracks = Arrays.asList(""track1"", ""track2"", ""track3"");
		Map<Pair, Integer> pairsWeight = subject.buildPairsWeightFromPastPairing(pairs, devs);
		subject.buildDevelopersPairingDays(pairs, devs);
		
		DayPairs dayPairs = subject.generateNewDayPairs(tracks, devs, pairs, pairsWeight, getStandardCompanies());

		assertThat(dayPairs.getTracks().size(), is(2));
		assertThat(dayPairs.getTracks(), containsInAnyOrder(""track1"", ""track2""));
		assertThat(dayPairs.getPairByTrack(""track1""),
				is(not(new Pair(Arrays.asList(new Developer(""dev1""), new Developer(""dev2""))))));
		assertThat(dayPairs.getPairByTrack(""track2""),
				is(not(new Pair(Arrays.asList(new Developer(""dev3""), new Developer(""dev4""))))));
		
		boolean trackOneHasContext = dayPairs.getPairByTrack(""track1"").getFirstDev().hasContext() || dayPairs.getPairByTrack(""track1"").getSecondDev().hasContext();
		boolean trackTwoHasContext = dayPairs.getPairByTrack(""track2"").getFirstDev().hasContext() || dayPairs.getPairByTrack(""track2"").getSecondDev().hasContext();
		assertThat(trackOneHasContext, is(true));
		assertThat(trackTwoHasContext, is(true));
	}
",non-flaky,5
156134,soot-oss_soot,DexByteCodeInstrutionsTest.InvokeCustom1,"  @Test
  public void InvokeCustom1() {
    final SootMethod testTarget
        = prepareTarget(methodSigFromComponents(TARGET_CLASS, ""void invokeCustomTarget()""), TARGET_CLASS);

    // We model invokeCustom as invokeDynamic
    final List<InvokeExpr> invokes = invokesFromMethod(testTarget);
    Assert.assertEquals(1, invokes.size());
    final InvokeExpr invokeCustom = invokes.get(0);
    Assert.assertTrue(invokeCustom instanceof DynamicInvokeExpr);
    final SootMethodRef targetMethodRef = invokeCustom.getMethodRef();
    Assert.assertEquals(methodSigFromComponents(SootClass.INVOKEDYNAMIC_DUMMY_CLASS_NAME, SUPPLIER_GET_SUBSIG),
        targetMethodRef.getSignature());
    final String callToLambdaMethaFactory
        = ""dynamicinvoke \""get\"" <java.util.function.Supplier ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(), methodhandle: \""REF_INVOKE_STATIC\"" <soot.dexpler.instructions.DexBytecodeTarget: java.lang.String lambda$invokeCustomTarget$0()>, methodtype: java.lang.String __METHODTYPE__())"";
    Assert.assertEquals(callToLambdaMethaFactory, invokeCustom.toString());
  }
",non-flaky,5
179425,abel533_Mapper,ColumnTypeTest.testColumn,"    @Test
    public void testColumn(){
        EntityHelper.initEntityNameMap(UserColumn.class, config);
        EntityTable entityTable = EntityHelper.getEntityTable(UserColumn.class);
        Assert.assertNotNull(entityTable);

        Set<EntityColumn> columns = entityTable.getEntityClassColumns();
        Assert.assertEquals(1, columns.size());

        for (EntityColumn column : columns) {
            Assert.assertEquals(""user_name"", column.getColumn());
            Assert.assertEquals(""name"", column.getProperty());

            Assert.assertEquals(""user_name = #{name}"", column.getColumnEqualsHolder());
            Assert.assertEquals(""user_name = #{record.name}"", column.getColumnEqualsHolder(""record""));
            Assert.assertEquals(""#{name}"", column.getColumnHolder());
            Assert.assertEquals(""#{record.name}"", column.getColumnHolder(""record""));
            Assert.assertEquals(""#{record.name}"", column.getColumnHolder(""record"", ""suffix""));
            Assert.assertEquals(""#{record.namesuffix},"", column.getColumnHolder(""record"", ""suffix"", "",""));
            Assert.assertNull(column.getTypeHandler());
        }

        ResultMap resultMap = entityTable.getResultMap(configuration);
        Assert.assertEquals(""[USER_NAME]"", resultMap.getMappedColumns().toString());

        Assert.assertEquals(1, resultMap.getResultMappings().size());

        ResultMapping resultMapping = resultMap.getResultMappings().get(0);
        Assert.assertEquals(""user_name"", resultMapping.getColumn());
        Assert.assertEquals(""name"", resultMapping.getProperty());
        Assert.assertNull(resultMapping.getJdbcType());
        Assert.assertEquals(StringTypeHandler.class, resultMapping.getTypeHandler().getClass());
    }
",non-flaky,5
20970,NationalSecurityAgency_timely,TestMemoryDataStore.testOne,"    @Test
    public void testOne() throws TimelyException {

        long now = System.currentTimeMillis();
        DataStoreCache mmStore = getMetricMemoryStore1(now);

        QueryRequest query = new QueryRequest();
        query.setStart(now);
        query.setEnd(now + 100000);
        query.setMsResolution(true);
        QueryRequest.SubQuery subQuery = new QueryRequest.SubQuery();
        subQuery.setDownsample(Optional.of(""5s-avg""));
        subQuery.setMetric(""mymetric"");
        subQuery.addTag(""host"", "".*"");
        query.setQueries(Collections.singleton(subQuery));

        try {
            List<QueryResponse> responseList = mmStore.query(query);
            for (QueryResponse response : responseList) {
                System.out.println(response.toString());
            }
        } catch (TimelyException e) {
            e.printStackTrace();
        }
    }
",non-flaky,5
112630,tbsalling_aismessages,AISMessageTest.canHandleUnparsableNMEAMessage,"    @Test(expected = NMEAParseException.class)
    public void canHandleUnparsableNMEAMessage() {
        AISMessage.create(NMEAMessage.fromString(""!AIVDM,1,1,,B,13K6th002u9@8P0DEVv2M1up02Pl,0*740008,2*09""));
    }
",non-flaky,5
86062,graylog2_graylog2-server,AggregationEventProcessorConfigTest.testValidateWithIncompleteAggregationOptions,"    @Test
    public void testValidateWithIncompleteAggregationOptions() {
        AggregationEventProcessorConfig invalidConfig = getConfig().toBuilder()
            .groupBy(ImmutableList.of(""foo""))
            .build();

        ValidationResult validationResult = invalidConfig.validate();
        assertThat(validationResult.failed()).isTrue();
        assertThat(validationResult.getErrors()).containsOnlyKeys(""series"", ""conditions"");

        invalidConfig = getConfig().toBuilder()
            .series(ImmutableList.of(this.getSeries()))
            .build();

        validationResult = invalidConfig.validate();
        assertThat(validationResult.failed()).isTrue();
        assertThat(validationResult.getErrors()).containsOnlyKeys(""conditions"");

        invalidConfig = getConfig().toBuilder()
            .conditions(this.getConditions())
            .build();

        validationResult = invalidConfig.validate();
        assertThat(validationResult.failed()).isTrue();
        assertThat(validationResult.getErrors()).containsOnlyKeys(""series"");
    }
",non-flaky,5
59630,looly_hutool,FtpTest.recursiveDownloadFolder,"	@Test
	public void recursiveDownloadFolder() {
		Ftp ftp = new Ftp(""looly.centos"");
		ftp.recursiveDownloadFolder(""/"",FileUtil.file(""d:/test/download""));

		IoUtil.close(ftp);
	}
",non-flaky,5
21227,androidx_androidx,ExpandablePreferenceTest.expandablePreference_inPreferenceScreen_collapsesCorrectly,"    @Test
    public void expandablePreference_inPreferenceScreen_collapsesCorrectly() {

        mScreen.setKey(""screen"");
        mScreen.setInitialExpandedChildrenCount(1);

        mScreen.addPreference(mPreference1);
        mScreen.addPreference(mPreference2);
        mScreen.addPreference(mPreference3);

        PreferenceGroupAdapter preferenceGroupAdapter = new PreferenceGroupAdapter(mScreen);

        assertEquals(2, preferenceGroupAdapter.getItemCount());

        assertEquals(mPreference1, preferenceGroupAdapter.getItem(0));
        assertEquals(""Advanced"", preferenceGroupAdapter.getItem(1).getTitle());
        assertEquals(""Preference 2, Preference 3"", preferenceGroupAdapter.getItem(1).getSummary());
    }
",non-flaky,5
360,apache_hadoop,TestPermissionSymlinks.testDelete,"  @Test(timeout = 5000)
  public void testDelete() throws Exception {
    fs.setPermission(linkParent, new FsPermission((short) 0555));
    doDeleteLinkParentNotWritable();

    fs.setPermission(linkParent, new FsPermission((short) 0777));
    fs.setPermission(targetParent, new FsPermission((short) 0555));
    fs.setPermission(target, new FsPermission((short) 0555));
    doDeleteTargetParentAndTargetNotWritable();
  }
",non-flaky,5
97986,ReactiveX_RxJava,ObservableTests.onCompleted,"    @Test
    public void testTakeWithErrorInObserver() {
        final AtomicInteger count = new AtomicInteger();
        final AtomicReference<Throwable> error = new AtomicReference<Throwable>();
        Observable.from(""1"", ""2"", ""three"", ""4"").take(3).subscribe(new Observer<String>() {

            @Override
            public void onCompleted() {
                System.out.println(""completed"");
            }
",non-flaky,5
177991,aosp-mirror_platform_frameworks_support,GuidedStepSupportFragmentTest.answer,"    @Test
    public void finishGuidedStepSupportFragment_finishes_fragments() throws Throwable {
        final String firstFragmentName = generateMethodTestName(""first"");
        GuidedStepTestSupportFragment.Provider first = mockProvider(firstFragmentName);
        doAnswer(new Answer<Void>() {
            public Void answer(InvocationOnMock invocation) {
                List actions = (List) invocation.getArguments()[0];
                actions.add(new GuidedAction.Builder().id(1001).title(""Finish fragments"").build());
                return null;
            }
",non-flaky,5
122623,vespa-engine_vespa,IPAddressesTest.throws_when_multiple_private_ipv4_addresses,"    @Test(expected = RuntimeException.class)
    public void throws_when_multiple_private_ipv4_addresses() {
        mock.addAddress(""localhost"", ""38.3.4.2"")
                .addAddress(""localhost"", ""10.0.2.2"")
                .addAddress(""localhost"", ""10.0.2.3"");
        mock.getIPv4Address(""localhost"");
    }
",non-flaky,5
156451,apache_commons-lang,DateUtilsFragmentTest.testMillisecondsOfHourWithDate,"    @Test
    public void testMillisecondsOfHourWithDate() {
        final long testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.HOUR_OF_DAY);
        assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE), testResult);
    }
",non-flaky,5
98210,apache_jackrabbit,IdURICacheTest.testException,"    @Test
    public void testException() {

        String wspuri = ""https://example.org/foo/"";
        IdURICache cache = new IdURICache(wspuri);
        String test;

        // port number
        test = ""https://example.org:443/foo/x"";
        try {
            cache.add(test, null);
            fail(""should throw"");
        } catch (IllegalArgumentException ex) {
            assertEquals(""Workspace mismatch: '"" + test + ""' not under workspace '"" + wspuri
                    + ""' (position 18: '{https://example.org}:443/foo/x', expected: '/foo/')"", ex.getMessage());
        }

        // protocol
        test = ""http://example.org/foo/x"";
        try {
            cache.add(test, null);
            fail(""should throw"");
        } catch (IllegalArgumentException ex) {
            assertEquals(""Workspace mismatch: '"" + test + ""' not under workspace '"" + wspuri
                    + ""' (position 3: '{http}://example.org/foo/x', expected: 's://example.org/foo/')"", ex.getMessage());
        }

        // hostname
        test = ""https://example.com/foo/x"";
        try {
            cache.add(test, null);
            fail(""should throw"");
        } catch (IllegalArgumentException ex) {
            assertEquals(""Workspace mismatch: '"" + test + ""' not under workspace '"" + wspuri
                    + ""' (position 15: '{https://example.}com/foo/x', expected: 'org/foo/')"", ex.getMessage());
        }

        // root path
        test = ""https://example.org/bar/x"";
        try {
            cache.add(test, null);
            fail(""should throw"");
        } catch (IllegalArgumentException ex) {
            assertEquals(""Workspace mismatch: '"" + test + ""' not under workspace '"" + wspuri
                    + ""' (position 19: '{https://example.org/}bar/x', expected: 'foo/')"", ex.getMessage());
        }

        // too short
        test = ""https://example.org/fo/x"";
        try {
            cache.add(test, null);
            fail(""should throw"");
        } catch (IllegalArgumentException ex) {
            assertEquals(""Workspace mismatch: '"" + test + ""' not under workspace '"" + wspuri
                    + ""' (position 21: '{https://example.org/fo}/x', expected: 'o/')"", ex.getMessage());
        }

        // way too short
        test = ""https://x.org/foo/x"";
        try {
            cache.add(test, null);
            fail(""should throw"");
        } catch (IllegalArgumentException ex) {
            assertEquals(""Workspace mismatch: '"" + test + ""' not under workspace '"" + wspuri
                    + ""' (position 7: '{https://}x.org/foo/x', expected: 'example.org/foo/')"", ex.getMessage());
        }
    }
",non-flaky,5
20935,NationalSecurityAgency_timely,SerializationTest.testRemoveSubscription,"    @Test
    public void testRemoveSubscription() throws Exception {
        RemoveSubscription remove = new RemoveSubscription();
        remove.setSubscriptionId(""1234"");
        remove.setMetric(""sys.cpu.user"");
        testSerialization(remove);
    }
",non-flaky,5
134016,CorfuDB_CorfuDB,LoggingMeterRegistryTest.testTimerPercentiles,"    @Test
    public void testTimerPercentiles() {
        AggregateSink sink = new AggregateSink();

        LoggingMeterRegistryWithHistogramSupport registry = getInstance(sink);

        Timer timer = Timer.builder(""timer"")
                .publishPercentileHistogram()
                .publishPercentiles(0.99, 0.95, 0.5)
                .tags(""endpoint"", ""localhost:9000"")
                .register(registry);
        for (int i = 0; i < 3; i++) {
            timer.record(() -> {
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException ie) {

                }
            });
        }
        assertTrue(sink.substringIsPresent(""timer_percentile,endpoint=localhost:9000,phi=0.99,metric_type=gauge""));
        assertTrue(sink.substringIsPresent(""timer_percentile,endpoint=localhost:9000,phi=0.95,metric_type=gauge""));
        assertTrue(sink.substringIsPresent(""timer_percentile,endpoint=localhost:9000,phi=0.5,metric_type=gauge""));
    }
",non-flaky,5
98661,nutzam_nutz,BaseTest.test_base,"    @Test
    public void test_base() {
        get(""/base.jsp"");
        assertNotNull(resp);
        assertEquals(200, resp.getStatus());
        assertEquals(getContextPath(), resp.getContent());
    }
",non-flaky,5
112147,apache_shardingsphere-elasticjob,ShardingItemsTest.assertTtoItemListWhenNull,"    @Test
    public void assertTtoItemListWhenNull() {
        assertThat(ShardingItems.toItemList(null), is(Collections.EMPTY_LIST));
    }
",non-flaky,5
114109,aws_aws-sdk-java-v2,InstantAsStringAttributeConvertersTest.InstantAsStringAttributeConverterEpochMinusOneMilliTest,"    @Test
    public void InstantAsStringAttributeConverterEpochMinusOneMilliTest() {
        verifyTransform(Instant.EPOCH.minusMillis(1), ""1969-12-31T23:59:59.999Z"");
    }
",non-flaky,5
97675,vojtechhabarta_typescript-generator,SpringTest.testUnwrapping,"    @Test
    public void testUnwrapping() {
        final Settings settings = TestUtils.settings();
        settings.outputFileType = TypeScriptFileType.implementationFile;
        settings.generateSpringApplicationClient = true;
        settings.customTypeMappings.put(""cz.habarta.typescript.generator.spring.SpringTest$Wrapper<T>"", ""Unwrap<T>"");
        settings.importDeclarations.add(""import { Unwrap } from './unwrap'"");
        final String output = new TypeScriptGenerator(settings).generateTypeScript(Input.from(ControllerWithWrapper.class));
        Assert.assertTrue(output.contains(""getEntity(): RestResponse<Unwrap<string>>""));
    }
",non-flaky,5
170509,eclipse_jetty.project,MBeanContainerTest.testNonManagedLifecycleNotUnregistered,"    @Test
    public void testNonManagedLifecycleNotUnregistered() throws Exception
    {
        testNonManagedObjectNotUnregistered(new ContainerLifeCycle());
    }
",non-flaky,5
179434,abel533_Mapper,ComplexEntityTest.test,"    @Test
    public void test() {
        Class<?> entityClass = User.class;
        EntityHelper.initEntityNameMap(entityClass, config);
        StringBuilder sqlBuilder = new StringBuilder();
        sqlBuilder.append(SqlHelper.selectAllColumns(entityClass));
        final EntityTable entityTable = EntityHelper.getEntityTable(entityClass);
        sqlBuilder.append(SqlHelper.fromTable(entityClass, entityTable.getName()));
        sqlBuilder.append(SqlHelper.whereAllIfColumns(entityClass, config.isNotEmpty()));
        final String sql = sqlBuilder.toString();
        Assert.assertEquals(""SELECT id,user_name,address,state  FROM user "" +
                ""<where>"" +
                ""<if test=\""id != null\""> AND id = #{id}</if>"" +
                ""<if test=\""userName != null\""> AND user_name = #{userName}</if>"" +
                ""<if test=\""address != null\""> AND address = #{address, typeHandler=tk.mybatis.mapper.mapperhelper.ComplexEntityTest.AddressHandler}</if>"" +
                ""<if test=\""state != null\""> AND state = #{state}</if></where>"", sql);

        final ResultMap resultMap = entityTable.getResultMap(configuration);
        final List<ResultMapping> resultMappings = resultMap.getResultMappings();
        final ResultMapping idMapping = resultMappings.get(0);
        final ResultMapping userNameMapping = resultMappings.get(1);
        final ResultMapping addressMapping = resultMappings.get(2);
        final ResultMapping stateMapping = resultMappings.get(3);

        Assert.assertEquals(""id"", idMapping.getColumn());
        Assert.assertEquals(""id"", idMapping.getProperty());
        Assert.assertTrue(idMapping.getFlags().contains(ResultFlag.ID));

        Assert.assertEquals(""user_name"", userNameMapping.getColumn());
        Assert.assertEquals(""userName"", userNameMapping.getProperty());

        Assert.assertEquals(""address"", addressMapping.getColumn());
        Assert.assertEquals(""address"", addressMapping.getProperty());
        Assert.assertEquals(AddressHandler.class, addressMapping.getTypeHandler().getClass());

        Assert.assertEquals(""state"", stateMapping.getColumn());
        Assert.assertEquals(""state"", stateMapping.getProperty());
        Assert.assertEquals(EnumTypeHandler.class, stateMapping.getTypeHandler().getClass());


    }
",non-flaky,5
156091,soot-oss_soot,AsmMethodSourceTest.localNaming,"  @Test
  public void localNaming() {
    // This test ensures that local names are preserved in the Jimple code.
    final String className = ""soot.asm.LocalNaming"";
    final String[] params = { ""java.lang.String"", ""java.lang.Integer"", ""byte[]"", ""java.lang.StringBuilder"" };
    SootMethod target = prepareTarget(methodSigFromComponents(className, ""void"", ""localNaming"", params), className);
    Body body = target.retrieveActiveBody();
    Set<String> localNames = body.getLocals().stream().map(Local::getName).collect(Collectors.toSet());

    // All expected Local names are present
    Assert.assertTrue(localNames.contains(""alpha""));
    Assert.assertTrue(localNames.contains(""beta""));
    Assert.assertTrue(localNames.contains(""gamma""));
    Assert.assertTrue(localNames.contains(""delta""));
    Assert.assertTrue(localNames.contains(""epsilon""));
    Assert.assertTrue(localNames.contains(""zeta""));
    Assert.assertTrue(localNames.contains(""eta""));
    Assert.assertTrue(localNames.contains(""theta""));
    Assert.assertTrue(localNames.contains(""iota""));
    Assert.assertTrue(localNames.contains(""omega""));

    // No Local name contains ""$stack""
    Assert.assertTrue(localNames.stream().allMatch(n -> !n.contains(""$stack"")));
  }
",non-flaky,5
70813,apache_kafka,PluginsTest.shouldInstantiateAndConfigureConnectRestExtension,"    @Test
    public void shouldInstantiateAndConfigureConnectRestExtension() {
        props.put(WorkerConfig.REST_EXTENSION_CLASSES_CONFIG,
                  TestConnectRestExtension.class.getName());
        createConfig();

        List<ConnectRestExtension> connectRestExtensions =
            plugins.newPlugins(config.getList(WorkerConfig.REST_EXTENSION_CLASSES_CONFIG),
                               config,
                               ConnectRestExtension.class);
        assertNotNull(connectRestExtensions);
        assertEquals(""One Rest Extension expected"", 1, connectRestExtensions.size());
        assertNotNull(connectRestExtensions.get(0));
        assertTrue(""Should be instance of TestConnectRestExtension"",
                   connectRestExtensions.get(0) instanceof TestConnectRestExtension);
        assertNotNull(((TestConnectRestExtension) connectRestExtensions.get(0)).configs);
        assertEquals(config.originals(),
                     ((TestConnectRestExtension) connectRestExtensions.get(0)).configs);
    }
",non-flaky,5
156432,apache_commons-lang,DateUtilsFragmentTest.testInvalidFragmentWithCalendar,"    @Test
    public void testInvalidFragmentWithCalendar() {
        assertThrows(IllegalArgumentException.class, () -> DateUtils.getFragmentInMilliseconds(aCalendar, 0));
        assertThrows(IllegalArgumentException.class, () -> DateUtils.getFragmentInSeconds(aCalendar, 0));
        assertThrows(IllegalArgumentException.class, () -> DateUtils.getFragmentInMinutes(aCalendar, 0));
        assertThrows(IllegalArgumentException.class, () -> DateUtils.getFragmentInHours(aCalendar, 0));
        assertThrows(IllegalArgumentException.class, () -> DateUtils.getFragmentInDays(aCalendar, 0));
    }
",non-flaky,5
33664,alibaba_fastjson,TestParse.testParse,"    @Test
    public void testParse() {
        logger.info(""parsing json string:"" + jsonString);
        TestBean testBean = (TestBean) JSON.parse(jsonString);
        assert testBean.getData() != null;
        assert ""tester"".equals(testBean.getName());
        assert ""value"".equals(testBean.getData().getString(""key""));
    }
",non-flaky,5
110136,Wikidata_wikidata-toolkit,ClientConfigurationTest.testOfflineModeArgumentsLong,"	@Test
	public void testOfflineModeArgumentsLong() {
		String[] args = new String[] { ""--offline"" };
		ClientConfiguration config = new ClientConfiguration(args);
		assertTrue(config.getOfflineMode());
	}
",non-flaky,5
76673,quarkusio_quarkus,UnspecifiedPrefixConfigProperties.testConfiguredValues,"    @Test
    public void testConfiguredValues() {
        assertEquals(""quarkus"", dummyBean.getName());
        assertEquals(""hello"", dummyBean.getMessage());
    }
",non-flaky,5
70809,apache_kafka,PluginUtilsTest.testPluginUrlsWithRelativeSymlinkForwards,"    @Test
    public void testPluginUrlsWithRelativeSymlinkForwards() throws Exception {
        // Since this test case defines a relative symlink within an already included path, the main
        // assertion of this test is absence of exceptions and correct resolution of paths.
        createBasicDirectoryLayout();
        Files.createDirectories(pluginPath.resolve(""connectorB/deps/more""));
        Files.createSymbolicLink(
                pluginPath.resolve(""connectorB/deps/symlink""),
                Paths.get(""more"")
        );

        List<Path> expectedUrls = createBasicExpectedUrls();
        expectedUrls.add(
                Files.createFile(pluginPath.resolve(""connectorB/deps/more/converter.jar""))
        );

        assertUrls(expectedUrls, PluginUtils.pluginUrls(pluginPath));
    }
",non-flaky,5
156060,jReddit_jReddit,RedditOAuthAgentTest.testGenerateCodeFlowURI,"    @Test
    public void testGenerateCodeFlowURI() {
        RedditScopeBuilder builder = new RedditScopeBuilder();
        builder.addScope(RedditScope.EDIT);
        String url = subject.generateCodeFlowURI(builder, RedditDuration.PERMANENT);
        UrlValidator urlValidator = new UrlValidator();
        assertTrue(urlValidator.isValid(url));
    }
",non-flaky,5
177967,aosp-mirror_platform_frameworks_support,FileProviderTest.testMetaDataTargets,"    @Test
    public void testMetaDataTargets() {
        Uri actual;

        actual = FileProvider.getUriForFile(mContext, TEST_AUTHORITY,
                new File(""/proc/version""));
        assertEquals(""content://moocow/test_root/proc/version"", actual.toString());

        actual = FileProvider.getUriForFile(mContext, TEST_AUTHORITY,
                new File(""/proc/1/mountinfo""));
        assertEquals(""content://moocow/test_init/mountinfo"", actual.toString());

        actual = FileProvider.getUriForFile(mContext, TEST_AUTHORITY,
                buildPath(mContext.getFilesDir(), ""meow""));
        assertEquals(""content://moocow/test_files/meow"", actual.toString());

        actual = FileProvider.getUriForFile(mContext, TEST_AUTHORITY,
                buildPath(mContext.getFilesDir(), ""thumbs"", ""rawr""));
        assertEquals(""content://moocow/test_thumbs/rawr"", actual.toString());

        actual = FileProvider.getUriForFile(mContext, TEST_AUTHORITY,
                buildPath(mContext.getCacheDir(), ""up"", ""down""));
        assertEquals(""content://moocow/test_cache/up/down"", actual.toString());

        actual = FileProvider.getUriForFile(mContext, TEST_AUTHORITY,
                buildPath(Environment.getExternalStorageDirectory(), ""Android"", ""obb"", ""foobar""));
        assertEquals(""content://moocow/test_external/Android/obb/foobar"", actual.toString());

        File[] externalFilesDirs = ContextCompat.getExternalFilesDirs(mContext, null);
        actual = FileProvider.getUriForFile(mContext, TEST_AUTHORITY,
            buildPath(externalFilesDirs[0], ""foo"", ""bar""));
        assertEquals(""content://moocow/test_external_files/foo/bar"", actual.toString());

        File[] externalCacheDirs = ContextCompat.getExternalCacheDirs(mContext);
        actual = FileProvider.getUriForFile(mContext, TEST_AUTHORITY,
            buildPath(externalCacheDirs[0], ""foo"", ""bar""));
        assertEquals(""content://moocow/test_external_cache/foo/bar"", actual.toString());
    }
",non-flaky,5
114003,apache_struts,StrutsSpringJUnit4TestCaseTest.getActionMapping,"	@Test
    public void getActionMapping() {
        ActionMapping mapping = getActionMapping(""/test/testAction.action"");
        Assert.assertNotNull(mapping);
        Assert.assertEquals(""/test"", mapping.getNamespace());
        Assert.assertEquals(""testAction"", mapping.getName());
    }
",non-flaky,5
78304,apache_beam,OutputAndTimeBoundedSplittableProcessElementInvokerTest.process,"  @Test
  public void testInvokeProcessElementOutputDisallowedAfterFailedTryClaim() throws Exception {
    DoFn<Void, String> brokenFn =
        new DoFn<Void, String>() {
          @ProcessElement
          public void process(ProcessContext c, OffsetRangeTracker tracker) {
            assertFalse(tracker.tryClaim(6L));
            c.output(""foo"");
          }
",non-flaky,5
110117,Wikidata_wikidata-toolkit,ClientTest.testQuietStdOutLoggingConfig,"	@Test
	public void testQuietStdOutLoggingConfig() throws ParseException,
			IOException {
		String[] args = new String[] { ""-a"", ""json"", ""-s"" };
		new Client(mockDpc, args);

		assertEquals(Level.OFF, Client.consoleAppender.getThreshold());
		assertEquals(Level.WARN, Client.errorAppender.getThreshold());
	}
",non-flaky,5
77002,Tencent_Firestorm,ShuffleServerWithLocalTest.localWriteReadTest,"  @Test
  public void localWriteReadTest() throws Exception {
    String testAppId = ""localWriteReadTest"";
    RssRegisterShuffleRequest rrsr = new RssRegisterShuffleRequest(testAppId, 0,
        Lists.newArrayList(new PartitionRange(0, 1)));
    shuffleServerClient.registerShuffle(rrsr);
    rrsr = new RssRegisterShuffleRequest(testAppId, 0, Lists.newArrayList(new PartitionRange(2, 3)));
    shuffleServerClient.registerShuffle(rrsr);

    Map<Long, byte[]> expectedData = Maps.newHashMap();

    Roaring64NavigableMap[] bitmaps = new Roaring64NavigableMap[4];
    Map<Integer, List<ShuffleBlockInfo>> partitionToBlocks = createTestData(bitmaps, expectedData);

    Set<Long> expectedBlockIds1 = transBitmapToSet(bitmaps[0]);
    Set<Long> expectedBlockIds2 = transBitmapToSet(bitmaps[1]);
    Set<Long> expectedBlockIds3 = transBitmapToSet(bitmaps[2]);
    Set<Long> expectedBlockIds4 = transBitmapToSet(bitmaps[3]);

    Map<Integer, Map<Integer, List<ShuffleBlockInfo>>> shuffleToBlocks = Maps.newHashMap();
    shuffleToBlocks.put(0, partitionToBlocks);

    RssSendShuffleDataRequest rssdr = new RssSendShuffleDataRequest(
        testAppId, 3, 1000, shuffleToBlocks);
    shuffleServerClient.sendShuffleData(rssdr);
    RssSendCommitRequest rscr = new RssSendCommitRequest(testAppId, 0);
    shuffleServerClient.sendCommit(rscr);
    RssFinishShuffleRequest rfsr = new RssFinishShuffleRequest(testAppId, 0);
    shuffleServerClient.finishShuffle(rfsr);

    ShuffleDataResult sdr  = readShuffleData(
        shuffleServerClient, testAppId, 0, 0, 2,
        10, 1000, 0);
    validateResult(sdr, expectedBlockIds1, expectedData, 0);
    sdr  = readShuffleData(
        shuffleServerClient, testAppId, 0, 1, 2,
        10, 1000, 0);
    validateResult(sdr, expectedBlockIds2, expectedData, 1);
    sdr  = readShuffleData(
        shuffleServerClient, testAppId, 0, 2, 2,
        10, 1000, 0);
    validateResult(sdr, expectedBlockIds3, expectedData, 2);
    sdr  = readShuffleData(
        shuffleServerClient, testAppId, 0, 3, 2,
        10, 1000, 0);
    validateResult(sdr, expectedBlockIds4, expectedData, 3);

    assertEquals(4, shuffleServers.get(0).getShuffleTaskManager()
        .getServerReadHandlers().get(testAppId).size());
    assertNotNull(shuffleServers.get(0).getShuffleTaskManager()
        .getPartitionsToBlockIds().get(testAppId));
    Thread.sleep(8000);
    assertNull(shuffleServers.get(0).getShuffleTaskManager().getServerReadHandlers().get(testAppId));
    assertNull(shuffleServers.get(0).getShuffleTaskManager().getPartitionsToBlockIds().get(testAppId));
  }
",non-flaky,5
177166,line_armeria,SamlServiceProviderTest.shouldRespondAuthnRequest_HttpRedirect,"    @Test
    public void shouldRespondAuthnRequest_HttpRedirect() throws Exception {
        final AggregatedHttpResponse resp = client.get(""/redirect"").aggregate().join();
        assertThat(resp.status()).isEqualTo(HttpStatus.FOUND);

        // Check the order of the parameters in the quest string.
        final String location = resp.headers().get(HttpHeaderNames.LOCATION);
        final Pattern p = Pattern.compile(
                ""http://idp\\.example\\.com/saml/sso/redirect\\?"" +
                ""SAMLRequest=([^&]+)&RelayState=([^&]+)&SigAlg=([^&]+)&Signature=(.+)$"");
        assertThat(location).isNotNull();
        assertThat(p.matcher(location).matches()).isTrue();

        assertThat(QueryParams.fromQueryString(location)
                              .get(SIGNATURE_ALGORITHM)).isEqualTo(signatureAlgorithm);
    }
",non-flaky,5
70768,apache_kafka,StartAndStopCounterTest.shouldFailToWaitForRestartThatNeverHappens,"    @Test
    public void shouldFailToWaitForRestartThatNeverHappens() throws Exception {
        waiters = Executors.newSingleThreadExecutor();

        latch = counter.expectedRestarts(1);
        Future<Boolean> future = asyncAwait(100, TimeUnit.MILLISECONDS);

        clock.sleep(1000);
        // Record a stop but NOT a start
        counter.recordStop();
        assertFalse(future.get(200, TimeUnit.MILLISECONDS));
        assertTrue(future.isDone());
    }
",non-flaky,5
59590,looly_hutool,QrCodeUtilTest.generateWithLogoTest,"	@Test
	public void generateWithLogoTest() {
		QrCodeUtil.generate(//
				""http://hutool.cn/"", //
				QrConfig.create().setImg(""e:/pic/face.jpg""), //
				FileUtil.file(""e:/qrcodeWithLogo.jpg""));
	}
",non-flaky,5
134018,CorfuDB_CorfuDB,LogReplicationClientTest.testHandleLeadershipLoss,"    @Test
    public void testHandleLeadershipLoss() {
        final LogReplicationLeadershipLossResponseMsg leadershipLoss =  LogReplicationLeadershipLossResponseMsg
                .newBuilder().build();
        final ResponseMsg response = ResponseMsg.newBuilder().setPayload(
                CorfuMessage.ResponsePayloadMsg.newBuilder()
                        .setLrLeadershipLoss(leadershipLoss).build()).build();
        lrClient.receive(response);

        ArgumentCaptor<LogReplicationRuntimeEvent> argument = ArgumentCaptor.forClass(LogReplicationRuntimeEvent.class);
        verify(lrFsm).input(argument.capture());
        Assertions.assertThat(argument.getValue().getType()).isEqualTo(LogReplicationRuntimeEventType.REMOTE_LEADER_LOSS);
    }
",non-flaky,5
170501,eclipse_jetty.project,MBeanContainerTest.testDomain,"    @Test
    public void testDomain()
    {
        String domain = ""Test"";

        mbeanContainer.setDomain(domain);

        assertEquals(domain, mbeanContainer.getDomain(), ""Domain name must be Test"");
    }
",non-flaky,5
114122,aws_aws-sdk-java-v2,LocalDateTimeAttributeConverterTest.localDateTimeAttributeConverterMinTest,"    @Test
    public void localDateTimeAttributeConverterMinTest() {
        verifyTransform(LocalDateTime.MIN, ""-999999999-01-01T00:00"");
    }
",non-flaky,5
156105,soot-oss_soot,DefaultInterfaceTest.simpleDefaultInterfaceTest,"  @Test
  public void simpleDefaultInterfaceTest() {

    String testClass = ""soot.defaultInterfaceMethods.SimpleDefaultInterface"";
    String defaultClass = ""soot.defaultInterfaceMethods.Default"";
    String classToAnalyze = ""soot.defaultInterfaceMethods.Default"";

    final SootMethod target =
        prepareTarget(
            methodSigFromComponents(testClass, voidType, mainClass),
            testClass,
            classToAnalyze);

    SootMethod defaultMethod =
        Scene.v().getMethod(""<soot.defaultInterfaceMethods.Default: void target()>"");
    Body body = target.retrieveActiveBody();
    SootMethod targetMethod = resolveMethodRefInBody(body.getUnits(), ""void target()"");
    SootMethod resolvedMethod =
        VirtualCalls.v()
            .resolveNonSpecial(Scene.v().getRefType(testClass), defaultMethod.makeRef(), false);
    SootMethod concreteImpl =
        Scene.v()
            .getFastHierarchy()
            .resolveConcreteDispatch(Scene.v().getSootClass(testClass), defaultMethod);
    SootMethod concreteImplViaResolveMethod =
        Scene.v()
            .getFastHierarchy()
            .resolveMethod(Scene.v().getSootClass(testClass), defaultMethod, false);
    Set<SootMethod> abstractImpl =
        Scene.v()
            .getFastHierarchy()
            .resolveAbstractDispatch(Scene.v().getSootClass(defaultClass), defaultMethod);

    boolean edgePresent = checkInEdges(defaultMethod, target);
    final ReachableMethods reachableMethods = Scene.v().getReachableMethods();
    /* Arguments for assert function */

    assertEquals(defaultMethod, resolvedMethod);
    assertEquals(defaultMethod, targetMethod);
    assertEquals(defaultMethod.getName(), ""target"");
    assertNotNull(defaultMethod);
    assertTrue(reachableMethods.contains(defaultMethod));
    assertTrue(edgePresent);
    assertEquals(defaultMethod, concreteImpl);
    assertEquals(concreteImpl, concreteImplViaResolveMethod);
    assertTrue(
        abstractImpl.contains(
            Scene.v().getMethod(""<soot.defaultInterfaceMethods.Default: void target()>"")));
  }
",non-flaky,5
114088,aws_aws-sdk-java-v2,KeyTest.getPrimaryKeyMap_partitionOnly,"    @Test
    public void getPrimaryKeyMap_partitionOnly() {
        Map<String, AttributeValue> expectedResult = new HashMap<>();
        expectedResult.put(""id"", AttributeValue.builder().s(""id123"").build());
        assertThat(partitionOnlyKey.primaryKeyMap(FakeItemWithIndices.getTableSchema()), is(expectedResult));
    }
",non-flaky,5
104640,apache_pinot,OfflineClusterIntegrationTest.testStarTreeTriggering,"  @Test
  public void testStarTreeTriggering()
      throws Exception {
    long numTotalDocs = getCountStarResult();
    long tableSizeWithDefaultIndex = getTableSize(getTableName());

    // Test the first query
    JsonNode firstQueryResponse = postQuery(TEST_STAR_TREE_QUERY_1);
    int firstQueryResult = firstQueryResponse.get(""aggregationResults"").get(0).get(""value"").asInt();
    assertEquals(firstQueryResponse.get(""totalDocs"").asLong(), numTotalDocs);
    // Initially 'numDocsScanned' should be the same as 'COUNT(*)' result
    assertEquals(firstQueryResponse.get(""numDocsScanned"").asInt(), firstQueryResult);

    // Update table config and trigger reload
    TableConfig tableConfig = getOfflineTableConfig();
    IndexingConfig indexingConfig = tableConfig.getIndexingConfig();
    indexingConfig.setStarTreeIndexConfigs(Collections.singletonList(STAR_TREE_INDEX_CONFIG_1));
    indexingConfig.setEnableDynamicStarTreeCreation(true);
    updateTableConfig(tableConfig);
    reloadOfflineTable(getTableName());

    TestUtils.waitForCondition(aVoid -> {
      try {
        JsonNode queryResponse = postQuery(TEST_STAR_TREE_QUERY_1);
        // Result should not change during reload
        assertEquals(queryResponse.get(""aggregationResults"").get(0).get(""value"").asInt(), firstQueryResult);
        // Total docs should not change during reload
        assertEquals(queryResponse.get(""totalDocs"").asLong(), numTotalDocs);
        // With star-tree, 'numDocsScanned' should be the same as number of segments (1 per segment)
        return queryResponse.get(""numDocsScanned"").asInt() == NUM_SEGMENTS;
      } catch (Exception e) {
        throw new RuntimeException(e);
      }
    }, 600_000L, ""Failed to add first star-tree index"");

    // Reload again should have no effect
    reloadOfflineTable(getTableName());
    firstQueryResponse = postQuery(TEST_STAR_TREE_QUERY_1);
    assertEquals(firstQueryResponse.get(""aggregationResults"").get(0).get(""value"").asInt(), firstQueryResult);
    assertEquals(firstQueryResponse.get(""totalDocs"").asLong(), numTotalDocs);
    assertEquals(firstQueryResponse.get(""numDocsScanned"").asInt(), NUM_SEGMENTS);

    // Should be able to use the star-tree with an additional match-all predicate on another dimension
    firstQueryResponse = postQuery(TEST_STAR_TREE_QUERY_1 + "" AND DaysSinceEpoch > 16070"");
    assertEquals(firstQueryResponse.get(""aggregationResults"").get(0).get(""value"").asInt(), firstQueryResult);
    assertEquals(firstQueryResponse.get(""totalDocs"").asLong(), numTotalDocs);
    assertEquals(firstQueryResponse.get(""numDocsScanned"").asInt(), NUM_SEGMENTS);

    // Test the second query
    JsonNode secondQueryResponse = postQuery(TEST_STAR_TREE_QUERY_2);
    int secondQueryResult = secondQueryResponse.get(""aggregationResults"").get(0).get(""value"").asInt();
    assertEquals(secondQueryResponse.get(""totalDocs"").asLong(), numTotalDocs);
    // Initially 'numDocsScanned' should be the same as 'COUNT(*)' result
    assertEquals(secondQueryResponse.get(""numDocsScanned"").asInt(), secondQueryResult);

    // Update table config with a different star-tree index config and trigger reload
    indexingConfig.setStarTreeIndexConfigs(Collections.singletonList(STAR_TREE_INDEX_CONFIG_2));
    updateTableConfig(tableConfig);
    reloadOfflineTable(getTableName());

    TestUtils.waitForCondition(aVoid -> {
      try {
        JsonNode queryResponse = postQuery(TEST_STAR_TREE_QUERY_2);
        // Result should not change during reload
        assertEquals(queryResponse.get(""aggregationResults"").get(0).get(""value"").asInt(), secondQueryResult);
        // Total docs should not change during reload
        assertEquals(queryResponse.get(""totalDocs"").asLong(), numTotalDocs);
        // With star-tree, 'numDocsScanned' should be the same as number of segments (1 per segment)
        return queryResponse.get(""numDocsScanned"").asInt() == NUM_SEGMENTS;
      } catch (Exception e) {
        throw new RuntimeException(e);
      }
    }, 600_000L, ""Failed to change to second star-tree index"");

    // First query should not be able to use the star-tree
    firstQueryResponse = postQuery(TEST_STAR_TREE_QUERY_1);
    assertEquals(firstQueryResponse.get(""numDocsScanned"").asInt(), firstQueryResult);

    // Reload again should have no effect
    reloadOfflineTable(getTableName());
    firstQueryResponse = postQuery(TEST_STAR_TREE_QUERY_1);
    assertEquals(firstQueryResponse.get(""aggregationResults"").get(0).get(""value"").asInt(), firstQueryResult);
    assertEquals(firstQueryResponse.get(""totalDocs"").asLong(), numTotalDocs);
    assertEquals(firstQueryResponse.get(""numDocsScanned"").asInt(), firstQueryResult);
    secondQueryResponse = postQuery(TEST_STAR_TREE_QUERY_2);
    assertEquals(secondQueryResponse.get(""aggregationResults"").get(0).get(""value"").asInt(), secondQueryResult);
    assertEquals(secondQueryResponse.get(""totalDocs"").asLong(), numTotalDocs);
    assertEquals(secondQueryResponse.get(""numDocsScanned"").asInt(), NUM_SEGMENTS);

    // Should be able to use the star-tree with an additional match-all predicate on another dimension
    secondQueryResponse = postQuery(TEST_STAR_TREE_QUERY_2 + "" AND DaysSinceEpoch > 16070"");
    assertEquals(secondQueryResponse.get(""aggregationResults"").get(0).get(""value"").asInt(), secondQueryResult);
    assertEquals(secondQueryResponse.get(""totalDocs"").asLong(), numTotalDocs);
    assertEquals(secondQueryResponse.get(""numDocsScanned"").asInt(), NUM_SEGMENTS);

    // Remove the star-tree index config and trigger reload
    indexingConfig.setStarTreeIndexConfigs(null);
    updateTableConfig(tableConfig);
    reloadOfflineTable(getTableName());

    TestUtils.waitForCondition(aVoid -> {
      try {
        JsonNode queryResponse = postQuery(TEST_STAR_TREE_QUERY_2);
        // Result should not change during reload
        assertEquals(queryResponse.get(""aggregationResults"").get(0).get(""value"").asInt(), secondQueryResult);
        // Total docs should not change during reload
        assertEquals(queryResponse.get(""totalDocs"").asLong(), numTotalDocs);
        // Without star-tree, 'numDocsScanned' should be the same as the 'COUNT(*)' result
        return queryResponse.get(""numDocsScanned"").asInt() == secondQueryResult;
      } catch (Exception e) {
        throw new RuntimeException(e);
      }
    }, 600_000L, ""Failed to remove star-tree index"");
    assertEquals(getTableSize(getTableName()), tableSizeWithDefaultIndex);

    // First query should not be able to use the star-tree
    firstQueryResponse = postQuery(TEST_STAR_TREE_QUERY_1);
    assertEquals(firstQueryResponse.get(""numDocsScanned"").asInt(), firstQueryResult);

    // Reload again should have no effect
    reloadOfflineTable(getTableName());
    firstQueryResponse = postQuery(TEST_STAR_TREE_QUERY_1);
    assertEquals(firstQueryResponse.get(""aggregationResults"").get(0).get(""value"").asInt(), firstQueryResult);
    assertEquals(firstQueryResponse.get(""totalDocs"").asLong(), numTotalDocs);
    assertEquals(firstQueryResponse.get(""numDocsScanned"").asInt(), firstQueryResult);
    secondQueryResponse = postQuery(TEST_STAR_TREE_QUERY_2);
    assertEquals(secondQueryResponse.get(""aggregationResults"").get(0).get(""value"").asInt(), secondQueryResult);
    assertEquals(secondQueryResponse.get(""totalDocs"").asLong(), numTotalDocs);
    assertEquals(secondQueryResponse.get(""numDocsScanned"").asInt(), secondQueryResult);
  }
",non-flaky,5
160352,ConsenSys_teku,SlashingProtectionExporterTest.shouldReadFilesWithEmptyRootAfterGenesisRootIsDefined,"  @Test
  public void shouldReadFilesWithEmptyRootAfterGenesisRootIsDefined(@TempDir Path tempDir)
      throws URISyntaxException, IOException {
    final SlashingProtectionExporter exporter = new SlashingProtectionExporter(tempDir);
    Optional<String> error =
        exporter.readSlashProtectionFile(
            usingResourceFile(""slashProtectionWithGenesisRoot.yml"", tempDir), log::add);
    assertThat(error).isEmpty();
    error =
        exporter.readSlashProtectionFile(
            usingResourceFile(""slashProtection.yml"", tempDir), log::add);
    assertThat(error).isEmpty();

    assertThat(log).containsExactly(""Exporting "" + pubkey, ""Exporting "" + pubkey);
  }
",non-flaky,5
97964,ReactiveX_RxJava,ObservableTests.fromArityArgs3,"    @Test
    public void fromArityArgs3() {
        Observable<String> items = Observable.from(""one"", ""two"", ""three"");

        assertEquals(new Integer(3), items.count().toBlockingObservable().single());
        assertEquals(""two"", items.skip(1).take(1).toBlockingObservable().single());
        assertEquals(""three"", items.takeLast(1).toBlockingObservable().single());
    }
",non-flaky,5
106589,Alluxio_alluxio,HdfsProxyUserValidationTaskTest.missingProxyUser,"  @Test
  public void missingProxyUser() {
    String userName = System.getProperty(""user.name"");

    // No proxy user definition in core-site.xml
    prepareHdfsConfFiles(ImmutableMap.of(""key1"", ""value1""));

    HdfsProxyUserValidationTask task =
            new HdfsProxyUserValidationTask(""hdfs://namenode:9000/alluxio"", mConf);
    ValidationTaskResult result = task.validateImpl(ImmutableMap.of());
    assertEquals(ValidationUtils.State.FAILED, result.getState());
    assertThat(result.getResult(), containsString(
            ""Alluxio is not able to perform impersonation.""));
    assertThat(result.getAdvice(), containsString(
            String.format(""Please enable Alluxio user %s to impersonate"", userName)));
  }
",non-flaky,5
70851,apache_kafka,TransformationConfigTest.testEmbeddedConfigCast,"    @Test
    public void testEmbeddedConfigCast() {
        // Validate that we can construct a Connector config containing the extended config for the transform
        HashMap<String, String> connProps = new HashMap<>();
        connProps.put(""name"", ""foo"");
        connProps.put(""connector.class"", MockConnector.class.getName());
        connProps.put(""transforms"", ""example"");
        connProps.put(""transforms.example.type"", Cast.Value.class.getName());
        connProps.put(""transforms.example.spec"", ""int8"");

        Plugins plugins = null; // Safe when we're only constructing the config
        new ConnectorConfig(plugins, connProps);
    }
",non-flaky,5
160411,ConsenSys_teku,ChainDataProviderTest.getStateSyncCommittees_shouldGetCommittees,"  @Test
  public void getStateSyncCommittees_shouldGetCommittees()
      throws ExecutionException, InterruptedException {
    final ChainDataProvider provider = setupAltairState();
    final List<UInt64> committeeIndices =
        List.of(UInt64.valueOf(6), UInt64.valueOf(9), UInt64.valueOf(0));

    final SafeFuture<Optional<StateSyncCommittees>> future =
        provider.getStateSyncCommittees(""head"", Optional.empty());
    assertThat(future).isCompleted();
    assertThat(future.get().get())
        .isEqualTo(new StateSyncCommittees(committeeIndices, List.of(committeeIndices)));
  }
",non-flaky,5
70822,apache_kafka,PluginsTest.newHeaderConverterShouldConfigureWithPluginClassLoader,"    @Test
    public void newHeaderConverterShouldConfigureWithPluginClassLoader() {
        TestPlugins.assertAvailable();
        props.put(WorkerConfig.HEADER_CONVERTER_CLASS_CONFIG, TestPlugins.SAMPLING_HEADER_CONVERTER);
        ClassLoader classLoader = plugins.delegatingLoader().pluginClassLoader(TestPlugins.SAMPLING_HEADER_CONVERTER);
        ClassLoader savedLoader = Plugins.compareAndSwapLoaders(classLoader);
        createConfig();
        Plugins.compareAndSwapLoaders(savedLoader);

        HeaderConverter plugin = plugins.newHeaderConverter(
            config,
            WorkerConfig.HEADER_CONVERTER_CLASS_CONFIG,
            ClassLoaderUsage.PLUGINS
        );

        assertInstanceOf(SamplingTestPlugin.class, plugin, ""Cannot collect samples"");
        Map<String, SamplingTestPlugin> samples = ((SamplingTestPlugin) plugin).flatten();
        assertTrue(samples.containsKey(""configure"")); // HeaderConverter::configure was called
        assertPluginClassLoaderAlwaysActive(samples);
    }
",non-flaky,5
38251,palantir_atlasdb,AbstractAtlasDbKeyValueServiceTest.testKeyAlreadyExists,"    @Test
    public void testKeyAlreadyExists() {
        // Test that it does not throw some random exceptions
        putTestDataForSingleTimestamp();
        try {
            putTestDataForSingleTimestamp();
            // Legal
        } catch (KeyAlreadyExistsException e) {
            Assert.fail(""Must not throw when overwriting with same value!"");
        }

        keyValueService.putWithTimestamps(
                TEST_TABLE,
                ImmutableMultimap.of(
                        Cell.create(row0, column0),
                        Value.create(value00, TEST_TIMESTAMP + 1)));
        try {
            keyValueService.putWithTimestamps(
                    TEST_TABLE,
                    ImmutableMultimap.of(
                            Cell.create(row0, column0),
                            Value.create(value00, TEST_TIMESTAMP + 1)));
            // Legal
        } catch (KeyAlreadyExistsException e) {
            Assert.fail(""Must not throw when overwriting with same value!"");
        }

        try {
            keyValueService.putWithTimestamps(TEST_TABLE, ImmutableMultimap.of(Cell.create(row0, column0), Value.create(value01, TEST_TIMESTAMP + 1)));
            // Legal
        } catch (KeyAlreadyExistsException e) {
            // Legal
        }

        // The first try might not throw as putUnlessExists must only be exclusive with other putUnlessExists.
        try {
            keyValueService.putUnlessExists(TEST_TABLE, ImmutableMap.of(Cell.create(row0, column0), value00));
            // Legal
        } catch (KeyAlreadyExistsException e) {
            // Legal
        }

        try {
            keyValueService.putUnlessExists(TEST_TABLE, ImmutableMap.of(Cell.create(row0, column0), value00));
            Assert.fail(""putUnlessExists must throw when overwriting the same cell!"");
        } catch (KeyAlreadyExistsException e) {
            // Legal
        }
    }
",non-flaky,5
133967,CorfuDB_CorfuDB,LogUnitHandlerTest.testGetCommittedTail,"    @Test
    public void testGetCommittedTail() {
        long sampleCommittedTail = 5L;
        ResponseMsg response = getResponseMsg(
                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.CHECK),
                getCommittedTailResponseMsg(sampleCommittedTail)
        );

        logUnitHandler.handleMessage(response, mockChannelHandlerContext);
        // Verify that the correct request was completed (once) with the appropriate value,
        // and that we did not complete exceptionally.
        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));
        verify(mockClientRouter).completeRequest(response.getHeader().getRequestId(), sampleCommittedTail);
    }
",non-flaky,5
26768,MundaneImmortal_pair-distribution-app,DayPairsTest.testHashCode,"	@Test
	public void testHashCode() {
		DayPairs pairsOfToday = new DayPairs();
		DayPairs differentPairsOfToday = new DayPairs();
		DayPairs yesterdayPairs = new DayPairs();
		yesterdayPairs.setDate(getYesterdayDate());
		Pair pair1 = new Pair(Arrays.asList(new Developer(""dev1""), new Developer(""dev2"")));
		Pair pair2 = new Pair(Arrays.asList(new Developer(""dev3""), new Developer(""dev4"")));
		pairsOfToday.addPair(""track1"", pair1);
		differentPairsOfToday.addPair(""track2"", pair2);
		yesterdayPairs.addPair(""track1"", pair1);
		
		assertThat(pairsOfToday.hashCode(), is(equalTo(differentPairsOfToday.hashCode())));
		assertThat(yesterdayPairs.hashCode(), is(not(equalTo(pairsOfToday.hashCode()))));
	}
",non-flaky,5
110177,Wikidata_wikidata-toolkit,ValueRdfConverterTest.testWriteGlobeCoordinatesValue,"	@Test
	public void testWriteGlobeCoordinatesValue() throws RDFHandlerException,
			RDFParseException, IOException {
		GlobeCoordinatesValueConverter valueConverter = new GlobeCoordinatesValueConverter(
				this.rdfWriter, this.propertyRegister, this.rdfConversionBuffer);

		GlobeCoordinatesValue value = this.objectFactory
				.getGlobeCoordinatesValue(51.033333333333, 13.733333333333,
						(GlobeCoordinatesValue.PREC_DECI_DEGREE),
						""http://www.wikidata.org/entity/Q2"");
		PropertyIdValue propertyIdValue = objectFactory.getPropertyIdValue(
				""P625"", ""http://www.wikidata.org/entity/"");
		Value valueURI = valueConverter.getRdfValue(value, propertyIdValue,
				false);
		valueConverter.writeValue(value, (Resource) valueURI);
		this.rdfWriter.finish();
		Model model = RdfTestHelpers.parseRdf(this.out.toString());
		assertEquals(model, RdfTestHelpers.parseRdf(RdfTestHelpers
				.getResourceFromFile(""GlobeCoordinatesValue.rdf"")));
	}
",non-flaky,5
77639,pholser_junit-quickcheck,DistinctListPropertyParameterTypesTest.shouldHold,"    @Test public void shrinkingDistinctLists() {
        @Property public void shouldHold(
            @Size(min = 4, max = 5)
",non-flaky,5
59649,looly_hutool,TemplateUtilTest.velocityEngineTest,"	@Test
	public void velocityEngineTest() {
		// å­ç¬¦ä¸²æ¨¡æ¿
		TemplateEngine engine = TemplateUtil.createEngine(
				new TemplateConfig(""templates"", ResourceMode.STRING).setCustomEngine(VelocityEngine.class));
		Template template = engine.getTemplate(""ä½ å¥½,$name"");
		String result = template.render(Dict.create().set(""name"", ""hutool""));
		Assert.assertEquals(""ä½ å¥½,hutool"", result);
		
		//ClassPathæ¨¡æ¿
		engine = TemplateUtil.createEngine(
				new TemplateConfig(""templates"", ResourceMode.CLASSPATH).setCustomEngine(VelocityEngine.class));
		template = engine.getTemplate(""velocity_test.vtl"");
		result = template.render(Dict.create().set(""name"", ""hutool""));
		Assert.assertEquals(""ä½ å¥½,hutool"", result);

		template = engine.getTemplate(""templates/velocity_test.vtl"");
		result = template.render(Dict.create().set(""name"", ""hutool""));
		Assert.assertEquals(""ä½ å¥½,hutool"", result);
	}
",non-flaky,5
98587,nutzam_nutz,El2Test.sikpSpace,"    @Test
    public void sikpSpace() {
        // ç©ºæ ¼æ£æµ
        assertEquals(3, El.eval(""    1 + 2    ""));
    }
",non-flaky,5
106660,Alluxio_alluxio,AlluxioFuseFileSystemTest.rmdir,"  @Test
  public void rmdir() throws Exception {
    AlluxioURI expectedPath = BASE_EXPECTED_URI.join(""/foo/bar"");
    doNothing().when(mFileSystem).delete(expectedPath);
    mFuseFs.rmdir(""/foo/bar"");
    verify(mFileSystem).delete(expectedPath);
  }
",non-flaky,5
89302,apache_samza,TestMonitorService.createSchedulerAndScheduleMonitor,"  @Test
  public void testShouldNotFailWhenTheMonitorFactoryClassIsNotDefined()
      throws Exception {
    // Test that when MonitorFactoryClass is not defined in the config, monitor service
    // should not fail.
    Map<String, String> configMap = ImmutableMap.of(""monitor.monitor1.config.key1"", ""configValue1"",
                                                    ""monitor.monitor1.config.key2"", ""configValue2"",
                                                    String.format(""monitor.MOCK_MONITOR.%s"", CONFIG_MONITOR_FACTORY_CLASS),
                                                    MockMonitorFactory.class.getCanonicalName());

    SamzaRestConfig config = new SamzaRestConfig(new MapConfig(configMap));

    class SamzaMonitorServiceTest extends SamzaMonitorService {
      MetricsRegistry metricsRegistry;
      public SamzaMonitorServiceTest(SamzaRestConfig config, MetricsRegistry metricsRegistry) {
        super(config, metricsRegistry);
        this.metricsRegistry = metricsRegistry;
      }

      @Override
      public void createSchedulerAndScheduleMonitor(String monitorName, MonitorConfig monitorConfig, long schedulingIntervalInMs) {
        try {
          // immediately run monitor, without scheduling
          instantiateMonitor(monitorName, monitorConfig, metricsRegistry).monitor();
        } catch (Exception e) {
          fail();
        }
      }
",non-flaky,5
156065,jReddit_jReddit,RedditOAuthAgentTest.testTokenOAuthProblemException,"    @Test(expected=RedditOAuthException.class)
    public void testTokenOAuthProblemException() throws OAuthSystemException, OAuthProblemException, RedditOAuthException {
        when(mockOAuthClient.accessToken(any(OAuthClientRequest.class))).thenThrow(OAuthProblemException.error(""Error""));
        subject.token(code);
    }
",non-flaky,5
135002,undertow-io_undertow,AnnotatedEndpointTest.testRequestUri,"    @Test
    public void testRequestUri() throws Exception {
        final byte[] payload = ""hello"".getBytes();
        final FutureResult latch = new FutureResult();

        WebSocketTestClient client = new WebSocketTestClient(WebSocketVersion.V13, new URI(""ws://"" + DefaultServer.getHostAddress(""default"") + "":"" + DefaultServer.getHostPort(""default"") + ""/ws/request?a=b""));
        client.connect();
        client.send(new TextWebSocketFrame(Unpooled.wrappedBuffer(payload)), new FrameChecker(TextWebSocketFrame.class, ""/ws/request?a=b"".getBytes(), latch));
        latch.getIoFuture().get();
        client.destroy();
    }
",non-flaky,5
77455,opensearch-project_OpenSearch,PreBuiltTransportClientTests.testInstallPluginTwice,"    @Test
    public void testInstallPluginTwice() {
        for (Class<? extends Plugin> plugin :
                Arrays.asList(ParentJoinPlugin.class, ReindexPlugin.class, PercolatorPlugin.class,
                    MustachePlugin.class)) {
            try {
                new PreBuiltTransportClient(Settings.EMPTY, plugin);
                fail(""exception expected"");
            } catch (IllegalArgumentException ex) {
                assertTrue(""Expected message to start with [plugin already exists: ] but was instead ["" + ex.getMessage() + ""]"",
                        ex.getMessage().startsWith(""plugin already exists: ""));
            }
        }
    }
",non-flaky,5
113765,salesforce_reactive-grpc,ReactiveStreamObserverPublisherServerTest.onNextDelegates,"    @Test
    public void onNextDelegates() {
        ServerCallStreamObserver<Object> obs = mock(ServerCallStreamObserver.class);
        Subscriber<Object> sub = mock(Subscriber.class);

        ReactiveStreamObserverPublisherServer<Object> pub = new ReactiveStreamObserverPublisherServer<Object>(obs);
        pub.subscribe(sub);

        Object obj = new Object();

        pub.onNext(obj);
        verify(sub).onNext(obj);
    }
",non-flaky,5
110164,Wikidata_wikidata-toolkit,DirectoryManagerTest.NoCreateFileStringReadOnly,"	@Test(expected = IOException.class)
	public void NoCreateFileStringReadOnly() throws IOException {
		dm.createFile(""new-test-file.txt"", ""new contents"");
	}
",non-flaky,5
113698,salesforce_reactive-grpc,GradleProofTest.gradleProof,"    @Test
    public void gradleProof() throws Exception {
        GradleProof proof = new GradleProof();
        try {
            proof.startServer();
            String result = proof.doClient(""World"");
            assertEquals(""Hello World"", result);
        } finally {
            proof.stopServer();
        }
    }
",non-flaky,5
33900,apache_camel,FhirReadIT.testResourceByStringUrlAndStringResource,"    @Test
    public void testResourceByStringUrlAndStringResource() throws Exception {
        final Map<String, Object> headers = new HashMap<>();
        // parameter type is String
        headers.put(""CamelFhir.resourceClass"", ""Patient"");
        // parameter type is org.hl7.fhir.instance.model.api.IIdType
        headers.put(""CamelFhir.iUrl"", new IdType(this.patient.getId()));

        Patient result = requestBodyAndHeaders(""direct://RESOURCE_BY_STRING_URL_AND_STRING_RESOURCE"", null, headers);

        assertValidResponse(result);
    }
",non-flaky,5
156385,apache_commons-lang,ClassPathUtilsTest.testToFullyQualifiedPathPackageNullString,"    @Test
    public void testToFullyQualifiedPathPackageNullString() {
        assertThrows(NullPointerException.class,
                () -> ClassPathUtils.toFullyQualifiedPath((Package) null, ""Test.properties""));
    }
",non-flaky,5
162432,testcontainers_testcontainers-java,GenericContainerRuleTest.failFastWhenContainerHaltsImmediately,"    @Test @Ignore //TODO investigate intermittent failures
    public void failFastWhenContainerHaltsImmediately() throws Exception {

        long startingTimeMs = System.currentTimeMillis();
        final GenericContainer failsImmediately = new GenericContainer(""alpine:3.2"")
              .withCommand(""/bin/sh"", ""-c"", ""return false"")
              .withMinimumRunningDuration(Duration.ofMillis(100));

        try {
            assertThrows(
                  ""When we start a container that halts immediately, an exception is thrown"",
                  RetryCountExceededException.class,
                  () -> {
                      failsImmediately.start();
                      return null;
                  });

            // Check how long it took, to verify that we ARE bailing out early.
            // Want to strike a balance here; too short and this test will fail intermittently
            // on slow systems and/or due to GC variation, too long and we won't properly test
            // what we're intending to test.
            int allowedSecondsToFailure =
                GenericContainer.CONTAINER_RUNNING_TIMEOUT_SEC / 2;
            long completedTimeMs = System.currentTimeMillis();
            assertTrue(""container should not take long to start up"",
                  completedTimeMs - startingTimeMs < 1000L * allowedSecondsToFailure);
        } finally {
            failsImmediately.stop();
        }
    }
",non-flaky,5
135717,Netflix_Hystrix,HystrixThreadPoolMetricsTest.shouldReturnOneExecutedTask,"	@Test
	public void shouldReturnOneExecutedTask() throws Exception {
		//given
		final Collection<HystrixThreadPoolMetrics> instances = HystrixThreadPoolMetrics.getInstances();
		RollingThreadPoolEventCounterStream.getInstance(tpKey, 10, 100).startCachingStreamValuesIfUnstarted();

		//when
		new NoOpHystrixCommand().execute();

		//then
		Thread.sleep(100);
		assertEquals(1, instances.size());
		assertEquals(1, instances.iterator().next().getRollingCountThreadsExecuted());
	}
",non-flaky,5
135729,Netflix_Hystrix,HystrixCommandMetricsTest.testGetErrorPercentage,"    @Test
    public void testGetErrorPercentage() {
        String key = ""cmd-metrics-A"";
        try {
            HystrixCommand<Boolean> cmd1 = new SuccessCommand(key, 1);
            HystrixCommandMetrics metrics = cmd1.metrics;
            cmd1.execute();
            Thread.sleep(100);
            assertEquals(0, metrics.getHealthCounts().getErrorPercentage());

            HystrixCommand<Boolean> cmd2 = new FailureCommand(key, 1);
            cmd2.execute();
            Thread.sleep(100);
            assertEquals(50, metrics.getHealthCounts().getErrorPercentage());

            HystrixCommand<Boolean> cmd3 = new SuccessCommand(key, 1);
            HystrixCommand<Boolean> cmd4 = new SuccessCommand(key, 1);
            cmd3.execute();
            cmd4.execute();
            Thread.sleep(100);
            assertEquals(25, metrics.getHealthCounts().getErrorPercentage());

            HystrixCommand<Boolean> cmd5 = new TimeoutCommand(key);
            HystrixCommand<Boolean> cmd6 = new TimeoutCommand(key);
            cmd5.execute();
            cmd6.execute();
            Thread.sleep(100);
            assertEquals(50, metrics.getHealthCounts().getErrorPercentage());

            HystrixCommand<Boolean> cmd7 = new SuccessCommand(key, 1);
            HystrixCommand<Boolean> cmd8 = new SuccessCommand(key, 1);
            HystrixCommand<Boolean> cmd9 = new SuccessCommand(key, 1);
            cmd7.execute();
            cmd8.execute();
            cmd9.execute();

            // latent
            HystrixCommand<Boolean> cmd10 = new SuccessCommand(key, 60);
            cmd10.execute();

            // 6 success + 1 latent success + 1 failure + 2 timeout = 10 total
            // latent success not considered error
            // error percentage = 1 failure + 2 timeout / 10
            Thread.sleep(100);
            assertEquals(30, metrics.getHealthCounts().getErrorPercentage());

        } catch (Exception e) {
            e.printStackTrace();
            fail(""Error occurred: "" + e.getMessage());
        }

    }
",non-flaky,5
19430,eclipse_xtext-core,SerializationTest._testSerialize_03,"	@Test public void testSerialize_02() throws Exception {
	public void _testSerialize_03() throws Exception {
		model.setGenerated(GeneratedEnum.DIFFERENT_NAME);
		String result = serialize(model);
		assertEquals(""generated DifferentLiteral"", result);
	}
",non-flaky,5
33896,apache_camel,FhirReadIT.testResourceByStringIdAndVersion,"    @Test
    public void testResourceByStringIdAndVersion() throws Exception {
        final Map<String, Object> headers = new HashMap<>();
        // parameter type is Class
        headers.put(""CamelFhir.resource"", Patient.class);
        // parameter type is Long
        headers.put(""CamelFhir.stringId"", patient.getIdElement().getIdPart());
        // parameter type is String
        headers.put(""CamelFhir.version"", patient.getIdElement().getVersionIdPart());

        Patient result = requestBodyAndHeaders(""direct://RESOURCE_BY_STRING_ID_AND_VERSION"", null, headers);

        assertValidResponse(result);
    }
",non-flaky,5
33701,alibaba_fastjson,JSONScannerTest.checkTime7,"  @Test
  public void checkTime7() throws Throwable {

    // Arrange
    JSONScanner objectUnderTest = ((JSONScanner)Reflector.getInstance(""com.alibaba.fastjson.parser.JSONScanner""));
    objectUnderTest.hasSpecial = false;
    objectUnderTest.token = 0;
    objectUnderTest.locale = null;
    objectUnderTest.np = 0;
    objectUnderTest.features = 0;
    Reflector.setField(objectUnderTest, ""text"", """");
    objectUnderTest.calendar = null;
    objectUnderTest.matchStat = 0;
    objectUnderTest.bp = 0;
    Reflector.setField(objectUnderTest, ""len"", 0);
    objectUnderTest.stringDefaultValue = """";
    objectUnderTest.pos = 0;
    objectUnderTest.sp = 0;
    objectUnderTest.sbuf = null;
    objectUnderTest.ch = '\u0000';
    objectUnderTest.timeZone = null;
    objectUnderTest.eofPos = 0;
    char h0 = '1';
    char h1 = '=';
    char m0 = '1';
    char m1 = '\u0000';
    char s0 = '\u0000';
    char s1 = '\u0000';

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkTime"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(objectUnderTest, h0, h1, m0, m1, s0, s1);

    // Assert result
    Assert.assertEquals(false, retval);

  }
",non-flaky,5
99751,apache_cassandra,AsyncStreamingInputPlusTest.available_closed,"    @Test
    public void available_closed()
    {
        inputPlus = new AsyncStreamingInputPlus(channel);
        inputPlus.requestClosure();
        inputPlus.unsafeAvailable();
    }
",non-flaky,5
94612,square_okhttp,MultipartBodyTest.contentType,"  @Test public void streamingPartHasNoLength() throws Exception {
      @Override public MediaType contentType() {
        return null;
      }
",non-flaky,5
97,trinodb_trino,testQueryTimeout,"@Test
public void testQueryTimeout()
throws Exception
{
    try (Connection connection = createConnection(""blackhole"", ""blackhole"");
    Statement statement = connection.createStatement()) {
        statement.executeUpdate(""CREATE TABLE test_query_timeout (key BIGINT) "" +
        ""WITH ("" +
        ""   split_count = 1, "" +
        ""   pages_per_split = 1, "" +
        ""   rows_per_page = 1, "" +
        ""   page_processing_delay = '1m'"" +
        "")"");
    }
    CountDownLatch queryFinished = new CountDownLatch(1);
    AtomicReference<Throwable> queryFailure = new AtomicReference<>();
    executorService.submit(() -> {
        try (Connection connection = createConnection(""blackhole"", ""default"");
        Statement statement = connection.createStatement()) {
            statement.setQueryTimeout(1);
            try (ResultSet resultSet = statement.executeQuery(""SELECT * FROM test_query_timeout"")) {
                try {
                    resultSet.next();
                }
                catch (SQLException t) {
                    queryFailure.set(t);
                }
                finally {
                    queryFinished.countDown();
                }
            }
        }
        return null;
    });
    assertTrue(queryFinished.await(2, SECONDS));
    assertNotNull(queryFailure.get());
    assertContains(queryFailure.get().getMessage(), ""Query exceeded maximum time limit of 1.00s"");
    try (Connection connection = createConnection(""blackhole"", ""blackhole"");
    Statement statement = connection.createStatement()) {
        statement.executeUpdate(""DROP TABLE test_query_timeout"");
    }
}",async wait,0
76724,quarkusio_quarkus,JarRunnerIT.testNonAsciiDir,"    @Test
    public void testNonAsciiDir() throws Exception {
        final File testDir = initProject(""projects/classic"", ""projects/ÄÅ¡ÄÅÅ¾Ã½Ã¡Ã­Ã©Å¯Ãº"");
        final RunningInvoker running = new RunningInvoker(testDir, false);

        final MavenProcessInvocationResult result = running.execute(Arrays.asList(""install"", ""-DskipTests""),
                Collections.emptyMap());
        await().atMost(1, TimeUnit.MINUTES).until(() -> result.getProcess() != null && !result.getProcess().isAlive());
        assertThat(running.log()).containsIgnoringCase(""BUILD SUCCESS"");
        running.stop();

        File output = new File(testDir, ""target/output.log"");
        output.createNewFile();

        Process process = doLaunch(new File(testDir, ""target/quarkus-app""), Paths.get(""quarkus-run.jar""), output,
                Collections.emptyList()).start();
        try {
            // Wait until server up
            dumpFileContentOnFailure(() -> {
                await().pollDelay(1, TimeUnit.SECONDS)
                        .atMost(1, TimeUnit.MINUTES).until(() -> DevModeTestUtils.getHttpResponse(""/app/hello/package"", 200));
                return null;
            }, output, ConditionTimeoutException.class);
        } finally {
            process.destroy();
        }

    }
",non-flaky,5
70832,apache_kafka,WorkerSourceTaskTest.answer,"    @Test
    public void testStartPaused() throws Exception {
        final CountDownLatch pauseLatch = new CountDownLatch(1);

        createWorkerTask(TargetState.PAUSED);

        statusListener.onPause(taskId);
        EasyMock.expectLastCall().andAnswer(new IAnswer<Void>() {
            @Override
            public Void answer() throws Throwable {
                pauseLatch.countDown();
                return null;
            }
",non-flaky,5
106669,Alluxio_alluxio,BaseFileSystemTest.free,"  @Test
  public void free() throws Exception {
    AlluxioURI file = new AlluxioURI(""/file"");
    FreePOptions freeOptions = FreePOptions.newBuilder().setRecursive(true).build();
    mFileSystem.free(file, freeOptions);
    verify(mFileSystemMasterClient).free(file, FileSystemOptions.freeDefaults(mConf)
        .toBuilder().mergeFrom(freeOptions).build());

    verifyFilesystemContextAcquiredAndReleased();
  }
",non-flaky,5
112770,hwang-pku_ormlite-core,SelectIteratorTest.testIteratorNextRemoveRemoveNoNext,"	@Test(expected = IllegalStateException.class)
	public void testIteratorNextRemoveRemoveNoNext() throws Exception {
		Dao<Foo, Object> dao = createDao(Foo.class, true);
		Foo foo1 = new Foo();
		assertEquals(1, dao.create(foo1));
		Foo foo2 = new Foo();
		assertEquals(1, dao.create(foo2));
		CloseableIterator<Foo> iterator = dao.iterator();
		try {
			iterator.next();
			iterator.remove();
			iterator.remove();
		} finally {
			iterator.close();
		}
	}
",non-flaky,5
38227,palantir_atlasdb,TextUtilsTest.testParseDateFeb29,"    @Test
    public void testParseDateFeb29() {
        helperTestParseDate(new Date(2012 - 1900, 1, 29));
    }
",non-flaky,5
97756,vojtechhabarta_typescript-generator,DefaultTypeProcessorTest.testTypeConversion,"    @Test
    public void testTypeConversion() {
        TypeProcessor converter = new DefaultTypeProcessor();
        final TypeProcessor.Context context = getTestContext(converter);
        assertEquals(context.getSymbol(A.class).getFullName(), converter.processType(A.class, context).getTsType().toString());
        assertEquals(context.getSymbol(B.class).getFullName(), converter.processType(B.class, context).getTsType().toString());
        assertEquals(TsType.Void, converter.processType(void.class, context).getTsType());
        assertEquals(TsType.Number, converter.processType(BigDecimal.class, context).getTsType());
        assertEquals(TsType.String, converter.processType(UUID.class, context).getTsType());
        assertEquals(TsType.Number.optional(), converter.processType(OptionalInt.class, context).getTsType());
        assertEquals(TsType.Number.optional(), converter.processType(OptionalLong.class, context).getTsType());
        assertEquals(TsType.Number.optional(), converter.processType(OptionalDouble.class, context).getTsType());
    }
",non-flaky,5
170497,eclipse_jetty.project,MBeanContainerTest.testMakeName,"    @Test
    public void testMakeName()
    {
        beanName = ""mngd:bean"";

        beanName = mbeanContainer.makeName(beanName);

        assertEquals(""mngd_bean"", beanName, ""Bean name should be mngd_bean"");
    }
",non-flaky,5
98293,spotify_docker-client,DockerDateFormatTest.testHandlesNanosecondPrecision,"  @Test
  public void testHandlesNanosecondPrecision() throws Exception {
    assertThat(dockerDateFormat.parse(""2015-09-18T17:44:28.145855389Z""), equalTo(expected));
  }
",non-flaky,5
156161,soot-oss_soot,TypingMinimizeTest.testMostCommonTypingPairs_2,"  @Test
  public void testMostCommonTypingPairs_2() {

    logger.debug(""Starting Object Random Minimize"");

    List<Typing> typingList = new ArrayList<>();

    Type Type1 = serializableType;
    Type Type2 = comparableType;
    Type Type3 = numberType;
    Local x1 = new JimpleLocal(""$x1"", null);

    Typing typing1 = new Typing(Arrays.asList(x1));
    typing1.set(x1, Type1);
    typingList.add(typing1);

    Typing typing2 = new Typing(Arrays.asList(x1));
    typing2.set(x1, Type2);
    typingList.add(typing2);

    Typing typing3 = new Typing(Arrays.asList(x1));
    typing3.set(x1, Type3);
    typingList.add(typing3);

    getTypingStrategy().minimize(typingList, new BytecodeHierarchy());

    assertEquals(2, typingList.size());
    assertThat(typingList, containsInAnyOrder(typing2, typing3));
  }
",non-flaky,5
95712,togglz_togglz,EnumBasedFeatureProviderTest.shouldReturnMetaDataWithCorrectLabel,"    @Test
    public void shouldReturnMetaDataWithCorrectLabel() {

        FeatureProvider provider = new EnumBasedFeatureProvider(ValidFeatureEnum.class);
        FeatureMetaData metaData = provider.getMetaData(ValidFeatureEnum.FEATURE1);
        assertThat(metaData.getLabel()).isEqualTo(""First feature"");

    }
",non-flaky,5
97687,vojtechhabarta_typescript-generator,CustomTypeConversionTest.processType,"    @Test
    public void testCustomTypeConversion() {
        final Settings settings = TestUtils.settings();
        // suppose we want to override how A is parsed
        settings.customTypeProcessor = new TypeProcessor() {
            @Override
            public TypeProcessor.Result processType(Type javaType, TypeProcessor.Context context) {
                if (javaType.equals(B.class)) {
                    return new Result(TsType.Number.optional());
                }
                return null;
            }
",non-flaky,5
19461,eclipse_xtext-core,ScopeTest.iterator,"	@Test public void testLaziness() throws Exception {
				public Iterator<IEObjectDescription> iterator() {
					numberOfCalls++;
					return singleton(
							(IEObjectDescription) new EObjectDescription(QualifiedName.create(name),
									EcorePackage.Literals.EATTRIBUTE, null)).iterator();
				}
",non-flaky,5
106575,Alluxio_alluxio,HdfsVersionValidationTaskTest.versionNotMatched,"  @Test
  public void versionNotMatched() throws Exception {
    PowerMockito.mockStatic(ShellUtils.class);
    String[] cmd = new String[]{""hadoop"", ""version""};
    BDDMockito.given(ShellUtils.execCommand(cmd)).willReturn(""Hadoop 2.7"");
    sConf.set(PropertyKey.UNDERFS_VERSION, ""2.6"");

    HdfsVersionValidationTask task = new HdfsVersionValidationTask(sConf);
    ValidationTaskResult result = task.validateImpl(ImmutableMap.of());
    assertEquals(ValidationUtils.State.FAILED, result.getState());
    assertThat(result.getResult(), containsString(
            ""2.7 does not match alluxio.underfs.version=2.6""));
    assertThat(result.getAdvice(), containsString(""configure alluxio.underfs.version""));
  }
",non-flaky,5
160393,ConsenSys_teku,ChainDataProviderTest.validatorParameterToIndex_shouldDetectAboveMaxInt,"  @Test
  public void validatorParameterToIndex_shouldDetectAboveMaxInt() {
    final ChainDataProvider provider =
        new ChainDataProvider(spec, recentChainData, combinedChainDataClient);

    assertThrows(
        BadRequestException.class,
        () ->
            provider.validatorParameterToIndex(
                UInt64.valueOf(Integer.MAX_VALUE).increment().toString()));
  }
",non-flaky,5
20925,NationalSecurityAgency_timely,TagListParserTest.testListParse,"    @Test
    public void testListParse() {
        String value = ""tag1=value1,tag2=value2"";
        List<Tag> tags = new TagListParser().parse(value);
        Assert.assertEquals(2, tags.size());
        Assert.assertEquals(new Tag(""tag1"", ""value1""), tags.get(0));
        Assert.assertEquals(new Tag(""tag2"", ""value2""), tags.get(1));
    }
",non-flaky,5
162706,OpenAPITools_openapi-generator,XmlItemTest.attributeNumberTest,"    @Test
    public void attributeNumberTest() {
        // TODO: test attributeNumber
    }
",non-flaky,5
86068,graylog2_graylog2-server,AggregationEventProcessorTest.testEventsFromAggregationResult,"    @Test
    public void testEventsFromAggregationResult() {
        final DateTime now = DateTime.now(DateTimeZone.UTC);
        final AbsoluteRange timerange = AbsoluteRange.create(now.minusHours(1), now.plusHours(1));

        // We expect to get the end of the aggregation timerange as event time
        final TestEvent event1 = new TestEvent(timerange.to());
        final TestEvent event2 = new TestEvent(timerange.to());
        when(eventFactory.createEvent(any(EventDefinition.class), eq(now), anyString()))
                .thenReturn(event1)  // first invocation return value
                .thenReturn(event2); // second invocation return value

        final EventDefinitionDto eventDefinitionDto = EventDefinitionDto.builder()
                .id(""dto-id-1"")
                .title(""Test Aggregation"")
                .description(""A test aggregation event processors"")
                .priority(1)
                .alert(false)
                .notificationSettings(EventNotificationSettings.withGracePeriod(60000))
                .config(AggregationEventProcessorConfig.builder()
                        .query("""")
                        .streams(ImmutableSet.of(""stream-2""))
                        .groupBy(ImmutableList.of(""group_field_one"", ""group_field_two""))
                        .series(ImmutableList.of())
                        .conditions(null)
                        .searchWithinMs(30000)
                        .executeEveryMs(30000)
                        .build())
                .keySpec(ImmutableList.of())
                .build();
        final AggregationEventProcessorParameters parameters = AggregationEventProcessorParameters.builder()
                .timerange(timerange)
                .build();

        final AggregationEventProcessor eventProcessor = new AggregationEventProcessor(eventDefinitionDto, searchFactory, eventProcessorDependencyCheck, stateService, moreSearch, streamService, messages);

        final AggregationResult result = AggregationResult.builder()
                .effectiveTimerange(timerange)
                .totalAggregatedMessages(1)
                .sourceStreams(ImmutableSet.of(""stream-1"", ""stream-2""))
                .keyResults(ImmutableList.of(
                        AggregationKeyResult.builder()
                                .key(ImmutableList.of(""one"", ""two""))
                                .timestamp(now)
                                .seriesValues(ImmutableList.of(
                                        AggregationSeriesValue.builder()
                                                .key(ImmutableList.of(""a""))
                                                .value(42.0d)
                                                .series(AggregationSeries.builder()
                                                        .id(""abc123"")
                                                        .function(AggregationFunction.COUNT)
                                                        .field(""source"")
                                                        .build())
                                                .build(),
                                        AggregationSeriesValue.builder()
                                                .key(ImmutableList.of(""a""))
                                                .value(23.0d)
                                                .series(AggregationSeries.builder()
                                                        .id(""abc123-no-field"")
                                                        .function(AggregationFunction.COUNT)
                                                        .build())
                                                .build(),
                                        AggregationSeriesValue.builder()
                                                .key(ImmutableList.of(""a""))
                                                .value(1.0d)
                                                .series(AggregationSeries.builder()
                                                        .id(""xyz789"")
                                                        .function(AggregationFunction.CARD)
                                                        .field(""source"")
                                                        .build())
                                                .build()
                                ))
                                .build()
                ))
                .build();

        final ImmutableList<EventWithContext> eventsWithContext = eventProcessor.eventsFromAggregationResult(eventFactory, parameters, result);

        assertThat(eventsWithContext).hasSize(1);

        assertThat(eventsWithContext.get(0)).satisfies(eventWithContext -> {
            final Event event = eventWithContext.event();

            assertThat(event.getId()).isEqualTo(event1.getId());
            assertThat(event.getMessage()).isEqualTo(event1.getMessage());
            assertThat(event.getEventTimestamp()).isEqualTo(timerange.to());
            assertThat(event.getTimerangeStart()).isEqualTo(timerange.from());
            assertThat(event.getTimerangeEnd()).isEqualTo(timerange.to());
            // Should only contain the streams that have been configured in event definition
            assertThat(event.getSourceStreams()).containsOnly(""stream-2"");

            final Message message = eventWithContext.messageContext().orElse(null);

            assertThat(message).isNotNull();
            assertThat(message.getField(""group_field_one"")).isEqualTo(""one"");
            assertThat(message.getField(""group_field_two"")).isEqualTo(""two"");
            assertThat(message.getField(""aggregation_key"")).isEqualTo(""one|two"");
            assertThat(message.getField(""aggregation_value_count_source"")).isEqualTo(42.0d);
            // Make sure that the count with a ""null"" field doesn't include the field in the name
            assertThat(message.getField(""aggregation_value_count"")).isEqualTo(23.0d);
            assertThat(message.getField(""aggregation_value_card_source"")).isEqualTo(1.0d);
        });
    }
",non-flaky,5
98594,nutzam_nutz,El2Test.callMethod,"    @Test
    public void callMethod() {
        assertEquals('j', El.eval(""'jk'.charAt(0)""));
        assertEquals(""cde"", El.eval(""\""abcde\"".substring(2)""));
        assertEquals(""b"", El.eval(""\""abcde\"".substring(1,2)""));
        assertEquals(true, El.eval(""\""abcd\"".regionMatches(2,\""ccd\"",1,2)""));
        assertEquals(""bbbb"", El.eval(""'  abab  '.replace('a','b').trim()""));
    }
",non-flaky,5
112119,apache_shardingsphere-elasticjob,StatisticRdbRepositoryTest.assertFindTaskRunningStatisticsWhenTableIsEmpty,"    @Test
    public void assertFindTaskRunningStatisticsWhenTableIsEmpty() {
        assertThat(repository.findTaskRunningStatistics(new Date()).size(), is(0));
    }
",non-flaky,5
302,apache_hadoop,TestRpcProgramNfs3.testAccess,"  @Test(timeout = 60000)
  public void testAccess() throws Exception {
    HdfsFileStatus status = nn.getRpcServer().getFileInfo(""/tmp/bar"");
    long dirId = status.getFileId();
    int namenodeId = Nfs3Utils.getNamenodeId(config);
    FileHandle handle = new FileHandle(dirId, namenodeId);
    XDR xdr_req = new XDR();
    ACCESS3Request req = new ACCESS3Request(handle);
    req.serialize(xdr_req);

    // Attempt by an unpriviledged user should fail.
    ACCESS3Response response1 = nfsd.access(xdr_req.asReadOnlyWrap(),
        securityHandlerUnpriviledged,
        new InetSocketAddress(""localhost"", 1234));
    assertEquals(""Incorrect return code"", Nfs3Status.NFS3ERR_ACCES,
        response1.getStatus());

    // Attempt by a priviledged user should pass.
    ACCESS3Response response2 = nfsd.access(xdr_req.asReadOnlyWrap(),
        securityHandler, new InetSocketAddress(""localhost"", 1234));
    assertEquals(""Incorrect return code"", Nfs3Status.NFS3_OK,
        response2.getStatus());
  }
",non-flaky,5
177969,aosp-mirror_platform_frameworks_support,ColorUtilsTest.testHSLToColor,"    @Test
    public void testHSLToColor() {
        for (TestEntry entry : sEntryList) {
            verifyHSLToColor(entry.hsl, entry.rgb);
        }
    }
",non-flaky,5
133915,cdancy_jenkins-rest,QueueApiLiveTest.testGetPendingQueueItem,"    @Test
    public void testGetPendingQueueItem() {
        IntegerResponse job1 = api.jobsApi().build(null,""QueueTest"");
        assertNotNull(job1);
        assertTrue(job1.errors().size() == 0);
        IntegerResponse job2 = api.jobsApi().build(null,""QueueTest"");
        assertNotNull(job2);
        assertTrue(job2.errors().size() == 0);

        // job2 is queue after job1, so while job1 runs, job2 is pending in the queue
        QueueItem queueItem = api().queueItem(job2.value());
        assertFalse(queueItem.cancelled());
        assertNotNull(queueItem.why());
        assertNull(queueItem.executable());
    }
",non-flaky,5
122569,vespa-engine_vespa,ChildProcess2ImplTest.testUnkillable,"    @Test
    public void testUnkillable() throws Exception {
        when(commandLine.getTimeout()).thenReturn(Duration.ofSeconds(1));
        when(commandLine.getMaxOutputBytes()).thenReturn(10L);
        when(commandLine.getOutputEncoding()).thenReturn(StandardCharsets.UTF_8);
        when(commandLine.getSigTermGracePeriod()).thenReturn(Duration.ofMinutes(2));
        when(commandLine.getSigKillGracePeriod()).thenReturn(Duration.ofMinutes(3));
        when(commandLine.toString()).thenReturn(""program arg"");

        when(timer.currentTime()).thenReturn(
                Instant.ofEpochMilli(0),
                Instant.ofEpochMilli(1));

        when(processApi.waitFor(anyLong(), any())).thenReturn(false);

        Files.write(temporaryFile, ""1234567890123"".getBytes(StandardCharsets.UTF_8));

        try (ChildProcess2Impl child =
                     new ChildProcess2Impl(commandLine, processApi, temporaryFile, timer)) {
            try {
                child.waitForTermination();
                fail();
            } catch (UnkillableChildProcessException e) {
                assertEquals(
                        ""Command 'program arg' did not terminate even after SIGTERM, +PT2M, SIGKILL, and +PT3M: stdout/stderr: '1234567890123'"",
                        e.getMessage());
            }
        }
    }
",non-flaky,5
33693,alibaba_fastjson,JSONScannerTest.checkDate16,"  @Test
  public void checkDate16() throws Throwable {

    // Arrange
    char y0 = '2';
    char y1 = '1';
    char y2 = '0';
    char y3 = '\u0830';
    char M0 = '1';
    char M1 = '\u0000';
    int d0 = 0;
    int d1 = 0;

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkDate"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""int""), Reflector.forName(""int""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, y0, y1, y2, y3, M0, M1, d0, d1);

    // Assert result
    Assert.assertEquals(false, retval);

  }
",non-flaky,5
98330,spotify_docker-client,DockerHostTest.testFromEnv,"  @Test
  public void testFromEnv() throws Exception {
    when(systemDelegate.getProperty(""os.name"")).thenReturn(""linux"");
    DockerHost.setSystemDelegate(systemDelegate);

    final String dockerHostEnvVar = DockerHost.defaultDockerEndpoint();
    final boolean isUnixSocket = dockerHostEnvVar.startsWith(""unix://"");
    final URI dockerHostUri = new URI(dockerHostEnvVar);

    final String dockerHostAndPort;
    final URI dockerHostHttpUri;
    final URI dockerTcpUri;
    final int dockerHostPort;
    final String dockerHostHost;
    if (isUnixSocket) {
      dockerHostAndPort = dockerHostEnvVar;
      dockerHostHttpUri = dockerHostUri;
      dockerTcpUri = dockerHostUri;
      dockerHostPort = 0;
      dockerHostHost = ""localhost"";
    } else {
      dockerHostAndPort = dockerHostUri.getHost() + "":"" + dockerHostUri.getPort();
      dockerHostHttpUri = new URI(""http://"" + dockerHostAndPort);
      dockerTcpUri = new URI(""tcp://"" + dockerHostAndPort);
      dockerHostPort = dockerHostUri.getPort();
      dockerHostHost = dockerHostUri.getHost();
    }

    final DockerHost dockerHost = DockerHost.fromEnv();
    assertThat(dockerHost.host(), equalTo(dockerHostAndPort));
    assertThat(dockerHost.uri(), equalTo(dockerHostHttpUri));
    assertThat(dockerHost.bindUri(), equalTo(dockerTcpUri));
    assertThat(dockerHost.port(), equalTo(dockerHostPort));
    assertThat(dockerHost.address(), equalTo(dockerHostHost));
    assertThat(dockerHost.dockerCertPath(), nullValue());
  }
",non-flaky,5
177181,line_armeria,BraveClientIntegrationTest.clientTimestampAndDurationEnclosedByParent,"    @Test
    public void clientTimestampAndDurationEnclosedByParent() {
    }
",non-flaky,5
21178,androidx_androidx,SimplePreferenceComparisonCallbackTest.testNull,"    @Test
    public void testNull() throws Exception {
        assertTrue(""Compare all null"",
                mComparisonCallback.arePreferenceContentsTheSame(mPref1, mPref2));
    }
",non-flaky,5
98049,vert-x3_vertx-mongo-client,GridFsTest.testBigFileUpload,"  @Test
  public void testBigFileUpload() {
    String originalFileName = createTempFileWithContent((1024 * 50) + 16);
    long originalLength = new File(originalFileName).length();
    String copiedFileName = createTempFile();

    AtomicReference<MongoGridFsClient> gridFsClient = new AtomicReference<>();

    Promise<MongoGridFsClient> gridFsClientPromise = Promise.promise();

    mongoClient.createGridFsBucketService(""fs"", gridFsClientPromise);

    gridFsClientPromise.future().compose(mongoGridFsClient -> {
      assertNotNull(mongoGridFsClient);
      gridFsClient.set(mongoGridFsClient);
      Promise<Void> dropPromise = Promise.promise();
      mongoGridFsClient.drop(dropPromise);
      return dropPromise.future();
    }).compose(dropped -> {
      Promise<String> uploadPromise = Promise.promise();
      gridFsClient.get().uploadFile(originalFileName, uploadPromise);
      return uploadPromise.future();
    }).compose(id -> {
      assertNotNull(id);
      Promise<Long> downloadPromise = Promise.promise();
      gridFsClient.get().downloadFileAs(originalFileName, copiedFileName, downloadPromise);
      return downloadPromise.future();
    }).compose(length -> {
      assertEquals(originalLength, length.longValue());
      return Future.succeededFuture();
    }).onComplete(event -> {
      if (event.failed()) {
        fail(event.cause());
      } else {
        testComplete();
      }
    });
    await();
  }
",non-flaky,5
177178,line_armeria,BraveClientIntegrationTest.callbackContextIsFromInvocationTime_root,"    @Test
    public void callbackContextIsFromInvocationTime_root() {
        try (SafeCloseable ignored = serverContext().push()) {
            super.callbackContextIsFromInvocationTime_root();
        }
    }
",non-flaky,5
95740,togglz_togglz,SchemaUpdaterTest.shouldMigrateToVersion1,"    @Test
    public void shouldMigrateToVersion1() throws SQLException {

        Connection connection = createConnection();
        try {

            SchemaUpdater updater = new SchemaUpdater(connection, ""TOGGLZ"", DefaultMapSerializer.multiline());
            assertFalse(updater.doesTableExist());

            updater.migrateToVersion1();

            assertTrue(updater.doesTableExist());
            assertTrue(querySucceeds(connection, ""SELECT FEATURE_NAME FROM TOGGLZ""));

        } finally {
            DbUtils.closeQuietly(connection);
        }

    }
",non-flaky,5
43098,trinodb_trino,AbstractTestIntegrationSmokeTest.testShowSchemas,"    @Test
    public void testShowSchemas()
    {
        MaterializedResult actualSchemas = computeActual(""SHOW SCHEMAS"").toTestTypes();

        MaterializedResult.Builder resultBuilder = MaterializedResult.resultBuilder(getSession(), VARCHAR)
                .row(getSession().getSchema().orElse(""tpch""));

        assertContains(actualSchemas, resultBuilder.build());
    }
",non-flaky,5
135004,undertow-io_undertow,AnnotatedEndpointTest.testThreadSafeSend,"    @Test
    public void testThreadSafeSend() throws Exception {
        AnnotatedClientEndpoint.reset();
        Session session = deployment.connectToServer(AnnotatedClientEndpoint.class, new URI(""ws://"" + DefaultServer.getHostAddress(""default"") + "":"" + DefaultServer.getHostPort(""default"") + ""/ws/threads""));
        Set<String> expected = ThreadSafetyEndpoint.expected();
        long end = System.currentTimeMillis() + 10000;
        while (!expected.isEmpty() && System.currentTimeMillis() < end) {
            expected.remove(AnnotatedClientEndpoint.message());
        }
        session.close();
        Assert.assertEquals(0, expected.size());
    }
",non-flaky,5
162442,testcontainers_testcontainers-java,DockerComposeErrorHandlingTest.simpleTest,"    @Test
    public void simpleTest() {

        DockerComposeContainer environment = new DockerComposeContainer(new File(""src/test/resources/invalid-compose.yml""))
                    .withExposedService(""something"", 123);

        VisibleAssertions.assertThrows(""starting with an invalid docker-compose file throws an exception"",
                ContainerLaunchException.class,
                () -> {
                    environment.starting(Description.createTestDescription(Object.class, ""name""));
                });
    }
",non-flaky,5
122558,vespa-engine_vespa,CommandLineTest.executeSilently,"    @Test
    public void executeSilently() {
        terminal.ignoreCommand("""");
        commandLine.add(""foo"", ""bar"").executeSilently();
        assertEquals(0, context.getSystemModificationLog().size());
        commandLine.recordSilentExecutionAsSystemModification();
        assertEquals(1, context.getSystemModificationLog().size());
        assertEquals(""Executed command: foo bar 2>&1"", context.getSystemModificationLog().get(0));
    }
",non-flaky,5
177248,line_armeria,DnsAddressEndpointGroupTest.mixedLoopbackAddresses,"    @Test
    public void mixedLoopbackAddresses() throws Exception {
        try (TestDnsServer server = new TestDnsServer(ImmutableMap.of(
                new DefaultDnsQuestion(""foo.com."", A),
                new DefaultDnsResponse(0).addRecord(ANSWER, newAddressRecord(""foo.com."", ""127.0.0.1"")),
                new DefaultDnsQuestion(""foo.com."", AAAA),
                new DefaultDnsResponse(0).addRecord(ANSWER, newAddressRecord(""foo.com."", ""::1""))
        ))) {
            try (DnsAddressEndpointGroup group =
                         DnsAddressEndpointGroup.builder(""foo.com"")
                                                .port(8080)
                                                .serverAddresses(server.addr())
                                                .resolvedAddressTypes(ResolvedAddressTypes.IPV4_PREFERRED)
                                                .build()) {

                assertThat(group.whenReady().get()).containsExactly(
                        Endpoint.of(""foo.com"", 8080).withIpAddr(""127.0.0.1""));
            }
        }
    }
",non-flaky,5
114049,aws_aws-sdk-java-v2,AsyncDeleteItemWithResponseIntegrationTest.deleteItem_returnConsumedCapacity_unset_consumedCapacityNull,"    @Test
    public void deleteItem_returnConsumedCapacity_unset_consumedCapacityNull() {
        Key key = Key.builder().partitionValue(1).sortValue(10).build();

        DeleteItemEnhancedResponse<Record> response = mappedTable.deleteItemWithResponse(r -> r.key(key)).join();

        assertThat(response.consumedCapacity()).isNull();
    }
",non-flaky,5
98052,vert-x3_vertx-mongo-client,GridFsTest.testFindAllIds,"  @Test
  public void testFindAllIds() {

    String fileName = createTempFileWithContent((1024 * 3) + 70);

    AtomicReference<MongoGridFsClient> gridFsClient = new AtomicReference<>();

    Promise<MongoGridFsClient> gridFsClientPromise = Promise.promise();

    mongoClient.createGridFsBucketService(""fs"", gridFsClientPromise);

    gridFsClientPromise.future().compose(mongoGridFsClient -> {
      assertNotNull(mongoGridFsClient);
      gridFsClient.set(mongoGridFsClient);
      Promise<Void> dropPromise = Promise.promise();
      mongoGridFsClient.drop(dropPromise);
      return dropPromise.future();
    }).compose(dropped -> {
      Promise<String> uploadPromise = Promise.promise();
      gridFsClient.get().uploadFile(fileName, uploadPromise);
      return uploadPromise.future();
    }).compose(id -> {
      assertNotNull(id);
      Promise<List<String>> findPromise = Promise.promise();
      gridFsClient.get().findAllIds(findPromise);
      return findPromise.future();
    }).compose(list -> {
      assertTrue(list.size() == 1);
      testComplete();
      return Future.succeededFuture();
    }).onComplete(event -> {
      if (event.failed()) {
        fail(event.cause());
      }
    });
    await();
  }
",non-flaky,5
133902,cdancy_jenkins-rest,CrumbIssuerApiMockTest.testGetSystemInfo,"@Test(groups = ""unit"", testName = ""CrumbIssuerApiMockTest"")
    public void testGetSystemInfo() throws Exception {
        MockWebServer server = mockWebServer();

        final String value = ""04a1109fc2db171362c966ebe9fc87f0"";
        server.enqueue(new MockResponse().setBody(""Jenkins-Crumb:"" + value).setResponseCode(200));
        JenkinsApi jenkinsApi = api(server.getUrl(""/""));
        CrumbIssuerApi api = jenkinsApi.crumbIssuerApi();
        try {
            final Crumb instance = api.crumb();
            assertNotNull(instance);
            assertTrue(instance.value().equals(value));
            assertSentAccept(server, ""GET"", ""/crumbIssuer/api/xml?xpath=concat%28//crumbRequestField,%22%3A%22,//crumb%29"", MediaType.TEXT_PLAIN);
        } finally {
            jenkinsApi.close();
            server.shutdown();
        }
    }
",non-flaky,5
99750,apache_cassandra,AsyncStreamingInputPlusTest.read_closed,"//    @Test (expected = EOFException.class)
//    public void read_closed() throws IOException
//    {
//        inputPlus.requestClosure();
//        ByteBuffer buf = ByteBuffer.allocate(1);
//        inputPlus.read(buf);
//    }
",non-flaky,5
113994,apache_struts,URLDecoderUtilTest.testURLDecodeStringValidUtf8End,"    @Test
    public void testURLDecodeStringValidUtf8End() {

        String result = URLDecoderUtil.decode(""xxxx%c3%aa"", ""UTF-8"");
        assertEquals(""xxxx\u00ea"", result);
    }
",non-flaky,5
78260,apache_beam,SplittableParDoProcessFnTest.testTrivialProcessFnPropagatesOutputWindowAndTimestamp,"  @Test
  public void testTrivialProcessFnPropagatesOutputWindowAndTimestamp() throws Exception {
    // Tests that ProcessFn correctly propagates the window and timestamp of the element
    // inside the KeyedWorkItem.
    // The underlying DoFn is actually monolithic, so this doesn't test splitting.
    DoFn<Integer, String> fn = new ToStringFn();

    Instant base = Instant.now();

    IntervalWindow w =
        new IntervalWindow(
            base.minus(Duration.standardMinutes(1)), base.plus(Duration.standardMinutes(1)));

    ProcessFnTester<Integer, String, SomeRestriction, Void, SomeRestrictionTracker> tester =
        new ProcessFnTester<>(
            base,
            fn,
            BigEndianIntegerCoder.of(),
            SerializableCoder.of(SomeRestriction.class),
            MAX_OUTPUTS_PER_BUNDLE,
            MAX_BUNDLE_DURATION);
    tester.startElement(
        WindowedValue.of(
            KV.of(42, new SomeRestriction()),
            base,
            Collections.singletonList(w),
            PaneInfo.ON_TIME_AND_ONLY_FIRING));

    assertEquals(
        Arrays.asList(
            TimestampedValue.of(""42a"", base),
            TimestampedValue.of(""42b"", base),
            TimestampedValue.of(""42c"", base)),
        tester.peekOutputElementsInWindow(w));
  }
",non-flaky,5
91408,OpenLCB_OpenLCB_Java,VerifyNodeIdHandlerTest.put,"    @Test
    public void testCTor() {
        NodeID nodeID = new NodeID(new byte[]{1,2,3,4,5,6});
        Connection testConnection = new AbstractConnection(){
            public void put(Message msg, Connection node) {
            }
",non-flaky,5
135001,undertow-io_undertow,AnnotatedEndpointTest.testEncodingWithGenericSuperclass,"    @Test
    public void testEncodingWithGenericSuperclass() throws Exception {
        final byte[] payload = ""hello"".getBytes();
        final FutureResult latch = new FutureResult();

        WebSocketTestClient client = new WebSocketTestClient(WebSocketVersion.V13, new URI(""ws://"" + DefaultServer.getHostAddress(""default"") + "":"" + DefaultServer.getHostPort(""default"") + ""/ws/encodingGenerics/Stuart""));
        client.connect();
        client.send(new TextWebSocketFrame(Unpooled.wrappedBuffer(payload)), new FrameChecker(TextWebSocketFrame.class, ""hello Stuart"".getBytes(), latch));
        latch.getIoFuture().get();
        client.destroy();
    }
",non-flaky,5
33915,apache_camel,GridFsConsumerIT.process,"    @Test
    public void testCustomFileQuery() throws Exception {
        Map<String, Object> headers = new HashMap<>();
        headers.put(Exchange.FILE_NAME, FILE_NAME);

        Exchange result = template.request(
                ""mongodb-gridfs:myDb?database={{mongodb.testDb}}&operation=create&bucket=customFileFilterTest"",
                new Processor() {
                    @Override
                    public void process(Exchange exchange) throws Exception {
                        exchange.getMessage().setBody(FILE_DATA);
                        exchange.getMessage().setHeaders(headers);
                    }
",non-flaky,5
110159,Wikidata_wikidata-toolkit,WebResourceFetcherTest.testSetUserAgent,"	@Test
	public void testSetUserAgent() {
		WebResourceFetcherImpl.setUserAgent(""My user agent"");
		assertEquals(""My user agent"", WebResourceFetcherImpl.getUserAgent());
	}
",non-flaky,5
156421,apache_commons-lang,GmtTimeZoneTest.setRawOffset,"    @Test
    public void setRawOffset() {
        assertThrows(UnsupportedOperationException.class, () -> new GmtTimeZone(false, 0, 0).setRawOffset(0));
    }
",non-flaky,5
156152,soot-oss_soot,MethodHandleTest.testConstant,"  @Test
  public void testConstant() throws Throwable {

    // First generate a classfile with a MethodHnadle
    ClassWriter cv = new ClassWriter(ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS);
    cv.visit(Opcodes.V1_7, Opcodes.ACC_PUBLIC, ""HelloMethodHandles"", null, Type.getInternalName(Object.class), null);
    MethodVisitor mv = cv.visitMethod(Opcodes.ACC_STATIC | Opcodes.ACC_PUBLIC, ""getSquareRoot"",
        Type.getMethodDescriptor(Type.getType(java.lang.invoke.MethodHandle.class)), null, null);

    mv.visitCode();

    mv.visitLdcInsn(new Handle(Opcodes.H_INVOKESTATIC, Type.getInternalName(Math.class), ""sqrt"",
        Type.getMethodDescriptor(Type.DOUBLE_TYPE, Type.DOUBLE_TYPE), false));

    mv.visitInsn(Opcodes.ARETURN);
    mv.visitEnd();

    cv.visitEnd();

    File tempDir = Files.createTempDir();
    File classFile = new File(tempDir, ""HelloMethodHandles.class"");
    Files.write(cv.toByteArray(), classFile);

    G.reset();

    String[] commandLine = { ""-pp"", ""-cp"", tempDir.getAbsolutePath(), ""-O"", ""HelloMethodHandles"", };

    System.out.println(""Command Line: "" + Arrays.toString(commandLine));

    Main.main(commandLine);

    Class<?> clazz = validateClassFile(""HelloMethodHandles"");
    java.lang.invoke.MethodHandle methodHandle
        = (java.lang.invoke.MethodHandle) clazz.getMethod(""getSquareRoot"").invoke(null);

    assertThat((Double) methodHandle.invoke(16.0), equalTo(4.0));
  }
",non-flaky,5
78273,apache_beam,StateNamespacesTest.testFromStringGlobal,"  @Test
  public void testFromStringGlobal() {
    assertStringKeyRoundTrips(intervalCoder, StateNamespaces.global());
  }
",non-flaky,5
180,finos_symphony-wdk,SendMessageIntegrationTest.sendMessageOnMessage,"@Test
void sendMessageOnMessage() throws Exception {
    final Workflow workflow = SwadlParser.fromYaml(getClass().getResourceAsStream(""/message/send-message-on-message.swadl.yaml""));
    final V4Message message = message(""Hello!"");
    engine.deploy(workflow);
    engine.onEvent(messageReceived(""/message""));
    when(messageService.send(anyString(), any(Message.class))).thenReturn(message);
    verify(messageService, timeout(5000)).send(anyString(), any(Message.class));
    assertThat(workflow).isExecuted().hasOutput(String.format(OUTPUTS_MSG_KEY, ""sendMessage1""), message).hasOutput(String.format(OUTPUTS_MSG_ID_KEY, ""sendMessage1""), message.getMessageId());
}",async wait,0
84623,apache_zookeeper,ServerConfigTest.testJvmPauseMonitorConfigured,"    @Test
    public void testJvmPauseMonitorConfigured() {
        final Long sleepTime = 444L;
        final Long warnTH = 5555L;
        final Long infoTH = 555L;

        QuorumPeerConfig qpConfig = mock(QuorumPeerConfig.class);
        when(qpConfig.isJvmPauseMonitorToRun()).thenReturn(true);
        when(qpConfig.getJvmPauseSleepTimeMs()).thenReturn(sleepTime);
        when(qpConfig.getJvmPauseWarnThresholdMs()).thenReturn(warnTH);
        when(qpConfig.getJvmPauseInfoThresholdMs()).thenReturn(infoTH);

        serverConfig.readFrom(qpConfig);

        assertEquals(sleepTime, Long.valueOf(serverConfig.getJvmPauseSleepTimeMs()));
        assertEquals(warnTH, Long.valueOf(serverConfig.getJvmPauseWarnThresholdMs()));
        assertEquals(infoTH, Long.valueOf(serverConfig.getJvmPauseInfoThresholdMs()));
        assertTrue(serverConfig.isJvmPauseMonitorToRun());
    }
",non-flaky,5
60898,apache_druid,ThriftInputRowParserTest.testParse,"  @Test
  public void testParse() throws Exception
  {
    ThriftInputRowParser parser = new ThriftInputRowParser(
        parseSpec,
        ""example/book.jar"",
        ""org.apache.druid.data.input.thrift.Book""
    );
    Book book = new Book().setDate(""2016-08-29"").setPrice(19.9).setTitle(""title"")
                          .setAuthor(new Author().setFirstName(""first"").setLastName(""last""));

    TSerializer serializer;
    byte[] bytes;

    // 1. compact
    serializer = new TSerializer(new TCompactProtocol.Factory());
    bytes = serializer.serialize(book);
    serializationAndTest(parser, bytes);

    // 2. binary + base64
    serializer = new TSerializer(new TBinaryProtocol.Factory());
    serializationAndTest(parser, StringUtils.encodeBase64(serializer.serialize(book)));

    // 3. json
    serializer = new TSerializer(new TJSONProtocol.Factory());
    bytes = serializer.serialize(book);
    serializationAndTest(parser, bytes);
  }
",non-flaky,5
114001,apache_struts,StrutsTestCaseTest.shouldPortletContextBeAvailable,"    @Test
    public void shouldPortletContextBeAvailable() throws Exception {
        // given
        assertNull(ActionContext.getContext().get(StrutsStatics.STRUTS_PORTLET_CONTEXT));

        // when
        String output = executeAction(""/test/testAction.action"");
        assertEquals(""Hello"", output);

        // then
        Object portletContext = ActionContext.getContext().get(StrutsStatics.STRUTS_PORTLET_CONTEXT);
        assertNotNull(portletContext);
        assertTrue(portletContext instanceof PortletContext);
    }
",non-flaky,5
38205,palantir_atlasdb,RocksDbKeyValueServiceTest.testReadBeforeTime,"    @Test
    public void testReadBeforeTime() {
        final Cell cell = Cell.create(""r1"".getBytes(), COMMIT_TS_COLUMN);
        db.put(TABLE, ImmutableMap.of(cell, ""v1"".getBytes()), 2);
        final Map<Cell, Value> res = db.get(TABLE, ImmutableMap.of(cell, 2L));
        assertTrue(res.isEmpty());
    }
",non-flaky,5
337,apache_hadoop,TestClientAccessPrivilege.testClientAccessPrivilegeForRemove,"  @Test(timeout = 60000)
  public void testClientAccessPrivilegeForRemove() throws Exception {
    // Configure ro access for nfs1 service
    config.set(""dfs.nfs.exports.allowed.hosts"", ""* ro"");

    // Start nfs
    Nfs3 nfs = new Nfs3(config);
    nfs.startServiceInternal(false);

    RpcProgramNfs3 nfsd = (RpcProgramNfs3) nfs.getRpcProgram();

    // Create a remove request
    HdfsFileStatus status = nn.getRpcServer().getFileInfo(testdir);
    long dirId = status.getFileId();
    int namenodeId = Nfs3Utils.getNamenodeId(config);

    XDR xdr_req = new XDR();
    FileHandle handle = new FileHandle(dirId, namenodeId);
    handle.serialize(xdr_req);
    xdr_req.writeString(""f1"");

    // Remove operation
    REMOVE3Response response = nfsd.remove(xdr_req.asReadOnlyWrap(),
        securityHandler, new InetSocketAddress(""localhost"", 1234));

    // Assert on return code
    assertEquals(""Incorrect return code"", Nfs3Status.NFS3ERR_ACCES,
        response.getStatus());

  }
",non-flaky,5
114115,aws_aws-sdk-java-v2,InstantAsStringAttributeConvertersTest.InstantAsStringAttributeConverterExceedHigherBoundTest,"    @Test
    public void InstantAsStringAttributeConverterExceedHigherBoundTest() {
        assertFails(() -> transformTo(CONVERTER, EnhancedAttributeValue.fromString(""+1000000001-01-01T00:00:00Z"")
                                                                       .toAttributeValue()));
    }
",non-flaky,5
21237,androidx_androidx,PreferencePersistTest.stringSet_retrieveWhenEmpty_returnsDefault,"    @Test
    public void stringSet_retrieveWhenEmpty_returnsDefault() {
        final Set<String> expected = TEST_DEFAULT_STR_SET;

        Set<String> result = mPreference.getStringSet(expected);

        assertThat(result, containsInAnyOrder(expected.toArray()));
    }
",non-flaky,5
160412,ConsenSys_teku,ChainDataProviderTest.getStateSyncCommittees_shouldReturnEmptyListBeforeAltair,"  @Test
  public void getStateSyncCommittees_shouldReturnEmptyListBeforeAltair()
      throws ExecutionException, InterruptedException {
    final ChainDataProvider provider =
        new ChainDataProvider(spec, recentChainData, combinedChainDataClient);
    final tech.pegasys.teku.spec.datastructures.state.beaconstate.BeaconState internalState =
        data.randomBeaconState();
    when(mockCombinedChainDataClient.getBestState()).thenReturn(Optional.of(internalState));

    final SafeFuture<Optional<StateSyncCommittees>> future =
        provider.getStateSyncCommittees(""head"", Optional.empty());
    assertThat(future.get().get()).isEqualTo(new StateSyncCommittees(List.of(), List.of()));
  }
",non-flaky,5
156138,soot-oss_soot,LoadingTest.testLoadingJava9ClassFromCI,"  @Test
  public void testLoadingJava9ClassFromCI() {
    G.reset();
    Main.main(new String[] { ""-soot-modulepath"", ""VIRTUAL_FS_FOR_JDK"", ""-pp"", ""-src-prec"", ""only-class"",
        ""java.lang.invoke.VarHandle"" });

    SootClass klass = Scene.v().getSootClass(""java.lang.invoke.VarHandle"");
    assertTrue(klass.getName().equals(""java.lang.invoke.VarHandle""));
    assertTrue(klass.moduleName.equals(""java.base""));

  }
",non-flaky,5
94687,square_okhttp,CacheAdapterTest.put,"  @Test public void put_httpPost() throws Exception {
      @Override public CacheRequest put(URI uri, URLConnection connection) throws IOException {
        try {
          assertTrue(connection instanceof HttpURLConnection);
          assertFalse(connection instanceof HttpsURLConnection);

          assertEquals(0, connection.getContentLength());

          HttpURLConnection httpUrlConnection = (HttpURLConnection) connection;
          assertEquals(""POST"", httpUrlConnection.getRequestMethod());
          assertTrue(httpUrlConnection.getDoInput());
          assertTrue(httpUrlConnection.getDoOutput());

          assertEquals(""Fantastic"", httpUrlConnection.getResponseMessage());
          assertEquals(toUri(serverUrl), uri);
          assertEquals(serverUrl, connection.getURL());
          assertEquals(""value"", connection.getRequestProperty(""key""));

          // Check retrieval by string key.
          assertEquals(statusLine, httpUrlConnection.getHeaderField(null));
          assertEquals(""c"", httpUrlConnection.getHeaderField(""A""));
          // The RI and OkHttp supports case-insensitive matching for this method.
          assertEquals(""c"", httpUrlConnection.getHeaderField(""a""));
          return null;
        } catch (Throwable t) {
          throw new IOException(""unexpected cache failure"", t);
        }
      }
",non-flaky,5
38282,palantir_atlasdb,AbstractTransactionTest.testKeyValueRanges2,"    @Test
    public void testKeyValueRanges2() {
        putDirect(""row1"", ""col1"", """", 0);
        putDirect(""row2"", ""col1"", """", 0);
        putDirect(""row2"", ""col2"", """", 0);

        final RangeRequest allRange = RangeRequest.builder().build();
        final RangeRequest oneRange = RangeRequest.builder().startRowInclusive(""row2"".getBytes()).build();
        final RangeRequest allRangeBatch = RangeRequest.builder().batchHint(3).build();
        Map<RangeRequest, TokenBackedBasicResultsPage<RowResult<Value>, byte[]>> ranges = keyValueService.getFirstBatchForRanges(TEST_TABLE, ImmutableList.of(allRange, oneRange, allRangeBatch), 1);
        assertTrue(ranges.get(allRange).getResults().size()>=1);
        assertEquals(2, ranges.get(allRangeBatch).getResults().size());
        assertFalse(ranges.get(allRangeBatch).moreResultsAvailable());
        assertEquals(1, ranges.get(oneRange).getResults().size());
    }
",non-flaky,5
179503,abel533_Mapper,StyleTest.testNormal,"    @Test
    public void testNormal() {
        for (String field : fields) {
            Assert.assertEquals(field, StringUtil.convertByStyle(field, Style.normal));
        }
    }
",non-flaky,5
26912,wildfly_wildfly,JSFModuleIdFactoryTestCase.computeSlotTest,"    @Test
    public void computeSlotTest() {
        Assert.assertEquals(""main"", factory.computeSlot(""main""));
        Assert.assertEquals(""main"", factory.computeSlot(null));
        Assert.assertEquals(""main"", factory.computeSlot(JsfVersionMarker.JSF_2_0));
        Assert.assertEquals(""myfaces2"", factory.computeSlot(""myfaces2""));
    }
",non-flaky,5
84582,apache_zookeeper,WriteLockTest.testRun,"    @Test
    public void testRun() throws Exception {
        runTest(3);
    }
",non-flaky,5
156435,apache_commons-lang,DateUtilsFragmentTest.testSecondFragmentInLargerUnitWithDate,"    @Test
    public void testSecondFragmentInLargerUnitWithDate() {
        assertEquals(0, DateUtils.getFragmentInSeconds(aDate, Calendar.SECOND));
        assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.SECOND));
        assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.SECOND));
        assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.SECOND));
    }
",non-flaky,5
94603,square_okhttp,OkUrlFactoryTest.checkURLPermitted,"  @Test
  public void testURLFilter() throws Exception {
    server.enqueue(new MockResponse()
        .setBody(""B""));
    final URL blockedURL = server.url(""/a"").url();
    factory.setUrlFilter(new URLFilter() {
      @Override
      public void checkURLPermitted(URL url) throws IOException {
        if (blockedURL.equals(url)) {
          throw new IOException(""Blocked"");
        }
      }
",non-flaky,5
94635,square_okhttp,InterceptorTest.intercept,"  @Test public void networkInterceptorThrowsRuntimeExceptionAsynchronous() throws Exception {
      @Override public Response intercept(Chain chain) throws IOException {
        throw new RuntimeException(""boom!"");
      }
",non-flaky,5
156418,apache_commons-lang,GmtTimeZoneTest.minutesOutOfRange,"    @Test
    public void minutesOutOfRange() {
        assertThrows(IllegalArgumentException.class, () -> new GmtTimeZone(false, 0, 60));
    }
",non-flaky,5
112157,apache_shardingsphere-elasticjob,JobConfigurationGsonTypeAdapterTest.assertToSimpleJobJson,"    @Test
    public void assertToSimpleJobJson() {
        assertThat(GsonFactory.getGson().toJson(new TestJobRootConfiguration(
                new TestSimpleJobConfiguration(ThrowJobExceptionHandler.class.getCanonicalName(), DefaultExecutorServiceHandler.class.getCanonicalName()).getTypeConfig())),
                is(APIJsonConstants.getSimpleJobJson(ThrowJobExceptionHandler.class.getCanonicalName())));
    }
",non-flaky,5
70835,apache_kafka,WorkerSourceTaskTest.answer,"    @Test
    public void testFailureInPoll() throws Exception {
        createWorkerTask();

        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));
        EasyMock.expectLastCall();
        sourceTask.start(TASK_PROPS);
        EasyMock.expectLastCall();
        statusListener.onStartup(taskId);
        EasyMock.expectLastCall();

        final CountDownLatch pollLatch = new CountDownLatch(1);
        final RuntimeException exception = new RuntimeException();
        EasyMock.expect(sourceTask.poll()).andAnswer(new IAnswer<List<SourceRecord>>() {
            @Override
            public List<SourceRecord> answer() throws Throwable {
                pollLatch.countDown();
                throw exception;
            }
",non-flaky,5
38228,palantir_atlasdb,TextUtilsTest.testcleanUTF8String,"    @Test
    public void testcleanUTF8String() throws Exception {
        String cleanString = ""Hello World"";
        String dirtyString = ""Hello\u0007World"";

        String cleanedString = TextUtils.cleanUTF8String(dirtyString);
        assertEquals(cleanString, cleanedString);
        assertEquals(cleanString, TextUtils.cleanUTF8String(cleanString));
    }
",non-flaky,5
86086,graylog2_graylog2-server,EventDefinitionHandlerTest.updateWithErrors,"    @Test
    public void updateWithErrors() {
        final String newTitle = ""A NEW TITLE "" + DateTime.now(DateTimeZone.UTC).toString();
        final String newDescription = ""A NEW DESCRIPTION "" + DateTime.now(DateTimeZone.UTC).toString();

        final EventDefinitionDto existingDto = eventDefinitionService.get(""54e3deadbeefdeadbeef0000"").orElse(null);
        final JobDefinitionDto existingJobDefinition = jobDefinitionService.get(""54e3deadbeefdeadbeef0001"").orElse(null);
        final JobTriggerDto existingTrigger = jobTriggerService.get(""54e3deadbeefdeadbeef0002"").orElse(null);

        assertThat(existingDto).isNotNull();
        assertThat(existingJobDefinition).isNotNull();
        assertThat(existingTrigger).isNotNull();

        final EventDefinitionDto updatedDto = existingDto.toBuilder()
                .title(newTitle)
                .description(newDescription)
                .build();

        doThrow(new NullPointerException(""yolo1"")).when(eventDefinitionService).save(any());

        assertThatCode(() -> handler.update(updatedDto, true))
                .isInstanceOf(NullPointerException.class)
                .hasMessageContaining(""yolo1"");

        assertThat(eventDefinitionService.get(existingDto.id())).isPresent().get().satisfies(dto -> {
            assertThat(dto.id()).isEqualTo(existingDto.id());
            assertThat(dto.title()).isEqualTo(existingDto.title());
            assertThat(dto.description()).isEqualTo(existingDto.description());
        });

        assertThat(jobDefinitionService.get(""54e3deadbeefdeadbeef0001"")).isPresent().get().satisfies(definition -> {
            assertThat(definition.title()).isEqualTo(existingJobDefinition.title());
            assertThat(definition.description()).isEqualTo(existingJobDefinition.description());
        });

        // Reset all before doing new stubs
        reset(eventDefinitionService);
        reset(jobDefinitionService);
        reset(jobTriggerService);

        doThrow(new NullPointerException(""yolo2"")).when(jobDefinitionService).save(any());

        assertThatCode(() -> handler.update(updatedDto, true))
                .isInstanceOf(NullPointerException.class)
                .hasMessageContaining(""yolo2"");

        assertThat(eventDefinitionService.get(existingDto.id())).isPresent().get().satisfies(dto -> {
            assertThat(dto.id()).isEqualTo(existingDto.id());
            assertThat(dto.title()).isEqualTo(existingDto.title());
            assertThat(dto.description()).isEqualTo(existingDto.description());
        });

        assertThat(jobDefinitionService.get(""54e3deadbeefdeadbeef0001"")).isPresent().get().satisfies(definition -> {
            assertThat(definition.title()).isEqualTo(existingJobDefinition.title());
            assertThat(definition.description()).isEqualTo(existingJobDefinition.description());
        });

        // Reset all before doing new stubs
        reset(eventDefinitionService);
        reset(jobDefinitionService);
        reset(jobTriggerService);

        doThrow(new NullPointerException(""yolo3"")).when(jobTriggerService).update(any());

        assertThatCode(() -> handler.update(updatedDto, true))
                .isInstanceOf(NullPointerException.class)
                .hasMessageContaining(""yolo3"");

        assertThat(eventDefinitionService.get(existingDto.id())).isPresent().get().satisfies(dto -> {
            assertThat(dto.id()).isEqualTo(existingDto.id());
            assertThat(dto.title()).isEqualTo(existingDto.title());
            assertThat(dto.description()).isEqualTo(existingDto.description());
        });

        assertThat(jobDefinitionService.get(""54e3deadbeefdeadbeef0001"")).isPresent().get().satisfies(definition -> {
            assertThat(definition.title()).isEqualTo(existingJobDefinition.title());
            assertThat(definition.description()).isEqualTo(existingJobDefinition.description());
        });
    }
",non-flaky,5
97690,vojtechhabarta_typescript-generator,TaggedUnionsTest.testTaggedUnionsWithInterfaces,"    @Test
    public void testTaggedUnionsWithInterfaces() {
        final Settings settings = TestUtils.settings();
        final String output = new TypeScriptGenerator(settings).generateTypeScript(Input.from(IShape2.class));
        final String expected = (
                ""\n"" +
                ""interface IShape2 {\n"" +
                ""    kind: 'circle' | 'square' | 'rectangle';\n"" +
                ""}\n"" +
                ""\n"" +
                ""interface CSquare2 extends IQuadrilateral2 {\n"" +
                ""    kind: 'square';\n"" +
                ""    size: number;\n"" +
                ""}\n"" +
                ""\n"" +
                ""interface CRectangle2 extends IQuadrilateral2 {\n"" +
                ""    kind: 'rectangle';\n"" +
                ""    width: number;\n"" +
                ""    height: number;\n"" +
                ""}\n"" +
                ""\n"" +
                ""interface CCircle2 extends IShape2 {\n"" +
                ""    kind: 'circle';\n"" +
                ""    radius: number;\n"" +
                ""}\n"" +
                ""\n"" +
                ""interface IQuadrilateral2 extends IShape2 {\n"" +
                ""    kind: 'square' | 'rectangle';\n"" +
                ""}\n"" +
                ""\n"" +
                ""type IShape2Union = CSquare2 | CRectangle2 | CCircle2;\n"" +
                """"
                ).replace('\'', '""');
        Assert.assertEquals(expected, output);
    }
",non-flaky,5
175833,GoogleCloudPlatform_google-cloud-eclipse,BucketNameValidatorTest.testValidation_tooLongNameWithoutDot,"  @Test
  public void testValidation_tooLongNameWithoutDot() {
    assertThat(validator.validate(LENGTH_63 + ""4"").getSeverity(), is(IStatus.ERROR));
  }
",non-flaky,5
170542,eclipse_jetty.project,TestServletAnnotations.testWebServletAnnotationReplaceDefault,"    @Test
    public void testWebServletAnnotationReplaceDefault() throws Exception
    {
        //if the existing servlet mapping TO A DIFFERENT SERVLET IS from a default descriptor we
        //DO allow the annotation to replace the mapping.
        WebAppContext wac = new WebAppContext();
        ServletHolder defaultServlet = new ServletHolder();
        defaultServlet.setClassName(""org.eclipse.jetty.servlet.DefaultServlet"");
        defaultServlet.setName(""default"");
        wac.getServletHandler().addServlet(defaultServlet);

        ServletMapping m = new ServletMapping();
        m.setPathSpec(""/"");
        m.setServletName(""default"");
        m.setFromDefaultDescriptor(true);  //this mapping will be from a default descriptor
        wac.getServletHandler().addServletMapping(m);

        ServletMapping m2 = new ServletMapping();
        m2.setPathSpec(""/other"");
        m2.setServletName(""default"");
        m2.setFromDefaultDescriptor(true);  //this mapping will be from a default descriptor
        wac.getServletHandler().addServletMapping(m2);

        WebServletAnnotation annotation = new WebServletAnnotation(wac, ""org.eclipse.jetty.annotations.ServletD"", null);
        annotation.apply();

        //test that only the mapping for ""/"" was removed from the mappings to the default servlet
        ServletMapping[] resultMappings = wac.getServletHandler().getServletMappings();
        assertNotNull(resultMappings);
        assertEquals(2, resultMappings.length);
        for (ServletMapping r : resultMappings)
        {
            if (r.getServletName().equals(""default""))
            {
                assertEquals(1, r.getPathSpecs().length);
                assertEquals(""/other"", r.getPathSpecs()[0]);
            }
            else if (r.getServletName().equals(""DServlet""))
            {
                assertEquals(2, r.getPathSpecs().length);
                for (String p : r.getPathSpecs())
                {
                    if (!p.equals(""/"") && !p.equals(""/bah/*""))
                        fail(""Unexpected path"");
                }
            }
            else
                fail(""Unexpected servlet mapping: "" + r);
        }
    }
",non-flaky,5
170525,eclipse_jetty.project,TestAnnotationConfiguration.testRelativeOrderingWithSCIs,"    @Test
    public void testRelativeOrderingWithSCIs() throws Exception
    {
        // test a 3.1 webapp with RELATIVE ORDERING loads sci from
        // equivalent of WEB-INF/classes first as well as container path

        ClassLoader old = Thread.currentThread().getContextClassLoader();

        File orderedFragmentJar = new File(jarDir, ""test-sci-with-ordering.jar"");
        assertTrue(orderedFragmentJar.exists());
        URLClassLoader orderedLoader = new URLClassLoader(new URL[]{
            orderedFragmentJar.toURI().toURL(), testSciJar.toURI().toURL(),
            targetClasses.getURI().toURL(), webInfClasses.getURI().toURL()
        },
            containerLoader);
        Thread.currentThread().setContextClassLoader(orderedLoader);

        try
        {
            AnnotationConfiguration config = new AnnotationConfiguration();
            WebAppContext context = new WebAppContext();
            List<ServletContainerInitializer> scis;
            context.setClassLoader(orderedLoader);
            context.getMetaData().setWebDescriptor(new WebDescriptor(Resource.newResource(web31true)));
            RelativeOrdering ordering = new RelativeOrdering(context.getMetaData());
            context.getMetaData().setOrdering(ordering);
            context.getMetaData().addWebInfResource(Resource.newResource(orderedFragmentJar.toURI().toURL()));
            context.getMetaData().addWebInfResource(Resource.newResource(testSciJar.toURI().toURL()));
            context.getMetaData().setWebInfClassesResources(classes);
            context.getMetaData().orderFragments();
            context.getServletContext().setEffectiveMajorVersion(3);
            context.getServletContext().setEffectiveMinorVersion(1);
            scis = config.getNonExcludedInitializers(context);
            assertNotNull(scis);
            assertEquals(4, scis.size());
            assertEquals(""com.acme.ServerServletContainerInitializer"", scis.get(0).getClass().getName()); //container path
            assertEquals(""com.acme.webinf.WebInfClassServletContainerInitializer"", scis.get(1).getClass().getName()); // web-inf
            assertEquals(""com.acme.ordering.AcmeServletContainerInitializer"", scis.get(2).getClass().getName()); // first
            assertEquals(""com.acme.initializer.FooInitializer"", scis.get(3).getClass().getName()); //other in ordering
        }
        finally
        {
            Thread.currentThread().setContextClassLoader(old);
        }
    }
",non-flaky,5
84643,apache_zookeeper,EnforceAuthenticationTest.testEnforceAuthenticationNewBehaviour,"    @Test
    public void testEnforceAuthenticationNewBehaviour() throws Exception {
        Map<String, String> prop = new HashMap<>();
        prop.put(removeZooKeeper(AuthenticationHelper.ENFORCE_AUTH_ENABLED), ""true"");
        prop.put(removeZooKeeper(AuthenticationHelper.ENFORCE_AUTH_SCHEMES), ""digest"");
        //digest auth provider is started by default, so no need to
        //prop.put(""authProvider.1"", DigestAuthenticationProvider.class.getName());
        startServer(prop);
        testEnforceAuthNewBehaviour(false);
    }
",non-flaky,5
78252,apache_beam,StateInternalsTest.testMergeCombiningValueIntoNewNamespace,"  @Test
  public void testMergeCombiningValueIntoNewNamespace() throws Exception {
    CombiningState<Integer, int[], Integer> value1 = underTest.state(NAMESPACE_1, SUM_INTEGER_ADDR);
    CombiningState<Integer, int[], Integer> value2 = underTest.state(NAMESPACE_2, SUM_INTEGER_ADDR);
    CombiningState<Integer, int[], Integer> value3 = underTest.state(NAMESPACE_3, SUM_INTEGER_ADDR);

    value1.add(5);
    value2.add(10);
    value1.add(6);

    StateMerging.mergeCombiningValues(Arrays.asList(value1, value2), value3);

    // Merging clears the old values and updates the result value.
    assertThat(value1.read(), equalTo(0));
    assertThat(value2.read(), equalTo(0));
    assertThat(value3.read(), equalTo(21));
  }
",non-flaky,5
156403,apache_commons-lang,FastDateFormatTest.test_getInstance_String_Locale,"    @Test
    public void test_getInstance_String_Locale() {
        final FastDateFormat format1 = FastDateFormat.getInstance(""MM/DD/yyyy"", Locale.GERMANY);
        final FastDateFormat format2 = FastDateFormat.getInstance(""MM/DD/yyyy"");
        final FastDateFormat format3 = FastDateFormat.getInstance(""MM/DD/yyyy"", Locale.GERMANY);

        assertNotSame(format1, format2);
        assertSame(format1, format3);
        assertEquals(Locale.GERMANY, format1.getLocale());
    }
",non-flaky,5
97728,vojtechhabarta_typescript-generator,OptionalAnnotationTest.testJackson1OptionalAnnotation,"    @Test
    public void testJackson1OptionalAnnotation() {
        Settings settings = new Settings();
        settings.optionalAnnotations.add(Nullable.class);
        ModelParser parser = new Jackson1Parser(settings, new DefaultTypeProcessor());
        testModel(parser.parseModel(Jackson1Bean.class), true);
    }
",non-flaky,5
20922,NationalSecurityAgency_timely,WriteTimelyPluginTest.testWriteAfterServerRestart,"    @Test
    public void testWriteAfterServerRestart() throws Exception {
        Thread t = new Thread(server);
        t.start();
        setupPlugin();
        while (!server.ready()) {
            Thread.sleep(1000);
        }
        Assert.assertEquals(0, plugin.write(createMetric()));
        Thread.sleep(100);
        Assert.assertTrue(server.messageReceived());
        server.shutdown();
        t.join();
        Thread.sleep(2000);

        server.create();
        Thread t2 = new Thread(server);
        t2.start();
        // Need to call this again because the server is not guaranteed to be
        // listening on the same local port as the first time that it was
        // started
        setupPlugin();
        while (!server.ready()) {
            Thread.sleep(1000);
            // Keep sending metrics to plugin to force reconnect
            int result = plugin.write(createMetric());
            System.out.println(""Wrote to client, result: "" + result);
            Assert.assertEquals(0, result);
        }
        Assert.assertEquals(0, plugin.write(createMetric()));
        Thread.sleep(1000);
        Assert.assertTrue(server.messageReceived());
        plugin.shutdown();
        server.shutdown();
        t2.join();
    }
",non-flaky,5
231,wildfly_wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993.testListBindings,"@Test
public void testListBindings() throws Exception {
    bindList();
    NamingEnumeration<Binding> results = namingContext.listBindings(new CompositeName());
    checkListResults(results);
    results = (NamingEnumeration<Binding>) testActionPermission(JndiPermission.ACTION_LIST_BINDINGS, namingContext, null);
    checkListResults(results);
}",test order dependency,4
112659,tbsalling_aismessages,AidToNavigationReportTest.canDecode1,"    @Test
    public void canDecode1() {
        AISMessage aisMessage = AISMessage.create(NMEAMessage.fromString(""!AIVDO,1,1,,A,E>lt;Lqaps0h3V:@;4a:@0b7W005J`6Dq9e<000003v010,4*7E""));

        System.out.println(aisMessage.toString());

        assertEquals(AISMessageType.AidToNavigationReport, aisMessage.getMessageType());
        assertEquals((Integer) 0, aisMessage.getRepeatIndicator());
        AidToNavigationReport message = (AidToNavigationReport) aisMessage;
        assertEquals(MMSI.valueOf(995036019), message.getSourceMmsi());
        assertEquals(AidType.BeaconSpecialMark, message.getAidType());
        assertEquals(false, message.getAssignedMode());
        assertEquals(""S16A GLT VIRT ATON"", message.getName());
        assertEquals(null, message.getNameExtension());
        assertEquals(false, message.getOffPosition());
        assertEquals(Integer.valueOf(60), message.getSecond());
        assertEquals(Integer.valueOf(0), message.getToBow());
        assertEquals(Integer.valueOf(0), message.getToPort());
        assertEquals(Integer.valueOf(0), message.getToStern());
        assertEquals(Integer.valueOf(0), message.getToStarboard());
        assertEquals(true, message.getVirtualAid());
        assertEquals(false, message.getPositionAccurate());
        assertEquals(Float.valueOf(-23.936693f), message.getLatitude()); // lat = 111001001001101101001100000b = -23,9366933333
        assertEquals(Float.valueOf(151.44344f), message.getLongitude());
        assertEquals(PositionFixingDevice.Surveyed, message.getPositionFixingDevice());
        assertFalse(message.getRaimFlag());
    }
",non-flaky,5
53127,cloudfoundry_uaa,UaaMetricsEmitterIT.assert_generic_metrics,"    @Test
    public void assert_generic_metrics() throws IOException {
        String data1 = firstBatch.get(statsDKey);
        String data2 = secondBatch.get(statsDKey);

        assertNotNull(""Expected to find message for:'"" + statsDKey + ""' in the first batch."", data1);
        long first = IntegrationTestUtils.getStatsDValueFromMessage(data1);
        assertThat(statsDKey + "" first value must have a positive value."", first, greaterThanOrEqualTo(0l));

        assertNotNull(""Expected to find message for:'""+statsDKey+""' in the second batch."", data2);
        long second = IntegrationTestUtils.getStatsDValueFromMessage(data2);
        assertThat(statsDKey + "" second value must have a positive value."", second, greaterThanOrEqualTo(0l));
    }
",non-flaky,5
118701,netty_netty,SmtpRequestEncoderTest.testEncodeDataAndContent,"    @Test
    public void testEncodeDataAndContent() {
        EmbeddedChannel channel = new EmbeddedChannel(new SmtpRequestEncoder());
        assertTrue(channel.writeOutbound(SmtpRequests.data()));
        assertTrue(channel.writeOutbound(
                new DefaultSmtpContent(Unpooled.copiedBuffer(""Subject: Test\r\n\r\n"", CharsetUtil.US_ASCII))));
        assertTrue(channel.writeOutbound(
                new DefaultLastSmtpContent(Unpooled.copiedBuffer(""Test\r\n"", CharsetUtil.US_ASCII))));
        assertTrue(channel.finish());

        assertEquals(""DATA\r\nSubject: Test\r\n\r\nTest\r\n.\r\n"", getWrittenString(channel));
    }
",non-flaky,5
77530,dropwizard_dropwizard,DropwizardAppRuleConfigOverrideTest.supportsSuppliedConfigAttributeOverrides,"    @Test
    public void supportsSuppliedConfigAttributeOverrides() throws Exception {
        assertThat(System.getProperty(""app-rule.extra"")).isEqualTo(""supplied"");
        assertThat(System.getProperty(""dw.extra"")).isEqualTo(""supplied again"");
    }
",non-flaky,5
91402,OpenLCB_OpenLCB_Java,OlcbConnectionTest.onConnect,"    @Test
    public void testCTor() {
        NodeID nodeID = new NodeID(new byte[]{1,2,3,4,5,6});
        OlcbConnection t = new OlcbConnection(nodeID,""test"",5,new OlcbConnection.ConnectionListener(){
            @Override
            public void onConnect(){
            }
",non-flaky,5
77542,dropwizard_dropwizard,ResourceTestRuleTest.testGetImmutableListOfPersons,"    @Test
    public void testGetImmutableListOfPersons() {
        assertThat(resourceTestRule.target(""/person/blah/list"").request()
                .get(new GenericType<List<Person>>() {
                })).isEqualTo(Collections.singletonList(person));
    }
",non-flaky,5
156081,soot-oss_soot,HelloTestingFrameworkTest.findsTarget,"  @Test
  public void findsTarget() {
    final SootMethod sootMethod = prepareTarget(""<"" + TEST_TARGET_CLASS + "": void helloWorld()>"", TEST_TARGET_CLASS);
    Assert.assertNotNull(""Could not find target method. System test setup seems to be incorrect."", sootMethod);
    Assert.assertTrue(sootMethod.isConcrete());
    Assert.assertNotNull(sootMethod.retrieveActiveBody());
  }
",non-flaky,5
104651,apache_pinot,OfflineClusterIntegrationTest.testFilterWithInvertedIndexUDF,"  @Test
  public void testFilterWithInvertedIndexUDF()
      throws Exception {
    int daysSinceEpoch = 16138;
    long secondsSinceEpoch = 16138 * 24 * 60 * 60;

    String[] origins = new String[]{
        ""ATL"", ""ORD"", ""DFW"", ""DEN"", ""LAX"", ""IAH"", ""SFO"", ""PHX"", ""LAS"", ""EWR"", ""MCO"", ""BOS"", ""SLC"", ""SEA"", ""MSP"", ""CLT"",
        ""LGA"", ""DTW"", ""JFK"", ""BWI""
    };
    String pqlQuery;
    for (String origin : origins) {
      pqlQuery =
          ""SELECT count(*) FROM mytable WHERE Origin = \"""" + origin + ""\"" AND DaysSinceEpoch = "" + daysSinceEpoch;
      JsonNode response1 = postQuery(pqlQuery);
      pqlQuery = ""SELECT count(*) FROM mytable WHERE Origin = \"""" + origin
          + ""\"" AND timeConvert(DaysSinceEpoch,'DAYS','SECONDS') = "" + secondsSinceEpoch;
      JsonNode response2 = postQuery(pqlQuery);
      double val1 = response1.get(""aggregationResults"").get(0).get(""value"").asDouble();
      double val2 = response2.get(""aggregationResults"").get(0).get(""value"").asDouble();
      assertEquals(val1, val2);
    }
  }
",non-flaky,5
21194,androidx_androidx,PreferenceDataStoreTest.testSetOnPreferenceManagerGetOnPreference,"    @Test
    public void testSetOnPreferenceManagerGetOnPreference() {
        Preference preference = new Preference(mContext);
        mScreen.addPreference(preference);

        mManager.setPreferenceDataStore(mDataStore);

        assertEquals(mDataStore, preference.getPreferenceDataStore());
        assertNull(preference.getSharedPreferences());
    }
",non-flaky,5
77436,opensearch-project_OpenSearch,DependencyLicensesTaskTests.givenProjectWithLicensesDirButNoDependenciesThenShouldThrowException,"    @Test
    public void givenProjectWithLicensesDirButNoDependenciesThenShouldThrowException() throws Exception {
        expectedException.expect(GradleException.class);
        expectedException.expectMessage(containsString(""exists, but there are no dependencies""));

        getLicensesDir(project).mkdir();
        task.get().checkDependencies();
    }
",non-flaky,5
76933,Tencent_Firestorm,RssShuffleWriterTest.onReceive,"  @Test
  public void writeTest() throws Exception {
    SparkConf conf = new SparkConf();
    conf.setAppName(""testApp"").setMaster(""local[2]"")
        .set(RssClientConfig.RSS_WRITER_SERIALIZER_BUFFER_SIZE, ""32"")
        .set(RssClientConfig.RSS_WRITER_BUFFER_SIZE, ""32"")
        .set(RssClientConfig.RSS_TEST_FLAG, ""true"")
        .set(RssClientConfig.RSS_WRITER_BUFFER_SEGMENT_SIZE, ""64"")
        .set(RssClientConfig.RSS_WRITER_SEND_CHECK_TIMEOUT, ""10000"")
        .set(RssClientConfig.RSS_WRITER_SEND_CHECK_INTERVAL, ""1000"")
        .set(RssClientConfig.RSS_WRITER_BUFFER_SPILL_SIZE, ""128"")
        .set(RssClientConfig.RSS_COORDINATOR_QUORUM, ""127.0.0.1:12345,127.0.0.1:12346"");
    // init SparkContext
    List<ShuffleBlockInfo> shuffleBlockInfos = Lists.newArrayList();
    SparkContext sc = SparkContext.getOrCreate(conf);
    Map<String, Set<Long>> successBlockIds = Maps.newConcurrentMap();
    EventLoop<AddBlockEvent> testLoop = new EventLoop<AddBlockEvent>(""test"") {
      @Override
      public void onReceive(AddBlockEvent event) {
        assertEquals(""taskId"", event.getTaskId());
        shuffleBlockInfos.addAll(event.getShuffleDataInfoList());
        Set<Long> blockIds = event.getShuffleDataInfoList().parallelStream()
            .map(sdi -> sdi.getBlockId()).collect(Collectors.toSet());
        successBlockIds.putIfAbsent(event.getTaskId(), Sets.newConcurrentHashSet());
        successBlockIds.get(event.getTaskId()).addAll(blockIds);
      }
",non-flaky,5
156130,soot-oss_soot,LambdaMetaFactoryAdaptTest.returnBoxing,"  @Test
  public void returnBoxing() {
    String testClass = ""soot.lambdaMetaFactory.Adapt"";

    final SootMethod target = prepareTarget(methodSigFromComponents(testClass, ""void"", ""returnBoxing""), testClass);

    // TODO more fine-grained testing

    validateAllBodies(target.getDeclaringClass());
  }
",non-flaky,5
26739,MundaneImmortal_pair-distribution-app,DeveloperTest.testHasContext,"	@Test
	public void testHasContext() {
		Developer developer = new Developer(""developerId"");
		
		assertThat(developer.hasContext(), is(false));
		
		developer.setHasContext(true);
		
		assertThat(developer.hasContext(), is(true));
	}
",non-flaky,5
133989,CorfuDB_CorfuDB,ClusterHealthTest.testClusterHealth,"    @Test
    public void testClusterHealth() {
        Layout layout = layoutUtil.getLayout(servers);
        layout.setUnresponsiveServers(Collections.singletonList(server3));

        //invalid log unit state
        ClusterStatus status = clusterHealth.getClusterHealth(
                layout, layout.getAllActiveServers()
        );
        assertThat(status).isEqualTo(ClusterStatus.UNAVAILABLE);

        //stable state with an unresponsive server
        layout.getFirstSegment().getFirstStripe().getLogServers().remove(server3);
        status = clusterHealth.getClusterHealth(
                layout, layout.getAllActiveServers()
        );
        assertThat(status).isEqualTo(ClusterStatus.DEGRADED);
    }
",non-flaky,5
97753,vojtechhabarta_typescript-generator,ModelCompilerTest.testIntermediateInterfacesWithoutTypeParams,"    @Test
    public void testIntermediateInterfacesWithoutTypeParams() throws Exception {
        final Settings settings = TestUtils.settings();

        final Jackson2Parser jacksonParser = new Jackson2Parser(settings, new DefaultTypeProcessor());
        final Model model = jacksonParser.parseModel(Implementation.class);
        final ModelCompiler modelCompiler = new TypeScriptGenerator(settings).getModelCompiler();

        final TsModel result = modelCompiler.javaToTypeScript(model);

        MatcherAssert.assertThat(
                result.getBean(WithoutTypeParam.class).getProperties().get(0).tsType,
                CoreMatchers.instanceOf(TsType.UnionType.class)
        );
    }
",non-flaky,5
77538,dropwizard_dropwizard,PersonResourceExceptionMapperTest.testDefaultJsonProcessingMapper,"    @Test
    public void testDefaultJsonProcessingMapper() {
        assertThat(RESOURCES.target(""/person/blah/runtime-exception"")
            .request()
            .post(Entity.json(""{ \""he: \""ho\""}""))
            .readEntity(String.class))
            .startsWith(""Something went wrong: Unexpected character"");
    }
",non-flaky,5
6,swankjesse_dex,test_parseLString,"@Test
public void test_parseLString() throws Exception {
    DateFormat format = DateFormat.getDateTimeInstance(DateFormat.FULL, DateFormat.FULL, Locale.US);
    try {
        Date date = format.parse(format.format(current).toString());
        assertEquals(current.getDate(), date.getDate());
        assertEquals(current.getDay(), date.getDay());
        assertEquals(current.getMonth(), date.getMonth());
        assertEquals(current.getYear(), date.getYear());
        assertEquals(current.getHours(), date.getHours());
        assertEquals(current.getMinutes(), date.getMinutes());
    } catch(ParseException pe) {
    fail(""ParseException was thrown for current Date.""); }
    try {
        format.parse(""January 16, 1970 8:03:52 PM CET"");
        fail(""ParseException was not thrown."");
    } catch(ParseException pe) { }
}",time,2
76683,quarkusio_quarkus,CustomAuthEmbeddedBase.testJaxrsPathUserRoleSuccess,"    @Test
    public void testJaxrsPathUserRoleSuccess() {
        RestAssured.given().auth().preemptive().basic(""stuart"", ""test"")
                .when().get(""/jaxrs-secured/parameterized-paths/my/banking/view"").then()
                .statusCode(200);
    }
",non-flaky,5
33689,alibaba_fastjson,JSONScannerTest.checkDate12,"  @Test
  public void checkDate12() throws Throwable {

    // Arrange
    char y0 = '2';
    char y1 = '1';
    char y2 = '\u8030';
    char y3 = '\u0830';
    char M0 = '1';
    char M1 = '\u0000';
    int d0 = 0;
    int d1 = 0;

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkDate"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""int""), Reflector.forName(""int""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, y0, y1, y2, y3, M0, M1, d0, d1);

    // Assert result
    Assert.assertEquals(false, retval);

  }
",non-flaky,5
98633,nutzam_nutz,SimpleAdaptorTest.test_err_param,"    @Test
    public void test_err_param() {
        get(""/adaptor/err/param?id=ABC"");
        assertEquals(200, resp.getStatus());

        get(""/adaptor/err/param/ABC"");
        assertEquals(200, resp.getStatus());
    }
",non-flaky,5
134024,CorfuDB_CorfuDB,ServerHandshakeHandlerTest.testRequestDroppedBeforeHandshake,"    @Test
    public void testRequestDroppedBeforeHandshake() {
        // Get a ping RequestMsg
        RequestMsg request = getRequestMsg(
                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.IGNORE),
                getPingRequestMsg()
        );

        embeddedChannel.writeInbound(request);

        // Verify that the request was correctly dropped and there is no inbound nor outbound messages.
        assertNull(embeddedChannel.readInbound());
        assertNull(embeddedChannel.readOutbound());
    }
",non-flaky,5
94738,ktuukkan_marine-api,Longitude28Test.largeNegativeValueIsNotCorrect,"    @Test
    public void largeNegativeValueIsNotCorrect() {
        assertFalse(Longitude28.isCorrect(-1-180*60*10000));
    }
",non-flaky,5
134020,CorfuDB_CorfuDB,LogReplicationClientTest.testHandleEntryAck,"    @Test
    public void testHandleEntryAck() {
        final LogReplicationEntryMsg entry =  LogReplicationEntryMsg
                .newBuilder().build();
        final ResponseMsg response = ResponseMsg.newBuilder().setPayload(
                CorfuMessage.ResponsePayloadMsg.newBuilder()
                        .setLrEntryAck(entry).build()).build();

        ArgumentCaptor<PayloadCase> argument = ArgumentCaptor.forClass(PayloadCase.class);

        lrClient.receive(response);
        verify(handlerMap, atLeast(1)).get(argument.capture());
        Assertions.assertThat(argument.getValue()).isEqualTo(PayloadCase.LR_ENTRY_ACK);
    }
",non-flaky,5
99787,apache_cassandra,MessagingServiceTest.reconnectWithNewIp,"//    @Test
//    public void reconnectWithNewIp() throws Exception
//    {
//        InetAddressAndPort publicIp = InetAddressAndPort.getByName(""127.0.0.2"");
//        InetAddressAndPort privateIp = InetAddressAndPort.getByName(""127.0.0.3"");
//
//        // reset the preferred IP value, for good test hygene
//        SystemKeyspace.updatePreferredIP(publicIp, publicIp);
//
//        // create pool/conn with public addr
//        Assert.assertEquals(publicIp, messagingService.getCurrentEndpoint(publicIp));
//        messagingService.maybeReconnectWithNewIp(publicIp, privateIp).await(1L, TimeUnit.SECONDS);
//        Assert.assertEquals(privateIp, messagingService.getCurrentEndpoint(publicIp));
//
//        messagingService.closeOutbound(publicIp);
//
//        // recreate the pool/conn, and make sure the preferred ip addr is used
//        Assert.assertEquals(privateIp, messagingService.getCurrentEndpoint(publicIp));
//    }
",non-flaky,5
112707,hwang-pku_ormlite-core,TransactionManagerTest.call,"	@Test
	public void testTransactionWithinTransactionFails() throws Exception {
		if (connectionSource == null) {
			return;
		}
		final TransactionManager mgr = new TransactionManager(connectionSource);
		final Dao<Foo, Integer> dao = createDao(Foo.class, true);
		try {
			mgr.callInTransaction(new Callable<Void>() {
				@Override
				public Void call() throws Exception {
					dao.create(new Foo());
					mgr.callInTransaction(new Callable<Void>() {
						@Override
						public Void call() throws Exception {
							dao.create(new Foo());
							throw new SQLException(""Exception ahoy!"");
						}
",non-flaky,5
114004,apache_struts,StrutsSpringJUnit4TestCaseTest.getActionProxy,"	@Test
    public void getActionProxy() throws Exception {
        //set parameters before calling getActionProxy
        request.setParameter(""name"", ""FD"");
        
        ActionProxy proxy = getActionProxy(""/test/testAction.action"");
        Assert.assertNotNull(proxy);

        JUnitTestAction action = (JUnitTestAction) proxy.getAction();
        Assert.assertNotNull(action);

        String result = proxy.execute();
        Assert.assertEquals(Action.SUCCESS, result);
        Assert.assertEquals(""FD"", action.getName());
    }
",non-flaky,5
19454,eclipse_xtext-core,ImportedNamespaceAwareLocalScopeProviderTest.iterator,"	@Test public void testDuplicateImportsAreIgnored() throws Exception {
			public Iterator<EObject> iterator() {
				return resource.getAllContents();
			}
",non-flaky,5
104688,apache_pinot,MapTypeClusterIntegrationTest.testQueries,"  @Test
  public void testQueries()
      throws Exception {
    // Selection only
    String query = ""SELECT mapValue(stringKeyMap__KEYS, 'k1', stringKeyMap__VALUES) FROM "" + getTableName();
    JsonNode pinotResponse = postQuery(query);
    assertEquals(pinotResponse.get(""exceptions"").size(), 0);
    JsonNode selectionResults = pinotResponse.get(""selectionResults"").get(""results"");
    assertEquals(selectionResults.size(), 10);
    for (int i = 0; i < 10; i++) {
      assertEquals(Integer.parseInt(selectionResults.get(i).get(0).textValue()), i);
    }
    query = ""SELECT mapValue(intKeyMap__KEYS, 95, intKeyMap__VALUES) FROM "" + getTableName();
    pinotResponse = postQuery(query);
    assertEquals(pinotResponse.get(""exceptions"").size(), 0);
    selectionResults = pinotResponse.get(""selectionResults"").get(""results"");
    assertEquals(selectionResults.size(), 10);
    for (int i = 0; i < 10; i++) {
      assertEquals(Integer.parseInt(selectionResults.get(i).get(0).textValue()), i);
    }

    // Selection order-by
    query = ""SELECT mapValue(stringKeyMap__KEYS, 'k2', stringKeyMap__VALUES) FROM "" + getTableName()
        + "" ORDER BY mapValue(stringKeyMap__KEYS, 'k1', stringKeyMap__VALUES)"";
    pinotResponse = postQuery(query);
    assertEquals(pinotResponse.get(""exceptions"").size(), 0);
    selectionResults = pinotResponse.get(""selectionResults"").get(""results"");
    assertEquals(selectionResults.size(), 10);
    for (int i = 0; i < 10; i++) {
      assertEquals(Integer.parseInt(selectionResults.get(i).get(0).textValue()), NUM_DOCS + i);
    }
    query = ""SELECT mapValue(intKeyMap__KEYS, 717, intKeyMap__VALUES) FROM "" + getTableName()
        + "" ORDER BY mapValue(intKeyMap__KEYS, 95, intKeyMap__VALUES)"";
    pinotResponse = postQuery(query);
    assertEquals(pinotResponse.get(""exceptions"").size(), 0);
    selectionResults = pinotResponse.get(""selectionResults"").get(""results"");
    assertEquals(selectionResults.size(), 10);
    for (int i = 0; i < 10; i++) {
      assertEquals(Integer.parseInt(selectionResults.get(i).get(0).textValue()), NUM_DOCS + i);
    }

    // Aggregation only
    query = ""SELECT MAX(mapValue(stringKeyMap__KEYS, 'k1', stringKeyMap__VALUES)) FROM "" + getTableName();
    pinotResponse = postQuery(query);
    assertEquals(pinotResponse.get(""exceptions"").size(), 0);
    JsonNode aggregationResult = pinotResponse.get(""aggregationResults"").get(0).get(""value"");
    assertEquals((int) Double.parseDouble(aggregationResult.textValue()), NUM_DOCS - 1);
    query = ""SELECT MAX(mapValue(intKeyMap__KEYS, 95, intKeyMap__VALUES)) FROM "" + getTableName();
    pinotResponse = postQuery(query);
    assertEquals(pinotResponse.get(""exceptions"").size(), 0);
    aggregationResult = pinotResponse.get(""aggregationResults"").get(0).get(""value"");
    assertEquals((int) Double.parseDouble(aggregationResult.textValue()), NUM_DOCS - 1);

    // Aggregation group-by
    query = ""SELECT MIN(mapValue(stringKeyMap__KEYS, 'k2', stringKeyMap__VALUES)) FROM "" + getTableName()
        + "" GROUP BY mapValue(stringKeyMap__KEYS, 'k1', stringKeyMap__VALUES)"";
    pinotResponse = postQuery(query);
    assertEquals(pinotResponse.get(""exceptions"").size(), 0);
    JsonNode groupByResults = pinotResponse.get(""aggregationResults"").get(0).get(""groupByResult"");
    assertEquals(groupByResults.size(), 10);
    for (int i = 0; i < 10; i++) {
      JsonNode groupByResult = groupByResults.get(i);
      assertEquals(Integer.parseInt(groupByResult.get(""group"").get(0).asText()), i);
      assertEquals((int) Double.parseDouble(groupByResult.get(""value"").asText()), NUM_DOCS + i);
    }
    query = ""SELECT MIN(mapValue(intKeyMap__KEYS, 717, intKeyMap__VALUES)) FROM "" + getTableName()
        + "" GROUP BY mapValue(intKeyMap__KEYS, 95, intKeyMap__VALUES)"";
    pinotResponse = postQuery(query);
    assertEquals(pinotResponse.get(""exceptions"").size(), 0);
    groupByResults = pinotResponse.get(""aggregationResults"").get(0).get(""groupByResult"");
    assertEquals(groupByResults.size(), 10);
    for (int i = 0; i < 10; i++) {
      JsonNode groupByResult = groupByResults.get(i);
      assertEquals(Integer.parseInt(groupByResult.get(""group"").get(0).asText()), i);
      assertEquals((int) Double.parseDouble(groupByResult.get(""value"").asText()), NUM_DOCS + i);
    }

    // Filter
    query = ""SELECT mapValue(stringKeyMap__KEYS, 'k2', stringKeyMap__VALUES) FROM "" + getTableName()
        + "" WHERE mapValue(stringKeyMap__KEYS, 'k1', stringKeyMap__VALUES) = 25"";
    pinotResponse = postQuery(query);
    assertEquals(pinotResponse.get(""exceptions"").size(), 0);
    selectionResults = pinotResponse.get(""selectionResults"").get(""results"");
    assertEquals(selectionResults.size(), 1);
    assertEquals(Integer.parseInt(selectionResults.get(0).get(0).textValue()), NUM_DOCS + 25);
    query = ""SELECT mapValue(intKeyMap__KEYS, 717, intKeyMap__VALUES) FROM "" + getTableName()
        + "" WHERE mapValue(intKeyMap__KEYS, 95, intKeyMap__VALUES) = 25"";
    pinotResponse = postQuery(query);
    assertEquals(pinotResponse.get(""exceptions"").size(), 0);
    selectionResults = pinotResponse.get(""selectionResults"").get(""results"");
    assertEquals(selectionResults.size(), 1);
    assertEquals(Integer.parseInt(selectionResults.get(0).get(0).textValue()), NUM_DOCS + 25);

    // Filter on non-existing key
    query = ""SELECT mapValue(stringKeyMap__KEYS, 'k2', stringKeyMap__VALUES) FROM "" + getTableName()
        + "" WHERE mapValue(stringKeyMap__KEYS, 'k3', stringKeyMap__VALUES) = 25"";
    pinotResponse = postQuery(query);
    assertEquals(pinotResponse.get(""exceptions"").size(), 0);
    selectionResults = pinotResponse.get(""selectionResults"").get(""results"");
    assertEquals(selectionResults.size(), 0);
    query = ""SELECT mapValue(intKeyMap__KEYS, 717, intKeyMap__VALUES) FROM "" + getTableName()
        + "" WHERE mapValue(intKeyMap__KEYS, 123, intKeyMap__VALUES) = 25"";
    pinotResponse = postQuery(query);
    assertEquals(pinotResponse.get(""exceptions"").size(), 0);
    selectionResults = pinotResponse.get(""selectionResults"").get(""results"");
    assertEquals(selectionResults.size(), 0);

    // Select non-existing key (illegal query)
    query = ""SELECT mapValue(stringKeyMap__KEYS, 'k3', stringKeyMap__VALUES) FROM "" + getTableName();
    pinotResponse = postQuery(query);
    assertNotEquals(pinotResponse.get(""exceptions"").size(), 0);
    query = ""SELECT mapValue(stringKeyMap__KEYS, 123, stringKeyMap__VALUES) FROM "" + getTableName();
    pinotResponse = postQuery(query);
    assertNotEquals(pinotResponse.get(""exceptions"").size(), 0);

    // Select non-existing key with proper filter
    query = ""SELECT mapValue(stringKeyMap__KEYS, 'k3', stringKeyMap__VALUES) FROM "" + getTableName()
        + "" WHERE stringKeyMap__KEYS = 'k3'"";
    pinotResponse = postQuery(query);
    assertEquals(pinotResponse.get(""exceptions"").size(), 0);
    selectionResults = pinotResponse.get(""selectionResults"").get(""results"");
    assertEquals(selectionResults.size(), 0);
    query = ""SELECT mapValue(intKeyMap__KEYS, 123, intKeyMap__VALUES) FROM "" + getTableName()
        + "" WHERE stringKeyMap__KEYS = 123"";
    pinotResponse = postQuery(query);
    assertEquals(pinotResponse.get(""exceptions"").size(), 0);
    selectionResults = pinotResponse.get(""selectionResults"").get(""results"");
    assertEquals(selectionResults.size(), 0);
  }
",non-flaky,5
95708,togglz_togglz,EnumBasedFeatureProviderTest.shouldFailForArrayWithNull,"    @Test(expected = IllegalArgumentException.class)
    public void shouldFailForArrayWithNull() {
        new EnumBasedFeatureProvider(ValidFeatureEnum.class, null);
    }
",non-flaky,5
43124,trinodb_trino,BaseConnectorSmokeTest.testUpdate,"    @Test
    public void testUpdate()
    {
        if (!hasBehavior(SUPPORTS_UPDATE)) {
            // Note this change is a no-op, if actually run
            assertQueryFails(""UPDATE nation SET nationkey = nationkey + regionkey WHERE regionkey < 1"", ""This connector does not support updates"");
            return;
        }

        try (TestTable table = new TestTable(getQueryRunner()::execute, ""test_update"", ""AS TABLE tpch.tiny.nation"")) {
            String tableName = table.getName();
            assertUpdate(""UPDATE "" + tableName + "" SET nationkey = 100 + nationkey WHERE regionkey = 2"", 5);
            assertThat(query(""SELECT * FROM "" + tableName))
                    .skippingTypesCheck()
                    .matches(""SELECT IF(regionkey=2, nationkey + 100, nationkey) nationkey, name, regionkey, comment FROM tpch.tiny.nation"");
        }
    }
",non-flaky,5
352,apache_hadoop,TestNetworkTopology.testChooseRandomExcludedNode,"  @Test
  public void testChooseRandomExcludedNode() {
    String scope = ""~"" + NodeBase.getPath(dataNodes[0]);
    Map<Node, Integer> frequency = pickNodesAtRandom(100, scope, null);

    for (Node key : dataNodes) {
      // all nodes except the first should be more than zero
      assertTrue(frequency.get(key) > 0 || key == dataNodes[0]);
    }
  }
",non-flaky,5
91380,OpenLCB_OpenLCB_Java,RemoteDccProxyTest.testCTor,"    @Test
    public void testCTor() {
        NodeID nodeID = new NodeID(new byte[]{1,2,3,4,5,6});
        RemoteDccProxy t = new RemoteDccProxy(nodeID);
        Assert.assertNotNull(""exists"",t);
    }
",non-flaky,5
77555,dropwizard_dropwizard,PersonResourceExceptionMapperTest.toResponse,"    @Test
        public Response toResponse(JerseyViolationException exception) {
            return Response.status(Response.Status.BAD_REQUEST)
                .type(MediaType.TEXT_PLAIN)
                .entity(""Invalid data"")
                .build();
        }
",non-flaky,5
112084,apache_shardingsphere-elasticjob,JobShardingStrategyFactoryTest.assertGetStrategyFailureWhenNotStrategyClass,"    @Test(expected = JobConfigurationException.class)
    public void assertGetStrategyFailureWhenNotStrategyClass() {
        JobShardingStrategyFactory.getStrategy(Object.class.getName());
    }
",non-flaky,5
77622,pholser_junit-quickcheck,DurationPropertyParameterTypesTest.shouldHold,"    @Test public void duration() {
        @Property public void shouldHold(Duration d) {
        }
",non-flaky,5
175800,GoogleCloudPlatform_google-cloud-eclipse,ProjectSelectorSelectionChangedListenerTest.testSelectionChanged_emptySelection,"  @Test
  public void testSelectionChanged_emptySelection() {
    when(event.getSelection()).thenReturn(new StructuredSelection());
    listener.selectionChanged(event);
    verify(projectSelector).clearStatusLink();
  }
",non-flaky,5
92598,FasterXML_jackson-databind,TestTypeFactoryWithClassLoader.testSetsTheCorrectClassLoderIfUsingWithClassLoaderFollowedByWithModifier,"@Test
public void testSetsTheCorrectClassLoderIfUsingWithClassLoaderFollowedByWithModifier() {
	TypeFactory sut = mapper.getTypeFactory().withClassLoader(classLoader).withModifier(typeModifier);
	Assert.assertNotNull(sut.getClassLoader());
}
",non-flaky,5
92595,FasterXML_jackson-databind,TestTypeFactoryWithClassLoader.testCallingOnlyWithClassLoaderGivesExpectedResults,"@Test
public void testCallingOnlyWithClassLoaderGivesExpectedResults(){
	TypeFactory sut = mapper.getTypeFactory().withClassLoader(classLoader);
	Assert.assertNotNull(sut.getClassLoader());
	Assert.assertArrayEquals(null,sut._modifiers);
}
",non-flaky,5
97732,vojtechhabarta_typescript-generator,OptionalAnnotationTest.testJavaxNullableWithJackson1,"    @Test
    public void testJavaxNullableWithJackson1() {
        testJavaxNullableUsingTypeScriptGenerator(JsonLibrary.jackson1);
    }
",non-flaky,5
135738,Netflix_Hystrix,HystrixCommandTestWithCustomConcurrencyStrategy.testCommandDoesNotRequireContextConcurrencyStrategyDoesNotProvideItContextSetUpCorrectly,"    @Test
    public void testCommandDoesNotRequireContextConcurrencyStrategyDoesNotProvideItContextSetUpCorrectly() {
        HystrixConcurrencyStrategy strategy = new CustomConcurrencyStrategy(false);
        HystrixPlugins.getInstance().registerConcurrencyStrategy(strategy);

        //context is set up properly
        HystrixRequestContext context = HystrixRequestContext.initializeContext();
        HystrixCommand<Boolean> cmd = new TestCommand(true, true);
        assertTrue(cmd.execute());
        printRequestLog();
        assertNull(HystrixRequestLog.getCurrentRequest());
        assertNull(HystrixRequestLog.getCurrentRequest(strategy));
        assertNull(cmd.currentRequestLog);
        context.shutdown();
    }
",non-flaky,5
156075,jReddit_jReddit,RedditScopeBuilderTest.testEmpty,"    @Test
    public void testEmpty() {
        assertEquals("""", builder.build());
    }
",non-flaky,5
156429,apache_commons-lang,DateUtilsFragmentTest.testNullDate,"    @Test
    public void testNullDate() {
        assertThrows(
                IllegalArgumentException.class,
                () -> DateUtils.getFragmentInMilliseconds((Date) null, Calendar.MILLISECOND));

        assertThrows(
                IllegalArgumentException.class,
                () -> DateUtils.getFragmentInSeconds((Date) null, Calendar.MILLISECOND));

        assertThrows(
                IllegalArgumentException.class,
                () -> DateUtils.getFragmentInMinutes((Date) null, Calendar.MILLISECOND));

        assertThrows(
                IllegalArgumentException.class,
                () -> DateUtils.getFragmentInHours((Date) null, Calendar.MILLISECOND));

        assertThrows(
                IllegalArgumentException.class,
                () -> DateUtils.getFragmentInDays((Date) null, Calendar.MILLISECOND));
    }
",non-flaky,5
97721,vojtechhabarta_typescript-generator,MapExtensionTest.testStringKeyMapNumberValue,"    @Test
    public void testStringKeyMapNumberValue() {
        final Settings settings = TestUtils.settings();
        final String output = new TypeScriptGenerator(settings).generateTypeScript(Input.from(D.class));
        Assert.assertTrue(output.contains(""stringKeyMap: { [index: string]: number };""));
    }
",non-flaky,5
160348,ConsenSys_teku,MetricsPublisherManagerTest.shouldReturnHTTPStatusOk,"  @Test
  public void shouldReturnHTTPStatusOk() throws IOException {
    MetricsPublisherManager publisherManager =
        new MetricsPublisherManager(asyncRunnerFactory, timeProvider, metricsEndpoint);
    publisherManager.setMetricsPublisher(metricsPublisher);
    Assertions.assertThat(publisherManager.publishMetrics()).isEqualTo(200);
  }
",non-flaky,5
77665,pholser_junit-quickcheck,OffsetTimePropertyParameterTypesTest.shouldHold,"    @Test public void malformedMin() {
        @Property public void shouldHold(
            @InRange(
",non-flaky,5
118718,netty_netty,SocketTest.testSoLinger,"    @Test
    public void testSoLinger() throws Exception {
        assertEquals(-1, socket.getSoLinger());
        socket.setSoLinger(10);
        assertEquals(10, socket.getSoLinger());
    }
",non-flaky,5
99732,apache_cassandra,FQLReplayTest.testResultHandlerWithDifference,"    @Test
    public void testResultHandlerWithDifference() throws IOException
    {
        List<String> targetHosts = Lists.newArrayList(""hosta"", ""hostb"", ""hostc"");
        File tmpDir = Files.createTempDirectory(""testresulthandler"").toFile();
        File queryDir = Files.createTempDirectory(""queries"").toFile();
        List<File> resultPaths = new ArrayList<>();
        targetHosts.forEach(host -> { File f = new File(tmpDir, host); f.mkdir(); resultPaths.add(f);});

        ResultHandler.ComparableResultSet res = createResultSet(10, 10, false);
        ResultHandler.ComparableResultSet res2 = createResultSet(10, 5, false);
        ResultHandler.ComparableResultSet res3 = createResultSet(10, 10, false);
        List<ResultHandler.ComparableResultSet> toCompare = Lists.newArrayList(res, res2, res3);
        FQLQuery query = new FQLQuery.Single(""aaa"", QueryOptions.DEFAULT.getProtocolVersion().asInt(), QueryOptions.DEFAULT, 123123, 11111, 22222, ""select * from abcabc"", Collections.emptyList());
        try (ResultHandler rh = new ResultHandler(targetHosts, resultPaths, queryDir))
        {
            rh.handleResults(query, toCompare);
        }
        List<Pair<FQLQuery, ResultHandler.ComparableResultSet>> results1 = readResultFile(resultPaths.get(0), queryDir);
        List<Pair<FQLQuery, ResultHandler.ComparableResultSet>> results2 = readResultFile(resultPaths.get(1), queryDir);
        List<Pair<FQLQuery, ResultHandler.ComparableResultSet>> results3 = readResultFile(resultPaths.get(2), queryDir);
        compareResults(results1, results3);
        compareResults(results2, Collections.singletonList(Pair.create(query, res2)));
    }
",non-flaky,5
160401,ConsenSys_teku,ChainDataProviderTest.filteredValidatorsList_shouldFilterByValidatorPubkey,"  @Test
  public void filteredValidatorsList_shouldFilterByValidatorPubkey() {
    final tech.pegasys.teku.spec.datastructures.state.beaconstate.BeaconState internalState =
        data.randomBeaconState(1024);
    final ChainDataProvider provider =
        new ChainDataProvider(spec, recentChainData, combinedChainDataClient);
    final String key = internalState.getValidators().get(12).getPubkeyBytes().toString();
    final String missingKey = data.randomPublicKey().toString();
    List<String> pubkeys =
        provider
            .getFilteredValidatorList(internalState, List.of(key, missingKey), emptySet())
            .stream()
            .map(v -> v.validator.pubkey.toHexString())
            .collect(toList());
    assertThat(pubkeys).containsExactly(key);
  }
",non-flaky,5
89339,apache_samza,TestKafkaSystemAdminJava.testStartpointSpecificOffsetVisitorShouldResolveToCorrectOffset,"  @Test
  public void testStartpointSpecificOffsetVisitorShouldResolveToCorrectOffset() {
    final KafkaConsumer consumer = Mockito.mock(KafkaConsumer.class);
    final KafkaStartpointToOffsetResolver kafkaStartpointToOffsetResolver = new KafkaStartpointToOffsetResolver(consumer);

    final StartpointSpecific testStartpointSpecific = new StartpointSpecific(TEST_OFFSET);

    // Invoke the consumer with startpoint.
    String resolvedOffset = kafkaStartpointToOffsetResolver.visit(TEST_SYSTEM_STREAM_PARTITION, testStartpointSpecific);
    Assert.assertEquals(TEST_OFFSET, resolvedOffset);
  }
",non-flaky,5
76928,Tencent_Firestorm,WriteBufferTest.test,"  @Test
  public void test() {
    WriterBuffer wb = new WriterBuffer(32);
    assertEquals(0, wb.getMemoryUsed());
    assertEquals(0, wb.getDataLength());

    serializeData(""key"", ""value"");
    // size of serialized kv is 12
    wb.addRecord(serializedData, serializedDataLength);
    assertEquals(32, wb.getMemoryUsed());
    assertEquals(12, wb.getDataLength());
    wb.addRecord(serializedData, serializedDataLength);
    assertEquals(32, wb.getMemoryUsed());
    // case: data size < output buffer size, when getData(), [] + buffer with 24b = 24b
    assertEquals(24, wb.getData().length);
    wb.addRecord(serializedData, serializedDataLength);
    // case: data size > output buffer size, when getData(), [1 buffer] + buffer with 12 = 36b
    assertEquals(36, wb.getData().length);
    assertEquals(64, wb.getMemoryUsed());
    wb.addRecord(serializedData, serializedDataLength);
    wb.addRecord(serializedData, serializedDataLength);
    // case: data size > output buffer size, when getData(), 2 buffer + output with 12b = 60b
    assertEquals(60, wb.getData().length);
    assertEquals(96, wb.getMemoryUsed());

    wb = new WriterBuffer(32);

    serializeData(""key1111111111111111111111111111"", ""value222222222222222222222222222"");
    wb.addRecord(serializedData, serializedDataLength);
    assertEquals(67, wb.getMemoryUsed());
    assertEquals(67, wb.getDataLength());

    serializeData(""key"", ""value"");
    wb.addRecord(serializedData, serializedDataLength);
    // 67 + 32
    assertEquals(99, wb.getMemoryUsed());
    // 67 + 12
    assertEquals(79, wb.getDataLength());
    assertEquals(79, wb.getData().length);

    wb.addRecord(serializedData, serializedDataLength);
    assertEquals(99, wb.getMemoryUsed());
    assertEquals(91, wb.getDataLength());
    assertEquals(91, wb.getData().length);
  }
",non-flaky,5
113989,apache_struts,URLDecoderUtilTest.testURLDecodeStringValidIso88591Start,"    @Test
    public void testURLDecodeStringValidIso88591Start() {

        String result = URLDecoderUtil.decode(""%41xxxx"", ""ISO-8859-1"");
        assertEquals(""Axxxx"", result);
    }
",non-flaky,5
98092,vert-x3_vertx-mongo-client,ParsingSSLOptionsTest.testTrustAllProperty,"  @Test
  public void testTrustAllProperty() {
    // given
    final JsonObject withSSLAndTrustAllEnabled = new JsonObject()
      .put(""ssl"", true)
      .put(""trustAll"", true);

    // when
    final SslSettings sslSettings = new MongoClientOptionsParser(vertx, withSSLAndTrustAllEnabled)
      .settings()
      .getSslSettings();

    // then
    assertNotNull(sslSettings.getContext());
  }
",non-flaky,5
135713,Netflix_Hystrix,HystrixSubclassCommandTest.testRequestCacheSubclassNoOverrides,"    @Test
    public void testRequestCacheSubclassNoOverrides() {
        HystrixCommand<Integer> subCmd1 = new SubCommandNoOverride(""cache"", true);
        assertEquals(1, subCmd1.execute().intValue());
        HystrixCommand<Integer> subCmd2 = new SubCommandNoOverride(""cache"", true);
        assertEquals(1, subCmd2.execute().intValue());
        HystrixCommand<Integer> subCmd3 = new SubCommandNoOverride(""no-cache"", true);
        assertEquals(1, subCmd3.execute().intValue());
        System.out.println(""REQ LOG : "" + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());
        HystrixRequestLog reqLog = HystrixRequestLog.getCurrentRequest();
        assertEquals(3, reqLog.getAllExecutedCommands().size());
        List<HystrixInvokableInfo<?>> infos = new ArrayList<HystrixInvokableInfo<?>>(reqLog.getAllExecutedCommands());
        HystrixInvokableInfo<?> info1 = infos.get(0);
        assertEquals(""SubCommandNoOverride"", info1.getCommandKey().name());
        assertEquals(1, info1.getExecutionEvents().size());
        HystrixInvokableInfo<?> info2 = infos.get(1);
        assertEquals(""SubCommandNoOverride"", info2.getCommandKey().name());
        assertEquals(2, info2.getExecutionEvents().size());
        assertEquals(HystrixEventType.RESPONSE_FROM_CACHE, info2.getExecutionEvents().get(1));
        HystrixInvokableInfo<?> info3 = infos.get(2);
        assertEquals(""SubCommandNoOverride"", info3.getCommandKey().name());
        assertEquals(1, info3.getExecutionEvents().size());
    }
",non-flaky,5
30995,camunda-cloud_zeebe,ObjectMappingTest.shouldFailLengthEstimationWithMissingRequiredValues,"  @Test
  public void shouldFailLengthEstimationWithMissingRequiredValues() {
    // given
    final POJO pojo = new POJO();

    // then
    exception.expect(MsgpackPropertyException.class);
    exception.expectMessage(
        ""Property 'enumProp' is invalid: Expected a value or default value to be specified, but has nothing"");

    // when
    pojo.getLength();
  }
",non-flaky,5
98091,vert-x3_vertx-mongo-client,ParsingSSLOptionsTest.one_should_be_able_to_allow_invalid_host_names_via_config_property,"  @Test
  public void one_should_be_able_to_allow_invalid_host_names_via_config_property() {
    // given
    final JsonObject withSSLAndInvalidHostnameEnabled = new JsonObject()
      .put(""ssl"", true)
      .put(""sslInvalidHostNameAllowed"", true);

    // when
    final SslSettings sslSettings = new MongoClientOptionsParser(vertx, withSSLAndInvalidHostnameEnabled)
      .settings()
      .getSslSettings();

    // then
    assertTrue(sslSettings.isInvalidHostNameAllowed());
  }
",non-flaky,5
170460,eclipse_jetty.project,ObjectMBeanTest.testDerivedOperations,"    @Test
    public void testDerivedOperations() throws Exception
    {
        Derived derived = new Derived();
        ObjectMBean mbean = (ObjectMBean)container.mbeanFor(derived);

        container.beanAdded(null, derived);

        MBeanInfo info = mbean.getMBeanInfo();
        assertEquals(5, info.getOperations().length, ""operation count does not match"");

        MBeanOperationInfo[] operationInfos = info.getOperations();
        boolean publish = false;
        boolean doodle = false;
        boolean good = false;
        for (MBeanOperationInfo operationInfo : operationInfos)
        {
            if (""publish"".equals(operationInfo.getName()))
            {
                publish = true;
                assertEquals(""publish something"", operationInfo.getDescription(), ""description doesn't match"");
            }

            if (""doodle"".equals(operationInfo.getName()))
            {
                doodle = true;
                assertEquals(""Doodle something"", operationInfo.getDescription(), ""description doesn't match"");
                MBeanParameterInfo[] parameterInfos = operationInfo.getSignature();
                assertEquals(""A description of the argument"", parameterInfos[0].getDescription(), ""parameter description doesn't match"");
                assertEquals(""doodle"", parameterInfos[0].getName(), ""parameter name doesn't match"");
            }

            // This is a proxied operation on the MBean wrapper.
            if (""good"".equals(operationInfo.getName()))
            {
                good = true;
                assertEquals(""test of proxy operations"", operationInfo.getDescription(), ""description does not match"");
                assertEquals(""not bad"", mbean.invoke(""good"", new Object[]{}, new String[]{}), ""execution contexts wrong"");
            }
        }

        assertTrue(publish, ""publish operation was not not found"");
        assertTrue(doodle, ""doodle operation was not not found"");
        assertTrue(good, ""good operation was not not found"");
    }
",non-flaky,5
92618,FasterXML_jackson-databind,TestPropertyCreatorSubtypesExternalPropertyMissingProperty.testDeserializationMissing,"    @Test
    public void testDeserializationMissing() throws Exception {
        checkOrangeBoxNull(BOX_READER_PASS, orangeBoxMissingJson);
        checkAppleBoxNull(BOX_READER_PASS, appleBoxMissingJson);

        checkBoxException(BOX_READER_FAIL, orangeBoxMissingJson);
        checkBoxException(BOX_READER_FAIL, appleBoxMissingJson);
    }
",non-flaky,5
33859,apache_camel,FhirPatchIT.testPatchByStringIdPreferResponseTypes,"    @Test
    public void testPatchByStringIdPreferResponseTypes() throws Exception {
        final Map<String, Object> headers = new HashMap<>();
        // parameter type is String
        headers.put(""CamelFhir.patchBody"", PATCH);
        // parameter type is String
        headers.put(""CamelFhir.stringId"", this.patient.getId());
        // parameter type is ca.uhn.fhir.rest.api.PreferReturnEnum
        headers.put(""CamelFhir.preferReturn"", null);

        List<Class<? extends IBaseResource>> preferredResponseTypes = new ArrayList<>();
        preferredResponseTypes.add(Patient.class);
        headers.put(ExtraParameters.PREFER_RESPONSE_TYPES.getHeaderName(), preferredResponseTypes);

        MethodOutcome result = requestBodyAndHeaders(""direct://PATCH_BY_SID"", null, headers);
        assertActive(result);
    }
",non-flaky,5
156419,apache_commons-lang,GmtTimeZoneTest.minutesInRange,"    @Test
    public void minutesInRange() {
        assertEquals(59 * 60 * 1000, new GmtTimeZone(false, 0, 59).getRawOffset());
    }
",non-flaky,5
156046,jReddit_jReddit,MoreTest.testConstructor,"    @Test
    public void testConstructor() {
        
        // Variables
        long count = 2894;
        String parent_id = ""djk9fa"";
        String child_id_1 = ""ddafe2"";
        String child_id_2 = ""ddaf22"";
        
        // Create JSON Object
        JSONObject data = new JSONObject();
        data.put(""count"", count);
        data.put(""parent_id"", parent_id);
        JSONArray array = new JSONArray();
        array.add(child_id_1);
        array.add(child_id_2);
        data.put(""children"", array);
        
        // Parse
        More m = new More(data);
        
        Assert.assertEquals((Long) count, m.getCount());
        Assert.assertEquals(parent_id, m.getParentId());
        Assert.assertEquals(2, m.getChildrenSize());
        Assert.assertEquals(child_id_1, m.getChildren().get(0));
        Assert.assertEquals(child_id_2, m.getChildren().get(1));
        
        // Test that the toString does not throw an exception an is not null
       Assert.assertNotNull(m.toString());
        
    }
",non-flaky,5
98033,vert-x3_vertx-mongo-client,MongoClientBulkWriteResultTest.testDefaultMongoClientBulkWriteResult,"  @Test
  public void testDefaultMongoClientBulkWriteResult() {
    MongoClientBulkWriteResult mongoClientBulkWriteResult = new MongoClientBulkWriteResult();

    assertEquals(MongoClientBulkWriteResult.DEFAULT_MATCHED_COUNT, mongoClientBulkWriteResult.getMatchedCount());
    assertEquals(MongoClientBulkWriteResult.DEFAULT_MODIFIED_COUNT, mongoClientBulkWriteResult.getModifiedCount());
    assertEquals(MongoClientBulkWriteResult.DEFAULT_INSERTED_COUNT, mongoClientBulkWriteResult.getInsertedCount());
    assertEquals(MongoClientBulkWriteResult.DEFAULT_DELETED_COUNT, mongoClientBulkWriteResult.getDeletedCount());
    assertNull(mongoClientBulkWriteResult.getUpserts());
  }
",non-flaky,5
122598,vespa-engine_vespa,TemplarTest.test,"    @Test
    public void test() {
        Templar templar = new Templar(""x y <%= foo %>, some other <%=bar%> text"");
        templar.set(""foo"", ""fidelity"")
                .set(""bar"", ""halimov"")
                .set(""not"", ""used"");

        assertEquals(""x y fidelity, some other halimov text"", templar.resolve());
    }
",non-flaky,5
162445,testcontainers_testcontainers-java,HttpWaitStrategyTest.testWaitUntilReadyWithManyStatusCodes,"    @Test
    public void testWaitUntilReadyWithManyStatusCodes() {
        waitUntilReadyAndSucceed(startContainerWithCommand(createShellCommand(""401 UNAUTHORIZED"", GOOD_RESPONSE_BODY),
            createHttpWaitStrategy(ready)
                .forStatusCode(300)
                .forStatusCode(401)
                .forStatusCode(500)
        ));
    }
",non-flaky,5
122562,vespa-engine_vespa,CommandLineTest.mapException,"    @Test
    public void mapException() {
        terminal.ignoreCommand(""output"");
        CommandResult result = terminal.newCommandLine(context).add(""program"").execute();
        IllegalArgumentException exception = new IllegalArgumentException(""foo"");
        try {
            result.mapOutput(output -> { throw exception; });
            fail();
        } catch (UnexpectedOutputException e) {
            assertEquals(""Command 'program 2>&1' output was not of the expected format: "" +
                    ""Failed to map output: stdout/stderr: 'output'"", e.getMessage());
            assertTrue(e.getCause() == exception);
        }
    }
",non-flaky,5
135014,undertow-io_undertow,AjpClientTestCase.run,"    @Test
    public void testSimpleBasic() throws Exception {
        //
        final UndertowClient client = createClient();

        final List<ClientResponse> responses = new CopyOnWriteArrayList<>();
        final CountDownLatch latch = new CountDownLatch(10);
        final ClientConnection connection = client.connect(ADDRESS, worker, DefaultServer.getBufferPool(), OptionMap.EMPTY).get();
        try {
            connection.getIoThread().execute(new Runnable() {
                @Override
                public void run() {
                    for (int i = 0; i < 10; i++) {
                        final ClientRequest request = new ClientRequest().setMethod(Methods.GET).setPath(MESSAGE);
                        request.getRequestHeaders().put(Headers.HOST, DefaultServer.getHostAddress());
                        connection.sendRequest(request, createClientCallback(responses, latch));
                    }
                }
",non-flaky,5
76754,quarkusio_quarkus,CreateProjectMojoIT.testProjectGenerationFromScratchWithMissingExtensionShouldFail,"    @Test
    public void testProjectGenerationFromScratchWithMissingExtensionShouldFail() throws Exception {
        testDir = initEmptyProject(""projects/project-generation-with-missing-extension"");
        assertThat(testDir).isDirectory();
        invoker = initInvoker(testDir);

        Properties properties = new Properties();
        properties.put(""projectGroupId"", ""org.acme"");
        properties.put(""projectArtifactId"", ""acme"");
        properties.put(""className"", ""org.acme.MyResource"");
        properties.put(""extensions"", ""resteasy,smallrye-metrics,missing"");
        InvocationResult result = setup(properties);

        assertThat(result.getExitCode()).isOne();
    }
",non-flaky,5
76969,Tencent_Firestorm,ArgumentsTest.argTest,"  @Test
  public void argTest() {
    String[] args = {""-c"", confFile};
    Arguments arguments = new Arguments();
    CommandLine commandLine = new CommandLine(arguments);
    commandLine.parseArgs(args);
    assertEquals(confFile, arguments.getConfigFile());
  }
",non-flaky,5
113700,salesforce_reactive-grpc,ExampleUnitTest.addition_isCorrect,"    @Test
    public void addition_isCorrect() {
        assertEquals(4, 2 + 2);
    }
",non-flaky,5
95729,togglz_togglz,DefaultFeatureManagerTest.testGetFeatureStateUsingDefaultFeatureState,"    @Test
    public void testGetFeatureStateUsingDefaultFeatureState() {
        FeatureProvider featureProvider = mock(FeatureProvider.class);
        FeatureMetaData featureMetaData = mock(FeatureMetaData.class);
        when(featureMetaData.getDefaultFeatureState()).thenReturn(new FeatureState(MyFeatures.NOT_STORED_FEATURE, true));
        when(featureProvider.getMetaData(MyFeatures.NOT_STORED_FEATURE)).thenReturn(featureMetaData);

        FeatureManager manager = new FeatureManagerBuilder()
            .featureEnum(MyFeatures.class)
            .stateRepository(repository)
            .featureProvider(featureProvider)
            .userProvider(featureUserProvider)
            .build();


        FeatureState state = manager.getFeatureState(MyFeatures.NOT_STORED_FEATURE);
        assertEquals(MyFeatures.NOT_STORED_FEATURE, state.getFeature());
        assertEquals(true, state.isEnabled());

    }
",non-flaky,5
175822,GoogleCloudPlatform_google-cloud-eclipse,BooleanConverterTest.testNegate,"  @Test
  public void testNegate() {
    assertTrue((Boolean) BooleanConverter.negate().convert(Boolean.FALSE));
    assertFalse((Boolean) BooleanConverter.negate().convert(Boolean.TRUE));
  }
",non-flaky,5
175830,GoogleCloudPlatform_google-cloud-eclipse,BucketNameValidatorTest.testValidation_startWithUnderscore,"  @Test
  public void testValidation_startWithUnderscore() {
    assertThat(validator.validate(""_bucket"").getSeverity(), is(IStatus.ERROR));
  }
",non-flaky,5
156169,soot-oss_soot,TypingMinimizeTest.testAllRelatedClassesTyping,"  @Test
  public void testAllRelatedClassesTyping() {

    List<Typing> typingList = new ArrayList<>();
    Local x1 = new JimpleLocal(""$x1"", null);

    Typing typing1 = new Typing(Arrays.asList(x1));
    typing1.set(x1, objectType);
    typingList.add(typing1);

    Typing typing2 = new Typing(Arrays.asList(x1));
    typing2.set(x1, stringType);
    typingList.add(typing2);

    Typing typing3 = new Typing(Arrays.asList(x1));
    typing3.set(x1, comparableType);
    typingList.add(typing3);

    Typing typing4 = new Typing(Arrays.asList(x1));
    typing4.set(x1, abstractClass_Interface2Type);
    typingList.add(typing4);

    Typing typing5 = new Typing(Arrays.asList(x1));
    typing5.set(x1, class_AbstractInterfaceClassType);
    typingList.add(typing5);

    Typing typing6 = new Typing(Arrays.asList(x1));
    typing6.set(x1, abstractClass_Interface1Type);
    typingList.add(typing6);

    Typing typing7 = new Typing(Arrays.asList(x1));
    typing7.set(x1, class_InterfaceType);
    typingList.add(typing7);

    Typing typing8 = new Typing(Arrays.asList(x1));
    typing8.set(x1, abstractType);
    typingList.add(typing8);

    Typing typing9 = new Typing(Arrays.asList(x1));
    typing9.set(x1, class_AbstractType);
    typingList.add(typing9);

    Typing typing10 = new Typing(Arrays.asList(x1));
    typing10.set(x1, fatherClassType);
    typingList.add(typing10);

    Typing typing11 = new Typing(Arrays.asList(x1));
    typing11.set(x1, childClassType);
    typingList.add(typing11);

    getTypingStrategy().minimize(typingList, new BytecodeHierarchy());

    assertEquals(5, typingList.size());
    assertThat(typingList, containsInAnyOrder(typing2, typing5, typing7, typing9, typing11));
  }
",non-flaky,5
78240,apache_beam,StateInternalsTest.testBag,"  @Test
  public void testBag() throws Exception {
    BagState<String> value = underTest.state(NAMESPACE_1, STRING_BAG_ADDR);

    // State instances are cached, but depend on the namespace.
    assertThat(value, equalTo(underTest.state(NAMESPACE_1, STRING_BAG_ADDR)));
    assertThat(value, not(equalTo(underTest.state(NAMESPACE_2, STRING_BAG_ADDR))));

    assertThat(value.read(), Matchers.emptyIterable());
    value.add(""hello"");
    assertThat(value.read(), containsInAnyOrder(""hello""));

    value.add(""world"");
    assertThat(value.read(), containsInAnyOrder(""hello"", ""world""));

    value.clear();
    assertThat(value.read(), Matchers.emptyIterable());
    assertThat(underTest.state(NAMESPACE_1, STRING_BAG_ADDR), equalTo(value));
  }
",non-flaky,5
26855,wildfly_wildfly,ServiceBasedNamingStoreTestCase.testLookupBase,"    @Test
    public void testLookupBase() throws Exception {
        final Object obj = store.lookup(new CompositeName());
        assertNotNull(obj);
    }
",non-flaky,5
112756,hwang-pku_ormlite-core,ThreadLocalSelectArgTest.testValueConst,"	@Test
	public void testValueConst() {
		int val = 12;
		ThreadLocalSelectArg arg = new ThreadLocalSelectArg(val);
		assertTrue(arg.isValueSet());
		assertEquals(val, arg.getValue());
	}
",non-flaky,5
33919,apache_camel,LdifRouteIT.deleteOne,"    @Test
    public void deleteOne() throws Exception {
        setupData(""/org/apache/camel/component/ldif/DeleteOneSetup.ldif"");

        camel.addRoutes(createRouteBuilder(ENDPOINT_LDIF));
        camel.start();

        Endpoint endpoint = camel.getEndpoint(ENDPOINT_START);
        Exchange exchange = endpoint.createExchange();

        // then we set the LDAP filter on the in body
        URL loc = this.getClass().getResource(""/org/apache/camel/component/ldif/DeleteOne.ldif"");
        exchange.getIn().setBody(loc.toString());

        // now we send the exchange to the endpoint, and receives the response
        // from Camel
        Exchange out = template.send(endpoint, exchange);

        // Check the results
        List<String> ldifResults = defaultLdapModuleOutAssertions(out);
        assertThat(ldifResults, notNullValue());
        assertThat(ldifResults.size(), equalTo(1));
        assertThat(ldifResults.get(0), equalTo(""success""));

        // Check LDAP
        NamingEnumeration<SearchResult> searchResults = ldapContext.search(""dc=example,dc=org"", ""(uid=test*)"", SEARCH_CONTROLS);
        // test2
        while (searchResults.hasMore()) {
            assertThat(searchResults.next().getName(), not(containsString(""test2"")));
        }
    }
",non-flaky,5
114090,aws_aws-sdk-java-v2,KeyTest.getSortKeyValue_partitionOnly,"    @Test
    public void getSortKeyValue_partitionOnly() {
        assertThat(partitionOnlyKey.sortKeyValue(), is(Optional.empty()));
    }
",non-flaky,5
77580,dropwizard_dropwizard,HttpClientBuilderTest.isRedirected,"    @Test
            public boolean isRedirected(HttpRequest httpRequest,
                                        HttpResponse httpResponse,
",non-flaky,5
89320,apache_samza,TestKafkaSystemConsumer.testFetchThresholdShouldDivideEvenlyAmongPartitions,"  @Test
  public void testFetchThresholdShouldDivideEvenlyAmongPartitions() {
    final KafkaSystemConsumer consumer = createConsumer(FETCH_THRESHOLD_MSGS, FETCH_THRESHOLD_BYTES);
    final int partitionsNum = 50;
    for (int i = 0; i < partitionsNum; i++) {
      consumer.register(new SystemStreamPartition(TEST_SYSTEM, TEST_STREAM, new Partition(i)), ""0"");
    }

    consumer.start();

    Assert.assertEquals(Long.valueOf(FETCH_THRESHOLD_MSGS) / partitionsNum, consumer.perPartitionFetchThreshold);
    Assert.assertEquals(Long.valueOf(FETCH_THRESHOLD_BYTES) / 2 / partitionsNum,
        consumer.perPartitionFetchThresholdBytes);

    consumer.stop();
  }
",non-flaky,5
114075,aws_aws-sdk-java-v2,EnhancedTypeTest.documentOf_withEnhancedTypeConfiguration,"    @Test
    public void documentOf_withEnhancedTypeConfiguration() {
        TableSchema<String> tableSchema = StaticTableSchema.builder(String.class).build();
        EnhancedType<String> type = EnhancedType.documentOf(String.class, tableSchema, b -> b.preserveEmptyObject(true));
        assertThat(type.documentConfiguration()).isPresent();
        assertThat(type.documentConfiguration().get().preserveEmptyObject()).isTrue();
    }
",non-flaky,5
114024,apache_struts,DefaultJSONWriterTest.testWriteBeanWithList,"    @Test
    public void testWriteBeanWithList() throws Exception {
        BeanWithList bean1 = new BeanWithList();
        bean1.setStringField(""str"");
        bean1.setBooleanField(true);
        bean1.setCharField('s');
        bean1.setDoubleField(10.1);
        bean1.setFloatField(1.5f);
        bean1.setIntField(10);
        bean1.setLongField(100);
        bean1.setEnumField(AnEnum.ValueA);
        bean1.setEnumBean(AnEnumBean.Two);
        List<String> errors = new ArrayList<String>();
        errors.add(""Field is required"");
        bean1.setErrors(errors);

        JSONWriter jsonWriter = new DefaultJSONWriter();
        jsonWriter.setEnumAsBean(false);
        jsonWriter.setIgnoreHierarchy(false);
        String json = jsonWriter.write(bean1);
        TestUtils.assertEquals(DefaultJSONWriter.class.getResource(""jsonwriter-write-bean-04.txt""), json);
    }
",non-flaky,5
170548,eclipse_jetty.project,TestResourceAnnotations.destroy,"    @AfterEach
    public void destroy() throws Exception
    {
        comp.destroySubcontext(""env"");
    }
",non-flaky,5
113787,salesforce_reactive-grpc,ReactivePublisherBackpressureOnReadyHandlerTest.exceptionInOnOnErrorCancelsUpstreamSubscription,"    @Test
    public void exceptionInOnOnErrorCancelsUpstreamSubscription() {
        ClientCallStreamObserver<Object> obs = mock(ClientCallStreamObserver.class);
        doThrow(new IllegalStateException(""won't be propagated to handler caller"")).when(obs).onError(any(Throwable.class));
        ReactivePublisherBackpressureOnReadyHandlerClient<Object> handler = new ReactivePublisherBackpressureOnReadyHandlerClient<Object>(obs);
        Subscription sub = mock(Subscription.class);
        handler.onSubscribe(sub);
        
        handler.onError(new RuntimeException());
        verify(obs).cancel(anyString(), any(Throwable.class));
    }
",non-flaky,5
133944,CorfuDB_CorfuDB,ManagementHandlerTest.testHandleOrchestrator,"    @Test
    public void testHandleOrchestrator() {
        // Test with an ORCHESTRATOR_RESPONSE of type QueryResponse.
        ResponseMsg response = getResponseMsg(
                getBasicHeader(ClusterIdCheck.IGNORE, EpochCheck.IGNORE),
                getQueriedWorkflowResponseMsg(true)
        );

        ArgumentCaptor<QueryResponse> qrCaptor = ArgumentCaptor.forClass(QueryResponse.class);
        managementHandler.handleMessage(response, mockChannelHandlerContext);

        // Verify that the correct request was completed (once) with the appropriate value,
        // and that we did not complete exceptionally.
        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));
        verify(mockClientRouter).completeRequest(eq(response.getHeader().getRequestId()), qrCaptor.capture());
        assertTrue(qrCaptor.getValue().isActive());

        // Test with an ORCHESTRATOR_RESPONSE of type CreateWorkflowResponse.
        response = getResponseMsg(
                getBasicHeader(ClusterIdCheck.IGNORE, EpochCheck.IGNORE),
                getCreatedWorkflowResponseMsg(DEFAULT_UUID)
        );

        ArgumentCaptor<CreateWorkflowResponse> cwCaptor = ArgumentCaptor.forClass(CreateWorkflowResponse.class);
        managementHandler.handleMessage(response, mockChannelHandlerContext);

        // Verify that the correct request was completed (once) with the appropriate value,
        // and that we did not complete exceptionally.
        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));
        verify(mockClientRouter).completeRequest(eq(response.getHeader().getRequestId()), cwCaptor.capture());
        assertEquals(DEFAULT_UUID, cwCaptor.getValue().workflowId);
    }
",non-flaky,5
112716,hwang-pku_ormlite-core,ReflectionDatabaseConnectionProxyFactoryTest.testBasic,"	@Test
	public void testBasic() throws Exception {
		Dao<Foo, Object> dao = createDao(Foo.class, true);
		Foo foo = new Foo();
		foo.val = 1131233;

		assertEquals(0, OurConnectionProxy.insertCount);
		assertEquals(1, dao.create(foo));
		assertEquals(1, OurConnectionProxy.insertCount);

		Foo result = dao.queryForId(foo.id);
		assertEquals(foo.val + VALUE_INCREMENT, result.val);
	}
",non-flaky,5
26774,MundaneImmortal_pair-distribution-app,DayPairsTest.testSimpleDateFormatNotPersisted,"	@Test
	public void testSimpleDateFormatNotPersisted() throws NoSuchFieldException, SecurityException {
		DayPairs pairs = new DayPairs();
		Field dateFormatterField = pairs.getClass().getDeclaredField(""dateFormatter"");
		dateFormatterField.setAccessible(true);
		Transient annotation = dateFormatterField.getAnnotation(Transient.class);
		
		assertThat(annotation, is(not(nullValue())));
	}
",non-flaky,5
94621,square_okhttp,InterceptorTest.intercept,"  @Test public void networkInterceptorsCannotCallProceedMultipleTimes() throws Exception {
      @Override public Response intercept(Chain chain) throws IOException {
        chain.proceed(chain.request());
        return chain.proceed(chain.request());
      }
",non-flaky,5
53160,cloudfoundry_uaa,TokenPolicyTest.tokenPolicy_whenInvalidUniquenessValue_throwsException,"    @Test
    public void tokenPolicy_whenInvalidUniquenessValue_throwsException() throws Exception {

        TokenPolicy tokenPolicy = new TokenPolicy();
        expectedException.expect(IllegalArgumentException.class);
        expectedException.expectMessage(""Invalid refresh token format invalid. Acceptable values are: [opaque, jwt]"");

        tokenPolicy.setRefreshTokenFormat(""invalid"");
    }
",non-flaky,5
112641,tbsalling_aismessages,BinaryBroadcastMessageTest.canDecodeUnknownApplicationSpecificMessage,"    @Test
    public void canDecodeUnknownApplicationSpecificMessage() {
        AISMessage aisMessage = AISMessage.create(NMEAMessage.fromString(""!AIVDM,1,1,,A,8@30oni?1j020@00,0*23""));

        System.out.println(aisMessage.toString());

        assertEquals(316, ((BinaryBroadcastMessage) aisMessage).getDesignatedAreaCode().intValue());
        assertEquals(7, ((BinaryBroadcastMessage) aisMessage).getFunctionalId().intValue());
        assertEquals(UnknownApplicationSpecificMessage.class, ((BinaryBroadcastMessage) aisMessage).getApplicationSpecificMessage().getClass());
    }
",non-flaky,5
97731,vojtechhabarta_typescript-generator,OptionalAnnotationTest.testJackson2NoAnnotation,"    @Test
    public void testJackson2NoAnnotation() {
        Settings settings = new Settings();
        ModelParser parser = new Jackson2Parser(settings, new DefaultTypeProcessor());
        testModel(parser.parseModel(Jackson2Bean.class), false);
    }
",non-flaky,5
91385,OpenLCB_OpenLCB_Java,SingleConsumerTest.put,"    @Test
    public void testCTor() {
        NodeID nid = new NodeID(new byte[]{1,2,3,4,5,6});
        EventID eid = new EventID(new byte[]{1,2,3,4,5,6,7,8});
        Connection testConnection = new AbstractConnection(){
            public void put(Message msg, Connection node) {
            }
",non-flaky,5
110167,Wikidata_wikidata-toolkit,DirectoryManagerTest.getCompressionInputStreamNone,"	@Test
	public void getCompressionInputStreamNone() throws IOException {
		ByteArrayInputStream in = new ByteArrayInputStream(
				""new contents"".getBytes(StandardCharsets.UTF_8));
		assertEquals(in, dm.getCompressorInputStream(in, CompressionType.NONE));
	}
",non-flaky,5
94728,ktuukkan_marine-api,SpeedOverGroundTest.conversionReturnsOnInvalidValues,"    @Test
    public void conversionReturnsOnInvalidValues() {
        assertEquals(-10.1, SpeedOverGround.toKnots(-101), DELTA);
        assertEquals(102.3, SpeedOverGround.toKnots(1023), DELTA);
        assertEquals(4567.8, SpeedOverGround.toKnots(45678), DELTA);
    }
",non-flaky,5
89278,apache_samza,TestJobsResource.testPostJobs,"  @Test
   public void testPostJobs()
      throws IOException {
    Response resp = target(""v1/jobs"").request().post(Entity.text(""""));
    assertEquals(405, resp.getStatus());
    resp.close();
  }
",non-flaky,5
98054,vert-x3_vertx-mongo-client,GridFsTest.testDownloadStream,"  @Test
  public void testDownloadStream() {
    long fileLength = (1024 * 3) + 70;
    String fileName = createTempFileWithContent(fileLength);
    String downloadFileName = createTempFile();

    AtomicReference<MongoGridFsClient> gridFsClient = new AtomicReference<>();

    Promise<MongoGridFsClient> gridFsClientPromise = Promise.promise();

    mongoClient.createDefaultGridFsBucketService(gridFsClientPromise);

    gridFsClientPromise.future().compose(mongoGridFsClient -> {
      assertNotNull(mongoGridFsClient);
      gridFsClient.set(mongoGridFsClient);
      Promise<Void> dropPromise = Promise.promise();
      mongoGridFsClient.drop(dropPromise);
      return dropPromise.future();
    }).compose(dropped -> {
      Promise<String> uploadPromise = Promise.promise();
      gridFsClient.get().uploadFile(fileName, uploadPromise);
      return uploadPromise.future();
    }).compose(id -> {
      assertNotNull(id);
      Promise<AsyncFile> openPromise = Promise.promise();
      vertx.fileSystem().open(downloadFileName, new OpenOptions().setWrite(true), openPromise);
      return openPromise.future();
    }).compose(asyncFile -> {
      Promise<Long> downloadedPromise = Promise.promise();
      gridFsClient.get().downloadByFileName(asyncFile, fileName, downloadedPromise);
      return downloadedPromise.future();
    }).compose(length -> {
      assertTrue(fileLength == length);
      testComplete();
      return Future.succeededFuture();
    }).onComplete(event -> {
      if (event.failed()) {
        fail(event.cause());
      }
    });
    await();

  }
",non-flaky,5
114091,aws_aws-sdk-java-v2,KeyTest.numericKeys_convertsToCorrectAttributeValue,"    @Test
    public void numericKeys_convertsToCorrectAttributeValue() {
        Key key = Key.builder().partitionValue(123).sortValue(45.6).build();

        assertThat(key.partitionKeyValue(), is(AttributeValue.builder().n(""123"").build()));
        assertThat(key.sortKeyValue(), is(Optional.of(AttributeValue.builder().n(""45.6"").build())));
    }
",non-flaky,5
99775,apache_cassandra,RateBasedBackPressureTest.testBackPressurePastTimeout,"    @Test
    public void testBackPressurePastTimeout() throws Exception
    {
        long windowSize = 10000;
        TestTimeSource timeSource = new TestTimeSource();
        TestableBackPressure strategy = new TestableBackPressure(ImmutableMap.of(HIGH_RATIO, ""0.9"", FACTOR, ""10"", FLOW, ""SLOW""), timeSource, windowSize);
        RateBasedBackPressureState state1 = strategy.newState(InetAddressAndPort.getByName(""127.0.0.1""));
        RateBasedBackPressureState state2 = strategy.newState(InetAddressAndPort.getByName(""127.0.0.2""));
        RateBasedBackPressureState state3 = strategy.newState(InetAddressAndPort.getByName(""127.0.0.3""));

        // Update incoming and outgoing rates:
        state1.incomingRate.update(5); // slow
        state1.outgoingRate.update(100);
        state2.incomingRate.update(100);
        state2.outgoingRate.update(100);
        state3.incomingRate.update(100);
        state3.outgoingRate.update(100);

        // Move time ahead:
        timeSource.sleep(windowSize, TimeUnit.MILLISECONDS);

        // Verify the slow replica rate limiting has been applied:
        Set<RateBasedBackPressureState> replicaGroup = Sets.newHashSet(state1, state2, state3);
        strategy.apply(replicaGroup, 4, TimeUnit.SECONDS);
        assertTrue(strategy.checkAcquired());
        assertTrue(strategy.checkApplied());
        assertEquals(0.5, strategy.getRateLimiterForReplicaGroup(replicaGroup).getRate(), 0.1);

        // Make one more apply call to saturate the rate limit timeout (0.5 requests per second means 2 requests span
        // 4 seconds, but we can only make one as we have to subtract the incoming response time):
        strategy.apply(replicaGroup, 4, TimeUnit.SECONDS);

        // Now verify another call to apply doesn't acquire the rate limit because of the max timeout of 4 seconds minus
        // 2 seconds of response time, so the time source itself sleeps two second:
        long start = timeSource.currentTimeMillis();
        strategy.apply(replicaGroup, 4, TimeUnit.SECONDS);
        assertFalse(strategy.checkAcquired());
        assertTrue(strategy.checkApplied());
        assertEquals(TimeUnit.NANOSECONDS.convert(2, TimeUnit.SECONDS),
                     strategy.timeout);
        assertEquals(strategy.timeout,
                     TimeUnit.NANOSECONDS.convert(timeSource.currentTimeMillis() - start, TimeUnit.MILLISECONDS));
    }
",non-flaky,5
177203,line_armeria,SpringTomcatApplicationItTest.greetingShouldReturnUsersMessage,"    @Test
    public void greetingShouldReturnUsersMessage() throws Exception {
        assertThat(restTemplate.getForObject(""http://localhost:"" +
                                             httpPort +
                                             ""/tomcat/api/rest/v1/greeting?name=Armeria"",
                                             String.class))
                .contains(""Hello, Armeria!"");
    }
",non-flaky,5
315,square_okhttp,DuplexTest.duplexWithRedirect,"@Test
public void duplexWithRedirect() throws Exception {
    enableProtocol(HTTP_2);
    MockDuplexResponseBody mockDuplexResponseBody = enqueueResponseWithBody(new MockResponse().clearHeaders().setResponseCode(HttpURLConnection.HTTP_MOVED_PERM).addHeader(""Location: /b""), new MockDuplexResponseBody().sendResponse(""/a has moved!\n"").requestIOException().exhaustResponse());
    server.enqueue(new MockResponse().setBody(""this is /b""));
    Call call = client.newCall(new Request.Builder().url(server.url(""/"")).post(new AsyncRequestBody()).build());
    try (final Response response = call.execute()) {
        BufferedSource responseBody = response.body().source();
        assertThat(responseBody.readUtf8Line()).isEqualTo(""this is /b"");
    }
    BufferedSink requestBody = ((AsyncRequestBody) (call.request().body())).takeSink();
    try {
        requestBody.writeUtf8(""request body\n"");
        requestBody.flush();
        fail();
    } catch (IOException expected) {
        assertThat(expected.getMessage()).isEqualTo(""stream was reset: CANCEL"");
    }
    mockDuplexResponseBody.awaitSuccess();
    assertThat(listener.recordedEventTypes()).containsExactly(""CallStart"", ""DnsStart"", ""DnsEnd"", ""ConnectStart"", ""SecureConnectStart"", ""SecureConnectEnd"", ""ConnectEnd"", ""ConnectionAcquired"", ""RequestHeadersStart"", ""RequestHeadersEnd"", ""RequestBodyStart"", ""ResponseHeadersStart"", ""ResponseHeadersEnd"", ""ResponseBodyStart"", ""ResponseBodyEnd"", ""RequestHeadersStart"", ""RequestHeadersEnd"", ""ResponseHeadersStart"", ""ResponseHeadersEnd"", ""ResponseBodyStart"", ""ResponseBodyEnd"", ""ConnectionReleased"", ""CallEnd"", ""RequestFailed"");
}",async wait,0
78309,apache_beam,SimpleDoFnRunnerTest.testTimerSet,"  @Test
  public void testTimerSet() {
    WindowFn<?, ?> windowFn = new GlobalWindows();
    DoFnWithTimers<GlobalWindow> fn = new DoFnWithTimers(windowFn.windowCoder());
    DoFnRunner<String, String> runner =
        new SimpleDoFnRunner<>(
            null,
            fn,
            NullSideInputReader.empty(),
            null,
            null,
            Collections.emptyList(),
            mockStepContext,
            null,
            Collections.emptyMap(),
            WindowingStrategy.of(new GlobalWindows()));

    // Setting the timer needs the current time, as it is set relative
    Instant currentTime = new Instant(42);
    when(mockTimerInternals.currentInputWatermarkTime()).thenReturn(currentTime);

    runner.processElement(WindowedValue.valueInGlobalWindow(""anyValue""));

    verify(mockTimerInternals)
        .setTimer(
            StateNamespaces.window(new GlobalWindows().windowCoder(), GlobalWindow.INSTANCE),
            DoFnWithTimers.TIMER_ID,
            currentTime.plus(DoFnWithTimers.TIMER_OFFSET),
            TimeDomain.EVENT_TIME);
  }
",non-flaky,5
159699,liquibase_liquibase,SelectFromDatabaseChangeLogLockExecutorTest.generateSql_count,"    @Test
    public void generateSql_count() throws Exception {
        this.statementUnderTest = new SelectFromDatabaseChangeLogLockStatement(new ColumnConfig().setName(""COUNT(*)"", true));
        assertCorrect(""select count(*) from [databasechangeloglock] where [id]=1"", MSSQLDatabase.class, SybaseDatabase.class);
        assertCorrect(""select count(*) from [databasechangeloglock] where [id]=1"", MSSQLDatabase.class, SybaseASADatabase.class);
        assertCorrect(""select count(*) from [databasechangeloglock] where [id]=1 for update"", OracleDatabase.class);
        assertCorrectOnRest(""select count(*) from [databasechangeloglock] where [id]=1"");
    }
",non-flaky,5
137162,spring-projects_spring-framework,AnnotationsScannerTests.method,"		@TestAnnotation1
		public void method() {
		}
",non-flaky,5
59574,looly_hutool,CronPatternUtilTest.matchedDatesTest,"	@Test
	public void matchedDatesTest() {
		//æµè¯æ¯30ç§æ§è¡
		List<Date> matchedDates = CronPatternUtil.matchedDates(""0/30 * 8-18 * * ?"", DateUtil.parse(""2018-10-15 14:33:22""), 5, true);
		Assert.assertEquals(5, matchedDates.size());
		Assert.assertEquals(""2018-10-15 14:33:30"", matchedDates.get(0).toString());
		Assert.assertEquals(""2018-10-15 14:34:00"", matchedDates.get(1).toString());
		Assert.assertEquals(""2018-10-15 14:34:30"", matchedDates.get(2).toString());
		Assert.assertEquals(""2018-10-15 14:35:00"", matchedDates.get(3).toString());
		Assert.assertEquals(""2018-10-15 14:35:30"", matchedDates.get(4).toString());
	}
",non-flaky,5
179450,abel533_Mapper,IdListMapperTest.testDeleteByEmptyIdList,"    @Test(expected = Exception.class)
    public void testDeleteByEmptyIdList() {
        SqlSession sqlSession = getSqlSession();
        try {
            CountryMapper mapper = sqlSession.getMapper(CountryMapper.class);
            mapper.deleteByIdList(new ArrayList<Long>());
        } finally {
            sqlSession.close();
        }
    }
",non-flaky,5
122596,vespa-engine_vespa,FileFinderTest.size_filters,"        @Test
        public void size_filters() {
            Path path = Paths.get(""/my/fake/path"");
            when(attributes.size()).thenReturn(100L);
            FileFinder.FileAttributes fileAttributes = new FileFinder.FileAttributes(path, attributes);

            assertFalse(FileFinder.largerThan(101).test(fileAttributes));
            assertTrue(FileFinder.largerThan(99).test(fileAttributes));

            assertTrue(FileFinder.smallerThan(101).test(fileAttributes));
            assertFalse(FileFinder.smallerThan(99).test(fileAttributes));
        }
",non-flaky,5
21007,NationalSecurityAgency_timely,TimelyTcpIT.testPut,"    @Test
    public void testPut() throws Exception {
        final TestServer m = new TestServer(conf);
        m.run();
        try (Socket sock = new Socket(""127.0.0.1"", 54321);
                PrintWriter writer = new PrintWriter(sock.getOutputStream(), true);) {
            writer.write(""put sys.cpu.user "" + TEST_TIME + "" 1.0 tag1=value1 tag2=value2\n"");
            writer.flush();
            while (1 != m.getTcpRequests().getCount()) {
                Thread.sleep(5);
            }
            Assert.assertEquals(1, m.getTcpRequests().getResponses().size());
            Assert.assertEquals(MetricRequest.class, m.getTcpRequests().getResponses().get(0).getClass());
            final MetricRequest actual = (MetricRequest) m.getTcpRequests().getResponses().get(0);
            // @formatter:off
            final MetricRequest expected = new MetricRequest(
                    Metric.newBuilder()
                            .name(""sys.cpu.user"")
                            .value(TEST_TIME, 1.0D)
                            .tag(new Tag(""tag1"", ""value1""))
                            .tag(new Tag(""tag2"", ""value2""))
                            .build()
            );
            // @formatter on
            Assert.assertEquals(expected, actual);
        } finally {
            m.shutdown();
        }
    }
",non-flaky,5
53145,cloudfoundry_uaa,SamlConfigTest.addNonActive,"    @Test
    public void addNonActive() {
        addActiveKey();
        SamlKey key = new SamlKey(privateKey, passphrase, certificate);
        String keyId = ""nonActiveKeyId"";
        config.addKey(keyId, key);
        Map<String, SamlKey> keys = config.getKeys();
        assertNotNull(keys);
        assertEquals(2, keys.size());
        assertNotEquals(keyId, config.getActiveKeyId());
        assertNotNull(keys.get(keyId));
        assertEquals(privateKey, keys.get(keyId).getKey());
        assertEquals(passphrase, keys.get(keyId).getPassphrase());
        assertEquals(certificate, keys.get(keyId).getCertificate());
    }
",non-flaky,5
30989,camunda-cloud_zeebe,ObjectMappingTest.shouldNotDeserializePOJOWithWrongKeyType,"  @Test
  public void shouldNotDeserializePOJOWithWrongKeyType() {
    // given
    final POJO pojo = new POJO();

    final DirectBuffer buffer =
        encodeMsgPack(
            (w) -> {
              w.writeMapHeader(1);

              w.writeInteger(123123L);
              w.writeFloat(123123.123123d);
            });

    // then
    exception.expect(RuntimeException.class);
    exception.expectMessage(
        ""Could not deserialize object [POJO]. Deserialization stuck at offset 2"");

    // when
    pojo.wrap(buffer);
  }
",non-flaky,5
26728,MundaneImmortal_pair-distribution-app,OpsPairsCombinationsTest.testGetPastPairByTrackForMissingTrack,"	@Test
	public void testGetPastPairByTrackForMissingTrack() {
		OpsPairCombinations devPairCombinations = new OpsPairCombinations(getPairsListFromDevs(getStandardDevs()));
		
		
		assertThat(devPairCombinations.getPastPairByTrack(1, ""track5""), is(nullValue()));
	}
",non-flaky,5
114128,aws_aws-sdk-java-v2,LocalDateTimeAttributeConverterTest.localDateTimeAttributeConverterInvalidNanoSecondsTest,"    @Test
    public void localDateTimeAttributeConverterInvalidNanoSecondsTest() {
        assertFails(() -> transformTo(converter, EnhancedAttributeValue.fromString(""0-01-01T00:00:00.9999999999"")
                                                                       .toAttributeValue()));
    }
",non-flaky,5
160371,ConsenSys_teku,SignedAttestationTest.shouldDeserialize,"  @Test
  public void shouldDeserialize() throws JsonProcessingException {
    final SignedAttestation signedAttestation =
        jsonProvider.jsonToObject(jsonData, SignedAttestation.class);
    assertThat(signedAttestation.sourceEpoch).isEqualTo(source);
    assertThat(signedAttestation.targetEpoch).isEqualTo(target);
    assertThat(signedAttestation.signingRoot).isEqualTo(signingRoot);
  }
",non-flaky,5
160387,ConsenSys_teku,ChainDataProviderTest.getBeaconState_shouldReturnEmptyWhenRootNotFound,"  @Test
  public void getBeaconState_shouldReturnEmptyWhenRootNotFound()
      throws ExecutionException, InterruptedException {
    final ChainDataProvider provider =
        new ChainDataProvider(spec, recentChainData, combinedChainDataClient);
    SafeFuture<Optional<BeaconState>> future =
        provider.getBeaconState(data.randomBytes32().toHexString());
    final Optional<BeaconState> maybeState = future.get();
    assertThat(maybeState).isEmpty();
  }
",non-flaky,5
98258,spotify_docker-client,PushPullIT.testPushImageToPrivateUnauthedRegistryWithoutAuth,"  @Test
  public void testPushImageToPrivateUnauthedRegistryWithoutAuth() throws Exception {
    registryContainerId = startUnauthedRegistry(client);

    // Make a DockerClient without RegistryAuth
    final DefaultDockerClient client = DefaultDockerClient.fromEnv().build();

    // Push an image to the private registry and check it succeeds
    final String dockerDirectory = Resources.getResource(""dockerDirectory"").getPath();
    client.build(Paths.get(dockerDirectory), LOCAL_IMAGE);
    client.push(LOCAL_IMAGE);
    // We should be able to pull it again
    client.pull(LOCAL_IMAGE);
  }
",non-flaky,5
122556,vespa-engine_vespa,CommandLineTest.testBasicExecute,"    @Test
    public void testBasicExecute() {
        terminal.expectCommand(""foo bar 2>&1"", 0, ""line1\nline2\n\n"");
        CommandResult result = commandLine.add(""foo"", ""bar"").execute();
        assertEquals(0, result.getExitCode());
        assertEquals(""line1\nline2"", result.getOutput());
        assertEquals(""line1\nline2\n\n"", result.getUntrimmedOutput());
        assertEquals(List.of(""line1"", ""line2""), result.getOutputLines());
        assertEquals(1, context.getSystemModificationLog().size());
        assertEquals(""Executing command: foo bar 2>&1"", context.getSystemModificationLog().get(0));

        List<CommandLine> commandLines = terminal.getTestProcessFactory().getMutableCommandLines();
        assertEquals(1, commandLines.size());
        assertTrue(commandLine == commandLines.get(0));

        int lines = result.map(r -> r.getOutputLines().size());
        assertEquals(2, lines);
    }
",non-flaky,5
110110,Wikidata_wikidata-toolkit,JsonSerializationActionTest.testJsonOutput,"	@Test
	public void testJsonOutput() throws IOException {
		String[] args = new String[] { ""-a"", ""json"", ""-o"",
				""/path/to/output.json"" };

		DirectoryManagerFactory
				.setDirectoryManagerClass(MockDirectoryManager.class);

		ClientConfiguration config = new ClientConfiguration(args);
		JsonSerializationAction jsa = (JsonSerializationAction) config
				.getActions().get(0);

		ItemIdValue subject1 = Datamodel.makeWikidataItemIdValue(""Q42"");
		ItemIdValue subject2 = Datamodel.makeWikidataItemIdValue(""Q43"");
		MonolingualTextValue mtv1 = Datamodel.makeMonolingualTextValue(""Test1"",
				""en"");
		MonolingualTextValue mtv2 = Datamodel.makeMonolingualTextValue(""Test2"",
				""fr"");

		ItemDocument id1 = Datamodel.makeItemDocument(subject1,
				Arrays.asList(mtv1, mtv2), Arrays.asList(mtv1),
				Collections.<MonolingualTextValue> emptyList(),
				Collections.<StatementGroup> emptyList(),
				Collections.<String, SiteLink> emptyMap());

		ItemDocument id2 = Datamodel.makeItemDocument(subject2,
				Collections.<MonolingualTextValue> emptyList(),
				Arrays.asList(mtv2),
				Collections.<MonolingualTextValue> emptyList(),
				Collections.<StatementGroup> emptyList(),
				Collections.<String, SiteLink> emptyMap());

		PropertyDocument pd1 = Datamodel
				.makePropertyDocument(
						Datamodel.makeWikidataPropertyIdValue(""P31""),
						Arrays.asList(mtv1),
						Collections.<MonolingualTextValue> emptyList(),
						Arrays.asList(mtv1),
						Collections.emptyList(),
						Datamodel
								.makeDatatypeIdValue(DatatypeIdValue.DT_MONOLINGUAL_TEXT));

		jsa.open();
		jsa.processItemDocument(id1);
		jsa.processPropertyDocument(pd1);
		jsa.processItemDocument(id2);
		jsa.close();

		MockDirectoryManager mdm = new MockDirectoryManager(
				Paths.get(""/path/to/""), false);

		ObjectMapper mapper = new DatamodelMapper(Datamodel.SITE_WIKIDATA);
		ObjectReader documentReader = mapper
				.readerFor(EntityDocumentImpl.class);
		MappingIterator<EntityDocument> documentIterator = documentReader
				.readValues(mdm.getInputStreamForFile(""output.json"",
						CompressionType.NONE));

		List<EntityDocument> results = new ArrayList<>();
		while (documentIterator.hasNextValue()) {
			EntityDocument document = documentIterator.nextValue();
			results.add(document);
		}
		documentIterator.close();

		assertEquals(3, results.size());
		assertEquals(id1, results.get(0));
		assertEquals(pd1, results.get(1));
		assertEquals(id2, results.get(2));

	}
",non-flaky,5
94773,ktuukkan_marine-api,AISMessage24ParserTest.getBow,"    @Test
    public void getBow() throws Exception {
        assertEquals(5, partB.getBow());
    }
",non-flaky,5
170499,eclipse_jetty.project,MBeanContainerTest.testMBeanContainer,"    @Test
    public void testMBeanContainer()
    {
        assertNotNull(mbeanContainer, ""Container shouldn't be null"");
    }
",non-flaky,5
43116,trinodb_trino,BaseConnectorSmokeTest.testJoin,"    @Test
    public void testJoin()
    {
        assertQuery(""SELECT n.name, r.name FROM nation n JOIN region r on n.regionkey = r.regionkey"");
    }
",non-flaky,5
162459,testcontainers_testcontainers-java,MultiArgsStatementTest.simpleTest,"    @Test
    public void simpleTest() throws Exception {
        assertStatement(new MultiArgsStatement(""TEST"", ""a"", ""b"", ""c""));
    }
",non-flaky,5
177188,line_armeria,RequestContextCurrentTraceContextTest.newScope_closeDoesntClearFirstScope,"    @Test
    public void newScope_closeDoesntClearFirstScope() {
        final TraceContext traceContext2 = TraceContext.newBuilder().traceId(1).spanId(2).build();

        try (SafeCloseable requestContextScope = ctx.push()) {
            try (Scope traceContextScope = currentTraceContext.newScope(traceContext)) {
                assertThat(traceContextScope).hasToString(""InitialRequestScope"");
                assertThat(currentTraceContext.get()).isEqualTo(traceContext);

                try (Scope traceContextScope2 = currentTraceContext.newScope(traceContext2)) {
                    assertThat(traceContextScope2).hasToString(""RequestContextTraceContextScope"");
                    assertThat(currentTraceContext.get()).isEqualTo(traceContext2);
                }
                assertThat(currentTraceContext.get()).isEqualTo(traceContext);
            }
            // the first scope is attached to the request context and cleared when that's destroyed
            assertThat(currentTraceContext.get()).isEqualTo(traceContext);
        }
    }
",non-flaky,5
364,abel533_Mapper,IdTest.testCompositeKeys,"@Test
public void testCompositeKeys() {
    EntityHelper.initEntityNameMap(UserCompositeKeys.class, config);
    EntityTable entityTable = EntityHelper.getEntityTable(UserCompositeKeys.class);
    Assert.assertNotNull(entityTable);
    Set<EntityColumn> columns = entityTable.getEntityClassColumns();
    Assert.assertEquals(2, columns.size());
    Assert.assertEquals(2, entityTable.getEntityClassPKColumns().size());
    for (EntityColumn column : columns) {
        Assert.assertTrue(column.isId());
    }
    ResultMap resultMap = entityTable.getResultMap(configuration);
    Assert.assertEquals(2, resultMap.getResultMappings().size());
    Assert.assertTrue(resultMap.getResultMappings().get(0).getFlags().contains(ID));
    Assert.assertTrue(resultMap.getResultMappings().get(1).getFlags().contains(ID));
    Assert.assertEquals(""<where> AND name = #{name} AND orgId = #{orgId}</where>"", SqlHelper.wherePKColumns(UserCompositeKeys.class));
}",unordered collections,3
76725,quarkusio_quarkus,JarRunnerIT.testThatJarRunnerConsoleOutputWorksCorrectly,"    @Test
    public void testThatJarRunnerConsoleOutputWorksCorrectly() throws MavenInvocationException, IOException {
        File testDir = initProject(""projects/classic"", ""projects/project-classic-console-output"");
        RunningInvoker running = new RunningInvoker(testDir, false);

        MavenProcessInvocationResult result = running.execute(Arrays.asList(""package"", ""-DskipTests""), Collections.emptyMap());
        await().atMost(1, TimeUnit.MINUTES).until(() -> result.getProcess() != null && !result.getProcess().isAlive());
        assertThat(running.log()).containsIgnoringCase(""BUILD SUCCESS"");
        running.stop();

        Path jar = testDir.toPath().toAbsolutePath()
                .resolve(Paths.get(""target/quarkus-app/quarkus-run.jar""));
        File output = new File(testDir, ""target/output.log"");
        output.createNewFile();

        Process process = doLaunch(jar, output).start();
        try {
            // Wait until server up
            await()
                    .pollDelay(1, TimeUnit.SECONDS)
                    .atMost(1, TimeUnit.MINUTES).until(() -> DevModeTestUtils.getHttpResponse(""/app/hello/package"", 200));

            String logs = FileUtils.readFileToString(output, ""UTF-8"");

            assertThatOutputWorksCorrectly(logs);

            // test that the application name and version are properly set
            assertApplicationPropertiesSetCorrectly();
            assertResourceReadingFromClassPathWorksCorrectly("""");
            assertUsingProtectionDomainWorksCorrectly("""");
        } finally {
            process.destroy();
        }

    }
",non-flaky,5
106617,Alluxio_alluxio,AlluxioJniFuseFileSystemTest.createWithLengthLimit,"  @Test
  public void createWithLengthLimit() throws Exception {
    String c256 = String.join("""", Collections.nCopies(16, ""0123456789ABCDEF""));
    mFileInfo.flags.set(O_WRONLY.intValue());
    assertEquals(-ErrorCodes.ENAMETOOLONG(),
        mFuseFs.create(""/foo/"" + c256, 0, mFileInfo));
  }
",non-flaky,5
160346,ConsenSys_teku,MetricsPublisherTest.afterEach,"  @AfterEach
  public void afterEach() throws Exception {
    mockWebServer.shutdown();
  }
",non-flaky,5
84581,apache_zookeeper,LeaderElectionSupportTest.onElectionEvent,"    @Test
    public void testReadyOffer() throws Exception {
        final ArrayList<EventType> events = new ArrayList<>();
        final CountDownLatch electedComplete = new CountDownLatch(1);

        final LeaderElectionSupport electionSupport1 = createLeaderElectionSupport();
        electionSupport1.start();
        LeaderElectionSupport electionSupport2 = createLeaderElectionSupport();
        LeaderElectionAware listener = new LeaderElectionAware() {
            boolean stoppedElectedNode = false;
            @Override
            public void onElectionEvent(EventType eventType) {
                events.add(eventType);
                if (!stoppedElectedNode
                    && eventType == EventType.DETERMINE_COMPLETE) {
                    stoppedElectedNode = true;
                    try {
                        // stopping the ELECTED node, so re-election will happen.
                        electionSupport1.stop();
                    } catch (Exception e) {
                        LOGGER.error(""Unexpected exception"", e);
                    }
                }
                if (eventType == EventType.ELECTED_COMPLETE) {
                    electedComplete.countDown();
                }
            }
",non-flaky,5
19423,eclipse_xtext-core,QualifiedNameTest.testAppendNull,"	@Test public void testCreateNull() {
	public void testAppendNull() {
		try {
			QualifiedName.create().append((String) null);
			fail(""Exception expected"");
		} catch (IllegalArgumentException e) {}
	}
",non-flaky,5
19477,eclipse_xtext-core,AbstractReaderTest.matches,"	@Test public void testLoadMatchAll() throws Exception {
			public boolean matches(URI uri) {
				return true;
			}
",non-flaky,5
60883,apache_druid,MaterializedViewSupervisorTest.testCreateTask,"  @Test
  public void testCreateTask()
  {
    List<DataSegment> baseSegments = Collections.singletonList(
        new DataSegment(
            ""base"",
            Intervals.of(""2015-01-02T00Z/2015-01-03T00Z""),
            ""2015-01-03"",
            ImmutableMap.of(),
            ImmutableList.of(""dim1"", ""dim2""),
            ImmutableList.of(""m1""),
            new HashBasedNumberedShardSpec(0, 1, 0, 1, null, null, null),
            9,
            1024
        )
    );

    HadoopIndexTask task = spec.createTask(
        Intervals.of(""2015-01-02T00Z/2015-01-03T00Z""),
        ""2015-01-03"",
        baseSegments
    );

    Assert.assertNotNull(task);
  }
",non-flaky,5
76714,quarkusio_quarkus,JPAReflectionInGraalITCase.testFieldAndGetterReflectionOnEntityFromServlet,"    @Test
    public void testFieldAndGetterReflectionOnEntityFromServlet() throws Exception {
        RestAssured.when().get(""/jpa/testreflection"").then()
                .body(is(""OK""));
    }
",non-flaky,5
104672,apache_pinot,RealtimeToOfflineSegmentsMinionClusterIntegrationTest.testSegmentListApi,"  @Test(enabled = false)
  public void testSegmentListApi() {
  }
",non-flaky,5
70860,apache_kafka,TransformationConfigTest.testEmbeddedConfigTimestampConverter,"    @Test
    public void testEmbeddedConfigTimestampConverter() {
        // Validate that we can construct a Connector config containing the extended config for the transform
        HashMap<String, String> connProps = new HashMap<>();
        connProps.put(""name"", ""foo"");
        connProps.put(""connector.class"", MockConnector.class.getName());
        connProps.put(""transforms"", ""example"");
        connProps.put(""transforms.example.type"", TimestampConverter.Value.class.getName());
        connProps.put(""transforms.example.target.type"", ""unix"");

        Plugins plugins = null; // Safe when we're only constructing the config
        new ConnectorConfig(plugins, connProps);
    }
",non-flaky,5
177220,line_armeria,AbstractEndpointSelectorTest.selectNow,"    @Test
            public Endpoint selectNow(ClientRequestContext ctx) {
                final List<Endpoint> endpoints = endpointGroup.endpoints();
                return endpoints.isEmpty() ? null : endpoints.get(0);
            }
",non-flaky,5
162437,testcontainers_testcontainers-java,GenericContainerRuleTest.copyFromContainerShouldFailBecauseNoFileTest,"    @Test(expected = NotFoundException.class)
    public void copyFromContainerShouldFailBecauseNoFileTest() throws NotFoundException, IOException, InterruptedException {

        try (final GenericContainer alpineCopyToContainer = new GenericContainer(""alpine:3.2"")
                        .withCommand(""top"")) {
            alpineCopyToContainer.start();
            alpineCopyToContainer.copyFileFromContainer(""/home/test.txt"", ""src/test/resources/copy-from/test.txt"");
        }
    }
",non-flaky,5
94644,square_okhttp,ConnectionReuseTest.intercept,"  @Test public void connectionsAreNotReusedIfNetworkInterceptorInterferes() throws Exception {
      @Override public Response intercept(Chain chain) throws IOException {
        Response response = chain.proceed(chain.request());
        return response.newBuilder()
            .body(ResponseBody.create(null, ""unrelated response body!""))
            .build();
      }
",non-flaky,5
298,apache_hadoop,TestNfs3HttpServer.testHttpServer,"  @Test
  public void testHttpServer() throws Exception {
    Nfs3 nfs = new Nfs3(conf);
    nfs.startServiceInternal(false);
    RpcProgramNfs3 nfsd = (RpcProgramNfs3) nfs.getRpcProgram();
    Nfs3HttpServer infoServer = nfsd.getInfoServer();

    String urlRoot = infoServer.getServerURI().toString();

    // Check default servlets.
    String pageContents = DFSTestUtil.urlGet(new URL(urlRoot + ""/jmx""));
    assertTrue(""Bad contents: "" + pageContents,
        pageContents.contains(""java.lang:type=""));
    System.out.println(""pc:"" + pageContents);

    int port = infoServer.getSecurePort();
    assertTrue(""Can't get https port"", port > 0);
  }
",non-flaky,5
134000,CorfuDB_CorfuDB,OneNodePausedIT.oneNodePausedTest,"    @Test(timeout = 300000)
    public void oneNodePausedTest() {
        workflow(wf -> {
            wf.deploy();

            CorfuCluster corfuCluster = wf.getUniverse()
                    .getGroup(wf.getFixture().data().getGroupParamByIndex(0).getName());

            CorfuClient corfuClient = corfuCluster.getLocalCorfuClient();

            CorfuTable<String, String> table = corfuClient
                    .createDefaultCorfuTable(DEFAULT_STREAM_NAME);

            for (int i = 0; i < DEFAULT_TABLE_ITER; i++) {
                table.put(String.valueOf(i), String.valueOf(i));
            }

            //Should pause one node and then resume
            CorfuServer server1 = corfuCluster.getServerByIndex(1);

            // Pause one node and wait for layout's unresponsive servers to change
            server1.pause();
            waitForUnresponsiveServersChange(size -> size == 1, corfuClient);

            // Verify layout, unresponsive servers should contain only one node
            Layout layout = corfuClient.getLayout();
            assertThat(layout.getUnresponsiveServers())
                    .containsExactly(server1.getEndpoint());

            // Verify cluster status is DEGRADED with one node down
            ClusterStatusReport clusterStatusReport = corfuClient.getManagementView()
                    .getClusterStatus();
            assertThat(clusterStatusReport.getClusterStatus())
                    .isEqualTo(ClusterStatus.DEGRADED);
            Map<String, NodeStatus> statusMap = clusterStatusReport
                    .getClusterNodeStatusMap();
            assertThat(statusMap.get(server1.getEndpoint())).isEqualTo(NodeStatus.DOWN);

            // Verify data path working fine
            for (int i = 0; i < DEFAULT_TABLE_ITER; i++) {
                assertThat(table.get(String.valueOf(i))).isEqualTo(String.valueOf(i));
            }

            // Resume the stopped node and wait for layout's unresponsive servers to change
            server1.resume();
            waitForUnresponsiveServersChange(size -> size == 0, corfuClient);

            final Duration sleepDuration = Duration.ofSeconds(1);
            // Verify cluster status is STABLE
            clusterStatusReport = corfuClient.getManagementView().getClusterStatus();
            while (!clusterStatusReport.getClusterStatus().equals(ClusterStatus.STABLE)) {
                clusterStatusReport = corfuClient.getManagementView().getClusterStatus();
                Sleep.sleepUninterruptibly(sleepDuration);
            }
            assertThat(clusterStatusReport.getClusterStatus())
                    .isEqualTo(ClusterStatus.STABLE);

            // Verify data path working fine
            for (int i = 0; i < DEFAULT_TABLE_ITER; i++) {
                assertThat(table.get(String.valueOf(i))).isEqualTo(String.valueOf(i));
            }

            corfuClient.shutdown();
        });
    }
",non-flaky,5
160410,ConsenSys_teku,ChainDataProviderTest.getStateFinalityCheckpoints_shouldGetCheckpointsAfterFinalized,"  @Test
  public void getStateFinalityCheckpoints_shouldGetCheckpointsAfterFinalized()
      throws ExecutionException, InterruptedException {
    final ChainDataProvider provider =
        new ChainDataProvider(spec, recentChainData, mockCombinedChainDataClient);
    final tech.pegasys.teku.spec.datastructures.state.beaconstate.BeaconState internalState =
        data.randomBeaconState(UInt64.valueOf(42));
    final FinalityCheckpointsResponse expected =
        new FinalityCheckpointsResponse(
            new tech.pegasys.teku.api.schema.Checkpoint(
                internalState.getPrevious_justified_checkpoint()),
            new tech.pegasys.teku.api.schema.Checkpoint(
                internalState.getCurrent_justified_checkpoint()),
            new tech.pegasys.teku.api.schema.Checkpoint(internalState.getFinalized_checkpoint()));

    when(mockCombinedChainDataClient.getBestState()).thenReturn(Optional.of(internalState));
    assertThat(provider.getStateFinalityCheckpoints(""head"").get().get()).isEqualTo(expected);
    verify(mockCombinedChainDataClient).getBestState();
  }
",non-flaky,5
84560,apache_zookeeper,DistributedQueueTest.testOffer1,"    @Test
    public void testOffer1() throws Exception {
        String dir = ""/testOffer1"";
        String testString = ""Hello World"";
        final int numClients = 1;
        ZooKeeper[] clients = new ZooKeeper[numClients];
        DistributedQueue[] queueHandles = new DistributedQueue[numClients];
        for (int i = 0; i < clients.length; i++) {
            clients[i] = createClient();
            queueHandles[i] = new DistributedQueue(clients[i], dir, null);
        }

        queueHandles[0].offer(testString.getBytes());

        byte[] dequeuedBytes = queueHandles[0].remove();
        assertEquals(new String(dequeuedBytes), testString);
    }
",non-flaky,5
112660,tbsalling_aismessages,AidToNavigationReportTest.canDecode2,"    @Test
    public void canDecode2() {
        AISMessage aisMessage = AISMessage.create(NMEAMessage.fromString(""!AIVDO,1,1,,A,E>lt;MIas0h3V:@;4a::h0b7W005Jh4nq:3l800003v010,4*08""));
        System.out.println(aisMessage.toString());

        assertEquals(AISMessageType.AidToNavigationReport, aisMessage.getMessageType());
        assertEquals((Integer) 0, aisMessage.getRepeatIndicator());
        AidToNavigationReport message = (AidToNavigationReport) aisMessage;
        assertEquals(MMSI.valueOf(995036021), message.getSourceMmsi());
        assertEquals(AidType.BeaconSpecialMark, message.getAidType());
        assertEquals(false, message.getAssignedMode());
        assertEquals(""S6A GLT VIRTU ATON"", message.getName());
        assertEquals(null, message.getNameExtension());
        assertEquals(false, message.getOffPosition());
        assertEquals(Integer.valueOf(60), message.getSecond());
        assertEquals(Integer.valueOf(0), message.getToBow());
        assertEquals(Integer.valueOf(0), message.getToPort());
        assertEquals(Integer.valueOf(0), message.getToStern());
        assertEquals(Integer.valueOf(0), message.getToStarboard());
        assertEquals(true, message.getVirtualAid());
        assertEquals(false, message.getPositionAccurate());
        assertEquals(Float.valueOf(-23.917385f), message.getLatitude());
        assertEquals(Float.valueOf(151.49791f), message.getLongitude());
        assertEquals(PositionFixingDevice.Surveyed, message.getPositionFixingDevice());
        assertFalse(message.getRaimFlag());
    }
",non-flaky,5
112698,hwang-pku_ormlite-core,TransactionManagerTest.call,"	@Test
	public void testTransactionManagerAutoCommitSupported() throws Exception {
		ConnectionSource connectionSource = createMock(ConnectionSource.class);
		DatabaseConnection conn = createMock(DatabaseConnection.class);
		expect(conn.isAutoCommitSupported()).andReturn(true);
		expect(conn.isAutoCommit()).andReturn(false);
		Savepoint savePoint = createMock(Savepoint.class);
		expect(savePoint.getSavepointName()).andReturn(""name"").anyTimes();
		expect(conn.setSavePoint(isA(String.class))).andReturn(savePoint);
		conn.commit(savePoint);
		expect(connectionSource.getDatabaseType()).andReturn(databaseType);
		expect(connectionSource.getReadWriteConnection(null)).andReturn(conn);
		expect(connectionSource.saveSpecialConnection(conn)).andReturn(true);
		connectionSource.clearSpecialConnection(conn);
		connectionSource.releaseConnection(conn);
		replay(connectionSource, conn, savePoint);
		TransactionManager tm = new TransactionManager(connectionSource);
		tm.callInTransaction(new Callable<Void>() {
			@Override
			public Void call() {
				return null;
			}
",non-flaky,5
179441,abel533_Mapper,AggregationMapperTest.testCount,"    @Test
    public void testCount() {
        SqlSession sqlSession = getSqlSession();
        try {
            UserMapper mapper = sqlSession.getMapper(UserMapper.class);
            AggregateCondition aggregateCondition = AggregateCondition.builder().
                    aggregateBy(""id"").aliasName(""total"").aggregateType(AggregateType.COUNT).groupBy(""role"");
            Example example = new Example(User.class);
            List<User> m = mapper.selectAggregationByExample(example, aggregateCondition);
            Assert.assertEquals(2, m.size());
        } finally {
            sqlSession.close();
        }
    }
",non-flaky,5
70790,apache_kafka,RestExtensionIntegrationTest.testRestExtensionApi,"    @Test
    public void testRestExtensionApi() throws IOException, InterruptedException {
        // setup Connect worker properties
        Map<String, String> workerProps = new HashMap<>();
        workerProps.put(REST_EXTENSION_CLASSES_CONFIG, IntegrationTestRestExtension.class.getName());

        // build a Connect cluster backed by Kafka and Zk
        connect = new EmbeddedConnectCluster.Builder()
            .name(""connect-cluster"")
            .numWorkers(1)
            .numBrokers(1)
            .workerProps(workerProps)
            .build();

        // start the clusters
        connect.start();

        WorkerHandle worker = connect.workers().stream()
            .findFirst()
            .orElseThrow(() -> new AssertionError(""At least one worker handle should be available""));

        waitForCondition(
            this::extensionIsRegistered,
            REST_EXTENSION_REGISTRATION_TIMEOUT_MS,
            ""REST extension was never registered""
        );

        ConnectorHandle connectorHandle = RuntimeHandles.get().connectorHandle(""test-conn"");
        try {
            // setup up props for the connector
            Map<String, String> connectorProps = new HashMap<>();
            connectorProps.put(CONNECTOR_CLASS_CONFIG, MonitorableSinkConnector.class.getSimpleName());
            connectorProps.put(TASKS_MAX_CONFIG, String.valueOf(1));
            connectorProps.put(TOPICS_CONFIG, ""test-topic"");

            // start a connector
            connectorHandle.taskHandle(connectorHandle.name() + ""-0"");
            StartAndStopLatch connectorStartLatch = connectorHandle.expectedStarts(1);
            connect.configureConnector(connectorHandle.name(), connectorProps);
            connectorStartLatch.await(CONNECTOR_HEALTH_AND_CONFIG_TIMEOUT_MS, TimeUnit.MILLISECONDS);

            String workerId = String.format(""%s:%d"", worker.url().getHost(), worker.url().getPort());
            ConnectorHealth expectedHealth = new ConnectorHealth(
                connectorHandle.name(),
                new ConnectorState(
                    ""RUNNING"",
                    workerId,
                    null
                ),
                Collections.singletonMap(
                    0,
                    new TaskState(0, ""RUNNING"", workerId, null)
                ),
                ConnectorType.SINK
            );

            connectorProps.put(NAME_CONFIG, connectorHandle.name());

            // Test the REST extension API; specifically, that the connector's health and configuration
            // are available to the REST extension we registered and that they contain expected values
            waitForCondition(
                () -> verifyConnectorHealthAndConfig(connectorHandle.name(), expectedHealth, connectorProps),
                CONNECTOR_HEALTH_AND_CONFIG_TIMEOUT_MS,
                ""Connector health and/or config was never accessible by the REST extension""
            );
        } finally {
            RuntimeHandles.get().deleteConnector(connectorHandle.name());
        }
    }
",non-flaky,5
135023,undertow-io_undertow,ResponseParserResumeTestCase.testOneCharacterAtATime,"    @Test
    public void testOneCharacterAtATime() throws BadRequestException {
        byte[] in = DATA.getBytes();
        final ResponseParseState context = new ResponseParseState();
        HttpResponseBuilder result = new HttpResponseBuilder();
        ByteBuffer buffer = ByteBuffer.wrap(in);
        buffer.limit(1);
        while (context.state != ResponseParseState.PARSE_COMPLETE) {
            HttpResponseParser.INSTANCE.handle(buffer, context, result);
            buffer.limit(buffer.limit() + 1);
        }
        runAssertions(result, context);
    }
",non-flaky,5
95721,togglz_togglz,EnumBasedFeatureProviderTest.shouldBuildMetadataForMultipleEnumsViaConstructor,"        @Test
        public void shouldBuildMetadataForMultipleEnumsViaConstructor() {

            FeatureProvider provider = new EnumBasedFeatureProvider(ValidFeatureEnum.class, OtherFeatureEnum.class);

            assertThat(provider.getMetaData(ValidFeatureEnum.FEATURE1).getLabel())
                .isEqualTo(""First feature"");
            assertThat(provider.getMetaData(OtherFeatureEnum.ADDITIONAL_FEATURE).getLabel())
                .isEqualTo(""Additional Feature"");

        }
",non-flaky,5
97685,vojtechhabarta_typescript-generator,ReadOnlyWriteOnlyTest.test,"    @Test
    public void test() {
        final Settings settings = TestUtils.settings();
        settings.generateReadonlyAndWriteonlyJSDocTags = true;
        final String output = new TypeScriptGenerator(settings).generateTypeScript(Input.from(ReadOnlyWriteOnlyUser.class));
        final String expected = ""\n""
                + ""interface ReadOnlyWriteOnlyUser {\n""
                + ""    name: string;\n""
                + ""    /**\n""
                + ""     * @readonly\n""
                + ""     */\n""
                + ""    id1: string;\n""
                + ""    /**\n""
                + ""     * @writeonly\n""
                + ""     */\n""
                + ""    password1: string;\n""
                + ""    /**\n""
                + ""     * @readonly\n""
                + ""     */\n""
                + ""    id2: string;\n""
                + ""    /**\n""
                + ""     * @writeonly\n""
                + ""     */\n""
                + ""    password2: string;\n""
                + ""}\n"";
        Assert.assertEquals(expected, output);
    }
",non-flaky,5
110184,Wikidata_wikidata-toolkit,PropertyRegisterTest.testSetPropertyTypeFromEntityIdValue,"	@Test
	public void testSetPropertyTypeFromEntityIdValue() {
		assertEquals(this.propertyRegister.setPropertyTypeFromEntityIdValue(
				this.dataObjectFactory
						.getPropertyIdValue(""P1001"", this.siteIri),
				this.dataObjectFactory.getItemIdValue(""Q20"", this.siteIri)),
				DatatypeIdValue.DT_ITEM);
	}
",non-flaky,5
84564,apache_zookeeper,DistributedQueueTest.testRemove2,"    @Test
    public void testRemove2() throws Exception {
        createNremoveMtest(""/testRemove2"", 10, 2);
    }
",non-flaky,5
84614,apache_zookeeper,GetEphemeralsTest.testGetEphemeralsSyncByPath,"    @Test
    public void testGetEphemeralsSyncByPath() throws KeeperException, InterruptedException {
        final String prefixPath = BASE + 0;
        List<String> actual = zk.getEphemerals(prefixPath);
        assertEquals(actual.size(), EPHEMERAL_CNT, ""Expected ephemeral count for allPaths"");
        for (int i = 0; i < EPHEMERAL_CNT; i++) {
            String path = expected[i];
            assertTrue(actual.contains(path), String.format(""Path=%s exists in getEphemerals(%s) list "", path, prefixPath));
        }
    }
",non-flaky,5
122617,vespa-engine_vespa,StringEditorTest.testBasics,"    @Test
    public void testBasics() {
        assertCursor(0, 0, """");

        cursor.write(""hello"");
        assertCursor(0, 5, ""hello"");

        cursor.write(""one\ntwo"");
        assertCursor(1, 3, ""helloone\ntwo"");

        cursor.deleteAll();
        assertCursor(0, 0, """");

        cursor.moveForward();
        assertCursor(0, 0, """");

        cursor.writeLine(""foo"");
        assertCursor(1, 0, ""foo\n"");

        cursor.writeLines(""one"", ""two"");
        assertCursor(3, 0, ""foo\none\ntwo\n"");

        cursor.deleteBackward();
        assertCursor(2, 3, ""foo\none\ntwo"");

        cursor.deleteBackward(2);
        assertCursor(2, 1, ""foo\none\nt"");

        Mark mark = cursor.createMark();

        cursor.moveToStartOfPreviousLine().moveBackward(2);
        assertCursor(0, 2, ""foo\none\nt"");

        assertEquals(""o\none\nt"", cursor.getTextTo(mark));

        cursor.deleteTo(mark);
        assertCursor(0, 2, ""fo"");

        cursor.deleteBackward(2);
        assertCursor(0, 0, """");

        cursor.writeLines(""one"", ""two"", ""three"").moveToStartOfBuffer();
        assertCursor(0, 0, ""one\ntwo\nthree\n"");

        Pattern pattern = Pattern.compile(""t(.)"");
        Optional<Match> match = cursor.moveForwardToEndOfMatch(pattern);
        assertCursor(1, 2, ""one\ntwo\nthree\n"");
        assertTrue(match.isPresent());
        assertEquals(""tw"", match.get().match());
        assertEquals("""", match.get().prefix());
        assertEquals(""o"", match.get().suffix());
        assertEquals(new Position(1, 0), match.get().startOfMatch());
        assertEquals(new Position(1, 2), match.get().endOfMatch());
        assertEquals(1, match.get().groupCount());
        assertEquals(""w"", match.get().group(1));

        match = cursor.moveForwardToEndOfMatch(pattern);
        assertCursor(2, 2, ""one\ntwo\nthree\n"");
        assertTrue(match.isPresent());
        assertEquals(""th"", match.get().match());
        assertEquals(1, match.get().groupCount());
        assertEquals(""h"", match.get().group(1));

        match = cursor.moveForwardToEndOfMatch(pattern);
        assertCursor(2, 2, ""one\ntwo\nthree\n"");
        assertFalse(match.isPresent());

        assertTrue(cursor.skipBackward(""h""));
        assertCursor(2, 1, ""one\ntwo\nthree\n"");
        assertFalse(cursor.skipBackward(""x""));

        assertTrue(cursor.skipForward(""hre""));
        assertCursor(2, 4, ""one\ntwo\nthree\n"");
        assertFalse(cursor.skipForward(""x""));

        try {
            cursor.moveTo(mark);
            fail();
        } catch (IllegalArgumentException e) {
            // expected
        }

        mark = cursor.createMark();
        cursor.moveToStartOfBuffer();
        assertEquals(new Position(0, 0), cursor.getPosition());
        cursor.moveTo(mark);
        assertEquals(new Position(2, 4), cursor.getPosition());

        cursor.moveTo(1, 2);
        assertCursor(1, 2, ""one\ntwo\nthree\n"");

        cursor.deleteSuffix();
        assertCursor(1, 2, ""one\ntw\nthree\n"");

        cursor.deletePrefix();
        assertCursor(1, 0, ""one\n\nthree\n"");

        cursor.deleteLine();
        assertCursor(1, 0, ""one\nthree\n"");

        cursor.deleteLine();
        assertCursor(1, 0, ""one\n"");

        cursor.deleteLine();
        assertCursor(1, 0, ""one\n"");

        cursor.moveToStartOfBuffer().moveForward().writeNewlineAfter();
        assertCursor(0, 1, ""o\nne\n"");

        cursor.deleteAll().writeLines(""one"", ""two"", ""three"", ""four"");
        cursor.moveToStartOfBuffer().moveToStartOfNextLine();
        assertCursor(1, 0, ""one\ntwo\nthree\nfour\n"");
        Pattern pattern2 = Pattern.compile(""(o)(.)?"");
        int count = cursor.replaceMatches(pattern2, m -> {
            String prefix = m.group(2) == null ? """" : m.group(2);
            return prefix + m.match() + m.group(1);
        });
        assertCursor(3, 5, ""one\ntwoo\nthree\nfuouor\n"");
        assertEquals(2, count);

        cursor.moveToStartOfBuffer().moveToEndOfLine();
        Pattern pattern3 = Pattern.compile(""o"");
        count = cursor.replaceMatches(pattern3, m -> ""a"");
        assertEquals(4, count);
        assertCursor(3, 5, ""one\ntwaa\nthree\nfuauar\n"");
    }
",non-flaky,5
77568,dropwizard_dropwizard,NonEmptyStringParamProviderTest.getMessage,"    @Test
        public String getMessage(@QueryParam(""message"") NonEmptyStringParam message) {
            return message.get().orElse(""Hello"");
        }
",non-flaky,5
98298,spotify_docker-client,CompressedDirectoryTest.testFileWithEmptyDirectory,"  @Test
  public void testFileWithEmptyDirectory() throws Exception {
    Path tempDir = Files.createTempDirectory(""dockerDirectoryEmptySubdirectory"");
    tempDir.toFile().deleteOnExit();
    assertThat(new File(tempDir.toFile(), ""emptySubDir"").mkdir(), is(true));

    try (CompressedDirectory dir = CompressedDirectory.create(tempDir);
         BufferedInputStream fileIn = new BufferedInputStream(Files.newInputStream(dir.file()));
         GzipCompressorInputStream gzipIn = new GzipCompressorInputStream(fileIn);
         TarArchiveInputStream tarIn = new TarArchiveInputStream(gzipIn)) {

      final List<String> names = new ArrayList<>();
      TarArchiveEntry entry;
      while ((entry = tarIn.getNextTarEntry()) != null) {
        final String name = entry.getName();
        names.add(name);
      }
      assertThat(names, contains(""emptySubDir/""));
    }
  }
",non-flaky,5
135008,undertow-io_undertow,DynamicEndpointTest.testDynamicProgramaticEndpoint,"    @Test
    public void testDynamicProgramaticEndpoint() throws Exception {
        final byte[] payload = ""hello"".getBytes();
        final FutureResult latch = new FutureResult();

        WebSocketTestClient client = new WebSocketTestClient(WebSocketVersion.V13, new URI(""ws://"" + DefaultServer.getHostAddress(""default"") + "":"" + DefaultServer.getHostPort(""default"") + ""/ws/dynamicEchoEndpoint""));
        client.connect();
        client.send(new TextWebSocketFrame(Unpooled.wrappedBuffer(payload)), new FrameChecker(TextWebSocketFrame.class, ""/dynamicEchoEndpoint hello"".getBytes(), latch));
        latch.getIoFuture().get();
        client.destroy();
    }
",non-flaky,5
98267,spotify_docker-client,ContainerStateTest.testLoadFromRandomFixtureMissingProperty,"  @Test
  public void testLoadFromRandomFixtureMissingProperty() throws Exception {
    objectMapper.readValue(fixture(""fixtures/container-state-missing-property.json""),
                           ContainerState.class);
  }
",non-flaky,5
77685,pholser_junit-quickcheck,PrimitivePropertyParameterTypesTest.shouldHold,"    @Test public void shrinkingPrimitiveByteStraddlingZero() {
        @Property public void shouldHold(byte b) {
            values.add(b);

            fail();
        }
",non-flaky,5
118690,netty_netty,SmtpCommandTest.isContentExpected,"    @Test
    public void isContentExpected() {
        assertTrue(SmtpCommand.valueOf(""DATA"").isContentExpected());
        assertTrue(SmtpCommand.valueOf(""data"").isContentExpected());

        assertFalse(SmtpCommand.HELO.isContentExpected());
        assertFalse(SmtpCommand.HELP.isContentExpected());
        assertFalse(SmtpCommand.valueOf(""DATA2"").isContentExpected());
    }
",non-flaky,5
98022,vert-x3_vertx-mongo-client,UpdateOptionsTest.testOptionsJson,"  @Test
  public void testOptionsJson() {
    JsonObject json = new JsonObject();

    WriteOption writeOption = JOURNALED;
    json.put(""writeOption"", writeOption.name());

    boolean multi = TestUtils.randomBoolean();
    json.put(""multi"", multi);

    boolean upsert = TestUtils.randomBoolean();
    json.put(""upsert"", upsert);

    JsonArray arrayFilters = new JsonArray().add(new JsonObject().put(TestUtils.randomAlphaString(5), TestUtils.randomAlphaString(5)));
    json.put(""arrayFilters"", arrayFilters);

    UpdateOptions options = new UpdateOptions(json);
    assertEquals(writeOption, options.getWriteOption());
    assertEquals(multi, options.isMulti());
    assertEquals(upsert, options.isUpsert());
    assertEquals(arrayFilters, options.getArrayFilters());
  }
",non-flaky,5
33720,alibaba_fastjson,JSONPathTest.isDigitFirst3,"  @Test
  public void isDigitFirst3() throws Throwable {
    // Arrange
    char ch = '\u0000';
    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.JSONPath$JSONPathParser"");
    Method m = c.getDeclaredMethod(""isDigitFirst"", Reflector.forName(""char""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, ch);
    // Assert result
    Assert.assertEquals(false, retval);
  }
",non-flaky,5
76731,quarkusio_quarkus,JarRunnerIT.testThatMutableFastJarWorksProvidersDirOutsideOutputDir,"    @Test
    public void testThatMutableFastJarWorksProvidersDirOutsideOutputDir() throws Exception {
        assertThatMutableFastJarWorks(""outsidedir"", "".."" + File.separator + ""providers"");
    }
",non-flaky,5
26854,wildfly_wildfly,ObjectFactoryTestCase.testBindAndRetrieveObjectFactoryFromInitialContext,"    @Test
    public void testBindAndRetrieveObjectFactoryFromInitialContext() throws Exception {
        final Reference reference = new Reference(""java.util.String"", TestObjectFactory.class.getName(), null);
        namingStore.bind(new CompositeName(""test""), reference);

        final InitialContext initialContext = new InitialContext();
        final Object result = initialContext.lookup(""test"");
        assertTrue(result instanceof String);
        assertEquals(""Test ParsedResult"", result);
    }
",non-flaky,5
77499,dropwizard_dropwizard,PolymorphicPrincipalEntityTest.tearDown,"    @AfterEach
    public void tearDown() throws Exception {
        super.tearDown();
    }
",non-flaky,5
235,CorfuDB_CorfuDB,StreamingIT.testStreamingPrevValue,"@Test
public void testStreamingPrevValue() throws Exception {
    Process corfuServer = runSinglePersistentServer(corfuSingleNodeHost, corfuStringNodePort);
    runtime = createRuntime(singleNodeEndpoint);
    CorfuStore store = new CorfuStore(runtime);
    String ns = ""test_namespace"";
    String tn = ""tableA"";
    Table<Uuid, SampleTableAMsg, Uuid> table = store.openTable(ns, tn, Uuid.class, SampleTableAMsg.class, Uuid.class, TableOptions.builder().build());
    PrevValueStreamer listenerCommon = new PrevValueStreamer<Uuid, SampleTableAMsg, Uuid>(store, ns, tn);
    store.subscribeListener(listenerCommon, ns, ""sample_streamer_1"", Collections.singletonList(tn));
    final int numRecords = PARAMETERS.NUM_ITERATIONS_LOW;
    for (int i = 0; i < numRecords; i++) {
        try (final TxnContext tx = store.txn(namespace)) {
            Uuid key = Uuid.newBuilder().setLsb(0).setMsb(0).build();
            SampleTableAMsg val = SampleTableAMsg.newBuilder().setPayload(""val"" + i).build();
            tx.putRecord(table, key, val, key);
            tx.commit();
        }
    }
    TimeUnit.MILLISECONDS.sleep(sleepTime);
    assertThat(listenerCommon.getRecordCount()).isEqualTo(numRecords);
    assertThat(shutdownCorfuServer(corfuServer)).isTrue();
}",async wait,0
137148,spring-projects_spring-framework,ToStringCreatorTests.toString,"	@Test
			public String toString() {
				return new ToStringCreator(this).append(""familyFavoriteSport"", map).toString();
			}
",non-flaky,5
78319,apache_beam,ReduceFnRunnerTest.testSessionEowAndGcTogether,"  @Test
  public void testSessionEowAndGcTogether() throws Exception {
    ReduceFnTester<Integer, Iterable<Integer>, IntervalWindow> tester =
        ReduceFnTester.nonCombining(
            Sessions.withGapDuration(Duration.millis(10)),
            DefaultTriggerStateMachine.of(),
            AccumulationMode.ACCUMULATING_FIRED_PANES,
            Duration.millis(50),
            ClosingBehavior.FIRE_ALWAYS);

    tester.setAutoAdvanceOutputWatermark(true);

    tester.advanceInputWatermark(new Instant(0));
    injectElement(tester, 1);
    tester.advanceInputWatermark(new Instant(100));

    assertThat(
        tester.extractOutput(),
        contains(
            isSingleWindowedValue(
                contains(1), 1, 1, 11, PaneInfo.createPane(true, true, Timing.ON_TIME))));
  }
",non-flaky,5
76729,quarkusio_quarkus,JarRunnerIT.testThatFastJarCustomOutputDirFormatWorks,"    @Test
    public void testThatFastJarCustomOutputDirFormatWorks() throws Exception {
        assertThatFastJarFormatWorks(""custom"");
    }
",non-flaky,5
110199,Wikidata_wikidata-toolkit,RdfConverterTest.testWriteInterPropertyLinks,"	@Test
	public void testWriteInterPropertyLinks() throws RDFHandlerException,
			RDFParseException, IOException {
		PropertyDocument document = this.dataObjectFactory.getPropertyDocument(
				this.dataObjectFactory.getPropertyIdValue(""P17"",
						""http://www.wikidata.org/""), Collections
						.<MonolingualTextValue> emptyList(), Collections
						.<MonolingualTextValue> emptyList(), Collections
						.<MonolingualTextValue> emptyList(), Collections
						.<StatementGroup> emptyList(), this.dataObjectFactory
						.getDatatypeIdValue(DatatypeIdValue.DT_ITEM), 0);
		this.rdfConverter.writeInterPropertyLinks(document);
		this.rdfWriter.finish();
		Model model = RdfTestHelpers.parseRdf(out.toString());

		assertEquals(RdfTestHelpers.parseRdf(RdfTestHelpers
				.getResourceFromFile(""InterPropertyLinks.rdf"")), model);
	}
",non-flaky,5
76753,quarkusio_quarkus,CreateProjectMojoIT.testProjectGenerationWithInvalidPackage,"    @Test
    public void testProjectGenerationWithInvalidPackage() throws Exception {
        testDir = initEmptyProject(""projects/project-generation-invalid-package"");
        assertThat(testDir).isDirectory();
        invoker = initInvoker(testDir);

        Properties properties = new Properties();
        properties.put(""projectGroupId"", ""org.acme"");
        properties.put(""projectArtifactId"", ""acme"");
        properties.put(""className"", ""org.acme.invalid-package-name.MyResource"");

        InvocationResult result = setup(properties);

        assertThat(result.getExitCode()).isNotZero();
        assertThat(new File(testDir, ""src/main/java/org/acme"")).doesNotExist();
    }
",non-flaky,5
106582,Alluxio_alluxio,HdfsConfValidationTaskTest.missingCoreSiteXML,"  @Test
  public void missingCoreSiteXML() {
    // Only prepare hdfs-site.xml
    String hdfsSite = Paths.get(sTestDir.toPath().toString(), ""hdfs-site.xml"").toString();
    ValidationTestUtils.writeXML(hdfsSite, ImmutableMap.of(""key1"", ""value1""));

    sConf.set(PropertyKey.UNDERFS_HDFS_CONFIGURATION, hdfsSite);
    HdfsConfValidationTask task = new HdfsConfValidationTask(""hdfs://namenode:9000/alluxio"", sConf);
    ValidationTaskResult result = task.loadHdfsConfig();
    assertEquals(result.getState(), ValidationUtils.State.SKIPPED);
    assertThat(result.getResult(), containsString(""core-site.xml is not configured""));
    assertThat(result.getAdvice(), containsString(""core-site.xml""));
  }
",non-flaky,5
91453,strapdata_elassandra,RecoveryDuringReplicationTests.indexTranslogOperations,"    @TestLogging(
    public void testCheckpointsAndMarkingInSync() throws Exception {
        final IndexMetaData metaData = buildIndexMetaData(0);
        final BlockingEngineFactory replicaEngineFactory = new BlockingEngineFactory();
        try (
                ReplicationGroup shards = new ReplicationGroup(metaData) {
                    @Override
                    protected EngineFactory getEngineFactory(final ShardRouting routing) {
                        if (routing.primary()) {
                            return new InternalEngineFactory();
                        } else {
                            return replicaEngineFactory;
                        }
                    }
                };
                AutoCloseable ignored = replicaEngineFactory // make sure we release indexers before closing
        ) {
            shards.startPrimary();
            final int docs = shards.indexDocs(randomIntBetween(1, 10));
            logger.info(""indexed [{}] docs"", docs);
            final CountDownLatch pendingDocDone = new CountDownLatch(1);
            final CountDownLatch pendingDocActiveWithExtraDocIndexed = new CountDownLatch(1);
            final CountDownLatch phaseTwoStartLatch = new CountDownLatch(1);
            final IndexShard replica = shards.addReplica();
            final Future<Void> recoveryFuture = shards.asyncRecoverReplica(
                    replica,
                    (indexShard, node) -> new RecoveryTarget(indexShard, node, recoveryListener, l -> {}) {
                        @Override
                        public long indexTranslogOperations(final List<Translog.Operation> operations, final int totalTranslogOps,
                                                            final long maxAutoIdTimestamp, long maxSeqNoOfUpdates)
",non-flaky,5
99770,apache_cassandra,RateBasedBackPressureTest.testBackPressureWhenBelowHighRatio,"    @Test
    public void testBackPressureWhenBelowHighRatio() throws Exception
    {
        long windowSize = 6000;
        TestTimeSource timeSource = new TestTimeSource();
        RateBasedBackPressure strategy = new RateBasedBackPressure(ImmutableMap.of(HIGH_RATIO, ""0.9"", FACTOR, ""10"", FLOW, ""FAST""), timeSource, windowSize);
        RateBasedBackPressureState state = strategy.newState(InetAddressAndPort.getLoopbackAddress());

        // Update incoming and outgoing rate so that the ratio is 0.5:
        state.incomingRate.update(50);
        state.outgoingRate.update(100);

        // Move time ahead:
        timeSource.sleep(windowSize, TimeUnit.MILLISECONDS);

        // Verify the rate is decreased by factor:
        strategy.apply(Sets.newHashSet(state), 1, TimeUnit.SECONDS);
        assertEquals(7.4, state.rateLimiter.getRate(), 0.1);
    }
",non-flaky,5
104646,apache_pinot,OfflineClusterIntegrationTest.testFilterUDF,"  @Test
  public void testFilterUDF()
      throws Exception {
    int daysSinceEpoch = 16138;
    long secondsSinceEpoch = 16138 * 24 * 60 * 60;

    String pqlQuery;
    pqlQuery = ""SELECT count(*) FROM mytable WHERE DaysSinceEpoch = "" + daysSinceEpoch;
    long expectedResult = postQuery(pqlQuery).get(""aggregationResults"").get(0).get(""value"").asLong();

    pqlQuery = ""SELECT count(*) FROM mytable WHERE timeConvert(DaysSinceEpoch,'DAYS','SECONDS') = "" + secondsSinceEpoch;
    assertEquals(postQuery(pqlQuery).get(""aggregationResults"").get(0).get(""value"").asLong(), expectedResult);

    pqlQuery = ""SELECT count(*) FROM mytable WHERE DaysSinceEpoch = "" + daysSinceEpoch
        + "" OR timeConvert(DaysSinceEpoch,'DAYS','SECONDS') = "" + secondsSinceEpoch;
    assertEquals(postQuery(pqlQuery).get(""aggregationResults"").get(0).get(""value"").asLong(), expectedResult);

    pqlQuery = ""SELECT count(*) FROM mytable WHERE DaysSinceEpoch = "" + daysSinceEpoch
        + "" AND timeConvert(DaysSinceEpoch,'DAYS','SECONDS') = "" + secondsSinceEpoch;
    assertEquals(postQuery(pqlQuery).get(""aggregationResults"").get(0).get(""value"").asLong(), expectedResult);

    pqlQuery =
        ""SELECT count(*) FROM mytable WHERE DIV(timeConvert(DaysSinceEpoch,'DAYS','SECONDS'),1) = "" + secondsSinceEpoch;
    assertEquals(postQuery(pqlQuery).get(""aggregationResults"").get(0).get(""value"").asLong(), expectedResult);

    pqlQuery = String
        .format(""SELECT count(*) FROM mytable WHERE timeConvert(DaysSinceEpoch,'DAYS','SECONDS') IN (%d, %d)"",
            secondsSinceEpoch - 100, secondsSinceEpoch);
    assertEquals(postQuery(pqlQuery).get(""aggregationResults"").get(0).get(""value"").asLong(), expectedResult);

    pqlQuery = String
        .format(""SELECT count(*) FROM mytable WHERE timeConvert(DaysSinceEpoch,'DAYS','SECONDS') BETWEEN %d AND %d"",
            secondsSinceEpoch - 100, secondsSinceEpoch);
    assertEquals(postQuery(pqlQuery).get(""aggregationResults"").get(0).get(""value"").asLong(), expectedResult);
  }
",non-flaky,5
106657,Alluxio_alluxio,AlluxioFuseFileSystemTest.renameOldNotExist,"  @Test
  public void renameOldNotExist() throws Exception {
    AlluxioURI oldPath = BASE_EXPECTED_URI.join(""/old"");
    AlluxioURI newPath = BASE_EXPECTED_URI.join(""/new"");
    doThrow(new FileDoesNotExistException(""File /old does not exist""))
        .when(mFileSystem).rename(oldPath, newPath);
    assertEquals(-ErrorCodes.ENOENT(), mFuseFs.rename(""/old"", ""/new""));
  }
",non-flaky,5
134986,undertow-io_undertow,JsrWebsocketExtensionTestCase.testLongTextMessage,"    @Test
    public void testLongTextMessage() throws Exception {

        final String SEC_WEBSOCKET_EXTENSIONS = ""permessage-deflate; client_no_context_takeover; client_max_window_bits"";
        List<WebSocketExtension> extensionsList = WebSocketExtension.parse(SEC_WEBSOCKET_EXTENSIONS);

        final WebSocketClientNegotiation negotiation = new WebSocketClientNegotiation(null, extensionsList);

        Set<ExtensionHandshake> extensionHandshakes = new HashSet<>();
        extensionHandshakes.add(new PerMessageDeflateHandshake(true));

        final WebSocketChannel clientChannel = WebSocketClient.connect(DefaultServer.getWorker(), null, DefaultServer.getBufferPool(), OptionMap.EMPTY, new URI(DefaultServer.getDefaultServerURL()), WebSocketVersion.V13, negotiation, extensionHandshakes).get();

        final LinkedBlockingDeque<String> resultQueue  = new LinkedBlockingDeque<>();

        clientChannel.getReceiveSetter().set(new AbstractReceiveListener() {
            @Override
            protected void onFullTextMessage(WebSocketChannel channel, BufferedTextMessage message) throws IOException {
                String data = message.getData();
                // WebSocketLogger.ROOT_LOGGER.info(""onFullTextMessage() - Client - Received: "" + data.getBytes().length + "" bytes."");
                resultQueue.addLast(data);
            }

            @Override
            protected void onFullCloseMessage(WebSocketChannel channel, BufferedBinaryMessage message) throws IOException {
                message.getData().close();
                WebSocketLogger.ROOT_LOGGER.info(""onFullCloseMessage"");
            }

            @Override
            protected void onError(WebSocketChannel channel, Throwable error) {
                WebSocketLogger.ROOT_LOGGER.info(""onError"");
                super.onError(channel, error);
                error.printStackTrace();
                resultQueue.add(""FAILED "" + error);
            }

        });
        clientChannel.resumeReceives();

        int LONG_MSG = 125 * 1024;
        StringBuilder longMsg = new StringBuilder(LONG_MSG);

        for (int i = 0; i < LONG_MSG; i++) {
            longMsg.append(Integer.toString(i).charAt(0));
        }

        String message = longMsg.toString();
        for(int j = 0; j < MSG_COUNT; ++ j) {

            WebSockets.sendTextBlocking(message, clientChannel);
            String res = resultQueue.poll(10, TimeUnit.SECONDS);
            Assert.assertEquals(message, res);
        }

        clientChannel.sendClose();

    }
",non-flaky,5
97719,vojtechhabarta_typescript-generator,MapExtensionTest.testOrder1,"    @Test
    public void testOrder1() {
        final Settings settings = TestUtils.settings();
        settings.sortDeclarations = true;
        String expectedA = """" +
                ""\n"" +
                ""interface A {\n"" +
                ""    mapExt: { [index: string]: any };\n"" +
                ""}\n"";
        String expectedB = """" +
                ""\n"" +
                ""interface B {\n"" +
                ""    mapExt: { [index: string]: number };\n"" +
                ""}\n"";
        final String actualA = new TypeScriptGenerator(settings).generateTypeScript(Input.from(A.class));
        final String actualB = new TypeScriptGenerator(settings).generateTypeScript(Input.from(B.class));

        assertEquals(expectedA, actualA);
        assertEquals(expectedB, actualB);
    }
",non-flaky,5
118766,netty_netty,ByteBufUtilTest.testDecodeUsAscii,"    @Test
    public void testDecodeUsAscii() {
        testDecodeString(""This is a test"", CharsetUtil.US_ASCII);
    }
",non-flaky,5
277,androidx_androidx,testGettersAfterConnected,"@Test
public void testGettersAfterConnected() throws InterruptedException {
    prepareLooper();
    final int state = MediaPlayerBase.PLAYER_STATE_PLAYING;
    final long position = 150000;
    final long bufferedPosition = 900000;
    final float speed = 0.5f;
    mPlayer.mLastPlayerState = state;
    mPlayer.mCurrentPosition = position;
    mPlayer.mBufferedPosition = bufferedPosition;
    mPlayer.mPlaybackSpeed = speed;
    long time = System.currentTimeMillis();
    MediaController2 controller = createController(mSession.getToken());
    assertEquals(state, controller.getPlayerState());
    assertEquals(bufferedPosition, controller.getBufferedPosition());
    assertEquals(speed, controller.getPlaybackSpeed());
    long elapsedTime = System.currentTimeMillis() - time;
    final long tolerance = 10;
    assertEquals(position + speed * elapsedTime, controller.getCurrentPosition(), tolerance);
}",time,2
84649,apache_zookeeper,ZooKeeperTest.processResult,"    @Test
    public void testDeleteRecursiveAsync() throws IOException, InterruptedException, KeeperException {
        final ZooKeeper zk = createClient();
        // making sure setdata works on /
        zk.setData(""/"", ""some"".getBytes(), -1);
        zk.create(""/a"", ""some"".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);

        zk.create(""/a/b"", ""some"".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);

        zk.create(""/a/b/v"", ""some"".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);

        zk.create(""/a/b/v/1"", ""some"".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);

        zk.create(""/a/c"", ""some"".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);

        zk.create(""/a/c/v"", ""some"".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);

        for (int i = 0; i < 50; ++i) {
            zk.create(""/a/c/"" + i, ""some"".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);
        }
        List<String> children = zk.getChildren(""/a"", false);

        assertEquals(children.size(), 2, ""2 children - b & c should be present "");
        assertTrue(children.contains(""b""));
        assertTrue(children.contains(""c""));

        VoidCallback cb = new VoidCallback() {

            @Override
            public void processResult(int rc, String path, Object ctx) {
                synchronized (ctx) {
                    ((AtomicInteger) ctx).set(4);
                    ctx.notify();
                }
            }
",non-flaky,5
38237,palantir_atlasdb,AbstractAtlasDbKeyValueServiceTest.testGetRowsWhenMultipleVersionsAndColumnsSelected,"    @Test
    public void testGetRowsWhenMultipleVersionsAndColumnsSelected() {
        putTestDataForMultipleTimestamps();
        Map<Cell, Value> result = keyValueService.getRows(
                TEST_TABLE,
                ImmutableSet.of(row0),
                ColumnSelection.create(ImmutableSet.of(column0)),
                TEST_TIMESTAMP + 1);
        assertEquals(1, result.size());
        assertTrue(result.containsKey(Cell.create(row0, column0)));
        assertTrue(result.containsValue(Value.create(value0_t0, TEST_TIMESTAMP)));

        result = keyValueService.getRows(
                TEST_TABLE,
                ImmutableSet.of(row0),
                ColumnSelection.create(ImmutableSet.of(column0)),
                TEST_TIMESTAMP + 2);
        assertEquals(1, result.size());
        assertTrue(result.containsKey(Cell.create(row0, column0)));
        assertTrue(result.containsValue(Value.create(value0_t1, TEST_TIMESTAMP + 1)));
    }
",non-flaky,5
179472,abel533_Mapper,DefaultEnumTypeHandlerTest.testSelect,"    @Test
    public void testSelect(){
        SqlSession sqlSession = getSqlSession();
        try {
            UserMapper userMapper = sqlSession.getMapper(UserMapper.class);
            List<User> users = userMapper.selectAll();
            Assert.assertNotNull(users);
            Assert.assertEquals(2, users.size());

            Assert.assertEquals(""abel533"", users.get(0).getName());
            Assert.assertEquals(LockDictEnum.unlocked, users.get(0).getLock());
            Assert.assertEquals(StateDictEnum.enabled, users.get(0).getState());

            Assert.assertEquals(""isea533"", users.get(1).getName());
            Assert.assertEquals(LockDictEnum.locked, users.get(1).getLock());
            Assert.assertEquals(StateDictEnum.disabled, users.get(1).getState());

            User user = userMapper.selectByPrimaryKey(1);
            Assert.assertEquals(""abel533"", user.getName());
            Assert.assertEquals(LockDictEnum.unlocked, users.get(0).getLock());
            Assert.assertEquals(StateDictEnum.enabled, user.getState());
        } finally {
            sqlSession.close();
        }
    }
",non-flaky,5
78278,apache_beam,StateTagTest.testSetEquality,"  @Test
  public void testSetEquality() {
    StateTag<?> fooVarInt1 = StateTags.set(""foo"", VarIntCoder.of());
    StateTag<?> fooVarInt2 = StateTags.set(""foo"", VarIntCoder.of());
    StateTag<?> fooBigEndian = StateTags.set(""foo"", BigEndianIntegerCoder.of());
    StateTag<?> barVarInt = StateTags.set(""bar"", VarIntCoder.of());

    assertEquals(fooVarInt1, fooVarInt2);
    assertNotEquals(fooVarInt1, fooBigEndian);
    assertNotEquals(fooVarInt1, barVarInt);
  }
",non-flaky,5
95655,togglz_togglz,DefaultFeatureStateTest.testFeatureManagerImmutable,"    @Test(expected = UnsupportedOperationException.class)
    public void testFeatureManagerImmutable() {
        FeatureContext.getFeatureManager().setFeatureState(new FeatureState(MyFeatures.FEATURE_ONE, false));
    }
",non-flaky,5
133954,CorfuDB_CorfuDB,BaseHandlerTest.testHandleUnknownError,"    @Test
    public void testHandleUnknownError() {
        ResponseMsg response = getResponseMsg(
                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.IGNORE),
                getUnknownErrorMsg(new Exception(""Unknown Exception Test""))
        );

        ArgumentCaptor<Exception> exceptionCaptor = ArgumentCaptor.forClass(Exception.class);
        baseHandler.handleMessage(response, mockChannelHandlerContext);

        // Verify that the correct request was completed exceptionally (once)
        // with the expected exception
        verify(mockClientRouter, never()).completeRequest(anyLong(), any());
        verify(mockClientRouter).completeExceptionally(
                eq(response.getHeader().getRequestId()), exceptionCaptor.capture());

        assertEquals(""Unknown Exception Test"", exceptionCaptor.getValue().getMessage());
    }
",non-flaky,5
156153,soot-oss_soot,MethodHandleTest.testInvoke,"  @Test
  public void testInvoke() throws IOException, ClassNotFoundException {

    // First generate a classfile with a MethodHnadle
    ClassWriter cv = new ClassWriter(ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS);
    cv.visit(Opcodes.V1_7, Opcodes.ACC_PUBLIC, ""UniformDistribution"", null, Type.getInternalName(Object.class), null);

    MethodVisitor mv
        = cv.visitMethod(Opcodes.ACC_STATIC | Opcodes.ACC_PUBLIC, ""sample"", Type.getMethodDescriptor(Type.DOUBLE_TYPE,
            Type.getType(java.lang.invoke.MethodHandle.class) /* rng method */, Type.DOUBLE_TYPE /* max */), null, null);

    mv.visitCode();

    mv.visitVarInsn(Opcodes.ALOAD, 0); // load MethodHandle
    mv.visitInsn(Opcodes.ACONST_NULL); // null string... (just to test signatures with class names)


    // Call MethodHandle.invoke() with polymorphic signature: ()D
    mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, Type.getInternalName(java.lang.invoke.MethodHandle.class), ""invoke"",
        Type.getMethodDescriptor(Type.DOUBLE_TYPE, Type.getType(String.class)), false);

    mv.visitVarInsn(Opcodes.DLOAD, 1);
    mv.visitInsn(Opcodes.DMUL);
    mv.visitInsn(Opcodes.DRETURN);
    mv.visitEnd();
    cv.visitEnd();

    File tempDir = Files.createTempDir();
    File classFile = new File(tempDir, ""UniformDistribution.class"");
    Files.write(cv.toByteArray(), classFile);

    G.reset();

    String[] commandLine = { ""-pp"", ""-cp"", tempDir.getAbsolutePath(), ""-O"", ""UniformDistribution"" };

    System.out.println(""Command Line: "" + Arrays.toString(commandLine));

    Main.main(commandLine);
    validateClassFile(""UniformDistribution"");

  }
",non-flaky,5
53206,cloudfoundry_uaa,CfAuthenticationTests.testDefaultScopes,"    @Test
    public void testDefaultScopes() {
        params.set(
                        ""credentials"",
                        String.format(""{\""username\"":\""%s\"",\""password\"":\""%s\""}"", testAccounts.getUserName(),
                                        testAccounts.getPassword()));
        ResponseEntity<Void> response = serverRunning.postForResponse(serverRunning.getAuthorizationUri(), headers,
                        params);
        assertEquals(HttpStatus.FOUND, response.getStatusCode());
        String location = response.getHeaders().getLocation().toString();
        assertTrue(""Not authenticated (no access token): "" + location, location.contains(""access_token""));
    }
",non-flaky,5
84644,apache_zookeeper,EnforceAuthenticationTest.testEnforceAuthenticationNewBehaviourWithNetty,"    @Test
    public void testEnforceAuthenticationNewBehaviourWithNetty() throws Exception {
        Map<String, String> prop = new HashMap<>();
        prop.put(removeZooKeeper(AuthenticationHelper.ENFORCE_AUTH_ENABLED), ""true"");
        prop.put(removeZooKeeper(AuthenticationHelper.ENFORCE_AUTH_SCHEMES), ""digest"");
        prop.put(""serverCnxnFactory"", ""org.apache.zookeeper.server.NettyServerCnxnFactory"");
        startServer(prop);
        testEnforceAuthNewBehaviour(true);
    }
",non-flaky,5
179417,abel533_Mapper,VersionTest.testVersionError,"    @Test(expected = VersionException.class)
    public void testVersionError(){
        EntityHelper.initEntityNameMap(UserVersionError.class, config);
        EntityTable entityTable = EntityHelper.getEntityTable(UserVersionError.class);
        Assert.assertNotNull(entityTable);
        SqlHelper.wherePKColumns(UserVersionError.class, true);
    }
",non-flaky,5
94766,ktuukkan_marine-api,AISMessage24ParserTest.getPartNumber,"    @Test
    public void getPartNumber() throws Exception {
        assertEquals(0, partA.getPartNumber());
        assertEquals(1, partB.getPartNumber());
    }
",non-flaky,5
176797,ctco_cukes,ContextCapturerTest.shouldCaptureValuesFromSimplePattern,"    @Test
    public void shouldCaptureValuesFromSimplePattern() throws Exception {
        capturer.captureValuesFromPattern(""(.*) world"", Lists.newArrayList(""hello""), ""Hi world"");
        verify(world).put(""hello"", ""Hi"");
    }
",non-flaky,5
33686,alibaba_fastjson,JSONScannerTest.checkDate9,"  @Test
  public void checkDate9() throws Throwable {

    // Arrange
    char y0 = '2';
    char y1 = '1';
    char y2 = '1';
    char y3 = '1';
    char M0 = '1';
    char M1 = '0';
    int d0 = 49;
    int d1 = 49;

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkDate"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""int""), Reflector.forName(""int""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, y0, y1, y2, y3, M0, M1, d0, d1);

    // Assert result
    Assert.assertEquals(true, retval);

  }
",non-flaky,5
159617,liquibase_liquibase,MySQLIntegrationTest.snapshot,"    @Test
    public void snapshot() throws Exception {
        if (getDatabase() == null) {
            return;
        }


        runCompleteChangeLog();
        DatabaseSnapshot snapshot = SnapshotGeneratorFactory.getInstance().createSnapshot(getDatabase().getDefaultSchema(), getDatabase(), new SnapshotControl(getDatabase()));
        System.out.println(snapshot);
    }
",non-flaky,5
114084,aws_aws-sdk-java-v2,KeyTest.getPrimaryKeyMap,"    @Test
    public void getPrimaryKeyMap() {
        Map<String, AttributeValue> expectedResult = new HashMap<>();
        expectedResult.put(""id"", AttributeValue.builder().s(""id123"").build());
        expectedResult.put(""sort"", AttributeValue.builder().s(""id456"").build());
        assertThat(key.primaryKeyMap(FakeItemWithIndices.getTableSchema()), is(expectedResult));
    }
",non-flaky,5
94630,square_okhttp,InterceptorTest.intercept,"  @Test public void applicationInterceptorsCanMakeMultipleRequestsToServer() throws Exception {
          @Override public Response intercept(Chain chain) throws IOException {
            Response response1 = chain.proceed(chain.request());
            response1.body().close();
            return chain.proceed(chain.request());
          }
",non-flaky,5
99777,apache_cassandra,MessagingServiceTest.testDCLatency,"    @Test
    public void testDCLatency() throws Exception
    {
        int latency = 100;
        ConcurrentHashMap<String, MessagingMetrics.DCLatencyRecorder> dcLatency = MessagingService.instance().metrics.dcLatency;
        dcLatency.clear();

        long now = System.currentTimeMillis();
        long sentAt = now - latency;
        assertNull(dcLatency.get(""datacenter1""));
        addDCLatency(sentAt, now);
        assertNotNull(dcLatency.get(""datacenter1""));
        assertEquals(1, dcLatency.get(""datacenter1"").dcLatency.getCount());
        long expectedBucket = bucketOffsets[Math.abs(Arrays.binarySearch(bucketOffsets, MILLISECONDS.toNanos(latency))) - 1];
        assertEquals(expectedBucket, dcLatency.get(""datacenter1"").dcLatency.getSnapshot().getMax());
    }
",non-flaky,5
94794,ktuukkan_marine-api,AISMessage21ParserTest.hasLatitude,"    @Test
    public void hasLatitude() {
        assertEquals(true, msg.hasLatitude());
    }
",non-flaky,5
156106,soot-oss_soot,DefaultInterfaceTest.interfaceSameSignatureTest,"  @Test
  public void interfaceSameSignatureTest() {
    String testClassSig = ""soot.defaultInterfaceMethods.InterfaceSameSignature"";
    String interfaceReadSig = ""soot.defaultInterfaceMethods.Read"";
    String interfaceWriteSig = ""soot.defaultInterfaceMethods.Write"";    

    final SootMethod target =
        prepareTarget(
            methodSigFromComponents(testClassSig, voidType, mainClass),
            testClassSig,
            interfaceReadSig,
            interfaceWriteSig);

    SootClass testClass = Scene.v().getSootClass(testClassSig);
    SootClass interfaceRead = Scene.v().getSootClass(interfaceReadSig);
    SootClass interfaceWrite = Scene.v().getSootClass(interfaceWriteSig);

    SootMethod mainPrintMethod =
        Scene.v().getMethod(""<soot.defaultInterfaceMethods.InterfaceSameSignature: void print()>"");
    SootMethod readInterfacePrint =
        Scene.v().getMethod(""<soot.defaultInterfaceMethods.Read: void print()>"");
    SootMethod writeInterfacePrint =
        Scene.v().getMethod(""<soot.defaultInterfaceMethods.Write: void print()>"");
    SootMethod readInterfaceRead =
        Scene.v().getMethod(""<soot.defaultInterfaceMethods.Read: void read()>"");
    SootMethod writeInterfaceWrite =
        Scene.v().getMethod(""<soot.defaultInterfaceMethods.Write: void write()>"");

    Body mainBody = target.retrieveActiveBody();
    Body mainPrintBody = mainPrintMethod.retrieveActiveBody();

    SootMethod refMainMethod = resolveMethodRefInBody(mainBody.getUnits(), ""void print()"");
    SootMethod refWritePrintMethod =
        resolveMethodRefInBody(
            mainPrintBody.getUnits(), ""soot.defaultInterfaceMethods.Write: void print()"");
    SootMethod refReadPrintMethod =
        resolveMethodRefInBody(
            mainPrintBody.getUnits(), ""soot.defaultInterfaceMethods.Read: void print()"");
    SootMethod refDefaultRead = resolveMethodRefInBody(mainBody.getUnits(), ""void read()"");
    SootMethod refDefaultWrite = resolveMethodRefInBody(mainBody.getUnits(), ""void write()"");

    SootMethod resolvedMainMethod =
        VirtualCalls.v()
            .resolveNonSpecial(
                Scene.v().getRefType(testClassSig), mainPrintMethod.makeRef(), false);
    SootMethod resolvedWritePrintMethod =
        VirtualCalls.v()
            .resolveNonSpecial(
                Scene.v().getRefType(testClassSig), writeInterfacePrint.makeRef(), false);
    SootMethod resolvedReadPrintMethod =
        VirtualCalls.v()
            .resolveNonSpecial(
                Scene.v().getRefType(testClassSig), readInterfacePrint.makeRef(), false);
    SootMethod resolvedDefaultReadMethod =
        VirtualCalls.v()
            .resolveNonSpecial(
                Scene.v().getRefType(testClassSig), readInterfaceRead.makeRef(), false);
    SootMethod resolvedDefaultWriteMethod =
        VirtualCalls.v()
            .resolveNonSpecial(
                Scene.v().getRefType(testClassSig), writeInterfaceWrite.makeRef(), false);

    FastHierarchy fh = Scene.v().getFastHierarchy();
    SootMethod concreteImplMainPrint = fh.resolveConcreteDispatch(testClass, mainPrintMethod);
    SootMethod concreteImplWritePrint = fh.resolveConcreteDispatch(testClass, refWritePrintMethod);
    SootMethod concreteImplReadPrint = fh.resolveConcreteDispatch(testClass, refReadPrintMethod);
    SootMethod concreteImplDefaultRead = fh.resolveConcreteDispatch(testClass, refDefaultRead);
    SootMethod concreteImplDefaultWrite = fh.resolveConcreteDispatch(testClass, refDefaultWrite);

    assertEquals(
        Sets.newHashSet(readInterfaceRead),
        fh.resolveAbstractDispatch(interfaceRead, refDefaultRead));
    assertEquals(
        Sets.newHashSet(writeInterfaceWrite),
        fh.resolveAbstractDispatch(interfaceWrite, refDefaultWrite));
    assertEquals(
        Sets.newHashSet(mainPrintMethod),
        fh.resolveAbstractDispatch(interfaceRead, refReadPrintMethod));
    assertEquals(
        Sets.newHashSet(mainPrintMethod),
        fh.resolveAbstractDispatch(interfaceWrite, refWritePrintMethod));

    /* Edges should be present */
    boolean edgeMainPrintToReadPrint = checkInEdges(readInterfacePrint, mainPrintMethod);
    boolean edgeMainPrintToWritePrint = checkInEdges(writeInterfacePrint, mainPrintMethod);
    boolean edgeMainMethodToPrint = checkInEdges(mainPrintMethod, target);
    boolean edgeMainMethodToReadMethod = checkInEdges(readInterfaceRead, target);
    boolean edgeMainMethodToWriteMethod = checkInEdges(writeInterfaceWrite, target);

    /* Edges should not be present */
    boolean edgeMainMethodToReadPrint = checkInEdges(readInterfacePrint, target);
    boolean edgeMainMethodToWritePrint = checkInEdges(writeInterfacePrint, target);

    final ReachableMethods reachableMethods = Scene.v().getReachableMethods();

    /* Arguments for assert function */
    Map<SootMethod, String> targetMethods =
        new HashMap<SootMethod, String>() {
          {
            put(mainPrintMethod, ""print"");
            put(readInterfacePrint, ""print"");
            put(writeInterfacePrint, ""print"");
            put(readInterfaceRead, ""read"");
            put(writeInterfaceWrite, ""write"");
          }
        };

    Map<SootMethod, SootMethod> resolvedMethods =
        new HashMap<SootMethod, SootMethod>() {
          {
            put(mainPrintMethod, resolvedMainMethod);
            put(mainPrintMethod, resolvedWritePrintMethod);
            put(mainPrintMethod, resolvedReadPrintMethod);
            put(readInterfaceRead, resolvedDefaultReadMethod);
            put(writeInterfaceWrite, resolvedDefaultWriteMethod);
          }
        };

    Map<SootMethod, SootMethod> methodRef =
        new HashMap<SootMethod, SootMethod>() {
          {
            put(mainPrintMethod, refMainMethod);
            put(writeInterfacePrint, refWritePrintMethod);
            put(readInterfacePrint, refReadPrintMethod);
            put(readInterfaceRead, refDefaultRead);
            put(writeInterfaceWrite, refDefaultWrite);
          }
        };

    Map<SootMethod, SootMethod> concreteImpl =
        new HashMap<SootMethod, SootMethod>() {
          {
            put(mainPrintMethod, concreteImplMainPrint);
            put(mainPrintMethod, concreteImplWritePrint);
            put(mainPrintMethod, concreteImplReadPrint);
            put(readInterfaceRead, concreteImplDefaultRead);
            put(writeInterfaceWrite, concreteImplDefaultWrite);
          }
        };

    ArrayList<Boolean> edgePresent =
        new ArrayList<Boolean>() {
          {
            add(edgeMainPrintToReadPrint);
            add(edgeMainPrintToWritePrint);
            add(edgeMainMethodToPrint);
            add(edgeMainMethodToReadMethod);
            add(edgeMainMethodToWriteMethod);
          }
        };

    ArrayList<Boolean> edgeNotPresent =
        new ArrayList<Boolean>() {
          {
            add(edgeMainMethodToReadPrint);
            add(edgeMainMethodToWritePrint);
          }
        };

    for (Map.Entry<SootMethod, String> targetMethod : targetMethods.entrySet()) {
      assertNotNull(targetMethod.getKey());
    }
    for (Map.Entry<SootMethod, SootMethod> virtualResolvedMethod : resolvedMethods.entrySet()) {
      assertEquals(virtualResolvedMethod.getKey(), virtualResolvedMethod.getValue());
    }
    for (Map.Entry<SootMethod, SootMethod> methodRef1 : methodRef.entrySet()) {
      assertEquals(methodRef1.getKey(), methodRef1.getValue());
    }
    for (Map.Entry<SootMethod, String> targetMethod : targetMethods.entrySet()) {
      assertEquals(targetMethod.getKey().getName(), targetMethod.getValue());
    }
    for (Map.Entry<SootMethod, String> targetMethod : targetMethods.entrySet()) {
      assertTrue(reachableMethods.contains(targetMethod.getKey()));
    }
    for (boolean isPresent : edgePresent) {
      assertTrue(isPresent);
    }
    for (boolean notPresent : edgeNotPresent) {
      assertFalse(notPresent);
    }
    for (Map.Entry<SootMethod, SootMethod> concreteImpl1 : concreteImpl.entrySet()) {
      assertEquals(concreteImpl1.getKey(), concreteImpl1.getValue());
    }
  }
",non-flaky,5
70781,apache_kafka,ConnectorClientPolicyIntegrationTest.testCreateWithAllowedOverridesForPrincipalPolicy,"    @Test
    public void testCreateWithAllowedOverridesForPrincipalPolicy() throws Exception {
        Map<String, String> props = basicConnectorConfig();
        props.put(ConnectorConfig.CONNECTOR_CLIENT_CONSUMER_OVERRIDES_PREFIX + CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, ""PLAIN"");
        assertPassCreateConnector(""Principal"", props);
    }
",non-flaky,5
59650,looly_hutool,TemplateUtilTest.enjoyEngineTest,"	@Test
	public void enjoyEngineTest() {
		// å­ç¬¦ä¸²æ¨¡æ¿
		TemplateEngine engine = TemplateUtil.createEngine(
				new TemplateConfig(""templates"").setCustomEngine(EnjoyEngine.class));
		Template template = engine.getTemplate(""#(x + 123)"");
		String result = template.render(Dict.create().set(""x"", 1));
		Assert.assertEquals(""124"", result);

		//ClassPathæ¨¡æ¿
		engine = new EnjoyEngine(
				new TemplateConfig(""templates"", ResourceMode.CLASSPATH).setCustomEngine(EnjoyEngine.class));
		template = engine.getTemplate(""enjoy_test.etl"");
		result = template.render(Dict.create().set(""x"", 1));
		Assert.assertEquals(""124"", result);
	}
",non-flaky,5
122638,vespa-engine_vespa,YumTest.testAlreadyInstalled,"    @Test
    public void testAlreadyInstalled() {
        terminal.expectCommand(
                ""yum install --assumeyes --enablerepo=repo1 --enablerepo=repo2 --setopt skip_missing_names_on_install=False package-1 package-2 2>&1"",
                0,
                ""foobar\nNothing to do\n"");

        assertFalse(yum
                .install(""package-1"", ""package-2"")
                .enableRepo(""repo1"", ""repo2"")
                .converge(taskContext));
    }
",non-flaky,5
38203,palantir_atlasdb,RocksDbKeyValueServiceTest.testReadGood3,"    @Test
    public void testReadGood3() {
        final Cell cell = Cell.create(""r1"".getBytes(), COMMIT_TS_COLUMN);
        db.put(TABLE, ImmutableMap.of(cell, ""v1"".getBytes()), Long.MAX_VALUE - 3);
        final Map<Cell, Value> res = db.get(TABLE, ImmutableMap.of(cell, Long.MAX_VALUE - 2));
        final Value value = res.get(cell);
        assertEquals(Long.MAX_VALUE - 3, value.getTimestamp());
        assertEquals(""v1"", new String(value.getContents()));
    }
",non-flaky,5
59645,looly_hutool,TemplateUtilTest.createEngineTest,"	@Test
	public void createEngineTest() {
		// å­ç¬¦ä¸²æ¨¡æ¿, é»è®¤æ¨¡æ¿å¼æï¼æ­¤å¤ä¸ºBeetl
		TemplateEngine engine = TemplateUtil.createEngine(new TemplateConfig());
		Template template = engine.getTemplate(""hello,${name}"");
		String result = template.render(Dict.create().set(""name"", ""hutool""));
		Assert.assertEquals(""hello,hutool"", result);

		// classpathä¸­è·åæ¨¡æ¿
		engine = TemplateUtil.createEngine(new TemplateConfig(""templates"", ResourceMode.CLASSPATH));
		Template template2 = engine.getTemplate(""beetl_test.btl"");
		String result2 = template2.render(Dict.create().set(""name"", ""hutool""));
		Assert.assertEquals(""hello,hutool"", result2);
	}
",non-flaky,5
179464,abel533_Mapper,KeySqlTest.testUserSqlAfter,"    @Test
    public void testUserSqlAfter() {
        SqlSession sqlSession = getSqlSession();
        try {
            UserSqlAfterMapper mapper = sqlSession.getMapper(UserSqlAfterMapper.class);

            UserSqlAfter user = new UserSqlAfter();
            user.setName(""liuzh"");
            Assert.assertEquals(1, mapper.insert(user));
            Assert.assertNotNull(user.getId());

            user = mapper.selectByPrimaryKey(user.getId());
            Assert.assertEquals(""liuzh"", user.getName());
        } finally {
            sqlSession.close();
        }
    }
",non-flaky,5
99754,apache_cassandra,AsyncStreamingInputPlusTest.consumeUntil_SingleBuffer_Partial_HappyPath,"    @Test
    public void consumeUntil_SingleBuffer_Partial_HappyPath() throws IOException
    {
        consumeUntilTestCycle(1, 8, 0, 4);
    }
",non-flaky,5
38290,palantir_atlasdb,AbstractTransactionTest.testRangeAfterTimestmap,"    @Test
    public void testRangeAfterTimestmap() {
        putDirect(""row1"", ""col2"", """", 5);
        putDirect(""row2"", ""col2"", """", 0);
        RangeRequest rangeRequest = RangeRequest.builder().batchHint(1).build();
        Map<RangeRequest, TokenBackedBasicResultsPage<RowResult<Value>, byte[]>> ranges = keyValueService.getFirstBatchForRanges(TEST_TABLE, Collections.singleton(rangeRequest), 1);
        assertEquals(1, ranges.keySet().size());
        TokenBackedBasicResultsPage<RowResult<Value>, byte[]> page = ranges.values().iterator().next();
        assertTrue(!page.getResults().isEmpty() || page.moreResultsAvailable());
    }
",non-flaky,5
98017,vert-x3_vertx-mongo-client,MongoClientWithObjectIdTest.testSavePreexistingObjectID,"  @Test
  public void testSavePreexistingObjectID() throws Exception {
    String collection = randomCollection();
    mongoClient.createCollection(collection, onSuccess(res -> {
      JsonObject doc = createDoc();
      //Changed to hex string as a random string will not be valid for useObjectId = true
      doc.put(""_id"", new ObjectId().toHexString());
      mongoClient.saveWithOptions(collection, doc, ACKNOWLEDGED, onSuccess(id -> {
        assertNull(id);
        testComplete();
      }));
    }));
    await();
  }
",non-flaky,5
60920,apache_druid,DoubleMaxAveragerTest.testComputeResult,"  @Test
  public void testComputeResult()
  {
    BaseAverager<Number, Double> avg = new DoubleMaxAverager(3, ""test"", ""field"", 1);

    Assert.assertEquals(Double.NEGATIVE_INFINITY, avg.computeResult(), 0.0);

    avg.addElement(Collections.singletonMap(""field"", -1.1e100), new HashMap<>());
    Assert.assertEquals(-1.1e100, avg.computeResult(), 0.0);

    avg.addElement(Collections.singletonMap(""field"", 1.0), new HashMap<>());
    Assert.assertEquals(1.0, avg.computeResult(), 0.0);

    avg.addElement(Collections.singletonMap(""field"", 1), new HashMap<>());
    Assert.assertEquals(1.0, avg.computeResult(), 0.0);

    avg.addElement(Collections.singletonMap(""field"", 5.0), new HashMap<>());
    avg.addElement(Collections.singletonMap(""field"", 3.0), new HashMap<>());
    avg.addElement(Collections.singletonMap(""field"", 2.0), new HashMap<>());
    Assert.assertEquals(5.0, avg.computeResult(), 0.0);

    avg.skip();
    Assert.assertEquals(3.0, avg.computeResult(), 0.0);
  }
",non-flaky,5
77007,Tencent_Firestorm,ShuffleServerGrpcTest.multipleShuffleResultTest,"  @Test
  public void multipleShuffleResultTest() throws Exception {
    Set<Long> expectedBlockIds = Sets.newConcurrentHashSet();
    RssRegisterShuffleRequest rrsr = new RssRegisterShuffleRequest(""multipleShuffleResultTest"", 100,
        Lists.newArrayList(new PartitionRange(0, 1)));
    shuffleServerClient.registerShuffle(rrsr);

    Runnable r1 = () -> {
      for (int i = 0; i < 100; i++) {
        Map<Integer, List<Long>> ptbs = Maps.newHashMap();
        List<Long> blockIds = Lists.newArrayList();
        Long blockId = ClientUtils.getBlockId(1, 0, i);
        expectedBlockIds.add(blockId);
        blockIds.add(blockId);
        ptbs.put(1, blockIds);
        RssReportShuffleResultRequest req1 =
            new RssReportShuffleResultRequest(""multipleShuffleResultTest"", 1, 0, ptbs, 1);
        shuffleServerClient.reportShuffleResult(req1);
      }
    };
    Runnable r2 = () -> {
      for (int i = 100; i < 200; i++) {
        Map<Integer, List<Long>> ptbs = Maps.newHashMap();
        List<Long> blockIds = Lists.newArrayList();
        Long blockId = ClientUtils.getBlockId(1, 1, i);
        expectedBlockIds.add(blockId);
        blockIds.add(blockId);
        ptbs.put(1, blockIds);
        RssReportShuffleResultRequest req1 =
            new RssReportShuffleResultRequest(""multipleShuffleResultTest"", 1, 1, ptbs, 1);
        shuffleServerClient.reportShuffleResult(req1);
      }
    };
    Runnable r3 = () -> {
      for (int i = 200; i < 300; i++) {
        Map<Integer, List<Long>> ptbs = Maps.newHashMap();
        List<Long> blockIds = Lists.newArrayList();
        Long blockId = ClientUtils.getBlockId(1, 2, i);
        expectedBlockIds.add(blockId);
        blockIds.add(blockId);
        ptbs.put(1, blockIds);
        RssReportShuffleResultRequest req1 =
            new RssReportShuffleResultRequest(""multipleShuffleResultTest"", 1, 2, ptbs, 1);
        shuffleServerClient.reportShuffleResult(req1);
      }
    };
    Thread t1 = new Thread(r1);
    Thread t2 = new Thread(r2);
    Thread t3 = new Thread(r3);
    t1.start();
    t2.start();
    t3.start();
    t1.join();
    t2.join();
    t3.join();

    Roaring64NavigableMap blockIdBitmap = Roaring64NavigableMap.bitmapOf();
    for (Long blockId : expectedBlockIds) {
      blockIdBitmap.addLong(blockId);
    }

    RssGetShuffleResultRequest req = new RssGetShuffleResultRequest(
        ""multipleShuffleResultTest"", 1, 1);
    RssGetShuffleResultResponse result = shuffleServerClient.getShuffleResult(req);
    Roaring64NavigableMap actualBlockIdBitmap = result.getBlockIdBitmap();
    assertEquals(blockIdBitmap, actualBlockIdBitmap);
  }
",non-flaky,5
76995,Tencent_Firestorm,CoordinatorGrpcTest.appHeartbeatTest,"  @Test
  public void appHeartbeatTest() throws Exception {
    RssAppHeartBeatResponse response =
        coordinatorClient.sendAppHeartBeat(new RssAppHeartBeatRequest(""appHeartbeatTest1"", 1000));
    assertEquals(ResponseStatusCode.SUCCESS, response.getStatusCode());
    assertEquals(Sets.newHashSet(""appHeartbeatTest1""),
        coordinators.get(0).getApplicationManager().getAppIds());
    coordinatorClient.sendAppHeartBeat(new RssAppHeartBeatRequest(""appHeartbeatTest2"", 1000));
    assertEquals(Sets.newHashSet(""appHeartbeatTest1"", ""appHeartbeatTest2""),
        coordinators.get(0).getApplicationManager().getAppIds());
    int retry = 0;
    while (retry < 5) {
      coordinatorClient.sendAppHeartBeat(new RssAppHeartBeatRequest(""appHeartbeatTest1"", 1000));
      retry++;
      Thread.sleep(1000);
    }
    // appHeartbeatTest2 was removed because of expired
    assertEquals(Sets.newHashSet(""appHeartbeatTest1""),
        coordinators.get(0).getApplicationManager().getAppIds());
  }
",non-flaky,5
78315,apache_beam,SimpleDoFnRunnerTest.testInfiniteSkew,"  @Test
  public void testInfiniteSkew() {
    SkewingDoFn fn = new SkewingDoFn(Duration.millis(Long.MAX_VALUE));
    DoFnRunner<Duration, Duration> runner =
        new SimpleDoFnRunner<>(
            null,
            fn,
            NullSideInputReader.empty(),
            new ListOutputManager(),
            new TupleTag<>(),
            Collections.emptyList(),
            mockStepContext,
            null,
            Collections.emptyMap(),
            WindowingStrategy.of(new GlobalWindows()));

    runner.startBundle();
    runner.processElement(
        WindowedValue.timestampedValueInGlobalWindow(Duration.millis(1L), new Instant(0)));
    runner.processElement(
        WindowedValue.timestampedValueInGlobalWindow(
            Duration.millis(1L), BoundedWindow.TIMESTAMP_MIN_VALUE.plus(Duration.millis(1))));
    runner.processElement(
        WindowedValue.timestampedValueInGlobalWindow(
            // This is the maximum amount a timestamp in beam can move (from the maximum timestamp
            // to the minimum timestamp).
            Duration.millis(BoundedWindow.TIMESTAMP_MAX_VALUE.getMillis())
                .minus(Duration.millis(BoundedWindow.TIMESTAMP_MIN_VALUE.getMillis())),
            BoundedWindow.TIMESTAMP_MAX_VALUE));
  }
",non-flaky,5
112656,tbsalling_aismessages,DataLinkManagementTest.canDecodeShortVariant1,"    @Test
    public void canDecodeShortVariant1() {
        AISMessage aisMessage = AISMessage.create(NMEAMessage.fromString(""!AIVDM,1,1,,A,Dh3Ovk1UAN>4,0*0A""));

        System.out.println(aisMessage.toString());

        assertEquals(AISMessageType.DataLinkManagement, aisMessage.getMessageType());
        DataLinkManagement message = (DataLinkManagement) aisMessage;
        assertEquals(Integer.valueOf(3), message.getRepeatIndicator());
        assertEquals(MMSI.valueOf(3669708), message.getSourceMmsi());
        assertEquals((Integer) 1620, message.getOffsetNumber1());
        assertEquals((Integer) 5, message.getReservedSlots1());
        assertEquals((Integer) 7, message.getTimeout1());
        assertEquals((Integer) 225, message.getIncrement1());
        assertNull(message.getOffsetNumber2());
        assertNull(message.getReservedSlots2());
        assertNull(message.getTimeout2());
        assertNull(message.getIncrement2());
        assertNull(message.getOffsetNumber3());
        assertNull(message.getReservedSlots3());
        assertNull(message.getTimeout3());
        assertNull(message.getIncrement3());
    }
",non-flaky,5
94796,ktuukkan_marine-api,AISMessage09ParserTest.getAltitude,"    @Test
    public void getAltitude() throws Exception {
        assertEquals(16, msg.getAltitude());
    }
",non-flaky,5
175751,GoogleCloudPlatform_google-cloud-eclipse,AppEngineDeployPreferencesPanelTest.testProjectNotSelectedIsNotAnErrorWhenRequireValuesIsFalse,"  @Test
  public void testProjectNotSelectedIsNotAnErrorWhenRequireValuesIsFalse() {
    deployPanel = createPanel(false /* requireValues */);
    assertThat(getProjectSelectionValidator().getSeverity(), is(IStatus.INFO));
  }
",non-flaky,5
112113,apache_shardingsphere-elasticjob,StatisticRdbRepositoryTest.assertFindTaskResultStatisticsWhenTableIsEmpty,"    @Test
    public void assertFindTaskResultStatisticsWhenTableIsEmpty() {
        assertThat(repository.findTaskResultStatistics(new Date(), StatisticInterval.MINUTE).size(), is(0));
        assertThat(repository.findTaskResultStatistics(new Date(), StatisticInterval.HOUR).size(), is(0));
        assertThat(repository.findTaskResultStatistics(new Date(), StatisticInterval.DAY).size(), is(0));
    }
",non-flaky,5
21247,androidx_androidx,PreferencePersistTest.long_retrieveWhenEmpty_returnsDefault,"    @Test
    public void long_retrieveWhenEmpty_returnsDefault() {
        assertEquals(1, mPreference.getLong(1));
    }
",non-flaky,5
30994,camunda-cloud_zeebe,ObjectMappingTest.shouldFailSerializationWithMissingRequiredValues,"  @Test
  public void shouldFailSerializationWithMissingRequiredValues() {
    // given
    final POJO pojo = new POJO();

    final UnsafeBuffer buf = new UnsafeBuffer(new byte[1024]);

    // then
    exception.expect(MsgpackPropertyException.class);
    exception.expectMessage(
        ""Property 'enumProp' is invalid: Expected a value or default value to be set before writing, but has nothing"");

    // when
    pojo.write(buf, 0);
  }
",non-flaky,5
33657,alibaba_fastjson,TestIssue885.testWriteToWithPretty,"        //System.out.println(""@@@@@Test Pretty"");
        final String user = target(""user"").queryParam(""pretty"", ""true"").request().accept(""application/json"").get(String.class);
        // {""createdOn"":1412036891919,""id"":12345,""name"":""smallnest""}]
        assertTrue(user.indexOf(""createdOn"") > 0);
        assertTrue(user.indexOf(""\""id\"":12345"") > 0);
        assertTrue(user.indexOf(""\""name\"":\""smallnest\"""") > 0);
        //response does not contain a return character
        //assertTrue(user.indexOf(""\n\t"") > 0);

    }
",non-flaky,5
110201,Wikidata_wikidata-toolkit,MwLocalDumpFileTest.missingDumpFileDirectory,"	@Test
	public void missingDumpFileDirectory() throws IOException {
		MwLocalDumpFile df = new MwLocalDumpFile(
				""/nonexisting-directory/non-existing-file.json.gz"");
		assertFalse(df.isAvailable());
	}
",non-flaky,5
59566,looly_hutool,CronPatternTest.matchAllTest,"	@Test
	public void matchAllTest() {
		CronPattern pattern;
		// ä»»ä½æ¶é´å¹é
		pattern = new CronPattern(""* * * * * *"");
		Assert.assertTrue(pattern.match(DateUtil.current(), true));
		Assert.assertTrue(pattern.match(DateUtil.current(), false));
	}
",non-flaky,5
70845,apache_kafka,WorkerSourceTaskTest.testSendRecordsTaskCommitRecordFail,"    @Test
    public void testSendRecordsTaskCommitRecordFail() throws Exception {
        createWorkerTask();

        // Differentiate only by Kafka partition so we can reuse conversion expectations
        SourceRecord record1 = new SourceRecord(PARTITION, OFFSET, ""topic"", 1, KEY_SCHEMA, KEY, RECORD_SCHEMA, RECORD);
        SourceRecord record2 = new SourceRecord(PARTITION, OFFSET, ""topic"", 2, KEY_SCHEMA, KEY, RECORD_SCHEMA, RECORD);
        SourceRecord record3 = new SourceRecord(PARTITION, OFFSET, ""topic"", 3, KEY_SCHEMA, KEY, RECORD_SCHEMA, RECORD);

        // Source task commit record failure will not cause the task to abort
        expectSendRecordOnce(false);
        expectSendRecordTaskCommitRecordFail(false, false);
        expectSendRecordOnce(false);

        PowerMock.replayAll();

        Whitebox.setInternalState(workerTask, ""toSend"", Arrays.asList(record1, record2, record3));
        Whitebox.invokeMethod(workerTask, ""sendRecords"");
        assertEquals(false, Whitebox.getInternalState(workerTask, ""lastSendFailed""));
        assertNull(Whitebox.getInternalState(workerTask, ""toSend""));

        PowerMock.verifyAll();
    }
",non-flaky,5
135016,undertow-io_undertow,AjpClientTestCase.completed,"    @Test
    public void testPostRequest() throws Exception {
        //
        final UndertowClient client = createClient();
        final String postMessage = ""This is a post request"";

        final List<String> responses = new CopyOnWriteArrayList<>();
        final CountDownLatch latch = new CountDownLatch(10);
        final ClientConnection connection = client.connect(ADDRESS, worker, DefaultServer.getBufferPool(), OptionMap.EMPTY).get();
        try {
            connection.getIoThread().execute(new Runnable() {
                @Override
                public void run() {
                    for (int i = 0; i < 10; i++) {
                        final ClientRequest request = new ClientRequest().setMethod(Methods.POST).setPath(POST);
                        request.getRequestHeaders().put(Headers.HOST, DefaultServer.getHostAddress());
                        request.getRequestHeaders().put(Headers.TRANSFER_ENCODING, ""chunked"");
                        connection.sendRequest(request, new ClientCallback<ClientExchange>() {
                            @Override
                            public void completed(ClientExchange result) {
                                new StringWriteChannelListener(postMessage).setup(result.getRequestChannel());
                                result.setResponseListener(new ClientCallback<ClientExchange>() {
                                    @Override
                                    public void completed(ClientExchange result) {
                                        new StringReadChannelListener(DefaultServer.getBufferPool()) {

                                            @Override
                                            protected void stringDone(String string) {
                                                responses.add(string);
                                                latch.countDown();
                                            }

                                            @Override
                                            protected void error(IOException e) {
                                                e.printStackTrace();
                                                latch.countDown();
                                            }
                                        }.setup(result.getResponseChannel());
                                    }
",non-flaky,5
77515,dropwizard_dropwizard,DAOTestRuleTest.ruleCanRoundtrip,"    @Test
    public void ruleCanRoundtrip() {
        final Long id = daoTestRule.inTransaction(() -> persist(new TestEntity(""description"")).getId());

        final TestEntity testEntity = get(id);

        assertThat(testEntity).isNotNull();
        assertThat(testEntity.getDescription()).isEqualTo(""description"");
    }
",non-flaky,5
98645,nutzam_nutz,SimpleAdaptorTest.test_object_without_param,"    @Test
    public void test_object_without_param() {
        assertEquals(200, get(""/adaptor/object_without_param"").getStatus());
        assertEquals(""{\""name\"": \""object\""}"".replaceAll("" "", """"), get(""/adaptor/object_without_param?name=object"").getContent().replaceAll("" "", """"));
    }
",non-flaky,5
21258,androidx_androidx,PreferencePersistTest.boolean_persist_getsStoredToSharedPrefs,"    @Test
    public void boolean_persist_getsStoredToSharedPrefs() {
        final boolean expected = true;

        boolean wasPersisted = mPreference.putBoolean(expected);

        assertTrue(wasPersisted);
        assertEquals(expected, mSharedPref.getBoolean(KEY, !expected));
    }
",non-flaky,5
162728,OpenAPITools_openapi-generator,XmlItemTest.prefixNamespaceStringTest,"    @Test
    public void prefixNamespaceStringTest() {
        // TODO: test prefixNamespaceString
    }
",non-flaky,5
170464,eclipse_jetty.project,MBeanContainerLifeCycleTest.testAddBeanRegistersMBeanRemoveBeanUnregistersMBean,"    @Test
    public void testAddBeanRegistersMBeanRemoveBeanUnregistersMBean() throws Exception
    {
        // Adding a bean to the container should register the MBean.
        QueuedThreadPool bean = new QueuedThreadPool();
        container.addBean(bean);

        String pkg = bean.getClass().getPackage().getName();
        Set<ObjectName> objectNames = mbeanServer.queryNames(ObjectName.getInstance(pkg + "":*""), null);
        assertEquals(1, objectNames.size());

        // Removing the bean should unregister the MBean.
        container.removeBean(bean);
        objectNames = mbeanServer.queryNames(ObjectName.getInstance(pkg + "":*""), null);
        assertEquals(0, objectNames.size());
    }
",non-flaky,5
76703,quarkusio_quarkus,SimpleET.testHelloEndpoint,"    @Test
    public void testHelloEndpoint() {
        given()
                .when().get(""/hello"")
                .then()
                .statusCode(200)
                .body(is(""hello""));
    }
",non-flaky,5
88,togglz_togglz,ZookeeperStateRepositoryTest.testZkNodeChangesUpdateFeatureState,"@Test
public void testZkNodeChangesUpdateFeatureState() throws Exception {
    setupTestWithEmptyDatastore();
    FeatureState savedFeatureState = new FeatureState(TestFeature.FEATURE);
    savedFeatureState.setStrategyId(ID);
    savedFeatureState.setParameter(PARAM_USERS, ""user1, user2, user3"");
    stateRepository.setFeatureState(savedFeatureState);
    FeatureState loadedFeatureState = stateRepository.getFeatureState(TestFeature.FEATURE);
    assertThat(reflectionEquals(savedFeatureState, loadedFeatureState), is(true));
    FeatureStateStorageWrapper externallySetStateWrapper = new FeatureStateStorageWrapper();
    FeatureState externallySetState = new FeatureState(TestFeature.FEATURE);
    ObjectMapper objectMapper = new ObjectMapper();
    final String json = objectMapper.writeValueAsString(externallySetStateWrapper);
    final CountDownLatch latch = new CountDownLatch(1);
    new Thread(new Runnable() {
        @Override
        public void run() {
            try {
                serverClientPair.client.setData().forPath(TEST_ZNODE + ""/FEATURE"", json.getBytes(""UTF-8""));
                latch.countDown();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }).start();
    latch.await(2, TimeUnit.SECONDS);
    Thread.sleep(25);
    loadedFeatureState = stateRepository.getFeatureState(TestFeature.FEATURE);
    assertThat(reflectionEquals(externallySetState, loadedFeatureState), is(true));
}",async wait,0
118724,netty_netty,DetectPeerCloseWithoutReadTest.serverCloseWithoutClientReadIsDetectedExtraReadRequested,"    @Test(timeout = 10000)
    public void serverCloseWithoutClientReadIsDetectedExtraReadRequested() throws InterruptedException {
        serverCloseWithoutClientReadIsDetected0(true);
    }
",non-flaky,5
33866,apache_camel,FhirHistoryIT.testOnInstance,"    @Test
    public void testOnInstance() throws Exception {
        final Map<String, Object> headers = new HashMap<>();
        headers.put(""CamelFhir.id"", this.patient.getIdElement());
        // parameter type is Class
        headers.put(""CamelFhir.returnType"", Bundle.class);
        // parameter type is Integer
        headers.put(""CamelFhir.count"", 1);

        Bundle result = requestBodyAndHeaders(""direct://ON_INSTANCE"", null, headers);

        LOG.debug(""onInstance: "" + result);
        assertNotNull(result, ""onInstance result"");
        assertEquals(1, result.getEntry().size());
    }
",non-flaky,5
77484,dropwizard_dropwizard,TaskServletTest.execute,"    @Test
            public void execute(Map<String, List<String>> parameters, PrintWriter output) {
                output.println(""Vacuum cleaning"");
            }
",non-flaky,5
19482,eclipse_xtext-core,LineAndColumnTest.testNegativeOffset,"	@Test(expected=IndexOutOfBoundsException.class)
	public void testNegativeOffset() {
		assertLineAndColumn("""", -1, -1, -1);
	}
",non-flaky,5
110165,Wikidata_wikidata-toolkit,DirectoryManagerTest.NoCreateFileInputStreamReadOnly,"	@Test(expected = IOException.class)
	public void NoCreateFileInputStreamReadOnly() throws IOException {
		ByteArrayInputStream in = new ByteArrayInputStream(
				""new contents"".getBytes(StandardCharsets.UTF_8));
		dm.createFile(""new-test-file.txt"", in);
	}
",non-flaky,5
112633,tbsalling_aismessages,ShipAndVoyageDataTest.canDecode1,"    @Test
    public void canDecode1() {
        AISMessage aisMessage = AISMessage.create(
            NMEAMessage.fromString(""!AIVDM,2,1,3,A,55MuUD02;EFUL@CO;W@lU=<U=<U10V1HuT4LE:1DC@T>B4kC0DliSp=t,0*14""),
            NMEAMessage.fromString(""!AIVDM,2,2,3,A,888888888888880,2*27"")
        );

        System.out.println(aisMessage.toString());

        assertEquals(AISMessageType.ShipAndVoyageRelatedData, aisMessage.getMessageType());
        ShipAndVoyageData message = (ShipAndVoyageData) aisMessage;
        assertEquals(Integer.valueOf(0), message.getRepeatIndicator());
        assertEquals(MMSI.valueOf(366962000), message.getSourceMmsi());
        assertEquals(IMO.valueOf(9131369), message.getImo());
        assertEquals(""WDD7294"", message.getCallsign());
        assertEquals(""MISSISSIPPI VOYAGER"", message.getShipName());
        assertEquals(ShipType.TankerHazardousD, message.getShipType());
        assertEquals(Integer.valueOf(154), message.getToBow());
        assertEquals(Integer.valueOf(36), message.getToStern());
        assertEquals(Integer.valueOf(18), message.getToStarboard());
        assertEquals(Integer.valueOf(14), message.getToPort());
        assertEquals(PositionFixingDevice.Gps, message.getPositionFixingDevice());
        assertEquals(Float.valueOf(""8.3""), message.getDraught());
        assertEquals((Integer) 83 , message.getRawDraught());
        assertEquals(""06-03 19:00"", message.getEta());
        assertEquals((Integer) 3, message.getEtaMonth());
        assertEquals((Integer) 6, message.getEtaDay());
        assertEquals((Integer) 19, message.getEtaHour());
        assertEquals((Integer) 0, message.getEtaMinute());
        assertEquals(Optional.empty(), message.getEtaAfterReceived());
        assertEquals(""SFO 70"", message.getDestination());
        assertFalse(message.getDataTerminalReady());
    }
",non-flaky,5
170540,eclipse_jetty.project,TestServletAnnotations.testServletAnnotation,"    @Test
    public void testServletAnnotation() throws Exception
    {
        List<String> classes = new ArrayList<String>();
        classes.add(""org.eclipse.jetty.annotations.ServletC"");
        AnnotationParser parser = new AnnotationParser();

        WebAppContext wac = new WebAppContext();
        List<DiscoveredAnnotation> results = new ArrayList<DiscoveredAnnotation>();

        TestWebServletAnnotationHandler handler = new TestWebServletAnnotationHandler(wac, results);

        parser.parse(Collections.singleton(handler), classes);

        assertEquals(1, results.size());
        assertTrue(results.get(0) instanceof WebServletAnnotation);

        results.get(0).apply();

        ServletHolder[] holders = wac.getServletHandler().getServlets();
        assertNotNull(holders);
        assertEquals(1, holders.length);

        // Verify servlet annotations
        ServletHolder cholder = holders[0];
        assertThat(""Servlet Name"", cholder.getName(), is(""CServlet""));
        assertThat(""InitParameter[x]"", cholder.getInitParameter(""x""), is(""y""));
        assertThat(""Init Order"", cholder.getInitOrder(), is(2));
        assertThat(""Async Supported"", cholder.isAsyncSupported(), is(false));

        // Verify mappings
        ServletMapping[] mappings = wac.getServletHandler().getServletMappings();
        assertNotNull(mappings);
        assertEquals(1, mappings.length);
        String[] paths = mappings[0].getPathSpecs();
        assertNotNull(paths);
        assertEquals(2, paths.length);
    }
",non-flaky,5
137095,spring-projects_spring-framework,AbstractAnnotationMetadataTests.getAnnotationsReturnsDirectAnnotations,"	@Test
	public void getAnnotationsReturnsDirectAnnotations() {
		assertThat(get(WithDirectAnnotations.class).getAnnotations().stream())
			.filteredOn(MergedAnnotation::isDirectlyPresent)
			.extracting(a -> a.getType().getName())
			.containsExactlyInAnyOrder(DirectAnnotation1.class.getName(), DirectAnnotation2.class.getName());
	}
",non-flaky,5
70833,apache_kafka,WorkerSourceTaskTest.testPause,"    @Test
    public void testPause() throws Exception {
        createWorkerTask();

        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));
        EasyMock.expectLastCall();
        sourceTask.start(TASK_PROPS);
        EasyMock.expectLastCall();
        statusListener.onStartup(taskId);
        EasyMock.expectLastCall();

        AtomicInteger count = new AtomicInteger(0);
        CountDownLatch pollLatch = expectPolls(10, count);
        // In this test, we don't flush, so nothing goes any further than the offset writer

        statusListener.onPause(taskId);
        EasyMock.expectLastCall();

        sourceTask.stop();
        EasyMock.expectLastCall();
        expectOffsetFlush(true);

        statusListener.onShutdown(taskId);
        EasyMock.expectLastCall();

        producer.close(EasyMock.anyObject(Duration.class));
        EasyMock.expectLastCall();

        transformationChain.close();
        EasyMock.expectLastCall();

        PowerMock.replayAll();

        workerTask.initialize(TASK_CONFIG);
        Future<?> taskFuture = executor.submit(workerTask);
        assertTrue(awaitLatch(pollLatch));

        workerTask.transitionTo(TargetState.PAUSED);

        int priorCount = count.get();
        Thread.sleep(100);

        // since the transition is observed asynchronously, the count could be off by one loop iteration
        assertTrue(count.get() - priorCount <= 1);

        workerTask.stop();
        assertTrue(workerTask.awaitStop(1000));

        taskFuture.get();

        PowerMock.verifyAll();
    }
",non-flaky,5
33736,alibaba_fastjson,FastJsonViewTest.test3,"    @Test
    public void test3() throws Exception {
        mockMvc.perform(
                (post(""/fastjsonview/test3"").characterEncoding(""UTF-8"")
                        .contentType(MediaType.APPLICATION_JSON))).andExpect(status
                ().isOk()).andDo(print()).andExpect(content().string(""{\""id\"":100,\""name\"":\""æµè¯\"",\""rootDepartment\"":{\""description\"":\""é¨é¨1æè¿°\""}}""));
    }
",non-flaky,5
99771,apache_cassandra,RateBasedBackPressureTest.testBackPressureRateLimiterIsIncreasedAfterGoingAgainAboveHighRatio,"    @Test
    public void testBackPressureRateLimiterIsIncreasedAfterGoingAgainAboveHighRatio() throws Exception
    {
        long windowSize = 6000;
        TestTimeSource timeSource = new TestTimeSource();
        RateBasedBackPressure strategy = new RateBasedBackPressure(ImmutableMap.of(HIGH_RATIO, ""0.9"", FACTOR, ""10"", FLOW, ""FAST""), timeSource, windowSize);
        RateBasedBackPressureState state = strategy.newState(InetAddressAndPort.getLoopbackAddress());

        // Update incoming and outgoing rate so that the ratio is 0.5:
        state.incomingRate.update(50);
        state.outgoingRate.update(100);

        // Move time ahead:
        timeSource.sleep(windowSize, TimeUnit.MILLISECONDS);

        // Verify the rate decreased:
        strategy.apply(Sets.newHashSet(state), 1, TimeUnit.SECONDS);
        assertEquals(7.4, state.rateLimiter.getRate(), 0.1);

        // Update incoming and outgoing rate back above high rate:
        state.incomingRate.update(50);
        state.outgoingRate.update(50);

        // Move time ahead:
        timeSource.sleep(windowSize, TimeUnit.MILLISECONDS);

        // Verify rate limiter is increased by factor:
        strategy.apply(Sets.newHashSet(state), 1, TimeUnit.SECONDS);
        assertEquals(8.25, state.rateLimiter.getRate(), 0.1);

        // Update incoming and outgoing rate to keep it below the limiter rate:
        state.incomingRate.update(1);
        state.outgoingRate.update(1);

        // Move time ahead:
        timeSource.sleep(windowSize, TimeUnit.MILLISECONDS);

        // Verify rate limiter is not increased as already higher than the actual rate:
        strategy.apply(Sets.newHashSet(state), 1, TimeUnit.SECONDS);
        assertEquals(8.25, state.rateLimiter.getRate(), 0.1);
    }
",non-flaky,5
98326,spotify_docker-client,DockerHostTest.testCertPathFromEnv,"  @Test
  public void testCertPathFromEnv() throws Exception {
    when(systemDelegate.getenv(""DOCKER_CERT_PATH"")).thenReturn(""foo"", (String) null);
    when(systemDelegate.getProperty(""user.home"")).thenReturn(""bar"");
    DockerHost.setSystemDelegate(systemDelegate);

    assertThat(DockerHost.certPathFromEnv(), equalTo(""foo""));
    assertThat(DockerHost.certPathFromEnv(), nullValue());
  }
",non-flaky,5
89362,apache_samza,TestKafkaCheckpointManager.testRegister,"  @Test
  public void testRegister() {
    setupSystemFactory(config());
    KafkaCheckpointManager kafkaCheckpointManager = buildKafkaCheckpointManager(true, config());
    kafkaCheckpointManager.register(TASK0);
    verify(this.systemProducer).register(TASK0.getTaskName());
  }
",non-flaky,5
30997,camunda-cloud_zeebe,ArrayValueTest.shouldAppendValues,"  @Test
  public void shouldAppendValues() {
    // when
    addIntValues(array, 1, 2, 3);

    // then
    encodeAndDecode(array);
    assertIntValues(array, 1, 2, 3);
  }
",non-flaky,5
59640,looly_hutool,TokenizerUtilTest.wordTest,"	@Test
	public void wordTest() {
		TokenizerEngine engine = new WordEngine();
		Result result = engine.parse(text);
		String resultStr = IterUtil.join((Iterator<Word>)result, "" "");
		Assert.assertEquals(""è¿ä¸¤ä¸ª æ¹æ³ ç åºå« å¨äº è¿åå¼"", resultStr);
	}
",non-flaky,5
38265,palantir_atlasdb,AbstractSerializableTransactionTest.testNonPhantomRead,"    @Test
    public void testNonPhantomRead() {
        String initialValue = ""100"";
        Transaction t0 = startTransaction();
        put(t0, ""row1"", ""col1"", initialValue);
        put(t0, ""row2"", ""col1"", initialValue);
        t0.commit();

        Transaction t1 = startTransaction();
        RowResult<byte[]> first = BatchingVisitables.getFirst(t1.getRange(TEST_TABLE, RangeRequest.builder().build()));
        put(t1, ""row22"", ""col1"", initialValue);

        Transaction t2 = startTransaction();
        put(t2, ""row11"", ""col1"", initialValue);
        t2.commit();

        t1.commit();
    }
",non-flaky,5
170453,eclipse_jetty.project,ObjectMBeanTest.after,"    @AfterEach
    public void after()
    {
        container.destroy();
        container = null;
    }
",non-flaky,5
77633,pholser_junit-quickcheck,PeriodPropertyParameterTypesTest.shouldHold,"    @Test public void malformedMin() {
        @Property public void shouldHold(
            @InRange(min = ""@#!@#@"", max = ""P36Y2M3D"") Period p) {
        }
",non-flaky,5
92602,FasterXML_jackson-databind,ImmutablesTypeSerializationTest.testImmutablesSimpleRoundTrip,"    @Test
    public void testImmutablesSimpleRoundTrip() throws IOException {
        Account original = ImmutableAccount.builder()
                .id(1L)
                .name(""foo"")
                .build();
        String json = MAPPER.writeValueAsString(original);
        Account deserialized = MAPPER.readValue(json, Account.class);
        assertEquals(original, deserialized);
    }
",non-flaky,5
31004,camunda-cloud_zeebe,ArrayValueTest.shouldRemoveValueInBetween,"  @Test
  public void shouldRemoveValueInBetween() {
    // given
    addIntValues(array, 1, 2, 3);

    // when
    final Iterator<IntegerValue> iterator = array.iterator();
    iterator.next();
    iterator.next();
    iterator.remove();

    // then
    encodeAndDecode(array);
    assertIntValues(array, 1, 3);
  }
",non-flaky,5
53173,cloudfoundry_uaa,ScimGroupTests.testAddAllMembers,"    @Test
    public void testAddAllMembers() {
        patch.setMembers(Arrays.asList(member1, member2, member3));
        group.setMembers(emptyList());
        assertEquals(0, group.getMembers().size());
        group.patch(patch);
        assertEquals(3, group.getMembers().size());

    }
",non-flaky,5
98274,spotify_docker-client,HostConfigTest.testJsonOnFailure,"  @Test
  public void testJsonOnFailure() throws Exception {
    final HostConfig hostConfig = objectMapper
        .readValue(fixture(""fixtures/hostConfig/restartPolicyOnFailure.json""),
                   HostConfig.class);
    assertThat(hostConfig.restartPolicy(), is(HostConfig.RestartPolicy.onFailure(5)));
  }
",non-flaky,5
118746,netty_netty,ByteBufUtilTest.setShortBE,"    @Test
    public void setShortBE() {
        int shortValue = 0x1234;

        ByteBuf buf = Unpooled.wrappedBuffer(new byte[2]).order(ByteOrder.BIG_ENDIAN);
        ByteBufUtil.setShortBE(buf, 0, shortValue);
        assertEquals(shortValue, buf.readShort());
        buf.resetReaderIndex();
        assertEquals(ByteBufUtil.swapShort((short) shortValue), buf.readShortLE());
        buf.release();

        buf = Unpooled.wrappedBuffer(new byte[2]).order(ByteOrder.LITTLE_ENDIAN);
        ByteBufUtil.setShortBE(buf, 0, shortValue);
        assertEquals((short) shortValue, buf.readShortLE());
        buf.resetReaderIndex();
        assertEquals(ByteBufUtil.swapShort((short) shortValue), buf.readShort());
        buf.release();
    }
",non-flaky,5
94626,square_okhttp,InterceptorTest.intercept,"  @Test public void networkInterceptorsRewriteRequestToServer() throws Exception {
      @Override public Response intercept(Chain chain) throws IOException {
        Request originalRequest = chain.request();
        return chain.proceed(originalRequest.newBuilder()
            .method(""POST"", uppercase(originalRequest.body()))
            .addHeader(""OkHttp-Intercepted"", ""yep"")
            .build());
      }
",non-flaky,5
162676,OpenAPITools_openapi-generator,PetApiTest.updatePetTest,"    @Test
    public void updatePetTest() {
        Pet body = null;
        //api.updatePet(body);
        
        // TODO: test validations
        
        
    }
",non-flaky,5
112673,hwang-pku_ormlite-core,VersionUtilsTest.testCheckCoreVersusAndroidVersionsGood,"	@Test
	public void testCheckCoreVersusAndroidVersionsGood() {
		VersionUtils.setThrownOnErrors(true);
		VersionUtils.checkCoreVersusAndroidVersions(VersionUtils.getCoreVersion());
	}
",non-flaky,5
133929,cdancy_jenkins-rest,JenkinsApiMetadataTest.testEtcdApiRegistered,"@Test(groups = ""unit"", testName = ""JenkinsApiMetadataTest"")
   public void testEtcdApiRegistered() {
      ApiMetadata api = Apis.withId(""jenkins"");

      assertNotNull(api);
      assertTrue(api instanceof JenkinsApiMetadata);
      assertEquals(api.getId(), ""jenkins"");
   }
",non-flaky,5
43034,trinodb_trino,BaseDynamicPartitionPruningTest.testSemiJoinWithEmptyBuildSide,"    @Test(timeOut = 30_000)
    public void testSemiJoinWithEmptyBuildSide()
    {
        @Language(""SQL"") String selectQuery = ""SELECT * FROM partitioned_lineitem WHERE suppkey IN (SELECT suppkey FROM supplier WHERE name = 'abc')"";
        ResultWithQueryId<MaterializedResult> result = getDistributedQueryRunner().executeWithQueryId(
                getSession(),
                selectQuery);
        MaterializedResult expected = computeActual(withDynamicFilteringDisabled(), selectQuery);
        assertEqualsIgnoreOrder(result.getResult(), expected);

        OperatorStats probeStats = searchScanFilterAndProjectOperatorStats(result.getQueryId(), getQualifiedTableName(PARTITIONED_LINEITEM));
        assertEquals(probeStats.getInputPositions(), 0L);

        DynamicFiltersStats dynamicFiltersStats = getDynamicFilteringStats(result.getQueryId());
        assertEquals(dynamicFiltersStats.getTotalDynamicFilters(), 1L);
        assertEquals(dynamicFiltersStats.getLazyDynamicFilters(), 1L);
        assertEquals(dynamicFiltersStats.getReplicatedDynamicFilters(), 0L);
        assertEquals(dynamicFiltersStats.getDynamicFiltersCompleted(), 1L);

        DynamicFilterDomainStats domainStats = getOnlyElement(dynamicFiltersStats.getDynamicFilterDomainStats());
        assertEquals(domainStats.getSimplifiedDomain(), none(BIGINT).toString(getSession().toConnectorSession()));
    }
",non-flaky,5
122570,vespa-engine_vespa,DiskSizeTest.bytes_to_display_count_test,"    @Test
    public void bytes_to_display_count_test() {
        assertEquals(""-1 bytes"", DiskSize.of(-1).asString());
        assertEquals(""123 bytes"", DiskSize.of(123).asString());
        assertEquals(""1 kB"", DiskSize.of(1_000).asString());
        assertEquals(""15 MB"", DiskSize.of(15_000_000).asString());
        assertEquals(""123 GB"", DiskSize.of(123_456_789_012L).asString());
        assertEquals(""988 TB"", DiskSize.of(987_654_321_098_765L).asString());
        assertEquals(""987.7 TB"", DiskSize.of(987_654_321_098_765L).asString(1));
        assertEquals(""987.65 TB"", DiskSize.of(987_654_321_098_765L).asString(2));
        assertEquals(""2 PB"", DiskSize.of(2_000_000_000_000_000L).asString());
        assertEquals(""9 EB"", DiskSize.of(Long.MAX_VALUE).asString());
    }
",non-flaky,5
33864,apache_camel,FhirCreateIT.testCreateStringResource,"    @Test
    public void testCreateStringResource() throws Exception {
        Patient patient = new Patient().addName(new HumanName().addGiven(""Vincent"").setFamily(""Freeman""));
        String patientString = this.fhirContext.newXmlParser().encodeResourceToString(patient);

        MethodOutcome result = requestBody(""direct://RESOURCE_STRING"", patientString);

        LOG.debug(""resource: "" + result);
        assertNotNull(result, ""resource result"");
        assertTrue(result.getCreated());
    }
",non-flaky,5
176819,ctco_cukes,WebCustomRequestMapperTest.snapshotNumberShouldBeLessThan10Digits,"    @Test
    public void snapshotNumberShouldBeLessThan10Digits() {
        FilterableRequestSpecification requestSpec = mock(FilterableRequestSpecification.class);
        when(requestSpec.getURI()).thenReturn(""http://www.google.com"");
        when(requestSpec.getHeaders()).thenReturn(new Headers());

        WebCustomRequest request = mapper.map(requestSpec);
        assertThat(request, hasProperty(""snapshot"", CustomMatchers.stringWithLength(lessThanOrEqualTo(15)))); //10 digits + t + .inf
    }
",non-flaky,5
162,wildfly_wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993.testLookupWitResolveResult,"@Test
public void testLookupWitResolveResult() throws Exception {
    namingStore.bind(new CompositeName(""test/nested""), ""test"");
    final Reference reference = new Reference(String.class.getName(), new StringRefAddr(""blahh"", ""test""), TestObjectFactoryWithNameResolution.class.getName(), null);
    namingStore.bind(new CompositeName(""comp""), reference);
    Object result = namingContext.lookup(new CompositeName(""comp/nested""));
    assertEquals(""test"", result);
    result = testActionPermission(JndiPermission.ACTION_LOOKUP, Arrays.asList(new JndiPermission(""test/nested"", ""lookup"")), namingContext, ""comp/nested"");
    assertEquals(""test"", result);
}",test order dependency,4
133960,CorfuDB_CorfuDB,SequencerHandlerTest.testStreamsAddressResponseEmptyAddressMap,"    @Test
    public void testStreamsAddressResponseEmptyAddressMap() {
        long defaultLogTail = 5L;
        long defaultEpoch = 10L;

        ResponseMsg response = getResponseMsg(
                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.CHECK),
                getStreamsAddressResponseMsg(defaultLogTail, defaultEpoch, Collections.emptyMap())
        );

        sequencerHandler.handleMessage(response, mockChannelHandlerContext);
        ArgumentCaptor<StreamsAddressResponse> captor = ArgumentCaptor.forClass(StreamsAddressResponse.class);
        // Verify that the correct request was completed (once) with the appropriate value,
        // and that we did not complete exceptionally.
        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));
        verify(mockClientRouter).completeRequest(eq(response.getHeader().getRequestId()), captor.capture());

        StreamsAddressResponse streamsAddressResponse = captor.getValue();
        assertTrue(streamsAddressResponse.getAddressMap().isEmpty());
        assertEquals(defaultLogTail, streamsAddressResponse.getLogTail());
        assertEquals(defaultEpoch, streamsAddressResponse.getEpoch());
    }
",non-flaky,5
179460,abel533_Mapper,FieldTest.test1,"    //    @Test
    public void test1() throws IntrospectionException {
        List<EntityField> fields = null;// = new ArrayList<EntityField>();
        processAllColumns(Country.class, fields, null);
        for (EntityField field : fields) {
            System.out.println(field.getName() + ""  -  @Id:"" + field.isAnnotationPresent(Id.class) + ""  -  javaType:"" + field.getJavaType());
        }
        System.out.println(""======================================"");

        fields = FieldHelper.getAll(Country.class);
        for (EntityField field : fields) {
            System.out.println(field.getName() + ""  -  @Id:"" + field.isAnnotationPresent(Id.class) + ""  -  javaType:"" + field.getJavaType());
        }
        System.out.println(""======================================"");
    }
",non-flaky,5
20995,NationalSecurityAgency_timely,DownsampleTest.testCombineTrivial,"    @Test
    public void testCombineTrivial() throws Exception {
        Downsample ds = new Downsample(0, 1000, 100, new Avg());
        for (int i = 0; i < 1000; i += 100) {
            ds.add(i, .2);
        }
        Downsample result = Downsample.combineDownsample(Collections.singleton(ds), null);
        int count = 0;
        for (Sample s : result) {
            assertEquals(.2, s.value, 0.0D);
            count++;
        }
        assertEquals(10, count);
    }
",non-flaky,5
20941,NationalSecurityAgency_timely,AuthenticationServiceTest.testX509AuthenticationLoginFailed,"    @Test(expected = UsernameNotFoundException.class)
    public void testX509AuthenticationLoginFailed() {
        PreAuthenticatedAuthenticationToken token = new PreAuthenticatedAuthenticationToken(""bad.example.com"",
                ""doesn't matter what I put here"");
        Authentication auth = AuthenticationService.getAuthenticationManager().authenticate(token);
        Collection<? extends GrantedAuthority> authorizations = auth.getAuthorities();
        authorizations.forEach(a -> {
            Assert.assertTrue(
                    a.getAuthority().equals(""D"") || a.getAuthority().equals(""E"") || a.getAuthority().equals(""F""));
        });
    }
",non-flaky,5
114086,aws_aws-sdk-java-v2,KeyTest.getSortKeyValue,"    @Test
    public void getSortKeyValue() {
        assertThat(key.sortKeyValue(), is(Optional.of(AttributeValue.builder().s(""id456"").build())));
    }
",non-flaky,5
289,opensearch-project_OpenSearch,testListenerFailures,"@Test
public void testListenerFailures() throws InterruptedException {
    int iters = iterations(10, 100);
    for (int i = 0; i < iters; i++) {
        try (TestIteration iteration = new TestIteration()) {
            iteration.transport.endConnectMode();
            final CountDownLatch latch = new CountDownLatch(1);
            final AtomicInteger finalFailures = new AtomicInteger();
            final AtomicReference<Throwable> finalFailure = new AtomicReference<>();
            final AtomicReference<TestResponse> response = new AtomicReference<>();
            ActionListener<TestResponse> actionListener = new ActionListener<TestResponse>();
            final AtomicInteger preSendFailures = new AtomicInteger();
            iteration.transportClientNodesService.execute((node, retryListener) -> {
                if (rarely()) {
                    preSendFailures.incrementAndGet();
                    throw new IllegalArgumentException();
                }
                iteration.transportService.sendRequest(node, ""action"", new TestRequest(),
                TransportRequestOptions.EMPTY, new TransportResponseHandler<TestResponse>() {
                }, actionListener);
                assertThat(latch.await(1, TimeUnit.SECONDS), equalTo(true));
                assertThat(preSendFailures.get() + iteration.transport.failures() + iteration.transport.successes(), lessThanOrEqualTo(1));
                if (iteration.transport.successes() == 1) {
                    assertThat(finalFailures.get(), equalTo(0));
                    assertThat(finalFailure.get(), nullValue());
                    assertThat(response.get(), notNullValue());
                } else {
                    assertThat(finalFailures.get(), equalTo(1));
                    assertThat(finalFailure.get(), notNullValue());
                    assertThat(response.get(), nullValue());
                    if (preSendFailures.get() == 0 && iteration.transport.failures() == 0) {
                        assertThat(finalFailure.get(), instanceOf(NoNodeAvailableException.class));
                    }
                }
                assertThat(iteration.transport.triedNodes().size(), lessThanOrEqualTo(iteration.listNodesCount));
                assertThat(iteration.transport.triedNodes().size(), equalTo(iteration.transport.connectTransportExceptions() + iteration.transport.failures() + iteration.transport.successes()));
            });
        }
    }
}",async wait,0
89373,apache_samza,TestKafkaCheckpointManager.testReadMultipleCheckpointsUpgradeCheckpointVersion,"  @Test
  public void testReadMultipleCheckpointsUpgradeCheckpointVersion() throws InterruptedException {
    Config config = config(ImmutableMap.of(TaskConfig.CHECKPOINT_READ_VERSIONS, ""2,1""));
    setupSystemFactory(config);
    KafkaCheckpointManager kafkaCheckpointManager = buildKafkaCheckpointManager(true, config);
    kafkaCheckpointManager.register(TASK0);
    kafkaCheckpointManager.register(TASK1);

    List<IncomingMessageEnvelope> checkpointEnvelopesV1 =
        ImmutableList.of(newCheckpointV1Envelope(TASK0, buildCheckpointV1(INPUT_SSP0, ""0""), ""0""),
            newCheckpointV1Envelope(TASK1, buildCheckpointV1(INPUT_SSP1, ""0""), ""1""));
    CheckpointV2 ssp0CheckpointV2 = buildCheckpointV2(INPUT_SSP0, ""10"");
    CheckpointV2 ssp1CheckpointV2 = buildCheckpointV2(INPUT_SSP1, ""11"");
    List<IncomingMessageEnvelope> checkpointEnvelopesV2 =
        ImmutableList.of(newCheckpointV2Envelope(TASK0, ssp0CheckpointV2, ""2""),
            newCheckpointV2Envelope(TASK1, ssp1CheckpointV2, ""3""));
    setupConsumerMultiplePoll(ImmutableList.of(checkpointEnvelopesV1, checkpointEnvelopesV2));
    assertEquals(ssp0CheckpointV2, kafkaCheckpointManager.readLastCheckpoint(TASK0));
    assertEquals(ssp1CheckpointV2, kafkaCheckpointManager.readLastCheckpoint(TASK1));
    // 2 polls for actual checkpoints, 1 final empty poll
    verify(this.systemConsumer, times(3)).poll(ImmutableSet.of(CHECKPOINT_SSP),
        SystemConsumer.BLOCK_ON_OUTSTANDING_MESSAGES);
  }
",non-flaky,5
112734,hwang-pku_ormlite-core,DatabaseConnectionProxyTest.testCompileStatementStringStatementTypeFieldTypeArrayIntNull,"	@Test
	public void testCompileStatementStringStatementTypeFieldTypeArrayIntNull() throws Exception {
		DatabaseConnectionProxy proxy = new DatabaseConnectionProxy(null);
		assertNull(proxy.compileStatement(""statment"", StatementType.DELETE, null, 0, false));
		proxy.close();
	}
",non-flaky,5
98235,apache_jackrabbit,PerformanceTest.testPerformance,"    @Test
    public void testPerformance() throws Exception {
        testPerformance(""1.5"");
    }
",non-flaky,5
114028,apache_struts,JSONInterceptorTest.testSMDDisabledSMD,"            // @Test(expected = JSONException.class)
    public void testSMDDisabledSMD() throws Exception {
        // request
        setRequestContent(""smd-3.txt"");
        this.request.addHeader(""Content-Type"", ""application/json-rpc"");

        JSONInterceptor interceptor = new JSONInterceptor();
        JSONUtil jsonUtil = new JSONUtil();
        jsonUtil.setWriter(new DefaultJSONWriter());
        interceptor.setJsonUtil(jsonUtil);
        SMDActionTest1 action = new SMDActionTest1();

        this.invocation.setAction(action);

        // SMD was not enabled so invocation must happen
        try {
            interceptor.intercept(this.invocation);
        } catch (JSONException e) {
            fail(""Should have not thrown an exception"");
        }

    }
",non-flaky,5
179451,abel533_Mapper,IdListMapperTest.testSelectByEmptyIdList,"    @Test
    public void testSelectByEmptyIdList() {
        SqlSession sqlSession = getSqlSession();
        try {
            CountryMapper mapper = sqlSession.getMapper(CountryMapper.class);
            Assert.assertEquals(183, mapper.selectByIdList(new ArrayList<Long>()).size());
        } finally {
            sqlSession.close();
        }
    }
",non-flaky,5
170467,eclipse_jetty.project,PojoTest.testOpenPojo,"    @Test
    public void testOpenPojo()
    {
        Validator validator = ValidatorBuilder.create().with(new SetterTester()).with(new GetterTester()).build();
        List<Class> classes = Arrays.asList(MBeanContainer.class, ObjectMBean.class);
        for (Class clazz : classes)
        {
            validator.validate(PojoClassFactory.getPojoClass(clazz));
        }
    }
",non-flaky,5
33929,apache_camel,CordaConsumerStartTrackedFlowDynamicIT.startTrackedFlowDynamicTest,"    @Test
    public void startTrackedFlowDynamicTest() throws Exception {
        //Expects CamelFlow is deployed on the node
        mockResult.expectedMinimumMessageCount(1);
        mockError.expectedMessageCount(0);
        MockEndpoint.assertIsSatisfied(context);
        assertEquals(""Hello world!"", mockResult.getExchanges().get(0).getIn().getBody());
    }
",non-flaky,5
33913,apache_camel,GridFsConsumerIT.testAttribute,"    @Test
    public void testAttribute() throws Exception {
        runTest(""direct:create-a"", GridFSBuckets.create(mongo.getDatabase(""test""), getBucket() + ""-a""));
    }
",non-flaky,5
134015,CorfuDB_CorfuDB,LoggingMeterRegistryTest.testWriteSummary,"    @Test
    public void testWriteSummary() {
        LoggingMeterRegistryWithHistogramSupport registry = getInstance();
        TestSummary summary = new TestSummary();
        String line = registry.writeSummary(summary).findFirst().orElseThrow(IllegalArgumentException::new);
        assertTrue(line.contains(""metric,endpoint=localhost:9000,metric_type=summary sum=200,count=100,mean=2,upper=300""));
    }
",non-flaky,5
110151,Wikidata_wikidata-toolkit,NestedIteratorTest.testIteration,"	@Test
	public void testIteration() {
		List<String> list1 = new ArrayList<String>();
		list1.add(""1"");
		list1.add(""2"");
		List<String> list2 = new ArrayList<String>();
		list2.add(""3"");
		List<String> list3 = new ArrayList<String>();
		List<String> list4 = new ArrayList<String>();
		list4.add(""4"");

		List<List<String>> listOfLists = new ArrayList<>();
		listOfLists.add(list1);
		listOfLists.add(list2);
		listOfLists.add(list3);
		listOfLists.add(list4);

		NestedIterator<String> nestedIterator = new NestedIterator<>(
				listOfLists);

		assertTrue(nestedIterator.hasNext());
		assertEquals(""1"", nestedIterator.next());
		assertTrue(nestedIterator.hasNext());
		assertEquals(""2"", nestedIterator.next());
		assertTrue(nestedIterator.hasNext());
		assertEquals(""3"", nestedIterator.next());
		assertTrue(nestedIterator.hasNext());
		assertEquals(""4"", nestedIterator.next());
		assertEquals(false, nestedIterator.hasNext());
	}
",non-flaky,5
162692,OpenAPITools_openapi-generator,TypeHolderDefaultTest.arrayItemTest,"    @Test
    public void arrayItemTest() {
        // TODO: test arrayItem
    }
",non-flaky,5
98666,nutzam_nutz,BaseTest.test_servlet_obj,"    @Test
    public void test_servlet_obj() {
        get(""/common/servlet_obj"");
        assertEquals(200, resp.getStatus());
    }
",non-flaky,5
179468,abel533_Mapper,DateTimeTest.testSelect2,"    @Test
    public void testSelect2() {
        SqlSession sqlSession = getSqlSession();
        try {
            TimeModel2Mapper mapper = sqlSession.getMapper(TimeModel2Mapper.class);
            List<TimeModel2> list = mapper.selectAll();
            Assert.assertEquals(2, list.size());

            Assert.assertEquals(""2018-01-01"", toDate(list.get(0).getTestDate()));
            Assert.assertEquals(""12:11:00"", toTime(list.get(0).getTestTime()));
            Assert.assertEquals(""2018-01-01 12:00:00"", toDatetime(list.get(0).getTestDatetime()));

            Assert.assertEquals(""2018-11-11"", toDate(list.get(1).getTestDate()));
            Assert.assertEquals(""01:59:11"", toTime(list.get(1).getTestTime()));
            Assert.assertEquals(""2018-02-12 17:58:12"", toDatetime(list.get(1).getTestDatetime()));
        } finally {
            sqlSession.close();
        }
    }
",non-flaky,5
112761,hwang-pku_ormlite-core,RawResultsImplTest.testHaving,"	@Test
	public void testHaving() throws Exception {
		Dao<Foo, Integer> dao = createDao(Foo.class, true);

		Foo foo = new Foo();
		int val1 = 243342;
		foo.val = val1;
		assertEquals(1, dao.create(foo));
		foo = new Foo();
		foo.val = val1;
		assertEquals(1, dao.create(foo));
		foo = new Foo();
		// only one of these
		int val2 = 6543;
		foo.val = val2;
		assertEquals(1, dao.create(foo));

		QueryBuilder<Foo, Integer> qb = dao.queryBuilder();
		qb.selectColumns(Foo.VAL_COLUMN_NAME);
		qb.groupBy(Foo.VAL_COLUMN_NAME);
		qb.having(""COUNT(VAL) > 1"");
		GenericRawResults<String[]> results = dao.queryRaw(qb.prepareStatementString());
		List<String[]> list = results.getResults();
		// only val2 has 2 of them
		assertEquals(1, list.size());
		assertEquals(String.valueOf(val1), list.get(0)[0]);

		qb.having(""COUNT(VAL) > 2"");
		results = dao.queryRaw(qb.prepareStatementString());
		list = results.getResults();
		assertEquals(0, list.size());
	}
",non-flaky,5
177191,line_armeria,RequestContextCurrentTraceContextTest.newScope_respondsToPing,"    @Test
    public void newScope_respondsToPing() {
        final PingPongExtra extra = new PingPongExtra();
        final TraceContext extraContext = TraceContext.newBuilder().traceId(1).spanId(1)
                                                      .addExtra(extra).build();

        try (Scope traceContextScope = currentTraceContext.newScope(extraContext)) {
            assertThat(traceContextScope).hasToString(""NoopScope"");
            assertThat(extra.isPong()).isTrue();
        }
    }
",non-flaky,5
156051,jReddit_jReddit,JsonUtilsTest.testSafeJsonToString,"    @Test
    public void testSafeJsonToString() {
        Assert.assertNull(JsonUtils.safeJsonToString(null));
        Assert.assertEquals(""123"", JsonUtils.safeJsonToString(123));
        Assert.assertEquals(""abcd"", JsonUtils.safeJsonToString(""abcd""));
        Assert.assertEquals("""", JsonUtils.safeJsonToString(""""));
    }
",non-flaky,5
98012,vert-x3_vertx-mongo-client,MongoClientWithObjectIdTest.testFindOneReturnsNothing,"  @Test
  public void testFindOneReturnsNothing() throws Exception {
    String collection = randomCollection();
    mongoClient.createCollection(collection, onSuccess(res -> {
      JsonObject orig = createDoc();
      JsonObject doc = orig.copy();
      mongoClient.insert(collection, doc, onSuccess(id -> {
        assertNotNull(id);
        mongoClient.findOne(collection, new JsonObject().put(""nothing"", ""xxrandomxx""), null, onSuccess(obj -> {
          assertNull(obj);
          testComplete();
        }));
      }));
    }));
    await();
  }
",non-flaky,5
20949,NationalSecurityAgency_timely,RateIteratorTest.testCounterRate,"    @Test
    public void testCounterRate() throws Exception {
        table.clear();
        long ts = System.currentTimeMillis();
        for (int j = 0; j < 10; j++) {
            for (int i = 1; i <= 10; i++) {
                ts += 1000;
                Metric m = new Metric(""sys.cpu.user"", ts, i * 1.0D, tags);
                byte[] row = MetricAdapter.encodeRowKey(m);
                Key k = new Key(row, tags.get(0).join().getBytes(StandardCharsets.UTF_8),
                        MetricAdapter.encodeColQual(ts, """"), new byte[0], ts);
                Value v = new Value(MetricAdapter.encodeValue(m.getValue().getMeasure()));
                table.put(k, v);
            }
        }

        SortedMapIterator source = new SortedMapIterator(table);
        RateIterator iter = new RateIterator();
        IteratorSetting settings = new IteratorSetting(100, RateIterator.class);

        QueryRequest.RateOption option = new QueryRequest.RateOption();
        option.setCounter(true);
        option.setCounterMax(0);
        RateIterator.setRateOptions(settings, option);

        iter.init(source, settings.getOptions(), SCAN_IE);
        iter.seek(new Range(), EMPTY_COL_FAMS, true);
        for (int i = 0; i < 99; i++) {
            assertTrue(iter.hasTop());
            assertEquals(0.001D, MetricAdapter.decodeValue(iter.getTopValue().get()), 0.0D);
            iter.next();
        }
        assertFalse(iter.hasTop());
    }
",non-flaky,5
62,wildfly_wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993.testJavaContext,"@Test
public void testJavaContext() throws Exception {
    System.setProperty(Context.INITIAL_CONTEXT_FACTORY, InitialContextFactory.class.getName());
    System.setProperty(Context.URL_PKG_PREFIXES, ""org.jboss.as.naming.interfaces"");
    InitialContext initialContext = new InitialContext();
    Context context = (Context) initialContext.lookup(""java:"");
    assertTrue(context instanceof NamingContext);
}",test order dependency,4
76749,quarkusio_quarkus,CreateProjectMojoIT.testGradleProjectGenerationWithExistingGradleFileShouldFail,"    @Test
    public void testGradleProjectGenerationWithExistingGradleFileShouldFail() throws Exception {
        testDir = initProject(""projects/parent-gradle-it"", ""projects/gradle-project-generation-from-parent-gradle"");
        assertThat(testDir).isDirectory();
        invoker = initInvoker(testDir);
        Properties properties = new Properties();
        properties.put(""projectGroupId"", ""org.acme"");
        properties.put(""projectArtifactId"", ""acme"");
        properties.put(""className"", ""org.acme.MyResource"");
        properties.put(""buildTool"", ""gradle"");
        InvocationResult result = setup(properties);

        assertThat(result.getExitCode()).isOne();
    }
",non-flaky,5
160433,ConsenSys_teku,StateSelectorFactoryTest.genesisSelector_shouldGetStateAtSlotExact,"  @Test
  public void genesisSelector_shouldGetStateAtSlotExact()
      throws ExecutionException, InterruptedException {
    when(client.getStateAtSlotExact(ZERO))
        .thenReturn(SafeFuture.completedFuture(Optional.of(state)));
    Optional<BeaconState> result = factory.genesisSelector().getState().get();
    assertThat(result).isEqualTo(Optional.of(state));
    verify(client).getStateAtSlotExact(ZERO);
  }
",non-flaky,5
77687,pholser_junit-quickcheck,PrimitivePropertyParameterTypesTest.shouldHold,"    @Test public void rangedWrapperByte() {
        @Property public void shouldHold(@InRange(min = ""-3"", max = ""2"") Byte b) {
            assertThat(b, allOf(greaterThanOrEqualTo((byte) -3), lessThanOrEqualTo((byte) 2)));
        }
",non-flaky,5
112686,hwang-pku_ormlite-core,BaseDaoEnabledTest.testObjectEqualsNoDao,"	@Test(expected = IllegalArgumentException.class)
	public void testObjectEqualsNoDao() {
		One one = new One();
		String stuff1 = ""fewpfjewfew"";
		one.stuff = stuff1;
		one.objectToString();
	}
",non-flaky,5
112663,tbsalling_aismessages,LongRangeBroadcastMessageTest.canDecode2,"    @Test
    public void canDecode2() {
        AISMessage aisMessage = AISMessage.create(NMEAMessage.fromString(""!AIVDM,1,1,,B,K5DfMB9FLsM?P00d,0*70""));

        System.out.println(aisMessage.toString());

        assertEquals(AISMessageType.LongRangeBroadcastMessage, aisMessage.getMessageType());
        assertEquals((Integer) 0, aisMessage.getRepeatIndicator());
        assertEquals(MMSI.valueOf(357277000), aisMessage.getSourceMmsi());

        LongRangeBroadcastMessage message = (LongRangeBroadcastMessage) aisMessage;
        assertTrue(message.getPositionAccuracy());
        assertFalse(message.getRaim());
        assertEquals(NavigationStatus.Moored, message.getNavigationalStatus());
        assertEquals(Float.valueOf(176.18167f), message.getLongitude());
        assertEquals(Float.valueOf(-37.65333f), message.getLatitude());
        assertEquals(Float.valueOf(0f), message.getSpeedOverGround(), 1e-5);
        assertEquals((Integer)0, message.getRawSpeedOverGround());
        assertEquals(Float.valueOf(11f), message.getCourseOverGround(), 1e-5);
        assertEquals((Integer)11, message.getRawCourseOverGround());
    }
",non-flaky,5
178031,aosp-mirror_platform_frameworks_support,GuidedDatePickerTest.testFebruaryToMarchTransitionForLeapYear,"    @Test
    public void testFebruaryToMarchTransitionForLeapYear() throws Throwable {
        long startTime = System.currentTimeMillis();
        Intent intent = new Intent();

        String title = ""Date Picker Transition Test"";
        String breadcrumb = ""Month Transition Test Demo"";
        String description = ""Testing the transition from Feb to Mar (leap year)"";
        GuidanceStylist.Guidance guidance = new GuidanceStylist.Guidance(title, description,
                breadcrumb, null);

        List<GuidedAction> actionList = new ArrayList<>();

        Calendar cal = Calendar.getInstance();

        cal.set(Calendar.YEAR, 2016);
        cal.set(Calendar.MONTH, Calendar.FEBRUARY);
        cal.set(Calendar.DAY_OF_MONTH, cal.getActualMaximum(Calendar.DAY_OF_MONTH));
        Date initialDate = cal.getTime();

        GuidedDatePickerAction action = new GuidedDatePickerAction.Builder(
                mContext)
                .id(0)
                .title(""Date"")
                .date(initialDate.getTime())
                .datePickerFormat(""DMY"")
                .build();

        actionList.add(action);

        GuidedStepAttributesTestFragment.clear();
        GuidedStepAttributesTestFragment.GUIDANCE = guidance;
        GuidedStepAttributesTestFragment.ACTION_LIST = actionList;

        initActivity(intent);

        DatePicker mPickerView = (DatePicker) mActivity.findViewById(
                R.id.guidedactions_activator_item);

        verticalScrollToFieldValue(Calendar.MONTH, Calendar.MARCH, new int[] {0, 1, 2},
                mPickerView, KeyEvent.KEYCODE_DPAD_DOWN);
        long executionTime = System.currentTimeMillis() - startTime;
        Log.d(TAG, ""testFebruaryToMarchTransition() Execution time: "" + executionTime);
        Thread.sleep(FINAL_WAIT);
    }
",non-flaky,5
76958,Tencent_Firestorm,RssConfTest.testOptionWithDefault,"    @Test
    public void testOptionWithDefault() {
        RssConf cfg = new RssConf();
        cfg.setInteger(""int-key"", 11);
        cfg.setString(""string-key"", ""abc"");

        ConfigOption<String> presentStringOption = ConfigOptions
                .key(""string-key"")
                .stringType()
                .defaultValue(""my-beautiful-default"");
        ConfigOption<Integer> presentIntOption = ConfigOptions
                .key(""int-key"")
                .intType()
                .defaultValue(87);

        assertEquals(""abc"", cfg.getString(presentStringOption));
        assertEquals(""abc"", cfg.getValue(presentStringOption));

        assertEquals(11, cfg.getInteger(presentIntOption));
        assertEquals(""11"", cfg.getValue(presentIntOption));
    }
",non-flaky,5
78289,apache_beam,TimerInternalsTest.testCompareByTimerId,"  @Test
  public void testCompareByTimerId() {
    Instant timestamp = new Instant(100);
    StateNamespace namespace = StateNamespaces.global();

    TimerData id0Timer = TimerData.of(""id0"", namespace, timestamp, TimeDomain.EVENT_TIME);
    TimerData id1Timer = TimerData.of(""id1"", namespace, timestamp, TimeDomain.EVENT_TIME);

    assertThat(id0Timer, lessThan(id1Timer));
  }
",non-flaky,5
89308,apache_samza,TestKafkaSystemAdminWithMock.testGetSystemStreamMetaDataWithNoTopic,"  @Test
  public void testGetSystemStreamMetaDataWithNoTopic() {
    Map<String, SystemStreamMetadata> metadataMap = kafkaSystemAdmin.getSystemStreamMetadata(Collections.emptySet());
    assertEquals(""empty metadata for no topic"", metadataMap.size(), 0);
  }
",non-flaky,5
95652,togglz_togglz,ShiroUsersTest.testShiroWithCorrectUser,"    @Test
    public void testShiroWithCorrectUser() throws Exception {

        WebClient client = new WebClient();

        TextPage beforeLogin = client.getPage(url + ""features"");
        assertTrue(beforeLogin.getContent().contains(""DISABLED = false""));
        assertTrue(beforeLogin.getContent().contains(""ENABLED_FOR_ALL = true""));
        assertTrue(beforeLogin.getContent().contains(""ENABLED_FOR_CK = false""));

        TextPage loginPage = client.getPage(url + ""login?user=ck"");
        assertTrue(loginPage.getContent().contains(""SUCCESS""));

        TextPage afterLogin = client.getPage(url + ""features"");
        assertTrue(afterLogin.getContent().contains(""DISABLED = false""));
        assertTrue(afterLogin.getContent().contains(""ENABLED_FOR_ALL = true""));
        assertTrue(afterLogin.getContent().contains(""ENABLED_FOR_CK = true""));

        TextPage logoutPage = client.getPage(url + ""logout"");
        assertTrue(logoutPage.getContent().contains(""SUCCESS""));

        TextPage afterLogout = client.getPage(url + ""features"");
        assertTrue(afterLogout.getContent().contains(""DISABLED = false""));
        assertTrue(afterLogout.getContent().contains(""ENABLED_FOR_ALL = true""));
        assertTrue(afterLogout.getContent().contains(""ENABLED_FOR_CK = false""));

    }
",non-flaky,5
33925,apache_camel,CordaConsumerVaultTrackByCriteriaIT.vaultTrackByCriteriaTest,"    @Test
    public void vaultTrackByCriteriaTest() throws Exception {
        mockResult.expectedMinimumMessageCount(1);
        mockError.expectedMessageCount(0);
        MockEndpoint.assertIsSatisfied(context);
    }
",non-flaky,5
33863,apache_camel,FhirCreateIT.testCreateResource,"    @Test
    public void testCreateResource() throws Exception {
        Patient patient = new Patient().addName(new HumanName().addGiven(""Vincent"").setFamily(""Freeman""));

        MethodOutcome result = requestBody(""direct://RESOURCE"", patient);

        LOG.debug(""resource: "" + result);
        assertNotNull(result, ""resource result"");
        assertTrue(result.getCreated());
    }
",non-flaky,5
53195,cloudfoundry_uaa,TotpMfaEndpointIntegrationTests.testQRCodeScreenAfterRegistrationDeletion,"    @Test
    public void testQRCodeScreenAfterRegistrationDeletion() throws Exception {
        // register mfa for user and logout
        testQRCodeScreen();
        webDriver.get(zoneUrl + ""/logout.do"");

        // retrieve user id and delete mfa registration
        RestTemplate client = getRestTemplate();
        HttpHeaders headers = new HttpHeaders();
        headers.add(""Authorization"", ""Bearer "" + zoneAdminToken);
        headers.add(""X-Identity-Zone-Id"", mfaZone.getId());
        headers.add(""Content-Type"", ""application/json"");
        Map<String, String> uriParams = new HashMap<>();
        uriParams.put(""filter"",""userName eq \""""+username+""\"""");
        ResponseEntity<Map> exchange = client.exchange(serverRunning.getUrl(""/Users?attributes=id&filter={filter}""), HttpMethod.GET, new HttpEntity<Void>(
            headers), Map.class, uriParams);
        String userId = (String) ((Map)((java.util.List) exchange.getBody().get(""resources"")).get(0)).get(""id"");

        client.exchange(serverRunning.getUrl(""/Users/{userId}/mfa""), HttpMethod.DELETE, new HttpEntity<Void>(
            headers), Map.class, userId);

        // user login should end up at mfa registration page
        performLogin(username);
        assertEquals(zoneUrl + ""/login/mfa/register"", webDriver.getCurrentUrl());
    }
",non-flaky,5
98044,vert-x3_vertx-mongo-client,RefCountTest.testNonShared,"  @Test
  public void testNonShared() {
    LocalMap<String, Object> map = getLocalMap();
    JsonObject config = getConfig();
    MongoClient client1 = MongoClient.create(vertx, config);
    assertEquals(1, map.size());
    MongoClient client2 = MongoClient.create(vertx, config);
    assertEquals(2, map.size());
    MongoClient client3 = MongoClient.create(vertx, config);
    assertEquals(3, map.size());
    client1.close();
    assertEquals(2, map.size());
    client2.close();
    assertEquals(1, map.size());
    client3.close();
    assertWaitUntil(() -> map.size() == 0);
    assertWaitUntil(() -> getLocalMap().size() == 0);
    assertWaitUntil(() -> map != getLocalMap()); // Map has been closed
  }
",non-flaky,5
33893,apache_camel,FhirReadIT.testResourceByIdAndStringResource,"    @Test
    public void testResourceByIdAndStringResource() throws Exception {
        final Map<String, Object> headers = new HashMap<>();
        // parameter type is Class
        headers.put(""CamelFhir.resourceClass"", ""Patient"");
        // parameter type is org.hl7.fhir.instance.model.api.IIdType
        headers.put(""CamelFhir.id"", patient.getIdElement());

        Patient result = requestBodyAndHeaders(""direct://RESOURCE_BY_ID_AND_STRING_RESOURCE"", null, headers);

        assertValidResponse(result);
    }
",non-flaky,5
94768,ktuukkan_marine-api,AISMessage24ParserTest.getTypeOfShipAndCargoType,"    @Test
    public void getTypeOfShipAndCargoType() throws Exception {
        assertEquals(36, partB.getTypeOfShipAndCargoType());
    }
",non-flaky,5
95706,togglz_togglz,PropertyFeatureProviderTest.canInitializeFromProperties,"    @Test
    public void canInitializeFromProperties() {

        Properties properties = new Properties();
        properties.setProperty(""ID_1"", ""ID 1;true;Group 1,Group Other"");
        properties.setProperty(""ID_2"", ""ID 2;false;Group 2"");

        PropertyFeatureProvider provider = new PropertyFeatureProvider(properties);

        Set<Feature> features = provider.getFeatures();

        assertThat(features)
            .hasSize(2)
            .areExactly(1, featureNamed(""ID_1""))
            .areExactly(1, featureNamed(""ID_2""));

        FeatureMetaData metadata1 = provider.getMetaData(new NamedFeature(""ID_1""));
        assertThat(metadata1).isNotNull();
        assertThat(metadata1.getLabel()).isEqualTo(""ID 1"");
        FeatureState defaultFeatureState1 = metadata1.getDefaultFeatureState();
        assertThat(defaultFeatureState1.isEnabled()).isTrue();
        assertThat(metadata1.getGroups())
            .hasSize(2)
            .areExactly(1, groupNamed(""Group 1""))
            .areExactly(1, groupNamed(""Group Other""));

        FeatureMetaData metadata2 = provider.getMetaData(new NamedFeature(""ID_2""));
        assertThat(metadata2).isNotNull();
        assertThat(metadata2.getLabel()).isEqualTo(""ID 2"");
        FeatureState defaultFeatureState2 = metadata2.getDefaultFeatureState();
        assertThat(defaultFeatureState2.isEnabled()).isFalse();
        assertThat(metadata2.getGroups())
            .hasSize(1)
            .areExactly(1, groupNamed(""Group 2""));

    }
",non-flaky,5
97730,vojtechhabarta_typescript-generator,OptionalAnnotationTest.testJackson2OptionalAnnotation,"    @Test
    public void testJackson2OptionalAnnotation() {
        Settings settings = new Settings();
        settings.optionalAnnotations.add(Nullable.class);
        ModelParser parser = new Jackson2Parser(settings, new DefaultTypeProcessor());
        testModel(parser.parseModel(Jackson2Bean.class), true);
    }
",non-flaky,5
162715,OpenAPITools_openapi-generator,XmlItemTest.nameWrappedArrayTest,"    @Test
    public void nameWrappedArrayTest() {
        // TODO: test nameWrappedArray
    }
",non-flaky,5
162430,testcontainers_testcontainers-java,GenericContainerRuleTest.customClasspathResourceMappingWithSelinuxTest,"    @Test
    public void customClasspathResourceMappingWithSelinuxTest() throws IOException {
        String line = getReaderForContainerPort80(alpineClasspathResourceSelinux).readLine();
        assertEquals(""Resource on the classpath can be mapped using calls to withClasspathResourceMappingSelinux"", ""FOOBAR"", line);
    }
",non-flaky,5
78322,apache_beam,ReduceFnRunnerTest.testOnlyOneOnTimePane,"  @Test
  public void testOnlyOneOnTimePane() throws Exception {
    WindowingStrategy<?, IntervalWindow> strategy =
        WindowingStrategy.of((WindowFn<?, IntervalWindow>) FixedWindows.of(Duration.millis(10)))
            .withTrigger(DefaultTrigger.of())
            .withMode(AccumulationMode.ACCUMULATING_FIRED_PANES)
            .withAllowedLateness(Duration.millis(100));

    ReduceFnTester<Integer, Integer, IntervalWindow> tester =
        ReduceFnTester.combining(strategy, Sum.ofIntegers(), VarIntCoder.of());

    tester.advanceInputWatermark(new Instant(0));

    int value1 = 1;
    int value2 = 3;

    // A single element that should be in the ON_TIME output
    tester.injectElements(TimestampedValue.of(value1, new Instant(1)));

    // Should fire ON_TIME
    tester.advanceInputWatermark(new Instant(10));

    // The DefaultTrigger should cause output labeled LATE, even though it does not have to be
    // labeled as such.
    tester.injectElements(TimestampedValue.of(value2, new Instant(3)));

    List<WindowedValue<Integer>> output = tester.extractOutput();
    assertEquals(2, output.size());

    assertThat(output.get(0), isWindowedValue(equalTo(value1)));
    assertThat(output.get(1), isWindowedValue(equalTo(value1 + value2)));

    assertThat(
        output.get(0),
        WindowMatchers.valueWithPaneInfo(PaneInfo.createPane(true, false, Timing.ON_TIME, 0, 0)));
    assertThat(
        output.get(1),
        WindowMatchers.valueWithPaneInfo(PaneInfo.createPane(false, false, Timing.LATE, 1, 1)));
  }
",non-flaky,5
89341,apache_samza,TestKafkaSystemAdminJava.testStartpointTimestampVisitorShouldResolveToCorrectOffsetWhenTimestampDoesNotExist,"  @Test
  public void testStartpointTimestampVisitorShouldResolveToCorrectOffsetWhenTimestampDoesNotExist() {
    final KafkaConsumer consumer = Mockito.mock(KafkaConsumer.class);
    final KafkaStartpointToOffsetResolver kafkaStartpointToOffsetResolver = new KafkaStartpointToOffsetResolver(consumer);

    final StartpointTimestamp startpointTimestamp = new StartpointTimestamp(0L);
    final Map<TopicPartition, OffsetAndTimestamp> offsetForTimesResult = new HashMap<>();
    offsetForTimesResult.put(TEST_TOPIC_PARTITION, null);

    // Mock the consumer interactions.
    Mockito.when(consumer.offsetsForTimes(ImmutableMap.of(TEST_TOPIC_PARTITION, 0L))).thenReturn(offsetForTimesResult);
    Mockito.when(consumer.endOffsets(ImmutableSet.of(TEST_TOPIC_PARTITION))).thenReturn(ImmutableMap.of(TEST_TOPIC_PARTITION, 10L));

    String resolvedOffset = kafkaStartpointToOffsetResolver.visit(TEST_SYSTEM_STREAM_PARTITION, startpointTimestamp);
    Assert.assertEquals(TEST_OFFSET, resolvedOffset);

    // Mock verifications.
    Mockito.verify(consumer).offsetsForTimes(ImmutableMap.of(TEST_TOPIC_PARTITION, 0L));
  }
",non-flaky,5
53171,cloudfoundry_uaa,ScimGroupTests.testDropOneMembers,"    @Test
    public void testDropOneMembers(){
        group.setMembers(Arrays.asList(member1, member2, member3));
        ScimGroupMember member = new ScimGroupMember(member1.getMemberId());
        member.setOperation(""DELETE"");
        patch.setMembers(Arrays.asList(
            member
        ));
        group.patch(patch);
        assertEquals(2, group.getMembers().size());
    }
",non-flaky,5
135780,Netflix_Hystrix,CollapsedRequestSubjectTest.testSetExceptionAfterResponse,"    @Test
    public void testSetExceptionAfterResponse() throws InterruptedException, ExecutionException {
        CollapsedRequestSubject<String, String> cr = new CollapsedRequestSubject<String, String>(""hello"");
        Observable<String> o = cr.toObservable();
        Future<String> v = o.toBlocking().toFuture();

        cr.setResponse(""theResponse"");

        try {
            cr.setException(new RuntimeException(""anException""));
            fail(""expected IllegalState"");
        } catch (IllegalStateException e) {

        }

        assertEquals(""theResponse"", v.get());
    }
",non-flaky,5
43089,trinodb_trino,AbstractTestIntegrationSmokeTest.testIsNullPredicate,"    @Test
    public void testIsNullPredicate()
    {
        assertQueryReturnsEmptyResult(""SELECT * FROM orders WHERE orderkey IS NULL"");
        assertQueryReturnsEmptyResult(""SELECT * FROM orders WHERE orderkey = 10 OR orderkey IS NULL"");

        // filtered column is selected
        assertQuery(""SELECT custkey, orderkey FROM orders WHERE orderkey = 32 OR orderkey IS NULL"", ""VALUES (1301, 32)"");

        // filtered column is not selected
        assertQuery(""SELECT custkey FROM orders WHERE orderkey = 32 OR orderkey IS NULL"", ""VALUES (1301)"");
    }
",non-flaky,5
177985,aosp-mirror_platform_frameworks_support,CustomTabsIntentTest.testBareboneCustomTabIntent,"    @Test
    public void testBareboneCustomTabIntent() {
        CustomTabsIntent customTabsIntent = new CustomTabsIntent.Builder().build();
        Intent intent = customTabsIntent.intent;
        assertNotNull(intent);
        assertNull(customTabsIntent.startAnimationBundle);

        assertEquals(Intent.ACTION_VIEW, intent.getAction());
        assertTrue(intent.hasExtra(CustomTabsIntent.EXTRA_SESSION));
        if (Build.VERSION.SDK_INT >= 18) {
            assertNull(intent.getExtras().getBinder(CustomTabsIntent.EXTRA_SESSION));
        }
        assertNull(intent.getComponent());
    }
",non-flaky,5
113735,salesforce_reactive-grpc,ReactiveClientStandardServerInteropTest.oneToOne,"    @Test
    public void oneToOne() {
        ReactorGreeterGrpc.ReactorGreeterStub stub = ReactorGreeterGrpc.newReactorStub(channel);
        Mono<String> reactorRequest = Mono.just(""World"");
        Mono<String> reactorResponse = reactorRequest.map(this::toRequest).compose(stub::sayHello).map(this::fromResponse);

        StepVerifier.create(reactorResponse)
                .expectNext(""Hello World"")
                .verifyComplete();
    }
",non-flaky,5
38272,palantir_atlasdb,AbstractTransactionTest.testBigValue,"    @Test
    public void testBigValue() {
        byte[] bytes = new byte[64*1024];
        new Random().nextBytes(bytes);
        String encodeHexString = BaseEncoding.base16().lowerCase().encode(bytes);
        putDirect(""row1"", ""col1"", encodeHexString, 0);
        Pair<String, Long> pair = getDirect(""row1"", ""col1"", 1);
        Assert.assertEquals(0L, (long)pair.getRhSide());
        assertEquals(encodeHexString, pair.getLhSide());
    }
",non-flaky,5
60863,apache_druid,DistinctCountTimeseriesQueryTest.testTimeseriesWithDistinctCountAgg,"  @Test
  public void testTimeseriesWithDistinctCountAgg() throws Exception
  {
    TimeseriesQueryEngine engine = new TimeseriesQueryEngine();

    IncrementalIndex index = new OnheapIncrementalIndex.Builder()
        .setIndexSchema(
            new IncrementalIndexSchema.Builder()
                .withQueryGranularity(Granularities.SECOND)
                .withMetrics(new CountAggregatorFactory(""cnt""))
                .build()
        )
        .setMaxRowCount(1000)
        .build();

    String visitor_id = ""visitor_id"";
    String client_type = ""client_type"";
    DateTime time = DateTimes.of(""2016-03-04T00:00:00.000Z"");
    long timestamp = time.getMillis();
    index.add(
        new MapBasedInputRow(
            timestamp,
            Lists.newArrayList(visitor_id, client_type),
            ImmutableMap.of(visitor_id, ""0"", client_type, ""iphone"")
        )
    );
    index.add(
        new MapBasedInputRow(
            timestamp,
            Lists.newArrayList(visitor_id, client_type),
            ImmutableMap.of(visitor_id, ""1"", client_type, ""iphone"")
        )
    );
    index.add(
        new MapBasedInputRow(
            timestamp,
            Lists.newArrayList(visitor_id, client_type),
            ImmutableMap.of(visitor_id, ""2"", client_type, ""android"")
        )
    );

    TimeseriesQuery query = Druids.newTimeseriesQueryBuilder()
                                  .dataSource(QueryRunnerTestHelper.DATA_SOURCE)
                                  .granularity(QueryRunnerTestHelper.ALL_GRAN)
                                  .intervals(QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC)
                                  .aggregators(
                                      Lists.newArrayList(
                                          QueryRunnerTestHelper.ROWS_COUNT,
                                          new DistinctCountAggregatorFactory(""UV"", visitor_id, null)
                                      )
                                  )
                                  .build();

    final Iterable<Result<TimeseriesResultValue>> results =
        engine.process(query, new IncrementalIndexStorageAdapter(index)).toList();

    List<Result<TimeseriesResultValue>> expectedResults = Collections.singletonList(
        new Result<>(
            time,
            new TimeseriesResultValue(
                ImmutableMap.of(""UV"", 3, ""rows"", 3L)
            )
        )
    );
    TestHelper.assertExpectedResults(expectedResults, results);
  }
",non-flaky,5
98016,vert-x3_vertx-mongo-client,MongoClientWithObjectIdTest.testInsertRetrieve,"  @Test
  public void testInsertRetrieve() throws Exception {
    String collection = randomCollection();
    mongoClient.createCollection(collection, onSuccess(res -> {
      JsonObject doc = createDoc();
      doc.put(""_id"", new ObjectId().toHexString());
      mongoClient.insert(collection, doc, onSuccess(id -> {
        assertNull(id);
        mongoClient.findOne(collection, new JsonObject(), null, onSuccess(retrieved -> {
          assertEquals(doc, retrieved);
          testComplete();
        }));
      }));
    }));
    await();
  }
",non-flaky,5
70834,apache_kafka,WorkerSourceTaskTest.testPollsInBackground,"    @Test
    public void testPollsInBackground() throws Exception {
        createWorkerTask();

        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));
        EasyMock.expectLastCall();
        sourceTask.start(TASK_PROPS);
        EasyMock.expectLastCall();
        statusListener.onStartup(taskId);
        EasyMock.expectLastCall();

        final CountDownLatch pollLatch = expectPolls(10);
        // In this test, we don't flush, so nothing goes any further than the offset writer

        sourceTask.stop();
        EasyMock.expectLastCall();
        expectOffsetFlush(true);

        statusListener.onShutdown(taskId);
        EasyMock.expectLastCall();

        producer.close(EasyMock.anyObject(Duration.class));
        EasyMock.expectLastCall();

        transformationChain.close();
        EasyMock.expectLastCall();

        PowerMock.replayAll();

        workerTask.initialize(TASK_CONFIG);
        Future<?> taskFuture = executor.submit(workerTask);

        assertTrue(awaitLatch(pollLatch));
        workerTask.stop();
        assertTrue(workerTask.awaitStop(1000));

        taskFuture.get();
        assertPollMetrics(10);

        PowerMock.verifyAll();
    }
",non-flaky,5
86118,graylog2_graylog2-server,EventDefinitionFacadeTest.loadNativeEntity,"    @Test
    public void loadNativeEntity() {
        final NativeEntityDescriptor nativeEntityDescriptor = NativeEntityDescriptor
                .create(ModelId.of(""content-pack-id""),
                        ModelId.of(""5d4032513d2746703d1467f6""),
                        ModelTypes.EVENT_DEFINITION_V1,
                        ""title"");
        final Optional<NativeEntity<EventDefinitionDto>> optionalNativeEntity = facade.loadNativeEntity(nativeEntityDescriptor);
        assertThat(optionalNativeEntity).isPresent();
        final NativeEntity<EventDefinitionDto> nativeEntity = optionalNativeEntity.get();
        assertThat(nativeEntity.entity()).isNotNull();
        final EventDefinitionDto eventDefinition = nativeEntity.entity();
        assertThat(eventDefinition.id()).isEqualTo(""5d4032513d2746703d1467f6"");
    }
",non-flaky,5
160394,ConsenSys_teku,ChainDataProviderTest.validatorParameterToIndex_shouldThrowExceptionWithInvalidPublicKey,"  @Test
  public void validatorParameterToIndex_shouldThrowExceptionWithInvalidPublicKey() {
    final ChainDataProvider provider =
        new ChainDataProvider(spec, recentChainData, combinedChainDataClient);

    assertThrows(
        BadRequestException.class,
        () -> provider.validatorParameterToIndex(Bytes32.EMPTY.toHexString()));
  }
",non-flaky,5
33715,alibaba_fastjson,JSONScannerTest.isEOF3,"  @Test
  public void isEOF3() throws Throwable {

    // Arrange
    JSONScanner objectUnderTest = ((JSONScanner)Reflector.getInstance(""com.alibaba.fastjson.parser.JSONScanner""));
    objectUnderTest.hasSpecial = false;
    objectUnderTest.token = 0;
    objectUnderTest.locale = null;
    objectUnderTest.np = 0;
    objectUnderTest.features = 0;
    Reflector.setField(objectUnderTest, ""text"", null);
    objectUnderTest.calendar = null;
    objectUnderTest.matchStat = 0;
    objectUnderTest.bp = 1;
    Reflector.setField(objectUnderTest, ""len"", 0);
    objectUnderTest.stringDefaultValue = null;
    objectUnderTest.pos = 0;
    objectUnderTest.sp = 0;
    objectUnderTest.sbuf = null;
    objectUnderTest.ch = '\u001a';
    objectUnderTest.timeZone = null;
    objectUnderTest.eofPos = 0;

    // Act
    boolean retval = objectUnderTest.isEOF();

    // Assert result
    Assert.assertEquals(false, retval);

  }
",non-flaky,5
112063,apache_shardingsphere-elasticjob,HomeFolderUtilsTest.assertGetFilePathInHomeFolder,"    @Test
    public void assertGetFilePathInHomeFolder() {
        assertThat(HomeFolderUtils.getFilePathInHomeFolder(""test_file""), is(HOME_FOLDER + ""test_file""));
    }
",non-flaky,5
98270,spotify_docker-client,ContainerInfoTest.test1_22,"  @Test
  public void test1_22() throws Exception {
    objectMapper.readValue(fixture(""fixtures/1.22/containerInfo.json""), ContainerInfo.class);
  }
",non-flaky,5
112684,hwang-pku_ormlite-core,BaseDaoEnabledTest.testToString,"	@Test
	public void testToString() throws Exception {
		Dao<One, Integer> dao = createDao(One.class, true);
		One one = new One();
		String stuff1 = ""fewpfjewfew"";
		one.stuff = stuff1;
		assertEquals(1, dao.create(one));
		String str = one.objectToString();
		assertTrue(str.contains(""id="" + one.id));
		assertTrue(str.contains(""stuff="" + stuff1));
	}
",non-flaky,5
107,apache_hadoop,TestDelegationTokenForProxyUser.testDelegationTokenWithRealUser,"@Test
public void testDelegationTokenWithRealUser() throws IOException {
    UserGroupInformation ugi = UserGroupInformation.createRemoteUser(REAL_USER);
    final UserGroupInformation proxyUgi = UserGroupInformation.createProxyUserForTesting(PROXY_USER, ugi, GROUP_NAMES);
    try {
        Token<?>[] tokens = proxyUgi.doAs(new PrivilegedExceptionAction<Token<?>[]>() {
            @Override
            public Token<?>[] run() throws IOException {
                return cluster.getFileSystem().addDelegationTokens(""RenewerUser"", null);
            }
        });
        DelegationTokenIdentifier identifier = new DelegationTokenIdentifier();
        byte[] tokenId = tokens[0].getIdentifier();
        identifier.readFields(new DataInputStream(new ByteArrayInputStream(tokenId)));
        Assert.assertEquals(identifier.getUser().getUserName(), PROXY_USER);
        Assert.assertEquals(identifier.getUser().getRealUser().getUserName(), REAL_USER);
    } catch (InterruptedException e) {
    }
}",test order dependency,4
137145,spring-projects_spring-framework,ReactiveAdapterRegistryTests.subscribe,"	@Test
		public void subscribe(CoreSubscriber<? super T> actual) {
			throw new UnsupportedOperationException();
		}
",non-flaky,5
156125,soot-oss_soot,Issue1292Test.testNewTest,"  @Test
  public void testNewTest() {
    String testClass = ""soot.lambdaMetaFactory.Issue1292"";
    prepareTarget(
        methodSigFromComponents(testClass, ""void"", ""testNew"", ""java.util.List""),
        testClass,
        ""java.util.function.Function"");
    // if no exception is thrown, everything is working as intended
  }
",non-flaky,5
113745,salesforce_reactive-grpc,ReactorGrpcPublisherManyToOneVerificationTest.maxElementsFromPublisher,"@Test(timeOut = 3000)
    public long maxElementsFromPublisher() {
        return 1;
    }
",non-flaky,5
98262,spotify_docker-client,PushPullIT.testPullHubPrivateRepoWithBadAuth,"  @Test
  public void testPullHubPrivateRepoWithBadAuth() throws Exception {
    final RegistryAuth badRegistryAuth = RegistryAuth.builder()
        .username(HUB_AUTH_USERNAME2)
        .password(""foobar"")
        .build();
    exception.expect(DockerException.class);
    exception.expectCause(isA(NotAuthorizedException.class));
    client.pull(CIRROS_PRIVATE_LATEST, badRegistryAuth);
  }
",non-flaky,5
95666,togglz_togglz,SpringEnvironmentPropertyActivationStrategyTest.testIsActiveThrowsWhenNoApplicationContext,"    @Test(expected = IllegalStateException.class)
    public void testIsActiveThrowsWhenNoApplicationContext() {
        FeatureState featureState = new FeatureState(TestFeatures.FEATURE_ONE, true);

        strategy.isActive(featureState, null);
    }
",non-flaky,5
137126,spring-projects_spring-framework,AbstractMethodMetadataTests.isOverridableWhenOverridableReturnsTrue,"	@Test
	public void isOverridableWhenOverridableReturnsTrue() {
		assertThat(getTagged(WithMethod.class).isOverridable()).isTrue();
	}
",non-flaky,5
86054,graylog2_graylog2-server,NotificationGracePeriodServiceTest.differentKey,"    @Test
    public void differentKey() {
        final NotificationGracePeriodService notificationGracePeriodService = new NotificationGracePeriodService();

        when(settings.gracePeriodMs()).thenReturn(10L);
        when(definition.notificationSettings()).thenReturn(settings);
        when(definition.id()).thenReturn(""1234"");

        final Event event = new TestEvent();
        event.setKeyTuple(ImmutableList.of(""testkey""));
        final Event event2 = new TestEvent();
        event2.setKeyTuple(ImmutableList.of(""otherkey""));
        event2.setEventTimestamp(event.getEventTimestamp().plus(1L));
        assertThat(notificationGracePeriodService.inGracePeriod(definition, ""5678"", event)).isFalse();
        assertThat(notificationGracePeriodService.inGracePeriod(definition, ""5678"", event2)).isFalse();
    }
",non-flaky,5
98290,spotify_docker-client,ContainerTest.testLoadFromFixture,"  @Test
  public void testLoadFromFixture() throws Exception {
    final Container container = objectMapper
        .readValue(fixture(""fixtures/container-ports-as-string.json""), Container.class);
    assertThat(container.portsAsString(), is(""0.0.0.0:80->88/tcp""));
  }
",non-flaky,5
106613,Alluxio_alluxio,AlluxioJniFuseFileSystemTest.chownWithoutValidGid,"  @Test
  public void chownWithoutValidGid() throws Exception {
    long uid = AlluxioFuseUtils.getUid(System.getProperty(""user.name""));
    long gid = AlluxioJniFuseFileSystem.ID_NOT_SET_VALUE;
    mFuseFs.chown(""/foo/bar"", uid, gid);
    String userName = System.getProperty(""user.name"");
    String groupName = AlluxioFuseUtils.getGroupName(userName);
    AlluxioURI expectedPath = BASE_EXPECTED_URI.join(""/foo/bar"");
    SetAttributePOptions options =
        SetAttributePOptions.newBuilder().setGroup(groupName).setOwner(userName).build();
    verify(mFileSystem).setAttribute(expectedPath, options);

    gid = AlluxioJniFuseFileSystem.ID_NOT_SET_VALUE_UNSIGNED;
    mFuseFs.chown(""/foo/bar"", uid, gid);
    verify(mFileSystem, times(2)).setAttribute(expectedPath, options);
  }
",non-flaky,5
178019,aosp-mirror_platform_frameworks_support,PlaybackControlGlueTest.testMediaPlayPauseButtonOnPlay,"    @Test
    public void testMediaPlayPauseButtonOnPlay() {
        PlaybackControlsRow row = new PlaybackControlsRow();
        glue.setControlsRow(row);
        SparseArrayObjectAdapter adapter = (SparseArrayObjectAdapter)
                row.getPrimaryActionsAdapter();
        PlaybackControlsRow.MultiAction playPause = (PlaybackControlsRow.MultiAction) adapter
                .lookup(PlaybackControlGlue.ACTION_PLAY_PAUSE);

        glue.onActionClicked(playPause);
        assertEquals(PlaybackControlGlue.PLAYBACK_SPEED_NORMAL, glue.getCurrentSpeedId());
        glue.onKey(null, KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE, new KeyEvent(KeyEvent.ACTION_DOWN,
                KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE));
        assertEquals(PlaybackControlGlue.PLAYBACK_SPEED_PAUSED, glue.getCurrentSpeedId());
    }
",non-flaky,5
114036,aws_aws-sdk-java-v2,AppTest.handleRequest_shouldReturnConstantValue,"    @Test
    public void handleRequest_shouldReturnConstantValue() {
        App function = new App();
        Object result = function.handleRequest(""echo"", null);
        assertEquals(""echo"", result);
    }
",non-flaky,5
118750,netty_netty,ByteBufUtilTest.testWriteUsAsciiWrapped,"    @Test
    public void testWriteUsAsciiWrapped() {
        String usAscii = ""NettyRocks"";
        ByteBuf buf = unreleasableBuffer(Unpooled.buffer(16));
        assertWrapped(buf);
        buf.writeBytes(usAscii.getBytes(CharsetUtil.US_ASCII));
        ByteBuf buf2 = unreleasableBuffer(Unpooled.buffer(16));
        assertWrapped(buf2);
        ByteBufUtil.writeAscii(buf2, usAscii);

        assertEquals(buf, buf2);

        buf.unwrap().release();
        buf2.unwrap().release();
    }
",non-flaky,5
38283,palantir_atlasdb,AbstractTransactionTest.testKeyValueRangesMany3,"    @Test
    public void testKeyValueRangesMany3() {
        putDirect(""row1"", ""col1"", """", 0);
        putDirect(""row2"", ""col1"", """", 0);
        putDirect(""row2"", ""col2"", """", 0);

        RangeRequest allRange = RangeRequest.builder().prefixRange(""row1"".getBytes()).batchHint(3).build();
        for (int i = 0 ; i < 1000 ; i++) {
            ClosableIterator<RowResult<Value>> range = keyValueService.getRange(TEST_TABLE, allRange, 1);
            ImmutableList<RowResult<Value>> list = ImmutableList.copyOf(range);
            assertEquals(1, list.size());
        }
    }
",non-flaky,5
282,apache_shardingsphere-elasticjob,b022898ef1b8c984e17efb2a422ee45f6b13e46e.assertIsShutdownAlready,"@Test
public void assertIsShutdownAlready() {
    shutdownListenerManager.new InstanceShutdownStatusJobListener().dataChanged(""/test_job/instances/127.0.0.1@-@0"", Type.NODE_REMOVED, """");
    verify(schedulerFacade, times(0)).shutdownInstance();
}",test order dependency,4
26877,wildfly_wildfly,NamingContextTestCase.testBind,"    @Test
    public void testBind() throws Exception {
        Name name = new CompositeName(""test"");
        final Object value = new Object();
        namingContext.bind(name, value);
        assertEquals(value, namingStore.lookup(name));

        //the same with security permissions
        name = new CompositeName(""securitytest"");
        testActionPermission(JndiPermission.ACTION_BIND, namingContext, ""securitytest"", value);
        assertEquals(value, namingStore.lookup(name));
    }
",non-flaky,5
137111,spring-projects_spring-framework,AbstractAnnotationMetadataTests.hasAnnotatedMethodsWhenDoesNotMatchAnyAnnotationReturnsFalse,"	@Test
	public void hasAnnotatedMethodsWhenDoesNotMatchAnyAnnotationReturnsFalse() {
		assertThat(get(WithAnnotatedMethod.class).hasAnnotatedMethods(MetaAnnotation2.class.getName())).isFalse();
		assertThat(get(WithNonAnnotatedMethod.class).hasAnnotatedMethods(DirectAnnotation1.class.getName())).isFalse();
	}
",non-flaky,5
77009,Tencent_Firestorm,MultiStorageTest.readUploadedDataTest,"  @Test
  public void readUploadedDataTest() {
    String appId = ""ap_read_uploaded_data"";
    RssRegisterShuffleRequest rr1 =  new RssRegisterShuffleRequest(appId, 0,
        Lists.newArrayList(new PartitionRange(0, 0)));
    RssRegisterShuffleRequest rr2 =  new RssRegisterShuffleRequest(appId, 0,
        Lists.newArrayList(new PartitionRange(1, 1)));
    RssRegisterShuffleRequest rr3 =  new RssRegisterShuffleRequest(appId, 0,
        Lists.newArrayList(new PartitionRange(2, 2)));
    RssRegisterShuffleRequest rr4 =  new RssRegisterShuffleRequest(appId, 0,
        Lists.newArrayList(new PartitionRange(4, 4)));
    shuffleServerClient.registerShuffle(rr1);
    shuffleServerClient.registerShuffle(rr2);
    shuffleServerClient.registerShuffle(rr3);
    shuffleServerClient.registerShuffle(rr4);

    Map<Long, byte[]> expectedData = Maps.newHashMap();
    Set<Long> expectedBlock1 = Sets.newHashSet();
    Set<Long> expectedBlock2 = Sets.newHashSet();

    Roaring64NavigableMap blockIdBitmap1 = Roaring64NavigableMap.bitmapOf();
    Roaring64NavigableMap blockIdBitmap2 = Roaring64NavigableMap.bitmapOf();
    Roaring64NavigableMap blockIdBitmap3 = Roaring64NavigableMap.bitmapOf();
    Roaring64NavigableMap blockIdBitmap4 = Roaring64NavigableMap.bitmapOf();

    List<ShuffleBlockInfo> blocks1 = createShuffleBlockList(
        0, 0, 1,3, 25, blockIdBitmap1, expectedData);
    List<ShuffleBlockInfo> blocks2 = createShuffleBlockList(
        0, 1, 1,5,1024 * 1024, blockIdBitmap2, expectedData);
    List<ShuffleBlockInfo> blocks3 = createShuffleBlockList(
        0, 2, 2,4, 25, blockIdBitmap3, expectedData);
    List<ShuffleBlockInfo> blocks4 = createShuffleBlockList(
        0, 4, 3,1, 1024 * 1024, blockIdBitmap4, expectedData);


    blocks1.forEach(b -> expectedBlock1.add(b.getBlockId()));
    blocks2.forEach(b -> expectedBlock2.add(b.getBlockId()));

    Map<Integer, List<ShuffleBlockInfo>> partitionToBlocks = Maps.newHashMap();
    partitionToBlocks.put(0, blocks1);
    partitionToBlocks.put(1, blocks2);
    Map<Integer, Map<Integer, List<ShuffleBlockInfo>>> shuffleToBlocks = Maps.newHashMap();
    shuffleToBlocks.put(0, partitionToBlocks);
    RssSendShuffleDataRequest rs1 = new RssSendShuffleDataRequest(appId, 3, 1000, shuffleToBlocks);
    shuffleServerClient.sendShuffleData(rs1);

    RssSendCommitRequest rc1 = new RssSendCommitRequest(appId, 0);
    shuffleServerClient.sendCommit(rc1);
    RssFinishShuffleRequest rf1 = new RssFinishShuffleRequest(appId, 0);
    shuffleServerClient.finishShuffle(rf1);
    Map<Integer, List<Long>> partitionToBlockIds = Maps.newHashMap();
    partitionToBlockIds.put(0, new ArrayList<>(expectedBlock1));
    partitionToBlockIds.put(1, new ArrayList<>(expectedBlock2));
    RssReportShuffleResultRequest rrp1 = new RssReportShuffleResultRequest(
        appId, 0, 1L, partitionToBlockIds, 2);
    shuffleServerClient.reportShuffleResult(rrp1);

    DiskItem item = shuffleServers.get(0).getMultiStorageManager().getDiskItem(appId, 0, 0);
    assertTrue(item.canWrite());
    assertEquals(3 * 25, item.getNotUploadedSize(appId + ""/"" + 0));
    item = shuffleServers.get(0).getMultiStorageManager().getDiskItem(appId, 0, 1);
    assertTrue(item.canWrite());
    assertEquals(5 * 1024 * 1024, item.getNotUploadedSize(appId + ""/"" + 0));

    sendSinglePartitionToShuffleServer(appId, 0,2, 2L, blocks3);
    sendSinglePartitionToShuffleServer(appId, 0, 4, 3L, blocks4);

    item = shuffleServers.get(0).getMultiStorageManager().getDiskItem(appId, 0, 2);
    assertTrue(item.canWrite());
    assertEquals(3 * 25 + 4 * 25, item.getNotUploadedSize(appId + ""/"" + 0));

    item = shuffleServers.get(0).getMultiStorageManager().getDiskItem(appId, 0, 4);
    assertTrue(item.canWrite());
    assertEquals(5 * 1024 * 1024 + 1024 * 1024, item.getNotUploadedSize(appId + ""/"" + 0));


    RssGetShuffleResultRequest rg1 = new RssGetShuffleResultRequest(appId, 0, 0);
    shuffleServerClient.getShuffleResult(rg1);
    RssGetShuffleResultRequest rg2 = new RssGetShuffleResultRequest(appId, 0, 1);
    shuffleServerClient.getShuffleResult(rg2);
    RssGetShuffleResultRequest rg3 = new RssGetShuffleResultRequest(appId, 0, 2);
    shuffleServerClient.getShuffleResult(rg3);
    RssGetShuffleResultRequest rg4 = new RssGetShuffleResultRequest(appId, 0, 4);
    shuffleServerClient.getShuffleResult(rg4);

    readShuffleData(shuffleServerClient, appId, 0, 0, 1, 10, 100, 0);
    readShuffleData(shuffleServerClient, appId, 0, 1, 1, 10, 100, 0);


    wait(appId);

    item = shuffleServers.get(0).getMultiStorageManager().getDiskItem(appId, 0, 0);
    assertTrue(item.canWrite());
    assertEquals(0, item.getNotUploadedSize(appId + ""/"" + 0));

    item = shuffleServers.get(0).getMultiStorageManager().getDiskItem(appId, 0, 1);
    assertTrue(item.canWrite());
    assertEquals(0, item.getNotUploadedSize(appId + ""/"" + 0));

    boolean isException = false;
    try {
      ShuffleDataResult result = readShuffleData(shuffleServerClient, appId, 0, 0,
          1, 10, 1000,  0);
    } catch (RuntimeException re) {
      isException = true;
      assertTrue(re.getMessage().contains(""Can't get shuffle index""));
    }
    assertTrue(isException);

    ShuffleReadClientImpl readClient = new ShuffleReadClientImpl(""LOCALFILE_AND_HDFS"",
        appId, 0, 0, 100, 1, 10, 1000, HDFS_URI + ""rss/multi_storage"",
        blockIdBitmap1, Roaring64NavigableMap.bitmapOf(1), Lists.newArrayList(), conf);
    validateResult(readClient, expectedData, blockIdBitmap1);

    readClient = new ShuffleReadClientImpl(""LOCALFILE_AND_HDFS"",
        appId, 0, 1, 100, 1, 10, 1000, HDFS_URI + ""rss/multi_storage"",
        blockIdBitmap2, Roaring64NavigableMap.bitmapOf(1), Lists.newArrayList(), conf);
    validateResult(readClient, expectedData, blockIdBitmap2);

    readClient = new ShuffleReadClientImpl(""LOCALFILE_AND_HDFS"",
        appId, 0, 2, 100, 1, 10, 1000, HDFS_URI + ""rss/multi_storage"",
        blockIdBitmap3, Roaring64NavigableMap.bitmapOf(2), Lists.newArrayList(), conf);
    validateResult(readClient, expectedData, blockIdBitmap3);

    readClient = new ShuffleReadClientImpl(""LOCALFILE_AND_HDFS"",
        appId, 0, 4, 100, 1, 10, 1000, HDFS_URI + ""rss/multi_storage"",
        blockIdBitmap4, Roaring64NavigableMap.bitmapOf(3), Lists.newArrayList(), conf);
    validateResult(readClient, expectedData, blockIdBitmap4);
  }
",non-flaky,5
112628,tbsalling_aismessages,AISMessageTest.testEqualsWithMetadata,"    @Test
    public void testEqualsWithMetadata() {
        String source = ""test"";
        Instant time = Instant.now();
        NMEAMessage nmea = NMEAMessage.fromString(""!AIVDM,1,1,,A,13aEOK?P00PD2wVMdLDRhgvL289?,0*26"");

        Metadata meta1 = new Metadata(source, time);
        Metadata meta2 = new Metadata(source, time);
        Metadata meta3 = new Metadata(source, time.plusMillis(1000));

        AISMessage ais1 = AISMessage.create(meta1, nmea);
        AISMessage ais2 = AISMessage.create(meta2, nmea);
        AISMessage ais3 = AISMessage.create(meta3, nmea);

        assertEquals(meta1, meta2);
        assertNotEquals(meta1, meta3);

        assertEquals(ais1, ais2);
        assertNotEquals(ais1, ais3);
    }
",non-flaky,5
143,apache_cassandra,ColumnFamilyStoreTest.testRemoveSuperColumn,"@Test
public void testRemoveSuperColumn() throws IOException, ExecutionException, InterruptedException {
    Table table = Table.open(""Table1"");
    ColumnFamilyStore store = table.getColumnFamilyStore(""Super1"");
    RowMutation rm;
    rm = new RowMutation(""Table1"", ""key1"");
    rm.add(""Super1:SC1:Column1"", ""asdf"".getBytes(), 0);
    rm.apply();
    store.forceBlockingFlush();
    rm = new RowMutation(""Table1"", ""key1"");
    rm.delete(""Super1:SC1"", 1);
    rm.apply();
    List<ColumnFamily> families = store.getColumnFamilies(""key1"", ""Super1"", new IdentityFilter());
    assert families.get(0).getAllColumns().first().getMarkedForDeleteAt() == 1;
    assert !families.get(1).getAllColumns().first().isMarkedForDelete();
    ColumnFamily resolved = ColumnFamily.resolve(families);
    assert resolved.getAllColumns().first().getMarkedForDeleteAt() == 1;
    Collection<IColumn> subColumns = resolved.getAllColumns().first().getSubColumns();
    assert subColumns.size() == 1;
    assert subColumns.iterator().next().timestamp() == 0;
    assertNull(ColumnFamilyStore.removeDeleted(resolved, Integer.MAX_VALUE));
}",async wait,0
91433,strapdata_elassandra,WatchAckTests.indexTestDocument,"@TestLogging(""org.elasticsearch.xpack.watcher:DEBUG"")
    public void indexTestDocument() {
        IndexResponse eventIndexResponse = client().prepareIndex(""events"", ""event"", id)
                .setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE)
                .setSource(""level"", ""error"")
                .get();
        assertEquals(DocWriteResponse.Result.CREATED, eventIndexResponse.getResult());
    }
",non-flaky,5
137142,spring-projects_spring-framework,MethodMetadataReadingVisitorTests.verifyToString,"	@Test
	public void verifyToString() {
	}
",non-flaky,5
137102,spring-projects_spring-framework,AbstractAnnotationMetadataTests.getMetaAnnotationTypesReturnsMetaAnnotations,"	@Test
	public void getMetaAnnotationTypesReturnsMetaAnnotations() {
		AnnotationMetadata metadata = get(WithMetaAnnotations.class);
		assertThat(metadata.getMetaAnnotationTypes(MetaAnnotationRoot.class.getName()))
			.containsExactlyInAnyOrder(MetaAnnotation1.class.getName(), MetaAnnotation2.class.getName());
	}
",non-flaky,5
26782,MundaneImmortal_pair-distribution-app,CompanyTest.testGetCompanyTracksNoHit,"	@Test
	public void testGetCompanyTracksNoHit() {
		List<String> tracks = Arrays.asList(""other-company-track"", ""third-track"");
		
		String companyTrack = new Company(""Company"").getCompanyTrack(tracks);
		
		assertThat(companyTrack, is(nullValue()));
	}
",non-flaky,5
21243,androidx_androidx,PreferencePersistTest.int_persist_getsStoredToSharedPrefs,"    @Test
    public void int_persist_getsStoredToSharedPrefs() {
        final int expected = 1;

        boolean wasPersisted = mPreference.putInt(expected);

        assertTrue(wasPersisted);
        assertEquals(expected, mSharedPref.getInt(KEY, -1));
    }
",non-flaky,5
160375,ConsenSys_teku,MetadataTest.shouldSerializeCompleteFormat,"  @Test
  public void shouldSerializeCompleteFormat() throws JsonProcessingException {
    final Metadata metadata = new Metadata(INTERCHANGE_VERSION, root);
    assertThat(jsonProvider.objectToPrettyJSON(metadata)).isEqualToNormalizingNewlines(jsonData);
  }
",non-flaky,5
98346,Kong_unirest-java,UriFormatterTest.testMangler_fragment,"    @Test
    public void testMangler_fragment() {
        assertLinkSurvives(""http://localhost/test?a=b#fragment"");
    }
",non-flaky,5
170536,eclipse_jetty.project,TestAnnotationInheritance.testParseClass,"    @Test
    public void testParseClass() throws Exception
    {
        SampleHandler handler = new SampleHandler();
        AnnotationParser parser = new AnnotationParser();
        parser.parse(Collections.singleton(handler), ClassB.class, true);

        //check we got  2 class annotations
        assertEquals(2, handler.annotatedClassNames.size());

        //check we got all annotated methods on each class
        assertEquals(7, handler.annotatedMethods.size());
        assertTrue(handler.annotatedMethods.contains(""org.eclipse.jetty.annotations.ClassA.a""));
        assertTrue(handler.annotatedMethods.contains(""org.eclipse.jetty.annotations.ClassA.b""));
        assertTrue(handler.annotatedMethods.contains(""org.eclipse.jetty.annotations.ClassA.c""));
        assertTrue(handler.annotatedMethods.contains(""org.eclipse.jetty.annotations.ClassA.d""));
        assertTrue(handler.annotatedMethods.contains(""org.eclipse.jetty.annotations.ClassA.l""));
        assertTrue(handler.annotatedMethods.contains(""org.eclipse.jetty.annotations.ClassB.a""));
        assertTrue(handler.annotatedMethods.contains(""org.eclipse.jetty.annotations.ClassB.c""));

        //check we got all annotated fields on each class
        assertEquals(1, handler.annotatedFields.size());
        assertEquals(""org.eclipse.jetty.annotations.ClassA.m"", handler.annotatedFields.get(0));
    }
",non-flaky,5
94737,ktuukkan_marine-api,Longitude28Test.largeNegativeValueIsNotAvailable,"    @Test
    public void largeNegativeValueIsNotAvailable() {
        assertFalse(Longitude28.isAvailable(-1-180*60*10000));
    }
",non-flaky,5
76997,Tencent_Firestorm,CoordinatorGrpcTest.rpcMetricsTest,"  @Test
  public void rpcMetricsTest() throws Exception{
    String appId = ""rpcMetricsTest"";
    double oldValue = coordinators.get(0).getGrpcMetrics().getCounterMap()
        .get(CoordinatorGrpcMetrics.HEARTBEAT_METHOD).get();
    CoordinatorTestUtils.waitForRegister(coordinatorClient,2);
    double newValue = coordinators.get(0).getGrpcMetrics().getCounterMap()
        .get(CoordinatorGrpcMetrics.HEARTBEAT_METHOD).get();
    assertTrue(newValue - oldValue > 1);
    assertEquals(0,
        coordinators.get(0).getGrpcMetrics().getGaugeMap()
            .get(CoordinatorGrpcMetrics.HEARTBEAT_METHOD).get(), 0.5);

    RssGetShuffleAssignmentsRequest request = new RssGetShuffleAssignmentsRequest(
        appId, 1, 10, 4, 1,
        Sets.newHashSet(Constants.SHUFFLE_SERVER_VERSION));
    oldValue = coordinators.get(0).getGrpcMetrics().getCounterMap()
        .get(CoordinatorGrpcMetrics.GET_SHUFFLE_ASSIGNMENTS_METHOD).get();
    coordinatorClient.getShuffleAssignments(request);
    newValue = coordinators.get(0).getGrpcMetrics().getCounterMap()
        .get(CoordinatorGrpcMetrics.GET_SHUFFLE_ASSIGNMENTS_METHOD).get();
    assertEquals(oldValue + 1, newValue, 0.5);
    assertEquals(0,
        coordinators.get(0).getGrpcMetrics().getGaugeMap()
            .get(CoordinatorGrpcMetrics.GET_SHUFFLE_ASSIGNMENTS_METHOD).get(), 0.5);
  }
",non-flaky,5
95675,togglz_togglz,TogglzRuleAllDisabledTest.testToggleFeature,"    @Test
    public void testToggleFeature() {

        // initially false
        assertFalse(MyFeatures.FEATURE_ONE.isActive());

        // enable and check result
        togglzRule.enable(MyFeatures.FEATURE_ONE);
        assertTrue(MyFeatures.FEATURE_ONE.isActive());

        // disable and check result
        togglzRule.disable(MyFeatures.FEATURE_ONE);
        assertFalse(MyFeatures.FEATURE_ONE.isActive());

    }
",non-flaky,5
106627,Alluxio_alluxio,AlluxioJniFuseFileSystemTest.read,"  @Test
  public void read() throws Exception {
    // mocks set-up
    AlluxioURI expectedPath = BASE_EXPECTED_URI.join(""/foo/bar"");
    setUpOpenMock(expectedPath);

    FileInStream fakeInStream = mock(FileInStream.class);
    when(fakeInStream.read(any(byte[].class),
        anyInt(), anyInt())).then((Answer<Integer>) invocationOnMock -> {
          byte[] myDest = (byte[]) invocationOnMock.getArguments()[0];
          for (byte i = 0; i < 4; i++) {
            myDest[i] = i;
          }
          return 4;
        });

    when(mFileSystem.openFile(expectedPath)).thenReturn(fakeInStream);
    mFileInfo.flags.set(O_RDONLY.intValue());

    // prepare something to read to it
    ByteBuffer ptr = ByteBuffer.allocateDirect(4);
    assertEquals(4, ptr.limit());

    // actual test
    mFuseFs.open(""/foo/bar"", mFileInfo);

    mFuseFs.read(""/foo/bar"", ptr, 4, 0, mFileInfo);
    ptr.flip();
    final byte[] dst = new byte[4];
    ptr.get(dst, 0, 4);
    final byte[] expected = new byte[] {0, 1, 2, 3};

    assertArrayEquals(""Source and dst data should be equal"", expected, dst);
  }
",non-flaky,5
77472,opensearch-project_OpenSearch,ClusterApplierServiceTests.onSuccess,"    @TestLogging(value = ""org.opensearch.cluster.service:TRACE"", reason = ""to ensure that we log cluster state events on TRACE level"")
    public void testClusterStateUpdateLogging() throws Exception {
        MockLogAppender mockAppender = new MockLogAppender();
        mockAppender.start();
        mockAppender.addExpectation(
                new MockLogAppender.SeenEventExpectation(
                        ""test1"",
                        ClusterApplierService.class.getCanonicalName(),
                        Level.DEBUG,
                        ""*processing [test1]: took [1s] no change in cluster state""));
        mockAppender.addExpectation(
                new MockLogAppender.SeenEventExpectation(
                        ""test2"",
                        ClusterApplierService.class.getCanonicalName(),
                        Level.TRACE,
                        ""*failed to execute cluster state applier in [2s]*""));
        mockAppender.addExpectation(
            new MockLogAppender.SeenEventExpectation(
                ""test3"",
                ClusterApplierService.class.getCanonicalName(),
                Level.DEBUG,
                ""*processing [test3]: took [0s] no change in cluster state*""));

        Logger clusterLogger = LogManager.getLogger(ClusterApplierService.class);
        Loggers.addAppender(clusterLogger, mockAppender);
        try {
            clusterApplierService.currentTimeOverride = threadPool.relativeTimeInMillis();
            clusterApplierService.runOnApplierThread(""test1"",
                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(1).millis(),
                new ClusterApplyListener() {
                    @Override
                    public void onSuccess(String source) { }

",non-flaky,5
78283,apache_beam,TimerInternalsTest.testTimerDataCoder,"  @Test
  public void testTimerDataCoder() throws Exception {
    CoderProperties.coderDecodeEncodeEqual(
        TimerDataCoder.of(GlobalWindow.Coder.INSTANCE),
        TimerData.of(
            ""arbitrary-id"", StateNamespaces.global(), new Instant(0), TimeDomain.EVENT_TIME));

    Coder<IntervalWindow> windowCoder = IntervalWindow.getCoder();
    CoderProperties.coderDecodeEncodeEqual(
        TimerDataCoder.of(windowCoder),
        TimerData.of(
            ""another-id"",
            StateNamespaces.window(
                windowCoder, new IntervalWindow(new Instant(0), new Instant(100))),
            new Instant(99),
            TimeDomain.PROCESSING_TIME));
  }
",non-flaky,5
178033,aosp-mirror_platform_frameworks_support,GuidedDatePickerTest.testFebruaryToMarchTransitionForNonLeapYear,"    @Test
    public void testFebruaryToMarchTransitionForNonLeapYear() throws Throwable {
        long startTime = System.currentTimeMillis();
        Intent intent = new Intent();

        String title = ""Date Picker Transition Test"";
        String breadcrumb = ""Month Transition Test Demo"";
        String description = ""Testing the transition from Feb to Mar (nonleap year)"";
        GuidanceStylist.Guidance guidance = new GuidanceStylist.Guidance(title, description,
                breadcrumb, null);

        List<GuidedAction> actionList = new ArrayList<>();

        Calendar cal = Calendar.getInstance();

        cal.set(Calendar.YEAR, 2017);
        cal.set(Calendar.MONTH, Calendar.FEBRUARY);
        cal.set(Calendar.DAY_OF_MONTH, cal.getActualMaximum(Calendar.DAY_OF_MONTH));
        Date initialDate = cal.getTime();

        GuidedDatePickerAction action = new GuidedDatePickerAction.Builder(
                mContext)
                .id(0)
                .title(""Date"")
                .date(initialDate.getTime())
                .datePickerFormat(""DMY"")
                .build();

        actionList.add(action);

        GuidedStepAttributesTestFragment.clear();
        GuidedStepAttributesTestFragment.GUIDANCE = guidance;
        GuidedStepAttributesTestFragment.ACTION_LIST = actionList;

        initActivity(intent);

        DatePicker mPickerView = (DatePicker) mActivity.findViewById(
                R.id.guidedactions_activator_item);

        verticalScrollToFieldValue(Calendar.MONTH, Calendar.MARCH, new int[] {0, 1, 2},
                mPickerView, KeyEvent.KEYCODE_DPAD_DOWN);
        long executionTime = System.currentTimeMillis() - startTime;
        Log.d(TAG, ""testFebruaryToMarchTransition() Execution time: "" + executionTime);
        Thread.sleep(FINAL_WAIT);
    }
",non-flaky,5
114111,aws_aws-sdk-java-v2,InstantAsStringAttributeConvertersTest.InstantAsStringAttributeConverterEpochPlusOneMilliTest,"    @Test
    public void InstantAsStringAttributeConverterEpochPlusOneMilliTest() {
        verifyTransform(Instant.EPOCH.plusMillis(1), ""1970-01-01T00:00:00.001Z"");
    }
",non-flaky,5
175802,GoogleCloudPlatform_google-cloud-eclipse,ProjectSelectorSelectionChangedListenerTest.testSelectionChanged_noAppEngineApplication,"  @Test
  public void testSelectionChanged_noAppEngineApplication()
      throws ProjectRepositoryException, InterruptedException {
    initSelectionAndAccountSelector();
    when(projectRepository.getAppEngineApplication(any(Credential.class), anyString()))
        .thenReturn(AppEngine.NO_APPENGINE_APPLICATION);

    listener.selectionChanged(event);
    listener.latestQueryJob.join();
    verify(projectSelector).clearStatusLink();  // Should clear initially.
    verify(projectSelector).setStatusLink(EXPECTED_MESSAGE_WHEN_NO_APPLICATION, EXPECTED_LINK);
  }
",non-flaky,5
114094,aws_aws-sdk-java-v2,KeyTest.toBuilder,"    @Test
    public void toBuilder() {
        Key keyClone = key.toBuilder().build();

        assertThat(key, is(equalTo(keyClone)));
    }
",non-flaky,5
86095,graylog2_graylog2-server,EventDefinitionDtoTest.testValidateWithInvalidFieldName,"    @Test
    public void testValidateWithInvalidFieldName() {
        final EventFieldSpec fieldSpecMock = mock(EventFieldSpec.class);
        final EventDefinitionDto invalidEventDefinition = testSubject.toBuilder()
            .fieldSpec(ImmutableMap.of(""foo\\bar"", fieldSpecMock, ""$yo&^a"", fieldSpecMock))
            .build();
        final ValidationResult validationResult = invalidEventDefinition.validate();
        assertThat(validationResult.failed()).isTrue();
        assertThat(validationResult.getErrors()).containsOnlyKeys(""field_spec"");
        final List<String> fieldValidation = (List<String>) validationResult.getErrors().get(""field_spec"");
        assertThat(fieldValidation.size()).isEqualTo(2);
        assertThat(fieldValidation.get(0)).contains(""foo\\bar"");
        assertThat(fieldValidation.get(1)).contains(""$yo&^a"");
    }
",non-flaky,5
26841,wildfly_wildfly,WritableServiceBasedNamingStoreTestCase.testCreateSubContextNoOwner,"    @Test
    public void testCreateSubContextNoOwner() throws Exception {
        try {
            store.createSubcontext(new CompositeName(""test""));
            fail(""Should have failed with a read-only context exception"");
        } catch (UnsupportedOperationException expected) {
        }
    }
",non-flaky,5
122621,vespa-engine_vespa,IPAddressesTest.choose_ipv6_public_over_local,"    @Test
    public void choose_ipv6_public_over_local() {
        mock.addAddress(""localhost"", ""38.3.4.2"")
                .addAddress(""localhost"", ""10.0.2.2"")
                .addAddress(""localhost"", ""fe80::1"")
                .addAddress(""localhost"", ""2001::1"");

        assertEquals(InetAddresses.forString(""2001::1""), mock.getIPv6Address(""localhost"").get());
    }
",non-flaky,5
76732,quarkusio_quarkus,JarRunnerIT.testThatLegacyJarFormatWorks,"    @Test
    public void testThatLegacyJarFormatWorks() throws Exception {
        File testDir = initProject(""projects/rr-with-json-logging"", ""projects/rr-with-json-logging-legacy-jar"");
        RunningInvoker running = new RunningInvoker(testDir, false);

        MavenProcessInvocationResult result = running
                .execute(Arrays.asList(""package"",
                        ""-DskipTests"",
                        ""-Dquarkus.package.type=legacy-jar""), Collections.emptyMap());

        await().atMost(1, TimeUnit.MINUTES).until(() -> result.getProcess() != null && !result.getProcess().isAlive());
        assertThat(running.log()).containsIgnoringCase(""BUILD SUCCESS"");
        running.stop();

        Path jar = testDir.toPath().toAbsolutePath()
                .resolve(Paths.get(""target"",
                        JarResultBuildStep.DEFAULT_FAST_JAR_DIRECTORY_NAME,
                        ""quarkus-run.jar""));
        Assertions.assertFalse(Files.exists(jar));

        jar = testDir.toPath().toAbsolutePath()
                .resolve(Paths.get(""target/acme-1.0-SNAPSHOT-runner.jar""));
        Assertions.assertTrue(Files.exists(jar));

        Properties quarkusArtifactProperties = new Properties();
        quarkusArtifactProperties
                .load(new FileInputStream(testDir.toPath().resolve(""target"").resolve(""quarkus-artifact.properties"").toFile()));
        Assertions.assertEquals(""jar"", quarkusArtifactProperties.get(""type""));
        Assertions.assertEquals(""acme-1.0-SNAPSHOT-runner.jar"", quarkusArtifactProperties.get(""path""));

        File output = new File(testDir, ""target/output.log"");
        output.createNewFile();

        Properties properties = new Properties();
        properties
                .load(new FileInputStream(testDir.toPath().resolve(""target"").resolve(""quarkus-artifact.properties"").toFile()));
        Assertions.assertEquals(""jar"", properties.get(""type""));
        Assertions.assertEquals(""acme-1.0-SNAPSHOT-runner.jar"", properties.get(""path""));

        Process process = doLaunch(jar, output).start();
        try {
            // Wait until server up
            dumpFileContentOnFailure(() -> {
                await()
                        .pollDelay(1, TimeUnit.SECONDS)
                        .atMost(1, TimeUnit.MINUTES).until(() -> DevModeTestUtils.getHttpResponse(""/app/hello/package"", 200));
                return null;
            }, output, ConditionTimeoutException.class);

            String logs = FileUtils.readFileToString(output, ""UTF-8"");

            assertThat(logs).isNotEmpty().contains(""resteasy-reactive"");

            // test that the application name and version are properly set
            assertApplicationPropertiesSetCorrectly();
            assertResourceReadingFromClassPathWorksCorrectly("""");
            assertUsingProtectionDomainWorksCorrectly("""");
        } finally {
            process.destroy();
        }
    }
",non-flaky,5
110122,Wikidata_wikidata-toolkit,ClientTest.testSetDumpsDirectoryException,"	@Test
	public void testSetDumpsDirectoryException() throws ParseException,
			IOException {
		Mockito.doThrow(new IOException(""Mock exception for testing.""))
				.when(mockDpc).setDownloadDirectory(Mockito.anyString());

		String[] args = new String[] { ""-a"", ""rdf"", ""--rdftasks"",
				""items,labels"", ""--dumps"", ""/tmp/"" };
		Client client = new Client(mockDpc, args);
		client.performActions(); // print help

		Mockito.verify(mockDpc, Mockito.never()).processDump(
				Mockito.<MwDumpFile> any());
		Mockito.verify(mockDpc, Mockito.never()).getSitesInformation();
	}
",non-flaky,5
177962,aosp-mirror_platform_frameworks_support,FileProviderTest.testQueryExtraColumn,"    @Test
    public void testQueryExtraColumn() throws Exception {
        final File file = new File(mContext.getFilesDir(), TEST_FILE);
        final Uri uri = stageFileAndGetUri(file, TEST_DATA);

        // Verify that extra column doesn't gook things up
        Cursor cursor = mResolver.query(uri, new String[] {
                SIZE, ""foobar"", DISPLAY_NAME }, null, null, null);
        try {
            assertEquals(1, cursor.getCount());
            cursor.moveToFirst();
            assertEquals(TEST_DATA.length, cursor.getLong(0));
            assertEquals(TEST_FILE, cursor.getString(1));
        } finally {
            cursor.close();
        }
    }
",non-flaky,5
94769,ktuukkan_marine-api,AISMessage24ParserTest.getVendorId,"    @Test
    public void getVendorId() throws Exception {
        // TODO correct? should be ""1234567"" according to http://www.maritec.co.za/tools/aisvdmvdodecoding/
        assertEquals(""123"", partB.getVendorId());
    }
",non-flaky,5
114044,aws_aws-sdk-java-v2,AsyncUpdateItemWithResponseIntegrationTest.updateItem_returnItemCollectionMetrics_set_itemCollectionMetricsNull,"    @Test
    public void updateItem_returnItemCollectionMetrics_set_itemCollectionMetricsNull() {
        Record record = new Record().setId(1).setId2(10);
        UpdateItemEnhancedRequest<Record> request = UpdateItemEnhancedRequest.builder(Record.class)
                                                                          .item(record)
                                                                          .build();

        UpdateItemEnhancedResponse<Record> response = mappedTable.updateItemWithResponse(request).join();

        assertThat(response.itemCollectionMetrics()).isNull();
    }
",non-flaky,5
162713,OpenAPITools_openapi-generator,XmlItemTest.nameBooleanTest,"    @Test
    public void nameBooleanTest() {
        // TODO: test nameBoolean
    }
",non-flaky,5
97974,ReactiveX_RxJava,ObservableTests.call,"    @Test
    public void testReduceWithInitialValue() {
        Observable<Integer> observable = Observable.from(1, 2, 3, 4);
        observable.reduce(50, new Func2<Integer, Integer, Integer>() {

            @Override
            public Integer call(Integer t1, Integer t2) {
                return t1 + t2;
            }
",non-flaky,5
135012,undertow-io_undertow,ClassUtilsTest.testExtractEncoderType,"    @Test
    public void testExtractEncoderType() {
        Class<?> clazz = ClassUtils.getEncoderType(BinaryEncoder.class);
        Assert.assertEquals(String.class, clazz);

        Class<?> clazz2 = ClassUtils.getEncoderType(TextEncoder.class);
        Assert.assertEquals(String.class, clazz2);

        Class<?> clazz3 = ClassUtils.getEncoderType(TextStreamEncoder.class);
        Assert.assertEquals(String.class, clazz3);

        Class<?> clazz4 = ClassUtils.getEncoderType(BinaryStreamEncoder.class);
        Assert.assertEquals(String.class, clazz4);
    }
",non-flaky,5
177157,line_armeria,TokenBucketThrottlingStrategyTest.throttle1,"    @Test
    public void throttle1() throws Exception {
        final WebClient client = WebClient.of(serverRule.httpUri());
        final AggregatedHttpResponse response1 = client.get(""/http-throttle1"").aggregate().get();
        assertThat(response1.status()).isEqualTo(HttpStatus.OK);

        assertThat(response1.headers().contains(HttpHeaderNames.RETRY_AFTER)).isFalse();
        assertThat(response1.headers().contains(""RateLimit-Remaining"")).isFalse();
        assertThat(response1.headers().contains(""X-Rate-Limit-Remaining"")).isFalse();
        assertThat(response1.headers().contains(""X-RateLimit-Remaining"", ""0"")).isTrue();
        assertThat(response1.headers().contains(""X-RateLimit-Reset"")).isTrue();
        final long reset1 = Long.parseLong(response1.headers().get(""X-RateLimit-Reset""));
        assertThat(reset1).isBetween(0L, 10L);
        assertThat(response1.headers().contains(""X-RateLimit-Limit"")).isFalse();

        final AggregatedHttpResponse response2 = client.get(""/http-throttle1"").aggregate().get();
        assertThat(response2.status()).isEqualTo(HttpStatus.TOO_MANY_REQUESTS);

        assertThat(response2.headers().contains(HttpHeaderNames.RETRY_AFTER)).isTrue();
        final long retryAfter2 = Long.parseLong(response2.headers().get(HttpHeaderNames.RETRY_AFTER));
        assertThat(retryAfter2).isBetween(0L, 10L);
        assertThat(response2.headers().contains(""RateLimit-Remaining"")).isFalse();
        assertThat(response2.headers().contains(""X-Rate-Limit-Remaining"")).isFalse();
        assertThat(response2.headers().contains(""X-RateLimit-Remaining"", ""0"")).isTrue();
        assertThat(response2.headers().contains(""X-RateLimit-Reset"")).isTrue();
        final long reset = Long.parseLong(response2.headers().get(""X-RateLimit-Reset""));
        assertThat(reset).isEqualTo(retryAfter2);
        assertThat(response2.headers().contains(""X-RateLimit-Limit"")).isFalse();
    }
",non-flaky,5
114035,aws_aws-sdk-java-v2,MyDynamoDbStreamsFunctionTest.handleRequest_shouldReturnConstantValue,"    @Test
    public void handleRequest_shouldReturnConstantValue() {
        MyDynamoDbStreamsFunction function = new MyDynamoDbStreamsFunction();
        Object result = function.handleRequest(""echo"", null);
        assertEquals(""echo"", result);
    }
",non-flaky,5
20980,NationalSecurityAgency_timely,MetaTest.testToKeys,"    @Test
    public void testToKeys() {
        Meta one = new Meta(""sys.cpu.user"", ""tag1"", ""value1"");
        List<Key> keys = one.toKeys();
        Assert.assertTrue(keys.contains(new Key(""m:sys.cpu.user"")));
        Assert.assertTrue(keys.contains(new Key(""t:sys.cpu.user"", ""tag1"")));
        Assert.assertTrue(keys.contains(new Key(""v:sys.cpu.user"", ""tag1"", ""value1"")));
    }
",non-flaky,5
53207,cloudfoundry_uaa,CfAuthenticationTests.testInvalidScopes,"    @Test
    public void testInvalidScopes() {
        params.set(
                        ""credentials"",
                        String.format(""{\""username\"":\""%s\"",\""password\"":\""%s\""}"", testAccounts.getUserName(),
                                        testAccounts.getPassword()));
        params.set(""scope"", ""read"");
        ResponseEntity<Void> response = serverRunning.postForResponse(serverRunning.getAuthorizationUri(), headers,
                        params);
        assertEquals(HttpStatus.FOUND, response.getStatusCode());
        String location = response.getHeaders().getLocation().toString();
        // System.err.println(location);
        assertTrue(location.startsWith(params.getFirst(""redirect_uri"")));
        assertTrue(location.contains(""error=invalid_scope""));
        assertFalse(location.contains(""credentials=""));
    }
",non-flaky,5
43073,trinodb_trino,BaseConnectorTest.testRenameSchema,"    @Test
    public void testRenameSchema()
    {
        if (!hasBehavior(SUPPORTS_RENAME_SCHEMA)) {
            String schemaName = getSession().getSchema().orElseThrow();
            assertQueryFails(
                    format(""ALTER SCHEMA %s RENAME TO %s"", schemaName, schemaName + randomTableSuffix()),
                    ""This connector does not support renaming schemas"");
            return;
        }

        if (!hasBehavior(SUPPORTS_CREATE_SCHEMA)) {
            throw new SkipException(""Skipping as connector does not support CREATE SCHEMA"");
        }

        String schemaName = ""test_rename_schema_"" + randomTableSuffix();
        try {
            assertUpdate(""CREATE SCHEMA "" + schemaName);
            assertUpdate(""ALTER SCHEMA "" + schemaName + "" RENAME TO "" + schemaName + ""_renamed"");
        }
        finally {
            assertUpdate(""DROP SCHEMA IF EXISTS "" + schemaName);
            assertUpdate(""DROP SCHEMA IF EXISTS "" + schemaName + ""_renamed"");
        }
    }
",non-flaky,5
113756,salesforce_reactive-grpc,GrpcRetryTest.oneToManyRetryWhen,"    @Test
    public void oneToManyRetryWhen() {
        Flux<Integer> test = newThreeErrorMono()
                .<Flux<Integer>>as(GrpcRetry.OneToMany.retryWhen(Mono::flux, Retry.any().retryMax(4)));

        StepVerifier.create(test)
                .expectNext(0)
                .expectComplete()
                .verify(Duration.ofSeconds(1));
    }
",non-flaky,5
95667,togglz_togglz,SpringEnvironmentPropertyActivationStrategyTest.testGetParameters,"    @Test
    public void testGetParameters() {
        Parameter[] parameters = strategy.getParameters();

        assertEquals(1, parameters.length);

        Parameter parameter = parameters[0];

        assertNotNull(parameter);
        assertEquals(SpringEnvironmentPropertyActivationStrategy.PARAM_NAME, parameter.getName());
        assertTrue(parameter.isOptional());
        assertTrue(Strings.isNotBlank(parameter.getLabel()));
        assertTrue(Strings.isNotBlank(parameter.getDescription()));
    }
",non-flaky,5
170463,eclipse_jetty.project,MBeanContainerLifeCycleTest.dispose,"    @AfterEach
    public void dispose() throws Exception
    {
        container.stop();
    }
",non-flaky,5
84616,apache_zookeeper,GetEphemeralsTest.testGetEphemeralsByPath,"    @Test
    public void testGetEphemeralsByPath() throws IOException, KeeperException, InterruptedException {

        final CountDownLatch doneProcessing = new CountDownLatch(1);
        final String checkPath = BASE + ""0"";
        final List<String> unexpectedBehavior = new ArrayList<String>();
        zk.getEphemerals(checkPath, (rc, ctx, paths) -> {
            if (paths == null) {
                unexpectedBehavior.add(String.format(""Expected ephemeral count for %s to be %d but was null"", checkPath, expected.length));
            } else if (paths.size() != EPHEMERAL_CNT) {
                unexpectedBehavior.add(String.format(""Expected ephemeral count for %s to be %d but was %d"", checkPath, EPHEMERAL_CNT, paths.size()));
            }
            for (int i = 0; i < EPHEMERAL_CNT; i++) {
                String path = expected[i];
                if (!paths.contains(path)) {
                    unexpectedBehavior.add(String.format(""Expected path=%s didn't exist ""
                                                                 + ""in getEphemerals list."", path));
                }
            }
            doneProcessing.countDown();
        }, null);
        long waitForCallbackSecs = 2L;
        if (!doneProcessing.await(waitForCallbackSecs, TimeUnit.SECONDS)) {
            fail(String.format(""getEphemerals(%s) didn't callback within %d seconds"", checkPath, waitForCallbackSecs));
        }
        checkForUnexpectedBehavior(unexpectedBehavior);
    }
",non-flaky,5
112093,apache_shardingsphere-elasticjob,RotateServerByNameJobShardingStrategyTest.assertSharding1,"    @Test
    public void assertSharding1() {
        Map<JobInstance, List<Integer>> expected = new HashMap<>();
        expected.put(new JobInstance(""host1@-@0""), Collections.singletonList(0));
        expected.put(new JobInstance(""host2@-@0""), Collections.singletonList(1));
        expected.put(new JobInstance(""host0@-@0""), Collections.<Integer>emptyList());
        assertThat(rotateServerByNameJobShardingStrategy.sharding(Arrays.asList(new JobInstance(""host0@-@0""), new JobInstance(""host1@-@0""), new JobInstance(""host2@-@0"")), ""1"", 2), is(expected));
    }
",non-flaky,5
78312,apache_beam,SimpleDoFnRunnerTest.testOnTimerCalled,"  @Test
  public void testOnTimerCalled() {
    WindowFn<?, GlobalWindow> windowFn = new GlobalWindows();
    DoFnWithTimers<GlobalWindow> fn = new DoFnWithTimers(windowFn.windowCoder());
    DoFnRunner<String, String> runner =
        new SimpleDoFnRunner<>(
            null,
            fn,
            NullSideInputReader.empty(),
            null,
            null,
            Collections.emptyList(),
            mockStepContext,
            null,
            Collections.emptyMap(),
            WindowingStrategy.of(windowFn));

    Instant currentTime = new Instant(42);
    Duration offset = Duration.millis(37);

    // Mocking is not easily compatible with annotation analysis, so we manually record
    // the method call.
    runner.onTimer(
        DoFnWithTimers.TIMER_ID,
        GlobalWindow.INSTANCE,
        currentTime.plus(offset),
        TimeDomain.EVENT_TIME);

    assertThat(
        fn.onTimerInvocations,
        contains(
            TimerData.of(
                DoFnWithTimers.TIMER_ID,
                StateNamespaces.window(windowFn.windowCoder(), GlobalWindow.INSTANCE),
                currentTime.plus(offset),
                TimeDomain.EVENT_TIME)));
  }
",non-flaky,5
19481,eclipse_xtext-core,LineAndColumnTest.testExceedsOffset,"	@Test(expected=IndexOutOfBoundsException.class)
	public void testExceedsOffset() {
		assertLineAndColumn("""", 1, -1, -1);
	}
",non-flaky,5
133923,cdancy_jenkins-rest,SystemApiMockTest.testGetSystemInfo,"@Test(groups = ""unit"", testName = ""SystemApiMockTest"")
    public void testGetSystemInfo() throws Exception {
        MockWebServer server = mockWebServer();

        server.enqueue(
            new MockResponse().setHeader(""X-Hudson"", ""1.395"").setHeader(""X-Jenkins"", JenkinsApiMetadata.BUILD_VERSION)
                .setHeader(""X-Jenkins-Session"", ""cc323b8d"").setHeader(""X-Hudson-CLI-Port"", ""50000"")
                .setHeader(""X-Jenkins-CLI-Port"", ""50000"").setHeader(""X-Jenkins-CLI2-Port"", ""50000"")
                .setHeader(""X-Instance-Identity"", ""fdsa"").setHeader(""X-SSH-Endpoint"", ""127.0.1.1:46126"")
                .setHeader(""Server"", ""Jetty(winstone-2.9)"").setResponseCode(200));
        JenkinsApi jenkinsApi = api(server.getUrl(""/""));
        SystemApi api = jenkinsApi.systemApi();
        try {
            final SystemInfo version = api.systemInfo();
            assertNotNull(version);
            assertTrue(version.jenkinsVersion().equalsIgnoreCase(JenkinsApiMetadata.BUILD_VERSION));
            assertSent(server, ""HEAD"", ""/"");
        } finally {
            jenkinsApi.close();
            server.shutdown();
        }
    }
",non-flaky,5
98003,ReactiveX_RxJava,ThrottleLastTests.testThrottle,"    @Test
    public void testThrottle() {
        @SuppressWarnings(""unchecked"")
        Observer<Integer> observer = mock(Observer.class);
        TestScheduler s = new TestScheduler();
        PublishSubject<Integer> o = PublishSubject.create();
        o.throttleLast(500, TimeUnit.MILLISECONDS, s).subscribe(observer);

        // send events with simulated time increments
        s.advanceTimeTo(0, TimeUnit.MILLISECONDS);
        o.onNext(1); // skip
        o.onNext(2); // deliver
        s.advanceTimeTo(501, TimeUnit.MILLISECONDS);
        o.onNext(3); // skip
        s.advanceTimeTo(600, TimeUnit.MILLISECONDS);
        o.onNext(4); // skip
        s.advanceTimeTo(700, TimeUnit.MILLISECONDS);
        o.onNext(5); // skip
        o.onNext(6); // deliver
        s.advanceTimeTo(1001, TimeUnit.MILLISECONDS);
        o.onNext(7); // deliver
        s.advanceTimeTo(1501, TimeUnit.MILLISECONDS);
        o.onCompleted();

        InOrder inOrder = inOrder(observer);
        inOrder.verify(observer).onNext(2);
        inOrder.verify(observer).onNext(6);
        inOrder.verify(observer).onNext(7);
        inOrder.verify(observer).onCompleted();
        inOrder.verifyNoMoreInteractions();
    }
",non-flaky,5
135732,Netflix_Hystrix,HystrixCommandTestWithCustomConcurrencyStrategy.testCommandRequiresContextConcurrencyStrategyProvidesItContextSetUpCorrectly,"    @Test
    public void testCommandRequiresContextConcurrencyStrategyProvidesItContextSetUpCorrectly() {
        HystrixConcurrencyStrategy strategy = new CustomConcurrencyStrategy(true);
        HystrixPlugins.getInstance().registerConcurrencyStrategy(strategy);

        //context is set up properly
        HystrixRequestContext context = HystrixRequestContext.initializeContext();
        HystrixCommand<Boolean> cmd = new TestCommand(true, true);
        assertTrue(cmd.execute());
        printRequestLog();
        assertNotNull(HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());
        assertNotNull(cmd.currentRequestLog);
        context.shutdown();
    }
",non-flaky,5
106656,Alluxio_alluxio,AlluxioFuseFileSystemTest.rename,"  @Test
  public void rename() throws Exception {
    AlluxioURI oldPath = BASE_EXPECTED_URI.join(""/old"");
    AlluxioURI newPath = BASE_EXPECTED_URI.join(""/new"");
    doNothing().when(mFileSystem).rename(oldPath, newPath);
    mFuseFs.rename(""/old"", ""/new"");
    verify(mFileSystem).rename(oldPath, newPath);
  }
",non-flaky,5
175746,GoogleCloudPlatform_google-cloud-eclipse,AppEngineDeployPreferencesPanelTest.testValidationMessageWhenNotSignedIn,"  @Test
  public void testValidationMessageWhenNotSignedIn() {
    deployPanel = createPanel(true /* requireValues */);
    IStatus status = getAccountSelectorValidationStatus();
    assertThat(status.getMessage(), is(""Sign in to Google.""));
  }
",non-flaky,5
59655,looly_hutool,AopTest.aopByAutoCglibTest,"	@Test
	public void aopByAutoCglibTest() {
		Dog dog = ProxyUtil.proxy(new Dog(), TimeIntervalAspect.class);
		String result = dog.eat();
		Assert.assertEquals(""çåè"", result);

		dog.seize();
	}
",non-flaky,5
19446,eclipse_xtext-core,EClassInfoTest.testChangeable,"	@Test public void testContainsCompatibleFeature_01() throws Exception {
	public void testChangeable(){
		EcorePackage pack = EcorePackage.eINSTANCE;
		EClass eClass = pack.getEClass();
		EClassInfo objectUnderTest = new EClassifierInfo.EClassInfo(eClass, false, Collections.<String>emptySet(), null);
		EcoreFactory fac = EcoreFactory.eINSTANCE;
		EReference reference = fac.createEReference();
		reference.setName(""newReference"");
		reference.setEType(eClass);
		reference.setChangeable(true);
		reference.setContainment(true);
		eClass.getEStructuralFeatures().add(reference);
		assertEquals(true,objectUnderTest.containsCompatibleFeature(""newReference"", false, true, eClass, new StringBuilder()));
		reference.setChangeable(false);
		assertEquals(false,objectUnderTest.containsCompatibleFeature(""newReference"", false, true, eClass, new StringBuilder()));
	}
",non-flaky,5
91420,strapdata_elassandra,TransportHasPrivilegesActionTests.setup,"@TestLogging(""org.elasticsearch.xpack.security.action.user.TransportHasPrivilegesAction:TRACE,"" +
    public void setup() {
        final Settings settings = Settings.builder().build();
        user = new User(randomAlphaOfLengthBetween(4, 12));
        final ThreadPool threadPool = mock(ThreadPool.class);
        final ThreadContext threadContext = new ThreadContext(Settings.EMPTY);
        final TransportService transportService = new TransportService(Settings.EMPTY, mock(Transport.class), null,
            TransportService.NOOP_TRANSPORT_INTERCEPTOR, x -> null, null, Collections.emptySet());

        final Authentication authentication = mock(Authentication.class);
        threadContext.putTransient(AuthenticationField.AUTHENTICATION_KEY, authentication);
        when(threadPool.getThreadContext()).thenReturn(threadContext);

        when(authentication.getUser()).thenReturn(user);

        AuthorizationService authorizationService = mock(AuthorizationService.class);
        Mockito.doAnswer(invocationOnMock -> {
            ActionListener<Role> listener = (ActionListener<Role>) invocationOnMock.getArguments()[1];
            listener.onResponse(role);
            return null;
        }).when(authorizationService).roles(eq(user), any(ActionListener.class));

        applicationPrivileges = new ArrayList<>();
        NativePrivilegeStore privilegeStore = mock(NativePrivilegeStore.class);
        Mockito.doAnswer(inv -> {
            assertThat(inv.getArguments(), arrayWithSize(3));
            ActionListener<List<ApplicationPrivilegeDescriptor>> listener
                = (ActionListener<List<ApplicationPrivilegeDescriptor>>) inv.getArguments()[2];
            logger.info(""Privileges for ({}) are {}"", Arrays.toString(inv.getArguments()), applicationPrivileges);
            listener.onResponse(applicationPrivileges);
            return null;
        }).when(privilegeStore).getPrivileges(any(Collection.class), any(Collection.class), any(ActionListener.class));

        action = new TransportHasPrivilegesAction(settings, threadPool, transportService, mock(ActionFilters.class),
            mock(IndexNameExpressionResolver.class), authorizationService, privilegeStore);
    }
",non-flaky,5
19512,eclipse_xtext-core,TraceRegionTest.testLeafIterator_OneGrandChild_RightGap,"	@Test
	public void testLeafIterator_OneGrandChild_RightGap() {
		final TraceRegion root = new TraceRegion(0, 2, 0, 2, true, 2, 3, 0, 0, null, newURI());
		TraceRegion parent = new TraceRegion(0, 1, 0, 1, true, 3, 4, 0, 0, root, null);
		TraceRegion first = new TraceRegion(0, 1, 0, 1, true, 3, 4, 0, 0, parent, null);
		AbstractTraceRegion second = new AbstractStatefulTraceRegion(new TextRegionWithLineInformation(1, 1, 1, 2), true, new LocationData(2, 3, 0, 0, null), root) {};
		Iterator<AbstractTraceRegion> iter = root.leafIterator();
		assertEquals(Arrays.asList(first, second).iterator(), iter);
	}
",non-flaky,5
26775,MundaneImmortal_pair-distribution-app,CompanyTest.testGetCompanyName,"	@Test
	public void testGetCompanyName() {
		assertThat(new Company(""company"").getName(), is(""company""));
	}
",non-flaky,5
70823,apache_kafka,PluginsTest.newPluginsShouldConfigureWithPluginClassLoader,"    @Test
    public void newPluginsShouldConfigureWithPluginClassLoader() {
        TestPlugins.assertAvailable();
        List<Configurable> configurables = plugins.newPlugins(
            Collections.singletonList(TestPlugins.SAMPLING_CONFIGURABLE),
            config,
            Configurable.class
        );
        assertEquals(1, configurables.size());
        Configurable plugin = configurables.get(0);

        assertInstanceOf(SamplingTestPlugin.class, plugin, ""Cannot collect samples"");
        Map<String, SamplingTestPlugin> samples = ((SamplingTestPlugin) plugin).flatten();
        assertTrue(samples.containsKey(""configure"")); // Configurable::configure was called
        assertPluginClassLoaderAlwaysActive(samples);
    }
",non-flaky,5
162412,testcontainers_testcontainers-java,DockerComposeDoNotOverrideTest.testEnvVar,"    @Test(timeout = 30_000)
    public void testEnvVar() throws IOException {
        BufferedReader br = Unreliables.retryUntilSuccess(10, TimeUnit.SECONDS, () -> {
            Uninterruptibles.sleepUninterruptibly(1, TimeUnit.SECONDS);

            Socket socket = new Socket(compose.getServiceHost(""alpine_1"", 3000), compose.getServicePort(""alpine_1"", 3000));
            return new BufferedReader(new InputStreamReader(socket.getInputStream()));
        });

        Unreliables.retryUntilTrue(10, TimeUnit.SECONDS, () -> {
            while (br.ready()) {
                String line = br.readLine();
                if (line.contains(DOCKER_COMPOSE_OVERRIDE_TEST_BASE_ENV)) {
                    pass(""Mapped environment variable was found"");
                    return true;
                }
            }
            info(""Mapped environment variable was not found yet - process probably not ready"");
            Uninterruptibles.sleepUninterruptibly(100, TimeUnit.MILLISECONDS);
            return false;
        });

    }
",non-flaky,5
77518,dropwizard_dropwizard,DropwizardAppRuleTest.canGetExpectedResourceOverHttp,"    @Test
    public void canGetExpectedResourceOverHttp() {
        final String content = ClientBuilder.newClient().target(
            ""http://localhost:"" + RULE.getLocalPort() + ""/test"").request().get(String.class);

        assertThat(content).isEqualTo(""Yes, it's here"");
    }
",non-flaky,5
162455,testcontainers_testcontainers-java,KeyValuesStatementTest.keyWithSpacesTest,"    @Test
    public void keyWithSpacesTest() throws Exception {
        assertStatement(new KeyValuesStatement(""TEST"", Collections.singletonMap(""key with spaces"", ""1"")));
    }
",non-flaky,5
118703,netty_netty,SmtpRequestEncoderTest.testRsetClearsContentExpectedFlag,"    @Test
    public void testRsetClearsContentExpectedFlag() {
        EmbeddedChannel channel = new EmbeddedChannel(new SmtpRequestEncoder());

        assertTrue(channel.writeOutbound(SmtpRequests.data()));
        assertTrue(channel.writeOutbound(SmtpRequests.rset()));
        assertTrue(channel.writeOutbound(SmtpRequests.noop()));
        assertTrue(channel.finish());

        assertEquals(""DATA\r\nRSET\r\nNOOP\r\n"", getWrittenString(channel));
    }
",non-flaky,5
77492,dropwizard_dropwizard,Issue3796Test.deserialize,"    @Test
        public CustomProperty deserialize(JsonParser parser, DeserializationContext context) throws IOException {
            assertThat(parser.getCodec()).isNotNull();

            TreeNode treeNode = parser.readValueAsTree();
            final TextNode custom = (TextNode) treeNode.path(""custom"");
            return new CustomProperty(custom.asText());
        }
",non-flaky,5
95742,togglz_togglz,SchemaUpdaterTest.shouldMigrateToVersion2,"    @Test
    public void shouldMigrateToVersion2() throws SQLException {

        Connection connection = createConnection();
        try {

            // create schema version 1
            SchemaUpdater updater = new SchemaUpdater(connection, ""TOGGLZ"", DefaultMapSerializer.multiline());
            assertFalse(updater.doesTableExist());
            updater.migrateToVersion1();
            assertTrue(updater.isSchemaVersion1());

            // insert two feature states
            update(connection, ""INSERT INTO TOGGLZ VALUES ('F1', 1, 'ck, admin')"");
            update(connection, ""INSERT INTO TOGGLZ VALUES ('F2', 1, '')"");
            update(connection, ""INSERT INTO TOGGLZ VALUES ('F3', 1, NULL)"");

            List<Object[]> dataBefore = query(connection,
                ""SELECT FEATURE_NAME, FEATURE_USERS FROM TOGGLZ ORDER BY FEATURE_NAME"");
            assertEquals(3, dataBefore.size());
            assertEquals(""F1"", dataBefore.get(0)[0]);
            assertEquals(""ck, admin"", dataBefore.get(0)[1]);

            // migrate the schema
            updater.migrateToVersion2();

            // check the new columns are present
            assertTrue(querySucceeds(connection, ""SELECT FEATURE_NAME,STRATEGY_ID,STRATEGY_PARAMS FROM TOGGLZ""));

            // check the old users column is deleted
            assertFalse(querySucceeds(connection, ""SELECT FEATURE_USERS FROM TOGGLZ""));

            // check 3 features are there after the migration
            List<Object[]> dataAfter = query(connection,
                ""SELECT FEATURE_NAME, STRATEGY_ID, STRATEGY_PARAMS FROM TOGGLZ ORDER BY FEATURE_NAME"");
            assertEquals(3, dataBefore.size());

            // first feature is migrated
            assertEquals(""F1"", dataAfter.get(0)[0]);
            assertEquals(UsernameActivationStrategy.ID, dataAfter.get(0)[1]);
            assertEquals(""users=ck, admin"", dataAfter.get(0)[2].toString().trim());

            // second feature didn't change
            assertEquals(""F2"", dataAfter.get(1)[0]);
            assertEquals(null, dataAfter.get(1)[1]);
            assertEquals(null, dataAfter.get(1)[2]);

            // second feature didn't change
            assertEquals(""F3"", dataAfter.get(2)[0]);
            assertEquals(null, dataAfter.get(2)[1]);
            assertEquals(null, dataAfter.get(2)[2]);

        } finally {
            DbUtils.closeQuietly(connection);
        }

    }
",non-flaky,5
76983,Tencent_Firestorm,SparkSQLTest.resultCompareTest,"  @Test
  public void resultCompareTest() throws Exception {
    run();
    checkShuffleData();
  }
",non-flaky,5
99796,apache_cassandra,MessagingServiceTest.getPreferredRemoteAddrUsesPrivateIp,"//    @Test
//    public void getPreferredRemoteAddrUsesPrivateIp() throws UnknownHostException
//    {
//        MessagingService ms = MessagingService.instance();
//        InetAddressAndPort remote = InetAddressAndPort.getByNameOverrideDefaults(""127.0.0.151"", 7000);
//        InetAddressAndPort privateIp = InetAddressAndPort.getByName(""127.0.0.6"");
//
//        OutboundConnectionSettings template = new OutboundConnectionSettings(remote)
//                                              .withConnectTo(privateIp)
//                                              .withAuthenticator(ALLOW_NOTHING_AUTHENTICATOR);
//        OutboundConnections pool = new OutboundConnections(template, new MockBackPressureStrategy(null).newState(remote));
//        ms.channelManagers.put(remote, pool);
//
//        Assert.assertEquals(privateIp, ms.getPreferredRemoteAddr(remote));
//    }
",non-flaky,5
178048,aosp-mirror_platform_frameworks_support,GuidedStepAttributesTest.testActionWithZeroSubActions,"    @Test
    public void testActionWithZeroSubActions() throws Throwable {
        ExpectedSubActionResult result = setUpActionsForSubActionsTest();

        final int actionPos = 2;
        final GuidedAction selectedAction = result.actionList.get(actionPos);
        List<Integer> expectedFocusedSeq = result.expectedFocusedSeq.get(actionPos);
        List<Integer> expectedClickedSeq = result.expectedClickedSeq.get(actionPos);

        traverseSubActionsAndVerifyFocusAndClickEvents(selectedAction, actionPos, expectedFocusedSeq,
                expectedClickedSeq);
    }
",non-flaky,5
135040,undertow-io_undertow,NetworkUtilsAddressParsingTestCase.testIpV4AddressToSmall,"    @Test(expected = IOException.class)
    public void testIpV4AddressToSmall() throws IOException {
        NetworkUtils.parseIpv4Address(""01.123.255"");
    }
",non-flaky,5
177210,line_armeria,HttpProxyIntegrationTest.onSubscribe,"    @Test
    public void proxyWithTrailersOnly() throws Throwable {
        final WebClient client = WebClient.of(frontendServer.httpUri());

        final AtomicBoolean complete = new AtomicBoolean();
        final AtomicReference<Throwable> error = new AtomicReference<>();

        client.get(""/trailers-only"").subscribe(new Subscriber<HttpObject>() {
            @Override
            public void onSubscribe(Subscription s) {
                s.request(Long.MAX_VALUE);
            }
",non-flaky,5
170535,eclipse_jetty.project,TestAnnotationInheritance.testParseClassNames,"    @Test
    public void testParseClassNames() throws Exception
    {
        classNames.add(ClassA.class.getName());
        classNames.add(ClassB.class.getName());

        SampleHandler handler = new SampleHandler();
        AnnotationParser parser = new AnnotationParser();
        parser.parse(Collections.singleton(handler), classNames);

        //check we got  2 class annotations
        assertEquals(2, handler.annotatedClassNames.size());

        //check we got all annotated methods on each class
        assertEquals(7, handler.annotatedMethods.size());
        assertTrue(handler.annotatedMethods.contains(""org.eclipse.jetty.annotations.ClassA.a""));
        assertTrue(handler.annotatedMethods.contains(""org.eclipse.jetty.annotations.ClassA.b""));
        assertTrue(handler.annotatedMethods.contains(""org.eclipse.jetty.annotations.ClassA.c""));
        assertTrue(handler.annotatedMethods.contains(""org.eclipse.jetty.annotations.ClassA.d""));
        assertTrue(handler.annotatedMethods.contains(""org.eclipse.jetty.annotations.ClassA.l""));
        assertTrue(handler.annotatedMethods.contains(""org.eclipse.jetty.annotations.ClassB.a""));
        assertTrue(handler.annotatedMethods.contains(""org.eclipse.jetty.annotations.ClassB.c""));

        //check we got all annotated fields on each class
        assertEquals(1, handler.annotatedFields.size());
        assertEquals(""org.eclipse.jetty.annotations.ClassA.m"", handler.annotatedFields.get(0));
    }
",non-flaky,5
113772,salesforce_reactive-grpc,ReactiveStreamObserverPublisherClientTest.answer,"    @Test
    public void requestDelegates() {
        ClientCallStreamObserver<Object> obs = mock(ClientCallStreamObserver.class);
        Subscriber<Object> sub = mock(Subscriber.class);

        final AtomicReference<Subscription> subscription = new AtomicReference<Subscription>();
        doAnswer(new Answer() {
            @Override
            public Object answer(InvocationOnMock invocationOnMock) {
                subscription.set((Subscription) invocationOnMock.getArguments()[0]);
                return null;
            }
",non-flaky,5
162699,OpenAPITools_openapi-generator,ArrayTestTest.arrayArrayOfModelTest,"    @Test
    public void arrayArrayOfModelTest() {
        // TODO: test arrayArrayOfModel
    }
",non-flaky,5
225,Alluxio_alluxio,BlockMasterJournalIntegrationTest.journalBlockDeletion,"@Test
public void journalBlockDeletion() throws Exception {
    FileSystem fs = mCluster.getClient();
    BlockMaster blockMaster = mCluster.getLocalAlluxioMaster().getMasterProcess().getMaster(BlockMaster.class);
    AlluxioURI file = new AlluxioURI(""/test"");
    FileSystemTestUtils.createByteFile(fs, file, MUST_CACHE, 10);
    URIStatus status = fs.getStatus(file);
    Long blockId = status.getBlockIds().get(0);
    assertNotNull(blockMaster.getBlockInfo(blockId));
    fs.delete(file);
    WorkerNetAddress workerAddress = mCluster.getWorkerAddress();
    try {
        blockMaster.getBlockInfo(blockId);
        fail(""Expected the block to be deleted"");
    } catch (BlockInfoException e) {
    }
    mCluster.stopMasters();
    mCluster.startMasters();
    AlluxioMasterProcess masterProcess = mCluster.getLocalAlluxioMaster().getMasterProcess();
    try {
        masterProcess.getMaster(BlockMaster.class).getBlockInfo(blockId);
        fail(""Expected the block to be deleted after restart"");
    } catch (BlockInfoException e) {
    }
}",async wait,0
84567,apache_zookeeper,DistributedQueueTest.testElement2,"    @Test
    public void testElement2() throws Exception {
        createNremoveMelementTest(""/testElement2"", 10, 2);
    }
",non-flaky,5
59610,looly_hutool,ExpressionUtilTest.spELTest,"	@Test
	public void spELTest(){
		ExpressionEngine engine = new SpELEngine();

		final Dict dict = Dict.create()
				.set(""a"", 100.3)
				.set(""b"", 45)
				.set(""c"", -199.100);
		final Object eval = engine.eval(""#a-(#b-#c)"", dict);
		Assert.assertEquals(-143.8, (double)eval, 2);
	}
",non-flaky,5
133914,cdancy_jenkins-rest,QueueApiLiveTest.testGetQueue,"    @Test
    public void testGetQueue() {
        IntegerResponse job1 = api.jobsApi().build(null, ""QueueTest"");
        assertNotNull(job1);
        assertTrue(job1.errors().size() == 0);
        IntegerResponse job2 = api.jobsApi().build(null, ""QueueTest"");
        assertNotNull(job2);
        assertTrue(job2.errors().size() == 0);
        List<QueueItem> queueItems = api().queue();
        assertTrue(queueItems.size() > 0);
        boolean foundLastKickedJob = false;
        for (QueueItem item : queueItems) {
            if (item.id() == job2.value()) {
                foundLastKickedJob = true;
                break;
            }
        }
        assertTrue(foundLastKickedJob);
    }
",non-flaky,5
20957,NationalSecurityAgency_timely,MetricAgeOffFilterTest.testDefaultMissing,"    @Test(expected = IllegalArgumentException.class)
    public void testDefaultMissing() throws Exception {
        MetricAgeOffFilter filter = new MetricAgeOffFilter();
        HashMap<String, String> options = new HashMap<>();
        filter.init(null, options, null);
    }
",non-flaky,5
179453,abel533_Mapper,VersionTest.testUpdate,"    @Test
    public void testUpdate() {
        SqlSession sqlSession = getSqlSession();
        try {
            UserTimestampMapper mapper = sqlSession.getMapper(UserTimestampMapper.class);
            UserTimestamp user = mapper.selectByPrimaryKey(999);
            assertNotNull(user);
            Timestamp joinDate = user.getJoinDate();
            int count = mapper.updateByPrimaryKey(user);
            assertEquals(1, count);

            user = mapper.selectByPrimaryKey(999);
            assertFalse(joinDate.equals(user.getJoinDate()));
        } finally {
            sqlSession.close();
        }
    }
",non-flaky,5
297,apache_hadoop,TestWrites.testCheckSequential,"  @Test
  public void testCheckSequential() throws IOException {
    DFSClient dfsClient = Mockito.mock(DFSClient.class);
    Nfs3FileAttributes attr = new Nfs3FileAttributes();
    HdfsDataOutputStream fos = Mockito.mock(HdfsDataOutputStream.class);
    Mockito.when(fos.getPos()).thenReturn((long) 0);
    NfsConfiguration config = new NfsConfiguration();

    config.setBoolean(NfsConfigKeys.LARGE_FILE_UPLOAD, false);
    OpenFileCtx ctx = new OpenFileCtx(fos, attr, ""/dumpFilePath"", dfsClient,
        new ShellBasedIdMapping(config), false, config);
    
    ctx.getPendingWritesForTest().put(new OffsetRange(5, 10),
        new WriteCtx(null, 0, 0, 0, null, null, null, 0, false, null));
    ctx.getPendingWritesForTest().put(new OffsetRange(10, 15),
        new WriteCtx(null, 0, 0, 0, null, null, null, 0, false, null));
    ctx.getPendingWritesForTest().put(new OffsetRange(20, 25),
        new WriteCtx(null, 0, 0, 0, null, null, null, 0, false, null));

    assertTrue(!ctx.checkSequential(5, 4));
    assertTrue(ctx.checkSequential(9, 5));
    assertTrue(ctx.checkSequential(10, 5));
    assertTrue(ctx.checkSequential(14, 5));
    assertTrue(!ctx.checkSequential(15, 5));
    assertTrue(!ctx.checkSequential(20, 5));
    assertTrue(!ctx.checkSequential(25, 5));
    assertTrue(!ctx.checkSequential(999, 5));
  }
",non-flaky,5
330,androidx_androidx,invalidationInAnotherInstance_closed,"@Test
public void invalidationInAnotherInstance_closed() throws Exception {
    final SampleDatabase db1 = openDatabase(true);
    final SampleDatabase db2 = openDatabase(true);
    final SampleDatabase db3 = openDatabase(true);
    final CountDownLatch invalidated1 = prepareTableObserver(db1);
    final Pair<CountDownLatch, CountDownLatch> changed1 = prepareLiveDataObserver(db1);
    final CountDownLatch invalidated2 = prepareTableObserver(db2);
    final Pair<CountDownLatch, CountDownLatch> changed2 = prepareLiveDataObserver(db2);
    final CountDownLatch invalidated3 = prepareTableObserver(db3);
    final Pair<CountDownLatch, CountDownLatch> changed3 = prepareLiveDataObserver(db3);
    db2.getCustomerDao().insert(CUSTOMER_1);
    assertTrue(invalidated1.await(3, TimeUnit.SECONDS));
    assertTrue(changed1.first.await(3, TimeUnit.SECONDS));
    assertTrue(invalidated2.await(3, TimeUnit.SECONDS));
    assertTrue(changed2.first.await(3, TimeUnit.SECONDS));
    assertTrue(invalidated3.await(3, TimeUnit.SECONDS));
    assertTrue(changed3.first.await(3, TimeUnit.SECONDS));
    db3.close();
    db2.getCustomerDao().insert(CUSTOMER_2);
    assertTrue(changed1.second.await(3, TimeUnit.SECONDS));
    assertTrue(changed2.second.await(3, TimeUnit.SECONDS));
    assertFalse(changed3.second.await(300, TimeUnit.MILLISECONDS));
}",async wait,0
135017,undertow-io_undertow,AjpClientTestCase.testConnectionClose,"    @Test
    public void testConnectionClose() throws Exception {
        //
        final UndertowClient client = createClient();

        final CountDownLatch latch = new CountDownLatch(1);
        final ClientConnection connection = client.connect(ADDRESS, worker, DefaultServer.getBufferPool(), OptionMap.EMPTY).get();
        try {
            ClientRequest request = new ClientRequest().setPath(MESSAGE).setMethod(Methods.GET);
            request.getRequestHeaders().put(Headers.HOST, DefaultServer.getHostAddress());
            final List<ClientResponse> responses = new CopyOnWriteArrayList<>();
            request.getRequestHeaders().add(Headers.CONNECTION, Headers.CLOSE.toString());
            connection.sendRequest(request, createClientCallback(responses, latch));
            latch.await();
            final ClientResponse response = responses.iterator().next();
            Assert.assertEquals(message, response.getAttachment(RESPONSE_BODY));
            Assert.assertEquals(false, connection.isOpen());
        } finally {
            IoUtils.safeClose(connection);
        }

    }
",non-flaky,5
77546,dropwizard_dropwizard,ResourceTestRuleTest.testDefaultEofExceptionMapper,"    @Test
    public void testDefaultEofExceptionMapper() {
        assertThat(resourceTestRule.target(""/person/blah/eof-exception"")
                .request()
                .get().getStatus())
                .isEqualTo(Response.Status.BAD_REQUEST.getStatusCode());
    }
",non-flaky,5
26829,wildfly_wildfly,JndiPermissionTestCase.testCollection,"    @Test
    public void testCollection() {
        final PermissionCollection permissionCollection = new JndiPermission("""", """").newPermissionCollection();
        Enumeration<Permission> e;
        permissionCollection.add(new JndiPermission(""foo/bar"", ""lookup,bind""));
        assertTrue(permissionCollection.implies(new JndiPermission(""foo/bar"", ""lookup,bind"")));
        assertFalse(permissionCollection.implies(new JndiPermission(""foo/bar"", ""lookup,bind,unbind"")));
        assertFalse(permissionCollection.implies(new JndiPermission(""foo/bar"", ""unbind"")));
        assertNotNull(e = permissionCollection.elements());
        assertTrue(e.hasMoreElements());
        assertEquals(new JndiPermission(""foo/bar"", ""lookup,bind""), e.nextElement());
        assertFalse(e.hasMoreElements());
        permissionCollection.add(new JndiPermission(""foo/bar"", ""unbind""));
        assertTrue(permissionCollection.implies(new JndiPermission(""foo/bar"", ""lookup,bind"")));
        assertTrue(permissionCollection.implies(new JndiPermission(""foo/bar"", ""lookup,bind,unbind"")));
        assertTrue(permissionCollection.implies(new JndiPermission(""foo/bar"", ""unbind"")));
        assertNotNull(e = permissionCollection.elements());
        assertTrue(e.hasMoreElements());
        assertEquals(new JndiPermission(""foo/bar"", ""lookup,bind,unbind""), e.nextElement());
        assertFalse(e.hasMoreElements());
        permissionCollection.add(new JndiPermission(""-"", ""lookup""));
        assertTrue(permissionCollection.implies(new JndiPermission(""foo/bar"", ""lookup,bind"")));
        assertTrue(permissionCollection.implies(new JndiPermission(""foo/bar"", ""lookup,bind,unbind"")));
        assertTrue(permissionCollection.implies(new JndiPermission(""foo/bar"", ""unbind"")));
        assertTrue(permissionCollection.implies(new JndiPermission(""baz/zap"", ""lookup"")));
        assertTrue(permissionCollection.implies(new JndiPermission("""", ""lookup"")));
        assertFalse(permissionCollection.implies(new JndiPermission(""baz/zap"", ""lookup,bind,unbind"")));
        assertFalse(permissionCollection.implies(new JndiPermission(""baz/zap"", ""unbind"")));
        assertNotNull(e = permissionCollection.elements());
        assertTrue(e.hasMoreElements());
        assertEquals(new JndiPermission(""foo/bar"", ""lookup,bind,unbind""), e.nextElement());
        assertTrue(e.hasMoreElements());
        assertEquals(new JndiPermission(""-"", ""lookup""), e.nextElement());
        assertFalse(e.hasMoreElements());
        permissionCollection.add(new JndiPermission(""-"", ""bind,unbind""));
        assertTrue(permissionCollection.implies(new JndiPermission(""foo/bar"", ""lookup,bind"")));
        assertTrue(permissionCollection.implies(new JndiPermission(""foo/bar"", ""lookup,bind,unbind"")));
        assertTrue(permissionCollection.implies(new JndiPermission(""foo/bar"", ""unbind"")));
        assertTrue(permissionCollection.implies(new JndiPermission(""baz/zap"", ""lookup"")));
        assertTrue(permissionCollection.implies(new JndiPermission("""", ""lookup"")));
        assertTrue(permissionCollection.implies(new JndiPermission(""baz/zap"", ""lookup,bind,unbind"")));
        assertTrue(permissionCollection.implies(new JndiPermission(""baz/zap"", ""unbind"")));
        assertNotNull(e = permissionCollection.elements());
        assertTrue(e.hasMoreElements());
        assertEquals(new JndiPermission(""-"", ""lookup,bind,unbind""), e.nextElement());
        assertFalse(e.hasMoreElements());
    }
",non-flaky,5
156441,apache_commons-lang,DateUtilsFragmentTest.testDayOfYearFragmentInLargerUnitWithDate,"    @Test
    public void testDayOfYearFragmentInLargerUnitWithDate() {
        assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.DAY_OF_YEAR));
    }
",non-flaky,5
21213,androidx_androidx,PreferenceDataStoreTest.testGetLongWithDataStoreOnPref,"    @Test
    public void testGetLongWithDataStoreOnPref() {
        mPreference.setPreferenceDataStore(mDataStore);
        mScreen.addPreference(mPreference);

        mPreference.getLong(1L);

        verify(mDataStore, atLeastOnce()).getLong(eq(KEY), eq(1L));
    }
",non-flaky,5
98105,vert-x3_vertx-mongo-client,ParsingStreamTypeTest.only_valid_stream_type_values_allowed_as_config_property,"  @Test(expected = IllegalArgumentException.class)
  public void only_valid_stream_type_values_allowed_as_config_property() {
    // given
    final JsonObject withInvalidStreamType = new JsonObject().put(""streamType"", ""unrecognized"");

    // expect thrown
    new MongoClientOptionsParser(vertx, withInvalidStreamType).settings();
  }
",non-flaky,5
106655,Alluxio_alluxio,AlluxioFuseFileSystemTest.readOffset2,"  @Test
  public void readOffset2() throws Exception {
    // mocks set-up
    AlluxioURI expectedPath = BASE_EXPECTED_URI.join(""/foo/bar"");
    setUpOpenMock(expectedPath);

    FileInStream fakeInStream = mock(FileInStream.class);
    when(fakeInStream.read(any(byte[].class),
        anyInt(), anyInt())).then((Answer<Integer>) invocationOnMock -> {
          byte[] myDest = (byte[]) invocationOnMock.getArguments()[0];
          for (byte i = 0; i < (int) invocationOnMock.getArgument(2); i++) {
            myDest[i] = i;
          }
          return myDest.length;
        });
    AtomicInteger callCounter = new AtomicInteger();
    when(fakeInStream.remaining()).then((Answer<Long>) invocationOnMock -> {
      if (callCounter.getAndIncrement() == 0) {
        return 4L;
      } else {
        return 3L;
      }
    });

    when(mFileSystem.openFile(expectedPath)).thenReturn(fakeInStream);
    mFileInfo.flags.set(O_RDONLY.intValue());

    // prepare something to read to it
    Runtime r = Runtime.getSystemRuntime();
    Pointer ptr = r.getMemoryManager().allocateTemporary(4, true);

    // actual test
    mFuseFs.open(""/foo/bar"", mFileInfo);

    mFuseFs.read(""/foo/bar"", ptr, 4, 4, mFileInfo);
    final byte[] dst = new byte[0];
    ptr.get(0, dst, 0, 0);
    final byte[] expected = new byte[0];

    assertArrayEquals(""Source and dst data should be equal"", expected, dst);
  }
",non-flaky,5
170551,eclipse_jetty.project,TestRunAsAnnotation.testRunAsAnnotation,"    @Test
    public void testRunAsAnnotation() throws Exception
    {
        WebAppContext wac = new WebAppContext();
        
        //pre-add a servlet but not by descriptor
        ServletHolder holder = new ServletHolder();
        holder.setName(""foo1"");
        holder.setHeldClass(ServletC.class);
        holder.setInitOrder(1); //load on startup
        wac.getServletHandler().addServletWithMapping(holder, ""/foo/*"");
        
        //add another servlet of the same class, but as if by descriptor
        ServletHolder holder2 = new ServletHolder();
        holder2.setName(""foo2"");
        holder2.setHeldClass(ServletC.class);
        holder2.setInitOrder(1);
        wac.getServletHandler().addServletWithMapping(holder2, ""/foo2/*"");
        Resource fakeXml = Resource.newResource(new File(MavenTestingUtils.getTargetTestingDir(""run-as""), ""fake.xml""));
        wac.getMetaData().setOrigin(holder2.getName() + "".servlet.run-as"", new WebDescriptor(fakeXml));
        
        AnnotationIntrospector parser = new AnnotationIntrospector(wac);
        RunAsAnnotationHandler handler = new RunAsAnnotationHandler(wac);
        parser.registerHandler(handler);
        parser.introspect(new ServletC(), null);
        
        assertEquals(""admin"", holder.getRunAsRole());
        assertEquals(null, holder2.getRunAsRole());
    }
",non-flaky,5
20997,NationalSecurityAgency_timely,DownsampleTest.testDownsampleStartCalculation,"    @Test
    public void testDownsampleStartCalculation() throws Exception {
        long queryStart = System.currentTimeMillis() - 86400000;
        long period = 60000;
        long keyTimestamp = queryStart + (86400000 / 2 + 3256);

        Set<Long> expectedStartTimes = new HashSet<>();
        for (long i = queryStart; i < queryStart + 86400000; i += period) {
            expectedStartTimes.add(i);
        }
        assertEquals(1440, expectedStartTimes.size());

        long sampleStart = keyTimestamp - ((keyTimestamp - queryStart) % period);
        assertTrue(expectedStartTimes.contains(sampleStart));

    }
",non-flaky,5
203,apache_cassandra,testTimeWindows,"@Test
public void testTimeWindows()
{
    Long tstamp1 = 1451001601000L;
    Long tstamp2 = 1451088001000L;
    Long lowHour = 1451001600000L;
    assertTrue(getWindowBoundsInMillis(TimeUnit.HOURS, 1, tstamp1).left.compareTo(lowHour) == 0);
    assertTrue(getWindowBoundsInMillis(TimeUnit.MINUTES, 1, tstamp1).left.compareTo(lowHour) == 0);
    assertTrue(getWindowBoundsInMillis(TimeUnit.DAYS, 1, tstamp1).left.compareTo(lowHour) == 0 );
    assertTrue(getWindowBoundsInMillis(TimeUnit.DAYS, 2, tstamp2).left.compareTo(lowHour) == 0);
    return;
}",time,2
176787,ctco_cukes,ContextInflaterTest.testInflateGroups,"    @Test
    public void testInflateGroups() throws Exception {
        doReturn(Optional.of(""foo"")).when(world).get(""foo"");
        String value = inflater.inflateGroups(""{(foo)} bar"", Sets.newHashSet(""foo""));
        assertThat(value, equalTo(""foo bar""));
    }
",non-flaky,5
159623,liquibase_liquibase,H2IntegrationTest.diffToChangeLog,"    @Test
    public void diffToChangeLog() throws Exception{
        if (getDatabase() == null) {
            return;
        }

        runCompleteChangeLog();

        DiffResult diffResult = DiffGeneratorFactory.getInstance().compare(getDatabase(), null, new CompareControl());
        File outputFile = new File(""diffToChangeLog_"" + getDatabase().getShortName() + "".log"");
        if (outputFile.exists())
            outputFile.delete();
        PrintStream writer = new PrintStream(outputFile);

        new DiffToChangeLog(diffResult, new DiffOutputControl(true, true, true, null)).print(writer);
        writer.close();


    }
",non-flaky,5
357,wildfly_wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993.testLookup,"@Test
public void testLookup() throws Exception {
    final Name name = new CompositeName(""test"");
    final Object object = new Object();
    namingStore.bind(name, object);
    Object result = namingContext.lookup(name);
    assertEquals(object, result);
    result = testActionPermission(JndiPermission.ACTION_LOOKUP, namingContext, ""test"");
    assertEquals(object, result);
}",test order dependency,4
91398,OpenLCB_OpenLCB_Java,NodeIdTextFieldTest.testCTor,"    @Test
    public void testCTor() {
        Assume.assumeFalse(GraphicsEnvironment.isHeadless());
        NodeIdTextField t = new NodeIdTextField();
        Assert.assertNotNull(""exists"",t);
    }
",non-flaky,5
99759,apache_cassandra,AsyncStreamingInputPlusTest.consumeUntil_MultipleBuffer_Fails,"    @Test(expected = EOFException.class)
    public void consumeUntil_MultipleBuffer_Fails() throws IOException
    {
        consumeUntilTestCycle(2, 8, 0, 17);
    }
",non-flaky,5
89365,apache_samza,TestKafkaCheckpointManager.testCreateResources,"  @Test
  public void testCreateResources() {
    setupSystemFactory(config());
    KafkaCheckpointManager kafkaCheckpointManager = buildKafkaCheckpointManager(true, config());
    kafkaCheckpointManager.createResources();

    verify(this.createResourcesSystemAdmin).start();
    verify(this.createResourcesSystemAdmin).createStream(CHECKPOINT_SPEC);
    verify(this.createResourcesSystemAdmin).validateStream(CHECKPOINT_SPEC);
    verify(this.createResourcesSystemAdmin).stop();
  }
",non-flaky,5
162764,OpenAPITools_openapi-generator,EnumTestTest.testEnumTest,"    @Test
    public void testEnumTest() {
        // TODO: test EnumTest
    }
",non-flaky,5
98241,apache_jackrabbit,PerformanceTest.testPerformance,"    @Test
    public void testPerformance() throws Exception {
        testPerformance(""1.2"");
    }
",non-flaky,5
21198,androidx_androidx,PreferenceDataStoreTest.testPutStringWithDataStoreOnPref,"    @Test
    public void testPutStringWithDataStoreOnPref() {
        mPreference.setPreferenceDataStore(mDataStore);
        mScreen.addPreference(mPreference);
        putStringTestCommon();
    }
",non-flaky,5
89276,apache_samza,TestYarnRestJobStatusProvider.testGetJobStatuses,"  @Test
  public void testGetJobStatuses() throws IOException, InterruptedException {
    doReturn(APPS_RESPONSE.getBytes()).when(provider).httpGet(anyString());

    List<Job> jobs = Lists.newArrayList(
        new Job(""job1"", ""1""),  // Job with multiple applications, 1 RUNNING
        new Job(""job2"", ""1""),  // Job with 1 KILLED application
        new Job(""job3"", ""1""),  // Job with 1 RUNNING application
        new Job(""job4"", ""1"")); // Job not found in YARN
    provider.getJobStatuses(jobs);

    Collections.sort(jobs, (o1, o2) -> o1.getJobName().compareTo(o2.getJobName()));

    assertEquals(4, jobs.size());
    verifyJobStatus(jobs.get(0), ""job1"", JobStatus.STARTED, ""RUNNING"");
    verifyJobStatus(jobs.get(1), ""job2"", JobStatus.STOPPED, ""KILLED"");
    verifyJobStatus(jobs.get(2), ""job3"", JobStatus.STARTED, ""RUNNING"");
    verifyJobStatus(jobs.get(3), ""job4"", JobStatus.UNKNOWN, null);
  }
",non-flaky,5
91371,OpenLCB_OpenLCB_Java,TractionControlReplyMessageTest.testGetcommand,"    @Test
    public void testGetcommand(){
        NodeID src = new NodeID(new byte[]{6,5,5,4,4,3});
        NodeID dst = new NodeID(new byte[]{2,2,2,4,4,4});
        byte[] payload = new byte[]{0x40,0x01,0x00}; // Traciton Management Reply message
        TractionControlReplyMessage t = new TractionControlReplyMessage(src,dst,payload);
        Assert.assertEquals(""command"",0x40,t.getCmd());
    }
",non-flaky,5
137129,spring-projects_spring-framework,AbstractMethodMetadataTests.isAnnotatedWhenMatchesDirectAnnotationReturnsTrue,"	@Test
	public void isAnnotatedWhenMatchesDirectAnnotationReturnsTrue() {
		assertThat(getTagged(WithDirectAnnotation.class).isAnnotated(
				DirectAnnotation.class.getName())).isTrue();
	}
",non-flaky,5
94793,ktuukkan_marine-api,AISMessage21ParserTest.getNameExtension,"    @Test
    public void getNameExtension() throws Exception {
        assertEquals(""EXTENDED NAME"", msg.getNameExtension());
    }
",non-flaky,5
94682,square_okhttp,DiskLruCacheTest.writeFile,"  @Test public void abortAfterDetach() throws Exception {
  public void writeFile(File file, String content) throws Exception {
    BufferedSink sink = Okio.buffer(fileSystem.sink(file));
    sink.writeUtf8(content);
    sink.close();
  }
",non-flaky,5
175760,GoogleCloudPlatform_google-cloud-eclipse,GcpProjectQueryJobTest.testRun_abandonIfNotLatestJob,"  @Test
  public void testRun_abandonIfNotLatestJob()
      throws InterruptedException, ProjectRepositoryException {
    when(isLatestQueryJob.apply(queryJob)).thenReturn(false);

    queryJob.schedule();
    queryJob.join();

    verify(projectRepository).getProjects(credential);
    verify(projectSelector, never()).setProjects(projects);
  }
",non-flaky,5
113796,salesforce_reactive-grpc,CancellationPropagationIntegrationTest.prematureResponseStreamDisposalShouldNotThrowUnhandledException,"    @Test
    public void prematureResponseStreamDisposalShouldNotThrowUnhandledException() throws Exception {
        TestService svc = new TestService();
        serverRule.getServiceRegistry().addService(svc);

        RxNumbersGrpc.RxNumbersStub stub = RxNumbersGrpc.newRxStub(serverRule.getChannel());

        // slowly process the response stream
        Disposable subscription = stub.responsePressure(Empty.getDefaultInstance()).subscribe(n -> {
            Thread.sleep(1000);
        });

        subscription.dispose();

        Thread.sleep(200);
        errorRule.verifyNoError();
    }
",non-flaky,5
104692,apache_pinot,ConvertToRawIndexMinionClusterIntegrationTest.testPinotHelixResourceManagerAPIs,"  @Test
  public void testPinotHelixResourceManagerAPIs() {
    // Instance APIs
    Assert.assertEquals(_helixResourceManager.getAllInstances().size(), 5);
    Assert.assertEquals(_helixResourceManager.getOnlineInstanceList().size(), 5);
    Assert.assertEquals(_helixResourceManager.getOnlineUnTaggedBrokerInstanceList().size(), 0);
    Assert.assertEquals(_helixResourceManager.getOnlineUnTaggedServerInstanceList().size(), 0);

    // Table APIs
    String rawTableName = getTableName();
    String offlineTableName = TableNameBuilder.OFFLINE.tableNameWithType(rawTableName);
    String realtimeTableName = TableNameBuilder.REALTIME.tableNameWithType(rawTableName);
    List<String> tableNames = _helixResourceManager.getAllTables();
    Assert.assertEquals(tableNames.size(), 2);
    Assert.assertTrue(tableNames.contains(offlineTableName));
    Assert.assertTrue(tableNames.contains(realtimeTableName));
    Assert.assertEquals(_helixResourceManager.getAllRawTables(), Collections.singletonList(rawTableName));
    Assert.assertEquals(_helixResourceManager.getAllRealtimeTables(), Collections.singletonList(realtimeTableName));

    // Tenant APIs
    Assert.assertEquals(_helixResourceManager.getAllBrokerTenantNames(), Collections.singleton(""TestTenant""));
    Assert.assertEquals(_helixResourceManager.getAllServerTenantNames(), Collections.singleton(""TestTenant""));
  }
",non-flaky,5
98351,Kong_unirest-java,JSONArrayTest.toString,"    @Test
        public String toString(){
            return ""Hello World"";
        }
",non-flaky,5
19492,eclipse_xtext-core,Bug367679Test.testValidatorExists_0,"	@Test 
	public void testValidatorExists_0() {
		assertValidatorExists();
	}
",non-flaky,5
53188,cloudfoundry_uaa,ExternalIdentityProviderDefinitionTest.testEquals,"    @Test
    public void testEquals() {
        ExternalIdentityProviderDefinition definition1 = new ExternalIdentityProviderDefinition();
        definition1.setAddShadowUserOnLogin(true);
        ExternalIdentityProviderDefinition definition2 = new ExternalIdentityProviderDefinition();
        definition2.setAddShadowUserOnLogin(false);

        assertNotEquals(definition1, definition2);
        definition2.setAddShadowUserOnLogin(true);
        assertEquals(definition1, definition2);
    }
",non-flaky,5
122595,vespa-engine_vespa,FileFinderTest.age_filter_test,"        @Test
        public void age_filter_test() {
            Path path = Paths.get(""/my/fake/path"");
            when(attributes.lastModifiedTime()).thenReturn(FileTime.from(Instant.now().minus(Duration.ofHours(1))));
            FileFinder.FileAttributes fileAttributes = new FileFinder.FileAttributes(path, attributes);

            assertFalse(FileFinder.olderThan(Duration.ofMinutes(61)).test(fileAttributes));
            assertTrue(FileFinder.olderThan(Duration.ofMinutes(59)).test(fileAttributes));

            assertTrue(FileFinder.youngerThan(Duration.ofMinutes(61)).test(fileAttributes));
            assertFalse(FileFinder.youngerThan(Duration.ofMinutes(59)).test(fileAttributes));
        }
",non-flaky,5
33880,apache_camel,FhirLoadPageIT.testPrevious,"    @Test
    public void testPrevious() throws Exception {
        String url = ""Patient?_count=2"";
        Bundle bundle = this.fhirClient.search()
                .byUrl(url)
                .returnBundle(Bundle.class).execute();
        assertNotNull(bundle.getLink(IBaseBundle.LINK_NEXT));

        String nextPageLink = bundle.getLink(""next"").getUrl();
        bundle = this.fhirClient.loadPage().byUrl(nextPageLink).andReturnBundle(Bundle.class).execute();
        assertNotNull(bundle.getLink(IBaseBundle.LINK_PREV));

        // using org.hl7.fhir.instance.model.api.IBaseBundle message body for single parameter ""bundle""
        Bundle result = requestBody(""direct://PREVIOUS"", bundle);

        LOG.debug(""previous: "" + result);
        assertNotNull(result, ""previous result"");
    }
",non-flaky,5
110157,Wikidata_wikidata-toolkit,DirectoryManagerFactoryTest.createDirectoryManagerNoConstructor,"	@Test(expected = RuntimeException.class)
	public void createDirectoryManagerNoConstructor() throws IOException {
		DirectoryManagerFactory
				.setDirectoryManagerClass(TestDirectoryManager.class);
		DirectoryManagerFactory.createDirectoryManager(""/"", true);
	}
",non-flaky,5
170518,eclipse_jetty.project,TestAnnotationParser.testScanDuplicateClassesInJars,"    @Test
    public void testScanDuplicateClassesInJars() throws Exception
    {
        Resource testJar = Resource.newResource(MavenTestingUtils.getTestResourceFile(""tinytest.jar""));
        Resource testJar2 = Resource.newResource(MavenTestingUtils.getTestResourceFile(""tinytest_copy.jar""));
        AnnotationParser parser = new AnnotationParser();
        DuplicateClassScanHandler handler = new DuplicateClassScanHandler();
        Set<Handler> handlers = Collections.singleton(handler);
        parser.parse(handlers, testJar);
        parser.parse(handlers, testJar2);
        List<String> locations = handler.getParsedList(""org.acme.ClassOne"");
        assertNotNull(locations);
        assertEquals(2, locations.size());
        assertTrue(!(locations.get(0).equals(locations.get(1))));
    }
",non-flaky,5
21261,androidx_androidx,PreferencePersistTest.boolean_persistTwiceAndRetrieve_returnsSecondValue,"    @Test
    public void boolean_persistTwiceAndRetrieve_returnsSecondValue() {
        final boolean expected = false;

        mPreference.putBoolean(!expected);
        mPreference.putBoolean(expected);
        boolean result = mPreference.getBoolean(!expected);

        assertEquals(expected, result);
    }
",non-flaky,5
343,apache_hadoop,TestExportsTable.testInvalidFsExport,"  @Test
  public void testInvalidFsExport() throws IOException {
    NfsConfiguration config = new NfsConfiguration();
    MiniDFSCluster cluster = null;

    // Use emphral port in case tests are running in parallel
    config.setInt(""nfs3.mountd.port"", 0);
    config.setInt(""nfs3.server.port"", 0);
    config.set(""nfs.http.address"", ""0.0.0.0:0"");

    try {
      cluster = new MiniDFSCluster.Builder(config).numDataNodes(1).build();
      cluster.waitActive();
      config.set(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY,
          FsConstants.LOCAL_FS_URI.toString());

      exception.expect(FileSystemException.class);
      exception.
          expectMessage(""Only HDFS is supported as underlyingFileSystem, ""
              + ""fs scheme:file"");
      // Start nfs
      final Nfs3 nfsServer = new Nfs3(config);
      nfsServer.startServiceInternal(false);
    } finally {
      if (cluster != null) {
        cluster.shutdown();
      }
    }
  }
",non-flaky,5
53134,cloudfoundry_uaa,UaaMetricsEmitterTests.perUrlGroup_request_metrics,"    @Test
    public void perUrlGroup_request_metrics() throws Exception {
        Mockito.when(metricsUtils.getUaaMetrics(any())).thenReturn(uaaMetrics1);
        uaaMetricsEmitter.emitUrlGroupRequestMetrics();
        Mockito.verify(statsDClient).gauge(eq(""requests.ui.completed.count""), gt(0l));
        Mockito.verify(statsDClient).gauge(eq(""requests.ui.completed.time""), geq(300l));

        Mockito.verify(statsDClient).gauge(eq(""requests.static-content.completed.count""), gt(0l));
        Mockito.verify(statsDClient).gauge(eq(""requests.static-content.completed.time""), geq(23l));
    }
",non-flaky,5
89338,apache_samza,TestKafkaSystemAdminJava.testShouldAssembleMetadata,"  @Test
  public void testShouldAssembleMetadata() {
    Map<SystemStreamPartition, String> oldestOffsets = new ImmutableMap.Builder<SystemStreamPartition, String>()
        .put(new SystemStreamPartition(SYSTEM, ""stream1"", new Partition(0)), ""o1"")
        .put(new SystemStreamPartition(SYSTEM, ""stream2"", new Partition(0)), ""o2"")
        .put(new SystemStreamPartition(SYSTEM, ""stream1"", new Partition(1)), ""o3"")
        .put(new SystemStreamPartition(SYSTEM, ""stream2"", new Partition(1)), ""o4"")
        .build();

    Map<SystemStreamPartition, String> newestOffsets = new ImmutableMap.Builder<SystemStreamPartition, String>()
        .put(new SystemStreamPartition(SYSTEM, ""stream1"", new Partition(0)), ""n1"")
        .put(new SystemStreamPartition(SYSTEM, ""stream2"", new Partition(0)), ""n2"")
        .put(new SystemStreamPartition(SYSTEM, ""stream1"", new Partition(1)), ""n3"")
        .put(new SystemStreamPartition(SYSTEM, ""stream2"", new Partition(1)), ""n4"")
        .build();

    Map<SystemStreamPartition, String> upcomingOffsets = new ImmutableMap.Builder<SystemStreamPartition, String>()
        .put(new SystemStreamPartition(SYSTEM, ""stream1"", new Partition(0)), ""u1"")
        .put(new SystemStreamPartition(SYSTEM, ""stream2"", new Partition(0)), ""u2"")
        .put(new SystemStreamPartition(SYSTEM, ""stream1"", new Partition(1)), ""u3"")
        .put(new SystemStreamPartition(SYSTEM, ""stream2"", new Partition(1)), ""u4"")
        .build();

    Map<String, SystemStreamMetadata> metadata = assembleMetadata(oldestOffsets, newestOffsets, upcomingOffsets);
    assertNotNull(metadata);
    assertEquals(2, metadata.size());
    assertTrue(metadata.containsKey(""stream1""));
    assertTrue(metadata.containsKey(""stream2""));
    SystemStreamMetadata stream1Metadata = metadata.get(""stream1"");
    SystemStreamMetadata stream2Metadata = metadata.get(""stream2"");
    assertNotNull(stream1Metadata);
    assertNotNull(stream2Metadata);
    assertEquals(""stream1"", stream1Metadata.getStreamName());
    assertEquals(""stream2"", stream2Metadata.getStreamName());
    SystemStreamMetadata.SystemStreamPartitionMetadata expectedSystemStream1Partition0Metadata =
        new SystemStreamMetadata.SystemStreamPartitionMetadata(""o1"", ""n1"", ""u1"");
    SystemStreamMetadata.SystemStreamPartitionMetadata expectedSystemStream1Partition1Metadata =
        new SystemStreamMetadata.SystemStreamPartitionMetadata(""o3"", ""n3"", ""u3"");
    SystemStreamMetadata.SystemStreamPartitionMetadata expectedSystemStream2Partition0Metadata =
        new SystemStreamMetadata.SystemStreamPartitionMetadata(""o2"", ""n2"", ""u2"");
    SystemStreamMetadata.SystemStreamPartitionMetadata expectedSystemStream2Partition1Metadata =
        new SystemStreamMetadata.SystemStreamPartitionMetadata(""o4"", ""n4"", ""u4"");
    Map<Partition, SystemStreamMetadata.SystemStreamPartitionMetadata> stream1PartitionMetadata =
        stream1Metadata.getSystemStreamPartitionMetadata();
    Map<Partition, SystemStreamMetadata.SystemStreamPartitionMetadata> stream2PartitionMetadata =
        stream2Metadata.getSystemStreamPartitionMetadata();
    assertEquals(expectedSystemStream1Partition0Metadata, stream1PartitionMetadata.get(new Partition(0)));
    assertEquals(expectedSystemStream1Partition1Metadata, stream1PartitionMetadata.get(new Partition(1)));
    assertEquals(expectedSystemStream2Partition0Metadata, stream2PartitionMetadata.get(new Partition(0)));
    assertEquals(expectedSystemStream2Partition1Metadata, stream2PartitionMetadata.get(new Partition(1)));
  }
",non-flaky,5
26706,MundaneImmortal_pair-distribution-app,PairTest.testToString,"	@Test
	public void testToString()  {
		Pair subject = new Pair(Arrays.asList(new Developer(""dev1"")));
		
		assertThat(subject.toString(), is(equalTo(""Pair [devs=[dev1], opsPair=false, locked=false]"")));
	}
",non-flaky,5
94616,square_okhttp,URLConnectionTest.lookup,"  @Test public void unexpectedExceptionSync() throws Exception {
          @Override public List<InetAddress> lookup(String hostname) {
            throw new RuntimeException(""boom!"");
          }
",non-flaky,5
97954,ReactiveX_RxJava,ConcatTests.testConcatSimple,"    @Test
    public void testConcatSimple() {
        Observable<String> o1 = Observable.from(""one"", ""two"");
        Observable<String> o2 = Observable.from(""three"", ""four"");

        List<String> values = Observable.concat(o1, o2).toList().toBlockingObservable().single();

        assertEquals(""one"", values.get(0));
        assertEquals(""two"", values.get(1));
        assertEquals(""three"", values.get(2));
        assertEquals(""four"", values.get(3));
    }
",non-flaky,5
156136,soot-oss_soot,PackManagerTest.testDisableUnusedLocalEliminatorInJBPhase,"    @Test
    public void testDisableUnusedLocalEliminatorInJBPhase() {
        {
            // default UnusedLocalEliminator enabled
            setup();
            Scene.v().loadNecessaryClasses();
            PackManager.v().runBodyPacks();
            SootClass cls = Scene.v().getSootClass(""Example"");
            SootMethod bar = cls.getMethodByName(""bar"");
            List<String> actual = bodyAsStrings(bar.getActiveBody());
            List<String> expected = expectedBody(""r1 := @this: Example"",
                    ""i0 := @parameter0: int"",
                    ""i1 := @parameter1: int"",
                    ""i2 = i0 * i1"",
                    ""$r0 = <java.lang.System: java.io.PrintStream out>"",
                    ""virtualinvoke $r0.<java.io.PrintStream: void println(int)>(i2)"",
                    ""return"");
        }
        {
            //disable UnusedLocalEliminator
            setup();
            Options.v().setPhaseOption(""jb.sils"", ""enabled:false"");// this transformer calls a lot of other transformers
            Options.v().setPhaseOption(""jb.cp-ule"", ""enabled:false"");
            Scene.v().loadNecessaryClasses();
            PackManager.v().runBodyPacks();
            SootClass cls = Scene.v().getSootClass(""Example"");
            SootMethod bar = cls.getMethodByName(""bar"");
            List<String> actual = bodyAsStrings(bar.getActiveBody());
            List<String> expected = expectedBody(""r1 := @this: Example"",
                    ""i0 := @parameter0: int"",
                    ""i1 := @parameter1: int"",
                    ""i2 = i0 * i1"",
                    ""z0 = 0"",
                    ""$r0 = <java.lang.System: java.io.PrintStream out>"",
                    ""virtualinvoke $r0.<java.io.PrintStream: void println(int)>(i2)"",
                    ""return"");
        }
    }
",non-flaky,5
311,apache_hadoop,TestRpcProgramNfs3.testRmdir,"  @Test(timeout = 60000)
  public void testRmdir() throws Exception {
    HdfsFileStatus status = nn.getRpcServer().getFileInfo(testdir);
    long dirId = status.getFileId();
    int namenodeId = Nfs3Utils.getNamenodeId(config);
    XDR xdr_req = new XDR();
    FileHandle handle = new FileHandle(dirId, namenodeId);
    RMDIR3Request req = new RMDIR3Request(handle, ""foo"");
    req.serialize(xdr_req);

    // Attempt by an unprivileged user should fail.
    RMDIR3Response response1 = nfsd.rmdir(xdr_req.asReadOnlyWrap(),
        securityHandlerUnpriviledged,
        new InetSocketAddress(""localhost"", 1234));
    assertEquals(""Incorrect return code:"", Nfs3Status.NFS3ERR_ACCES,
        response1.getStatus());

    // Attempt by a privileged user should pass.
    RMDIR3Response response2 = nfsd.rmdir(xdr_req.asReadOnlyWrap(),
        securityHandler, new InetSocketAddress(""localhost"", 1234));
    assertEquals(""Incorrect return code:"", Nfs3Status.NFS3_OK,
        response2.getStatus());
  }
",non-flaky,5
176827,ctco_cukes,DnComparatorTest.sort,"    @Test
    public void sort() throws Exception {
        List<String> dns = new ArrayList<>(Arrays.asList(
            ""cn=root"",
            ""cn=a,cn=root"",
            ""cn=b,cn=root"",
            ""cn=c,cn=a,cn=root""
        ));
        Collections.sort(dns, comparator);
        assertThat(dns.get(0), is(""cn=root""));
        assertThat(dns.get(1), is(""cn=a,cn=root""));
        assertThat(dns.get(2), is(""cn=c,cn=a,cn=root""));
        assertThat(dns.get(3), is(""cn=b,cn=root""));
    }
",non-flaky,5
122551,vespa-engine_vespa,SystemCtlTesterTest.return_expectations,"    @Test
    public void return_expectations() {
        assertSystemCtlMethod(sct -> sct.expectEnable(unit), sc -> sc.enable(unit).converge(context));
        assertSystemCtlMethod(sct -> sct.expectDisable(unit), sc -> sc.disable(unit).converge(context));
        assertSystemCtlMethod(sct -> sct.expectStart(unit), sc -> sc.start(unit).converge(context));
        assertSystemCtlMethod(sct -> sct.expectStop(unit), sc -> sc.stop(unit).converge(context));
        assertSystemCtlMethod(sct -> sct.expectServiceExists(unit), sc -> sc.serviceExists(context, unit));
        assertSystemCtlMethod(sct -> sct.expectIsActive(unit), sc -> sc.isActive(context, unit));
    }
",non-flaky,5
105,apache_hadoop,TestRPCCompatibility.testVersion2ClientVersion2Server,"@Test
public void testVersion2ClientVersion2Server() throws Exception {
    ProtocolSignature.resetCache();
    TestImpl2 impl = new TestImpl2();
    server = new RPC.Builder(conf).setProtocol(TestProtocol2.class).setInstance(impl).setBindAddress(ADDRESS).setPort(0).setNumHandlers(2).setVerbose(false).build();
    server.addProtocol(RPC_WRITABLE, TestProtocol0.class, impl);
    server.start();
    addr = NetUtils.getConnectAddress(server);
    Version2Client client = new Version2Client();
    client.ping();
    assertEquals(""hello"", client.echo(""hello""));
    assertEquals(-3, client.echo(3));
}",test order dependency,4
20954,NationalSecurityAgency_timely,MetricAgeOffIteratorTest.testMixed,"    @Test
    public void testMixed() throws Exception {
        SortedMap<Key, Value> table = new TreeMap<>();
        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.idle"", TEST_TIME), new byte[0], new byte[0], new byte[0],
                TEST_TIME), EMPTY_VALUE);
        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.idle"", TEST_TIME + 1), new byte[0], new byte[0],
                new byte[0], TEST_TIME + 1), EMPTY_VALUE);
        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.idle"", TEST_TIME + 2), new byte[0], new byte[0],
                new byte[0], TEST_TIME + 2), EMPTY_VALUE);
        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.idle"", TEST_TIME + 3), new byte[0], new byte[0],
                new byte[0], TEST_TIME + 3), EMPTY_VALUE);
        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.idle"", TEST_TIME + 4), new byte[0], new byte[0],
                new byte[0], TEST_TIME + 4), EMPTY_VALUE);
        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.idle"", TEST_TIME + 5), new byte[0], new byte[0],
                new byte[0], TEST_TIME + 5), EMPTY_VALUE);
        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME), new byte[0], new byte[0], new byte[0],
                TEST_TIME), EMPTY_VALUE);
        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME + 1), new byte[0], new byte[0],
                new byte[0], TEST_TIME + 1), EMPTY_VALUE);
        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME + 2), new byte[0], new byte[0],
                new byte[0], TEST_TIME + 2), EMPTY_VALUE);
        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME + 3), new byte[0], new byte[0],
                new byte[0], TEST_TIME + 3), EMPTY_VALUE);
        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME + 4), new byte[0], new byte[0],
                new byte[0], TEST_TIME + 4), EMPTY_VALUE);
        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME + 5), new byte[0], new byte[0],
                new byte[0], TEST_TIME + 5), EMPTY_VALUE);

        SortedKeyValueIterator<Key, Value> source = new SortedMapIterator(table);
        MetricAgeOffIterator iter = new MetricAgeOffIterator();
        HashMap<String, String> options = new HashMap<>();
        options.put(MetricAgeOffIterator.AGE_OFF_PREFIX + ""default"", Integer.toString(1 * ONE_DAY));
        iter.init(source, options, null);
        iter.seek(new Range(), columnFamilies, true);
        int seen = 0;
        while (iter.hasTop()) {
            Key k = iter.getTopKey();
            Assert.assertTrue(k.getTimestamp() >= TEST_TIME && k.getTimestamp() <= TEST_TIME + 5);
            seen++;
            iter.next();
        }
        Assert.assertEquals(12, seen);
    }
",non-flaky,5
77686,pholser_junit-quickcheck,PrimitivePropertyParameterTypesTest.shouldHold,"    @Test public void wrapperByte() {
        @Property public void shouldHold(Byte b) {
        }
",non-flaky,5
60,apache_zookeeper,BookieClientTest.testWriteGaps,"@Test
public void testWriteGaps() throws Exception {
    final Object notifyObject = new Object();
    byte[] passwd = new byte[20];
    Arrays.fill(passwd, ((byte) ('a')));
    InetSocketAddress addr = new InetSocketAddress(""127.0.0.1"", port);
    ResultStruct arc = new ResultStruct();
    BookieClient bc = new BookieClient(new ClientConfiguration(), channelFactory, executor);
    ChannelBuffer bb;
    bb = createByteBuffer(1, 1, 1);
    bc.addEntry(addr, 1, passwd, 1, bb, wrcb, null, FLAG_NONE);
    synchronized(arc) {
        bc.readEntry(addr, 1, 1, recb, arc, FLAG_NONE);
        arc.wait(1000);
        assertEquals(0, arc.rc);
        assertEquals(1, arc.entry.getInt());
    }
    bb = createByteBuffer(2, 1, 2);
    bc.addEntry(addr, 1, passwd, 2, bb, wrcb, null, FLAG_NONE);
    bb = createByteBuffer(3, 1, 3);
    bc.addEntry(addr, 1, passwd, 3, bb, wrcb, null, FLAG_NONE);
    bb = createByteBuffer(5, 1, 5);
    bc.addEntry(addr, 1, passwd, 5, bb, wrcb, null, FLAG_NONE);
    bb = createByteBuffer(7, 1, 7);
    bc.addEntry(addr, 1, passwd, 7, bb, wrcb, null, FLAG_NONE);
    synchronized(notifyObject) {
        bb = createByteBuffer(11, 1, 11);
        bc.addEntry(addr, 1, passwd, 11, bb, wrcb, notifyObject, FLAG_NONE);
        notifyObject.wait();
    }
    synchronized(arc) {
        bc.readEntry(addr, 1, 6, recb, arc, FLAG_NONE);
        arc.wait(1000);
        assertEquals(NoSuchEntryException, arc.rc);
    }
    synchronized(arc) {
        bc.readEntry(addr, 1, 7, recb, arc, FLAG_NONE);
        arc.wait(1000);
        assertEquals(0, arc.rc);
        assertEquals(7, arc.entry.getInt());
    }
    synchronized(arc) {
        bc.readEntry(addr, 1, 1, recb, arc, FLAG_NONE);
        arc.wait(1000);
        assertEquals(0, arc.rc);
        assertEquals(1, arc.entry.getInt());
    }
    synchronized(arc) {
        bc.readEntry(addr, 1, 2, recb, arc, FLAG_NONE);
        arc.wait(1000);
        assertEquals(0, arc.rc);
        assertEquals(2, arc.entry.getInt());
    }
    synchronized(arc) {
        bc.readEntry(addr, 1, 3, recb, arc, FLAG_NONE);
        arc.wait(1000);
        assertEquals(0, arc.rc);
        assertEquals(3, arc.entry.getInt());
    }
    synchronized(arc) {
        bc.readEntry(addr, 1, 4, recb, arc, FLAG_NONE);
        arc.wait(1000);
        assertEquals(NoSuchEntryException, arc.rc);
    }
    synchronized(arc) {
        bc.readEntry(addr, 1, 11, recb, arc, FLAG_NONE);
        arc.wait(1000);
        assertEquals(0, arc.rc);
        assertEquals(11, arc.entry.getInt());
    }
    synchronized(arc) {
        bc.readEntry(addr, 1, 5, recb, arc, FLAG_NONE);
        arc.wait(1000);
        assertEquals(0, arc.rc);
        assertEquals(5, arc.entry.getInt());
    }
    synchronized(arc) {
        bc.readEntry(addr, 1, 10, recb, arc, FLAG_NONE);
        arc.wait(1000);
        assertEquals(NoSuchEntryException, arc.rc);
    }
    synchronized(arc) {
        bc.readEntry(addr, 1, 12, recb, arc, FLAG_NONE);
        arc.wait(1000);
        assertEquals(NoSuchEntryException, arc.rc);
    }
    synchronized(arc) {
        bc.readEntry(addr, 1, 13, recb, arc, FLAG_NONE);
        arc.wait(1000);
        assertEquals(NoSuchEntryException, arc.rc);
    }
}",async wait,0
97997,ReactiveX_RxJava,MergeTests.onSubscribe,"    @Test
    public void testMergeCovariance4() {

        Observable<Movie> o1 = Observable.create(new OnSubscribeFunc<Movie>() {

            @Override
            public Subscription onSubscribe(Observer<? super Movie> o) {
                o.onNext(new HorrorMovie());
                o.onNext(new Movie());
                //                o.onNext(new Media()); // correctly doesn't compile
                o.onCompleted();
                return Subscriptions.empty();
            }
",non-flaky,5
86070,graylog2_graylog2-server,AggregationEventProcessorTest.createEventsWithFilter,"    @Test
    public void createEventsWithFilter() throws Exception {
        when(eventProcessorDependencyCheck.hasMessagesIndexedUpTo(any(DateTime.class))).thenReturn(true);

        final DateTime now = DateTime.now(DateTimeZone.UTC);
        final AbsoluteRange timerange = AbsoluteRange.create(now.minusHours(1), now.plusHours(1));

        final AggregationEventProcessorConfig config = AggregationEventProcessorConfig.builder()
                .query("""")
                .streams(ImmutableSet.of())
                .groupBy(ImmutableList.of())
                .series(ImmutableList.of())
                .conditions(null)
                .searchWithinMs(30000)
                .executeEveryMs(30000)
                .build();
        final EventDefinitionDto eventDefinitionDto = EventDefinitionDto.builder()
                .id(""dto-id-1"")
                .title(""Test Aggregation"")
                .description(""A test aggregation event processors"")
                .priority(1)
                .alert(false)
                .notificationSettings(EventNotificationSettings.withGracePeriod(60000))
                .config(config)
                .keySpec(ImmutableList.of())
                .build();
        final AggregationEventProcessorParameters parameters = AggregationEventProcessorParameters.builder()
                .timerange(timerange)
                .build();

        final AggregationEventProcessor eventProcessor = new AggregationEventProcessor(eventDefinitionDto, searchFactory, eventProcessorDependencyCheck, stateService, moreSearch, streamService, messages);

        assertThatCode(() -> eventProcessor.createEvents(eventFactory, parameters, (events) -> {})).doesNotThrowAnyException();

        verify(moreSearch, times(1)).scrollQuery(
                eq(config.query()),
                eq(config.streams()),
                eq(config.queryParameters()),
                eq(parameters.timerange()),
                eq(parameters.batchSize()),
                any(MoreSearch.ScrollCallback.class)
        );
        verify(searchFactory, never()).create(eq(config), eq(parameters), any(String.class), eq(eventDefinitionDto));
    }
",non-flaky,5
94718,ktuukkan_marine-api,SpeedOverGroundTest.minValueIsCorrect,"    @Test
    public void minValueIsCorrect() {
        assertTrue(SpeedOverGround.isCorrect(0));
    }
",non-flaky,5
104649,apache_pinot,OfflineClusterIntegrationTest.testCaseStatementWithLogicalTransformFunction,"  @Test
  public void testCaseStatementWithLogicalTransformFunction()
      throws Exception {
    String sqlQuery = ""SELECT ArrDelay"" + "", CASE WHEN ArrDelay > 50 OR ArrDelay < 10 THEN 10 ELSE 0 END""
        + "", CASE WHEN ArrDelay < 50 AND ArrDelay >= 10 THEN 10 ELSE 0 END"" + "" FROM mytable LIMIT 1000"";
    JsonNode response = postSqlQuery(sqlQuery, _brokerBaseApiUrl);
    JsonNode rows = response.get(""resultTable"").get(""rows"");
    assertEquals(response.get(""exceptions"").size(), 0);
    for (int i = 0; i < rows.size(); i++) {
      int row0 = rows.get(i).get(0).asInt();
      int row1 = rows.get(i).get(1).asInt();
      int row2 = rows.get(i).get(2).asInt();
      if (row0 > 50 || row0 < 10) {
        assertEquals(row1, 10);
      } else {
        assertEquals(row1, 0);
      }
      if (row0 < 50 && row0 >= 10) {
        assertEquals(row2, 10);
      } else {
        assertEquals(row2, 0);
      }
    }
  }
",non-flaky,5
77577,dropwizard_dropwizard,JerseyIgnoreRequestUserAgentHeaderFilterTest.getReturnUserAgentHeader,"    @Test
        public String getReturnUserAgentHeader(@HeaderParam(""User-Agent"") String userAgentHeader) {
            return userAgentHeader;
        }
",non-flaky,5
162369,testcontainers_testcontainers-java,LicenseAcceptanceTest.testForMissingNames,"    @Test(expected = IllegalStateException.class)
    public void testForMissingNames() {
        LicenseAcceptance.assertLicenseAccepted(""c"");
    }
",non-flaky,5
19487,eclipse_xtext-core,LengthOffsetLineTest.setUp,"	@Test public void testErrors1() throws Exception {
	public void setUp() throws Exception {
		super.setUp();
		with(DummyTestLanguageStandaloneSetup.class);
	}
",non-flaky,5
135725,Netflix_Hystrix,CommonHystrixCommandTests.run,"    @Test
    public void testExecutionHookSemaphoreRejectedUnsuccessfulFallback() {
        assertHooksOnFailFast(
                new Func0<C>() {
                    @Override
                    public C call() {
                        AbstractCommand.TryableSemaphore semaphore = new AbstractCommand.TryableSemaphoreActual(HystrixProperty.Factory.asProperty(2));

                        final C cmd1 = getLatentCommand(ExecutionIsolationStrategy.SEMAPHORE, ExecutionResult.SUCCESS, 500, FallbackResult.FAILURE, semaphore);
                        final C cmd2 = getLatentCommand(ExecutionIsolationStrategy.SEMAPHORE, ExecutionResult.SUCCESS, 500, FallbackResult.FAILURE, semaphore);

                        //saturate the semaphore
                        new Thread() {
                            @Override
                            public void run() {
                                cmd1.observe();
                            }
",non-flaky,5
137144,spring-projects_spring-framework,CachingMetadataReaderLeakTests.equals,"	@Test
				public boolean equals(Object obj) {
					return (obj == this);
				}
",non-flaky,5
177231,line_armeria,PropertiesEndpointGroupTest.propertiesWithDefaultPort,"    @Test
    public void propertiesWithDefaultPort() {
        final PropertiesEndpointGroup endpointGroupA = PropertiesEndpointGroup.builder(PROPS, ""serverA.hosts"")
                                                                              .defaultPort(80)
                                                                              .build();
        final PropertiesEndpointGroup endpointGroupB = PropertiesEndpointGroup.builder(PROPS, ""serverB.hosts"")
                                                                              .defaultPort(8080)
                                                                              .build();

        assertThat(endpointGroupA.endpoints()).containsExactlyInAnyOrder(Endpoint.parse(""127.0.0.1:8080""),
                                                                         Endpoint.parse(""127.0.0.1:8081""),
                                                                         Endpoint.parse(""127.0.0.1:80""));
        assertThat(endpointGroupB.endpoints()).containsExactlyInAnyOrder(Endpoint.parse(""127.0.0.1:8082""),
                                                                         Endpoint.parse(""127.0.0.1:8083""));
    }
",non-flaky,5
106650,Alluxio_alluxio,AlluxioFuseFileSystemTest.openWithoutDelay,"  @Test
  public void openWithoutDelay() throws Exception {
    AlluxioURI expectedPath = BASE_EXPECTED_URI.join(""/foo/bar"");
    setUpOpenMock(expectedPath);

    FileInStream is = mock(FileInStream.class);
    when(mFileSystem.openFile(expectedPath)).thenReturn(is);
    mFuseFs.open(""/foo/bar"", mFileInfo);
    verify(mFileSystem).openFile(expectedPath);
  }
",non-flaky,5
78321,apache_beam,ReduceFnRunnerTest.testFixedWindowsEowAndGcTogetherFireIfNonEmpty,"  @Test
  public void testFixedWindowsEowAndGcTogetherFireIfNonEmpty() throws Exception {
    ReduceFnTester<Integer, Iterable<Integer>, IntervalWindow> tester =
        ReduceFnTester.nonCombining(
            FixedWindows.of(Duration.millis(10)),
            DefaultTriggerStateMachine.of(),
            AccumulationMode.ACCUMULATING_FIRED_PANES,
            Duration.millis(50),
            ClosingBehavior.FIRE_IF_NON_EMPTY);

    tester.setAutoAdvanceOutputWatermark(true);

    tester.advanceInputWatermark(new Instant(0));
    injectElement(tester, 1);
    tester.advanceInputWatermark(new Instant(100));

    List<WindowedValue<Iterable<Integer>>> output = tester.extractOutput();
    assertThat(
        output,
        contains(
            isSingleWindowedValue(
                contains(1), 1, 0, 10, PaneInfo.createPane(true, true, Timing.ON_TIME))));
  }
",non-flaky,5
179467,abel533_Mapper,DateTimeTest.testInsert,"    @Test
    public void testInsert() {
        SqlSession sqlSession = getSqlSession();
        try {
            TimeModelMapper mapper = sqlSession.getMapper(TimeModelMapper.class);
            TimeModel timeModel = new TimeModel();
            timeModel.setId(3);
            Date now = new Date();
            timeModel.setTestDate(now);
            timeModel.setTestTime(now);
            timeModel.setTestDatetime(now);
            Assert.assertEquals(1, mapper.insert(timeModel));

            timeModel = mapper.selectByPrimaryKey(3);

            //ä¿å­åæ°æ®åºä¸­ä¸å­å¨æ¶é´é¨å
            Assert.assertEquals(toDate(now), toDate(timeModel.getTestDate()));
            Assert.assertEquals(toDate(now) + "" 00:00:00"", toDatetime(timeModel.getTestDate()));

            //æ¥æåæ¶é´é½æ
            Assert.assertEquals(toTime(now), toTime(timeModel.getTestTime()));
            Assert.assertEquals(toDatetime(now), toDatetime(timeModel.getTestTime()));

            Assert.assertEquals(toDatetime(now), toDatetime(timeModel.getTestDatetime()));
        } finally {
            sqlSession.close();
        }
    }
",non-flaky,5
97702,vojtechhabarta_typescript-generator,EnumConstantsExtensionTest.testInTypeScriptGenerator,"    @Test
    public void testInTypeScriptGenerator() {
        final Settings settings = new Settings();
        settings.newline = ""\n"";
        settings.outputFileType = TypeScriptFileType.implementationFile;
        settings.outputKind = TypeScriptOutputKind.global;
        settings.jsonLibrary = JsonLibrary.jackson2;
        settings.extensions.add(new EnumConstantsExtension());
        final String actual = new TypeScriptGenerator(settings).generateTypeScript(Input.from(Direction.class));
        Assert.assertTrue(actual.contains(""const Direction""));
        Assert.assertTrue(actual.contains(""North""));
    }
",non-flaky,5
19445,eclipse_xtext-core,TypeHierarchyHelperTest.testDublicateDerivedFeature,"	@Test
	public void testDublicateDerivedFeature() throws Exception {
		EClassInfo a = addClass(""a"");
		EClassInfo b = addClass(""b"");
		EClassInfo c = addClass(""c"");
		b.addSupertype(a);
		c.addSupertype(b);
		addAttribute(a, INT, ""f"");
		addAttribute(c, INT, ""f"");

		assertEquals(1, a.getEClass().getEStructuralFeatures().size());
		assertEquals(0, b.getEClass().getEStructuralFeatures().size());
		assertEquals(1, c.getEClass().getEStructuralFeatures().size());

		initializeHelper();
		helper.removeDuplicateDerivedFeatures();

		assertEquals(1, a.getEClass().getEStructuralFeatures().size());
		assertEquals(0, b.getEClass().getEStructuralFeatures().size());
		assertEquals(0, c.getEClass().getEStructuralFeatures().size());
	}
",non-flaky,5
156408,apache_commons-lang,FastDateFormatTest.testCheckDifferingStyles,"    @Test
    public void testCheckDifferingStyles() {
        final FastDateFormat shortShort = FastDateFormat.getDateTimeInstance(FastDateFormat.SHORT, FastDateFormat.SHORT, Locale.US);
        final FastDateFormat shortLong = FastDateFormat.getDateTimeInstance(FastDateFormat.SHORT, FastDateFormat.LONG, Locale.US);
        final FastDateFormat longShort = FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.SHORT, Locale.US);
        final FastDateFormat longLong = FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.LONG, Locale.US);

        assertNotEquals(shortShort, shortLong);
        assertNotEquals(shortShort, longShort);
        assertNotEquals(shortShort, longLong);
        assertNotEquals(shortLong, longShort);
        assertNotEquals(shortLong, longLong);
        assertNotEquals(longShort, longLong);
    }
",non-flaky,5
77501,dropwizard_dropwizard,NoAuthPrincipalEntityTest.tearDown,"    @AfterEach
    public void tearDown() throws Exception {
        super.tearDown();
    }
",non-flaky,5
89287,apache_samza,TestJobsResource.testPutBadJobStatus,"  @Test
  public void testPutBadJobStatus()
      throws IOException {
    Response resp = target(String.format(""v1/jobs/%s/%s"", MockJobProxy.JOB_INSTANCE_2_NAME, MockJobProxy.JOB_INSTANCE_2_ID))
        .queryParam(""status"", ""BADSTATUS"").request().put(Entity.form(new Form()));
    assertEquals(400, resp.getStatus());

    final Map<String, String> errorMessage = objectMapper.readValue(resp.readEntity(String.class), new TypeReference<Map<String, String>>() { });
    assertTrue(errorMessage.get(""message"").contains(""BADSTATUS""));
    resp.close();
  }
",non-flaky,5
95737,togglz_togglz,JDBCRepositoryAutoCommitTest.shouldUpdateWithAutoCommitEnabled,"    @Test
    public void shouldUpdateWithAutoCommitEnabled() {
        givenSomeDataSourceWithAutoCommitSetTo(true);
        whenTheFeatureIsEnabled();
        thenTheDatabaseShouldBeUpdated();
    }
",non-flaky,5
104661,apache_pinot,OfflineClusterIntegrationTest.testDistinctCountHll,"  @Test
  public void testDistinctCountHll()
      throws Exception {
    String query;

    // The Accurate value is 6538.
    query = ""SELECT distinctCount(FlightNum) FROM mytable "";
    assertEquals(postQuery(query).get(""aggregationResults"").get(0).get(""value"").asLong(), 6538);
    assertEquals(postSqlQuery(query, _brokerBaseApiUrl).get(""resultTable"").get(""rows"").get(0).get(0).asLong(), 6538);

    // Expected distinctCountHll with different log2m value from 2 to 19. The Accurate value is 6538.
    long[] expectedResults = new long[]{
        3504, 6347, 8877, 9729, 9046, 7672, 7538, 6993, 6649, 6651, 6553, 6525, 6459, 6523, 6532, 6544, 6538, 6539
    };

    for (int i = 2; i < 20; i++) {
      query = String.format(""SELECT distinctCountHLL(FlightNum, %d) FROM mytable "", i);
      assertEquals(postQuery(query).get(""aggregationResults"").get(0).get(""value"").asLong(), expectedResults[i - 2]);
      assertEquals(postSqlQuery(query, _brokerBaseApiUrl).get(""resultTable"").get(""rows"").get(0).get(0).asLong(),
          expectedResults[i - 2]);
    }

    // Default HLL is set as log2m=12
    query = ""SELECT distinctCountHLL(FlightNum) FROM mytable "";
    assertEquals(postQuery(query).get(""aggregationResults"").get(0).get(""value"").asLong(), expectedResults[10]);
    assertEquals(postSqlQuery(query, _brokerBaseApiUrl).get(""resultTable"").get(""rows"").get(0).get(0).asLong(),
        expectedResults[10]);
  }
",non-flaky,5
112744,hwang-pku_ormlite-core,DatabaseConnectionProxyTest.testQueryForLongStringNull,"	@Test
	public void testQueryForLongStringNull() throws Exception {
		DatabaseConnectionProxy proxy = new DatabaseConnectionProxy(null);
		assertEquals(0, proxy.queryForLong(""statment""));
		proxy.close();
	}
",non-flaky,5
33714,alibaba_fastjson,JSONScannerTest.isEOF2,"  @Test
  public void isEOF2() throws Throwable {

    // Arrange
    JSONScanner objectUnderTest = ((JSONScanner)Reflector.getInstance(""com.alibaba.fastjson.parser.JSONScanner""));
    objectUnderTest.hasSpecial = false;
    objectUnderTest.token = 0;
    objectUnderTest.locale = null;
    objectUnderTest.np = 0;
    objectUnderTest.features = 0;
    Reflector.setField(objectUnderTest, ""text"", null);
    objectUnderTest.calendar = null;
    objectUnderTest.matchStat = 0;
    objectUnderTest.bp = 1;
    Reflector.setField(objectUnderTest, ""len"", 0);
    objectUnderTest.stringDefaultValue = null;
    objectUnderTest.pos = 0;
    objectUnderTest.sp = 0;
    objectUnderTest.sbuf = null;
    objectUnderTest.ch = '\u0000';
    objectUnderTest.timeZone = null;
    objectUnderTest.eofPos = 0;

    // Act
    boolean retval = objectUnderTest.isEOF();

    // Assert result
    Assert.assertEquals(false, retval);

  }
",non-flaky,5
113710,salesforce_reactive-grpc,ServerErrorIntegrationTest.manyToMany,"    @Test
    public void manyToMany() {
        ReactorGreeterGrpc.ReactorGreeterStub stub = ReactorGreeterGrpc.newReactorStub(channel);
        Flux<HelloResponse> resp = Flux.just(HelloRequest.getDefaultInstance()).compose(stub::sayHelloBothStream);
        StepVerifier.create(resp)
                .verifyErrorMatches(t -> t instanceof StatusRuntimeException && ((StatusRuntimeException)t).getStatus() == Status.INTERNAL);
    }
",non-flaky,5
95682,togglz_togglz,FeatureVariationsTest.test,"    @Test
    public void test() {
        assertTrue(MyFeatures.F1.isActive());
        assertTrue(MyFeatures.F2.isActive() || !MyFeatures.F2.isActive());
        assertTrue(MyFeatures.F3.isActive() || !MyFeatures.F3.isActive());
    }
",non-flaky,5
104665,apache_pinot,OfflineClusterIntegrationTest.testAggregateMetadataAPI,"  @Test
  public void testAggregateMetadataAPI()
      throws IOException {
    JsonNode oneColumnResponse = JsonUtils
        .stringToJsonNode(sendGetRequest(_controllerBaseApiUrl + ""/tables/mytable/metadata?columns=DestCityMarketID""));
    assertEquals(oneColumnResponse.get(DISK_SIZE_IN_BYTES_KEY).asInt(), DISK_SIZE_IN_BYTES);
    assertEquals(oneColumnResponse.get(NUM_SEGMENTS_KEY).asInt(), NUM_SEGMENTS);
    assertEquals(oneColumnResponse.get(NUM_ROWS_KEY).asInt(), NUM_ROWS);
    assertEquals(oneColumnResponse.get(COLUMN_LENGTH_MAP_KEY).size(), 1);
    assertEquals(oneColumnResponse.get(COLUMN_CARDINALITY_MAP_KEY).size(), 1);

    JsonNode threeColumnsResponse = JsonUtils.stringToJsonNode(sendGetRequest(_controllerBaseApiUrl
        + ""/tables/mytable/metadata?columns=DivActualElapsedTime&columns=CRSElapsedTime&columns=OriginStateName""));
    assertEquals(threeColumnsResponse.get(DISK_SIZE_IN_BYTES_KEY).asInt(), DISK_SIZE_IN_BYTES);
    assertEquals(threeColumnsResponse.get(NUM_SEGMENTS_KEY).asInt(), NUM_SEGMENTS);
    assertEquals(threeColumnsResponse.get(NUM_ROWS_KEY).asInt(), NUM_ROWS);
    assertEquals(threeColumnsResponse.get(COLUMN_LENGTH_MAP_KEY).size(), 3);
    assertEquals(threeColumnsResponse.get(COLUMN_CARDINALITY_MAP_KEY).size(), 3);

    JsonNode zeroColumnResponse =
        JsonUtils.stringToJsonNode(sendGetRequest(_controllerBaseApiUrl + ""/tables/mytable/metadata""));
    assertEquals(zeroColumnResponse.get(DISK_SIZE_IN_BYTES_KEY).asInt(), DISK_SIZE_IN_BYTES);
    assertEquals(zeroColumnResponse.get(NUM_SEGMENTS_KEY).asInt(), NUM_SEGMENTS);
    assertEquals(zeroColumnResponse.get(NUM_ROWS_KEY).asInt(), NUM_ROWS);
    assertEquals(zeroColumnResponse.get(COLUMN_LENGTH_MAP_KEY).size(), 0);
    assertEquals(zeroColumnResponse.get(COLUMN_CARDINALITY_MAP_KEY).size(), 0);

    JsonNode allColumnResponse =
        JsonUtils.stringToJsonNode(sendGetRequest(_controllerBaseApiUrl + ""/tables/mytable/metadata?columns=*""));
    assertEquals(allColumnResponse.get(DISK_SIZE_IN_BYTES_KEY).asInt(), DISK_SIZE_IN_BYTES);
    assertEquals(allColumnResponse.get(NUM_SEGMENTS_KEY).asInt(), NUM_SEGMENTS);
    assertEquals(allColumnResponse.get(NUM_ROWS_KEY).asInt(), NUM_ROWS);
    assertEquals(allColumnResponse.get(COLUMN_LENGTH_MAP_KEY).size(), 82);
    assertEquals(allColumnResponse.get(COLUMN_CARDINALITY_MAP_KEY).size(), 82);

    allColumnResponse = JsonUtils.stringToJsonNode(sendGetRequest(
        _controllerBaseApiUrl + ""/tables/mytable/metadata?columns=CRSElapsedTime&columns=*&columns=OriginStateName""));
    assertEquals(allColumnResponse.get(DISK_SIZE_IN_BYTES_KEY).asInt(), DISK_SIZE_IN_BYTES);
    assertEquals(allColumnResponse.get(NUM_SEGMENTS_KEY).asInt(), NUM_SEGMENTS);
    assertEquals(allColumnResponse.get(NUM_ROWS_KEY).asInt(), NUM_ROWS);
    assertEquals(allColumnResponse.get(COLUMN_LENGTH_MAP_KEY).size(), 82);
    assertEquals(allColumnResponse.get(COLUMN_CARDINALITY_MAP_KEY).size(), 82);
  }
",non-flaky,5
122553,vespa-engine_vespa,ProcessFactoryImplTest.testSpawn,"    @Test
    public void testSpawn() {
        CommandLine commandLine = mock(CommandLine.class);
        when(commandLine.getArguments()).thenReturn(List.of(""program""));
        when(commandLine.getRedirectStderrToStdoutInsteadOfDiscard()).thenReturn(true);
        when(commandLine.programName()).thenReturn(""program"");
        Path outputPath;
        try (ChildProcess2Impl child = processFactory.spawn(commandLine)) {
            outputPath = child.getOutputPath();
            assertTrue(Files.exists(outputPath));
            assertEquals(""rw-------"", new UnixPath(outputPath).getPermissions());
            ArgumentCaptor<ProcessBuilder> processBuilderCaptor =
                    ArgumentCaptor.forClass(ProcessBuilder.class);
            verify(starter).start(processBuilderCaptor.capture());
            ProcessBuilder processBuilder = processBuilderCaptor.getValue();
            assertTrue(processBuilder.redirectErrorStream());
            ProcessBuilder.Redirect redirect = processBuilder.redirectOutput();
            assertEquals(ProcessBuilder.Redirect.Type.WRITE, redirect.type());
            assertEquals(outputPath.toFile(), redirect.file());
        }

        assertFalse(Files.exists(outputPath));
    }
",non-flaky,5
86075,graylog2_graylog2-server,PivotAggregationSearchTest.testExtractValuesWithoutGroupBy,"    @Test
    public void testExtractValuesWithoutGroupBy() throws Exception {
        final AbsoluteRange timerange = AbsoluteRange.create(DateTime.now(DateTimeZone.UTC).minusSeconds(3600), DateTime.now(DateTimeZone.UTC));
        final AggregationSeries seriesCount = AggregationSeries.create(""abc123"", AggregationFunction.COUNT, ""source"");
        final AggregationSeries seriesCountNoField = AggregationSeries.create(""abc123"", AggregationFunction.COUNT, """");
        final AggregationSeries seriesCard = AggregationSeries.create(""abc123"", AggregationFunction.CARD, ""source"");
        final AggregationEventProcessorConfig config = AggregationEventProcessorConfig.builder()
                .query("""")
                .streams(Collections.emptySet())
                .groupBy(Collections.emptyList())
                .series(ImmutableList.of(seriesCount, seriesCountNoField, seriesCard))
                .conditions(null)
                .searchWithinMs(30000)
                .executeEveryMs(30000)
                .build();
        final AggregationEventProcessorParameters parameters = AggregationEventProcessorParameters.builder()
                .streams(Collections.emptySet())
                .timerange(timerange)
                .batchSize(500)
                .build();

        final PivotAggregationSearch pivotAggregationSearch = new PivotAggregationSearch(
                config,
                parameters,
                ""test"",
                eventDefinition,
                searchJobService,
                queryEngine,
                EventsConfigurationTestProvider.create(),
                moreSearch,
                permittedStreams);

        final PivotResult pivotResult = PivotResult.builder()
                .id(""test"")
                .effectiveTimerange(timerange)
                .total(1)
                .addRow(PivotResult.Row.builder()
                        .key(ImmutableList.of(timerange.getTo().toString()))
                        .addValue(PivotResult.Value.create(ImmutableList.of(""metric/count/source/abc123""), 42, true, ""row-leaf""))
                        .addValue(PivotResult.Value.create(ImmutableList.of(""metric/count/<no-field>/abc123""), 23, true, ""row-leaf""))
                        .addValue(PivotResult.Value.create(ImmutableList.of(""metric/card/source/abc123""), 1, true, ""row-leaf""))
                        .source(""leaf"")
                        .build())
                .build();

        final ImmutableList<AggregationKeyResult> results = pivotAggregationSearch.extractValues(pivotResult);

        assertThat(results.size()).isEqualTo(1);

        assertThat(results.get(0)).isEqualTo(AggregationKeyResult.builder()
                .key(ImmutableList.of())
                .timestamp(timerange.getTo())
                .seriesValues(ImmutableList.of(
                        AggregationSeriesValue.builder()
                                .key(ImmutableList.of())
                                .value(42.0)
                                .series(seriesCount)
                                .build(),
                        AggregationSeriesValue.builder()
                                .key(ImmutableList.of())
                                .value(23.0)
                                .series(seriesCountNoField)
                                .build(),
                        AggregationSeriesValue.builder()
                                .key(ImmutableList.of())
                                .value(1.0)
                                .series(seriesCard)
                                .build()
                ))
                .build());
    }
",non-flaky,5
20926,NationalSecurityAgency_timely,TagListParserTest.testListCombine,"    @Test
    public void testListCombine() {
        List<Tag> tags = new ArrayList<>();
        tags.add(new Tag(""tag1"", ""value1""));
        tags.add(new Tag(""tag2"", ""value2""));
        String combined = new TagListParser().combine(tags);
        Assert.assertEquals(""tag1=value1,tag2=value2"", combined);
    }
",non-flaky,5
106662,Alluxio_alluxio,AlluxioFuseFileSystemTest.unlink,"  @Test
  public void unlink() throws Exception {
    AlluxioURI expectedPath = BASE_EXPECTED_URI.join(""/foo/bar"");
    doNothing().when(mFileSystem).delete(expectedPath);
    mFuseFs.unlink(""/foo/bar"");
    verify(mFileSystem).delete(expectedPath);
  }
",non-flaky,5
77676,pholser_junit-quickcheck,PrimitivePropertyParameterTypesTest.shouldHold,"    @Test public void wrapperBooleanWithValuesOf() {
        @Property public void shouldHold(@ValuesOf Boolean b) {
            values.add(b);
        }
",non-flaky,5
341,apache_hadoop,TestExportsTable.testViewFsRootExportPoint,"  @Test
  public void testViewFsRootExportPoint() throws IOException {
    NfsConfiguration config = new NfsConfiguration();
    MiniDFSCluster cluster = null;
    String clusterName = RandomStringUtils.randomAlphabetic(10);

    String exportPoint = ""/"";
    config.setStrings(NfsConfigKeys.DFS_NFS_EXPORT_POINT_KEY, exportPoint);
    config.set(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY,
        FsConstants.VIEWFS_SCHEME + ""://"" + clusterName);
    // Use emphral port in case tests are running in parallel
    config.setInt(""nfs3.mountd.port"", 0);
    config.setInt(""nfs3.server.port"", 0);
    config.set(""nfs.http.address"", ""0.0.0.0:0"");

    try {
      cluster =
          new MiniDFSCluster.Builder(config).nnTopology(
              MiniDFSNNTopology.simpleFederatedTopology(2))
              .numDataNodes(2)
              .build();
      cluster.waitActive();
      DistributedFileSystem hdfs1 = cluster.getFileSystem(0);
      DistributedFileSystem hdfs2 = cluster.getFileSystem(1);
      cluster.waitActive();
      Path base1 = new Path(""/user1"");
      Path base2 = new Path(""/user2"");
      hdfs1.delete(base1, true);
      hdfs2.delete(base2, true);
      hdfs1.mkdirs(base1);
      hdfs2.mkdirs(base2);
      ConfigUtil.addLink(config, clusterName, ""/hdfs1"",
          hdfs1.makeQualified(base1).toUri());
      ConfigUtil.addLink(config, clusterName, ""/hdfs2"",
          hdfs2.makeQualified(base2).toUri());

      exception.expect(FileSystemException.class);
      exception.
          expectMessage(""Only HDFS is supported as underlyingFileSystem, ""
              + ""fs scheme:viewfs"");
      // Start nfs
      final Nfs3 nfsServer = new Nfs3(config);
      nfsServer.startServiceInternal(false);
    } finally {
      if (cluster != null) {
        cluster.shutdown();
      }
    }
  }
",non-flaky,5
133906,cdancy_jenkins-rest,ConfigurationAsCodeApiLiveTest.testBadCascApply,"    @Test
    public void testBadCascApply() {
        String config = payloadFromResource(""/casc-bad.yml"");
        RequestStatus success = api().apply(config);
        assertFalse(success.value());
    }
",non-flaky,5
76924,Tencent_Firestorm,RssShuffleDataIteratorTest.readTest3,"  @Test
  public void readTest3() throws Exception {
    String basePath = HDFS_URI + ""readTest3"";
    HdfsShuffleWriteHandler writeHandler1 =
        new HdfsShuffleWriteHandler(""appId"", 0, 0, 1, basePath, ""test3_1"", conf);
    HdfsShuffleWriteHandler writeHandler2 =
        new HdfsShuffleWriteHandler(""appId"", 0, 0, 1, basePath, ""test3_2"", conf);

    Map<String, String> expectedData = Maps.newHashMap();
    Roaring64NavigableMap blockIdBitmap = Roaring64NavigableMap.bitmapOf();
    Roaring64NavigableMap taskIdBitmap = Roaring64NavigableMap.bitmapOf(0);
    writeTestData(writeHandler1, 2, 5, expectedData,
        blockIdBitmap, ""key1"", KRYO_SERIALIZER, 0);
    writeTestData(writeHandler2, 2, 5, expectedData,
        blockIdBitmap, ""key2"", KRYO_SERIALIZER, 0);

    // duplicate file created, it should be used in product environment
    String shuffleFolder = basePath + ""/appId/0/0-1"";
    FileUtil.copy(fs, new Path(shuffleFolder + ""/test3_1_0.data""), fs,
        new Path(shuffleFolder + ""/test3_1_0.cp.data""), false, conf);
    FileUtil.copy(fs, new Path(shuffleFolder + ""/test3_1_0.index""), fs,
        new Path(shuffleFolder + ""/test3_1_0.cp.index""), false, conf);
    FileUtil.copy(fs, new Path(shuffleFolder + ""/test3_2_0.data""), fs,
        new Path(shuffleFolder + ""/test3_2_0.cp.data""), false, conf);
    FileUtil.copy(fs, new Path(shuffleFolder + ""/test3_2_0.index""), fs,
        new Path(shuffleFolder + ""/test3_2_0.cp.index""), false, conf);

    RssShuffleDataIterator rssShuffleDataIterator = getDataIterator(basePath, blockIdBitmap, taskIdBitmap);

    validateResult(rssShuffleDataIterator, expectedData, 20);
  }
",non-flaky,5
84654,apache_zookeeper,ZooKeeperTest.testParseWithEmptyQuotes,"    @Test
    public void testParseWithEmptyQuotes() throws Exception {
        final ZooKeeper zk = createClient();
        ZooKeeperMain zkMain = new ZooKeeperMain(zk);
        String cmdstring = ""create /node ''"";
        zkMain.cl.parseCommand(cmdstring);
        assertEquals(zkMain.cl.getNumArguments(), 3, ""empty quotes should produce arguments"");
        assertEquals(zkMain.cl.getCmdArgument(0), ""create"", ""create is not taken as first argument"");
        assertEquals(zkMain.cl.getCmdArgument(1), ""/node"", ""/node is not taken as second argument"");
        assertEquals(zkMain.cl.getCmdArgument(2), """", ""empty string is not taken as third argument"");
    }
",non-flaky,5
33661,alibaba_fastjson,SerializeWriterTest.testWriteLargeBasicStr,"    @Test
    public void testWriteLargeBasicStr() throws UnsupportedEncodingException {
        String tmp = new String(IOUtils.DIGITS);
        StringBuilder builder = new StringBuilder();
        for (int i = 0; i < 200; i++) {
            builder.append(tmp);
        }
        this.doTestWrite(builder.toString());
    }
",non-flaky,5
33685,alibaba_fastjson,JSONScannerTest.checkDate8,"  @Test
  public void checkDate8() throws Throwable {

    // Arrange
    char y0 = '2';
    char y1 = '\u0011';
    char y2 = '0';
    char y3 = '\u0830';
    char M0 = '1';
    char M1 = '\u0000';
    int d0 = 0;
    int d1 = 0;

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkDate"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""int""), Reflector.forName(""int""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, y0, y1, y2, y3, M0, M1, d0, d1);

    // Assert result
    Assert.assertEquals(false, retval);

  }
",non-flaky,5
104657,apache_pinot,OfflineClusterIntegrationTest.testCaseInsensitivity,"  @Test
  public void testCaseInsensitivity() {
    int daysSinceEpoch = 16138;
    int hoursSinceEpoch = 16138 * 24;
    int secondsSinceEpoch = 16138 * 24 * 60 * 60;
    List<String> baseQueries = Arrays.asList(""SELECT * FROM mytable"",
        ""SELECT DaysSinceEpoch, timeConvert(DaysSinceEpoch,'DAYS','SECONDS') FROM mytable"",
        ""SELECT DaysSinceEpoch, timeConvert(DaysSinceEpoch,'DAYS','SECONDS') FROM mytable order by DaysSinceEpoch ""
            + ""limit 10000"",
        ""SELECT DaysSinceEpoch, timeConvert(DaysSinceEpoch,'DAYS','SECONDS') FROM mytable order by timeConvert""
            + ""(DaysSinceEpoch,'DAYS','SECONDS') DESC limit 10000"",
        ""SELECT count(*) FROM mytable WHERE DaysSinceEpoch = "" + daysSinceEpoch,
        ""SELECT count(*) FROM mytable WHERE timeConvert(DaysSinceEpoch,'DAYS','HOURS') = "" + hoursSinceEpoch,
        ""SELECT count(*) FROM mytable WHERE timeConvert(DaysSinceEpoch,'DAYS','SECONDS') = "" + secondsSinceEpoch,
        ""SELECT MAX(timeConvert(DaysSinceEpoch,'DAYS','SECONDS')) FROM mytable"",
        ""SELECT COUNT(*) FROM mytable GROUP BY dateTimeConvert(DaysSinceEpoch,'1:DAYS:EPOCH','1:HOURS:EPOCH',""
            + ""'1:HOURS')"");
    List<String> queries = new ArrayList<>();
    baseQueries.forEach(q -> queries.add(q.replace(""mytable"", ""MYTABLE"").replace(""DaysSinceEpoch"", ""DAYSSinceEpOch"")));
    baseQueries
        .forEach(q -> queries.add(q.replace(""mytable"", ""MYDB.MYTABLE"").replace(""DaysSinceEpoch"", ""DAYSSinceEpOch"")));

    for (String query : queries) {
      try {
        JsonNode response = postQuery(query);
        assertTrue(response.get(""numSegmentsProcessed"").asLong() >= 1L, ""PQL: "" + query + "" failed"");

        response = postSqlQuery(query);
        assertTrue(response.get(""numSegmentsProcessed"").asLong() >= 1L, ""SQL: "" + query + "" failed"");
      } catch (Exception e) {
        // Fail the test when exception caught
        throw new RuntimeException(""Got Exceptions from query - "" + query);
      }
    }
  }
",non-flaky,5
111,apache_hadoop,TestPathData.testWithStringAndConfForBuggyPath,"@Test
public void testWithStringAndConfForBuggyPath() throws Exception {
    dirString = ""file"" ;
    testDir = new Path(dirString);
    item = new PathData(dirString, conf);
    assertEquals(""file:/tmp"", testDir.toString());
    checkPathData();
}",test order dependency,4
78329,apache_beam,ReduceFnRunnerTest.testOnElementCombiningAccumulating,"  @Test
  public void testOnElementCombiningAccumulating() throws Exception {
    // Test basic execution of a trigger using a non-combining window set and accumulating mode.
    WindowingStrategy<?, IntervalWindow> strategy =
        WindowingStrategy.of((WindowFn<?, IntervalWindow>) FixedWindows.of(Duration.millis(10)))
            .withTimestampCombiner(TimestampCombiner.EARLIEST)
            .withMode(AccumulationMode.ACCUMULATING_FIRED_PANES)
            .withAllowedLateness(Duration.millis(100));

    ReduceFnTester<Integer, Integer, IntervalWindow> tester =
        ReduceFnTester.combining(
            strategy, mockTriggerStateMachine, Sum.ofIntegers(), VarIntCoder.of());

    injectElement(tester, 1);

    when(mockTriggerStateMachine.shouldFire(anyTriggerContext())).thenReturn(true);
    injectElement(tester, 2);

    when(mockTriggerStateMachine.shouldFire(anyTriggerContext())).thenReturn(true);
    triggerShouldFinish(mockTriggerStateMachine);
    injectElement(tester, 3);

    // This element shouldn't be seen, because the trigger has finished
    injectElement(tester, 4);

    assertThat(
        tester.extractOutput(),
        contains(
            isSingleWindowedValue(equalTo(3), 1, 0, 10),
            isSingleWindowedValue(equalTo(6), 3, 0, 10)));
    assertTrue(tester.isMarkedFinished(firstWindow));
    tester.assertHasOnlyGlobalAndFinishedSetsFor(firstWindow);
  }
",non-flaky,5
114021,apache_struts,DefaultJSONWriterTest.testWrite,"    @Test
    public void testWrite() throws Exception {
        Bean bean1=new Bean();
        bean1.setStringField(""str"");
        bean1.setBooleanField(true);
        bean1.setCharField('s');
        bean1.setDoubleField(10.1);
        bean1.setFloatField(1.5f);
        bean1.setIntField(10);
        bean1.setLongField(100);
        bean1.setEnumField(AnEnum.ValueA);
        bean1.setEnumBean(AnEnumBean.Two);

        JSONWriter jsonWriter = new DefaultJSONWriter();
        jsonWriter.setEnumAsBean(false);
        String json = jsonWriter.write(bean1);
        TestUtils.assertEquals(DefaultJSONWriter.class.getResource(""jsonwriter-write-bean-01.txt""), json);
    }
",non-flaky,5
57,androidx_androidx,testMenuInvalidationAfterDestroy,"@Test
public void testMenuInvalidationAfterDestroy() throws Throwable {
    final A activity = getActivity();
    getInstrumentation().runOnMainSync(new Runnable() {
        @Override
        public void run() {
            activity.reset();
            assertNull(activity.getMenu());
            activity.supportInvalidateOptionsMenu();
            getInstrumentation().callActivityOnDestroy(activity);
        }
    });
    Thread.sleep(100);
    assertNull(activity.getMenu());
}",async wait,0
70783,apache_kafka,StartAndStopLatchTest.shouldReturnFalseWhenAwaitingForStartToNeverComplete,"    @Test
    public void shouldReturnFalseWhenAwaitingForStartToNeverComplete() throws Throwable {
        latch = new StartAndStopLatch(1, 1, this::complete, dependents, clock);
        future = asyncAwait(100);
        clock.sleep(10);
        assertFalse(future.get(200, TimeUnit.MILLISECONDS));
        assertTrue(future.isDone());
    }
",non-flaky,5
30939,camunda-cloud_zeebe,ElasticsearchExporterTest.shouldExportEnabledRecordTypes,"  @Test
  public void shouldExportEnabledRecordTypes() {
    // given
    config.index.command = true;
    config.index.event = true;
    config.index.rejection = true;
    config.index.deployment = true;

    createAndOpenExporter();

    final RecordType[] recordTypes =
        new RecordType[] {RecordType.COMMAND, RecordType.EVENT, RecordType.COMMAND_REJECTION};

    // when - then
    final Context.RecordFilter filter = testHarness.getContext().getFilter();

    assertThat(Arrays.stream(recordTypes).map(filter::acceptType)).containsOnly(true);
  }
",non-flaky,5
133927,cdancy_jenkins-rest,QueueApiMockTest.testGetQueue,"@Test(groups = ""unit"", testName = ""QueueApiMockTest"")
    public void testGetQueue() throws Exception {
        MockWebServer server = mockWebServer();
        String body = payloadFromResource(""/queue.json"");
        server.enqueue(new MockResponse().setBody(body).setResponseCode(200));
        JenkinsApi jenkinsApi = api(server.getUrl(""/""));
        QueueApi api = jenkinsApi.queueApi();
        try {
            List<QueueItem> output = api.queue();
            assertTrue(output.size() == 2);
            assertSent(server, ""GET"", ""/queue/api/json"");
        } finally {
            jenkinsApi.close();
            server.shutdown();
        }
    }
",non-flaky,5
89347,apache_samza,TestKafkaInputDescriptor.testISDConfigsWithOverrides,"  @Test
  public void testISDConfigsWithOverrides() {
    KafkaSystemDescriptor sd = new KafkaSystemDescriptor(""kafka"");

    KafkaInputDescriptor<KV<String, Integer>> isd =
        sd.getInputDescriptor(""input-stream"", KVSerde.of(new StringSerde(), new IntegerSerde()))
            .withConsumerAutoOffsetReset(""largest"")
            .withConsumerFetchMessageMaxBytes(1024 * 1024);

    Map<String, String> generatedConfigs = isd.toConfig();
    assertEquals(""kafka"", generatedConfigs.get(""streams.input-stream.samza.system""));
    assertEquals(""largest"", generatedConfigs.get(""systems.kafka.streams.input-stream.consumer.auto.offset.reset""));
    assertEquals(""1048576"", generatedConfigs.get(""systems.kafka.streams.input-stream.consumer.fetch.message.max.bytes""));
  }
",non-flaky,5
156115,soot-oss_soot,AbstractLambdaMetaFactoryCGTest.lambdaNoCaptures,"  @Test
  public void lambdaNoCaptures() {
    String testClass = ""soot.lambdaMetaFactory.LambdaNoCaptures"";

    final SootMethod target = prepareTarget(methodSigFromComponents(testClass, TEST_METHOD_RET, TEST_METHOD_NAME), testClass,
        ""java.util.function.Function"");

    final CallGraph cg = Scene.v().getCallGraph();

    final String metaFactoryClass = getMetaFactoryNameLambda(testClass, TEST_METHOD_NAME);

    final SootMethod bootstrap
        = Scene.v().getMethod(methodSigFromComponents(metaFactoryClass, ""java.util.function.Function"", ""bootstrap$""));
    final SootMethod metaFactoryConstructor
        = Scene.v().getMethod(methodSigFromComponents(metaFactoryClass, ""void"", ""<init>""));
    final SootMethod apply
        = Scene.v().getMethod(methodSigFromComponents(metaFactoryClass, ""java.lang.Object"", ""apply"", ""java.lang.Object""));
    final SootMethod lambdaBody
        = Scene.v().getMethod(methodSigFromComponents(testClass, ""java.lang.String"", ""lambda$main$0"", ""java.lang.Integer""));
    final SootMethod staticCallee
        = Scene.v().getMethod(methodSigFromComponents(testClass, ""void"", ""staticCallee"", ""java.lang.Integer""));

    final List<Edge> edgesFromTarget = newArrayList(cg.edgesOutOf(target));

    assertTrue(""There should be an edge from main to the bootstrap method of the synthetic LambdaMetaFactory"",
        edgesFromTarget.stream().anyMatch(e -> e.tgt().equals(bootstrap) && e.isStatic()));
    assertTrue(""There should be an edge to the constructor of the LambdaMetaFactory in the bootstrap method"",
        newArrayList(cg.edgesOutOf(bootstrap)).stream()
            .anyMatch(e -> e.tgt().equals(metaFactoryConstructor) && e.isSpecial()));
    assertTrue(
        ""There should be an instance invocation on the synthetic LambdaMetaFactory's implementation of the functional interface in the main method"",
        edgesFromTarget.stream().anyMatch(e -> e.getTgt().equals(apply) && e.kind() == Kind.INTERFACE));
    assertTrue(
        ""There should be a static call to the lambda body implementation in the generated functional interface implementation of the synthetic LambdaMetaFactory"",
        newArrayList(cg.edgesOutOf(apply)).stream().anyMatch(e -> e.getTgt().equals(lambdaBody) && e.isStatic()));

    assertTrue(""There should be a static call to the staticCallee method in actual lambda body implementation"",
        newArrayList(cg.edgesOutOf(lambdaBody)).stream().anyMatch(e -> e.getTgt().equals(staticCallee) && e.isStatic()));

    validateAllBodies(target.getDeclaringClass(), bootstrap.getDeclaringClass());
  }
",non-flaky,5
33679,alibaba_fastjson,JSONScannerTest.checkDate2,"  @Test
  public void checkDate2() throws Throwable {

    // Arrange
    char y0 = '2';
    char y1 = '1';
    char y2 = '1';
    char y3 = '1';
    char M0 = '0';
    char M1 = '\u8031';
    int d0 = 0;
    int d1 = 0;

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkDate"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""int""), Reflector.forName(""int""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, y0, y1, y2, y3, M0, M1, d0, d1);

    // Assert result
    Assert.assertEquals(false, retval);

  }
",non-flaky,5
118751,netty_netty,ByteBufUtilTest.testWriteUsAsciiComposite,"    @Test
    public void testWriteUsAsciiComposite() {
        String usAscii = ""NettyRocks"";
        ByteBuf buf = Unpooled.buffer(16);
        buf.writeBytes(usAscii.getBytes(CharsetUtil.US_ASCII));
        ByteBuf buf2 = Unpooled.compositeBuffer().addComponent(
                Unpooled.buffer(8)).addComponent(Unpooled.buffer(24));
        // write some byte so we start writing with an offset.
        buf2.writeByte(1);
        ByteBufUtil.writeAscii(buf2, usAscii);

        // Skip the previously written byte.
        assertEquals(buf, buf2.skipBytes(1));

        buf.release();
        buf2.release();
    }
",non-flaky,5
305,apache_hadoop,TestRpcProgramNfs3.testEncryptedReadWrite,"  @Test(timeout = 120000)
  public void testEncryptedReadWrite() throws Exception {
    final int len = 8192;

    final Path zone = new Path(""/zone"");
    hdfs.mkdirs(zone);
    dfsAdmin.createEncryptionZone(zone, TEST_KEY, NO_TRASH);

    final byte[] buffer = new byte[len];
    for (int i = 0; i < len; i++) {
      buffer[i] = (byte) i;
    }

    final String encFile1 = ""/zone/myfile"";
    createFileUsingNfs(encFile1, buffer);
    commit(encFile1, len);
    assertArrayEquals(""encFile1 not equal"",
        getFileContentsUsingNfs(encFile1, len),
        getFileContentsUsingDfs(encFile1, len));

    /*
     * Same thing except this time create the encrypted file using DFS.
     */
    final String encFile2 = ""/zone/myfile2"";
    final Path encFile2Path = new Path(encFile2);
    DFSTestUtil.createFile(hdfs, encFile2Path, len, (short) 1, 0xFEED);
    assertArrayEquals(""encFile2 not equal"",
        getFileContentsUsingNfs(encFile2, len),
        getFileContentsUsingDfs(encFile2, len));
  }
",non-flaky,5
177984,aosp-mirror_platform_frameworks_support,BidiFormatterTest.testCharSequenceApis,"    @Test
    public void testCharSequenceApis() {
        final CharSequence CS_HE = new SpannableString(HE);
        assertEquals(true, BidiFormatter.getInstance(true).isRtl(CS_HE));

        final SpannableString CS_EN_HE = new SpannableString(EN + HE);
        final Object RELATIVE_SIZE_SPAN = new RelativeSizeSpan(1.2f);
        CS_EN_HE.setSpan(RELATIVE_SIZE_SPAN, 0, EN.length(), Spanned.SPAN_INCLUSIVE_INCLUSIVE);

        Spanned wrapped;
        Object[] spans;

        wrapped = (Spanned) LTR_FMT.unicodeWrap(CS_EN_HE);
        assertEquals(EN + HE + LRM, wrapped.toString());
        spans = wrapped.getSpans(0, wrapped.length(), Object.class);
        assertEquals(1, spans.length);
        assertEquals(RELATIVE_SIZE_SPAN, spans[0]);
        assertEquals(0, wrapped.getSpanStart(RELATIVE_SIZE_SPAN));
        assertEquals(EN.length(), wrapped.getSpanEnd(RELATIVE_SIZE_SPAN));

        wrapped = (Spanned) LTR_FMT.unicodeWrap(CS_EN_HE, TextDirectionHeuristicsCompat.LTR);
        assertEquals(EN + HE + LRM, wrapped.toString());
        spans = wrapped.getSpans(0, wrapped.length(), Object.class);
        assertEquals(1, spans.length);
        assertEquals(RELATIVE_SIZE_SPAN, spans[0]);
        assertEquals(0, wrapped.getSpanStart(RELATIVE_SIZE_SPAN));
        assertEquals(EN.length(), wrapped.getSpanEnd(RELATIVE_SIZE_SPAN));

        wrapped = (Spanned) LTR_FMT.unicodeWrap(CS_EN_HE, false);
        assertEquals(EN + HE, wrapped.toString());
        spans = wrapped.getSpans(0, wrapped.length(), Object.class);
        assertEquals(1, spans.length);
        assertEquals(RELATIVE_SIZE_SPAN, spans[0]);
        assertEquals(0, wrapped.getSpanStart(RELATIVE_SIZE_SPAN));
        assertEquals(EN.length(), wrapped.getSpanEnd(RELATIVE_SIZE_SPAN));

        wrapped = (Spanned) LTR_FMT.unicodeWrap(CS_EN_HE, TextDirectionHeuristicsCompat.LTR, false);
        assertEquals(EN + HE, wrapped.toString());
        spans = wrapped.getSpans(0, wrapped.length(), Object.class);
        assertEquals(1, spans.length);
        assertEquals(RELATIVE_SIZE_SPAN, spans[0]);
        assertEquals(0, wrapped.getSpanStart(RELATIVE_SIZE_SPAN));
        assertEquals(EN.length(), wrapped.getSpanEnd(RELATIVE_SIZE_SPAN));
    }
",non-flaky,5
114095,aws_aws-sdk-java-v2,KeyTest.nullPartitionKey_shouldThrowException,"    @Test
    public void nullPartitionKey_shouldThrowException() {
        AttributeValue attributeValue = null;
        assertThatThrownBy(() ->  Key.builder().partitionValue(attributeValue).build())
         .isInstanceOf(IllegalArgumentException.class).hasMessageContaining(""partitionValue should not be null"");

        assertThatThrownBy(() ->  Key.builder().partitionValue(AttributeValue.builder().nul(true).build()).build())
            .isInstanceOf(IllegalArgumentException.class).hasMessageContaining(""partitionValue should not be null"");
    }
",non-flaky,5
70828,apache_kafka,PluginDescTest.testPluginDescComparison,"    @Test
    public void testPluginDescComparison() {
        PluginDesc<Connector> connectorDescPluginPath = new PluginDesc<>(
                Connector.class,
                regularVersion,
                pluginLoader
        );

        PluginDesc<Connector> connectorDescClasspath = new PluginDesc<>(
                Connector.class,
                newerVersion,
                systemLoader
        );

        assertNewer(connectorDescPluginPath, connectorDescClasspath);

        PluginDesc<Converter> converterDescPluginPath = new PluginDesc<>(
                Converter.class,
                noVersion,
                pluginLoader
        );

        PluginDesc<Converter> converterDescClasspath = new PluginDesc<>(
                Converter.class,
                snaphotVersion,
                systemLoader
        );

        assertNewer(converterDescPluginPath, converterDescClasspath);

        PluginDesc<Transformation> transformDescPluginPath = new PluginDesc<>(
                Transformation.class,
                null,
                pluginLoader
        );

        PluginDesc<Transformation> transformDescClasspath = new PluginDesc<>(
                Transformation.class,
                regularVersion,
                systemLoader
        );

        assertNewer(transformDescPluginPath, transformDescClasspath);
    }
",non-flaky,5
76930,Tencent_Firestorm,WriteBufferManagerTest.createBlockIdTest,"  @Test
  public void createBlockIdTest() {
    SparkConf conf = getConf();
    WriteBufferManager wbm = createManager(conf);
    WriterBuffer mockWriterBuffer = mock(WriterBuffer.class);
    when(mockWriterBuffer.getData()).thenReturn(new byte[]{});
    when(mockWriterBuffer.getMemoryUsed()).thenReturn(0);
    ShuffleBlockInfo sbi = wbm.createShuffleBlock(0, mockWriterBuffer);
    // seqNo = 0, partitionId = 0, taskId = 0
    assertEquals(0L, sbi.getBlockId());

    // seqNo = 1, partitionId = 0, taskId = 0
    sbi = wbm.createShuffleBlock(0, mockWriterBuffer);
    assertEquals(17592186044416L, sbi.getBlockId());

    // seqNo = 0, partitionId = 1, taskId = 0
    sbi = wbm.createShuffleBlock(1, mockWriterBuffer);
    assertEquals(1048576L, sbi.getBlockId());

    // seqNo = 1, partitionId = 1, taskId = 0
    sbi = wbm.createShuffleBlock(1, mockWriterBuffer);
    assertEquals(17592187092992L, sbi.getBlockId());
  }
",non-flaky,5
89325,apache_samza,TestKafkaSystemAdminJava.testCreateStreamShouldCoordinatorStreamWithCorrectTopicProperties,"  @Test
  public void testCreateStreamShouldCoordinatorStreamWithCorrectTopicProperties() throws Exception {
    String coordinatorTopicName = String.format(""topic-name-%s"", RandomStringUtils.randomAlphabetic(5));
    StreamSpec coordinatorStreamSpec = KafkaStreamSpec.createCoordinatorStreamSpec(coordinatorTopicName, SYSTEM());

    boolean hasCreatedStream = systemAdmin().createStream(coordinatorStreamSpec);

    assertTrue(hasCreatedStream);

    Map<String, String> coordinatorTopicProperties = getTopicConfigFromKafkaBroker(coordinatorTopicName);

    assertEquals(""compact"", coordinatorTopicProperties.get(TopicConfig.CLEANUP_POLICY_CONFIG));
    assertEquals(""26214400"", coordinatorTopicProperties.get(TopicConfig.SEGMENT_BYTES_CONFIG));
    assertEquals(""86400000"", coordinatorTopicProperties.get(TopicConfig.DELETE_RETENTION_MS_CONFIG));
  }
",non-flaky,5
114038,aws_aws-sdk-java-v2,MyWafRegionalFunctionTest.handleRequest_shouldReturnConstantValue,"    @Test
    public void handleRequest_shouldReturnConstantValue() {
        MyWafRegionalFunction function = new MyWafRegionalFunction();
        Object result = function.handleRequest(""echo"", null);
        assertEquals(""echo"", result);
    }
",non-flaky,5
159694,liquibase_liquibase,AddAutoIncrementExecuteTest.execute_notNull,"//    @Test
//    public void execute_notNull() throws Exception {
//        new DatabaseTestTemplate().testOnAvailableDatabases(
//                new SqlStatementDatabaseTest(null, new AddColumnStatement(null, TABLE_NAME, NEW_COLUMN_NAME, ""int"", 42, new NotNullConstraint())) {
//                    protected void preExecuteAssert(DatabaseSnapshotGenerator snapshot) {
//                        assertNull(snapshot.getTable(TABLE_NAME).getColumn(NEW_COLUMN_NAME));
//                    }
//
//                    protected void postExecuteAssert(DatabaseSnapshotGenerator snapshot) {
//                        Column columnSnapshot = snapshot.getTable(TABLE_NAME).getColumn(NEW_COLUMN_NAME);
//                        assertNotNull(columnSnapshot);
//                        assertEquals(false, columnSnapshot.isNullable());
//                    }
//                }
//
//        );
//    }
",non-flaky,5
26724,MundaneImmortal_pair-distribution-app,OpsPairsCombinationsTest.testGetPastPairsForMissingHistory,"	@Test
	public void testGetPastPairsForMissingHistory() {
		OpsPairCombinations devPairCombinations = new OpsPairCombinations(getPairsListFromDevs(getStandardDevs()));
		
		
		assertThat(devPairCombinations.getPastPairs(3), is(nullValue()));
	}
",non-flaky,5
99753,apache_cassandra,AsyncStreamingInputPlusTest.available_ClosedButWithBytes,"    @Test
    public void available_ClosedButWithBytes()
    {
        inputPlus = new AsyncStreamingInputPlus(channel);
        int size = 4;
        buf = channel.alloc().heapBuffer(size);
        buf.writerIndex(size);
        inputPlus.append(buf);
        inputPlus.requestClosure();
        Assert.assertEquals(size, inputPlus.unsafeAvailable());
    }
",non-flaky,5
112067,apache_shardingsphere-elasticjob,StreamingDataflowElasticJobTest.assertJobInit,"    @Test
    public void assertJobInit() {
        while (!StreamingDataflowElasticJob.isCompleted()) {
            WaitingUtils.waitingShortTime();
        }
        assertTrue(getRegCenter().isExisted(""/"" + getJobName() + ""/sharding""));
    }
",non-flaky,5
162741,OpenAPITools_openapi-generator,ModelApiResponseTest.messageTest,"    @Test
    public void messageTest() {
        // TODO: test message
    }
",non-flaky,5
156094,soot-oss_soot,AsmInnerClassTest.nonInner,"  @Test
  public void nonInner() {
    // statements at the beginning of a for loop should have the line number as for the branching
    // statement and not the last line number after the branch that leads outside the loop
    SootMethod target =
        prepareTarget(
            methodSigFromComponents(TEST_TARGET_CLASS, ""void"", ""method""), TEST_TARGET_CLASS);
    assertEquals(2, Scene.v().getApplicationClasses().size());
    assertFalse(target.getDeclaringClass().hasOuterClass());
    assertFalse(target.getDeclaringClass().isInnerClass());
    InnerClassTag tag = (InnerClassTag) target.getDeclaringClass().getTag(InnerClassTag.NAME);
    // the class has inner classes
    assertNotNull(tag);
  }
",non-flaky,5
133992,CorfuDB_CorfuDB,PayloadTest.testSerialize,"    @Test
    public void testSerialize(){
        ByteBuf buf = Unpooled.buffer();

        Set<String> payload = new HashSet<>();
        payload.add(""value1"");
        payload.add(""value2"");

        CorfuProtocolCommon.serialize(buf, payload);
        assertThat(CorfuProtocolCommon.setFromBuffer(buf, String.class)).isEqualTo(payload);
    }
",non-flaky,5
70858,apache_kafka,TransformationConfigTest.testEmbeddedConfigReplaceField,"    @Test
    public void testEmbeddedConfigReplaceField() {
        // Validate that we can construct a Connector config containing the extended config for the transform
        HashMap<String, String> connProps = new HashMap<>();
        connProps.put(""name"", ""foo"");
        connProps.put(""connector.class"", MockConnector.class.getName());
        connProps.put(""transforms"", ""example"");
        connProps.put(""transforms.example.type"", ReplaceField.Value.class.getName());

        Plugins plugins = null; // Safe when we're only constructing the config
        new ConnectorConfig(plugins, connProps);
    }
",non-flaky,5
156438,apache_commons-lang,DateUtilsFragmentTest.testMinuteFragmentInLargerUnitWithCalendar,"    @Test
    public void testMinuteFragmentInLargerUnitWithCalendar() {
        assertEquals(0, DateUtils.getFragmentInMinutes(aCalendar, Calendar.MINUTE));
        assertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.MINUTE));
        assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.MINUTE));
    }
",non-flaky,5
21164,swankjesse_dex,OldClassTest.setCount,"    @TestAnnotation(""libcore.java.lang.OldClassTest$ExtendTestClass"")
        public void setCount(int value) {

        }
",non-flaky,5
89322,apache_samza,TestKafkaSystemConsumer.testFetchThresholdBytes,"  @Test
  public void testFetchThresholdBytes() {

    SystemStreamPartition ssp0 = new SystemStreamPartition(TEST_SYSTEM, TEST_STREAM, new Partition(0));
    SystemStreamPartition ssp1 = new SystemStreamPartition(TEST_SYSTEM, TEST_STREAM, new Partition(1));
    int partitionsNum = 2;
    int ime0Size = Integer.valueOf(FETCH_THRESHOLD_MSGS) / partitionsNum; // fake size
    int ime1Size = Integer.valueOf(FETCH_THRESHOLD_MSGS) / partitionsNum - 1; // fake size
    int ime11Size = 20;
    ByteArraySerializer bytesSerde = new ByteArraySerializer();
    IncomingMessageEnvelope ime0 = new IncomingMessageEnvelope(ssp0, ""0"", bytesSerde.serialize("""", ""key0"".getBytes()),
        bytesSerde.serialize("""", ""value0"".getBytes()), ime0Size);
    IncomingMessageEnvelope ime1 = new IncomingMessageEnvelope(ssp1, ""0"", bytesSerde.serialize("""", ""key1"".getBytes()),
        bytesSerde.serialize("""", ""value1"".getBytes()), ime1Size);
    IncomingMessageEnvelope ime11 = new IncomingMessageEnvelope(ssp1, ""0"", bytesSerde.serialize("""", ""key11"".getBytes()),
        bytesSerde.serialize("""", ""value11"".getBytes()), ime11Size);
    KafkaSystemConsumer consumer = createConsumer(FETCH_THRESHOLD_MSGS, FETCH_THRESHOLD_BYTES);

    consumer.register(ssp0, ""0"");
    consumer.register(ssp1, ""0"");
    consumer.start();
    consumer.messageSink.addMessage(ssp0, ime0);
    // queue for ssp0 should be full now, because we added message of size FETCH_THRESHOLD_MSGS/partitionsNum
    Assert.assertFalse(consumer.messageSink.needsMoreMessages(ssp0));
    consumer.messageSink.addMessage(ssp1, ime1);
    // queue for ssp1 should be less then full now, because we added message of size (FETCH_THRESHOLD_MSGS/partitionsNum - 1)
    Assert.assertTrue(consumer.messageSink.needsMoreMessages(ssp1));
    consumer.messageSink.addMessage(ssp1, ime11);
    // queue for ssp1 should full now, because we added message of size 20 on top
    Assert.assertFalse(consumer.messageSink.needsMoreMessages(ssp1));

    Assert.assertEquals(1, consumer.getNumMessagesInQueue(ssp0));
    Assert.assertEquals(2, consumer.getNumMessagesInQueue(ssp1));
    Assert.assertEquals(ime0Size, consumer.getMessagesSizeInQueue(ssp0));
    Assert.assertEquals(ime1Size + ime11Size, consumer.getMessagesSizeInQueue(ssp1));

    consumer.stop();
  }
",non-flaky,5
98053,vert-x3_vertx-mongo-client,GridFsTest.testDrop,"  @Test
  public void testDrop() {
    createTempFileWithContent((1024 * 3) + 70);

    AtomicReference<MongoGridFsClient> gridFsClient = new AtomicReference<>();

    Promise<MongoGridFsClient> gridFsClientPromise = Promise.promise();

    mongoClient.createGridFsBucketService(""fs"", gridFsClientPromise);

    gridFsClientPromise.future().compose(mongoGridFsClient -> {
      assertNotNull(mongoGridFsClient);
      gridFsClient.set(mongoGridFsClient);
      Promise<Void> dropPromise = Promise.promise();
      mongoGridFsClient.drop(dropPromise);
      return dropPromise.future();
    }).compose(dropped -> {
      testComplete();
      return Future.succeededFuture();
    }).onComplete(event -> {
      if (event.failed()) {
        fail(event.cause());
      }
    });
    await();

  }
",non-flaky,5
98276,spotify_docker-client,HostConfigTest.testAppendBinds,"  @Test
  public void testAppendBinds() {
    final List<String> initialBinds = ImmutableList.of(""/one:/one"", ""/two:/two"");
    final HostConfig hostConfig = HostConfig.builder()
        .binds(initialBinds)
        .appendBinds(""/three:/three"")
        .appendBinds(""/four:/four"")
        .build();

    final List<String> expected = ImmutableList.<String>builder()
        .addAll(initialBinds)
        .add(""/three:/three"")
        .add(""/four:/four"")
        .build();

    assertThat(""Calling .appendBinds should append to the list, not replace"",
               hostConfig.binds(), is(expected));
  }
",non-flaky,5
91391,OpenLCB_OpenLCB_Java,MemorySpaceCacheTest.put,"    @Test
    public void testCTor() {
        NodeID nodeID = new NodeID(new byte[]{1,2,3,4,5,6});
        Connection testConnection = new AbstractConnection(){
            public void put(Message msg, Connection node) {
            }
",non-flaky,5
26760,MundaneImmortal_pair-distribution-app,DevPairsCombinationsTest.testIsRotationForOneDayPair,"	@Test
	public void testIsRotationForOneDayPair() {
		List<Developer> standardDevs = getStandardDevs();
		List<DayPairs> pastPairs = getPairsListFromDevs(standardDevs);
		pastPairs.remove(2);
		pastPairs.remove(1);
		DevPairCombinations devPairCombinations = new DevPairCombinations(pastPairs);
		
		
		assertThat(devPairCombinations.isRotationTime(Arrays.asList(""track1"", ""track2""), standardDevs, false), is(false));
	}
",non-flaky,5
94632,square_okhttp,InterceptorTest.intercept,"  @Test public void interceptorMakesAnUnrelatedAsyncRequest() throws Exception {
          @Override public Response intercept(Chain chain) throws IOException {
            if (chain.request().url().encodedPath().equals(""/b"")) {
              Request requestA = new Request.Builder()
                  .url(server.url(""/a""))
                  .build();

              try {
                RecordingCallback callbackA = new RecordingCallback();
                client.newCall(requestA).enqueue(callbackA);
                callbackA.await(requestA.url()).assertBody(""a"");
              } catch (Exception e) {
                throw new RuntimeException(e);
              }
            }

            return chain.proceed(chain.request());
          }
",non-flaky,5
112121,apache_shardingsphere-elasticjob,StatisticRdbRepositoryTest.assertFindLatestTaskRunningStatisticsWhenTableIsEmpty,"    @Test
    public void assertFindLatestTaskRunningStatisticsWhenTableIsEmpty() {
        assertFalse(repository.findLatestTaskRunningStatistics().isPresent());
    }
",non-flaky,5
118726,netty_netty,ByteProcessorTest.testForward,"    @Test
    public void testForward() {
        final ByteBuf buf =
                Unpooled.copiedBuffer(""abc\r\n\ndef\r\rghi\n\njkl\0\0mno  \t\tx"", CharsetUtil.ISO_8859_1);
        final int length = buf.readableBytes();

        assertEquals(3,  buf.forEachByte(0,  length, ByteProcessor.FIND_CRLF));
        assertEquals(6,  buf.forEachByte(3,  length - 3, ByteProcessor.FIND_NON_CRLF));
        assertEquals(9,  buf.forEachByte(6,  length - 6, ByteProcessor.FIND_CR));
        assertEquals(11, buf.forEachByte(9,  length - 9, ByteProcessor.FIND_NON_CR));
        assertEquals(14, buf.forEachByte(11, length - 11, ByteProcessor.FIND_LF));
        assertEquals(16, buf.forEachByte(14, length - 14, ByteProcessor.FIND_NON_LF));
        assertEquals(19, buf.forEachByte(16, length - 16, ByteProcessor.FIND_NUL));
        assertEquals(21, buf.forEachByte(19, length - 19, ByteProcessor.FIND_NON_NUL));
        assertEquals(24, buf.forEachByte(19, length - 19, ByteProcessor.FIND_ASCII_SPACE));
        assertEquals(24, buf.forEachByte(21, length - 21, ByteProcessor.FIND_LINEAR_WHITESPACE));
        assertEquals(28, buf.forEachByte(24, length - 24, ByteProcessor.FIND_NON_LINEAR_WHITESPACE));
        assertEquals(-1, buf.forEachByte(28, length - 28, ByteProcessor.FIND_LINEAR_WHITESPACE));

        buf.release();
    }
",non-flaky,5
26872,wildfly_wildfly,NamingContextTestCase.testLookupWitResolveResult,"    @Test
    public void testLookupWitResolveResult() throws Exception {
        namingStore.bind(new CompositeName(""test/nested""), ""test"");

        final Reference reference = new Reference(String.class.getName(), new StringRefAddr(""blahh"", ""test""), TestObjectFactoryWithNameResolution.class.getName(), null);
        namingStore.bind(new CompositeName(""comp""), reference);

        Object result = namingContext.lookup(new CompositeName(""comp/nested""));
        assertEquals(""test"", result);

        //the same with security permissions
        result = testActionPermission(JndiPermission.ACTION_LOOKUP, Arrays.asList(new JndiPermission(""test/nested"", ""lookup"")), namingContext, ""comp/nested"");
        assertEquals(""test"", result);
    }
",non-flaky,5
94658,square_okhttp,OptionalMethodTest.invokeNonPublic,"  @Test
  public void invokeNonPublic() throws Exception {
    SubClass2 subClass2 = new SubClass2();
    assertFalse(NON_PUBLIC.isSupported(subClass2));
    assertErrorOnInvoke(NON_PUBLIC, subClass2);
  }
",non-flaky,5
76932,Tencent_Firestorm,RssShuffleWriterTest.checkBlockSendResultTest,"  @Test
  public void checkBlockSendResultTest() {
    SparkConf conf = new SparkConf();
    conf.setAppName(""testApp"")
        .setMaster(""local[2]"")
        .set(RssClientConfig.RSS_TEST_FLAG, ""true"")
        .set(RssClientConfig.RSS_WRITER_SEND_CHECK_TIMEOUT, ""10000"")
        .set(RssClientConfig.RSS_WRITER_SEND_CHECK_INTERVAL, ""1000"")
        .set(RssClientConfig.RSS_COORDINATOR_QUORUM, ""127.0.0.1:12345,127.0.0.1:12346"");
    // init SparkContext
    SparkContext sc = SparkContext.getOrCreate(conf);
    Map<String, Set<Long>> failBlocks = Maps.newConcurrentMap();
    Map<String, Set<Long>> successBlocks = Maps.newConcurrentMap();
    Serializer kryoSerializer = new KryoSerializer(conf);
    RssShuffleManager manager = TestUtils.createShuffleManager(
        conf,
        false,
        null,
        successBlocks,
        failBlocks);

    ShuffleWriteClient mockShuffleWriteClient = mock(ShuffleWriteClient.class);
    Partitioner mockPartitioner = mock(Partitioner.class);
    RssShuffleHandle mockHandle = mock(RssShuffleHandle.class);
    ShuffleDependency mockDependency = mock(ShuffleDependency.class);
    when(mockHandle.getDependency()).thenReturn(mockDependency);
    when(mockPartitioner.numPartitions()).thenReturn(2);
    TaskMemoryManager mockTaskMemoryManager = mock(TaskMemoryManager.class);
    when(mockHandle.getPartitionToServers()).thenReturn(Maps.newHashMap());
    when(mockDependency.partitioner()).thenReturn(mockPartitioner);

    BufferManagerOptions bufferOptions = new BufferManagerOptions(conf);
    WriteBufferManager bufferManager = new WriteBufferManager(
        0, 0, bufferOptions, kryoSerializer,
        Maps.newHashMap(), mockTaskMemoryManager, new ShuffleWriteMetrics());
    WriteBufferManager bufferManagerSpy = spy(bufferManager);

    RssShuffleWriter rssShuffleWriter = new RssShuffleWriter(""appId"", 0, ""taskId"", 1L,
        bufferManagerSpy, (new TaskMetrics()).shuffleWriteMetrics(),
        manager, conf, mockShuffleWriteClient, mockHandle);
    doReturn(1000000L).when(bufferManagerSpy).acquireMemory(anyLong());

    // case 1: all blocks are sent successfully
    successBlocks.put(""taskId"", Sets.newHashSet(1L, 2L, 3L));
    rssShuffleWriter.checkBlockSendResult(Sets.newHashSet(1L, 2L, 3L));
    successBlocks.clear();

    // case 2: partial blocks aren't sent before spark.rss.writer.send.check.timeout,
    // Runtime exception will be thrown
    successBlocks.put(""taskId"", Sets.newHashSet(1L, 2L));
    thrown.expect(RuntimeException.class);
    thrown.expectMessage(StringStartsWith.startsWith(""Timeout:""));
    rssShuffleWriter.checkBlockSendResult(Sets.newHashSet(1L, 2L, 3L));
    successBlocks.clear();

    // case 3: partial blocks are sent failed, Runtime exception will be thrown
    successBlocks.put(""taskId"", Sets.newHashSet(1L, 2L));
    failBlocks.put(""taskId"", Sets.newHashSet(3L));
    thrown.expect(RuntimeException.class);
    thrown.expectMessage(StringStartsWith.startsWith(""Send failed:""));
    rssShuffleWriter.checkBlockSendResult(Sets.newHashSet(1L, 2L, 3L));
    successBlocks.clear();
    failBlocks.clear();

    sc.stop();
  }
",non-flaky,5
43060,trinodb_trino,BaseConnectorTest.testRenameMaterializedView,"    @Test
    public void testRenameMaterializedView()
    {
        skipTestUnless(hasBehavior(SUPPORTS_CREATE_MATERIALIZED_VIEW));

        String schema = ""rename_mv_test"";
        Session session = Session.builder(getSession())
                .setSchema(schema)
                .build();

        QualifiedObjectName originalMaterializedView = new QualifiedObjectName(
                session.getCatalog().orElseThrow(),
                session.getSchema().orElseThrow(),
                ""test_materialized_view_rename_"" + randomTableSuffix());

        createTestingMaterializedView(originalMaterializedView, Optional.empty());

        String renamedMaterializedView = ""test_materialized_view_rename_new_"" + randomTableSuffix();
        if (!hasBehavior(SUPPORTS_RENAME_MATERIALIZED_VIEW)) {
            assertQueryFails(session, ""ALTER MATERIALIZED VIEW "" + originalMaterializedView + "" RENAME TO "" + renamedMaterializedView, ""This connector does not support renaming materialized views"");
            assertUpdate(session, ""DROP MATERIALIZED VIEW "" + originalMaterializedView);
            return;
        }

        // simple rename
        assertUpdate(session, ""ALTER MATERIALIZED VIEW "" + originalMaterializedView + "" RENAME TO "" + renamedMaterializedView);
        assertTestingMaterializedViewQuery(schema, renamedMaterializedView);
        // verify new name in the system.metadata.materialized_views
        assertQuery(session, ""SELECT catalog_name, schema_name FROM system.metadata.materialized_views WHERE name = '"" + renamedMaterializedView + ""'"",
                format(""VALUES ('%s', '%s')"", originalMaterializedView.getCatalogName(), originalMaterializedView.getSchemaName()));
        assertQueryReturnsEmptyResult(session, listMaterializedViewsSql(""name = '"" + originalMaterializedView.getObjectName() + ""'""));

        // rename with IF EXISTS on existing materialized view
        String testExistsMaterializedViewName = ""test_materialized_view_rename_exists_"" + randomTableSuffix();
        assertUpdate(session, ""ALTER MATERIALIZED VIEW IF EXISTS "" + renamedMaterializedView + "" RENAME TO "" + testExistsMaterializedViewName);
        assertTestingMaterializedViewQuery(schema, testExistsMaterializedViewName);

        // rename with upper-case, not delimited identifier
        String uppercaseName = ""TEST_MATERIALIZED_VIEW_RENAME_UPPERCASE_"" + randomTableSuffix();
        assertUpdate(session, ""ALTER MATERIALIZED VIEW "" + testExistsMaterializedViewName + "" RENAME TO "" + uppercaseName);
        assertTestingMaterializedViewQuery(schema, uppercaseName.toLowerCase(ENGLISH)); // Ensure select allows for lower-case, not delimited identifier

        String otherSchema = ""rename_mv_other_schema"";
        assertUpdate(format(""CREATE SCHEMA IF NOT EXISTS %s"", otherSchema));
        if (hasBehavior(SUPPORTS_RENAME_MATERIALIZED_VIEW_ACROSS_SCHEMAS)) {
            assertUpdate(session, ""ALTER MATERIALIZED VIEW "" + uppercaseName + "" RENAME TO "" + otherSchema + ""."" + originalMaterializedView.getObjectName());
            assertTestingMaterializedViewQuery(otherSchema, originalMaterializedView.getObjectName());

            assertUpdate(session, ""DROP MATERIALIZED VIEW "" + otherSchema + ""."" + originalMaterializedView.getObjectName());
        }
        else {
            assertQueryFails(
                    session,
                    ""ALTER MATERIALIZED VIEW "" + uppercaseName + "" RENAME TO "" + otherSchema + ""."" + originalMaterializedView.getObjectName(),
                    ""Materialized View rename across schemas is not supported"");
            assertUpdate(session, ""DROP MATERIALIZED VIEW "" + uppercaseName);
        }

        assertFalse(getQueryRunner().tableExists(session, originalMaterializedView.toString()));
        assertFalse(getQueryRunner().tableExists(session, renamedMaterializedView));
        assertFalse(getQueryRunner().tableExists(session, testExistsMaterializedViewName));

        // rename with IF EXISTS on NOT existing materialized view
        assertUpdate(session, ""ALTER TABLE IF EXISTS "" + originalMaterializedView + "" RENAME TO "" + renamedMaterializedView);
        assertQueryReturnsEmptyResult(session, listMaterializedViewsSql(""name = '"" + originalMaterializedView.getObjectName() + ""'""));
        assertQueryReturnsEmptyResult(session, listMaterializedViewsSql(""name = '"" + renamedMaterializedView + ""'""));
    }
",non-flaky,5
162742,OpenAPITools_openapi-generator,CategoryTest.testCategory,"    @Test
    public void testCategory() {
        // TODO: test Category
    }
",non-flaky,5
98635,nutzam_nutz,SimpleAdaptorTest.test_err_param_with_pathargs,"    @Test
    public void test_err_param_with_pathargs() {
        get(""/adaptor/err/param/pathargs/a?id=ABC"");
        assertEquals(200, resp.getStatus());

        get(""/adaptor/err/param/pathargs/a/ABC"");
        assertEquals(200, resp.getStatus());
    }
",non-flaky,5
363,aosp-mirror_platform_frameworks_support,basicSwipeTest,"@Test
public void basicSwipeTest(int dir, int swipeDirs, int targetX) throws Throwable {
    final RecyclerView recyclerView = setup(0, swipeDirs);
    mLayoutManager.expectLayouts(1);
    setRecyclerView(recyclerView);
    mLayoutManager.waitForLayout(1);
    final RecyclerView.ViewHolder target = mRecyclerView
    .findViewHolderForAdapterPosition(1);
    TouchUtils.dragViewToX(getInstrumentation(), target.itemView, Gravity.CENTER, targetX);
    Thread.sleep(100);
    final SwipeRecord swipe = mCalback.getSwipe(target);
    assertNotNull(swipe);
    assertEquals(dir, swipe.dir);
    assertEquals(1, mItemTouchHelper.mRecoverAnimations.size());
    assertEquals(1, mItemTouchHelper.mPendingCleanup.size());
    mLayoutManager.expectLayouts(1);
    mAdapter.deleteAndNotify(1, 1);
    mLayoutManager.waitForLayout(1);
    waitForAnimations();
    assertEquals(0, mItemTouchHelper.mRecoverAnimations.size());
    assertEquals(0, mItemTouchHelper.mPendingCleanup.size());
    assertTrue(mCalback.isCleared(target));
}",async wait,0
135809,Netflix_Hystrix,CumulativeCommandEventCounterStreamTest.testFallbackRejection,"    @Test
    public void testFallbackRejection() {
        HystrixCommandKey key = HystrixCommandKey.Factory.asKey(""CMD-CumulativeCounter-L"");
        stream = CumulativeCommandEventCounterStream.getInstance(key, 10, 500);
        stream.startCachingStreamValuesIfUnstarted();

        final CountDownLatch latch = new CountDownLatch(1);
        stream.observe().take(5).subscribe(getSubscriber(latch));

        //fallback semaphore size is 5.  So let 5 commands saturate that semaphore, then
        //let 2 more commands go to fallback.  they should get rejected by the fallback-semaphore

        List<Command> fallbackSaturators = new ArrayList<Command>();
        for (int i = 0; i < 5; i++) {
            fallbackSaturators.add(Command.from(groupKey, key, HystrixEventType.FAILURE, 20, HystrixEventType.FALLBACK_SUCCESS, 400));
        }

        Command rejection1 = Command.from(groupKey, key, HystrixEventType.FAILURE, 20, HystrixEventType.FALLBACK_SUCCESS, 0);
        Command rejection2 = Command.from(groupKey, key, HystrixEventType.FAILURE, 20, HystrixEventType.FALLBACK_SUCCESS, 0);

        for (Command saturator: fallbackSaturators) {
            saturator.observe();
        }

        try {
            Thread.sleep(70);
        } catch (InterruptedException ex) {
            fail(ex.getMessage());
        }

        rejection1.observe();
        rejection2.observe();

        try {
            assertTrue(latch.await(10000, TimeUnit.MILLISECONDS));
        } catch (InterruptedException ex) {
            fail(""Interrupted ex"");
        }
        assertEquals(HystrixEventType.values().length, stream.getLatest().length);
        long[] expected = new long[HystrixEventType.values().length];
        expected[HystrixEventType.FAILURE.ordinal()] = 7;
        expected[HystrixEventType.FALLBACK_SUCCESS.ordinal()] = 5;
        expected[HystrixEventType.FALLBACK_REJECTION.ordinal()] = 2;
        expected[HystrixEventType.EXCEPTION_THROWN.ordinal()] = 2;
        assertArrayEquals(expected, stream.getLatest());
    }
",non-flaky,5
59615,looly_hutool,SpringUtilTest.getBeanWithTypeReferenceTest,"	@Test
	public void getBeanWithTypeReferenceTest() {
		Map<String, Object> mapBean = SpringUtil.getBean(new TypeReference<Map<String, Object>>() {});
		Assert.assertNotNull(mapBean);
		Assert.assertEquals(""value1"", mapBean.get(""key1""));
		Assert.assertEquals(""value2"", mapBean.get(""key2""));
	}
",non-flaky,5
53161,cloudfoundry_uaa,TokenPolicyTest.deserializationOfTokenPolicyWithNoActiveKeyIdWithMultipleKeys_doesNotFail,"    @Test
    public void deserializationOfTokenPolicyWithNoActiveKeyIdWithMultipleKeys_doesNotFail() {
        String jsonTokenPolicy = ""{\""keys\"":{\""key-id-1\"":{\""signingKey\"":\""some-signing-key-1\""},\""key-id-2\"":{\""signingKey\"":\""some-signing-key-2\""}}}"";
        TokenPolicy tokenPolicy = JsonUtils.readValue(jsonTokenPolicy, TokenPolicy.class);
        assertEquals(tokenPolicy.getKeys().get(""key-id-1""), ""some-signing-key-1"");
        assertEquals(tokenPolicy.getKeys().get(""key-id-2""), ""some-signing-key-2"");
    }
",non-flaky,5
38266,palantir_atlasdb,AbstractSerializableTransactionTest.testPhantomReadFail,"    @Test
    public void testPhantomReadFail() {
        String initialValue = ""100"";
        Transaction t0 = startTransaction();
        put(t0, ""row1"", ""col1"", initialValue);
        put(t0, ""row2"", ""col1"", initialValue);
        t0.commit();

        Transaction t1 = startTransaction();
        RowResult<byte[]> first = BatchingVisitables.getFirst(t1.getRange(TEST_TABLE, RangeRequest.builder().build()));
        put(t1, ""row22"", ""col1"", initialValue);

        Transaction t2 = startTransaction();
        put(t2, ""row0"", ""col1"", initialValue);
        t2.commit();

        try {
            t1.commit();
            fail();
        } catch (TransactionSerializableConflictException e) {
            // this is expectecd to throw because it is a write skew
        }
    }
",non-flaky,5
176815,ctco_cukes,EndsWithRegexpTest.matchesLocationUrl,"    @Test
    public void matchesLocationUrl() throws Exception {
        assertThat(""http://company.com:80/webapp/orx/rest/index/types/CLIENT/nodes/6f1155df-644b-4228-89af"" +
                ""-7d24b8fe1a8d"", EndsWithRegexp.endsWithRegexp(""/index/types/CLIENT/nodes/.+""));
    }
",non-flaky,5
26851,wildfly_wildfly,NamingSubsystemTestCase.testRejectionsEAP7,"    @Test
    public void testRejectionsEAP7() throws Exception {
        testTransformer(""subsystem.xml"", ModelTestControllerVersion.EAP_7_0_0, ModelVersion.create(2, 0), ""wildfly-naming"");
    }
",non-flaky,5
133988,CorfuDB_CorfuDB,ClusterHealthTest.testLogUnitServersClusterHealth,"    @Test
    public void testLogUnitServersClusterHealth(){
        Layout layout = layoutUtil.getLayout(servers);

        ClusterStatus status = clusterHealth.getLogUnitServersClusterHealth(
                layout, layout.getAllActiveServers()
        );
        assertThat(status).isEqualTo(ClusterStatus.STABLE);

        //invalid segment
        layout.setUnresponsiveServers(Collections.singletonList(server3));
        status = clusterHealth.getLogUnitServersClusterHealth(
                layout, layout.getAllActiveServers()
        );
        assertThat(status).isEqualTo(ClusterStatus.UNAVAILABLE);

        //exclude unresponsive server
        layout.getFirstSegment().getFirstStripe().getLogServers().remove(server3);
        status = clusterHealth.getLogUnitServersClusterHealth(
                layout, layout.getAllActiveServers()
        );
        assertThat(status).isEqualTo(ClusterStatus.STABLE);
    }
",non-flaky,5
77506,dropwizard_dropwizard,OptionalAuthFilterOrderingTest.getUserPrincipal,"    @Test
        public void filter(ContainerRequestContext requestContext) throws IOException {
            requestContext.setSecurityContext(new SecurityContext() {
                @Override
                public Principal getUserPrincipal() {
                    return new NullPrincipal();
                }
",non-flaky,5
179507,abel533_Mapper,StyleTest.testCamelhumpUppercase,"    @Test
    public void testCamelhumpUppercase() {
        for (String field : fields) {
            System.out.println(field + "" - "" + StringUtil.convertByStyle(field, Style.camelhumpAndUppercase));
        }
    }
",non-flaky,5
89298,apache_samza,TestLocalStoreMonitor.shouldContinueLocalStoreCleanUpAfterFailureToCleanUpStoreOfAJob,"  @Test
  public void shouldContinueLocalStoreCleanUpAfterFailureToCleanUpStoreOfAJob() throws Exception {
    File testFailingJobDir = new File(localStoreDir, ""test-jobName-jobId-1"");

    File testFailingTaskStoreDir = new File(new File(testFailingJobDir, ""test-store""), ""test-task"");

    FileUtils.forceMkdir(testFailingTaskStoreDir);

    // For job: test-jobName-jobId-1, throw up in getTasks call and
    // expect the cleanup to succeed for other job: test-jobName-jobId.
    Mockito.doThrow(new RuntimeException(""Dummy exception message.""))
        .when(jobsClientMock)
        .getTasks(new JobInstance(""test-jobName"", ""jobId-1""));

    Task task = new Task(""notLocalHost"", ""test-task"", ""0"", new ArrayList<>(), ImmutableList.of(""test-store""));

    Mockito.when(jobsClientMock.getTasks(new JobInstance(""test-jobName"", ""jobId""))).thenReturn(ImmutableList.of(task));

    Map<String, String> configMap = new HashMap<>(config);
    configMap.put(LocalStoreMonitorConfig.CONFIG_IGNORE_FAILURES, ""true"");

    LocalStoreMonitor localStoreMonitor =
        new LocalStoreMonitor(new LocalStoreMonitorConfig(new MapConfig(configMap)), localStoreMonitorMetrics,
            jobsClientMock);

    localStoreMonitor.monitor();

    // Non failing job directory should be cleaned up.
    assertTrue(""Task store directory should not exist."", !taskStoreDir.exists());
    FileUtils.deleteDirectory(testFailingJobDir);
  }
",non-flaky,5
106651,Alluxio_alluxio,AlluxioFuseFileSystemTest.incompleteFileCannotOpen,"  @Test
  public void incompleteFileCannotOpen() throws Exception {
    AlluxioURI expectedPath = BASE_EXPECTED_URI.join(""/foo/bar"");
    FileInfo fi = setUpOpenMock(expectedPath);
    fi.setCompleted(false);

    when(mFileSystem.openFile(expectedPath)).thenThrow(new FileIncompleteException(expectedPath));
    assertEquals(-ErrorCodes.EFAULT(), mFuseFs.open(""/foo/bar"", mFileInfo));
  }
",non-flaky,5
21,palantir_atlasdb,extraSweepersGiveUpAfterFailingToAcquireEnoughTimes,"@Test
public void extraSweepersGiveUpAfterFailingToAcquireEnoughTimes() throws InterruptedException {
    int shards = 16;
    int sweepers = 4;
    int threads = shards / (sweepers / 2);
    TimelockService stickyLockService = createStickyLockService();
    createAndInitializeSweepersAndWaitForOneBackgroundIteration(sweepers, shards, threads, stickyLockService);
    ArgumentCaptor<LockRequest> captor = ArgumentCaptor.forClass(LockRequest.class);
    verify(stickyLockService, atLeast(shards * (shards / threads + 1) / 2 + shards * (threads * sweepers - shards)));
    verify(stickyLockService, atMost(shards * ((threads + 1) * sweepers - shards) - sweepers * (sweepers - 1) / 2));
    Set<String> requestedLockIds = captor.getAllValues().stream()
    .map(LockRequest::getLockDescriptors)
    .map(Iterables::getOnlyElement)
    .map(LockDescriptor::getLockIdAsString)
    .collect(Collectors.toSet());
    Set<String> expectedLockIds = IntStream.range(0, shards).boxed()
    .map(ShardAndStrategy::conservative)
    .map(ShardAndStrategy::toText)
    .collect(Collectors.toSet());
    assertThat(requestedLockIds).hasSameElementsAs(expectedLockIds);
}",concurrency,1
30999,camunda-cloud_zeebe,ArrayValueTest.shouldAddValueInBetween,"  @Test
  public void shouldAddValueInBetween() {
    // given
    addIntValues(array, 1, 2, 3);

    // when
    final Iterator<IntegerValue> iterator = array.iterator();
    iterator.next();
    addIntValues(array, 4, 5, 6);

    // then
    encodeAndDecode(array);
    assertIntValues(array, 1, 4, 5, 6, 2, 3);
  }
",non-flaky,5
134008,CorfuDB_CorfuDB,TwoNodesDownIT.twoNodesDownTest,"    @Test(timeout = 300000)
    public void twoNodesDownTest() {
        workflow(wf -> {
            wf.deploy();

            CorfuCluster corfuCluster = wf.getUniverse()
                    .getGroup(wf.getFixture().data().getGroupParamByIndex(0).getName());

            CorfuClient corfuClient = corfuCluster.getLocalCorfuClient();

            CorfuTable<String, String> table = corfuClient
                    .createDefaultCorfuTable(DEFAULT_STREAM_NAME);

            for (int i = 0; i < DEFAULT_TABLE_ITER; i++) {
                table.put(String.valueOf(i), String.valueOf(i));
            }

            //Should stop two nodes and then restart
            CorfuServer server0 = corfuCluster.getServerByIndex(0);
            CorfuServer server1 = corfuCluster.getServerByIndex(1);
            CorfuServer server2 = corfuCluster.getServerByIndex(2);

            // Sequentially stop two nodes
            server1.stop(Duration.ofSeconds(10));
            server2.stop(Duration.ofSeconds(10));

            // Verify cluster status is UNAVAILABLE with two node down and one node up
            corfuClient.invalidateLayout();
            ClusterStatusReport clusterStatusReport = corfuClient
                    .getManagementView()
                    .getClusterStatus();

            Map<String, NodeStatus> nodeStatusMap = clusterStatusReport.getClusterNodeStatusMap();
            Map<String, ConnectivityStatus> connectivityStatusMap = clusterStatusReport
                    .getClientServerConnectivityStatusMap();
            ClusterStatusReliability reliability = clusterStatusReport.getClusterStatusReliability();

            assertThat(connectivityStatusMap.get(server0.getEndpoint()))
                    .isEqualTo(ConnectivityStatus.RESPONSIVE);
            assertThat(connectivityStatusMap.get(server1.getEndpoint()))
                    .isEqualTo(ConnectivityStatus.UNRESPONSIVE);
            assertThat(connectivityStatusMap.get(server2.getEndpoint()))
                    .isEqualTo(ConnectivityStatus.UNRESPONSIVE);

            assertThat(nodeStatusMap.get(server0.getEndpoint())).isEqualTo(NodeStatus.NA);
            assertThat(nodeStatusMap.get(server1.getEndpoint())).isEqualTo(NodeStatus.NA);
            assertThat(nodeStatusMap.get(server2.getEndpoint())).isEqualTo(NodeStatus.NA);

            assertThat(clusterStatusReport.getClusterStatus()).isEqualTo(ClusterStatus.UNAVAILABLE);
            assertThat(reliability).isEqualTo(ClusterStatusReliability.WEAK_NO_QUORUM);

            // Wait for failure detector finds cluster is down before recovering
            waitForClusterDown(table);

            // Sequentially restart two nodes and wait for layout's unresponsive servers to change
            server1.start();
            server2.start();

            Layout initialLayout = clusterStatusReport.getLayout();
            waitForLayoutChange(layout -> layout.getEpoch() > initialLayout.getEpoch()
                    && layout.getUnresponsiveServers().size() == 0, corfuClient);

            final Duration sleepDuration = Duration.ofSeconds(1);

            // Verify cluster status is STABLE
            clusterStatusReport = corfuClient.getManagementView().getClusterStatus();
            while (!clusterStatusReport.getClusterStatus().equals(ClusterStatus.STABLE)) {
                clusterStatusReport = corfuClient.getManagementView().getClusterStatus();
                Sleep.sleepUninterruptibly(sleepDuration);
            }
            assertThat(clusterStatusReport.getClusterStatus()).isEqualTo(ClusterStatus.STABLE);

            // Verify data path working fine
            for (int i = 0; i < DEFAULT_TABLE_ITER; i++) {
                assertThat(table.get(String.valueOf(i))).isEqualTo(String.valueOf(i));
            }

            corfuClient.shutdown();
        });
    }
",non-flaky,5
26746,MundaneImmortal_pair-distribution-app,DeveloperTest.testGetTrackWeightDefault,"	@Test
	public void testGetTrackWeightDefault() {
		Developer developer = new Developer(""developerId"");
		
		assertThat(developer.getTrackWeight(""track""), is(0));
	}
",non-flaky,5
98230,apache_jackrabbit,PerformanceTest.testPerformance,"    @Test
    public void testPerformance() throws Exception {
        testPerformance(""1.6"");
    }
",non-flaky,5
76734,quarkusio_quarkus,JarRunnerIT.testArcExcludeDependencyOnLocalModule,"    @Test
    public void testArcExcludeDependencyOnLocalModule() throws Exception {
        File testDir = initProject(""projects/arc-exclude-dependencies"");
        RunningInvoker running = new RunningInvoker(testDir, false);

        MavenProcessInvocationResult result = running.execute(Arrays.asList(""package"", ""-DskipTests""), Collections.emptyMap());
        await().atMost(1, TimeUnit.MINUTES).until(() -> result.getProcess() != null && !result.getProcess().isAlive());
        assertThat(running.log()).containsIgnoringCase(""BUILD SUCCESS"");
        running.stop();

        File targetDir = new File(testDir.getAbsoluteFile(), ""runner"" + File.separator + ""target"");
        Path jar = targetDir.toPath().toAbsolutePath()
                .resolve(Paths.get(""quarkus-app/quarkus-run.jar""));
        File output = new File(targetDir, ""output.log"");
        output.createNewFile();

        Process process = doLaunch(jar, output).start();
        try {
            // Wait until server up
            AtomicReference<String> response = new AtomicReference<>();
            await()
                    .pollDelay(1, TimeUnit.SECONDS)
                    .atMost(1, TimeUnit.MINUTES).until(() -> {
                        String ret = DevModeTestUtils.getHttpResponse(""/hello"", true);
                        response.set(ret);
                        return ret.contains(""hello:"");
                    });

            // Test that bean is not resolvable
            assertThat(response.get()).containsIgnoringCase(""hello:false"");
        } finally {
            process.destroy();
        }
    }
",non-flaky,5
84638,apache_zookeeper,MultiResponseTest.testEmptyRoundTrip,"    @Test
    public void testEmptyRoundTrip() throws IOException {
        MultiResponse result = new MultiResponse();
        MultiResponse decodedResult = codeDecode(result);

        assertEquals(result, decodedResult);
        assertEquals(result.hashCode(), decodedResult.hashCode());
    }
",non-flaky,5
112705,hwang-pku_ormlite-core,TransactionManagerTest.testNonRuntimeExceptionWiredRollBack,"	@Test
	public void testNonRuntimeExceptionWiredRollBack() throws Exception {
		if (connectionSource == null) {
			return;
		}
		TransactionManager mgr = new TransactionManager();
		mgr.setConnectionSource(connectionSource);
		mgr.initialize();
		final Dao<Foo, Integer> dao = createDao(Foo.class, true);
		testTransactionManager(mgr, new Exception(""What!!  I protest via an Exception!!""), dao);
	}
",non-flaky,5
78237,apache_beam,SimplePushbackSideInputDoFnRunnerTest.processElementNoSideInputs,"  @Test
  public void processElementNoSideInputs() {
    SimplePushbackSideInputDoFnRunner<Integer, Integer> runner = createRunner(ImmutableList.of());

    WindowedValue<Integer> multiWindow =
        WindowedValue.of(
            2,
            new Instant(-2),
            ImmutableList.of(
                new IntervalWindow(new Instant(-500L), new Instant(0L)),
                new IntervalWindow(BoundedWindow.TIMESTAMP_MIN_VALUE, new Instant(250L)),
                GlobalWindow.INSTANCE),
            PaneInfo.ON_TIME_AND_ONLY_FIRING);
    Iterable<WindowedValue<Integer>> multiWindowPushback =
        runner.processElementInReadyWindows(multiWindow);
    assertThat(multiWindowPushback, emptyIterable());
    // Should preserve the compressed representation when there's no side inputs.
    assertThat(underlying.inputElems, containsInAnyOrder(multiWindow));
  }
",non-flaky,5
159648,liquibase_liquibase,AbstractIntegrationTest.testTag,"    @Test
    public void testTag() throws Exception {
        assumeNotNull(this.getDatabase());

        Liquibase liquibase = createLiquibase(completeChangeLog);
        clearDatabase();

        liquibase = createLiquibase(completeChangeLog);
        liquibase.setChangeLogParameter( ""loginuser"", getUsername());
        liquibase.update(this.contexts);

        liquibase.tag(""Test Tag"");
    }
",non-flaky,5
33912,apache_camel,GridFsConsumerIT.testTimestamp,"    @Test
    public void testTimestamp() throws Exception {
        runTest(""direct:create"", gridFSBucket);
    }
",non-flaky,5
170498,eclipse_jetty.project,MBeanContainerTest.testFindBean,"    @Test
    public void testFindBean()
    {
        managed = getManaged();

        objectName = mbeanContainer.findMBean(managed);
        assertNotNull(objectName);

        assertEquals(managed, mbeanContainer.findBean(objectName), ""Bean must be added"");
        assertNull(mbeanContainer.findBean(null), ""It must return null as there is no bean with the name null"");
    }
",non-flaky,5
89352,apache_samza,TestKafkaCheckpointManagerFactory.testGetCheckpointTopicProperties,"  @Test
  public void testGetCheckpointTopicProperties() {
    Map<String, String> config = new HashMap<>();
    Properties properties = new KafkaConfig(new MapConfig(config)).getCheckpointTopicProperties();

    assertEquals(properties.getProperty(""cleanup.policy""), ""compact"");
    assertEquals(properties.getProperty(""segment.bytes""), String.valueOf(KafkaConfig.DEFAULT_CHECKPOINT_SEGMENT_BYTES()));

    config.put(ApplicationConfig.APP_MODE, ApplicationConfig.ApplicationMode.BATCH.name());
    properties = new KafkaConfig(new MapConfig(config)).getCheckpointTopicProperties();

    assertEquals(properties.getProperty(""cleanup.policy""), ""compact,delete"");
    assertEquals(properties.getProperty(""segment.bytes""), String.valueOf(KafkaConfig.DEFAULT_CHECKPOINT_SEGMENT_BYTES()));
    assertEquals(properties.getProperty(""retention.ms""), String.valueOf(KafkaConfig.DEFAULT_RETENTION_MS_FOR_BATCH()));
  }
",non-flaky,5
112105,apache_shardingsphere-elasticjob,DistributeOnceElasticJobListenerTest.assertAfterJobExecutedWhenIsAllCompletedAndTimeout,"    @Test(expected = JobSystemException.class)
    public void assertAfterJobExecutedWhenIsAllCompletedAndTimeout() {
        when(guaranteeService.isAllCompleted()).thenReturn(false);
        when(timeService.getCurrentMillis()).thenReturn(0L, 2L);
        distributeOnceElasticJobListener.afterJobExecuted(shardingContexts);
        verify(guaranteeService).registerComplete(Arrays.asList(0, 1));
        verify(guaranteeService, times(0)).clearAllCompletedInfo();
    }
",non-flaky,5
113768,salesforce_reactive-grpc,ReactiveStreamObserverPublisherServerTest.answer,"    @Test
    public void requestDelegates() {
        ServerCallStreamObserver<Object> obs = mock(ServerCallStreamObserver.class);
        Subscriber<Object> sub = mock(Subscriber.class);

        final AtomicReference<Subscription> subscription = new AtomicReference<Subscription>();
        doAnswer(new Answer() {
            @Override
            public Object answer(InvocationOnMock invocationOnMock) {
                subscription.set((Subscription) invocationOnMock.getArguments()[0]);
                return null;
            }
",non-flaky,5
26843,wildfly_wildfly,WritableServiceBasedNamingStoreTestCase.testRebindNoOwner,"    @Test
    public void testRebindNoOwner() throws Exception {
        try {
            store.rebind(new CompositeName(""test""), new Object());
            fail(""Should have failed with a read-only context exception"");
        } catch (UnsupportedOperationException expected) {
        }
    }
",non-flaky,5
122608,vespa-engine_vespa,UnixPathTest.badPermissionsString,"    @Test(expected = IllegalArgumentException.class)
    public void badPermissionsString() {
        new UnixPath(fs.getPath(""file.txt"")).setPermissions(""abcdefghi"");
    }
",non-flaky,5
113720,salesforce_reactive-grpc,UnexpectedServerErrorIntegrationTest.manyToMany,"    @Test
    public void manyToMany() {
        ReactorGreeterGrpc.ReactorGreeterStub stub = ReactorGreeterGrpc.newReactorStub(channel);
        Flux<HelloRequest> req = Flux.just(HelloRequest.getDefaultInstance());
        Flux<HelloResponse> resp = req.compose(stub::sayHelloBothStream);

        StepVerifier.create(resp)
                .verifyErrorMatches(t -> t instanceof StatusRuntimeException && ((StatusRuntimeException)t).getStatus().getCode() == Status.Code.INTERNAL);
    }
",non-flaky,5
170469,eclipse_jetty.project,ObjectMBeanUtilTest.testBasicOperations,"    @Test
    public void testBasicOperations()
    {
        assertEquals(derivedExtended, objectMBean.getManagedObject(), ""Managed objects should be equal"");
        assertNull(objectMBean.getObjectName(), ""This method call always returns null in the actual code"");
        assertNull(objectMBean.getObjectNameBasis(), ""This method call always returns null in the actual code"");
        assertNull(objectMBean.getObjectContextBasis(), ""This method call always returns null in the actual code"");
        assertEquals(container, objectMBean.getMBeanContainer(), ""Mbean container should be equal"");
        assertEquals(""Test the mbean extended stuff"", objectMBeanInfo.getDescription(), ""Mbean description must be equal to : Test the mbean extended stuff"");
    }
",non-flaky,5
94670,square_okhttp,Http2Test.settings,"  @Test public void readSettingsFrameUnknownSettingId() throws IOException {
      @Override public void settings(boolean clearPrevious, Settings settings) {
        settingValue.set(settings.get(7));
      }
",non-flaky,5
177204,line_armeria,SpringTomcatApplicationItTest.greetingShouldReturn404,"    @Test
    public void greetingShouldReturn404() throws Exception {
        assertThat(restTemplate.getForEntity(""http://localhost:"" +
                                             httpPort +
                                             ""/tomcat/api/rest/v1/greet"",
                                             Void.class)
                               .getStatusCode()).isEqualByComparingTo(HttpStatus.NOT_FOUND);
    }
",non-flaky,5
98089,vert-x3_vertx-mongo-client,ParsingSSLOptionsTest.one_should_be_able_to_enable_ssl_support_via_config_property,"  @Test
  public void one_should_be_able_to_enable_ssl_support_via_config_property() {
    // given
    final JsonObject withSSLEnabled = new JsonObject().put(""ssl"", true);

    // when
    final SslSettings sslSettings = new MongoClientOptionsParser(vertx, withSSLEnabled).settings().getSslSettings();

    // then
    assertTrue(sslSettings.isEnabled());
  }
",non-flaky,5
179449,abel533_Mapper,IdListMapperTest.testByIdList,"    @Test
    public void testByIdList() {
        SqlSession sqlSession = getSqlSession();
        try {
            CountryMapper mapper = sqlSession.getMapper(CountryMapper.class);
            List<Long> idList = Arrays.asList(1L, 2L, 3L);
            List<Country> countryList = mapper.selectByIdList(idList);
            Assert.assertEquals(3, countryList.size());
            Assert.assertEquals(1L, (long) countryList.get(0).getId());
            Assert.assertEquals(2L, (long) countryList.get(1).getId());
            Assert.assertEquals(3L, (long) countryList.get(2).getId());
            //å é¤
            Assert.assertEquals(3, mapper.deleteByIdList(idList));
            //æ¥è¯¢ç»æ0
            Assert.assertEquals(0, mapper.selectByIdList(idList).size());
        } finally {
            sqlSession.close();
        }
    }
",non-flaky,5
77716,pholser_junit-quickcheck,PrimitivePropertyParameterTypesTest.shouldHold,"    @Test public void leftOpenEndedRangedWrapperFloat() {
        @Property public void shouldHold(@InRange(max = ""3.14"") Float f) {
            assertThat(f, greaterThanOrEqualTo(RangeAttributes.minFloat()));
            assertThat(f, lessThanOrEqualTo(3.14F));
        }
",non-flaky,5
20956,NationalSecurityAgency_timely,MetricAgeOffIteratorTest.testSeekPastEndKey,"    @Test
    public void testSeekPastEndKey() throws Exception {
        SortedMap<Key, Value> table = new TreeMap<>();
        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME), new byte[0], new byte[0], new byte[0],
                TEST_TIME), EMPTY_VALUE);
        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME + 1), new byte[0], new byte[0],
                new byte[0], TEST_TIME + 1), EMPTY_VALUE);
        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME + 2), new byte[0], new byte[0],
                new byte[0], TEST_TIME + 2), EMPTY_VALUE);
        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME + 3), new byte[0], new byte[0],
                new byte[0], TEST_TIME + 3), EMPTY_VALUE);
        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME + 4), new byte[0], new byte[0],
                new byte[0], TEST_TIME + 4), EMPTY_VALUE);
        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME + 5), new byte[0], new byte[0],
                new byte[0], TEST_TIME + 5), EMPTY_VALUE);

        SortedKeyValueIterator<Key, Value> source = new SortedMapIterator(table);
        MetricAgeOffIterator iter = new MetricAgeOffIterator();
        HashMap<String, String> options = new HashMap<>();
        options.put(MetricAgeOffIterator.AGE_OFF_PREFIX + ""default"", Integer.toString(1));
        iter.init(source, options, null);
        iter.seek(new Range(new Key(""sys.cpu.user""), true,
                new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME + 3), new byte[0], new byte[0],
                        new byte[0], TEST_TIME + 3),
                true), columnFamilies, true);
        int seen = 0;
        while (iter.hasTop()) {
            Key k = iter.getTopKey();
            Assert.assertTrue(k.getTimestamp() >= TEST_TIME && k.getTimestamp() <= TEST_TIME + 5);
            seen++;
            iter.next();
        }
        Assert.assertEquals(0, seen);
    }
",non-flaky,5
94619,square_okhttp,InterceptorTest.intercept,"  @Test public void applicationInterceptorsCanShortCircuitResponses() throws Exception {
          @Override public Response intercept(Chain chain) throws IOException {
            return interceptorResponse;
          }
",non-flaky,5
176786,ctco_cukes,BaseContextHandlerTest.shouldExtractDotSeparatedName,"    @Test
    public void shouldExtractDotSeparatedName() throws Exception {
        List<String> groups = capturer.extractGroups(""{(hello.world)}"");
        assertThat(groups, contains(""hello.world""));
    }
",non-flaky,5
160344,ConsenSys_teku,ValidatorMetricDataTest.shouldSerializeObject,"  @Test
  public void shouldSerializeObject() throws JsonProcessingException {
    final ValidatorMetricData process =
        new ValidatorMetricData(
            1, UInt64.valueOf(10L).longValue(), ""system"", 11L, 12L, ""teku"", ""21.8"", 3, 4);
    final String data = jsonProvider.objectToJSON(process);
    assertThat(process).isEqualTo(jsonProvider.jsonToObject(data, ValidatorMetricData.class));
  }
",non-flaky,5
31007,camunda-cloud_zeebe,ArrayValueTest.shouldNotInvalidElementOnRemove,"  @Test
  public void shouldNotInvalidElementOnRemove() {
    // given
    addIntValues(array, 1, 2, 3);

    // when
    final Iterator<IntegerValue> iterator = array.iterator();
    final IntegerValue element = iterator.next();
    iterator.remove();

    // then
    assertThat(element.getValue()).isEqualTo(1);
    encodeAndDecode(array);
    assertIntValues(array, 2, 3);
  }
",non-flaky,5
77644,pholser_junit-quickcheck,Primitive3DArrayPropertyParameterTypesTest.shouldHold,"    @Test public void primitive3DCharacterArray() {
        @Property(trials = 2) public void shouldHold(char[][][] ch) {
        }
",non-flaky,5
77648,pholser_junit-quickcheck,Primitive3DArrayPropertyParameterTypesTest.shouldHold,"    @Test public void primitive3DFloatArray() {
        @Property(trials = 2) public void shouldHold(float[][][] f) {
        }
",non-flaky,5
177158,line_armeria,TokenBucketThrottlingStrategyTest.throttle2,"    @Test
    public void throttle2() throws Exception {
        final WebClient client = WebClient.of(serverRule.httpUri());
        final AggregatedHttpResponse response1 = client.get(""/http-throttle2"").aggregate().get();
        assertThat(response1.status()).isEqualTo(HttpStatus.OK);

        assertThat(response1.headers().contains(HttpHeaderNames.RETRY_AFTER)).isFalse();
        assertThat(response1.headers().contains(""RateLimit-Remaining"")).isFalse();
        assertThat(response1.headers().contains(""X-Rate-Limit-Remaining"")).isFalse();
        assertThat(response1.headers().contains(""X-RateLimit-Remaining"", ""0"")).isTrue();
        assertThat(response1.headers().contains(""X-RateLimit-Reset"")).isTrue();
        final long reset1 = Long.parseLong(response1.headers().get(""X-RateLimit-Reset""));
        assertThat(reset1).isBetween(0L, 10L);
        assertThat(response1.headers().get(""X-RateLimit-Limit"")).isEqualTo(""1, 1;window=10"");

        final AggregatedHttpResponse response2 = client.get(""/http-throttle2"").aggregate().get();
        assertThat(response2.status()).isEqualTo(HttpStatus.TOO_MANY_REQUESTS);

        assertThat(response2.headers().contains(HttpHeaderNames.RETRY_AFTER, ""15"")).isTrue();
        assertThat(response2.headers().contains(""RateLimit-Remaining"")).isFalse();
        assertThat(response2.headers().contains(""X-Rate-Limit-Remaining"")).isFalse();
        assertThat(response2.headers().contains(""X-RateLimit-Remaining"", ""0"")).isTrue();
        assertThat(response2.headers().contains(""X-RateLimit-Reset"", ""15"")).isTrue();
        assertThat(response1.headers().get(""X-RateLimit-Limit"")).isEqualTo(""1, 1;window=10"");
    }
",non-flaky,5
77657,pholser_junit-quickcheck,InstantPropertyParameterTypesTest.shouldHold,"    @Test public void rangedInstant() {
        @Property public void shouldHold(
            @InRange(
",non-flaky,5
159710,liquibase_liquibase,CDILiquibaseTest.shouldRunWhenConfigShouldRunIsTrue,"    @Test
    public void shouldRunWhenConfigShouldRunIsTrue() {
        System.setProperty(""liquibase.config.shouldRun"", ""true"");
        validateRunningState(true);
    }
",non-flaky,5
176804,ctco_cukes,HttpAssertionFacadeImplTest.shouldNotInflateVarName,"    @Test
    public void shouldNotInflateVarName() throws Exception {
        String headerName = ""name"";
        HttpResponseFacade mock = mock(HttpResponseFacade.class);
        Response response = mock(Response.class);
        when(response.getHeader(anyString())).thenReturn(headerName);
        when(mock.response()).thenReturn(response);
        ((HttpAssertionFacadeImpl) facade).facade = mock;

        world.put(""id"", ""1"");
        facade.varAssignedFromHeader(""{(id)}"", headerName);
        Optional<String> value = world.get(""id"");
        assertThat(value, CustomMatchers.equalToOptional(headerName));
    }
",non-flaky,5
133950,CorfuDB_CorfuDB,BaseHandlerTest.testHandleWrongClusterError,"    @Test
    public void testHandleWrongClusterError() {
        final UUID EXPECTED_UUID = UUID.randomUUID();
        ResponseMsg response = getResponseMsg(
                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.IGNORE),
                getWrongClusterErrorMsg(getUuidMsg(EXPECTED_UUID), getUuidMsg(DEFAULT_UUID))
        );

        ArgumentCaptor<WrongClusterException> exceptionCaptor = ArgumentCaptor.forClass(WrongClusterException.class);
        baseHandler.handleMessage(response, mockChannelHandlerContext);

        // Verify that the correct request was completed exceptionally (once)
        // with the expected exception
        verify(mockClientRouter, never()).completeRequest(anyLong(), any());
        verify(mockClientRouter).completeExceptionally(
                eq(response.getHeader().getRequestId()), exceptionCaptor.capture());

        assertEquals(EXPECTED_UUID, exceptionCaptor.getValue().getExpectedCluster());
        assertEquals(DEFAULT_UUID, exceptionCaptor.getValue().getActualCluster());
    }
",non-flaky,5
91386,OpenLCB_OpenLCB_Java,SingleProducerTest.put,"    @Test
    public void testCTor() {
        NodeID nid = new NodeID(new byte[]{1,2,3,4,5,6});
        EventID eid = new EventID(new byte[]{1,2,3,4,5,6,7,8});
        Connection testConnection = new AbstractConnection(){
            public void put(Message msg, Connection node) {
            }
",non-flaky,5
91467,strapdata_elassandra,MasterDisruptionIT.testIsolateMasterAndVerifyClusterStateConsensus,"    @TestLogging(
    public void testIsolateMasterAndVerifyClusterStateConsensus() throws Exception {
        final List<String> nodes = startCluster(3);

        assertAcked(prepareCreate(""test"")
                .setSettings(Settings.builder()
                        .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1 + randomInt(2))
                        .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, randomInt(2))
                ));

        ensureGreen();
        String isolatedNode = internalCluster().getMasterName();
        TwoPartitions partitions = isolateNode(isolatedNode);
        NetworkDisruption networkDisruption = addRandomDisruptionType(partitions);
        networkDisruption.startDisrupting();

        String nonIsolatedNode = partitions.getMajoritySide().iterator().next();

        // make sure cluster reforms
        ensureStableCluster(2, nonIsolatedNode);

        // make sure isolated need picks up on things.
        assertNoMaster(isolatedNode, TimeValue.timeValueSeconds(40));

        // restore isolation
        networkDisruption.stopDisrupting();

        for (String node : nodes) {
            ensureStableCluster(3, new TimeValue(DISRUPTION_HEALING_OVERHEAD.millis() + networkDisruption.expectedTimeToHeal().millis()),
                    true, node);
        }

        logger.info(""issue a reroute"");
        // trigger a reroute now, instead of waiting for the background reroute of RerouteService
        assertAcked(client().admin().cluster().prepareReroute());
        // and wait for it to finish and for the cluster to stabilize
        ensureGreen(""test"");

        // verify all cluster states are the same
        // use assert busy to wait for cluster states to be applied (as publish_timeout has low value)
        assertBusy(() -> {
            ClusterState state = null;
            for (String node : nodes) {
                ClusterState nodeState = getNodeClusterState(node);
                if (state == null) {
                    state = nodeState;
                    continue;
                }
                // assert nodes are identical
                try {
                    assertEquals(""unequal versions"", state.version(), nodeState.version());
                    assertEquals(""unequal node count"", state.nodes().getSize(), nodeState.nodes().getSize());
                    assertEquals(""different masters "", state.nodes().getMasterNodeId(), nodeState.nodes().getMasterNodeId());
                    assertEquals(""different meta data version"", state.metaData().version(), nodeState.metaData().version());
                    assertEquals(""different routing"", state.routingTable().toString(), nodeState.routingTable().toString());
                } catch (AssertionError t) {
                    fail(""failed comparing cluster state: "" + t.getMessage() + ""\n"" +
                            ""--- cluster state of node ["" + nodes.get(0) + ""]: ---\n"" + state +
                            ""\n--- cluster state ["" + node + ""]: ---\n"" + nodeState);
                }

            }
        });
    }
",non-flaky,5
110189,Wikidata_wikidata-toolkit,RdfConverterTest.testWriteItemDocumentWithNullPropertyTypes,"	@Test
	public void testWriteItemDocumentWithNullPropertyTypes() throws RDFHandlerException,
			IOException, RDFParseException {
		this.rdfConverter = new RdfConverter(this.rdfWriter, this.sites,
				new MockPropertyRegister.WithNullPropertyTypes());

		ItemDocument document = this.objectFactory.createItemDocument();
		this.rdfConverter.writeItemDocument(document);
		this.rdfWriter.finish();
		Model model = RdfTestHelpers.parseRdf(out.toString());
		assertEquals(model, RdfTestHelpers.parseRdf(RdfTestHelpers
				.getResourceFromFile(""ItemDocumentUnknownPropertyTypes.rdf"")));
	}
",non-flaky,5
170546,eclipse_jetty.project,TestServletAnnotations.testDeclareRoles,"    @Test
    public void testDeclareRoles()
        throws Exception
",non-flaky,5
135793,Netflix_Hystrix,RollingCollapserBatchSizeDistributionStreamTest.onCompleted,"    @Test
    public void testBatchesAgeOut() {
        HystrixCollapserKey key = HystrixCollapserKey.Factory.asKey(""Collapser-Batch-Size-B"");
        stream = RollingCollapserBatchSizeDistributionStream.getInstance(key, 10, 100);
        stream.startCachingStreamValuesIfUnstarted();

        final CountDownLatch latch = new CountDownLatch(1);
        stream.observe().take(30).subscribe(new Subscriber<CachedValuesHistogram>() {
            @Override
            public void onCompleted() {
                latch.countDown();
            }
",non-flaky,5
177990,aosp-mirror_platform_frameworks_support,GuidedStepSupportFragmentTest.answer,"    @Test
    public void finishGuidedStepSupportFragment_finishes_activity() throws Throwable {
        final String firstFragmentName = generateMethodTestName(""first"");
        GuidedStepTestSupportFragment.Provider first = mockProvider(firstFragmentName);
        doAnswer(new Answer<Void>() {
            public Void answer(InvocationOnMock invocation) {
                List actions = (List) invocation.getArguments()[0];
                actions.add(new GuidedAction.Builder().id(1001).title(""Finish activity"").build());
                return null;
            }
",non-flaky,5
98108,vert-x3_vertx-mongo-client,CredentialListParserTest.testSimpleAuthWithSource,"  @Test
  public void testSimpleAuthWithSource() {
    JsonObject config = new JsonObject();
    String username = TestUtils.randomAlphaString(8);
    String password = TestUtils.randomAlphaString(20);
    String authSource = TestUtils.randomAlphaString(10);
    config.put(""username"", username);
    config.put(""password"", password);
    config.put(""authSource"", authSource);

    List<MongoCredential> credentials = new CredentialListParser(null, config).credentials();
    assertEquals(1, credentials.size());
    MongoCredential credential = credentials.get(0);
    assertEquals(username, credential.getUserName());
    assertArrayEquals(password.toCharArray(), credential.getPassword());
    assertEquals(authSource, credential.getSource());
  }
",non-flaky,5
98244,apache_jackrabbit,InterruptedQueryTest.run,"    @Test
    public void testQuery() throws Exception {
        if (Constants.WINDOWS) {
            return;
        }
        for (int i = 0; i < 100; i++) {
            session.getRootNode().addNode(""node"" + i, ""nt:unstructured"");
        }
        session.save();
        final QueryManager qm = session.getWorkspace().getQueryManager();
        final AtomicBoolean stop = new AtomicBoolean(false);
        final List<Exception> exceptions = Collections.synchronizedList(
                new ArrayList<Exception>());
        Thread t = new Thread(new Runnable() {
            @Override
            public void run() {
                while (!stop.get() && exceptions.isEmpty()) {
                    try {
                        // execute query
                        String stmt = ""//*[@jcr:primaryType='nt:unstructured']"";
                        qm.createQuery(stmt, Query.XPATH).execute();
                    } catch (RepositoryException e) {
                        if (Constants.SUN_OS) {
                            // on Solaris it's OK when the root cause
                            // of the exception is an InterruptedIOException
                            // the underlying file is not closed
                            Throwable t = e;
                            while (t.getCause() != null) {
                                t = t.getCause();
                            }
                            if (!(t instanceof InterruptedIOException)) {
                                exceptions.add(e);
                            }
                        } else {
                            exceptions.add(e);
                        }
                    }
                }
            }
",non-flaky,5
162384,testcontainers_testcontainers-java,MountableFileTest.forClasspathResourceFromJarWithAbsolutePath,"    @Test
    public void forClasspathResourceFromJarWithAbsolutePath() throws Exception {
        final MountableFile mountableFile = MountableFile.forClasspathResource(""/META-INF/dummy_unique_name.txt"");

        performChecks(mountableFile);
    }
",non-flaky,5
227,cdancy_jenkins-rest,JobsApiLiveTest.testGetJobListFromRoot,"@Test
@Test(dependsOnMethods = ""testCreateJob"")
public void testGetJobListFromRoot() {
    JobList output = api().jobList("""");
    assertNotNull(output);
    assertFalse(output.jobs().isEmpty());
    assertEquals(output.jobs().size(), 2);
}",test order dependency,4
135013,undertow-io_undertow,ClientEndpointReconnectTestCase.testAnnotatedClientEndpoint,"    @Test
    public void testAnnotatedClientEndpoint() throws Exception {
        AnnotatedClientReconnectEndpoint endpoint = new AnnotatedClientReconnectEndpoint();
        Session session = deployment.connectToServer(endpoint, new URI(""ws://"" + DefaultServer.getHostAddress(""default"") + "":"" + DefaultServer.getHostPort(""default"") + ""/ws/""));

        Assert.assertEquals(""OPEN"", endpoint.message());
        session.getBasicRemote().sendText(""hi"");
        Assert.assertEquals(""MESSAGE-ECHO-hi"", endpoint.message());
        session.getBasicRemote().sendText(""close"");
        Assert.assertEquals(""CLOSE"", endpoint.message());
        Assert.assertEquals(""OPEN"", endpoint.message());
        session.getBasicRemote().sendText(""hi"");
        Assert.assertEquals(""MESSAGE-ECHO-hi"", endpoint.message());
        session.getBasicRemote().sendText(""close"");
        Assert.assertEquals(""CLOSE"", endpoint.message());
        Assert.assertEquals(""OPEN"", endpoint.message());
        session.getBasicRemote().sendText(""hi"");
        Assert.assertEquals(""MESSAGE-ECHO-hi"", endpoint.message());
        session.getBasicRemote().sendText(""close"");
        Assert.assertEquals(""CLOSE"", endpoint.message());
        Assert.assertNull(endpoint.quickMessage());
        Assert.assertFalse(failed);
    }
",non-flaky,5
112762,hwang-pku_ormlite-core,RawResultsImplTest.testGetFirstResult,"	@Test
	public void testGetFirstResult() throws Exception {
		Dao<Foo, Integer> dao = createDao(Foo.class, true);
		Foo foo1 = new Foo();
		foo1.val = 342;
		assertEquals(1, dao.create(foo1));
		Foo foo2 = new Foo();
		foo2.val = 9045342;
		assertEquals(1, dao.create(foo2));

		QueryBuilder<Foo, Integer> qb = dao.queryBuilder();
		qb.selectRaw(""MAX("" + Foo.VAL_COLUMN_NAME + "")"");
		GenericRawResults<String[]> results = dao.queryRaw(qb.prepareStatementString());
		String[] result = results.getFirstResult();
		int max = Integer.parseInt(result[0]);
		if (foo1.val > foo2.val) {
			assertEquals(foo1.val, max);
		} else {
			assertEquals(foo2.val, max);
		}
	}
",non-flaky,5
89350,apache_samza,TestKafkaSystemDescriptor.testSDConfigsWithoutOverrides,"  @Test
  public void testSDConfigsWithoutOverrides() {
    KafkaSystemDescriptor sd = new KafkaSystemDescriptor(""kafka"");

    Map<String, String> generatedConfigs = sd.toConfig();
    assertEquals(""org.apache.samza.system.kafka.KafkaSystemFactory"", generatedConfigs.get(""systems.kafka.samza.factory""));
    assertEquals(1, generatedConfigs.size()); // verify that there are no other configs
  }
",non-flaky,5
161,camunda-cloud_zeebe,AtomixTransportTest.shouldOnlyHandleRequestsOfSubscribedTypes,"@Test
public void shouldOnlyHandleRequestsOfSubscribedTypes() {
    serverTransport.subscribe(0, COMMAND, new DirectlyResponder());
    serverTransport.subscribe(0, UNKNOWN, new FailingResponder());
    final var requestFuture = clientTransport.sendRequest(() -> AtomixTransportTest.serverAddress, new Request(""messageABC""), REQUEST_TIMEOUT);
    final var response = requestFuture.join();
    assertThat(response.byteArray()).isEqualTo(""messageABC"".getBytes());
}",async wait,0
43062,trinodb_trino,BaseConnectorTest.testExplainAnalyze,"    @Test
    public void testExplainAnalyze()
    {
        assertExplainAnalyze(""EXPLAIN ANALYZE SELECT * FROM orders"");
        assertExplainAnalyze(""EXPLAIN ANALYZE SELECT count(*), clerk FROM orders GROUP BY clerk"");
        assertExplainAnalyze(
                ""EXPLAIN ANALYZE SELECT x + y FROM ("" +
                        ""   SELECT orderdate, COUNT(*) x FROM orders GROUP BY orderdate) a JOIN ("" +
                        ""   SELECT orderdate, COUNT(*) y FROM orders GROUP BY orderdate) b ON a.orderdate = b.orderdate"");
        assertExplainAnalyze(""EXPLAIN ANALYZE SELECT count(*), clerk FROM orders GROUP BY clerk UNION ALL SELECT sum(orderkey), clerk FROM orders GROUP BY clerk"");

        assertExplainAnalyze(""EXPLAIN ANALYZE SHOW COLUMNS FROM orders"");
        assertExplainAnalyze(""EXPLAIN ANALYZE EXPLAIN SELECT count(*) FROM orders"");
        assertExplainAnalyze(""EXPLAIN ANALYZE EXPLAIN ANALYZE SELECT count(*) FROM orders"");
        assertExplainAnalyze(""EXPLAIN ANALYZE SHOW FUNCTIONS"");
        assertExplainAnalyze(""EXPLAIN ANALYZE SHOW TABLES"");
        assertExplainAnalyze(""EXPLAIN ANALYZE SHOW SCHEMAS"");
        assertExplainAnalyze(""EXPLAIN ANALYZE SHOW CATALOGS"");
        assertExplainAnalyze(""EXPLAIN ANALYZE SHOW SESSION"");
    }
",non-flaky,5
135064,undertow-io_undertow,URLUtilsTestCase.testIsAbsoluteUrlRecognizingAbsolutUrls,"    @Test
    public void testIsAbsoluteUrlRecognizingAbsolutUrls() {
        assertTrue(URLUtils.isAbsoluteUrl(""https://some.valid.url:8080/path?query=val""));
        assertTrue(URLUtils.isAbsoluteUrl(""http://some.valid.url:8080/path?query=val""));
        assertTrue(URLUtils.isAbsoluteUrl(""http://some.valid.url""));
    }
",non-flaky,5
170523,eclipse_jetty.project,TestAnnotationConfiguration.createServletContainerInitializerAnnotationHandlers,"    @Test
    public void testClassScanHandlersForSCIs() throws Exception
    {
        //test that SCIs with a @HandlesTypes that is an annotation registers
        //handlers for the scanning phase that will capture the class hierarchy,
        //and also capture all classes that contain the annotation
        ClassLoader old = Thread.currentThread().getContextClassLoader();
        Thread.currentThread().setContextClassLoader(webAppLoader);

        try
        {
            class MyAnnotationConfiguration extends AnnotationConfiguration
            {

                @Override
                public void createServletContainerInitializerAnnotationHandlers(WebAppContext context, List<ServletContainerInitializer> scis) throws Exception
                {
                    super.createServletContainerInitializerAnnotationHandlers(context, scis);
                    //check class hierarchy scanner handler is registered
                    assertNotNull(_classInheritanceHandler);
                    //check 
                    assertEquals(1, _containerInitializerAnnotationHandlers.size());
                    ContainerInitializerAnnotationHandler handler = _containerInitializerAnnotationHandlers.get(0);
                    assertThat(handler._holder.toString(), containsString(""com.acme.initializer.FooInitializer""));
                    assertEquals(""com.acme.initializer.Foo"", handler._annotation.getName());
                }
",non-flaky,5
175750,GoogleCloudPlatform_google-cloud-eclipse,AppEngineDeployPreferencesPanelTest.testProjectNotSelectedIsAnErrorWhenRequireValuesIsTrue,"  @Test
  public void testProjectNotSelectedIsAnErrorWhenRequireValuesIsTrue() {
    deployPanel = createPanel(true /* requireValues */);
    assertThat(getProjectSelectionValidator().getSeverity(), is(IStatus.ERROR));
  }
",non-flaky,5
273,wildfly_wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993.testFireMultipleLevelEvent,"@Test
public void testFireMultiLevelEvent() throws Exception {
    final NamingEventCoordinator coordinator = new NamingEventCoordinator();
    final CollectingListener subtreeListener = new CollectingListener(1);
    coordinator.addListener(""foo"", EventContext.SUBTREE_SCOPE, subtreeListener);
    final CollectingListener subtreeListenerTwo = new CollectingListener(1);
    coordinator.addListener(""foo/bar"", EventContext.SUBTREE_SCOPE, subtreeListenerTwo);
    final CollectingListener subtreeListenerThree = new CollectingListener(1);
    coordinator.addListener(""foo/bar/baz"", EventContext.SUBTREE_SCOPE, subtreeListenerThree);
    coordinator.fireEvent(context, new CompositeName(""foo/bar/baz/boo""), null, null, NamingEvent.OBJECT_ADDED, ""bind"", EventContext.OBJECT_SCOPE, EventContext.ONELEVEL_SCOPE, EventContext.SUBTREE_SCOPE);
    subtreeListener.latch.await(1, TimeUnit.SECONDS);
    subtreeListenerTwo.latch.await(1, TimeUnit.SECONDS);
    subtreeListenerThree.latch.await(1, TimeUnit.SECONDS);
    assertEquals(1, subtreeListener.capturedEvents.size());
    assertEquals(1, subtreeListenerTwo.capturedEvents.size());
    assertEquals(1, subtreeListenerThree.capturedEvents.size());
}",test order dependency,4
97973,ReactiveX_RxJava,ObservableTests.call,"    @Test
    public void testReduce() {
        Observable<Integer> observable = Observable.from(1, 2, 3, 4);
        observable.reduce(new Func2<Integer, Integer, Integer>() {

            @Override
            public Integer call(Integer t1, Integer t2) {
                return t1 + t2;
            }
",non-flaky,5
38191,palantir_atlasdb,SchemasTest.testGetFullTableName,"    @Test
    public void testGetFullTableName() {
        MatcherAssert.assertThat(
                Schemas.getFullTableName(TABLE_NAME, NAMESPACE),
                Matchers.equalTo(NAMESPACE.getName() + ""."" + TABLE_NAME));
    }
",non-flaky,5
94749,ktuukkan_marine-api,Latitude27Test.defaultValueIsNotAvailable,"    @Test
    public void defaultValueIsNotAvailable() {
        assertFalse(Latitude27.isAvailable(91*60*10000));
    }
",non-flaky,5
59642,looly_hutool,VelocityTest.charsetTest,"	@Test
	public void charsetTest(){
		final TemplateConfig config = new TemplateConfig(""templates"", TemplateConfig.ResourceMode.CLASSPATH);
		config.setCustomEngine(VelocityEngine.class);
		config.setCharset(CharsetUtil.CHARSET_GBK);
		final TemplateEngine engine = TemplateUtil.createEngine(config);
		Template template = engine.getTemplate(""velocity_test_gbk.vtl"");
		String result = template.render(Dict.create().set(""name"", ""hutool""));
		Assert.assertEquals(""ä½ å¥½,hutool"", result);
	}
",non-flaky,5
26925,wildfly_wildfly,MailSubsystem30TestCase.testRuntime,"    @Test
    public void testRuntime() throws Exception {
        KernelServicesBuilder builder = createKernelServicesBuilder(new DefaultInitializer())
                .setSubsystemXml(getSubsystemXml());
        KernelServices mainServices = builder.build();
        if (!mainServices.isSuccessfulBoot()) {
            Assert.fail(mainServices.getBootError().toString());
        }
        ServiceController<?> javaMailService = mainServices.getContainer().getService(MailSessionDefinition.SESSION_CAPABILITY.getCapabilityServiceName(""defaultMail""));
        javaMailService.setMode(ServiceController.Mode.ACTIVE);
        Session session = (Session) javaMailService.getValue();
        Assert.assertNotNull(""session should not be null"", session);
        Properties properties = session.getProperties();
        Assert.assertNotNull(""smtp host should be set"", properties.getProperty(""mail.smtp.host""));
        Assert.assertNotNull(""pop3 host should be set"", properties.getProperty(""mail.pop3.host""));
        Assert.assertNotNull(""imap host should be set"", properties.getProperty(""mail.imap.host""));
        PasswordAuthentication auth = session.requestPasswordAuthentication(InetAddress.getLocalHost(), 25, ""smtp"", """", """");
        Assert.assertEquals(""nobody"", auth.getUserName());
        Assert.assertEquals(""pass"", auth.getPassword());

        ServiceController<?> defaultMailService = mainServices.getContainer().getService(MailSessionDefinition.SESSION_CAPABILITY.getCapabilityServiceName(""default2""));
        session = (Session) defaultMailService.getValue();
        Assert.assertEquals(""Debug should be true"", true, session.getDebug());


        ServiceController<?> customMailService = mainServices.getContainer().getService(MailSessionDefinition.SESSION_CAPABILITY.getCapabilityServiceName(""custom""));
        session = (Session) customMailService.getValue();
        properties = session.getProperties();
        String host = properties.getProperty(""mail.smtp.host"");
        Assert.assertNotNull(""smtp host should be set"", host);
        Assert.assertEquals(""mail.example.com"", host);

        Assert.assertEquals(""localhost"", properties.get(""mail.pop3.host"")); //this one should be read out of socket binding
        Assert.assertEquals(""some-custom-prop-value"", properties.get(""mail.pop3.custom_prop"")); //this one should be extra property
        Assert.assertEquals(""fully-qualified-prop-name"", properties.get(""some.fully.qualified.property"")); //this one should be extra property

        MailSessionService service = (MailSessionService) customMailService.getService();
        Credentials credentials = service.getConfig().getCustomServers()[0].getCredentials();
        Assert.assertEquals(credentials.getUsername(), ""username"");
        Assert.assertEquals(credentials.getPassword(), ""password"");


    }
",non-flaky,5
26856,wildfly_wildfly,ServiceBasedNamingStoreTestCase.testLookupBinding,"    @Test
    public void testLookupBinding() throws Exception {
        final ServiceName bindingName = ServiceName.JBOSS.append(""foo"", ""bar"");
        final Object value = new Object();
        bindObject(bindingName, value);

        final Object obj = store.lookup(new CompositeName(""foo/bar""));
        assertNotNull(obj);
        assertEquals(value, obj);
    }
",non-flaky,5
76962,Tencent_Firestorm,ChecksumUtilsTest.crc32TestWithByteBuff,"  @Test
  public void crc32TestWithByteBuff() throws Exception {
    int length = 32 * 1024 * 1024;
    byte[] data = new byte[length];
    new Random().nextBytes(data);

    String tempDir = Files.createTempDirectory(""rss"").toString();
    File file = new File(tempDir, ""crc_test.txt"");
    file.createNewFile();
    file.deleteOnExit();

    try (FileOutputStream outputStream = new FileOutputStream(file)) {
      outputStream.write(data);
    }

    long expectedChecksum = ChecksumUtils.getCrc32(data);

    // test direct ByteBuffer
    Path path = Paths.get(file.getAbsolutePath());
    FileChannel fileChannel = FileChannel.open(path);
    ByteBuffer buffer = ByteBuffer.allocateDirect(length);
    int bytesRead = fileChannel.read(buffer);
    fileChannel.close();
    assertEquals(length, bytesRead);
    buffer.flip();
    assertEquals(expectedChecksum, ChecksumUtils.getCrc32(buffer));
    assertEquals(length, buffer.position());

    // test heap ByteBuffer
    path = Paths.get(file.getAbsolutePath());
    fileChannel = FileChannel.open(path);
    buffer = ByteBuffer.allocate(length);
    bytesRead = fileChannel.read(buffer);
    fileChannel.close();
    assertEquals(length, bytesRead);
    buffer.flip();
    assertEquals(expectedChecksum, ChecksumUtils.getCrc32(buffer));

  }
",non-flaky,5
104617,apache_pinot,ChaosMonkeyIntegrationTest.testShortZookeeperFreeze,"  @Test(enabled = false)
  public void testShortZookeeperFreeze()
      throws Exception {
    testFreezeZookeeper(10000L);
  }
",non-flaky,5
177183,line_armeria,BraveClientIntegrationTest.redirect,"    @Test
    public void redirect() {
        throw new AssumptionViolatedException(""Armeria does not support client redirect."");
    }
",non-flaky,5
84566,apache_zookeeper,DistributedQueueTest.testElement1,"    @Test
    public void testElement1() throws Exception {
        createNremoveMelementTest(""/testElement1"", 1, 0);
    }
",non-flaky,5
113743,salesforce_reactive-grpc,UnaryZeroMessageResponseIntegrationTest.zeroMessageResponseManyToOne,"    @Test
    public void zeroMessageResponseManyToOne() {
        serverRule.getServiceRegistry().addService(new MissingUnaryResponseService());

        ReactorGreeterGrpc.ReactorGreeterStub stub = ReactorGreeterGrpc.newReactorStub(serverRule.getChannel());
        Flux<HelloRequest> req = Flux.just(
                HelloRequest.newBuilder().setName(""a"").build(),
                HelloRequest.newBuilder().setName(""b"").build(),
                HelloRequest.newBuilder().setName(""c"").build());

        Mono<HelloResponse> resp = req.as(stub::sayHelloReqStream);

        StepVerifier.create(resp).verifyErrorMatches(t ->
                t instanceof StatusRuntimeException &&
                ((StatusRuntimeException) t).getStatus().getCode() == Status.Code.CANCELLED);
    }
",non-flaky,5
170489,eclipse_jetty.project,ConnectorServerTest.testLocalhostRegistryBindsToLoopback,"    @Test
    public void testLocalhostRegistryBindsToLoopback() throws Exception
    {
        connectorServer = new ConnectorServer(new JMXServiceURL(""service:jmx:rmi:///jndi/rmi://localhost:1099/jmxrmi""), objectName);
        connectorServer.start();

        InetAddress localHost = InetAddress.getLocalHost();
        if (!localHost.isLoopbackAddress())
        {
            assertThrows(ConnectException.class, () ->
            {
                // Verify that I cannot connect to the RMIRegistry using a non-loopback address.
                new Socket(localHost, 1099);
            });
        }

        InetAddress loopback = InetAddress.getLoopbackAddress();
        new Socket(loopback, 1099).close();
    }
",non-flaky,5
19453,eclipse_xtext-core,ImportedNamespaceAwareLocalScopeProviderTest.iterator,"	@Test public void testImportsWithoutWildcard() throws Exception {
			public Iterator<EObject> iterator() {
				return resource.getAllContents();
			}
",non-flaky,5
26862,wildfly_wildfly,ServiceBasedNamingStoreTestCase.testListBindings,"    @Test
    public void testListBindings() throws Exception {
        final Object value = new Object();
        bindObject(ServiceName.JBOSS.append(""TestBean""), value);
        bindObject(ServiceName.JBOSS.append(""foo"", ""TestBean""), value);
        bindObject(ServiceName.JBOSS.append(""foo"", ""bar"", ""TestBean""), value);
        bindObject(ServiceName.JBOSS.append(""foo"", ""bar"", ""baz"", ""TestBean""), value);

        store.add(ServiceName.JBOSS.append(""foos"", ""bar""));
        store.add(ServiceName.JBOSS.append(""fo"", ""bar""));
        store.add(ServiceName.JBOSS.append(""foo"", ""ba"", ""baz""));
        store.add(ServiceName.JBOSS.append(""foo"", ""bart"", ""baz""));
        store.add(ServiceName.JBOSS.append(""foo"", ""bar"", ""ba""));
        store.add(ServiceName.JBOSS.append(""foo"", ""bar"", ""bazt""));
        store.add(ServiceName.JBOSS.append(""foo"", ""bar"", ""art""));
        store.add(ServiceName.JBOSS.append(""other"", ""one""));

        List<Binding> list = store.listBindings(new CompositeName(""""));
        assertEquals(5, list.size());
        assertContains(list, ""TestBean"", Object.class);
        assertContains(list, ""foo"", NamingContext.class);
        assertContains(list, ""fo"", NamingContext.class);
        assertContains(list, ""foos"", NamingContext.class);
        assertContains(list, ""other"", NamingContext.class);


        list = store.listBindings(new CompositeName(""foo""));
        assertEquals(4, list.size());
        assertContains(list, ""TestBean"", Object.class);
        assertContains(list, ""ba"", NamingContext.class);
        assertContains(list, ""bart"", NamingContext.class);
        assertContains(list, ""bar"", NamingContext.class);

        for (Binding binding : list) {
            if (binding.getName().equals(""bar"")) {
                final Object bean = Context.class.cast(binding.getObject()).lookup(""TestBean"");
                assertNotNull(bean);
                assertEquals(value, bean);
            }
        }
    }
",non-flaky,5
91483,strapdata_elassandra,IndexActionIT.testAutoGenerateIdNoDuplicates,"    @TestLogging(""_root:DEBUG,org.elasticsearch.index.shard.IndexShard:TRACE,org.elasticsearch.action.search:TRACE"")
    public void testAutoGenerateIdNoDuplicates() throws Exception {
        int numberOfIterations = scaledRandomIntBetween(10, 50);
        for (int i = 0; i < numberOfIterations; i++) {
            Exception firstError = null;
            createIndex(""test"");
            int numOfDocs = randomIntBetween(10, 100);
            logger.info(""indexing [{}] docs"", numOfDocs);
            List<IndexRequestBuilder> builders = new ArrayList<>(numOfDocs);
            for (int j = 0; j < numOfDocs; j++) {
                builders.add(client().prepareIndex(""test"", ""type"").setSource(""field"", ""value_"" + j));
            }
            indexRandom(true, builders);
            logger.info(""verifying indexed content"");
            int numOfChecks = randomIntBetween(8, 12);
            for (int j = 0; j < numOfChecks; j++) {
                try {
                    logger.debug(""running search with all types"");
                    SearchResponse response = client().prepareSearch(""test"").get();
                    if (response.getHits().getTotalHits() != numOfDocs) {
                        final String message = ""Count is "" + response.getHits().getTotalHits() + "" but "" + numOfDocs + "" was expected. ""
                            + ElasticsearchAssertions.formatShardStatus(response);
                        logger.error(""{}. search response: \n{}"", message, response);
                        fail(message);
                    }
                } catch (Exception e) {
                    logger.error(""search for all docs types failed"", e);
                    if (firstError == null) {
                        firstError = e;
                    }
                }
                try {
                    logger.debug(""running search with a specific type"");
                    SearchResponse response = client().prepareSearch(""test"").setTypes(""type"").get();
                    if (response.getHits().getTotalHits() != numOfDocs) {
                        final String message = ""Count is "" + response.getHits().getTotalHits() + "" but "" + numOfDocs + "" was expected. ""
                            + ElasticsearchAssertions.formatShardStatus(response);
                        logger.error(""{}. search response: \n{}"", message, response);
                        fail(message);
                    }
                } catch (Exception e) {
                    logger.error(""search for all docs of a specific type failed"", e);
                    if (firstError == null) {
                        firstError = e;
                    }
                }
            }
            if (firstError != null) {
                fail(firstError.getMessage());
            }
            internalCluster().wipeIndices(""test"");
        }
    }
",non-flaky,5
11,androidx_androidx,getNanoTime,"@Test
public void getNanoTime() {
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
        long time = mRecyclerView.getNanoTime();
        assertNotEquals(0, time);
        assertNotEquals(time, mRecyclerView.getNanoTime());
    } else {
        assertEquals(0, mRecyclerView.getNanoTime());
    }
}",time,2
92592,FasterXML_jackson-databind,TestTypeFactoryWithClassLoader.testUsesCorrectClassLoaderWhenThreadClassLoaderIsNull,"  @Test
  public void testUsesCorrectClassLoaderWhenThreadClassLoaderIsNull() throws ClassNotFoundException {
	Thread.currentThread().setContextClassLoader(null);
	TypeFactory spySut = spy(mapper.getTypeFactory().withModifier(typeModifier).withClassLoader(classLoader));
	Class<?> clazz = spySut.findClass(aClassName);
	verify(spySut).getClassLoader();
	verify(spySut).classForName(any(String.class), any(Boolean.class), eq(classLoader));
	Assert.assertNotNull(clazz);
	Assert.assertEquals(classLoader, spySut.getClassLoader());
	Assert.assertEquals(typeModifier,spySut._modifiers[0]);
	Assert.assertEquals(null, Thread.currentThread().getContextClassLoader());
  }
",non-flaky,5
84617,apache_zookeeper,GetEphemeralsTest.testGetEphemeralsEmpty,"    @Test
    public void testGetEphemeralsEmpty() throws IOException, KeeperException, InterruptedException {

        final CountDownLatch doneProcessing = new CountDownLatch(1);
        final String checkPath = ""/unknownPath"";
        final int expectedSize = 0;
        final List<String> unexpectedBehavior = new ArrayList<String>();
        zk.getEphemerals(checkPath, (rc, ctx, paths) -> {
            if (paths == null) {
                unexpectedBehavior.add(String.format(""Expected ephemeral count for %s to be %d but was null"", checkPath, expectedSize));
            } else if (paths.size() != expectedSize) {
                unexpectedBehavior.add(String.format(""Expected ephemeral count for %s to be %d but was %d"", checkPath, expectedSize, paths.size()));
            }
            doneProcessing.countDown();
        }, null);
        long waitForCallbackSecs = 2L;
        if (!doneProcessing.await(waitForCallbackSecs, TimeUnit.SECONDS)) {
            fail(String.format(""getEphemerals(%s) didn't callback within %d seconds"", checkPath, waitForCallbackSecs));
        }
        checkForUnexpectedBehavior(unexpectedBehavior);
    }
",non-flaky,5
112085,apache_shardingsphere-elasticjob,JobShardingStrategyFactoryTest.assertGetStrategyFailureWhenStrategyClassInvalid,"    @Test(expected = JobConfigurationException.class)
    public void assertGetStrategyFailureWhenStrategyClassInvalid() {
        JobShardingStrategyFactory.getStrategy(InvalidJobShardingStrategy.class.getName());
    }
",non-flaky,5
70771,apache_kafka,ConnectWorkerIntegrationTest.testBrokerCoordinator,"    @Test
    public void testBrokerCoordinator() throws Exception {
        workerProps.put(DistributedConfig.SCHEDULED_REBALANCE_MAX_DELAY_MS_CONFIG, String.valueOf(5000));
        connect = connectBuilder.workerProps(workerProps).build();
        // start the clusters
        connect.start();
        int numTasks = 4;
        // create test topic
        connect.kafka().createTopic(""test-topic"", NUM_TOPIC_PARTITIONS);

        // setup up props for the sink connector
        Map<String, String> props = new HashMap<>();
        props.put(CONNECTOR_CLASS_CONFIG, MonitorableSourceConnector.class.getSimpleName());
        props.put(TASKS_MAX_CONFIG, String.valueOf(numTasks));
        props.put(""topic"", ""test-topic"");
        props.put(""throughput"", String.valueOf(1));
        props.put(""messages.per.poll"", String.valueOf(10));
        props.put(KEY_CONVERTER_CLASS_CONFIG, StringConverter.class.getName());
        props.put(VALUE_CONVERTER_CLASS_CONFIG, StringConverter.class.getName());

        waitForCondition(() -> assertWorkersUp(NUM_WORKERS).orElse(false),
                WORKER_SETUP_DURATION_MS, ""Initial group of workers did not start in time."");

        // start a source connector
        connect.configureConnector(CONNECTOR_NAME, props);

        waitForCondition(() -> assertConnectorAndTasksRunning(CONNECTOR_NAME, numTasks).orElse(false),
                CONNECTOR_SETUP_DURATION_MS, ""Connector tasks did not start in time."");

        connect.kafka().stopOnlyKafka();

        waitForCondition(() -> assertWorkersUp(NUM_WORKERS).orElse(false),
                WORKER_SETUP_DURATION_MS, ""Group of workers did not remain the same after broker shutdown"");

        // Allow for the workers to discover that the coordinator is unavailable, wait is
        // heartbeat timeout * 2 + 4sec
        Thread.sleep(TimeUnit.SECONDS.toMillis(10));

        connect.kafka().startOnlyKafkaOnSamePorts();

        // Allow for the kafka brokers to come back online
        Thread.sleep(TimeUnit.SECONDS.toMillis(10));

        waitForCondition(() -> assertWorkersUp(NUM_WORKERS).orElse(false),
                WORKER_SETUP_DURATION_MS, ""Group of workers did not remain the same within the ""
                        + ""designated time."");

        // Allow for the workers to rebalance and reach a steady state
        Thread.sleep(TimeUnit.SECONDS.toMillis(10));

        waitForCondition(() -> assertConnectorAndTasksRunning(CONNECTOR_NAME, numTasks).orElse(false),
                CONNECTOR_SETUP_DURATION_MS, ""Connector tasks did not start in time."");
    }
",non-flaky,5
112675,hwang-pku_ormlite-core,JavaxPersistenceTest.testConversions,"	@Test
	public void testConversions() throws Exception {
		Field[] fields = Javax.class.getDeclaredFields();
		for (Field field : fields) {
			DatabaseFieldConfig config = new JavaxPersistenceImpl().createFieldConfig(databaseType, field);
			if (field.getName().equals(""generatedId"")) {
				assertFalse(config.isId());
				assertTrue(config.isGeneratedId());
				assertFalse(config.isUnique());
				assertTrue(config.isCanBeNull());
				assertFalse(config.isVersion());
				assertEquals(field.getName(), config.getFieldName());
				assertNull(config.getColumnName());
				assertNull(config.getColumnDefinition());
			} else if (field.getName().equals(""id"")) {
				assertTrue(config.isId());
				assertFalse(config.isGeneratedId());
				assertFalse(config.isUnique());
				assertTrue(config.isCanBeNull());
				assertFalse(config.isVersion());
				assertEquals(field.getName(), config.getFieldName());
				assertNull(config.getColumnName());
				assertNull(config.getColumnDefinition());
			} else if (field.getName().equals(""stuff"")) {
				assertFalse(config.isId());
				assertFalse(config.isGeneratedId());
				assertFalse(config.isUnique());
				assertTrue(config.isCanBeNull());
				assertFalse(config.isVersion());
				assertEquals(field.getName(), config.getFieldName());
				assertEquals(STUFF_FIELD_NAME, config.getColumnName());
				assertNull(config.getColumnDefinition());
			} else if (field.getName().equals(""unknown"")) {
				assertFalse(config.isId());
				assertFalse(config.isGeneratedId());
				assertFalse(config.isUnique());
				assertTrue(config.isCanBeNull());
				assertFalse(config.isVersion());
				assertNull(config.getDataPersister());
				assertEquals(field.getName(), config.getFieldName());
				assertNull(config.getColumnName());
				assertNull(config.getColumnDefinition());
			} else if (field.getName().equals(""foreignManyToOne"")) {
				assertFalse(config.isId());
				assertFalse(config.isGeneratedId());
				assertTrue(config.isForeign());
				assertFalse(config.isForeignCollection());
				assertFalse(config.isUnique());
				assertTrue(config.isCanBeNull());
				assertFalse(config.isVersion());
				assertNull(config.getDataPersister());
				assertEquals(field.getName(), config.getFieldName());
				assertNull(config.getColumnName());
				assertNull(config.getColumnDefinition());
			} else if (field.getName().equals(""foreignOneToOne"")) {
				assertFalse(config.isId());
				assertFalse(config.isGeneratedId());
				assertTrue(config.isForeign());
				assertFalse(config.isForeignCollection());
				assertFalse(config.isUnique());
				assertTrue(config.isCanBeNull());
				assertFalse(config.isVersion());
				assertNull(config.getDataPersister());
				assertEquals(field.getName(), config.getFieldName());
				assertNull(config.getColumnName());
				assertNull(config.getColumnDefinition());
			} else if (field.getName().equals(""foreignOneToMany"")) {
				assertFalse(config.isId());
				assertFalse(config.isGeneratedId());
				assertFalse(config.isForeign());
				assertTrue(config.isForeignCollection());
				assertFalse(config.isUnique());
				assertTrue(config.isCanBeNull());
				assertFalse(config.isVersion());
				assertNull(config.getDataPersister());
				assertEquals(field.getName(), config.getFieldName());
				assertNull(config.getForeignCollectionForeignFieldName());
				assertNull(config.getColumnName());
				assertNull(config.getColumnDefinition());
			} else if (field.getName().equals(""mappedByField"")) {
				assertFalse(config.isId());
				assertFalse(config.isGeneratedId());
				assertFalse(config.isForeign());
				assertTrue(config.isForeignCollection());
				assertFalse(config.isUnique());
				assertTrue(config.isCanBeNull());
				assertFalse(config.isVersion());
				assertNull(config.getDataPersister());
				assertEquals(field.getName(), config.getFieldName());
				assertEquals(MAPPED_BY_FIELD_NAME, config.getForeignCollectionForeignFieldName());
				assertNull(config.getColumnName());
				assertNull(config.getColumnDefinition());
			} else if (field.getName().equals(""joinFieldName"")) {
				assertFalse(config.isId());
				assertFalse(config.isGeneratedId());
				assertTrue(config.isForeign());
				assertFalse(config.isForeignCollection());
				assertFalse(config.isUnique());
				assertTrue(config.isCanBeNull());
				assertFalse(config.isVersion());
				assertNull(config.getDataPersister());
				assertEquals(field.getName(), config.getFieldName());
				assertEquals(JOIN_FIELD_NAME, config.getColumnName());
				assertNull(config.getColumnDefinition());
			} else if (field.getName().equals(""columnDefinition"")) {
				assertFalse(config.isId());
				assertFalse(config.isGeneratedId());
				assertFalse(config.isForeign());
				assertFalse(config.isUnique());
				assertFalse(config.isVersion());
				assertTrue(config.isCanBeNull());
				assertEquals(COLUMN_DEFINITION, config.getColumnDefinition());
			} else if (field.getName().equals(""uniqueColumn"")) {
				assertFalse(config.isId());
				assertFalse(config.isGeneratedId());
				assertFalse(config.isForeign());
				assertTrue(config.isUnique());
				assertTrue(config.isCanBeNull());
				assertFalse(config.isVersion());
				assertNull(config.getColumnName());
				assertNull(config.getColumnDefinition());
			} else if (field.getName().equals(""nullableColumn"")) {
				assertFalse(config.isId());
				assertFalse(config.isGeneratedId());
				assertFalse(config.isForeign());
				assertFalse(config.isUnique());
				assertFalse(config.isCanBeNull());
				assertFalse(config.isVersion());
				assertNull(config.getColumnName());
				assertNull(config.getColumnDefinition());
			} else if (field.getName().equals(""uniqueJoinColumn"")) {
				assertFalse(config.isId());
				assertFalse(config.isGeneratedId());
				assertTrue(config.isForeign());
				assertFalse(config.isForeignCollection());
				assertTrue(config.isUnique());
				assertTrue(config.isCanBeNull());
				assertFalse(config.isVersion());
				assertNull(config.getColumnName());
				assertNull(config.getColumnDefinition());
			} else if (field.getName().equals(""nullableJoinColumn"")) {
				assertFalse(config.isId());
				assertFalse(config.isGeneratedId());
				assertTrue(config.isForeign());
				assertFalse(config.isForeignCollection());
				assertFalse(config.isUnique());
				assertFalse(config.isCanBeNull());
				assertFalse(config.isVersion());
				assertNull(config.getColumnName());
				assertNull(config.getColumnDefinition());
			} else if (field.getName().equals(""ourEnumOrdinal"")) {
				assertFalse(config.isId());
				assertFalse(config.isGeneratedId());
				assertFalse(config.isForeign());
				assertFalse(config.isUnique());
				assertFalse(config.isVersion());
				assertTrue(config.isCanBeNull());
				assertNull(config.getColumnName());
				assertNull(config.getColumnDefinition());
				assertTrue(config.getDataPersister() instanceof EnumIntegerType);
			} else if (field.getName().equals(""ourEnumString"")) {
				assertFalse(config.isId());
				assertFalse(config.isGeneratedId());
				assertFalse(config.isForeign());
				assertFalse(config.isUnique());
				assertFalse(config.isVersion());
				assertTrue(config.isCanBeNull());
				assertNull(config.getColumnName());
				assertNull(config.getColumnDefinition());
				assertTrue(config.getDataPersister() instanceof EnumStringType);
			} else if (field.getName().equals(""version"")) {
				assertFalse(config.isId());
				assertFalse(config.isGeneratedId());
				assertFalse(config.isForeign());
				assertFalse(config.isUnique());
				assertTrue(config.isCanBeNull());
				assertTrue(config.isVersion());
				assertNull(config.getColumnName());
				assertNull(config.getColumnDefinition());
			} else if (field.getName().equals(""basic"")) {
				assertFalse(config.isId());
				assertFalse(config.isGeneratedId());
				assertFalse(config.isForeign());
				assertFalse(config.isUnique());
				assertTrue(config.isCanBeNull());
				assertFalse(config.isVersion());
				assertNull(config.getColumnName());
				assertNull(config.getColumnDefinition());
			} else if (field.getName().equals(""basicNotOptional"")) {
				assertFalse(config.isId());
				assertFalse(config.isGeneratedId());
				assertFalse(config.isForeign());
				assertFalse(config.isUnique());
				assertFalse(config.isCanBeNull());
				assertFalse(config.isVersion());
				assertNull(config.getColumnName());
				assertNull(config.getColumnDefinition());
			} else {
				System.err.println(""\n\n\nUnknown field: "" + field.getName());
			}
		}
	}
",non-flaky,5
26787,MundaneImmortal_pair-distribution-app,CompanyTest.testGetCompanyDevs,"	@Test
	public void testGetCompanyDevs() {
		Developer developerCompanyA = new Developer(""a"");
		developerCompanyA.setCompany(new Company(""a""));
		Developer newDeveloperCompanyA = new Developer(""a"");
		newDeveloperCompanyA.setCompany(new Company(""a""));
		newDeveloperCompanyA.setNew(true);
		Developer developerCompanyB = new Developer(""b"");
		developerCompanyB.setCompany(new Company(""b""));

		List<Developer> companyDevs = new Company(""a"").getDevs(Arrays.asList(developerCompanyA, developerCompanyB, newDeveloperCompanyA));

		assertThat(companyDevs, is(Arrays.asList(developerCompanyA, newDeveloperCompanyA)));
	}
",non-flaky,5
179493,abel533_Mapper,SafeDeleteByMethodTest.testSafeDeleteByExampleNull,"    @Test(expected = PersistenceException.class)
    public void testSafeDeleteByExampleNull() {
        SqlSession sqlSession = getSqlSession();
        try {
            CountryMapper mapper = sqlSession.getMapper(CountryMapper.class);
            mapper.deleteByExample(null);
        } finally {
            sqlSession.close();
        }
    }
",non-flaky,5
60874,apache_druid,RedisStandaloneCacheTest.testSimpleInjection,"  @Test
  public void testSimpleInjection()
  {
    final String uuid = UUID.randomUUID().toString();
    System.setProperty(uuid + "".type"", ""redis"");
    final Injector injector = Initialization.makeInjectorWithModules(
        GuiceInjectors.makeStartupInjector(), ImmutableList.of(
            binder -> {
              binder.bindConstant().annotatedWith(Names.named(""serviceName"")).to(""druid/test/redis"");
              binder.bindConstant().annotatedWith(Names.named(""servicePort"")).to(0);
              binder.bindConstant().annotatedWith(Names.named(""tlsServicePort"")).to(-1);

              binder.bind(Cache.class).toProvider(CacheProvider.class);
              JsonConfigProvider.bind(binder, uuid, CacheProvider.class);
            }
        )
    );
    final CacheProvider cacheProvider = injector.getInstance(CacheProvider.class);
    Assert.assertNotNull(cacheProvider);
    Assert.assertEquals(RedisCacheProvider.class, cacheProvider.getClass());
  }
",non-flaky,5
156050,jReddit_jReddit,SubmissionTest.testAllSubmissionFields,"    @Test
    public void testAllSubmissionFields() {
        
        // Field values
        String kind = Kind.LINK.value();
        String domain = ""imgur.com"";
        String banned_by = null;
        JSONObject media_embed = JsonHelpers.createMediaEmbedObject();
        String subreddit = ""subredditName"";
        String selftext_html = ""Self text HTML"";
        String selftext = ""Self text"";
        String likes = null;
        Boolean secure_media = null;
        String link_flair_text = null;
        String id = ""SubmID"";
        Long gilded = (long) 0;
        JSONObject secure_media_embed = new JSONObject();
        Boolean clicked = false;
        Boolean stickied = false;
        String author = ""authorName"";
        JSONObject media = JsonHelpers.createMediaObject();
        Long score = (long) 613;
        String approved_by = null;
        Boolean over_18 = true;
        Boolean hidden = false;
        String thumbnail = ""nsfw"";
        String subreddit_id = Kind.SUBREDDIT.value() + ""_"" + ""SubrID"";
        Boolean edited = false;
        String link_flair_css_class = null;
        String author_flair_css_class = null;
        Long downs = (long) 0;
        Boolean saved = false;
        Boolean is_self = false;
        String title = ""submTitle"";
        String permalink = ""/r/"" + subreddit + ""/comments"" + id + ""/"" + title + ""/"";
        String name = kind + ""_"" + id;
        Double created = 1405093719.0;
        String url = ""http://imgur.com/a/dxHTq"";
        String author_flair_text = null;
        Double created_utc = 1405064919.0;
        Long ups = (long) 613;
        Long num_comments = (long) 112;
        Boolean visited = false;
        Long num_reports = null;
        String distinguished = null;
        String from = ""t3_djjksjk"";
        String from_id = ""djjksjk"";
        String from_kind = ""t3"";
        String removal_reason = ""Just because"";
        Double upvote_ratio = 0.89;
             
        // Create JSON Object
        JSONObject data = new JSONObject();
        data.put(""kind"", kind);
        data.put(""domain"", domain);
        data.put(""banned_by"", banned_by);
        data.put(""media_embed"", media_embed);
        data.put(""subreddit"", subreddit);
        data.put(""selftext_html"", selftext_html);
        data.put(""selftext"", selftext);
        data.put(""likes"", likes);
        data.put(""secure_media"", secure_media);
        data.put(""link_flair_text"", link_flair_text);
        data.put(""id"", id);
        data.put(""gilded"", gilded);
        data.put(""secure_media_embed"", secure_media_embed);
        data.put(""clicked"", clicked);
        data.put(""stickied"", stickied);
        data.put(""author"", author);
        data.put(""media"", media);
        data.put(""score"", score);
        data.put(""approved_by"", approved_by);
        data.put(""over_18"", over_18);
        data.put(""hidden"", hidden);
        data.put(""thumbnail"", thumbnail);
        data.put(""subreddit_id"", subreddit_id);
        data.put(""edited"", edited);
        data.put(""link_flair_css_class"", link_flair_css_class);
        data.put(""author_flair_css_class"", author_flair_css_class);
        data.put(""downs"", downs);
        data.put(""saved"", saved);
        data.put(""is_self"", is_self);
        data.put(""title"", title);
        data.put(""permalink"", permalink);
        data.put(""name"", name);
        data.put(""created"", created);
        data.put(""url"", url);
        data.put(""author_flair_text"", author_flair_text);
        data.put(""created_utc"", created_utc);
        data.put(""ups"", ups);
        data.put(""num_comments"", num_comments);
        data.put(""visited"", visited);
        data.put(""num_reports"", num_reports);
        data.put(""distinguished"", distinguished);
        data.put(""from"", from);
        data.put(""from_id"", from_id);
        data.put(""from_kind"", from_kind);
        data.put(""removal_reason"", removal_reason);
        data.put(""upvote_ratio"", upvote_ratio);
        
        // Parse
        Submission s = new Submission(data);
        
        // Test data fields
        assertEquals(s.getKind(), Kind.match(kind));
        assertEquals(s.getDomain(), domain);
        assertEquals(s.getBannedBy(), banned_by);
        //assertEquals(s.getMediaEmbed(), media_embed);
        assertEquals(s.getSubreddit(), subreddit);
        assertEquals(s.getSelftextHTML(), selftext_html);
        assertEquals(s.getSelftext(), selftext);
        assertEquals(s.getLikes(), likes);
        //assertEquals(s.getSecureMedia(), secure_media);
        assertEquals(s.getLinkFlairText(), link_flair_text);
        assertEquals(s.getIdentifier(), id);
        assertEquals(s.getGilded(), gilded);
        //assertEquals(s.getSecureMediaEmbed(), secure_media_embed);
        assertEquals(s.isClicked(), clicked);
        assertEquals(s.isStickied(), stickied);
        assertEquals(s.getAuthor(), author);
        //assertEquals(s.getMedia(), media);
        assertEquals(s.getScore(), score);
        assertEquals(s.getApprovedBy(), approved_by);
        assertEquals(s.isNSFW(), over_18);
        assertEquals(s.isHidden(), hidden);
        assertEquals(s.getThumbnail(), thumbnail);
        assertEquals(s.getSubredditId(), subreddit_id);
        assertEquals(s.isEdited(), edited);
        assertEquals(s.getLinkFlairCSSClass(), link_flair_css_class);
        assertEquals(s.getAuthorFlairCSSClass(), author_flair_css_class);
        assertEquals(s.getDownVotes(), downs);
        assertEquals(s.isSaved(), saved);
        assertEquals(s.isSelf(), is_self);
        assertEquals(s.getTitle(), title);
        assertEquals(s.getPermalink(), permalink);
        assertEquals(s.getFullName(), name);
        assertEquals(s.getCreated(), created, 0);
        assertEquals(s.getURL(), url);
        assertEquals(s.getAuthorFlairText(), author_flair_text);
        assertEquals(s.getCreatedUTC(), created_utc, 0);
        assertEquals(s.getUpVotes(), ups);
        assertEquals(s.getCommentCount(), num_comments);
        assertEquals(s.isVisited(), visited);
        assertEquals(s.getReportCount(), num_reports);
        assertEquals(s.getDistinguished(), distinguished);
        assertEquals(s.getFrom(), from);
        assertEquals(s.getFromId(), from_id);
        assertEquals(s.getFromKind(), from_kind);
        assertEquals(s.getRemovalReason(), removal_reason);
        assertEquals(s.getUpvoteRatio(), upvote_ratio);
        
    }
",non-flaky,5
112081,apache_shardingsphere-elasticjob,JobSystemExceptionTest.assertGetCause,"    @Test
    public void assertGetCause() {
        assertThat(new JobSystemException(new RuntimeException()).getCause(), instanceOf(RuntimeException.class));
    }
",non-flaky,5
38255,palantir_atlasdb,AbstractAtlasDbKeyValueServiceTest.testGetRangeOfTimestampsThrowsOnError,"    @Test
    public void testGetRangeOfTimestampsThrowsOnError() {
        try {
            keyValueService.getRangeOfTimestamps(TEST_NONEXISTING_TABLE, RangeRequest.all(), Long.MAX_VALUE).hasNext();
            Assert.fail(""getRangeOfTimestamps must throw on failure"");
        } catch (RuntimeException e) {
            // Expected
        }
    }
",non-flaky,5
114019,apache_struts,JSONReaderTest.testDecimalNumber,"    @Test
    public void testDecimalNumber() throws Exception {
        Object ret = reader.read(""3.2"");
        assertNotNull(ret);
        assertEquals(Double.class, ret.getClass());
        assertEquals(3.2, ret);
    }
",non-flaky,5
98264,spotify_docker-client,PushPullIT.testPullHubPrivateRepoWithAuth,"  @Test
  public void testPullHubPrivateRepoWithAuth() throws Exception {
    final RegistryAuth registryAuth = RegistryAuth.builder()
        .username(HUB_AUTH_USERNAME2)
        .password(HUB_AUTH_PASSWORD2)
        .build();
    client.pull(""dxia2/scratch-private:latest"", registryAuth);
  }
",non-flaky,5
98038,vert-x3_vertx-mongo-client,AggregateOptionsTest.testOptions,"  @Test
  public void testOptions() {
    AggregateOptions options = new AggregateOptions();

    long maxTime = TestUtils.randomLong();
    assertEquals(options, options.setMaxTime(maxTime));
    assertEquals(maxTime, options.getMaxTime());
  }
",non-flaky,5
33871,apache_camel,FhirUpdateIT.testResourceNoId,"    @Test
    public void testResourceNoId() throws Exception {
        Date date = new SimpleDateFormat(""yyyy-MM-dd"").parse(""1998-04-29"");
        assertNotEquals(date, patient.getBirthDate());
        this.patient.setBirthDate(date);
        final Map<String, Object> headers = new HashMap<>();
        // parameter type is org.hl7.fhir.instance.model.api.IBaseResource
        headers.put(""CamelFhir.resource"", this.patient);
        // parameter type is ca.uhn.fhir.rest.api.PreferReturnEnum
        headers.put(""CamelFhir.preferReturn"", PreferReturnEnum.REPRESENTATION);

        MethodOutcome result = requestBodyAndHeaders(""direct://RESOURCE"", null, headers);

        assertNotNull(result, ""resource result"");
        LOG.debug(""resource: "" + result);
        assertEquals(date, ((Patient) result.getResource()).getBirthDate(), ""Birth date not updated!"");
    }
",non-flaky,5
113996,apache_struts,UploadedFileConverterTest.convertUploadedFileToFile,"    @Test
    public void convertUploadedFileToFile() throws Exception {
        // given
        UploadedFileConverter ufc = new UploadedFileConverter();
        UploadedFile uploadedFile = new StrutsUploadedFile(tempFile);

        // when
        Object result = ufc.convertValue(context, target, member, propertyName, uploadedFile, File.class);

        // then
        assertThat(result).isInstanceOf(File.class);
        File file = (File) result;
        assertThat(file.length()).isEqualTo(tempFile.length());
        assertThat(file.getAbsolutePath()).isEqualTo(tempFile.getAbsolutePath());
    }
",non-flaky,5
59656,looly_hutool,AopTest.testCGLIBProxy,"	@Test
	public void testCGLIBProxy() {
		TagObj target = new TagObj();
		//ç®æ ç±»è®¾ç½®æ è®°
		target.setTag(""tag"");

		TagObj proxy = ProxyUtil.proxy(target, TimeIntervalAspect.class);
		//ä»£çç±»è·åæ è®°tag (æ­è¨éè¯¯)
		Assert.assertEquals(""tag"", proxy.getTag());
	}
",non-flaky,5
77532,dropwizard_dropwizard,DropwizardTestSupportTest.initialize,"    @Test
        public void initialize(Bootstrap<TestConfiguration> bootstrap) {
            bootstrap.setConfigurationFactoryFactory(FailingConfigurationFactory::new);
        }
",non-flaky,5
137101,spring-projects_spring-framework,AbstractAnnotationMetadataTests.getAnnotationTypesReturnsDirectAnnotations,"	@Test
	public void getAnnotationTypesReturnsDirectAnnotations() {
		AnnotationMetadata metadata = get(WithDirectAnnotations.class);
		assertThat(metadata.getAnnotationTypes()).containsExactlyInAnyOrder(
				DirectAnnotation1.class.getName(), DirectAnnotation2.class.getName());
	}
",non-flaky,5
122628,vespa-engine_vespa,YumTesterTest.expect_query_installed,"    @Test
    public void expect_query_installed() {
        Stream.of(minimalPackage, fullPackage, null).forEach(pkg -> {
            yum.expectQueryInstalled(packages[0]).andReturn(pkg);
            assertEquals(Optional.ofNullable(pkg), yum.queryInstalled(context, packages[0]));
            terminal.verifyAllCommandsExecuted();
        });
    }
",non-flaky,5
91417,strapdata_elassandra,SessionFactoryLoadBalancingTests.init,"@TestLogging(""org.elasticsearch.xpack.security.authc.ldap.support:DEBUG"")
    public void init() throws Exception {
        threadPool = new TestThreadPool(""SessionFactoryLoadBalancingTests thread pool"");
    }
",non-flaky,5
99800,apache_cassandra,OutboundConnectionSettingsTest.build_SendSizeLessThanZero,"    @Test (expected = IllegalArgumentException.class)
    public void build_SendSizeLessThanZero()
    {
        test(settings -> settings.withSocketSendBufferSizeInBytes(-1));
    }
",non-flaky,5
21204,androidx_androidx,PreferenceDataStoreTest.testPutStringSetWithDataStoreOnMgr,"    @Test
    public void testPutStringSetWithDataStoreOnMgr() {
        mManager.setPreferenceDataStore(mDataStore);
        mScreen.addPreference(mPreference);
        putStringSetTestCommon();
    }
",non-flaky,5
95739,togglz_togglz,SchemaUpdaterTest.shouldDetectMissingTable,"    @Test
    public void shouldDetectMissingTable() throws SQLException {

        Connection connection = createConnection();
        try {

            SchemaUpdater updater = new SchemaUpdater(connection, ""TOGGLZ"", DefaultMapSerializer.multiline());
            assertFalse(updater.doesTableExist());

        } finally {
            DbUtils.closeQuietly(connection);
        }

    }
",non-flaky,5
53216,cloudfoundry_uaa,ScimGroupEndpointsIntegrationTests.deleteMemberGroupUpdatesGroup,"    @Test
    public void deleteMemberGroupUpdatesGroup() {
        ScimGroup g1 = createGroup(CFID, VIDYA);
        ScimGroupMember m2 = new ScimGroupMember(g1.getId(), ScimGroupMember.Type.GROUP);
        ScimGroup g2 = createGroup(CF_DEV, DALE, m2);
        assertTrue(g2.getMembers().contains(m2));
        validateUserGroups(VIDYA.getMemberId(), CFID, CF_DEV);

        deleteResource(groupEndpoint, g1.getId());

        // check that parent group is updated
        ScimGroup g3 = client.getForObject(serverRunning.getUrl(groupEndpoint + ""/{id}""), ScimGroup.class, g2.getId());
        assertEquals(1, g3.getMembers().size());
        assertFalse(g3.getMembers().contains(m2));
    }
",non-flaky,5
91462,strapdata_elassandra,NodeJoinControllerTests.setUp,"@TestLogging(""org.elasticsearch.discovery.zen:TRACE,org.elasticsearch.cluster.service:TRACE"")
    public void setUp() throws Exception {
        super.setUp();
    }
",non-flaky,5
77534,dropwizard_dropwizard,ResourceTestRuleWithGrizzlyTest.testResource,"    @Test
    public void testResource() {
        assertThat(resourceTestRule.target(""test"").request()
                .get(String.class))
                .isEqualTo(""test"");
    }
",non-flaky,5
91382,OpenLCB_OpenLCB_Java,FdiParserTest.testReadFromFile,"    @Test
    public void testReadFromFile() throws Exception {
        FileReader r = new FileReader(""test/org/openlcb/implementations/throttle/FdiTestFile.xml"");
        Element e = org.openlcb.cdi.jdom.XmlHelper.parseXmlFromReader(r);
        FdiParser t = new FdiParser(e);
        Assert.assertNotNull(""exists"",t);
    }
",non-flaky,5
114081,aws_aws-sdk-java-v2,ExpressionTest.joinValues_correctlyJoins,"    @Test
    public void joinValues_correctlyJoins() {
        Map<String, AttributeValue> values1 = new HashMap<>();
        values1.put(""one"", EnhancedAttributeValue.fromString(""1"").toAttributeValue());
        values1.put(""two"", EnhancedAttributeValue.fromString(""2"").toAttributeValue());
        Map<String, AttributeValue> values2 = new HashMap<>();
        values2.put(""three"", EnhancedAttributeValue.fromString(""3"").toAttributeValue());
        values2.put(""four"", EnhancedAttributeValue.fromString(""4"").toAttributeValue());

        Map<String, AttributeValue> result = Expression.joinValues(values1, values2);

        assertThat(result.size(), is(4));
        assertThat(result, hasEntry(""one"", EnhancedAttributeValue.fromString(""1"").toAttributeValue()));
        assertThat(result, hasEntry(""two"", EnhancedAttributeValue.fromString(""2"").toAttributeValue()));
        assertThat(result, hasEntry(""three"", EnhancedAttributeValue.fromString(""3"").toAttributeValue()));
        assertThat(result, hasEntry(""four"", EnhancedAttributeValue.fromString(""4"").toAttributeValue()));
    }
",non-flaky,5
33910,apache_camel,GridFsProducerOperationsIT.testOperations,"    @Test
    public void testOperations() throws Exception {
        Map<String, Object> headers = new HashMap<>();
        assertFalse(gridFSBucket.find(eq(FILE_NAME)).cursor().hasNext());

        headers.put(Exchange.FILE_NAME, FILE_NAME);
        headers.put(Exchange.CONTENT_TYPE, ""text/plain"");
        template.requestBodyAndHeaders(""direct:create"", FILE_DATA, headers);
        assertTrue(gridFSBucket.find(eq(GridFsConstants.GRIDFS_FILE_KEY_FILENAME, FILE_NAME)).cursor().hasNext());
        assertEquals(1, template.requestBodyAndHeaders(""direct:count"", null, headers, Long.class).longValue());
        Exchange result = template.request(""direct:findOne"", exchange -> exchange.getMessage().setHeaders(headers));
        assertTrue(result.getMessage().getHeader(Exchange.FILE_LENGTH, Long.class) > 0);
        assertNotNull(result.getMessage().getHeader(Exchange.FILE_LAST_MODIFIED));

        InputStream ins = result.getMessage().getBody(InputStream.class);
        assertNotNull(ins);
        byte b[] = new byte[2048];
        int i = ins.read(b);
        assertEquals(FILE_DATA, new String(b, 0, i, StandardCharsets.UTF_8));

        headers.put(Exchange.FILE_NAME, ""2-"" + FILE_NAME);
        headers.put(GridFsEndpoint.GRIDFS_CHUNKSIZE, 10);
        headers.put(GridFsEndpoint.GRIDFS_METADATA, ""{'foo': 'bar'}"");

        template.requestBodyAndHeaders(""direct:create"", FILE_DATA + ""data2"", headers);
        assertEquals(1, template.requestBodyAndHeaders(""direct:count"", null, headers, Long.class).longValue());
        assertEquals(2, template.requestBody(""direct:count"", null, Long.class).longValue());

        String s = template.requestBody(""direct:listAll"", null, String.class);
        assertTrue(s.contains(""2-"" + FILE_NAME));
        template.requestBodyAndHeaders(""direct:remove"", null, headers);
        assertEquals(1, template.requestBody(""direct:count"", null, Long.class).longValue());
        s = template.requestBodyAndHeader(""direct:listAll"", null, Exchange.FILE_NAME, ""2-"" + FILE_NAME, String.class);
        assertFalse(s.contains(""2-"" + FILE_NAME));
    }
",non-flaky,5
77524,dropwizard_dropwizard,DropwizardAppRuleTest.clientUsesJacksonMapperFromEnvironment,"    @Test
    public void clientUsesJacksonMapperFromEnvironment() {
        assertThat(RULE.client().target(""http://localhost:"" + RULE.getLocalPort() + ""/message"")
            .request()
            .get(DropwizardTestApplication.MessageView.class).getMessage())
            .contains(""Yes, it's here"");
    }
",non-flaky,5
99790,apache_cassandra,MessagingServiceTest.listenRequiredSecureConnection,"    @Test
    public void listenRequiredSecureConnection() throws InterruptedException
    {
        ServerEncryptionOptions serverEncryptionOptions = new ServerEncryptionOptions()
                                                          .withOptional(false)
                                                          .withInternodeEncryption(ServerEncryptionOptions.InternodeEncryption.all)
                                                          .withLegacySslStoragePort(false);
        listen(serverEncryptionOptions, false);
    }
",non-flaky,5
325,apache_hadoop,TestViewfsWithNfs3.testNumExports,"  @Test
  public void testNumExports() throws Exception {
    Assert.assertEquals(mountd.getExports().size(),
        viewFs.getChildFileSystems().length);
  }
",non-flaky,5
176791,ctco_cukes,ContextInflaterTest.testInflateGroups_withPlainText,"    @Test
    public void testInflateGroups_withPlainText() throws Exception {
        doReturn(Optional.of(""foo"")).when(world).get(""foo"");
        String value = inflater.inflateGroups(""my {(foo)} is very {(bar)} !"", Sets.newHashSet(""foo"", ""bar""));
        assertThat(value, equalTo(""my foo is very {(bar)} !""));
    }
",non-flaky,5
53139,cloudfoundry_uaa,ApiControllerTests.testNoUser,"    @Test
    public void testNoUser() throws Exception {
        controller.setInfo(new ClassPathResource(""info.tmpl""));
        HashMap<String, Object> model = new HashMap<String, Object>();
        View view = controller.info(model, null);
        MockHttpServletResponse response = new MockHttpServletResponse();
        view.render(model, new MockHttpServletRequest(), response);
        String content = response.getContentAsString();
        assertFalse(""Wrong content: "" + content, content.contains(""\""user\""""));
    }
",non-flaky,5
92601,FasterXML_jackson-databind,ImmutablesTypeSerializationTest.testImmutablesSimpleDeserialization,"    @Test
    public void testImmutablesSimpleDeserialization() throws IOException {
        Account expected = ImmutableAccount.builder()
                .id(1L)
                .name(""foo"")
                .build();
        Account actual = MAPPER.readValue(""{\""id\"": 1,\""name\"":\""foo\""}"", Account.class);
        assertEquals(expected, actual);
    }
",non-flaky,5
156071,jReddit_jReddit,RedditOAuthAgentTest.testTokenAppOnly,"    @Test
    public void testTokenAppOnly() throws RedditOAuthException, OAuthSystemException, OAuthProblemException {
        
        // Captor for the request that is executed
        ArgumentCaptor<OAuthClientRequest> clientCaptor = ArgumentCaptor.forClass(OAuthClientRequest.class);
        
        when(mockOAuthClient.accessToken(any(OAuthClientRequest.class))).thenReturn(jsonTokenNonRefreshable);
        
        // Run subject
        RedditToken token = subject.tokenAppOnly(false);
        
        // Verify and capture
        verify(mockOAuthClient).accessToken(clientCaptor.capture());
        
        OAuthClientRequest request = clientCaptor.getValue();
        
        assertNotNull(request.getHeader(""Authorization"")); // This is Base64 encoded
        assertEquals(request.getHeader(""User-Agent""), userAgent);
        
        assertEquals(accessToken, token.getAccessToken());
        assertNull(token.getRefreshToken());
        assertEquals(tokenType, token.getTokenType());
        assertEquals(expiresIn, token.getExpirationSpan());
        assertTrue(token.hasScope(RedditScope.EDIT));
        assertTrue(token.hasScope(RedditScope.FLAIR));
        assertFalse(token.hasScope(RedditScope.PRIVATEMESSAGE));

    }
",non-flaky,5
59607,looly_hutool,ExpressionUtilTest.jexlTest,"	@Test
	public void jexlTest(){
		ExpressionEngine engine = new JexlEngine();

		final Dict dict = Dict.create()
				.set(""a"", 100.3)
				.set(""b"", 45)
				.set(""c"", -199.100);
		final Object eval = engine.eval(""a-(b-c)"", dict);
		Assert.assertEquals(-143.8, (double)eval, 2);
	}
",non-flaky,5
98065,vert-x3_vertx-mongo-client,BulkWriteOptionsTest.testHashCode,"  @Test
  public void testHashCode() {
    BulkWriteOptions a = new BulkWriteOptions()
      .setWriteOption(WriteOption.JOURNALED)
      .setOrdered(false);
    int hash = a.hashCode();

    a.setWriteOption(WriteOption.ACKNOWLEDGED);
    assertNotEquals(hash, a.hashCode());

    a.setWriteOption(WriteOption.JOURNALED);
    a.setOrdered(true);
    assertNotEquals(hash, a.hashCode());

    a.setWriteOption(WriteOption.JOURNALED);
    a.setOrdered(false);
    assertEquals(hash, a.hashCode());
  }
",non-flaky,5
84561,apache_zookeeper,DistributedQueueTest.testOffer2,"    @Test
    public void testOffer2() throws Exception {
        String dir = ""/testOffer2"";
        String testString = ""Hello World"";
        final int numClients = 2;
        ZooKeeper[] clients = new ZooKeeper[numClients];
        DistributedQueue[] queueHandles = new DistributedQueue[numClients];
        for (int i = 0; i < clients.length; i++) {
            clients[i] = createClient();
            queueHandles[i] = new DistributedQueue(clients[i], dir, null);
        }

        queueHandles[0].offer(testString.getBytes());

        byte[] dequeuedBytes = queueHandles[1].remove();
        assertEquals(new String(dequeuedBytes), testString);
    }
",non-flaky,5
95720,togglz_togglz,EnumBasedFeatureProviderTest.shouldReturnCombinedFeatureListForMultipleEnumsViaConstructor,"    @Test
        public void shouldReturnCombinedFeatureListForMultipleEnumsViaConstructor() {

            FeatureProvider provider = new EnumBasedFeatureProvider(ValidFeatureEnum.class, OtherFeatureEnum.class);

            // all feature are in the list
            assertThat(provider.getFeatures())
                .hasSize(ValidFeatureEnum.values().length + OtherFeatureEnum.values().length)
                .contains(ValidFeatureEnum.FEATURE1)
                .contains(OtherFeatureEnum.ADDITIONAL_FEATURE);

        }
",non-flaky,5
43047,trinodb_trino,BaseConnectorTest.testInListPredicate,"    @Test
    public void testInListPredicate()
    {
        assertQueryReturnsEmptyResult(""SELECT * FROM orders WHERE orderkey IN (10, 11, 20, 21)"");

        // filtered column is selected
        assertQuery(""SELECT custkey, orderkey FROM orders WHERE orderkey IN (7, 10, 32, 33)"", ""VALUES (392, 7), (1301, 32), (670, 33)"");

        // filtered column is not selected
        assertQuery(""SELECT custkey FROM orders WHERE orderkey IN (7, 10, 32, 33)"", ""VALUES (392), (1301), (670)"");
    }
",non-flaky,5
53219,cloudfoundry_uaa,ScimGroupEndpointsIntegrationTests.testAccessTokenReflectsGroupMembership,"    @Test
    public void testAccessTokenReflectsGroupMembership() throws Exception {

        createTestClient(DELETE_ME, ""secret"", CFID);
        ScimUser user = createUser(DELETE_ME, ""Passwo3d"");
        createGroup(CFID, new ScimGroupMember(user.getId()));
        OAuth2AccessToken token = getAccessToken(DELETE_ME, ""secret"", DELETE_ME, ""Passwo3d"");
        assertTrue(""Wrong token: "" + token, token.getScope().contains(CFID));

        deleteTestClient(DELETE_ME);
        deleteResource(userEndpoint, user.getId());

    }
",non-flaky,5
60875,apache_druid,RedisStandaloneCacheTest.testSanity,"  @Test
  public void testSanity()
  {
    Assert.assertNull(cache.get(new Cache.NamedKey(""a"", HI)));
    put(cache, ""a"", HI, 0);
    Assert.assertEquals(0, get(cache, ""a"", HI));
    Assert.assertNull(cache.get(new Cache.NamedKey(""the"", HI)));

    put(cache, ""the"", HI, 1);
    Assert.assertEquals(0, get(cache, ""a"", HI));
    Assert.assertEquals(1, get(cache, ""the"", HI));

    put(cache, ""the"", HO, 10);
    Assert.assertEquals(0, get(cache, ""a"", HI));
    Assert.assertNull(cache.get(new Cache.NamedKey(""a"", HO)));
    Assert.assertEquals(1, get(cache, ""the"", HI));
    Assert.assertEquals(10, get(cache, ""the"", HO));

    cache.close(""the"");
    Assert.assertEquals(0, get(cache, ""a"", HI));
    Assert.assertNull(cache.get(new Cache.NamedKey(""a"", HO)));
  }
",non-flaky,5
98584,nutzam_nutz,El2Test.simpleCalculate,"    @Test
    public void simpleCalculate() {
        // å 
        assertEquals(2, El.eval(""1+1""));
        assertEquals(2.2, El.eval(""1.1+1.1""));
        // å
        assertEquals(1, El.eval(""2-1""));
        // ä¹
        assertEquals(9, El.eval(""3*3""));
        assertEquals(0, El.eval(""3*0""));
        // é¤
        assertEquals(3, El.eval(""9/3""));
        assertEquals(2.2, El.eval(""4.4/2""));
        assertEquals(9.9 / 3, El.eval(""9.9/3""));
        // åä½
        assertEquals(1, El.eval(""5%2""));
        assertEquals(1.0 % 0.1, El.eval(""1.0%0.1""));

    }
",non-flaky,5
19496,eclipse_xtext-core,JavaIoFileSystemAccessTest.getEncoding,"	@Test
	public void testEncoding() throws Exception {
		File file = null;
		FileInputStream fileInputStream = null;
		try {
			JavaIoFileSystemAccess fileSystemAccess = new JavaIoFileSystemAccess(
					IResourceServiceProvider.Registry.INSTANCE, new IEncodingProvider() {
						@Override
						public String getEncoding(URI uri) {
							return ""ISO-8859-1"";
						}
",non-flaky,5
247,apache_hadoop,TestSecurityUtil.testBuildDTServiceName,"@Test
public void testBuildDTServiceName() {
    assertEquals(""127.0.0.1:123"", SecurityUtil.buildDTServiceName(URI.create()));
    assertEquals(""127.0.0.1:123"", SecurityUtil.buildDTServiceName(URI.create()));
    assertEquals(""127.0.0.1:123"", SecurityUtil.buildDTServiceName(URI.create()));
    assertEquals(""127.0.0.1:123"", SecurityUtil.buildDTServiceName(URI.create()));
}",test order dependency,4
122591,vespa-engine_vespa,FileFinderTest.all_files_limited_depth,"        @Test
        public void all_files_limited_depth() {
            assertFileHelper(FileFinder.files(testRoot())
                            .maxDepth(2),

                    of(""test.txt"", ""file-1.json"", ""test.json"", ""test/file.txt"", ""test/data.json""),
                    of(""test"", ""test/subdir-1"", ""test/subdir-1/test"", ""test/subdir-2""));
        }
",non-flaky,5
86098,graylog2_graylog2-server,EventDefinitionDtoTest.testValidEventDefinitionWithKeySpecInFieldSpec,"    @Test
    public void testValidEventDefinitionWithKeySpecInFieldSpec() {
        final EventFieldSpec fieldSpecMock = mock(EventFieldSpec.class);
        final EventDefinitionDto invalidEventDefinition = testSubject.toBuilder()
            .fieldSpec(ImmutableMap.of(""foo"", fieldSpecMock, ""bar"", fieldSpecMock))
            .keySpec(ImmutableList.of(""foo"", ""bar""))
            .build();
        final ValidationResult validationResult = invalidEventDefinition.validate();
        assertThat(validationResult.failed()).isFalse();
        assertThat(validationResult.getErrors().size()).isEqualTo(0);
    }
",non-flaky,5
89367,apache_samza,TestKafkaCheckpointManager.testReadEmpty,"  @Test
  public void testReadEmpty() throws InterruptedException {
    setupSystemFactory(config());
    setupConsumer(ImmutableList.of());
    KafkaCheckpointManager kafkaCheckpointManager = buildKafkaCheckpointManager(true, config());
    kafkaCheckpointManager.register(TASK0);
    assertNull(kafkaCheckpointManager.readLastCheckpoint(TASK0));
  }
",non-flaky,5
98322,spotify_docker-client,DockerHostTest.testDefaultAddress,"  @Test
  public void testDefaultAddress() throws Exception {
    assertThat(DockerHost.defaultAddress(), equalTo(""localhost""));
  }
",non-flaky,5
98648,nutzam_nutz,SimpleAdaptorTest.issue_1267,"    @Test
    public void issue_1267() {
        resp = post(""/adaptor/issue1267"", new NutMap(""time"", ""Thu May 25 2017 07:16:32 GMT+0800 (CST)""));
        assertEquals(200, resp.getStatus());
        System.out.println(resp.getContent());
        //assertEquals(""1495667792000"", resp.getContent());
    }
",non-flaky,5
122584,vespa-engine_vespa,FileSyncTest.trivial,"    @Test
    public void trivial() {
        assertConvergence(""Creating file /dir/file.txt"",
                ""Changing owner of /dir/file.txt from user to owner"",
                ""Changing group of /dir/file.txt from group to group1"",
                ""Changing permissions of /dir/file.txt from rw-r--r-- to rw-r-xr--"");

        content = ""new-content"";
        assertConvergence(""Patching file /dir/file.txt"");

        owner = ""new-owner"";
        assertConvergence(""Changing owner of /dir/file.txt from owner to "" +
                        owner);

        group = ""new-group1"";
        assertConvergence(""Changing group of /dir/file.txt from group1 to new-group1"");

        permissions = ""rwxr--rwx"";
        assertConvergence(""Changing permissions of /dir/file.txt from rw-r-xr-- to "" +
                permissions);
    }
",non-flaky,5
134006,CorfuDB_CorfuDB,OneLinkFailureIT.oneLinkFailureTest,"    @Test(timeout = 300000)
    public void oneLinkFailureTest() {
        workflow(wf -> {
            wf.deploy();

            CorfuCluster corfuCluster = wf.getUniverse()
                    .getGroup(wf.getFixture().data().getGroupParamByIndex(0).getName());

            CorfuClient corfuClient = corfuCluster.getLocalCorfuClient();

            CorfuTable<String, String> table = corfuClient.createDefaultCorfuTable(DEFAULT_STREAM_NAME);
            for (int i = 0; i < DEFAULT_TABLE_ITER; i++) {
                table.put(String.valueOf(i), String.valueOf(i));
            }

            //Should fail one link and then heal""
            CorfuServer server0 = corfuCluster.getServerByIndex(0);
            CorfuServer server2 = corfuCluster.getServerByIndex(2);

            // Create link failure between server0 and server2
            server0.disconnect(Collections.singletonList(server2));
            // Server0 and server2 has same number of link failure ie. 1, the one with
            // larger endpoint should be marked as unresponsive.
            String serverToKick = Collections.max(
                    Arrays.asList(server0.getEndpoint(), server2.getEndpoint())
            );
            waitForUnresponsiveServersChange(size -> size == 1, corfuClient);

            assertThat(corfuClient.getLayout().getUnresponsiveServers())
                    .containsExactly(serverToKick);

            // Cluster status should be DEGRADED after one node is marked unresponsive
            ClusterStatusReport clusterStatusReport = corfuClient
                    .getManagementView()
                    .getClusterStatus();
            assertThat(clusterStatusReport.getClusterStatus()).isEqualTo(ClusterStatus.DEGRADED);

            // Verify data path working fine
            ScenarioUtils.waitUninterruptibly(Duration.ofSeconds(10));
            for (int i = 0; i < DEFAULT_TABLE_ITER; i++) {
                assertThat(table.get(String.valueOf(i))).isEqualTo(String.valueOf(i));
            }

            // Repair the partition between server0 and server2
            server0.reconnect(Collections.singletonList(server2));
            waitForUnresponsiveServersChange(size -> size == 0, corfuClient);

            final Duration sleepDuration = Duration.ofSeconds(1);
            // Verify cluster status is STABLE
            clusterStatusReport = corfuClient.getManagementView().getClusterStatus();
            while (!clusterStatusReport.getClusterStatus().equals(ClusterStatus.STABLE)) {
                clusterStatusReport = corfuClient.getManagementView().getClusterStatus();
                Sleep.sleepUninterruptibly(sleepDuration);
            }
            assertThat(clusterStatusReport.getClusterStatus()).isEqualTo(ClusterStatus.STABLE);

            // Verify data path working fine
            for (int i = 0; i < DEFAULT_TABLE_ITER; i++) {
                assertThat(table.get(String.valueOf(i))).isEqualTo(String.valueOf(i));
            }

            corfuClient.shutdown();
        });
    }
",non-flaky,5
60866,apache_druid,RedisCacheConfigTest.testClusterInvalidNode,"  @Test
  public void testClusterInvalidNode() throws IOException
  {
    ObjectMapper mapper = new ObjectMapper();
    RedisCacheConfig fromJson = mapper.readValue(
        ""{\""expiration\"": 1000,""
        + ""\""cluster\"": {""
        + ""\""nodes\"": \""127.0.0.1\"""" //<===Invalid Node
        + ""}""
        + ""}"",
        RedisCacheConfig.class
    );

    expectedException.expect(new ExceptionMatcher(
        IAE.class,
        new StartWithMatcher(""Invalid redis cluster"")
    ));
    RedisCacheFactory.create(fromJson);
  }
",non-flaky,5
20993,NationalSecurityAgency_timely,AggregationTest.simple,"    @Test
    public void simple() {
        Aggregation asample = new Aggregation(new Avg());
        for (int i = 10; i < 30; i++) {
            asample.add(i, i - 10);
        }
        for (int i = 10; i < 30; i++) {
            asample.add(i, i);
        }
        int i = 0;
        for (Sample sample : asample) {
            assertEquals(10 + i, sample.timestamp);
            assertTrue(sample.timestamp < 30);
            assertEquals(i + 5, (int) sample.value);
            i++;
        }
        assertEquals(20, i);
        asample = new Aggregation(new Sum());
        for (int j = 0; j < 5; j++) {
            for (int k = 10; k < 100; k++) {
                asample.add(k, j + 0.);
            }
        }
        i = 0;
        for (Sample sample : asample) {
            assertEquals(10 + i, sample.timestamp);
            assertEquals((1 + 2 + 3 + 4), sample.value, 0.0D);
            i++;
        }
        assertEquals(100 - 10, i);
    }
",non-flaky,5
170492,eclipse_jetty.project,ConnectorServerTest.testLocalhostRMIBindsToLoopback,"    @Test
    public void testLocalhostRMIBindsToLoopback() throws Exception
    {
        connectorServer = new ConnectorServer(new JMXServiceURL(""service:jmx:rmi://localhost/jndi/rmi://localhost:1099/jmxrmi""), objectName);
        connectorServer.start();
        JMXServiceURL address = connectorServer.getAddress();

        InetAddress localHost = InetAddress.getLocalHost();
        if (!localHost.isLoopbackAddress())
        {
            assertThrows(ConnectException.class, () ->
            {
                // Verify that I cannot connect to the RMIRegistry using a non-loopback address.
                new Socket(localHost, address.getPort());
            });
        }

        InetAddress loopback = InetAddress.getLoopbackAddress();
        new Socket(loopback, address.getPort()).close();
    }
",non-flaky,5
112124,apache_shardingsphere-elasticjob,StatisticRdbRepositoryTest.assertFindJobRunningStatisticsWithDifferentFromDate,"    @Test
    public void assertFindJobRunningStatisticsWithDifferentFromDate() {
        Date now = new Date();
        Date yesterday = getYesterday();
        assertTrue(repository.add(new JobRunningStatistics(100, yesterday)));
        assertTrue(repository.add(new JobRunningStatistics(100, now)));
        assertThat(repository.findJobRunningStatistics(yesterday).size(), is(2));
        assertThat(repository.findJobRunningStatistics(now).size(), is(1));
    }
",non-flaky,5
179456,abel533_Mapper,VersionTest.testUpdateIntByPrimaryKeySelective,"    @Test
    public void testUpdateIntByPrimaryKeySelective() {
        SqlSession sqlSession = getSqlSession();
        try {
            UserIntMapper mapper = sqlSession.getMapper(UserIntMapper.class);
            UserInt user = mapper.selectByPrimaryKey(999);
            assertNotNull(user);
            Integer age = user.getAge();
            int count = mapper.updateByPrimaryKeySelective(user);
            assertEquals(1, count);

            user = mapper.selectByPrimaryKey(999);
            assertFalse(age.equals(user.getAge()));
        } finally {
            sqlSession.close();
        }
    }
",non-flaky,5
76738,quarkusio_quarkus,CreateExtensionMojoIT.testCreateStandaloneExtension,"    @Test
    public void testCreateStandaloneExtension(TestInfo testInfo) throws Throwable {
        testDir = initEmptyProject(""output/create-standalone-extension"");
        assertThat(testDir).isDirectory();
        invoker = initInvoker(testDir);

        Properties properties = new Properties();
        properties.put(""groupId"", ""io.standalone"");
        properties.put(""extensionId"", ""my-own-ext"");
        properties.put(""namespaceId"", ""my-org-"");
        properties.put(""quarkusVersion"", ""1.10.5.Final"");
        InvocationResult result = setup(properties);

        assertThat(result.getExitCode()).isZero();

        final Path testDirPath = testDir.toPath();
        assertThatDirectoryTreeMatchSnapshots(testInfo, testDirPath)
                .contains(
                        ""my-org-my-own-ext/pom.xml"",
                        ""my-org-my-own-ext/deployment/src/main/java/io/standalone/my/own/ext/deployment/MyOwnExtProcessor.java"",
                        ""my-org-my-own-ext/integration-tests/pom.xml"",
                        ""my-org-my-own-ext/integration-tests/src/test/java/io/standalone/my/own/ext/it/MyOwnExtResourceTest.java"");
        assertThatMatchSnapshot(testInfo, testDirPath, ""my-org-my-own-ext/pom.xml"");
        assertThatMatchSnapshot(testInfo, testDirPath, ""my-org-my-own-ext/runtime/pom.xml"");
    }
",non-flaky,5
95705,togglz_togglz,PropertyFeatureProviderTest.shouldSupportDefinitionWithSingleGroup,"    @Test
    public void shouldSupportDefinitionWithSingleGroup() {

        Properties properties = new Properties();
        properties.setProperty(""F1"", ""My Feature;true;Group1"");

        PropertyFeatureProvider provider = new PropertyFeatureProvider(properties);

        Set<Feature> features = provider.getFeatures();
        assertThat(features)
            .hasSize(1)
            .areExactly(1, featureNamed(""F1""));

        FeatureMetaData metadata = provider.getMetaData(new NamedFeature(""F1""));
        assertThat(metadata).isNotNull();
        assertThat(metadata.getLabel()).isEqualTo(""My Feature"");
        FeatureState defaultFeatureState = metadata.getDefaultFeatureState();
        assertThat(defaultFeatureState.isEnabled()).isTrue();
        assertThat(metadata.getGroups())
            .hasSize(1)
            .areExactly(1, groupNamed(""Group1""));

    }
",non-flaky,5
59567,looly_hutool,CronPatternTest.matchAllTest2,"	@Test
	public void matchAllTest2() {
		// å¨5ä½è¡¨è¾¾å¼ä¸­ï¼ç§é¨åå¹¶ä¸æ¯ä»»æå¹éï¼èæ¯ä¸ä¸ªåºå®å¼
		// å æ­¤æ­¤å¤å¹éå°±ä¸è½å¹éç§
		CronPattern pattern;
		// ä»»ä½æ¶é´å¹é
		pattern = new CronPattern(""* * * * *"");
		for(int i = 0; i < 1; i++) {
			Assert.assertTrue(pattern.match(DateUtil.current(), false));
		}
	}
",non-flaky,5
98106,vert-x3_vertx-mongo-client,CredentialListParserTest.testConnectionString,"  @Test
  public void testConnectionString() {
    String username = TestUtils.randomAlphaString(8);
    String password = TestUtils.randomAlphaString(20);

    ConnectionString connectionString = new ConnectionString(
      String.format(
        ""mongodb://%s:%s@%s/%s"",
        username,
        password,
        ""localhost:27017"",
        ""my-datasource""));

    List<MongoCredential> credentials = new CredentialListParser(connectionString, null).credentials();
    assertEquals(1, credentials.size());
    MongoCredential credential = credentials.get(0);
    assertEquals(username, credential.getUserName());
    assertArrayEquals(password.toCharArray(), credential.getPassword());
    assertEquals(""my-datasource"", credential.getSource());
  }
",non-flaky,5
95659,togglz_togglz,TestFeatureManagerTest.shouldSupportTogglingUntypedFeature,"    @Test
    public void shouldSupportTogglingUntypedFeature() {

        // enable
        manager.enable(new NamedFeature(""ONE""));
        assertTrue(manager.isActive(MyFeatures.ONE));

        // disable
        manager.disable(new NamedFeature(""ONE""));
        assertFalse(manager.isActive(MyFeatures.ONE));

    }
",non-flaky,5
104707,apache_pinot,ServerStarterIntegrationTest.testAllCustomServerConf,"  @Test
  public void testAllCustomServerConf()
      throws Exception {
    Map<String, Object> properties = new HashMap<>();
    properties.put(CONFIG_OF_INSTANCE_ID, CUSTOM_INSTANCE_ID);
    properties.put(KEY_OF_SERVER_NETTY_HOST, CUSTOM_HOST);
    properties.put(KEY_OF_SERVER_NETTY_PORT, CUSTOM_PORT);
    verifyInstanceConfig(new PinotConfiguration(properties), CUSTOM_INSTANCE_ID, CUSTOM_HOST, CUSTOM_PORT);
  }
",non-flaky,5
89323,apache_samza,TestKafkaSystemConsumer.testFetchThresholdBytesDiabled,"  @Test
  public void testFetchThresholdBytesDiabled() {
    // Pass 0 as fetchThresholdByBytes, which disables checking for limit by size

    SystemStreamPartition ssp0 = new SystemStreamPartition(TEST_SYSTEM, TEST_STREAM, new Partition(0));
    SystemStreamPartition ssp1 = new SystemStreamPartition(TEST_SYSTEM, TEST_STREAM, new Partition(1));
    int partitionsNum = 2;
    int ime0Size = Integer.valueOf(FETCH_THRESHOLD_MSGS) / partitionsNum; // fake size, upto the limit
    int ime1Size = Integer.valueOf(FETCH_THRESHOLD_MSGS) / partitionsNum - 100; // fake size, below the limit
    int ime11Size = 20; // event with the second message still below the size limit
    ByteArraySerializer bytesSerde = new ByteArraySerializer();
    IncomingMessageEnvelope ime0 = new IncomingMessageEnvelope(ssp0, ""0"", bytesSerde.serialize("""", ""key0"".getBytes()),
        bytesSerde.serialize("""", ""value0"".getBytes()), ime0Size);
    IncomingMessageEnvelope ime1 = new IncomingMessageEnvelope(ssp1, ""0"", bytesSerde.serialize("""", ""key1"".getBytes()),
        bytesSerde.serialize("""", ""value1"".getBytes()), ime1Size);
    IncomingMessageEnvelope ime11 = new IncomingMessageEnvelope(ssp1, ""0"", bytesSerde.serialize("""", ""key11"".getBytes()),
        bytesSerde.serialize("""", ""value11"".getBytes()), ime11Size);

    // limit by number of messages 4/2 = 2 per partition
    // limit by number of bytes - disabled
    KafkaSystemConsumer consumer = createConsumer(""4"", ""0""); // should disable

    consumer.register(ssp0, ""0"");
    consumer.register(ssp1, ""0"");
    consumer.start();
    consumer.messageSink.addMessage(ssp0, ime0);
    // should be full by size, but not full by number of messages (1 of 2)
    Assert.assertTrue(consumer.messageSink.needsMoreMessages(ssp0));
    consumer.messageSink.addMessage(ssp1, ime1);
    // not full neither by size nor by messages
    Assert.assertTrue(consumer.messageSink.needsMoreMessages(ssp1));
    consumer.messageSink.addMessage(ssp1, ime11);
    // not full by size, but should be full by messages
    Assert.assertFalse(consumer.messageSink.needsMoreMessages(ssp1));

    Assert.assertEquals(1, consumer.getNumMessagesInQueue(ssp0));
    Assert.assertEquals(2, consumer.getNumMessagesInQueue(ssp1));
    Assert.assertEquals(ime0Size, consumer.getMessagesSizeInQueue(ssp0));
    Assert.assertEquals(ime1Size + ime11Size, consumer.getMessagesSizeInQueue(ssp1));

    consumer.stop();
  }
",non-flaky,5
99794,apache_cassandra,MessagingServiceTest.listenOptionalSecureConnection,"    @Test
    public void listenOptionalSecureConnection() throws InterruptedException
    {
        ServerEncryptionOptions serverEncryptionOptions = new ServerEncryptionOptions()
                                                          .withOptional(true);
        listen(serverEncryptionOptions, false);
    }
",non-flaky,5
91424,strapdata_elassandra,BasicDistributedJobsIT.testDedicatedMlNode,"    @TestLogging(""org.elasticsearch.xpack.persistent:TRACE,org.elasticsearch.cluster.service:DEBUG,org.elasticsearch.xpack.ml.action:DEBUG"")
    public void testDedicatedMlNode() throws Exception {
        internalCluster().ensureAtMostNumDataNodes(0);
        // start 2 non ml node that will never get a job allocated. (but ml apis are accessible from this node)
        internalCluster().startNode(Settings.builder().put(MachineLearning.ML_ENABLED.getKey(), false));
        internalCluster().startNode(Settings.builder().put(MachineLearning.ML_ENABLED.getKey(), false));
        // start ml node
        if (randomBoolean()) {
            internalCluster().startNode(Settings.builder().put(MachineLearning.ML_ENABLED.getKey(), true));
        } else {
            // the default is based on 'xpack.ml.enabled', which is enabled in base test class.
            internalCluster().startNode();
        }
        ensureStableCluster(3);

        String jobId = ""dedicated-ml-node-job"";
        Job.Builder job = createJob(jobId, new ByteSizeValue(2, ByteSizeUnit.MB));
        PutJobAction.Request putJobRequest = new PutJobAction.Request(job);
        client().execute(PutJobAction.INSTANCE, putJobRequest).actionGet();

        OpenJobAction.Request openJobRequest = new OpenJobAction.Request(job.getId());
        client().execute(OpenJobAction.INSTANCE, openJobRequest).actionGet();
        assertBusy(() -> {
            ClusterState clusterState = client().admin().cluster().prepareState().get().getState();
            PersistentTasksCustomMetaData tasks = clusterState.getMetaData().custom(PersistentTasksCustomMetaData.TYPE);
            PersistentTask<?> task = tasks.getTask(MlTasks.jobTaskId(jobId));
            DiscoveryNode node = clusterState.nodes().resolveNode(task.getExecutorNode());
            assertThat(node.getAttributes(), hasEntry(MachineLearning.ML_ENABLED_NODE_ATTR, ""true""));
            assertThat(node.getAttributes(), hasEntry(MachineLearning.MAX_OPEN_JOBS_NODE_ATTR, ""20""));
            JobTaskState jobTaskState = (JobTaskState) task.getState();
            assertNotNull(jobTaskState);
            assertEquals(JobState.OPENED, jobTaskState.getState());
        });

        logger.info(""stop the only running ml node"");
        internalCluster().stopRandomNode(settings -> settings.getAsBoolean(MachineLearning.ML_ENABLED.getKey(), true));
        ensureStableCluster(2);
        assertBusy(() -> {
            // job should get and remain in a failed state and
            // the status remains to be opened as from ml we didn't had the chance to set the status to failed:
            assertJobTask(jobId, JobState.OPENED, false);
        });

        logger.info(""start ml node"");
        internalCluster().startNode(Settings.builder().put(MachineLearning.ML_ENABLED.getKey(), true));
        ensureStableCluster(3);
        assertBusy(() -> {
            // job should be re-opened:
            assertJobTask(jobId, JobState.OPENED, true);
        });
    }
",non-flaky,5
175808,GoogleCloudPlatform_google-cloud-eclipse,MessagesTest.testUrlOpenErrorDialogMessage,"  @Test
  public void testUrlOpenErrorDialogMessage() {
    assertEquals(""Could not open URL"", Messages.getString(""openurllistener.error.message""));
  }
",non-flaky,5
112655,tbsalling_aismessages,PositionReportClassAScheduledTest.canDecodeCommunicationState,"    @Test
    public void canDecodeCommunicationState() {
        AISMessage aisMessage = AISMessage.create(NMEAMessage.fromString(""!AIVDM,1,1,,A,17OoHr?P009qtlQd6T<0<?wN041P,0*01""));

        System.out.println(aisMessage.toString());

        assertEquals(AISMessageType.PositionReportClassAScheduled, aisMessage.getMessageType());
        assertEquals((Integer) 0, aisMessage.getRepeatIndicator());
        PositionReportClassAScheduled message = (PositionReportClassAScheduled) aisMessage;
        assertEquals(MMSI.valueOf(503175400), message.getSourceMmsi());
        assertEquals(NavigationStatus.Undefined, message.getNavigationStatus());
        assertEquals(Integer.valueOf(-128), message.getRateOfTurn()); // ROT = 1000000b = -128
        assertEquals(Float.valueOf(0.0f), message.getSpeedOverGround());
        assertFalse(message.getPositionAccuracy());
        assertEquals(Float.valueOf(-34.773254f), message.getLatitude());
        assertEquals(Float.valueOf(138.48856f), message.getLongitude());
        assertEquals(Float.valueOf(4.8f), message.getCourseOverGround());
        assertEquals(Integer.valueOf(47), message.getSecond());
        assertEquals(Integer.valueOf(511), message.getTrueHeading());
        assertEquals(ManeuverIndicator.NotAvailable, message.getSpecialManeuverIndicator());
        assertFalse(message.getRaimFlag());

        CommunicationState communicationState = message.getCommunicationState();
        assertEquals(SyncState.UTCDirect, communicationState.getSyncState());

        assertTrue(communicationState instanceof SOTDMACommunicationState);
        SOTDMACommunicationState sotdmaCommunicationState = (SOTDMACommunicationState) communicationState;
        assertNull(sotdmaCommunicationState.getNumberOfReceivedStations());
        assertNull(sotdmaCommunicationState.getSlotNumber());
        assertNull(sotdmaCommunicationState.getSlotOffset());
        assertEquals(Integer.valueOf(1), sotdmaCommunicationState.getSlotTimeout());
        assertEquals(Integer.valueOf(0), sotdmaCommunicationState.getUtcHour());
        assertEquals(Integer.valueOf(24), sotdmaCommunicationState.getUtcMinute());
    }
",non-flaky,5
137074,spring-projects_spring-framework,ResolvableTypeTests.getResolvableType,"	@Test
		public ResolvableType getResolvableType() {
			if (this.type == null) {
				return null;
			}
			return ResolvableType.forClassWithGenerics(getClass(), this.type);
		}
",non-flaky,5
170511,eclipse_jetty.project,TestAnnotationParser.handle,"    @Test
    public void testSampleAnnotation() throws Exception
    {
        String[] classNames = new String[]{""org.eclipse.jetty.annotations.ClassA""};
        AnnotationParser parser = new AnnotationParser();

        class SampleAnnotationHandler extends AnnotationParser.AbstractHandler
        {
            private List<String> methods = Arrays.asList(""a"", ""b"", ""c"", ""d"", ""l"");

            @Override
            public void handle(ClassInfo info, String annotation)
            {
                if (annotation == null || !""org.eclipse.jetty.annotations.Sample"".equals(annotation))
                    return;

                assertEquals(""org.eclipse.jetty.annotations.ClassA"", info.getClassName());
            }
",non-flaky,5
99737,apache_cassandra,FQLReplayTest.testFQLQueryBatchToStatement,"    @Test
    public void testFQLQueryBatchToStatement()
    {
        List<List<ByteBuffer>> values = new ArrayList<>();
        List<String> queries = new ArrayList<>();
        for (int bqCount = 0; bqCount < 10; bqCount++)
        {
            queries.add(""select * from asdf where x = ? and y = "" + bqCount);
            List<ByteBuffer> queryValues = new ArrayList<>();
            for (int i = 0; i < 10; i++)
                queryValues.add(ByteBufferUtil.bytes(i + "":"" + bqCount));
            values.add(queryValues);
        }

        FQLQuery.Batch batch = new FQLQuery.Batch(""xyz"",
                                                   QueryOptions.DEFAULT.getProtocolVersion().asInt(),
                                                   QueryOptions.DEFAULT,
                                                   1234,
                                                   12345,
                                                   54321,
                                                   com.datastax.driver.core.BatchStatement.Type.UNLOGGED,
                                                   queries,
                                                   values);
        Statement stmt = batch.toStatement();
        assertEquals(stmt.getDefaultTimestamp(), 12345);
        assertTrue(stmt instanceof com.datastax.driver.core.BatchStatement);
        com.datastax.driver.core.BatchStatement batchStmt = (com.datastax.driver.core.BatchStatement)stmt;
        List<Statement> statements = Lists.newArrayList(batchStmt.getStatements());
        List<Statement> fromFQLQueries = batch.queries.stream().map(FQLQuery.Single::toStatement).collect(Collectors.toList());
        assertEquals(statements.size(), fromFQLQueries.size());
        assertEquals(12345, batchStmt.getDefaultTimestamp());
        for (int i = 0; i < statements.size(); i++)
            compareStatements(statements.get(i), fromFQLQueries.get(i));
    }
",non-flaky,5
177958,aosp-mirror_platform_frameworks_support,FileProviderTest.testStrategyExtraParams,"    @Test
    public void testStrategyExtraParams() throws Exception {
        final SimplePathStrategy strat = new SimplePathStrategy(""authority"");
        strat.addRoot(""tag"", mContext.getFilesDir());

        File expectedRoot = mContext.getFilesDir().getCanonicalFile();
        File file = buildPath(expectedRoot, ""file.txt"");
        assertEquals(file.getPath(), strat.getFileForUri(
                Uri.parse(""content://authority/tag/file.txt?extra=foo"")).getPath());
    }
",non-flaky,5
77553,dropwizard_dropwizard,ResourceExtensionWithJettyTest.toResponse,"    @Test
        public Response toResponse(WebApplicationException e) {
            throw new UnsupportedOperationException();
        }
",non-flaky,5
372,apache_hadoop,TestPermissionSymlinks.testRenameSrcNotWritableFS,"  @Test(timeout = 5000)
  public void testRenameSrcNotWritableFS() throws Exception {
    fs.setPermission(linkParent, new FsPermission((short) 0555));
    doRenameSrcNotWritableFS();
  }
",non-flaky,5
170544,eclipse_jetty.project,TestServletAnnotations.testWebServletAnnotationIgnore,"    @Test
    public void testWebServletAnnotationIgnore() throws Exception
    {
        //an existing servlet OF THE SAME NAME has even 1 non-default mapping we can't use
        //any of the url mappings in the annotation
        WebAppContext wac = new WebAppContext();
        ServletHolder servlet = new ServletHolder();
        servlet.setClassName(""org.eclipse.jetty.servlet.OtherDServlet"");
        servlet.setName(""DServlet"");
        wac.getServletHandler().addServlet(servlet);

        ServletMapping m = new ServletMapping();
        m.setPathSpec(""/default"");
        m.setFromDefaultDescriptor(true);
        m.setServletName(""DServlet"");
        wac.getServletHandler().addServletMapping(m);

        ServletMapping m2 = new ServletMapping();
        m2.setPathSpec(""/other"");
        m2.setServletName(""DServlet"");
        wac.getServletHandler().addServletMapping(m2);

        WebServletAnnotation annotation = new WebServletAnnotation(wac, ""org.eclipse.jetty.annotations.ServletD"", null);
        annotation.apply();

        ServletMapping[] resultMappings = wac.getServletHandler().getServletMappings();
        assertEquals(2, resultMappings.length);

        for (ServletMapping r : resultMappings)
        {
            assertEquals(1, r.getPathSpecs().length);
            if (!r.getPathSpecs()[0].equals(""/default"") && !r.getPathSpecs()[0].equals(""/other""))
                fail(""Unexpected path in mapping: "" + r);
        }
    }
",non-flaky,5
70795,apache_kafka,PluginUtilsTest.testJavaLibraryClasses,"    @Test
    public void testJavaLibraryClasses() {
        assertFalse(PluginUtils.shouldLoadInIsolation(""java.""));
        assertFalse(PluginUtils.shouldLoadInIsolation(""java.lang.Object""));
        assertFalse(PluginUtils.shouldLoadInIsolation(""java.lang.String""));
        assertFalse(PluginUtils.shouldLoadInIsolation(""java.util.HashMap$Entry""));
        assertFalse(PluginUtils.shouldLoadInIsolation(""java.io.Serializable""));
        assertFalse(PluginUtils.shouldLoadInIsolation(""javax.rmi.""));
        assertFalse(PluginUtils.shouldLoadInIsolation(
                ""javax.management.loading.ClassLoaderRepository"")
        );
        assertFalse(PluginUtils.shouldLoadInIsolation(""org.omg.CORBA.""));
        assertFalse(PluginUtils.shouldLoadInIsolation(""org.omg.CORBA.Object""));
        assertFalse(PluginUtils.shouldLoadInIsolation(""org.w3c.dom.""));
        assertFalse(PluginUtils.shouldLoadInIsolation(""org.w3c.dom.traversal.TreeWalker""));
        assertFalse(PluginUtils.shouldLoadInIsolation(""org.xml.sax.""));
        assertFalse(PluginUtils.shouldLoadInIsolation(""org.xml.sax.EntityResolver""));
    }
",non-flaky,5
112695,hwang-pku_ormlite-core,TransactionManagerTest.call,"	@Test
	public void testTransactionManagerRollback() throws Exception {
		ConnectionSource connectionSource = createMock(ConnectionSource.class);
		DatabaseConnection conn = createMock(DatabaseConnection.class);
		expect(conn.isAutoCommitSupported()).andReturn(false);
		Savepoint savePoint = createMock(Savepoint.class);
		expect(savePoint.getSavepointName()).andReturn(""name"").anyTimes();
		expect(conn.setSavePoint(isA(String.class))).andReturn(savePoint);
		conn.rollback(savePoint);
		expect(connectionSource.getDatabaseType()).andReturn(databaseType);
		expect(connectionSource.getReadWriteConnection(null)).andReturn(conn);
		expect(connectionSource.saveSpecialConnection(conn)).andReturn(true);
		connectionSource.clearSpecialConnection(conn);
		connectionSource.releaseConnection(conn);
		replay(connectionSource, conn, savePoint);
		TransactionManager tm = new TransactionManager(connectionSource);
		try {
			tm.callInTransaction(new Callable<Void>() {
				@Override
				public Void call() throws Exception {
					throw new SQLException(""you better roll back!!"");
				}
",non-flaky,5
122625,vespa-engine_vespa,DefaultEnvWriterTest.default_env_is_correctly_rewritten,"    @Test
    public void default_env_is_correctly_rewritten() throws IOException {
        Path tempFile = temporaryFolder.newFile().toPath();
        Files.copy(EXAMPLE_FILE, tempFile, REPLACE_EXISTING);

        DefaultEnvWriter writer = new DefaultEnvWriter();
        writer.addOverride(""VESPA_HOSTNAME"", ""my-new-hostname"");
        writer.addFallback(""VESPA_CONFIGSERVER"", ""new-fallback-configserver"");
        writer.addOverride(""VESPA_TLS_CONFIG_FILE"", ""/override/path/to/config.file"");

        boolean modified = writer.updateFile(context, tempFile);

        assertTrue(modified);
        assertEquals(Files.readString(EXPECTED_RESULT_FILE), Files.readString(tempFile));
        verify(context, times(1)).log(any(Logger.class), any(String.class));

        modified = writer.updateFile(context, tempFile);
        assertFalse(modified);
        assertEquals(Files.readString(EXPECTED_RESULT_FILE), Files.readString(tempFile));
        verify(context, times(1)).log(any(Logger.class), any(String.class));
    }
",non-flaky,5
98592,nutzam_nutz,El2Test.test_issue_397_3,"    @Test
    public void test_issue_397_3() {
        int expect = 1 / 1 + 10 * (1400 - 1400) / 400;
        Object val = El.eval(""1/1+10*(1400-1400)/400"");
        assertEquals(expect, val);
    }
",non-flaky,5
97743,vojtechhabarta_typescript-generator,CustomTypeMappingTest.testSuperTypeString,"    @Test
    public void testSuperTypeString() throws Exception {
        final Settings settings = TestUtils.settings();
        settings.customTypeMappings = Collections.singletonMap(""cz.habarta.typescript.generator.CustomTypeMappingTest$BaseCustomMapping"", ""string"");
        final String output = new TypeScriptGenerator(settings).generateTypeScript(Input.from(InterfaceUsingSubCustomMapping.class));
        assertTrue(output.contains(""sub: SubCustomMapping;""));
    }
",non-flaky,5
30955,camunda-cloud_zeebe,BrokerInfoTest.shouldEncodeDecodeBrokerInfo,"  @Test
  public void shouldEncodeDecodeBrokerInfo() {
    // given
    final int nodeId = 123;
    final int partitionsCount = 345;
    final int clusterSize = 567;
    final int replicationFactor = 789;
    final Map<DirectBuffer, DirectBuffer> addresses = new HashMap<>();
    addresses.put(wrapString(""foo""), wrapString(""192.159.12.1:23""));
    addresses.put(wrapString(""bar""), wrapString(""zeebe-0.cluster.loc:12312""));
    final Map<Integer, PartitionRole> partitionRoles = new HashMap<>();
    partitionRoles.put(1, PartitionRole.FOLLOWER);
    partitionRoles.put(2, PartitionRole.LEADER);
    partitionRoles.put(231, PartitionRole.FOLLOWER);
    final Map<Integer, PartitionHealthStatus> partitionHealthStatuses = new HashMap<>();
    partitionHealthStatuses.put(1, PartitionHealthStatus.HEALTHY);
    partitionHealthStatuses.put(2, PartitionHealthStatus.UNHEALTHY);
    partitionHealthStatuses.put(123, PartitionHealthStatus.HEALTHY);

    final BrokerInfo brokerInfo =
        new BrokerInfo()
            .setNodeId(nodeId)
            .setPartitionsCount(partitionsCount)
            .setClusterSize(clusterSize)
            .setReplicationFactor(replicationFactor);

    addresses.forEach(brokerInfo::addAddress);
    partitionRoles.forEach(brokerInfo::addPartitionRole);
    partitionHealthStatuses.forEach(brokerInfo::addPartitionHealth);

    // when
    encodeDecode(brokerInfo);

    // then
    assertThat(brokerInfo.getNodeId()).isEqualTo(nodeId);
    assertThat(brokerInfo.getPartitionsCount()).isEqualTo(partitionsCount);
    assertThat(brokerInfo.getClusterSize()).isEqualTo(clusterSize);
    assertThat(brokerInfo.getReplicationFactor()).isEqualTo(replicationFactor);
    assertThat(brokerInfo.getAddresses()).containsAllEntriesOf(addresses);
    assertThat(brokerInfo.getPartitionRoles()).containsAllEntriesOf(partitionRoles);
    assertThat(brokerInfo.getPartitionHealthStatuses())
        .containsAllEntriesOf(partitionHealthStatuses);
  }
",non-flaky,5
26781,MundaneImmortal_pair-distribution-app,CompanyTest.testGetCompanyTracks,"	@Test
	public void testGetCompanyTracks() {
		List<String> tracks = Arrays.asList(""other-company-track"", ""company-track"", ""companyB-track"");
		
		String companyTrack = new Company(""Company"").getCompanyTrack(tracks);
		
		assertThat(companyTrack, is(""company-track""));
	}
",non-flaky,5
98296,spotify_docker-client,CompressedDirectoryTest.testFile,"  @Test
  public void testFile() throws Exception {
    // note: Paths.get(someURL.toUri()) is the platform-neutral way to convert a URL to a Path
    final URL dockerDirectory = Resources.getResource(""dockerDirectory"");
    try (CompressedDirectory dir = CompressedDirectory.create(Paths.get(dockerDirectory.toURI()));
         BufferedInputStream fileIn = new BufferedInputStream(Files.newInputStream(dir.file()));
         GzipCompressorInputStream gzipIn = new GzipCompressorInputStream(fileIn);
         TarArchiveInputStream tarIn = new TarArchiveInputStream(gzipIn)) {

      final List<String> names = new ArrayList<>();
      TarArchiveEntry entry;
      while ((entry = tarIn.getNextTarEntry()) != null) {
        final String name = entry.getName();
        names.add(name);
      }
      assertThat(names,
                 containsInAnyOrder(""Dockerfile"", ""bin/"", ""bin/date.sh"",
                                    ""innerDir/"", ""innerDir/innerDockerfile""));
    }
  }
",non-flaky,5
77470,opensearch-project_OpenSearch,MasterServiceTests.execute,"    @TestLogging(value = ""org.opensearch.cluster.service:TRACE"", reason = ""to ensure that we log cluster state events on TRACE level"")
    public void testClusterStateUpdateLogging() throws Exception {
        MockLogAppender mockAppender = new MockLogAppender();
        mockAppender.start();
        mockAppender.addExpectation(
            new MockLogAppender.SeenEventExpectation(
                ""test1 start"",
                MasterService.class.getCanonicalName(),
                Level.DEBUG,
                ""executing cluster state update for [test1]""));
        mockAppender.addExpectation(
            new MockLogAppender.SeenEventExpectation(
                ""test1 computation"",
                MasterService.class.getCanonicalName(),
                Level.DEBUG,
                ""took [1s] to compute cluster state update for [test1]""));
        mockAppender.addExpectation(
            new MockLogAppender.SeenEventExpectation(
                ""test1 notification"",
                MasterService.class.getCanonicalName(),
                Level.DEBUG,
                ""took [0s] to notify listeners on unchanged cluster state for [test1]""));

        mockAppender.addExpectation(
            new MockLogAppender.SeenEventExpectation(
                ""test2 start"",
                MasterService.class.getCanonicalName(),
                Level.DEBUG,
                ""executing cluster state update for [test2]""));
        mockAppender.addExpectation(
            new MockLogAppender.SeenEventExpectation(
                ""test2 failure"",
                MasterService.class.getCanonicalName(),
                Level.TRACE,
                ""failed to execute cluster state update (on version: [*], uuid: [*]) for [test2]*""));
        mockAppender.addExpectation(
            new MockLogAppender.SeenEventExpectation(
                ""test2 computation"",
                MasterService.class.getCanonicalName(),
                Level.DEBUG,
                ""took [2s] to compute cluster state update for [test2]""));
        mockAppender.addExpectation(
            new MockLogAppender.SeenEventExpectation(
                ""test2 notification"",
                MasterService.class.getCanonicalName(),
                Level.DEBUG,
                ""took [0s] to notify listeners on unchanged cluster state for [test2]""));

        mockAppender.addExpectation(
            new MockLogAppender.SeenEventExpectation(
                ""test3 start"",
                MasterService.class.getCanonicalName(),
                Level.DEBUG,
                ""executing cluster state update for [test3]""));
        mockAppender.addExpectation(
            new MockLogAppender.SeenEventExpectation(
                ""test3 computation"",
                MasterService.class.getCanonicalName(),
                Level.DEBUG,
                ""took [3s] to compute cluster state update for [test3]""));
        mockAppender.addExpectation(
            new MockLogAppender.SeenEventExpectation(
                ""test3 notification"",
                MasterService.class.getCanonicalName(),
                Level.DEBUG,
                ""took [4s] to notify listeners on successful publication of cluster state (version: *, uuid: *) for [test3]""));

        mockAppender.addExpectation(
            new MockLogAppender.SeenEventExpectation(
                ""test4"",
                MasterService.class.getCanonicalName(),
                Level.DEBUG,
                ""executing cluster state update for [test4]""));

        Logger clusterLogger = LogManager.getLogger(MasterService.class);
        Loggers.addAppender(clusterLogger, mockAppender);
        try (MasterService masterService = createMasterService(true)) {
            masterService.submitStateUpdateTask(""test1"", new ClusterStateUpdateTask() {
                @Override
                public ClusterState execute(ClusterState currentState) {
                    relativeTimeInMillis += TimeValue.timeValueSeconds(1).millis();
                    return currentState;
                }
",non-flaky,5
133932,CorfuDB_CorfuDB,LayoutHandlerTest.testBootstrapLayout,"    @Test
    public void testBootstrapLayout() {
        ResponseMsg responseACK = getResponseMsg(
                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.IGNORE),
                getBootstrapLayoutResponseMsg(true)
        );

        ResponseMsg responseNACK = getResponseMsg(
                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.CHECK),
                getBootstrapLayoutResponseMsg(false)
        );

        layoutHandler.handleMessage(responseACK, mockChannelHandlerContext);
        layoutHandler.handleMessage(responseNACK, mockChannelHandlerContext);

        // Verify that the correct request was completed (once) with the appropriate value,
        // and that we did not complete exceptionally.
        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));
        verify(mockClientRouter).completeRequest(responseACK.getHeader().getRequestId(), true);
        verify(mockClientRouter).completeRequest(responseNACK.getHeader().getRequestId(), false);
    }
",non-flaky,5
160380,ConsenSys_teku,SignedBlockTest.shouldDeserialize,"  @Test
  public void shouldDeserialize() throws JsonProcessingException {
    final SignedBlock signedBlock = jsonProvider.jsonToObject(jsonData, SignedBlock.class);
    assertThat(signedBlock.slot).isEqualTo(slot);
    assertThat(signedBlock.signingRoot).isEqualTo(signingRoot);
  }
",non-flaky,5
178015,aosp-mirror_platform_frameworks_support,PlaybackControlGlueTest.testMediaPlayButtonOnFF,"    @Test
    public void testMediaPlayButtonOnFF() {
        PlaybackControlsRow row = new PlaybackControlsRow();
        glue.setControlsRow(row);
        SparseArrayObjectAdapter adapter = (SparseArrayObjectAdapter)
                row.getPrimaryActionsAdapter();
        PlaybackControlsRow.MultiAction playPause = (PlaybackControlsRow.MultiAction) adapter
                .lookup(PlaybackControlGlue.ACTION_PLAY_PAUSE);
        PlaybackControlsRow.MultiAction fastForward = (PlaybackControlsRow.MultiAction) adapter
                .lookup(PlaybackControlGlue.ACTION_FAST_FORWARD);

        glue.onActionClicked(playPause);
        glue.onActionClicked(fastForward);
        assertEquals(PlaybackControlGlue.PLAYBACK_SPEED_FAST_L0, glue.getCurrentSpeedId());
        glue.onKey(null, KeyEvent.KEYCODE_MEDIA_PLAY, new KeyEvent(KeyEvent.ACTION_DOWN,
                KeyEvent.KEYCODE_MEDIA_PLAY));
        assertEquals(PlaybackControlGlue.PLAYBACK_SPEED_NORMAL, glue.getCurrentSpeedId());
    }
",non-flaky,5
98075,vert-x3_vertx-mongo-client,WriteConcernParserTest.testWriteConcernCaseInsensitive,"  @Test
  public void testWriteConcernCaseInsensitive() {
    JsonObject config = new JsonObject();
    config.put(""writeConcern"", ""acknowledged"");

    WriteConcern wc = new WriteConcernParser(null, config).writeConcern();
    assertNotNull(wc);
    assertEquals(WriteConcern.ACKNOWLEDGED, wc);
  }
",non-flaky,5
179439,abel533_Mapper,UpdateByPrimaryKeySelectiveForceTest.testUpdateByPrimaryKeySelectiveForceByNull,"    @Test
    public void testUpdateByPrimaryKeySelectiveForceByNull() {
        SqlSession sqlSession = getSqlSession();
        try {
            CountryIntMapper mapper = sqlSession.getMapper(CountryIntMapper.class);
            CountryInt country = new CountryInt();
            country.setId(174);
            country.setCountryname(""è±å½"");
            mapper.updateByPrimaryKeySelectiveForce(country, null);

            country = mapper.selectByPrimaryKey(174);
            Assert.assertNotNull(country.getCountrycode());
        } finally {
            sqlSession.close();
        }
    }
",non-flaky,5
104648,apache_pinot,OfflineClusterIntegrationTest.testCaseStatementInSelectionWithTransformFunctionInThen,"  @Test
  public void testCaseStatementInSelectionWithTransformFunctionInThen()
      throws Exception {
    String sqlQuery =
        ""SELECT ArrDelay, CASE WHEN ArrDelay > 0 THEN ArrDelay WHEN ArrDelay < 0 THEN ArrDelay * -1 ELSE 0 END AS ""
            + ""ArrTimeDiff FROM mytable LIMIT 1000"";
    JsonNode response = postSqlQuery(sqlQuery, _brokerBaseApiUrl);
    JsonNode rows = response.get(""resultTable"").get(""rows"");
    assertEquals(response.get(""exceptions"").size(), 0);
    for (int i = 0; i < rows.size(); i++) {
      int arrDelay = rows.get(i).get(0).asInt();
      int arrDelayDiff = rows.get(i).get(1).asInt();
      if (arrDelay > 0) {
        assertEquals(arrDelay, arrDelayDiff);
      } else {
        assertEquals(arrDelay, arrDelayDiff * -1);
      }
    }
  }
",non-flaky,5
26859,wildfly_wildfly,ServiceBasedNamingStoreTestCase.testLookupNestedContext,"    @Test
    public void testLookupNestedContext() throws Exception {
        final ServiceName bindingName = ServiceName.JBOSS.append(""foo"", ""bar"", ""baz"", ""TestBean"");
        store.add(bindingName);
        store.add(ServiceName.JBOSS.append(""foos"", ""bar""));
        store.add(ServiceName.JBOSS.append(""fo"", ""bar""));
        store.add(ServiceName.JBOSS.append(""foo"", ""ba""));
        store.add(ServiceName.JBOSS.append(""foo"", ""bart""));
        store.add(ServiceName.JBOSS.append(""foo"", ""bar"", ""ba""));
        store.add(ServiceName.JBOSS.append(""foo"", ""bar"", ""bazt""));
        store.add(ServiceName.JBOSS.append(""foo"", ""bar"", ""art""));

        Object obj = store.lookup(new CompositeName(""foo""));
        assertNotNull(obj);
        assertTrue(obj instanceof Context);

        obj = Context.class.cast(obj).lookup(new CompositeName(""bar""));
        assertNotNull(obj);
        assertTrue(obj instanceof Context);

        obj = Context.class.cast(obj).lookup(new CompositeName(""baz""));
        assertNotNull(obj);
        assertTrue(obj instanceof Context);
    }
",non-flaky,5
98268,spotify_docker-client,ContainerStateTest.testLoadInvalidConatainerStateJson,"  @Test
  public void testLoadInvalidConatainerStateJson() throws Exception {
    expectedException.expect(JsonMappingException.class);
    objectMapper.readValue(fixture(""fixtures/container-state-invalid.json""), ContainerState.class);

  }
",non-flaky,5
170549,eclipse_jetty.project,TestResourceAnnotations.testResourceAnnotations,"    @Test
    public void testResourceAnnotations()
        throws Exception
",non-flaky,5
95728,togglz_togglz,DefaultFeatureManagerTest.testGetFeatureState,"    @Test
    public void testGetFeatureState() {

        FeatureState state = manager.getFeatureState(MyFeatures.DELETE_USERS);
        assertEquals(MyFeatures.DELETE_USERS, state.getFeature());
        assertEquals(true, state.isEnabled());
        assertEquals(""admin"", state.getParameter(UsernameActivationStrategy.PARAM_USERS));

    }
",non-flaky,5
160349,ConsenSys_teku,MetricsPublisherManagerTest.shouldStopGracefully,"  @Test
  public void shouldStopGracefully() throws IOException {
    MetricsPublisherManager publisherManager =
        new MetricsPublisherManager(asyncRunnerFactory, timeProvider, metricsEndpoint);
    publisherManager.setMetricsPublisher(metricsPublisher);
    SafeFuture<?> safeFuture = publisherManager.doStart();
    Assertions.assertThat(safeFuture).isEqualTo(SafeFuture.COMPLETE);
    safeFuture = publisherManager.doStop();
    Assertions.assertThat(safeFuture).isEqualTo(SafeFuture.COMPLETE);
  }
",non-flaky,5
160440,ConsenSys_teku,BeaconValidatorsTest.validatorsResponseShouldConformToDefaults,"  @TestTemplate
  public void validatorsResponseShouldConformToDefaults(SpecContext ctx) {
    BeaconState beaconState = ctx.getDataStructureUtil().randomBeaconState();
    SszList<Validator> validatorList = beaconState.getValidators();
    BeaconValidators response = new BeaconValidators(beaconState, FAR_FUTURE_EPOCH);
    assertThat(response.total_size).isEqualTo(beaconState.getValidators().size());
    assertThat(response.validators.size())
        .isEqualTo(Math.min(validatorList.size(), PAGE_SIZE_DEFAULT));
    int expectedNextPageToken =
        validatorList.size() < PAGE_SIZE_DEFAULT ? 0 : PAGE_TOKEN_DEFAULT + 1;
    assertThat(response.next_page_token).isEqualTo(expectedNextPageToken);
    assertThat(response.validators.get(0).validator.activation_eligibility_epoch)
        .isEqualToComparingFieldByField(validatorList.get(0).getActivation_eligibility_epoch());
    assertThat(response.validators.get(0).validator_index).isEqualTo(0);
  }
",non-flaky,5
86137,graylog2_graylog2-server,ESMongoDateTimeDeserializerTest.deserializeIsoDateTime,"    @Test
    public void deserializeIsoDateTime() throws Exception {
        final String json = ""{\""date_time\"":\""2016-12-13T14:00:00.000\""}"";
        final DTO value = objectMapper.readValue(json, DTO.class);
        assertThat(value.dateTime).isEqualTo(new DateTime(2016, 12, 13, 14, 0, DateTimeZone.UTC));
    }
",non-flaky,5
97693,vojtechhabarta_typescript-generator,TaggedUnionsTest.testTaggedUnionsWithDiamond,"    @Test
    public void testTaggedUnionsWithDiamond() {
        final Settings settings = TestUtils.settings();
        final String output = new TypeScriptGenerator(settings).generateTypeScript(Input.from(DiamondA.class));
        final String expected = (
                ""\n"" +
                ""interface DiamondA {\n"" +
                ""    kind: 'b1' | 'c' | 'b2';\n"" +
                ""    a: string;\n"" +
                ""}\n"" +
                ""\n"" +
                ""interface DiamondB1 extends DiamondA {\n"" +
                ""    kind: 'b1' | 'c';\n"" +
                ""    b1: string;\n"" +
                ""}\n"" +
                ""\n"" +
                ""interface DiamondB2 extends DiamondA {\n"" +
                ""    kind: 'b2' | 'c';\n"" +
                ""    b2: string;\n"" +
                ""}\n"" +
                ""\n"" +
                ""interface DiamondC extends DiamondB1, DiamondB2 {\n"" +
                ""    kind: 'c';\n"" +
                ""    c: string;\n"" +
                ""}\n"" +
                ""\n"" +
                ""type DiamondAUnion = DiamondB1 | DiamondB2 | DiamondC;\n"" +
                """"
                ).replace('\'', '""');
        Assert.assertEquals(expected, output);
    }
",non-flaky,5
77673,pholser_junit-quickcheck,PrimitivePropertyParameterTypesTest.shouldHold,"    @Test public void primitiveBoolean() {
        @Property public void shouldHold(boolean b) {
        }
",non-flaky,5
70830,apache_kafka,WorkerConfigTest.testAdminListenersNotAllowingEmptyStrings,"    @Test(expected = ConfigException.class)
    public void testAdminListenersNotAllowingEmptyStrings() {
        Map<String, String> props = baseProps();
        props.put(WorkerConfig.ADMIN_LISTENERS_CONFIG, ""http://a.b:9999,"");
        new WorkerConfig(WorkerConfig.baseConfigDef(), props);
    }
",non-flaky,5
15,MundaneImmortal_pair-distribution-app,testGenerateNewDayPairs,"@Test
public void testGenerateNewDayPairs() {
    PairCombinations pairs = getPairsList();
    List<Developer> devs = getStandardDevs();
    List<String> tracks = Arrays.asList(""track1"", ""track2"", ""track3"");
    Map<Pair, Integer> pairsWeight = subject.buildPairsWeightFromPastPairing(pairs, devs);
    subject.buildDevelopersPairingDays(pairs, devs);
    DayPairs dayPairs = subject.generateNewDayPairs(tracks, devs, pairs, pairsWeight, getStandardCompanies());
    assertThat(dayPairs.getTracks().size(), is(2));
    assertThat(dayPairs.getTracks(), contains(""track1"", ""track2""));
    assertThat(dayPairs.getPairByTrack(""track1""),
    is(not(new Pair(Arrays.asList(new Developer(""dev1""), new Developer(""dev2""))))));
    assertThat(dayPairs.getPairByTrack(""track2""),
    is(not(new Pair(Arrays.asList(new Developer(""dev3""), new Developer(""dev4""))))));
    boolean trackOneHasContext = dayPairs.getPairByTrack(""track1"").getFirstDev().hasContext() || dayPairs.getPairByTrack(""track1"").getSecondDev().hasContext();
    boolean trackTwoHasContext = dayPairs.getPairByTrack(""track2"").getFirstDev().hasContext() || dayPairs.getPairByTrack(""track2"").getSecondDev().hasContext();
    assertThat(trackOneHasContext, is(true));
    assertThat(trackTwoHasContext, is(true));
}",unordered collections,3
53185,cloudfoundry_uaa,OpenIdConfigurationTests.testDefaultClaims,"    @Test
    public void testDefaultClaims() {
        assertEquals(""issuer"", defaultConfig.getIssuer());
        assertEquals(""/uaa/oauth/authorize"", defaultConfig.getAuthUrl());
        assertEquals(""/uaa/oauth/token"", defaultConfig.getTokenUrl());
        assertArrayEquals(new String[]{""client_secret_basic"", ""client_secret_post""}, defaultConfig.getTokenAMR());
        assertArrayEquals(new String[]{""RS256"", ""HS256""}, defaultConfig.getTokenEndpointAuthSigningValues());
        assertEquals(""/uaa/userinfo"", defaultConfig.getUserInfoUrl());
        assertEquals(""/uaa/token_keys"", defaultConfig.getJwksUri());
        assertArrayEquals(new String[]{""openid"", ""profile"", ""email"", ""phone"", ""roles"", ""user_attributes""}, defaultConfig.getScopes());
        assertArrayEquals(new String[]{""code"", ""code id_token"", ""id_token"", ""token id_token""}, defaultConfig.getResponseTypes());
        assertArrayEquals(new String[]{""public""}, defaultConfig.getSubjectTypesSupported());
        assertArrayEquals(new String[]{""RS256"", ""HS256""}, defaultConfig.getIdTokenSigningAlgValues());
        assertArrayEquals(new String[]{""none""}, defaultConfig.getRequestObjectSigningAlgValues());
        assertArrayEquals(new String[]{""normal""}, defaultConfig.getClaimTypesSupported());
        assertArrayEquals(
            new String[]{
                ""sub"", ""user_name"", ""origin"", ""iss"", ""auth_time"",
                ""amr"", ""acr"", ""client_id"", ""aud"", ""zid"", ""grant_type"",
                ""user_id"", ""azp"", ""scope"", ""exp"", ""iat"", ""jti"", ""rev_sig"",
                ""cid"", ""given_name"", ""family_name"", ""phone_number"", ""email""},
            defaultConfig.getClaimsSupported()
        );
        assertFalse(defaultConfig.isClaimsParameterSupported());
        assertEquals(""http://docs.cloudfoundry.org/api/uaa/"", defaultConfig.getServiceDocumentation());
        assertArrayEquals(new String[]{""en-US""}, defaultConfig.getUiLocalesSupported());
    }
",non-flaky,5
94697,square_okhttp,JavaApiConverterTest.getBody,"  @Test public void createOkResponseForCacheGet_secure() throws Exception {
      @Override public InputStream getBody() throws IOException {
        return new ByteArrayInputStream(""HelloWorld"".getBytes(StandardCharsets.UTF_8));
      }
",non-flaky,5
156415,apache_commons-lang,FastDateFormatTest.testLANG_1267,"    @Test
    public void testLANG_1267() {
        FastDateFormat.getInstance(""yyyy-MM-dd'T'HH:mm:ss.SSSXXX"");
    }
",non-flaky,5
38231,palantir_atlasdb,TextUtilsTest.testEscapeHtmlBasic,"    @Test
    public void testEscapeHtmlBasic() {
        String input1 = ""\""A\"" \""b\""; 1 < 2 && 3 > 2"";
        String output1 = ""&quot;A&quot; &quot;b&quot;; 1 &lt; 2 &amp;&amp; 3 &gt; 2"";
        assertTrue(output1.equals(TextUtils.escapeHtml(input1)));
    }
",non-flaky,5
92620,FasterXML_jackson-databind,TestSubtypesExternalPropertyMissingProperty.testDeserializationNull,"    @Test
    public void testDeserializationNull() throws Exception {
        ObjectReader r = READER.without(DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY);
        checkOrangeBoxNull(r, orangeBoxNullJson);
        checkAppleBoxNull(r, appleBoxNullJson);

        r = READER.with(DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY);
        checkOrangeBoxNull(r, orangeBoxNullJson);
        checkAppleBoxNull(r, appleBoxNullJson);
    }
",non-flaky,5
76923,Tencent_Firestorm,RssShuffleDataIteratorTest.readTest2,"  @Test
  public void readTest2() throws Exception {
    String basePath = HDFS_URI + ""readTest2"";
    HdfsShuffleWriteHandler writeHandler1 =
        new HdfsShuffleWriteHandler(""appId"", 0, 0, 1, basePath, ""test2_1"", conf);
    HdfsShuffleWriteHandler writeHandler2 =
        new HdfsShuffleWriteHandler(""appId"", 0, 0, 1, basePath, ""test2_2"", conf);

    Map<String, String> expectedData = Maps.newHashMap();
    Roaring64NavigableMap blockIdBitmap = Roaring64NavigableMap.bitmapOf();
    Roaring64NavigableMap taskIdBitmap = Roaring64NavigableMap.bitmapOf(0);
    writeTestData(writeHandler1, 2, 5, expectedData,
        blockIdBitmap, ""key1"", KRYO_SERIALIZER, 0);
    writeTestData(writeHandler2, 2, 5, expectedData,
        blockIdBitmap, ""key2"", KRYO_SERIALIZER, 0);

    RssShuffleDataIterator rssShuffleDataIterator = getDataIterator(basePath, blockIdBitmap, taskIdBitmap);

    validateResult(rssShuffleDataIterator, expectedData, 20);
    assertEquals(20, rssShuffleDataIterator.getShuffleReadMetrics().recordsRead());
    assertEquals(256, rssShuffleDataIterator.getShuffleReadMetrics().remoteBytesRead());
    assertTrue(rssShuffleDataIterator.getShuffleReadMetrics().fetchWaitTime() > 0);
  }
",non-flaky,5
94684,square_okhttp,CacheAdapterTest.get,"  @Test public void get_httpGet() throws Exception {
      @Override public CacheResponse get(
          URI uri, String method, Map<String, List<String>> headers) throws IOException {
        try {
          assertEquals(toUri(serverUrl), uri);
          assertEquals(""GET"", method);
          assertTrue(""Arbitrary standard header not present"", headers.containsKey(""User-Agent""));
          assertEquals(Collections.singletonList(""value1""), headers.get(""key1""));
          return null;
        } catch (Throwable t) {
          throw new IOException(""unexpected cache failure"", t);
        }
      }
",non-flaky,5
98236,apache_jackrabbit,PerformanceTest.testPerformance,"    @Test
    public void testPerformance() throws Exception {
        testPerformance(""2.1"");
    }
",non-flaky,5
156109,soot-oss_soot,DefaultInterfaceTest.derivedInterfacesTest,"  @Test
  public void derivedInterfacesTest() {
    String testClassSig = ""soot.defaultInterfaceMethods.DerivedInterfaces"";
    String defaultInterfaceOneSig = ""soot.defaultInterfaceMethods.InterfaceTestOne"";
    String defaultInterfaceTwoSig = ""soot.defaultInterfaceMethods.InterfaceTestTwo"";

    final SootMethod target =
        prepareTarget(
            methodSigFromComponents(testClassSig, voidType, mainClass),
            testClassSig,
            defaultInterfaceOneSig,
            defaultInterfaceTwoSig);

    FastHierarchy fh = Scene.v().getFastHierarchy();
    SootClass testClass = Scene.v().getSootClass(testClassSig);
    SootClass defaultInterfaceOne = Scene.v().getSootClass(defaultInterfaceOneSig);
    SootClass defaultInterfaceTwo = Scene.v().getSootClass(defaultInterfaceTwoSig);

    SootMethod interfaceOnePrint =
        Scene.v().getMethod(methodSigFromComponents(defaultInterfaceOneSig, ""void print()""));
    SootMethod interfaceTwoPrint =
        Scene.v().getMethod(methodSigFromComponents(defaultInterfaceTwoSig, ""void print()""));

    SootMethod refMainMethod =
        resolveMethodRefInBody(target.retrieveActiveBody().getUnits(), ""void print()"");

    SootMethod interfaceOneResolvedMethod =
        VirtualCalls.v().resolveNonSpecial(testClass.getType(), interfaceOnePrint.makeRef(), false);
    SootMethod interfaceTwoResolvedMethod =
        VirtualCalls.v().resolveNonSpecial(testClass.getType(), interfaceTwoPrint.makeRef(), false);

    SootMethod concreteImplInterfaceOne = fh.resolveConcreteDispatch(testClass, interfaceOnePrint);
    SootMethod concreteImplInterfaceTwo = fh.resolveConcreteDispatch(testClass, interfaceTwoPrint);

    Set<SootMethod> abstractImplInterfaceOne =
        fh.resolveAbstractDispatch(defaultInterfaceOne, interfaceOnePrint);

    boolean edgeMainToInterfaceTwoPrint = checkInEdges(interfaceTwoPrint, target);
    boolean edgeMainToInterfaceOnePrint = checkInEdges(interfaceOnePrint, target);

    final ReachableMethods reachableMethods = Scene.v().getReachableMethods();

    List<SootMethod> targetMethods =
        new ArrayList<SootMethod>() {
          {
            add(interfaceOnePrint);
            add(interfaceTwoPrint);
          }
        };

    Map<SootMethod, SootMethod> resolvedMethods =
        new HashMap<SootMethod, SootMethod>() {
          {
            put(interfaceTwoPrint, interfaceOneResolvedMethod);
            put(interfaceTwoPrint, interfaceTwoResolvedMethod);
          }
        };

    Map<SootMethod, SootMethod> concreteImplTrue =
        new HashMap<SootMethod, SootMethod>() {
          {
            put(interfaceTwoPrint, concreteImplInterfaceOne);
            put(interfaceTwoPrint, concreteImplInterfaceTwo);
          }
        };

    Map<SootMethod, SootMethod> concreteImplNotTrue =
        new HashMap<SootMethod, SootMethod>() {
          {
            put(interfaceOnePrint, concreteImplInterfaceOne);
            put(interfaceOnePrint, concreteImplInterfaceTwo);
          }
        };

    for (SootMethod targetMethod : targetMethods) {
      Assert.assertNotNull(targetMethod);
    }
    assertEquals(targetMethods.get(1), refMainMethod);
    assertEquals(targetMethods.get(1).getName(), ""print"");
    assertFalse(edgeMainToInterfaceOnePrint);
    assertTrue(edgeMainToInterfaceTwoPrint);
    assertTrue(reachableMethods.contains(targetMethods.get(1)));
    assertFalse(reachableMethods.contains(targetMethods.get(0)));
    for (Map.Entry<SootMethod, SootMethod> virtualResolvedMethod : resolvedMethods.entrySet()) {
      assertEquals(virtualResolvedMethod.getKey(), virtualResolvedMethod.getValue());
    }
    for (Map.Entry<SootMethod, SootMethod> concreteImpl : concreteImplTrue.entrySet()) {
      assertEquals(concreteImpl.getKey(), concreteImpl.getValue());
    }
    for (Map.Entry<SootMethod, SootMethod> concreteImpl : concreteImplNotTrue.entrySet()) {
      assertNotEquals(concreteImpl.getKey(), concreteImpl.getValue());
    }
    assertEquals(Sets.newHashSet(targetMethods.get(1)), abstractImplInterfaceOne);

    assertEquals(
        Sets.newHashSet(targetMethods.get(1)),
        fh.resolveAbstractDispatch(defaultInterfaceTwo, interfaceTwoPrint));
  }
",non-flaky,5
76718,quarkusio_quarkus,QuarkusCodestartBuildIT.testGradle,"    @ParameterizedTest
    public void testGradle(String language) throws Exception {
        final List<String> codestarts = getExtensionCodestarts();
        generateProjectRunTests(""gradle"", language, codestarts);
    }
",non-flaky,5
370,apache_hadoop,TestPermissionSymlinks.testRenameLinkTargetNotWritableFS,"  @Test(timeout = 5000)
  public void testRenameLinkTargetNotWritableFS() throws Exception {
    fs.setPermission(target, new FsPermission((short) 0555));
    fs.setPermission(targetParent, new FsPermission((short) 0555));
    doRenameLinkTargetNotWritableFS();
  }
",non-flaky,5
110200,Wikidata_wikidata-toolkit,MwLocalDumpFileTest.missingDumpFile,"	@Test
	public void missingDumpFile() throws IOException {
		MwLocalDumpFile df = new MwLocalDumpFile(
				""/non-existing-dump-file.json.gz"");
		assertFalse(df.isAvailable());
	}
",non-flaky,5
95653,togglz_togglz,ShiroUsersTest.testShiroWithSomeOtherUser,"    @Test
    public void testShiroWithSomeOtherUser() throws Exception {

        WebClient client = new WebClient();

        TextPage beforeLogin = client.getPage(url + ""features"");
        assertTrue(beforeLogin.getContent().contains(""DISABLED = false""));
        assertTrue(beforeLogin.getContent().contains(""ENABLED_FOR_ALL = true""));
        assertTrue(beforeLogin.getContent().contains(""ENABLED_FOR_CK = false""));

        TextPage loginPage = client.getPage(url + ""login?user=somebody"");
        assertTrue(loginPage.getContent().contains(""SUCCESS""));

        TextPage afterLogin = client.getPage(url + ""features"");
        assertTrue(afterLogin.getContent().contains(""DISABLED = false""));
        assertTrue(afterLogin.getContent().contains(""ENABLED_FOR_ALL = true""));
        assertTrue(afterLogin.getContent().contains(""ENABLED_FOR_CK = false""));

        TextPage logoutPage = client.getPage(url + ""logout"");
        assertTrue(logoutPage.getContent().contains(""SUCCESS""));

        TextPage afterLogout = client.getPage(url + ""features"");
        assertTrue(afterLogout.getContent().contains(""DISABLED = false""));
        assertTrue(afterLogout.getContent().contains(""ENABLED_FOR_ALL = true""));
        assertTrue(afterLogout.getContent().contains(""ENABLED_FOR_CK = false""));

    }
",non-flaky,5
77713,pholser_junit-quickcheck,PrimitivePropertyParameterTypesTest.shouldHold,"    @Test public void rightOpenEndedRangedPrimitiveFloat() {
        @Property public void shouldHold(@InRange(minFloat = -2.71F) float f) {
            assertThat(f, greaterThanOrEqualTo(-2.71F));
            assertThat(f, lessThan(RangeAttributes.maxFloat()));
        }
",non-flaky,5
20983,NationalSecurityAgency_timely,MetricsResponseTest.testGenerateHtmlWithIgnoredTags,"    @Test
    public void testGenerateHtmlWithIgnoredTags() throws Exception {
        Configuration cfg = TestConfiguration.createMinimalConfigurationForTest();
        cfg.getMetricsReportIgnoredTags().add(""instance"");
        MetaCache cache = MetaCacheFactory.getCache(cfg);
        cache.add(new Meta(""sys.cpu.user"", ""host"", ""localhost""));
        cache.add(new Meta(""sys.cpu.user"", ""instance"", ""0""));
        cache.add(new Meta(""sys.cpu.idle"", ""host"", ""localhost""));
        cache.add(new Meta(""sys.cpu.idle"", ""instance"", ""0""));
        TestMetricsResponse r = new TestMetricsResponse(cfg);
        String html = r.generateHtml().toString();
        Assert.assertTrue(html.contains(""<td>sys.cpu.idle</td>""));
        Assert.assertTrue(html.contains(""<td>host=localhost </td>""));
        Assert.assertTrue(html.contains(""<td>sys.cpu.user</td>""));
        Assert.assertTrue(html.contains(""<td>host=localhost </td>""));
    }
",non-flaky,5
113790,salesforce_reactive-grpc,CancellationPropagationIntegrationTest.clientCanCancelServerStreamExplicitly,"    @Test
    public void clientCanCancelServerStreamExplicitly() throws InterruptedException {
        TestService svc = new TestService();
        serverRule.getServiceRegistry().addService(svc);

        RxNumbersGrpc.RxNumbersStub stub = RxNumbersGrpc.newRxStub(serverRule.getChannel());
        TestSubscriber<NumberProto.Number> subscription = Single.just(Empty.getDefaultInstance())
                .as(stub::responsePressure)
                .doOnNext(number -> System.out.println(number.getNumber(0)))
                .doOnError(throwable -> System.out.println(throwable.getMessage()))
                .doOnComplete(() -> System.out.println(""Completed""))
                .doOnCancel(() -> System.out.println(""Client canceled""))
                .test();

        Thread.sleep(250);
        subscription.dispose();
        Thread.sleep(250);

        subscription.awaitTerminalEvent(3, TimeUnit.SECONDS);
        // Cancellation may or may not deliver the last generated message due to delays in the gRPC processing thread
        assertThat(Math.abs(subscription.valueCount() - svc.getLastNumberProduced())).isLessThanOrEqualTo(3);
        assertThat(svc.wasCanceled()).isTrue();

        errorRule.verifyNoError();
    }
",non-flaky,5
59577,looly_hutool,CronTest.customCronTest,"	@Test
	public void customCronTest() {
		CronUtil.schedule(""*/2 * * * * *"", (Task) () -> Console.log(""Task excuted.""));

		// æ¯æç§çº§å«å®æ¶ä»»å¡
		CronUtil.setMatchSecond(true);
		CronUtil.start();

		ThreadUtil.waitForDie();
		Console.log(""Exit."");
	}
",non-flaky,5
112097,apache_shardingsphere-elasticjob,OdevitySortByNameJobShardingStrategyTest.assertShardingByDesc,"    @Test
    public void assertShardingByDesc() {
        Map<JobInstance, List<Integer>> expected = new HashMap<>();
        expected.put(new JobInstance(""host2@-@0""), Collections.singletonList(0));
        expected.put(new JobInstance(""host1@-@0""), Collections.singletonList(1));
        expected.put(new JobInstance(""host0@-@0""), Collections.<Integer>emptyList());
        assertThat(odevitySortByNameJobShardingStrategy.sharding(Arrays.asList(new JobInstance(""host0@-@0""), new JobInstance(""host1@-@0""), new JobInstance(""host2@-@0"")), ""0"", 2), is(expected));
    }
",non-flaky,5
77490,dropwizard_dropwizard,ConfigurationMetadataTest.shouldDiscoverAllFields,"    @ParameterizedTest
    public void shouldDiscoverAllFields(String name, boolean isPrimitive,
                                        boolean isCollectionOrArrayType,
",non-flaky,5
26714,MundaneImmortal_pair-distribution-app,PairTest.testIsBuildPairTrue,"	@Test
	public void testIsBuildPairTrue()  {
		Pair subject = new Pair();
		
		subject.setBuildPair(true);
		
		assertThat(subject.isBuildPair(), is(true));
	}
",non-flaky,5
160421,ConsenSys_teku,BlockSelectorFactoryTest.blockRootSelector_shouldGetBlockByBlockRoot,"  @Test
  public void blockRootSelector_shouldGetBlockByBlockRoot()
      throws ExecutionException, InterruptedException {
    when(client.getBlockByBlockRoot(any()))
        .thenReturn(SafeFuture.completedFuture(Optional.of(block)));
    List<SignedBeaconBlock> blockList =
        blockSelectorFactory.forBlockRoot(block.getRoot()).getBlock().get();
    verify(client).getBlockByBlockRoot(block.getRoot());
    assertThat(blockList).containsExactly(block);
  }
",non-flaky,5
177164,line_armeria,SamlRequestIdManagerTest.shouldBeAcceptedBecauseOfLeeway,"    @Test
    public void shouldBeAcceptedBecauseOfLeeway() throws InterruptedException, UnsupportedEncodingException {
        final SamlRequestIdManager manager =
                SamlRequestIdManager.ofJwt(""me"", ""test"", 1, 1);

        final Instant started = Instant.now();
        final String id = manager.newId();
        assertThat(manager.validateId(id)).isTrue();

        await().pollDelay(Durations.TWO_HUNDRED_MILLISECONDS)
               .atMost(Durations.FIVE_SECONDS)
               .untilAsserted(() -> assertThat(manager.validateId(id)).isFalse());

        assertThat(java.time.Duration.between(started, Instant.now()).toMillis())
                .isGreaterThan(TimeUnit.SECONDS.toMillis(2));
    }
",non-flaky,5
112135,apache_shardingsphere-elasticjob,JobCoreConfigurationTest.assertBuildWhenCronIsNull,"    @Test(expected = IllegalArgumentException.class)
    public void assertBuildWhenCronIsNull() {
        JobCoreConfiguration.newBuilder(""test_job"", null, 3).build();
    }
",non-flaky,5
20928,NationalSecurityAgency_timely,TagListParserTest.testParseTagsWithCommas,"    @Test
    public void testParseTagsWithCommas() {

        try {
            String s = ""tag1=value1,tag2=3.4.3_(default\\,_Date\\,_Time)_"";
            new TagListParser().parse(s);
        } catch (Exception e) {
            Assert.fail(e.getMessage());
        }
    }
",non-flaky,5
134021,CorfuDB_CorfuDB,LogReplicationClientTest.testHandleMetadataResponse,"    @Test
    public void testHandleMetadataResponse() {
        final LogReplicationMetadataResponseMsg entry =  LogReplicationMetadataResponseMsg
                .newBuilder().build();
        final ResponseMsg response = ResponseMsg.newBuilder().setPayload(
                CorfuMessage.ResponsePayloadMsg.newBuilder()
                        .setLrMetadataResponse(entry).build()).build();

        ArgumentCaptor<PayloadCase> argument = ArgumentCaptor.forClass(PayloadCase.class);

        lrClient.receive(response);
        verify(handlerMap, atLeast(1)).get(argument.capture());
        Assertions.assertThat(argument.getValue()).isEqualTo(PayloadCase.LR_METADATA_RESPONSE);
    }
",non-flaky,5
78296,apache_beam,LateDataDroppingDoFnRunnerTest.testLateDataFilter,"  @Test
  public void testLateDataFilter() throws Exception {
    MetricsContainerImpl container = new MetricsContainerImpl(""any"");
    MetricsEnvironment.setCurrentContainer(container);
    when(mockTimerInternals.currentInputWatermarkTime()).thenReturn(new Instant(15L));

    LateDataFilter lateDataFilter =
        new LateDataFilter(WindowingStrategy.of(WINDOW_FN), mockTimerInternals);

    Iterable<WindowedValue<Integer>> actual =
        lateDataFilter.filter(
            ""a"",
            ImmutableList.of(
                createDatum(13, 13L),
                createDatum(5, 5L), // late element, earlier than 4L.
                createDatum(16, 16L),
                createDatum(18, 18L)));

    Iterable<WindowedValue<Integer>> expected =
        ImmutableList.of(createDatum(13, 13L), createDatum(16, 16L), createDatum(18, 18L));
    assertThat(expected, containsInAnyOrder(Iterables.toArray(actual, WindowedValue.class)));
    long droppedValues =
        container
            .getCounter(
                MetricName.named(
                    LateDataDroppingDoFnRunner.class,
                    LateDataDroppingDoFnRunner.DROPPED_DUE_TO_LATENESS))
            .getCumulative();
    assertEquals(1, droppedValues);
    // Ensure that reiterating returns the same results and doesn't increment the counter again.
    assertThat(expected, containsInAnyOrder(Iterables.toArray(actual, WindowedValue.class)));
    droppedValues =
        container
            .getCounter(
                MetricName.named(
                    LateDataDroppingDoFnRunner.class,
                    LateDataDroppingDoFnRunner.DROPPED_DUE_TO_LATENESS))
            .getCumulative();
    assertEquals(1, droppedValues);
  }
",non-flaky,5
179459,abel533_Mapper,FieldHelperTest.run,"    @Test
    public void test2() throws IntrospectionException {
        Thread t1 = new Thread(new Runnable() {
            @Override
            public void run() {
                FieldHelper.getFields(Country.class);
            }
",non-flaky,5
133910,cdancy_jenkins-rest,SystemApiLiveTest.testCancelQuietDown,"    @Test(dependsOnMethods = ""testAlreadyQuietDown"")
    public void testCancelQuietDown() {
        RequestStatus success = api().cancelQuietDown();
        assertNotNull(success);
        assertTrue(success.value());
    }
",non-flaky,5
98653,nutzam_nutz,ForwardViewTest.test_simple,"    @Test
    public void test_simple() {
        get(""/views/for?to=base"");
        assertEquals(200, resp.getStatus());
        assertEquals(getContextPath(), resp.getContent());
        
        get(""/views/for2?to=base"");
        assertEquals(200, resp.getStatus());
        assertEquals(getContextPath(), resp.getContent());

        get(""/views/for3?to=base"");
        assertEquals(200, resp.getStatus());
        assertEquals(getContextPath(), resp.getContent());
    }
",non-flaky,5
156174,soot-oss_soot,ModuleUtilTest.simpleRequiresTransitiveExport,"    @Test
    public void simpleRequiresTransitiveExport() {
        G.reset();
        ModuleScene moduleScene = ModuleScene.v();

        SootModuleInfo moduleA = new SootModuleInfo(SootModuleInfo.MODULE_INFO, ""moduleA"");
        moduleA.addExportedPackage(""de.upb"");
        moduleScene.addClassSilent(moduleA);

        SootModuleInfo moduleB = new SootModuleInfo(SootModuleInfo.MODULE_INFO, ""moduleB"");
        moduleB.getRequiredModules().put(moduleA, Modifier.REQUIRES_TRANSITIVE);
        moduleScene.addClassSilent(moduleB);


        SootModuleInfo moduleC = new SootModuleInfo(SootModuleInfo.MODULE_INFO, ""moduleC"");
        moduleC.getRequiredModules().put(moduleB, Modifier.REQUIRES_STATIC);
        moduleScene.addClassSilent(moduleC);

        ModuleUtil moduleUtil = ModuleUtil.v();
        String foundModule = moduleUtil.declaringModule(""de.upb.A"", ""moduleC"");
        Assert.assertEquals(""moduleA"", foundModule);

    }
",non-flaky,5
21006,NationalSecurityAgency_timely,TimelyTcpIT.testVersion,"    @Test
    public void testVersion() throws Exception {
        final TestServer m = new TestServer(conf);
        m.run();
        try (Socket sock = new Socket(""127.0.0.1"", 54321);
                PrintWriter writer = new PrintWriter(sock.getOutputStream(), true);) {
            writer.write(""version\n"");
            writer.flush();
            while (1 != m.getTcpRequests().getCount()) {
                Thread.sleep(5);
            }
            Assert.assertEquals(1, m.getTcpRequests().getResponses().size());
            Assert.assertEquals(VersionRequest.class, m.getTcpRequests().getResponses().get(0).getClass());
            VersionRequest v = (VersionRequest) m.getTcpRequests().getResponses().get(0);
            Assert.assertEquals(VersionRequest.VERSION, v.getVersion());
        } finally {
            m.shutdown();
        }
    }
",non-flaky,5
156471,apache_commons-lang,DateUtilsFragmentTest.testHoursOfMonthWithDate,"    @Test
    public void testHoursOfMonthWithDate() {
        final long testResult = DateUtils.getFragmentInHours(aDate, Calendar.MONTH);
        assertEquals(hours + (((days - 1) * DateUtils.MILLIS_PER_DAY))
                        / DateUtils.MILLIS_PER_HOUR,
                testResult);
    }
",non-flaky,5
177160,line_armeria,TokenBucketThrottlingStrategyTest.throttle4,"    @Test
    public void throttle4() throws Exception {
        final WebClient client = WebClient.of(serverRule.httpUri());
        final AggregatedHttpResponse response1 = client.get(""/http-throttle4"").aggregate().get();
        assertThat(response1.status()).isEqualTo(HttpStatus.OK);

        assertThat(response1.headers().contains(HttpHeaderNames.RETRY_AFTER)).isFalse();
        assertThat(response1.headers().contains(""RateLimit-Remaining"")).isFalse();
        assertThat(response1.headers().contains(""X-Rate-Limit-Remaining"")).isFalse();
        assertThat(response1.headers().contains(""X-RateLimit-Remaining"")).isFalse();
        assertThat(response1.headers().contains(""X-RateLimit-Reset"")).isFalse();

        final AggregatedHttpResponse response2 = client.get(""/http-throttle4"").aggregate().get();
        assertThat(response2.status()).isEqualTo(HttpStatus.SERVICE_UNAVAILABLE);

        assertThat(response2.headers().contains(HttpHeaderNames.RETRY_AFTER)).isTrue();
        final long retryAfter2 = Long.parseLong(response2.headers().get(HttpHeaderNames.RETRY_AFTER));
        assertThat(retryAfter2).isBetween(5L, 10L);
        assertThat(response2.headers().contains(""RateLimit-Remaining"")).isFalse();
        assertThat(response2.headers().contains(""X-Rate-Limit-Remaining"")).isFalse();
        assertThat(response2.headers().contains(""X-RateLimit-Remaining"")).isFalse();
        assertThat(response2.headers().contains(""X-RateLimit-Reset"")).isFalse();
    }
",non-flaky,5
178014,aosp-mirror_platform_frameworks_support,PlaybackControlGlueTest.testMediaPauseButtonOnPause,"    @Test
    public void testMediaPauseButtonOnPause() {
        PlaybackControlsRow row = new PlaybackControlsRow();
        glue.setControlsRow(row);
        SparseArrayObjectAdapter adapter = (SparseArrayObjectAdapter)
                row.getPrimaryActionsAdapter();
        PlaybackControlsRow.MultiAction playPause = (PlaybackControlsRow.MultiAction) adapter
                .lookup(PlaybackControlGlue.ACTION_PLAY_PAUSE);

        glue.onActionClicked(playPause);
        glue.onActionClicked(playPause);
        assertEquals(PlaybackControlGlue.PLAYBACK_SPEED_PAUSED, glue.getCurrentSpeedId());
        glue.onKey(null, KeyEvent.KEYCODE_MEDIA_PAUSE, new KeyEvent(KeyEvent.ACTION_DOWN,
                KeyEvent.KEYCODE_MEDIA_PAUSE));
        assertEquals(PlaybackControlGlue.PLAYBACK_SPEED_PAUSED, glue.getCurrentSpeedId());
    }
",non-flaky,5
135056,undertow-io_undertow,NodeStatusCodesTestCase.testCodeLookup,"    @Test
    public void testCodeLookup() {
        Assert.assertEquals(""OK"", StatusCodes.getReason(StatusCodes.OK));
    }
",non-flaky,5
162696,OpenAPITools_openapi-generator,ArrayTestTest.testArrayTest,"    @Test
    public void testArrayTest() {
        // TODO: test ArrayTest
    }
",non-flaky,5
98631,nutzam_nutz,UploadTest.test_upload,"    @Test
    public void test_upload() throws Throwable {
        Request req = Request.create(getBaseURL()+""/upload/image"",METHOD.POST);
        File f = File.createTempFile(""nutz"", ""data"");
        FileWriter fw = new FileWriter(f);
        fw.write(""abc"");
        fw.flush();
        fw.close();
        req.getParams().put(""file"", f);
        FilePostSender sender = new FilePostSender(req);
        Response resp = sender.send();
        assertEquals(""image&3"", resp.getContent());
    }
",non-flaky,5
21185,androidx_androidx,SimplePreferenceComparisonCallbackTest.testSelectableComparison,"    @Test
    public void testSelectableComparison() throws Exception {
        mPref1.setSelectable(true);
        mPref2.setSelectable(true);

        assertTrue(""Compare selectable"",
                mComparisonCallback.arePreferenceContentsTheSame(mPref1, mPref2));

        mPref2.setSelectable(false);

        assertFalse(""Compare selectable/unselectable"",
                mComparisonCallback.arePreferenceContentsTheSame(mPref1, mPref2));
        assertFalse(""Compare unselectable/selectable"",
                mComparisonCallback.arePreferenceContentsTheSame(mPref2, mPref1));

        mPref1.setSelectable(false);

        assertTrue(""Compare unselectable"",
                mComparisonCallback.arePreferenceContentsTheSame(mPref1, mPref2));
    }
",non-flaky,5
94778,ktuukkan_marine-api,AISMessage21ParserTest.getName,"    @Test
    public void getName() throws Exception {
        assertEquals(""THIS IS A TEST NAME1"", msg.getName());
    }
",non-flaky,5
176790,ctco_cukes,ContextInflaterTest.testInflateGroups_halfEmpty,"    @Test
    public void testInflateGroups_halfEmpty() throws Exception {
        doReturn(Optional.of(""foo"")).when(world).get(""foo"");
        String value = inflater.inflateGroups(""{(foo)} {(bar)}"", Sets.newHashSet(""foo"", ""bar""));
        assertThat(value, equalTo(""foo {(bar)}""));
    }
",non-flaky,5
156379,apache_commons-lang,ClassPathUtilsTest.testToFullyQualifiedNameNullPackageString,"    @Test
    public void testToFullyQualifiedNameNullPackageString() {
        assertThrows(NullPointerException.class,
                () -> ClassPathUtils.toFullyQualifiedName((Package) null, ""Test.properties""));
    }
",non-flaky,5
114037,aws_aws-sdk-java-v2,MyNettyFunctionTest.handleRequest_shouldReturnConstantValue,"    @Test
    public void handleRequest_shouldReturnConstantValue() {
        MyNettyFunction function = new MyNettyFunction();
        Object result = function.handleRequest(""echo"", null);
        assertEquals(""echo"", result);
    }
",non-flaky,5
91375,OpenLCB_OpenLCB_Java,BlueGoldExtendedEngineTest.put,"    @Test
    public void testCTor() {
        NodeID nodeID = new NodeID(new byte[]{1,2,3,4,5,6});
        ScatterGather sg = new ScatterGather();
        EventID eid = new EventID(new byte[]{1,2,3,4,5,6,7,8});
        Connection testConnection = new AbstractConnection(){
            public void put(Message msg, Connection node) {
            }
",non-flaky,5
77570,dropwizard_dropwizard,OptionalMessageBodyWriterTest.showWithQueryParam,"    @Test
        public Optional<String> showWithQueryParam(@QueryParam(""id"") String id) {
            return Optional.fromNullable(id);
        }
",non-flaky,5
133938,CorfuDB_CorfuDB,ManagementHandlerTest.testHandleHealFailure0,"    @Test
    public void testHandleHealFailure0() {
        testHandleHealFailure(false);
    }
",non-flaky,5
80,FasterXML_jackson-databind,TestGenerateJsonSchema.testUnwrapping,"@Test
public void testUnwrapping() throws Exception {
    JsonSchema jsonSchema = MAPPER.generateJsonSchema(UnwrappingRoot.class);
    String json = jsonSchema.toString().replaceAll(""\"""", ""'"");
    String EXP = ""{'type':'object',"" + (""'properties':{'age':{'type':'integer'},"" + ""'name.first':{'type':'string'},'name.last':{'type':'string'}}}"");
    assertEquals(EXP, json);
}",unordered collections,3
156177,soot-oss_soot,AbstractASMBackendTest.runTestAndCompareOutput,"  @Test
  public void runTestAndCompareOutput() throws IOException {
    runSoot();
    String comparisonOutput = createComparison();

    /*
     * Print output for comparison to file for debugging purposes.
     */
    File compareFile = new File(""sootOutput/"" + getTargetClass() + "".asm.compare"");
    PrintWriter ow = new PrintWriter(compareFile);
    ow.print(comparisonOutput);
    ow.flush();
    ow.close();

    File targetFile = new File(""sootOutput/"" + getTargetClass() + "".asm"");
    assertTrue(String.format(""Soot output file %s not found"", targetFile.getAbsolutePath()), targetFile.exists());
    Scanner sootOutput = new Scanner(targetFile);
    Scanner compareOutput = new Scanner(comparisonOutput);

    try {
      System.out.println(
          String.format(""Comparing files %s and %s..."", compareFile.getAbsolutePath(), targetFile.getAbsolutePath()));
      int line = 1;
      while (compareOutput.hasNextLine()) {
        // Soot-output must have as much lines as the compared output.
        assertTrue(String.format(""Too few lines in Soot-output for class %s! Current line: %d. Comparison output: %s"",
            getTargetClass(), line, comparisonOutput), sootOutput.hasNextLine());

        // Get both lines
        String compare = compareOutput.nextLine();

        String output = sootOutput.nextLine();

        // Compare lines
        assertTrue(String.format(""Expected line %s, but got %s in line %d for class %s"", compare.trim(), output.trim(), line,
            getTargetClass()), compare.equals(output));
        ++line;
      }

      assertFalse(String.format(""Too many lines in Soot-output for class %s!"", getTargetClass()), sootOutput.hasNextLine());
      System.out.println(""File comparison successful."");
    } finally {
      sootOutput.close();
      compareOutput.close();
    }
  }
",non-flaky,5
33753,alibaba_fastjson,FastJsonpHttpMessageConverter4Case2Test.test4,"    @Test
    public void test4() throws Exception {

        String jsonStr = ""{\""t\"":{\""id\"":123,\""name\"":\""ååå\""}}"";

        mockMvc.perform(
                (post(""/fastjson/test4"").characterEncoding(""UTF-8"").content(jsonStr)
                        .contentType(MediaType.APPLICATION_JSON))).andDo(print());
    }
",non-flaky,5
232,wildfly_wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993.testListWithContinuation,"@Test
public void testListWithContinuation() throws Exception {
    bindListWithContinuations();
    NamingEnumeration<NameClassPair> results = namingContext.list(new CompositeName(""comp""));
    checkListWithContinuationsResults(results);
    results = (NamingEnumeration<NameClassPair>) testActionPermission(JndiPermission.ACTION_LIST, Arrays.asList(
    new JndiPermission(""test"", ""list"")), namingContext, ""comp"");
    checkListWithContinuationsResults(results);
}",test order dependency,4
94604,square_okhttp,OkUrlFactoryTest.checkURLPermitted,"  @Test
  public void testURLFilterRedirect() throws Exception {
    MockWebServer cleartextServer = new MockWebServer();
    cleartextServer.enqueue(new MockResponse()
        .setBody(""Blocked!""));
    final URL blockedURL = cleartextServer.url(""/"").url();

    SslClient contextBuilder = SslClient.localhost();
    server.useHttps(contextBuilder.socketFactory, false);
    factory.setClient(factory.client().newBuilder()
        .sslSocketFactory(contextBuilder.socketFactory, contextBuilder.trustManager)
        .followSslRedirects(true)
        .build());
    factory.setUrlFilter(new URLFilter() {
      @Override
      public void checkURLPermitted(URL url) throws IOException {
        if (blockedURL.equals(url)) {
          throw new IOException(""Blocked"");
        }
      }
",non-flaky,5
156411,apache_commons-lang,FastDateFormatTest.testTimeDateDefaults,"    @Test
    public void testTimeDateDefaults() {
        assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, Locale.CANADA),
                FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getDefault(), Locale.CANADA));

        assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getTimeZone(""America/New_York"")),
                FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getTimeZone(""America/New_York""), Locale.getDefault()));

        assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM),
                FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getDefault(), Locale.getDefault()));
    }
",non-flaky,5
99702,apache_cassandra,DistributionSequenceTest.simpleSequence,"    @Test
    public void simpleSequence() throws Exception
    {
        Distribution dist = OptionDistribution.get(""seq(1..10)"").get();
        assertTrue(dist instanceof DistributionSequence);

        assertEquals(1, dist.minValue());
        assertEquals(10, dist.maxValue());
        assertEquals(5, dist.average());

        assertEquals(1, dist.inverseCumProb(0d));
        assertEquals(10, dist.inverseCumProb(1d));

        long min = dist.next();
        assertEquals(1,min);

        long last = min;
        for (int i=0; i<9; i++)
        {
            long next = dist.next();
            assertEquals(next, last+1); //increase by one each step
            last = next;
        }

        assertEquals(1, dist.next()); // wrapping
    }
",non-flaky,5
99769,apache_cassandra,RateBasedBackPressureTest.testBackPressureIsUpdatedOncePerWindowSize,"    @Test
    public void testBackPressureIsUpdatedOncePerWindowSize() throws Exception
    {
        long windowSize = 6000;
        TestTimeSource timeSource = new TestTimeSource();
        RateBasedBackPressure strategy = new RateBasedBackPressure(ImmutableMap.of(HIGH_RATIO, ""0.9"", FACTOR, ""10"", FLOW, ""FAST""), timeSource, windowSize);
        RateBasedBackPressureState state = strategy.newState(InetAddressAndPort.getLoopbackAddress());

        // Get initial time:
        long current = state.getLastIntervalAcquire();
        assertEquals(0, current);

        // Update incoming and outgoing rate:
        state.incomingRate.update(1);
        state.outgoingRate.update(1);

        // Move time ahead by window size:
        timeSource.sleep(windowSize, TimeUnit.MILLISECONDS);

        // Verify the timestamp changed:
        strategy.apply(Sets.newHashSet(state), 1, TimeUnit.SECONDS);
        current = state.getLastIntervalAcquire();
        assertEquals(timeSource.currentTimeMillis(), current);

        // Move time ahead by less than interval:
        long previous = current;
        timeSource.sleep(windowSize / 2, TimeUnit.MILLISECONDS);

        // Verify the last timestamp didn't change because below the window size:
        strategy.apply(Sets.newHashSet(state), 1, TimeUnit.SECONDS);
        current = state.getLastIntervalAcquire();
        assertEquals(previous, current);
    }
",non-flaky,5
99734,apache_cassandra,FQLReplayTest.testResultHandlerFailedQuery,"    @Test
    public void testResultHandlerFailedQuery() throws IOException
    {
        List<String> targetHosts = Lists.newArrayList(""hosta"", ""hostb"", ""hostc"", ""hostd"");
        File tmpDir = Files.createTempDirectory(""testresulthandler"").toFile();
        File queryDir = Files.createTempDirectory(""queries"").toFile();
        List<File> resultPaths = new ArrayList<>();
        targetHosts.forEach(host -> { File f = new File(tmpDir, host); f.mkdir(); resultPaths.add(f);});

        List<Pair<FQLQuery, List<ResultHandler.ComparableResultSet>>> resultSets = new ArrayList<>();
        Random random = new Random();
        for (int i = 0; i < 10; i++)
        {
            List<ResultHandler.ComparableResultSet> results = new ArrayList<>();
            List<ByteBuffer> values = Collections.singletonList(ByteBufferUtil.bytes(i * 50));
            for (int jj = 0; jj < targetHosts.size(); jj++)
            {
                results.add(createResultSet(5, 1 + random.nextInt(10), true));
            }
            results.set(0, StoredResultSet.failed(""testing abc""));
            results.set(3, StoredResultSet.failed(""testing abc""));
            FQLQuery q = new FQLQuery.Single(""abc""+i,
                                             3,
                                             QueryOptions.forInternalCalls(values),
                                             i * 1000,
                                             i * 12345,
                                             i * 54321,
                                             ""select * from xyz where id = ""+i,
                                             values);
            resultSets.add(Pair.create(q, results));
        }
        try (ResultHandler rh = new ResultHandler(targetHosts, resultPaths, queryDir))
        {
            for (int i = 0; i < resultSets.size(); i++)
                rh.handleResults(resultSets.get(i).left, resultSets.get(i).right);
        }
        for (int i = 0; i < targetHosts.size(); i++)
            compareWithFile(resultPaths, queryDir, resultSets, i);
    }
",non-flaky,5
114017,apache_struts,JSONReaderTest.testExponentialNumber,"    @Test
    public void testExponentialNumber() throws Exception {
        Object ret = reader.read(""5e-5"");
        assertNotNull(ret);
        assertEquals(Double.class, ret.getClass());
        assertEquals(5.0E-5, ret);
    }
",non-flaky,5
77557,dropwizard_dropwizard,ResourceExtensionWithGrizzlyTest.toResponse,"    @Test
        public Response toResponse(WebApplicationException e) {
            throw new UnsupportedOperationException();
        }
",non-flaky,5
70782,apache_kafka,ConnectorClientPolicyIntegrationTest.testCreateWithAllowedOverridesForAllPolicy,"    @Test
    public void testCreateWithAllowedOverridesForAllPolicy() throws Exception {
        // setup up props for the sink connector
        Map<String, String> props = basicConnectorConfig();
        props.put(ConnectorConfig.CONNECTOR_CLIENT_CONSUMER_OVERRIDES_PREFIX + CommonClientConfigs.CLIENT_ID_CONFIG, ""test"");
        assertPassCreateConnector(""All"", props);
    }
",non-flaky,5
78253,apache_beam,StateInternalsTest.testWatermarkEarliestState,"  @Test
  public void testWatermarkEarliestState() throws Exception {
    WatermarkHoldState value = underTest.state(NAMESPACE_1, WATERMARK_EARLIEST_ADDR);

    // State instances are cached, but depend on the namespace.
    assertEquals(value, underTest.state(NAMESPACE_1, WATERMARK_EARLIEST_ADDR));
    assertFalse(value.equals(underTest.state(NAMESPACE_2, WATERMARK_EARLIEST_ADDR)));

    assertThat(value.read(), Matchers.nullValue());
    value.add(new Instant(2000));
    assertThat(value.read(), equalTo(new Instant(2000)));

    value.add(new Instant(3000));
    assertThat(value.read(), equalTo(new Instant(2000)));

    value.add(new Instant(1000));
    assertThat(value.read(), equalTo(new Instant(1000)));

    value.clear();
    assertThat(value.read(), equalTo(null));
    assertThat(underTest.state(NAMESPACE_1, WATERMARK_EARLIEST_ADDR), equalTo(value));
  }
",non-flaky,5
26839,wildfly_wildfly,WritableServiceBasedNamingStoreTestCase.testUnBindNoOwner,"    @Test
    public void testUnBindNoOwner() throws Exception {
        try {
            store.unbind(new CompositeName(""test""));
            fail(""Should have failed with a read-only context exception"");
        } catch (UnsupportedOperationException expected) {
        }
    }
",non-flaky,5
118776,netty_netty,ByteBufUtilTest.testUtf8BytesWithNonSurrogatesNonAscii,"    @Test
    public void testUtf8BytesWithNonSurrogatesNonAscii() {
        final char nonAscii = (char) 0x81;
        final String s = ""a"" + nonAscii + ""b"";
        checkUtf8Bytes(s);
    }
",non-flaky,5
33834,apache_camel,Queue2QueueExample.clean,"    @BeforeEach
    public void clean() {
        template.sendBodyAndHeader(ironQueue1, ""fo"", IronMQConstants.OPERATION, IronMQConstants.CLEARQUEUE);
        template.sendBodyAndHeader(ironQueue2, ""fo"", IronMQConstants.OPERATION, IronMQConstants.CLEARQUEUE);
    }
",non-flaky,5
97746,vojtechhabarta_typescript-generator,UtilsTest.testReplaceExtension,"    @Test
    public void testReplaceExtension() {
        Assert.assertEquals(new File(""test.dir/test.js""), Utils.replaceExtension(new File(""test.dir/test""), "".js""));
        Assert.assertEquals(new File(""test.dir/test.1.js""), Utils.replaceExtension(new File(""test.dir/test.1.ts""), "".js""));
    }
",non-flaky,5
133948,CorfuDB_CorfuDB,BaseHandlerTest.testHandleSeal,"    @Test
    public void testHandleSeal() {
        ResponseMsg response = getResponseMsg(
                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.IGNORE),
                getSealResponseMsg()
        );

        baseHandler.handleMessage(response, mockChannelHandlerContext);

        // Verify that the correct request was completed (once) with the appropriate value,
        // and that we did not complete exceptionally.
        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));
        verify(mockClientRouter).completeRequest(response.getHeader().getRequestId(), true);
    }
",non-flaky,5
162447,testcontainers_testcontainers-java,HttpWaitStrategyTest.testWaitUntilReadyWithTimeoutAndWithManyStatusCodesAndLambda,"    @Test
    public void testWaitUntilReadyWithTimeoutAndWithManyStatusCodesAndLambda() {
        waitUntilReadyAndTimeout(startContainerWithCommand(createShellCommand(""401 UNAUTHORIZED"", GOOD_RESPONSE_BODY),
            createHttpWaitStrategy(ready)
                .forStatusCode(300)
                .forStatusCodeMatching(it -> it == 500)
        ));
    }
",non-flaky,5
26874,wildfly_wildfly,NamingContextTestCase.testLookupContextLink,"    @Test
    public void testLookupContextLink() throws Exception {
        final Name name = new CompositeName(""test/value"");
        namingStore.bind(name, ""testValue"");
        final Name linkName = new CompositeName(""link"");
        namingStore.bind(linkName, new LinkRef(""./test""));
        Object result = namingContext.lookup(""link/value"");
        assertEquals(""testValue"", result);

        //the same with security permissions
        result = testActionPermission(JndiPermission.ACTION_LOOKUP, Arrays.asList(new JndiPermission(""test"", ""lookup""),
                new JndiPermission(""test/value"", ""lookup"")), namingContext, ""link/value"");

        assertEquals(""testValue"", result);
    }
",non-flaky,5
133974,CorfuDB_CorfuDB,LogUnitHandlerTest.testFlushCache,"    @Test
    public void testFlushCache() {
        ResponseMsg response = getResponseMsg(
                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.CHECK),
                getFlushCacheResponseMsg()
        );

        logUnitHandler.handleMessage(response, mockChannelHandlerContext);
        // Verify that the correct request was completed (once) with the appropriate value,
        // and that we did not complete exceptionally.
        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));
        verify(mockClientRouter).completeRequest(response.getHeader().getRequestId(), true);
    }
",non-flaky,5
106649,Alluxio_alluxio,AlluxioFuseFileSystemTest.mkDirWithLengthLimit,"  @Test
  public void mkDirWithLengthLimit() throws Exception {
    long mode = 0755L;
    String c256 = String.join("""", Collections.nCopies(16, ""0123456789ABCDEF""));
    assertEquals(-ErrorCodes.ENAMETOOLONG(),
        mFuseFs.mkdir(""/foo/"" + c256, mode));
  }
",non-flaky,5
98303,spotify_docker-client,DockerRequestExceptionTest.testExceptionMessageWithResponseBody,"  @Test
  public void testExceptionMessageWithResponseBody() {
    final URI uri = URI.create(""http://example.com"");
    final String responseBody = ""uh oh"";
    final DockerRequestException ex =
        new DockerRequestException(""GET"", uri, 500, responseBody, new RuntimeException());

    assertEquals(ex.getMessage(), ""Request error: GET http://example.com: 500, body: uh oh"");
  }
",non-flaky,5
77675,pholser_junit-quickcheck,PrimitivePropertyParameterTypesTest.shouldHold,"    @Test public void primitiveBooleanWithValuesOf() {
        @Property public void shouldHold(@ValuesOf boolean b) {
            values.add(b);
        }
",non-flaky,5
26863,wildfly_wildfly,InitialContextTestCase.testRegisterURLSchemeHandler,"    @Test
    public void testRegisterURLSchemeHandler() throws Exception {
        InitialContext ictx = new InitialContext(null);

        try {
            ictx.lookup(""foobar:something"");
            Assert.fail(""Precondition: the foobar: scheme should not yet be registered"");
        } catch (NamingException ne) {
            // good
        }

        ObjectFactory tof = new TestObjectFactory();
        InitialContext.addUrlContextFactory(""foobar"", tof);
        String something = (String) ictx.lookup(""foobar:something"");
        Assert.assertTrue(""The object should now be provided by our TestObjectFactory"", something.startsWith(""TestObject:""));

        try {
            InitialContext.removeUrlContextFactory(""foobar:"", new TestObjectFactory());
            Assert.fail(""Should throw an IllegalArgumentException since the associated factory object doesn't match the registration"");
        } catch (IllegalArgumentException iae) {
            // good;
        }

        Assert.assertEquals(""The foobar: scheme should still be registered"", something, ictx.lookup(""foobar:something""));

        InitialContext.removeUrlContextFactory(""foobar"", tof);
        try {
            ictx.lookup(""foobar:something"");
            Assert.fail(""The foobar: scheme should not be registered any more"");
        } catch (NamingException ne) {
            // good
        }
    }
",non-flaky,5
43050,trinodb_trino,BaseConnectorTest.testMultipleRangesPredicate,"    @Test
    public void testMultipleRangesPredicate()
    {
        // List columns explicitly. Some connectors do not maintain column ordering.
        assertQuery("""" +
                ""SELECT orderkey, custkey, orderstatus, totalprice, orderdate, orderpriority, clerk, shippriority, comment "" +
                ""FROM orders "" +
                ""WHERE orderkey BETWEEN 10 AND 50"");
    }
",non-flaky,5
53183,cloudfoundry_uaa,MfaProviderTest.validateProviderActiveSetDefaultToTrue,"    @Test
    public void validateProviderActiveSetDefaultToTrue() {
        MfaProvider provider = createValidGoogleMfaProvider();
    }
",non-flaky,5
98316,spotify_docker-client,DefaultDockerClientUnitTest.testOneHeader,"  @Test
  public void testOneHeader() throws Exception {
    builder.header(""foo"", 1);

    final DefaultDockerClient dockerClient = new DefaultDockerClient(
        builder, clientBuilderSupplier);
    dockerClient.info();

    final ArgumentCaptor<String> keyArgument = ArgumentCaptor.forClass(String.class);
    final ArgumentCaptor<Object> valueArgument = ArgumentCaptor.forClass(Object.class);
    verify(builderMock, times(1)).header(keyArgument.capture(), valueArgument.capture());

    Assert.assertEquals(""foo"", keyArgument.getValue());
    Assert.assertEquals(1, valueArgument.getValue());
  }
",non-flaky,5
59634,looly_hutool,TokenizerUtilTest.hanlpTest,"	@Test
	public void hanlpTest() {
		TokenizerEngine engine = new HanLPEngine();
		Result result = engine.parse(text);
		String resultStr = IterUtil.join((Iterator<Word>)result, "" "");
		Assert.assertEquals(""è¿ ä¸¤ ä¸ª æ¹æ³ ç åºå« å¨äº è¿å å¼"", resultStr);
	}
",non-flaky,5
84570,apache_zookeeper,DistributedQueueTest.testTakeWait1,"    @Test
    public void testTakeWait1() throws Exception {
        String dir = ""/testTakeWait1"";
        final String testString = ""Hello World"";
        final int numClients = 1;
        final ZooKeeper[] clients = new ZooKeeper[numClients];
        final DistributedQueue[] queueHandles = new DistributedQueue[numClients];
        for (int i = 0; i < clients.length; i++) {
            clients[i] = createClient();
            queueHandles[i] = new DistributedQueue(clients[i], dir, null);
        }

        final byte[][] takeResult = new byte[1][];
        Thread takeThread = new Thread(() -> {
            try {
                takeResult[0] = queueHandles[0].take();
            } catch (KeeperException | InterruptedException ignore) {
                // no op
            }
        });
        takeThread.start();

        Thread.sleep(1000);
        Thread offerThread = new Thread(() -> {
            try {
                queueHandles[0].offer(testString.getBytes());
            } catch (KeeperException | InterruptedException ignore) {
                // no op
            }
        });
        offerThread.start();
        offerThread.join();

        takeThread.join();

        assertNotNull(takeResult[0]);
        assertEquals(new String(takeResult[0]), testString);
    }
",non-flaky,5
98323,spotify_docker-client,DockerHostTest.testDefaultPort,"  @Test
  public void testDefaultPort() throws Exception {
    assertThat(DockerHost.defaultPort(), equalTo(2375));
  }
",non-flaky,5
60934,apache_druid,BaseAveragerTest.testGetResult,"  @Test
  public void testGetResult()
  {
    BaseAverager<Integer, Integer> avg = new TestAverager(Integer.class, 3, ""test"", ""field"", 1);

    Assert.assertNull(avg.getResult());

    avg.addElement(Collections.singletonMap(""field"", 1), Collections.emptyMap());
    Assert.assertEquals(Integer.valueOf(1), avg.getResult());
  }
",non-flaky,5
133970,CorfuDB_CorfuDB,LogUnitHandlerTest.testGetTrimMark,"    @Test
    public void testGetTrimMark() {
        long sampleTrimMark = 5L;
        ResponseMsg response = getResponseMsg(
                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.CHECK),
                getTrimMarkResponseMsg(sampleTrimMark)
        );

        logUnitHandler.handleMessage(response, mockChannelHandlerContext);
        // Verify that the correct request was completed (once) with the appropriate value,
        // and that we did not complete exceptionally.
        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));
        verify(mockClientRouter).completeRequest(response.getHeader().getRequestId(), sampleTrimMark);
    }
",non-flaky,5
156141,soot-oss_soot,AbnormalTest.testMethodWithNoInstruction,"    @Test
    public void testMethodWithNoInstruction() {
        setup();
        Options.v().set_output_format(Options.output_format_jimple);
        runTest();
        setup();
        Options.v().set_output_format(Options.output_format_grimp);
        runTest();
        setup();
        Options.v().set_output_format(Options.output_format_baf);
        runTest();
        setup();
        Options.v().set_output_format(Options.output_format_dava);
        runTest();
        setup();
        Options.v().set_output_format(Options.output_format_shimp);
        runTest();
        setup();
        Options.v().set_output_format(Options.output_format_class);
        runTest();
    }
",non-flaky,5
319,apache_hadoop,TestRpcProgramNfs3.testIdempotent,"  @Test(timeout=10000)
  public void testIdempotent() {
    Object[][] procedures = {
        { Nfs3Constant.NFSPROC3.NULL, 1 },
        { Nfs3Constant.NFSPROC3.GETATTR, 1 },
        { Nfs3Constant.NFSPROC3.SETATTR, 1 },
        { Nfs3Constant.NFSPROC3.LOOKUP, 1 },
        { Nfs3Constant.NFSPROC3.ACCESS, 1 },
        { Nfs3Constant.NFSPROC3.READLINK, 1 },
        { Nfs3Constant.NFSPROC3.READ, 1 },
        { Nfs3Constant.NFSPROC3.WRITE, 1 },
        { Nfs3Constant.NFSPROC3.CREATE, 0 },
        { Nfs3Constant.NFSPROC3.MKDIR, 0 },
        { Nfs3Constant.NFSPROC3.SYMLINK, 0 },
        { Nfs3Constant.NFSPROC3.MKNOD, 0 },
        { Nfs3Constant.NFSPROC3.REMOVE, 0 },
        { Nfs3Constant.NFSPROC3.RMDIR, 0 },
        { Nfs3Constant.NFSPROC3.RENAME, 0 },
        { Nfs3Constant.NFSPROC3.LINK, 0 },
        { Nfs3Constant.NFSPROC3.READDIR, 1 },
        { Nfs3Constant.NFSPROC3.READDIRPLUS, 1 },
        { Nfs3Constant.NFSPROC3.FSSTAT, 1 },
        { Nfs3Constant.NFSPROC3.FSINFO, 1 },
        { Nfs3Constant.NFSPROC3.PATHCONF, 1 },
        { Nfs3Constant.NFSPROC3.COMMIT, 1 } };
    for (Object[] procedure : procedures) {
      boolean idempotent = procedure[1].equals(Integer.valueOf(1));
      Nfs3Constant.NFSPROC3 proc = (Nfs3Constant.NFSPROC3)procedure[0];
      if (idempotent) {
        Assert.assertTrue((""Procedure "" + proc + "" should be idempotent""),
            proc.isIdempotent());
      } else {
        Assert.assertFalse((""Procedure "" + proc + "" should be non-idempotent""),
            proc.isIdempotent());
      }
    }
  }
",non-flaky,5
135022,undertow-io_undertow,ResponseParserResumeTestCase.testMethodSplit,"    @Test
    public void testMethodSplit() {
        byte[] in = DATA.getBytes();
        for (int i = 0; i < in.length - 4; ++i) {
            try {
                testResume(i, in);
            } catch (Throwable e) {
                throw new RuntimeException(""Test failed at split "" + i, e);
            }
        }
    }
",non-flaky,5
110106,Wikidata_wikidata-toolkit,DumpProcessingOutputActionTest.testStdOutOutputArgumentsShort,"	@Test
	public void testStdOutOutputArgumentsShort() {
		String[] args = new String[] { ""-a"", ""json"", ""-s"" };
		DumpProcessingOutputAction action = getActionFromArgs(args);

		assertTrue(action.useStdOut);
	}
",non-flaky,5
113794,salesforce_reactive-grpc,CancellationPropagationIntegrationTest.serverCanCancelClientStreamImplicitlyBidi,"    @Test
    public void serverCanCancelClientStreamImplicitlyBidi() {
        TestService svc = new TestService();
        serverRule.getServiceRegistry().addService(svc);

        RxNumbersGrpc.RxNumbersStub stub = RxNumbersGrpc.newRxStub(serverRule.getChannel());

        svc.setExplicitCancel(false);

        AtomicBoolean requestWasCanceled = new AtomicBoolean(false);
        AtomicBoolean requestDidProduce = new AtomicBoolean(false);

        Flowable<NumberProto.Number> request = Flowable
                .fromIterable(IntStream.range(0, NUMBER_OF_STREAM_ELEMENTS)::iterator)
                .delay(10, TimeUnit.MILLISECONDS)
                .map(CancellationPropagationIntegrationTest::protoNum)
                .doOnNext(x -> {
                    requestDidProduce.set(true);
                    System.out.println(""Produced: "" + x.getNumber(0));
                })
                .doOnCancel(() -> {
                    requestWasCanceled.set(true);
                    System.out.println(""Client canceled"");
                });

        TestSubscriber<NumberProto.Number> observer = request
                .compose(stub::twoWayPressure)
                .doOnNext(number -> System.out.println(number.getNumber(0)))
                .doOnError(throwable -> System.out.println(throwable.getMessage()))
                .test();

        observer.awaitTerminalEvent(3, TimeUnit.SECONDS);
        observer.assertTerminated();
        assertThat(requestWasCanceled.get()).isTrue();
        assertThat(requestDidProduce.get()).isTrue();

        errorRule.verifyNoError();
    }
",non-flaky,5
122632,vespa-engine_vespa,YumPackageNameTest.unrecognizedArchitectureGetsGobbledUp,"    @Test
    public void unrecognizedArchitectureGetsGobbledUp() {
        YumPackageName packageName = YumPackageName.fromString(""docker-engine-selinux-1.12.6-1.el7.i486"");
        // This is not a great feature - please use YumPackageName.Builder instead.
        assertEquals(""1.el7.i486"", packageName.getRelease().get());
    }
",non-flaky,5
76941,Tencent_Firestorm,ShuffleReadClientImplTest.readTest1,"  @Test
  public void readTest1() throws Exception {
    String basePath = HDFS_URI + ""clientReadTest1"";
    HdfsShuffleWriteHandler writeHandler =
        new HdfsShuffleWriteHandler(""appId"", 0, 1, 1, basePath, ""test1"", conf);

    Map<Long, byte[]> expectedData = Maps.newHashMap();
    Roaring64NavigableMap blockIdBitmap = Roaring64NavigableMap.bitmapOf();
    Roaring64NavigableMap taskIdBitmap = Roaring64NavigableMap.bitmapOf(0);
    writeTestData(writeHandler, 2, 30, 0, expectedData,
        blockIdBitmap);

    ShuffleReadClientImpl readClient = new ShuffleReadClientImpl(StorageType.HDFS.name(), ""appId"", 0, 1, 100, 1,
        10, 1000, basePath, blockIdBitmap, taskIdBitmap, Lists.newArrayList(), new Configuration());

    TestUtils.validateResult(readClient, expectedData);
    readClient.checkProcessedBlockIds();
    readClient.close();

    blockIdBitmap.addLong(Constants.MAX_TASK_ATTEMPT_ID - 1);
    taskIdBitmap.addLong(Constants.MAX_TASK_ATTEMPT_ID - 1);
    readClient = new ShuffleReadClientImpl(StorageType.HDFS.name(), ""appId"", 0, 1, 100, 1,
        10, 1000, basePath, blockIdBitmap, taskIdBitmap, Lists.newArrayList(), new Configuration());
    TestUtils.validateResult(readClient, expectedData);
    try {
      // can't find all expected block id, data loss
      readClient.checkProcessedBlockIds();
      fail(EXPECTED_EXCEPTION_MESSAGE);
    } catch (Exception e) {
      assertTrue(e.getMessage().contains(""Blocks read inconsistent:""));
    } finally {
      readClient.close();
    }
  }
",non-flaky,5
135736,Netflix_Hystrix,HystrixCommandTestWithCustomConcurrencyStrategy.testCommandDoesNotRequireContextConcurrencyStrategyProvidesItContextSetUpCorrectly,"    @Test
    public void testCommandDoesNotRequireContextConcurrencyStrategyProvidesItContextSetUpCorrectly() {
        HystrixConcurrencyStrategy strategy = new CustomConcurrencyStrategy(true);
        HystrixPlugins.getInstance().registerConcurrencyStrategy(strategy);

        //context is set up properly
        HystrixRequestContext context = HystrixRequestContext.initializeContext();
        HystrixCommand<Boolean> cmd = new TestCommand(false, false);
        assertTrue(cmd.execute());
        printRequestLog();
        assertNotNull(HystrixRequestLog.getCurrentRequest());
        assertNotNull(HystrixRequestLog.getCurrentRequest(strategy));
        assertNull(cmd.currentRequestLog);
        context.shutdown();
    }
",non-flaky,5
33683,alibaba_fastjson,JSONScannerTest.checkDate6,"  @Test
  public void checkDate6() throws Throwable {

    // Arrange
    char y0 = '\u0000';
    char y1 = '\u0000';
    char y2 = '\u0000';
    char y3 = '\u0000';
    char M0 = '\u0000';
    char M1 = '\u0000';
    int d0 = 0;
    int d1 = 0;

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkDate"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""int""), Reflector.forName(""int""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, y0, y1, y2, y3, M0, M1, d0, d1);

    // Assert result
    Assert.assertEquals(false, retval);

  }
",non-flaky,5
95645,togglz_togglz,DeviceActivationStrategyTest.shouldBeActiveForDesktop,"    @Test
    public void shouldBeActiveForDesktop() throws Exception {
        String[] desktopOn = new String[]{""YES"", ""NO"", ""NO""};
        assertThat(requestFrom(NORMAL)).isActiveWithParams(desktopOn);
        cleanup();
        assertThat(requestFrom(TABLET)).isInactiveWithParams(desktopOn);
        cleanup();
        assertThat(requestFrom(MOBILE)).isInactiveWithParams(desktopOn);
        cleanup();
    }
",non-flaky,5
135797,Netflix_Hystrix,CumulativeCollapserEventCounterStreamTest.testCollapsedAndResponseFromCacheAgeOutOfCumulativeWindow,"    @Test
    public void testCollapsedAndResponseFromCacheAgeOutOfCumulativeWindow() {
        HystrixCollapserKey key = HystrixCollapserKey.Factory.asKey(""CumulativeCollapser-D"");
        stream = CumulativeCollapserEventCounterStream.getInstance(key, 10, 100);
        stream.startCachingStreamValuesIfUnstarted();

        final CountDownLatch latch = new CountDownLatch(1);
        stream.observe().take(30).subscribe(getSubscriber(latch));

        for (int i = 0; i < 3; i++) {
            CommandStreamTest.Collapser.from(key, i).observe();
            CommandStreamTest.Collapser.from(key, i).observe(); //same arg - should get a response from cache
            CommandStreamTest.Collapser.from(key, i).observe(); //same arg - should get a response from cache
        }

        try {
            assertTrue(latch.await(10000, TimeUnit.MILLISECONDS));
        } catch (InterruptedException ex) {
            fail(""Interrupted ex"");
        }
        assertEquals(HystrixEventType.Collapser.values().length, stream.getLatest().length);
        long[] expected = new long[HystrixEventType.Collapser.values().length];
        expected[HystrixEventType.Collapser.BATCH_EXECUTED.ordinal()] = 1;
        expected[HystrixEventType.Collapser.ADDED_TO_BATCH.ordinal()] = 3;
        expected[HystrixEventType.Collapser.RESPONSE_FROM_CACHE.ordinal()] = 6;
        System.out.println(""ReqLog : "" + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());
        assertArrayEquals(expected, stream.getLatest());
    }
",non-flaky,5
162441,testcontainers_testcontainers-java,ParameterizedDockerfileContainerTest.simpleTest,"    @Test
    public void simpleTest() throws Exception {
        final String release = container.execInContainer(""cat"", ""/etc/alpine-release"").getStdout();

        assertTrue(""/etc/alpine-release starts with "" + expectedVersion,
                release.startsWith(expectedVersion));
    }
",non-flaky,5
136454,kiwiproject_dropwizard-service-utilities,StandardExceptionMappersTest.setRegisterDefaultExceptionMappers,"        @Test
                public void setRegisterDefaultExceptionMappers(Boolean registerDefaultExceptionMappers) {
                    assertThat(registerDefaultExceptionMappers).isFalse();
                }
",non-flaky,5
178001,aosp-mirror_platform_frameworks_support,VideoFragmentTest.surfaceCreated,"    @Test
    public void setSurfaceViewCallbackAfterCreate() {
        Intent intent = new Intent();
        mActivity = activityTestRule.launchActivity(intent);

        VideoFragment fragment = (VideoFragment) mActivity.getFragmentManager().findFragmentById(
                R.id.video_fragment);
        assertNotNull(fragment);

        fragment.setSurfaceHolderCallback(new SurfaceHolder.Callback() {
            @Override
            public void surfaceCreated(SurfaceHolder holder) {
            }
",non-flaky,5
77623,pholser_junit-quickcheck,DurationPropertyParameterTypesTest.shouldHold,"    @Test public void rangedDuration() {
        @Property public void shouldHold(
            @InRange(
",non-flaky,5
77700,pholser_junit-quickcheck,PrimitivePropertyParameterTypesTest.shouldHold,"    @Test public void rangedPrimitiveDouble() {
        @Property public void shouldHold(@InRange(minDouble = -2.71, maxDouble = 3.14) double d) {
            assertThat(d, allOf(greaterThanOrEqualTo(-2.71), lessThan(3.14)));
        }
",non-flaky,5
98001,ReactiveX_RxJava,ReduceTests.reduceCovariance,"    @Test
    public void reduceCovariance() {
        // must type it to <Movie>
        Observable<Movie> horrorMovies = Observable.<Movie> from(new HorrorMovie());
        libraryFunctionActingOnMovieObservables(horrorMovies);
    }
",non-flaky,5
113764,salesforce_reactive-grpc,GrpcRetryTest.manyToOneRetryAfter,"    @Test
    public void manyToOneRetryAfter() {
        Mono<Integer> test = newThreeErrorFlux()
                .<Mono<Integer>>as(GrpcRetry.ManyToOne.retryAfter(Flux::single, Duration.ofMillis(10)));

        StepVerifier.create(test)
                .expectNext(0)
                .expectComplete()
                .verify(Duration.ofSeconds(1));
    }
",non-flaky,5
78331,apache_beam,ReduceFnRunnerTest.testWatermarkHoldAndLateData,"  @Test
  public void testWatermarkHoldAndLateData() throws Exception {
    MetricsContainerImpl container = new MetricsContainerImpl(""any"");
    MetricsEnvironment.setCurrentContainer(container);
    // Test handling of late data. Specifically, ensure the watermark hold is correct.
    Duration allowedLateness = Duration.millis(10);
    ReduceFnTester<Integer, Iterable<Integer>, IntervalWindow> tester =
        ReduceFnTester.nonCombining(
            FixedWindows.of(Duration.millis(10)),
            mockTriggerStateMachine,
            AccumulationMode.ACCUMULATING_FIRED_PANES,
            allowedLateness,
            ClosingBehavior.FIRE_IF_NON_EMPTY);

    // Input watermark -> null
    assertEquals(null, tester.getWatermarkHold());
    assertEquals(null, tester.getOutputWatermark());

    // All on time data, verify watermark hold.
    IntervalWindow expectedWindow = new IntervalWindow(new Instant(0), new Instant(10));
    injectElement(tester, 1);
    injectElement(tester, 3);
    assertEquals(new Instant(1), tester.getWatermarkHold());
    when(mockTriggerStateMachine.shouldFire(anyTriggerContext())).thenReturn(true);
    injectElement(tester, 2);
    List<WindowedValue<Iterable<Integer>>> output = tester.extractOutput();
    assertThat(
        output,
        contains(
            isSingleWindowedValue(
                containsInAnyOrder(1, 2, 3),
                equalTo(new Instant(1)),
                equalTo((BoundedWindow) expectedWindow))));
    assertThat(
        output.get(0).getPane(), equalTo(PaneInfo.createPane(true, false, Timing.EARLY, 0, -1)));

    // There is no end-of-window hold, but the timer set by the trigger holds the watermark
    assertThat(tester.getWatermarkHold(), nullValue());

    // Nothing dropped.
    long droppedElements =
        container
            .getCounter(
                MetricName.named(ReduceFnRunner.class, ReduceFnRunner.DROPPED_DUE_TO_CLOSED_WINDOW))
            .getCumulative();
    assertEquals(0, droppedElements);

    // Input watermark -> 4, output watermark should advance that far as well
    tester.advanceInputWatermark(new Instant(4));
    assertEquals(new Instant(4), tester.getOutputWatermark());

    // Some late, some on time. Verify that we only hold to the minimum of on-time.
    when(mockTriggerStateMachine.shouldFire(anyTriggerContext())).thenReturn(false);
    tester.advanceInputWatermark(new Instant(4));
    injectElement(tester, 2);
    injectElement(tester, 3);

    // Late data has arrived behind the _output_ watermark. The ReduceFnRunner sets a GC hold
    // since this data is not permitted to hold up the output watermark.
    assertThat(
        tester.getWatermarkHold(), equalTo(expectedWindow.maxTimestamp().plus(allowedLateness)));

    // Now data just ahead of the output watermark arrives and sets an earlier ""element"" hold
    injectElement(tester, 5);
    assertEquals(new Instant(5), tester.getWatermarkHold());

    when(mockTriggerStateMachine.shouldFire(anyTriggerContext())).thenReturn(true);
    injectElement(tester, 4);
    output = tester.extractOutput();
    assertThat(
        output,
        contains(
            isSingleWindowedValue(
                containsInAnyOrder(
                    1, 2, 3, // earlier firing
                    2, 3, 4, 5), // new elements
                4, // timestamp
                0, // window start
                10))); // window end
    assertThat(
        output.get(0).getPane(), equalTo(PaneInfo.createPane(false, false, Timing.EARLY, 1, -1)));

    // Since the element hold is cleared, there is no hold remaining
    assertThat(tester.getWatermarkHold(), nullValue());

    // All behind the output watermark -- hold is at GC time (if we imagine the
    // trigger sets a timer for ON_TIME firing, that is actually when they'll be emitted)
    when(mockTriggerStateMachine.shouldFire(anyTriggerContext())).thenReturn(false);
    tester.advanceInputWatermark(new Instant(8));
    injectElement(tester, 6);
    injectElement(tester, 5);
    assertThat(
        tester.getWatermarkHold(), equalTo(expectedWindow.maxTimestamp().plus(allowedLateness)));

    injectElement(tester, 4);

    // Fire the ON_TIME pane
    when(mockTriggerStateMachine.shouldFire(anyTriggerContext())).thenReturn(true);

    // To get an ON_TIME pane, we need the output watermark to be held back a little; this would
    // be done by way of the timers set by the trigger, which are mocked here
    tester.setAutoAdvanceOutputWatermark(false);

    tester.advanceInputWatermark(expectedWindow.maxTimestamp().plus(1));
    tester.fireTimer(expectedWindow, expectedWindow.maxTimestamp(), TimeDomain.EVENT_TIME);

    // Output time is end of the window, because all the new data was late, but the pane
    // is the ON_TIME pane.
    output = tester.extractOutput();
    assertThat(
        output,
        contains(
            isSingleWindowedValue(
                containsInAnyOrder(
                    1, 2, 3, // earlier firing
                    2, 3, 4, 5, // earlier firing
                    4, 5, 6), // new elements
                9, // timestamp
                0, // window start
                10))); // window end
    assertThat(
        output.get(0).getPane(), equalTo(PaneInfo.createPane(false, false, Timing.ON_TIME, 2, 0)));

    tester.setAutoAdvanceOutputWatermark(true);

    // This is ""pending"" at the time the watermark makes it way-late.
    // Because we're about to expire the window, we output it.
    when(mockTriggerStateMachine.shouldFire(anyTriggerContext())).thenReturn(false);
    injectElement(tester, 8);
    droppedElements =
        container
            .getCounter(
                MetricName.named(ReduceFnRunner.class, ReduceFnRunner.DROPPED_DUE_TO_CLOSED_WINDOW))
            .getCumulative();
    assertEquals(0, droppedElements);

    // Exceed the GC limit, triggering the last pane to be fired
    tester.advanceInputWatermark(new Instant(50));
    output = tester.extractOutput();
    // Output time is still end of the window, because the new data (8) was behind
    // the output watermark.
    assertThat(
        output,
        contains(
            isSingleWindowedValue(
                containsInAnyOrder(
                    1, 2, 3, // earlier firing
                    2, 3, 4, 5, // earlier firing
                    4, 5, 6, // earlier firing
                    8), // new element prior to window becoming expired
                9, // timestamp
                0, // window start
                10))); // window end
    assertThat(
        output.get(0).getPane(), equalTo(PaneInfo.createPane(false, true, Timing.LATE, 3, 1)));
    assertEquals(new Instant(50), tester.getOutputWatermark());
    assertEquals(null, tester.getWatermarkHold());

    // Late timers are ignored
    tester.fireTimer(
        new IntervalWindow(new Instant(0), new Instant(10)),
        new Instant(12),
        TimeDomain.EVENT_TIME);

    // And because we're past the end of window + allowed lateness, everything should be cleaned up.
    assertFalse(tester.isMarkedFinished(firstWindow));
    tester.assertHasOnlyGlobalAndFinishedSetsFor();
  }
",non-flaky,5
156154,soot-oss_soot,TypeBasedReflectionModelTest.constantBase,"    @Test
    public void constantBase() {
        genericLocalVsStringConstantTest(true);
    }
",non-flaky,5
104632,apache_pinot,OfflineClusterIntegrationTest.testUploadSameSegments,"  @Test
  public void testUploadSameSegments()
      throws Exception {
    String offlineTableName = TableNameBuilder.OFFLINE.tableNameWithType(getTableName());
    SegmentZKMetadata segmentZKMetadata = _helixResourceManager.getSegmentsZKMetadata(offlineTableName).get(0);
    String segmentName = segmentZKMetadata.getSegmentName();
    long crc = segmentZKMetadata.getCrc();
    // Creation time is when the segment gets created
    long creationTime = segmentZKMetadata.getCreationTime();
    // Push time is when the segment gets first pushed (new segment)
    long pushTime = segmentZKMetadata.getPushTime();
    // Refresh time is when the segment gets refreshed (existing segment)
    long refreshTime = segmentZKMetadata.getRefreshTime();

    uploadSegments(offlineTableName, _tarDir);
    for (SegmentZKMetadata segmentZKMetadataAfterUpload : _helixResourceManager
        .getSegmentsZKMetadata(offlineTableName)) {
      // Only check one segment
      if (segmentZKMetadataAfterUpload.getSegmentName().equals(segmentName)) {
        assertEquals(segmentZKMetadataAfterUpload.getCrc(), crc);
        assertEquals(segmentZKMetadataAfterUpload.getCreationTime(), creationTime);
        assertEquals(segmentZKMetadataAfterUpload.getPushTime(), pushTime);
        // Refresh time should change
        assertTrue(segmentZKMetadataAfterUpload.getRefreshTime() > refreshTime);
        return;
      }
    }
  }
",non-flaky,5
177200,line_armeria,SpringTomcatApplicationItTest.verifyTomcatVersion,"    @Test
    public void verifyTomcatVersion() {
        assertThat(TomcatVersion.major()).isEqualTo(tomcatMajorVersion);
        assertThat(TomcatVersion.minor()).isEqualTo(tomcatMinorVersion);
    }
",non-flaky,5
97972,ReactiveX_RxJava,ObservableTests.testFirstOfNone,"    @Test
    public void testFirstOfNone() {
        Observable<Integer> observable = Observable.empty();
        observable.first().subscribe(w);
        verify(w, never()).onNext(anyInt());
        verify(w, times(1)).onCompleted();
        verify(w, never()).onError(any(Throwable.class));
    }
",non-flaky,5
33898,apache_camel,FhirReadIT.testResourceByiUrl,"    @Test
    public void testResourceByiUrl() throws Exception {
        final Map<String, Object> headers = new HashMap<>();
        // parameter type is Class
        headers.put(""CamelFhir.resource"", Patient.class);
        // parameter type is org.hl7.fhir.instance.model.api.IIdType
        headers.put(""CamelFhir.iUrl"", new IdType(this.patient.getId()));

        Patient result = requestBodyAndHeaders(""direct://RESOURCE_BY_IURL"", null, headers);

        assertValidResponse(result);
    }
",non-flaky,5
162679,OpenAPITools_openapi-generator,UserApiTest.createUserTest,"    @Test
    public void createUserTest() {
        User body = null;
        //api.createUser(body);
        
        // TODO: test validations
        
        
    }
",non-flaky,5
313,apache_hadoop,TestRpcProgramNfs3.testReaddir,"  @Test(timeout = 60000)
  public void testReaddir() throws Exception {
    HdfsFileStatus status = nn.getRpcServer().getFileInfo(testdir);
    long dirId = status.getFileId();
    int namenodeId = Nfs3Utils.getNamenodeId(config);
    FileHandle handle = new FileHandle(dirId, namenodeId);
    XDR xdr_req = new XDR();
    READDIR3Request req = new READDIR3Request(handle, 0, 0, 100);
    req.serialize(xdr_req);

    // Attempt by an unpriviledged user should fail.
    READDIR3Response response1 = nfsd.readdir(xdr_req.asReadOnlyWrap(),
        securityHandlerUnpriviledged,
        new InetSocketAddress(""localhost"", 1234));
    assertEquals(""Incorrect return code:"", Nfs3Status.NFS3ERR_ACCES,
        response1.getStatus());

    // Attempt by a priviledged user should pass.
    READDIR3Response response2 = nfsd.readdir(xdr_req.asReadOnlyWrap(),
        securityHandler, new InetSocketAddress(""localhost"", 1234));
    assertEquals(""Incorrect return code:"", Nfs3Status.NFS3_OK,
        response2.getStatus());
  }
",non-flaky,5
78258,apache_beam,StateInternalsTest.testMapReadable,"  @Test
  public void testMapReadable() throws Exception {
    MapState<String, Integer> value = underTest.state(NAMESPACE_1, STRING_MAP_ADDR);

    // test iterable, should just return a iterable view of the values contained in this map.
    // The iterable is backed by the map, so changes to the map are reflected in the iterable.
    ReadableState<Iterable<String>> keys = value.keys();
    ReadableState<Iterable<Integer>> values = value.values();
    ReadableState<Iterable<Map.Entry<String, Integer>>> entries = value.entries();
    value.put(""A"", 1);
    assertFalse(Iterables.isEmpty(keys.read()));
    assertFalse(Iterables.isEmpty(values.read()));
    assertFalse(Iterables.isEmpty(entries.read()));

    // test get
    ReadableState<Integer> get = value.get(""B"");
    value.put(""B"", 2);
    assertNull(get.read());

    // test addIfAbsent
    value.putIfAbsent(""C"", 3);
    assertThat(value.get(""C"").read(), equalTo(3));
  }
",non-flaky,5
104706,apache_pinot,ServerStarterIntegrationTest.testCustomPort,"  @Test
  public void testCustomPort()
      throws Exception {
    String expectedHost = NetUtils.getHostAddress();
    String expectedInstanceId = PREFIX_OF_SERVER_INSTANCE + expectedHost + ""_"" + CUSTOM_PORT;

    Map<String, Object> properties = new HashMap<>();
    properties.put(KEY_OF_SERVER_NETTY_PORT, CUSTOM_PORT);

    verifyInstanceConfig(new PinotConfiguration(properties), expectedInstanceId, expectedHost, CUSTOM_PORT);
  }
",non-flaky,5
70805,apache_kafka,PluginUtilsTest.testPluginUrlsWithZips,"    @Test
    public void testPluginUrlsWithZips() throws Exception {
        createBasicDirectoryLayout();

        List<Path> expectedUrls = new ArrayList<>();
        expectedUrls.add(Files.createFile(pluginPath.resolve(""connectorA/my-sink.zip"")));
        expectedUrls.add(Files.createFile(pluginPath.resolve(""connectorB/a-source.zip"")));
        expectedUrls.add(Files.createFile(pluginPath.resolve(""transformC/simple-transform.zip"")));
        expectedUrls.add(Files.createFile(
                pluginPath.resolve(""transformC/deps/another-transform.zip""))
        );

        assertUrls(expectedUrls, PluginUtils.pluginUrls(pluginPath));
    }
",non-flaky,5
178022,aosp-mirror_platform_frameworks_support,ListRowDataAdapterTest.itemRangeChangedTest,"    @Test
    public void itemRangeChangedTest() {
        int itemCount = 4;
        ArrayObjectAdapter adapter = new ArrayObjectAdapter(presenterSelector);
        adapter.add(new SectionRow(""section 1""));
        for (int i = 0; i < itemCount; i++) {
            HeaderItem headerItem = new HeaderItem(i, ""header ""+i);
            adapter.add(new ListRow(headerItem, createListRowAdapter()));
        }

        ListRowDataAdapter listRowDataAdapter = new ListRowDataAdapter(adapter);
        listRowDataAdapter.registerObserver(dataObserver);
        SectionRow sectionRow = new SectionRow(""section 11"");
        adapter.replace(0, sectionRow);

        verify(dataObserver, times(1)).onItemRangeChanged(0, 1);
        assertEquals(5, listRowDataAdapter.size());
    }
",non-flaky,5
94736,ktuukkan_marine-api,Longitude28Test.defaultValueIsCorrect,"    @Test
    public void defaultValueIsCorrect() {
        assertTrue(Longitude28.isCorrect(181*60*10000));
    }
",non-flaky,5
177238,line_armeria,PropertiesEndpointGroupTest.illegalDefaultPort,"    @Test
    public void illegalDefaultPort() {
        assertThatThrownBy(() -> PropertiesEndpointGroup.builder(getClass().getClassLoader(),
                                                                 ""server-list.properties"", ""serverA.hosts"")
                                                        .defaultPort(0))
                .isInstanceOf(IllegalArgumentException.class)
                .hasMessageContaining(""defaultPort"");
    }
",non-flaky,5
53224,cloudfoundry_uaa,SamlLoginIT.testSimpleSamlLoginWithAddShadowUserOnLoginFalse,"    @Test
    public void testSimpleSamlLoginWithAddShadowUserOnLoginFalse() throws Exception {
        // Deleting marissa@test.org from simplesamlphp because previous SAML authentications automatically
        // create a UAA user with the email address as the username.
        deleteUser(SAML_ORIGIN, testAccounts.getEmail());

        IdentityProvider provider = IntegrationTestUtils.createIdentityProvider(SAML_ORIGIN, false, baseUrl, serverRunning);
        String clientId = ""app-addnew-false""+ new RandomValueStringGenerator().generate();
        String redirectUri = ""http://nosuchhostname:0/nosuchendpoint"";
        BaseClientDetails client = createClientAndSpecifyProvider(clientId, provider, redirectUri);

        String firstUrl = ""/oauth/authorize?""
                + ""client_id="" + clientId
                + ""&response_type=code""
                + ""&redirect_uri="" + URLEncoder.encode(redirectUri, ""UTF-8"");

        webDriver.get(baseUrl + firstUrl);
        webDriver.findElement(By.xpath(""//h2[contains(text(), 'Enter your username and password')]""));
        webDriver.findElement(By.name(""username"")).clear();
        webDriver.findElement(By.name(""username"")).sendKeys(testAccounts.getUserName());
        webDriver.findElement(By.name(""password"")).sendKeys(testAccounts.getPassword());
        webDriver.findElement(By.xpath(""//input[@value='Login']"")).click();

        // We need to verify the last request URL through the performance log because the redirect
        // URI does not exist. When the webDriver follows the non-existent redirect URI it receives a
        // connection refused error so webDriver.getCurrentURL() will remain as the SAML IdP URL.

        List<LogEntry> logEntries = webDriver.manage().logs().get(LogType.PERFORMANCE).getAll();
        List<String> logMessages = logEntries.stream().map(logEntry -> logEntry.getMessage()).collect(Collectors.toList());

        assertThat(logMessages, hasItem(containsString(redirectUri + ""?error=access_denied&error_description=SAML+user+does+not+exist.+You+can+correct+this+by+creating+a+shadow+user+for+the+SAML+user."")));
    }
",non-flaky,5
137108,spring-projects_spring-framework,AbstractAnnotationMetadataTests.hasMetaAnnotationWhenDoesNotMatchDirectOrMetaAnnotationReturnsFalse,"	@Test
	public void hasMetaAnnotationWhenDoesNotMatchDirectOrMetaAnnotationReturnsFalse() {
		assertThat(get(TestClass.class).hasMetaAnnotation(MetaAnnotation1.class.getName())).isFalse();
	}
",non-flaky,5
122557,vespa-engine_vespa,CommandLineTest.verifyDefaults,"    @Test
    public void verifyDefaults() {
        assertEquals(CommandLine.DEFAULT_TIMEOUT, commandLine.getTimeout());
        assertEquals(CommandLine.DEFAULT_MAX_OUTPUT_BYTES, commandLine.getMaxOutputBytes());
        assertEquals(CommandLine.DEFAULT_SIGTERM_GRACE_PERIOD, commandLine.getSigTermGracePeriod());
        assertEquals(CommandLine.DEFAULT_SIGKILL_GRACE_PERIOD, commandLine.getSigKillGracePeriod());
        assertEquals(0, commandLine.getArguments().size());
        assertEquals(Optional.empty(), commandLine.getOutputFile());
        assertEquals(StandardCharsets.UTF_8, commandLine.getOutputEncoding());
        assertTrue(commandLine.getRedirectStderrToStdoutInsteadOfDiscard());
        Predicate<Integer> defaultExitCodePredicate = commandLine.getSuccessfulExitCodePredicate();
        assertTrue(defaultExitCodePredicate.test(0));
        assertFalse(defaultExitCodePredicate.test(1));
    }
",non-flaky,5
77717,pholser_junit-quickcheck,PrimitivePropertyParameterTypesTest.shouldHold,"    @Test public void rightOpenEndedRangedWrapperFloat() {
        @Property public void shouldHold(@InRange(min = ""-2.71"") Float f) {
            assertThat(f, greaterThanOrEqualTo(-2.71F));
            assertThat(f, lessThan(RangeAttributes.maxFloat()));
        }
",non-flaky,5
110834,opensource4you_astraea,ArgumentUtilTest.testDurationConvert,"  @Test
  public void testDurationConvert() {
    FakeParameter param =
        ArgumentUtil.parseArgument(
            new FakeParameter(),
            new String[] {""--require"", ""require"", ""--durationConvert"", ""1000""});

    Assertions.assertEquals(Duration.ofSeconds(1000), param.durationConvert);
  }
",non-flaky,5
33723,alibaba_fastjson,TestIssue1763_2.testFixBug1763_2,"    @Test
    public void testFixBug1763_2() {
        BaseResult<PageResult<CouponResult>> data = JSON.parseObject(jsonStr, new TypeReference<BaseResult<PageResult<T>>>(clazz){}.getType());

        Assert.assertTrue(data.isSuccess());
        Assert.assertTrue(data.getContent().getList().size() == 2);
        Assert.assertTrue(data.getContent().getList().get(0).getId().equals(10000001L));
        Assert.assertEquals(CouponResult.class, data.getContent().getList().get(0).getClass());
    }
",non-flaky,5
20961,NationalSecurityAgency_timely,TagMatchingTest.testRegex1,"    @Test
    public void testRegex1() throws Exception {
        String tags = ""tag1=value1,tag2=value2,tag3=value3"";
        StringBuffer pattern = new StringBuffer();
        pattern.append(""(^|.*,)"");
        pattern.append(""tag2"");
        pattern.append(""="");
        pattern.append(""value2"");
        pattern.append(""(,.*|$)"");
        Pattern p = Pattern.compile(pattern.toString());
        assertTrue(p.matcher(tags).matches());
    }
",non-flaky,5
97752,vojtechhabarta_typescript-generator,ModelCompilerTest.testExclusionPattern,"    @Test
    public void testExclusionPattern() throws Exception {
        final Settings settings = TestUtils.settings();
        settings.setExcludeFilter(null, Arrays.asList(""**Direction""));
        final Type javaType = A.class.getField(""directions"").getGenericType();
        Assert.assertEquals(""{ [index: string]: any }[]"", TestUtils.compileType(settings, javaType).toString());
    }
",non-flaky,5
98643,nutzam_nutz,SimpleAdaptorTest.test_sql_date,"    @Test
    public void test_sql_date() {
    	resp = post(""/adaptor/sqldate"", ""checkDate=2016-01-29"");
        assertEquals(200, resp.getStatus());
        assertEquals(""2016-01-29"", resp.getContent());
    }
",non-flaky,5
84563,apache_zookeeper,DistributedQueueTest.testRemove1,"    @Test
    public void testRemove1() throws Exception {
        String dir = ""/testRemove1"";
        final int numClients = 1;
        ZooKeeper[] clients = new ZooKeeper[numClients];
        DistributedQueue[] queueHandles = new DistributedQueue[numClients];
        for (int i = 0; i < clients.length; i++) {
            clients[i] = createClient();
            queueHandles[i] = new DistributedQueue(clients[i], dir, null);
        }

        try {
            queueHandles[0].remove();
        } catch (NoSuchElementException e) {
            return;
        }

        fail();
    }
",non-flaky,5
98578,nutzam_nutz,SimpleSpeedTest.run,"    @Test
    public void test_speed() throws SecurityException, NoSuchMethodException {
        final SimpleSpeedTest z = new SimpleSpeedTest();
        final String elstr = ""num + (i - 1 + 2 - 3 + 4 - 5 + 6 - 7)-z.abc(i)"";
        final Context context = Lang.context(""{num:0}"");
        context.set(""z"", z);

        System.out.println(""\n"" + Strings.dup('=', 100));

        Stopwatch sw = Stopwatch.run(new Atom() {
            public void run() {
                int num = 0;
                for (int i = 0; i < max; i++)
                    num = num + (i - 1 + 2 - 3 + 4 - 5 + 6 - 7) - z.abc(i);
                //System.out.println(""Num: "" + num);
            }
",non-flaky,5
113776,salesforce_reactive-grpc,ReactiveBackpressureChunkerTest.requestOneGetsAChunk,"    @Test
    public void requestOneGetsAChunk() {
        int chunkSize = 16;
        ReactiveBackpressureChunker<Object> chunker = new ReactiveBackpressureChunker<Object>(chunkSize);
        UpstreamSubscription upstreamSubscription = new UpstreamSubscription();
        DownstreamSubscriber downstreamSubscriber = new DownstreamSubscriber();

        Subscriber<Object> chunkSubscriber = chunker.apply(downstreamSubscriber);
        chunkSubscriber.onSubscribe(upstreamSubscription);

        downstreamSubscriber.upstreamSubscription.request(1);
        assertThat(upstreamSubscription.lastRequested).isEqualTo(chunkSize);
    }
",non-flaky,5
26751,MundaneImmortal_pair-distribution-app,DevPairsCombinationsTest.testGetPastPairs,"	@Test
	public void testGetPastPairs() {
		List<Developer> standardDevs = getStandardDevs();
		DevPairCombinations devPairCombinations = new DevPairCombinations(getPairsListFromDevs(standardDevs));
		
		
		assertThat(devPairCombinations.getPastPairs(0), is(getPairsListFromDevs(standardDevs).get(0).getPairs().values().stream().collect(Collectors.toList())));
		assertThat(devPairCombinations.getPastPairs(1), is(getPairsListFromDevs(standardDevs).get(1).getPairs().values().stream().collect(Collectors.toList())));
		assertThat(devPairCombinations.getPastPairs(2), is(getPairsListFromDevs(standardDevs).get(2).getPairs().values().stream().collect(Collectors.toList())));
	}
",non-flaky,5
178008,aosp-mirror_platform_frameworks_support,PlaybackControlGlueTest.testFastForwardToMaxThenReset,"    @Test
    public void testFastForwardToMaxThenReset() {
        PlaybackControlsRow row = new PlaybackControlsRow();
        glue.setControlsRow(row);
        SparseArrayObjectAdapter adapter = (SparseArrayObjectAdapter)
                row.getPrimaryActionsAdapter();
        PlaybackControlsRow.MultiAction playPause = (PlaybackControlsRow.MultiAction) adapter
                .lookup(PlaybackControlGlue.ACTION_PLAY_PAUSE);
        PlaybackControlsRow.MultiAction fastForward = (PlaybackControlsRow.MultiAction) adapter
                .lookup(PlaybackControlGlue.ACTION_FAST_FORWARD);
        PlaybackControlsRow.MultiAction rewind = (PlaybackControlsRow.MultiAction) adapter
                .lookup(PlaybackControlGlue.ACTION_REWIND);

        assertFalse(glue.isMediaPlaying());
        glue.onActionClicked(playPause);
        assertTrue(glue.isMediaPlaying());
        assertEquals(PlaybackControlGlue.PLAYBACK_SPEED_NORMAL, glue.getCurrentSpeedId());
        assertEquals(0, fastForward.getIndex());
        assertEquals(0, rewind.getIndex());

        // click multiple times to reach PLAYBACK_SPEED_FAST_L2
        glue.onActionClicked(fastForward);
        assertEquals(PlaybackControlGlue.PLAYBACK_SPEED_FAST_L0, glue.getCurrentSpeedId());
        assertEquals(1, fastForward.getIndex());
        assertEquals(0, rewind.getIndex());
        glue.onActionClicked(fastForward);
        assertEquals(PlaybackControlGlue.PLAYBACK_SPEED_FAST_L1, glue.getCurrentSpeedId());
        assertEquals(2, fastForward.getIndex());
        assertEquals(0, rewind.getIndex());
        glue.onActionClicked(fastForward);
        assertEquals(PlaybackControlGlue.PLAYBACK_SPEED_FAST_L2, glue.getCurrentSpeedId());
        assertEquals(3, fastForward.getIndex());
        assertEquals(0, rewind.getIndex());
        glue.onActionClicked(fastForward);
        assertEquals(PlaybackControlGlue.PLAYBACK_SPEED_FAST_L2, glue.getCurrentSpeedId());
        assertEquals(3, fastForward.getIndex());
        assertEquals(0, rewind.getIndex());

        // press playPause again put it back to play
        glue.onActionClicked(playPause);
        assertEquals(PlaybackControlGlue.PLAYBACK_SPEED_NORMAL, glue.getCurrentSpeedId());
        assertEquals(0, fastForward.getIndex());
        assertEquals(0, rewind.getIndex());
    }
",non-flaky,5
86134,graylog2_graylog2-server,TemplateFieldValueProviderTest.templateDateFormatting,"    @Test
    public void templateDateFormatting() {
        final TestEvent event = new TestEvent();
        final EventWithContext eventWithContext = EventWithContext.create(event, newMessage(ImmutableMap.of(""timestamp"", DateTime.parse(""2019-07-02T12:21:00.123Z""))));

        final FieldValue fieldValue = newTemplate(""timestamp: ${source.timestamp}"").doGet(""test"", eventWithContext);

        assertThat(fieldValue.value()).isEqualTo(""timestamp: 2019-07-02T12:21:00.123Z"");
    }
",non-flaky,5
77656,pholser_junit-quickcheck,InstantPropertyParameterTypesTest.shouldHold,"    @Test public void instant() {
        @Property public void shouldHold(Instant i) {
        }
",non-flaky,5
112683,hwang-pku_ormlite-core,BaseDaoEnabledTest.testDelete,"	@Test
	public void testDelete() throws Exception {
		Dao<One, Integer> dao = createDao(One.class, true);
		One one = new One();
		String stuff1 = ""fewpfjewfew"";
		one.stuff = stuff1;
		assertEquals(1, dao.create(one));
		assertNotNull(dao.queryForId(one.id));
		assertEquals(1, one.delete());
		assertNull(dao.queryForId(one.id));
	}
",non-flaky,5
76674,quarkusio_quarkus,HibernateET.testImport,"    @Test
    public void testImport() {
        RestAssured.when().get(""/my-entity/1"").then().body(is(""MyEntity:TEST ENTITY""));
    }
",non-flaky,5
135803,Netflix_Hystrix,CumulativeCommandEventCounterStreamTest.testRequestFromCache,"    @Test
    public void testRequestFromCache() {
        HystrixCommandKey key = HystrixCommandKey.Factory.asKey(""CMD-CumulativeCounter-F"");
        stream = CumulativeCommandEventCounterStream.getInstance(key, 10, 500);
        stream.startCachingStreamValuesIfUnstarted();

        final CountDownLatch latch = new CountDownLatch(1);
        stream.observe().take(5).subscribe(getSubscriber(latch));

        Command cmd1 = Command.from(groupKey, key, HystrixEventType.SUCCESS, 20);
        Command cmd2 = Command.from(groupKey, key, HystrixEventType.RESPONSE_FROM_CACHE);
        Command cmd3 = Command.from(groupKey, key, HystrixEventType.RESPONSE_FROM_CACHE);

        cmd1.observe();
        cmd2.observe();
        cmd3.observe();

        try {
            assertTrue(latch.await(10000, TimeUnit.MILLISECONDS));
        } catch (InterruptedException ex) {
            fail(""Interrupted ex"");
        }

        System.out.println(""ReqLog : "" + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());
        assertEquals(HystrixEventType.values().length, stream.getLatest().length);
        long[] expected = new long[HystrixEventType.values().length];
        expected[HystrixEventType.SUCCESS.ordinal()] = 1;
        expected[HystrixEventType.RESPONSE_FROM_CACHE.ordinal()] = 2;
        assertArrayEquals(expected, stream.getLatest());
    }
",non-flaky,5
78271,apache_beam,StateNamespacesTest.testIntervalWindowPrefixing,"  @Test
  public void testIntervalWindowPrefixing() {
    StateNamespace window = StateNamespaces.window(intervalCoder, intervalWindow(1000, 87392));
    StateNamespace windowAndTrigger =
        StateNamespaces.windowAndTrigger(intervalCoder, intervalWindow(1000, 87392), 57);
    assertThat(windowAndTrigger.stringKey(), Matchers.startsWith(window.stringKey()));
    assertThat(
        StateNamespaces.global().stringKey(),
        Matchers.not(Matchers.startsWith(window.stringKey())));
  }
",non-flaky,5
162434,testcontainers_testcontainers-java,GenericContainerRuleTest.extraHostTest,"    @Test
    public void extraHostTest() throws IOException {
        BufferedReader br = getReaderForContainerPort80(alpineExtrahost);

        // read hosts file from container
        StringBuffer hosts = new StringBuffer();
        String line = br.readLine();
        while (line != null) {
            hosts.append(line);
            hosts.append(""\n"");
            line = br.readLine();
        }

        Matcher matcher = Pattern.compile(""^192.168.1.10\\s.*somehost"", Pattern.MULTILINE).matcher(hosts.toString());
        assertTrue(""The hosts file of container contains extra host"", matcher.find());
    }
",non-flaky,5
177961,aosp-mirror_platform_frameworks_support,FileProviderTest.testQueryProjectionOrder,"    @Test
    public void testQueryProjectionOrder() throws Exception {
        final File file = new File(mContext.getFilesDir(), TEST_FILE);
        final Uri uri = stageFileAndGetUri(file, TEST_DATA);

        // Verify that swapped order works
        Cursor cursor = mResolver.query(uri, new String[] {
                SIZE, DISPLAY_NAME }, null, null, null);
        try {
            assertEquals(1, cursor.getCount());
            cursor.moveToFirst();
            assertEquals(TEST_DATA.length, cursor.getLong(0));
            assertEquals(TEST_FILE, cursor.getString(1));
        } finally {
            cursor.close();
        }

        cursor = mResolver.query(uri, new String[] {
                DISPLAY_NAME, SIZE }, null, null, null);
        try {
            assertEquals(1, cursor.getCount());
            cursor.moveToFirst();
            assertEquals(TEST_FILE, cursor.getString(0));
            assertEquals(TEST_DATA.length, cursor.getLong(1));
        } finally {
            cursor.close();
        }
    }
",non-flaky,5
170500,eclipse_jetty.project,MBeanContainerTest.testGetMBeanServer,"    @Test
    public void testGetMBeanServer()
    {
        assertEquals(mbeanServer, mbeanContainer.getMBeanServer(), ""MBean server Instance must be equal"");
    }
",non-flaky,5
104690,apache_pinot,BasicAuthTlsRealtimeIntegrationTest.testSegmentUploadDownload,"  @Test
  public void testSegmentUploadDownload()
      throws Exception {
    final Request query = new Request(""sql"", ""SELECT count(*) FROM "" + getTableName());

    ResultSetGroup resultBeforeOffline = getPinotConnection().execute(query);
    Assert.assertTrue(resultBeforeOffline.getResultSet(0).getLong(0) > 0);

    // schedule offline segment generation
    Assert.assertNotNull(_controllerStarter.getTaskManager().scheduleTasks());

    // wait for offline segments
    JsonNode offlineSegments = TestUtils.waitForResult(() -> {
      JsonNode segmentSets = JsonUtils.stringToJsonNode(
          sendGetRequest(_controllerRequestURLBuilder.forSegmentListAPI(getTableName()), AUTH_HEADER));
      JsonNode currentOfflineSegments =
          new IntRange(0, segmentSets.size()).stream().map(segmentSets::get).filter(s -> s.has(""OFFLINE""))
              .map(s -> s.get(""OFFLINE"")).findFirst().get();
      Assert.assertFalse(currentOfflineSegments.isEmpty());
      return currentOfflineSegments;
    }, 30000);

    // Verify constant row count
    ResultSetGroup resultAfterOffline = getPinotConnection().execute(query);
    Assert.assertEquals(resultBeforeOffline.getResultSet(0).getLong(0), resultAfterOffline.getResultSet(0).getLong(0));

    // download and sanity-check size of offline segment(s)
    for (int i = 0; i < offlineSegments.size(); i++) {
      String segment = offlineSegments.get(i).asText();
      Assert.assertTrue(
          sendGetRequest(_controllerRequestURLBuilder.forSegmentDownload(getTableName(), segment), AUTH_HEADER).length()
              > 200000); // download segment
    }
  }
",non-flaky,5
97694,vojtechhabarta_typescript-generator,TaggedUnionsTest.testIdClass,"    @Test
    public void testIdClass() {
        final Settings settings = TestUtils.settings();
        final String output = new TypeScriptGenerator(settings).generateTypeScript(Input.from(Car.class));
        final String expected = (
                ""\n"" +
                ""interface Car {\n"" +
                ""    '@class': 'cz.habarta.typescript.generator.TaggedUnionsTest$DieselCar' | 'cz.habarta.typescript.generator.TaggedUnionsTest$ElectricCar';\n"" +
                ""    name: string;\n"" +
                ""}\n"" +
                ""\n"" +
                ""interface DieselCar extends Car {\n"" +
                ""    '@class': 'cz.habarta.typescript.generator.TaggedUnionsTest$DieselCar';\n"" +
                ""    fuelTankCapacityInLiters: number;\n"" +
                ""}\n"" +
                ""\n"" +
                ""interface ElectricCar extends Car {\n"" +
                ""    '@class': 'cz.habarta.typescript.generator.TaggedUnionsTest$ElectricCar';\n"" +
                ""    batteryCapacityInKWh: number;\n"" +
                ""}\n"" +
                ""\n"" +
                ""type CarUnion = DieselCar | ElectricCar;\n"" +
                """"
                ).replace('\'', '""');
        Assert.assertEquals(expected, output);
    }
",non-flaky,5
77551,dropwizard_dropwizard,DropwizardAppExtensionWithoutConfigTest.run,"    @Test
        public void run(Configuration configuration, Environment environment) throws Exception {
            environment.jersey().register(new TestResource());
        }
",non-flaky,5
176785,ctco_cukes,BaseContextHandlerTest.shouldExtractGroupsInPatternWithUnderscoreInName,"    @Test
    public void shouldExtractGroupsInPatternWithUnderscoreInName() throws Exception {
        List<String> groups = capturer.extractGroups(""{(hello_world)}"");
        assertThat(groups, contains(""hello_world""));
    }
",non-flaky,5
112138,apache_shardingsphere-elasticjob,LiteJobConfigurationTest.assertBuildRequiredProperties,"    @Test
    public void assertBuildRequiredProperties() {
        LiteJobConfiguration actual = LiteJobConfiguration.newBuilder(
                new SimpleJobConfiguration(JobCoreConfiguration.newBuilder(""test_job"", ""0/1 * * * * ?"", 3).build(), TestSimpleJob.class.getCanonicalName())).build();
        assertTrue(actual.isMonitorExecution());
        assertThat(actual.getMaxTimeDiffSeconds(), is(-1));
        assertThat(actual.getMonitorPort(), is(-1));
        assertThat(actual.getJobShardingStrategyClass(), is(""""));
        assertFalse(actual.isDisabled());
        assertFalse(actual.isOverwrite());
    }
",non-flaky,5
53143,cloudfoundry_uaa,SamlConfigTest.legacy_key_is_part_of_map,"    @Test
    public void legacy_key_is_part_of_map() {
        config.setPrivateKey(privateKey);
        config.setPrivateKeyPassword(passphrase);
        config.setCertificate(certificate);
        Map<String, SamlKey> keys = config.getKeys();
        assertEquals(1, keys.size());
        assertNotNull(keys.get(LEGACY_KEY_ID));
        assertEquals(privateKey, keys.get(LEGACY_KEY_ID).getKey());
        assertEquals(passphrase, keys.get(LEGACY_KEY_ID).getPassphrase());
        assertEquals(certificate, keys.get(LEGACY_KEY_ID).getCertificate());
    }
",non-flaky,5
251,apache_hadoop,TestUnderReplicatedBlocks.testSetrepIncWithUnderReplicatedBlocks,"@Test
public void testSetrepIncWithUnderReplicatedBlocks() throws Exception {
    Configuration conf = new HdfsConfiguration();
    final short REPLICATION_FACTOR = 2;
    final String FILE_NAME = ""/testFile"";
    final Path FILE_PATH = new Path(FILE_NAME);
    MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(REPLICATION_FACTOR + 1).build();
    try {
        final FileSystem fs = cluster.getFileSystem();
        DFSTestUtil.createFile(fs, FILE_PATH, 1L, REPLICATION_FACTOR, 1L);
        DFSTestUtil.waitReplication(fs, FILE_PATH, REPLICATION_FACTOR);
        final BlockManager bm = cluster.getNamesystem().getBlockManager();
        ExtendedBlock b = DFSTestUtil.getFirstBlock(fs, FILE_PATH);
        DatanodeDescriptor dn = bm.blocksMap.nodeIterator(b.getLocalBlock()).next();
        bm.addToInvalidates(b.getLocalBlock(), dn);
        bm.blocksMap.removeNode(b.getLocalBlock(), dn);
        FsShell shell = new FsShell(conf);
        assertEquals(0, shell.run(new String[]{ ""-setrep"", ""-w"", Integer.toString(1 + REPLICATION_FACTOR), FILE_NAME }));
    } finally {
        cluster.shutdown();
    }
}",async wait,0
287,apache_commons-lang,RecursiveToStringStyleTest.testPerson,"@Test
public void testPerson() {
    final Person p = new Person();
    p.name = ""John Doe"";
    p.age = 33;
    p.smoker = false;
    p.job = new Job();
    p.job.title = ""Manager"";
    final String pBaseStr = (p.getClass().getName() + ""@"") + Integer.toHexString(System.identityHashCode(p));
    final String pJobStr = (p.job.getClass().getName() + ""@"") + Integer.toHexString(System.identityHashCode(p.job));
    assertEquals(((pBaseStr + ""[name=John Doe,age=33,smoker=false,job="") + pJobStr) + ""[title=Manager]]"", new ReflectionToStringBuilder(p, new RecursiveToStringStyle()).toString());
}",unordered collections,3
113774,salesforce_reactive-grpc,CancellableStreamObserverTest.run,"    @Test
    public void statusRuntimeExceptionTriggersHandler() {
        ClientResponseObserver<Object, Object> delegate = mock(ClientResponseObserver.class);
        final AtomicBoolean called = new AtomicBoolean(false);

        CancellableStreamObserver<Object, Object> observer = new CancellableStreamObserver<Object, Object>(delegate, new Runnable() {
            @Override
            public void run() {
                called.set(true);
            }
",non-flaky,5
104635,apache_pinot,OfflineClusterIntegrationTest.testTimeFunc,"  @Test
  public void testTimeFunc()
      throws Exception {
    String sqlQuery = ""SELECT toDateTime(now(), 'yyyy-MM-dd z'), toDateTime(ago('PT1H'), 'yyyy-MM-dd z') FROM mytable"";
    JsonNode response = postSqlQuery(sqlQuery, _brokerBaseApiUrl);
    String todayStr = response.get(""resultTable"").get(""rows"").get(0).get(0).asText();
    String expectedTodayStr =
        Instant.now().atZone(ZoneId.of(""UTC"")).format(DateTimeFormatter.ofPattern(""yyyy-MM-dd z""));
    assertEquals(todayStr, expectedTodayStr);

    String oneHourAgoTodayStr = response.get(""resultTable"").get(""rows"").get(0).get(1).asText();
    String expectedOneHourAgoTodayStr = Instant.now().minus(Duration.parse(""PT1H"")).atZone(ZoneId.of(""UTC""))
        .format(DateTimeFormatter.ofPattern(""yyyy-MM-dd z""));
    assertEquals(oneHourAgoTodayStr, expectedOneHourAgoTodayStr);
  }
",non-flaky,5
84600,apache_zookeeper,BinaryInputArchiveTest.testReadStringForRecordsHavingLengthLessThanMaxAllowedSize,"  @Test
  public void testReadStringForRecordsHavingLengthLessThanMaxAllowedSize()
      throws IOException {
    int maxBufferSize = 2000;
    int extraMaxBufferSize = 1025;
    int recordSize = maxBufferSize + extraMaxBufferSize - 100;
    //Exception is not expected as record size is less than the allowed size
    BinaryInputArchive ia =
        getBinaryInputArchive(recordSize, maxBufferSize, extraMaxBufferSize);
    String s = ia.readString("""");
    assertNotNull(s);
    assertEquals(recordSize, s.getBytes().length);
  }
",non-flaky,5
70775,apache_kafka,RebalanceSourceConnectorsIntegrationTest.testAddingWorker,"    @Test
    public void testAddingWorker() throws Exception {
        // create test topic
        connect.kafka().createTopic(TOPIC_NAME, NUM_TOPIC_PARTITIONS);

        // setup up props for the source connector
        Map<String, String> props = new HashMap<>();
        props.put(CONNECTOR_CLASS_CONFIG, MonitorableSourceConnector.class.getSimpleName());
        props.put(TASKS_MAX_CONFIG, String.valueOf(NUM_TASKS));
        props.put(""throughput"", String.valueOf(1));
        props.put(""messages.per.poll"", String.valueOf(10));
        props.put(TOPIC_CONFIG, TOPIC_NAME);
        props.put(KEY_CONVERTER_CLASS_CONFIG, StringConverter.class.getName());
        props.put(VALUE_CONVERTER_CLASS_CONFIG, StringConverter.class.getName());

        waitForCondition(() -> this.assertWorkersUp(3),
                WORKER_SETUP_DURATION_MS, ""Connect workers did not start in time."");

        // start a source connector
        IntStream.range(0, 4).forEachOrdered(
            i -> {
                try {
                    connect.configureConnector(CONNECTOR_NAME + i, props);
                } catch (IOException e) {
                    throw new ConnectException(e);
                }
            });

        waitForCondition(() -> this.assertConnectorAndTasksRunning(CONNECTOR_NAME + 3, NUM_TASKS).orElse(false),
                CONNECTOR_SETUP_DURATION_MS, ""Connector tasks did not start in time."");

        connect.addWorker();

        waitForCondition(() -> this.assertWorkersUp(4),
                WORKER_SETUP_DURATION_MS, ""Connect workers did not start in time."");

        waitForCondition(() -> this.assertConnectorAndTasksRunning(CONNECTOR_NAME + 3, NUM_TASKS).orElse(false),
                CONNECTOR_SETUP_DURATION_MS, ""Connector tasks did not start in time."");

        waitForCondition(this::assertConnectorAndTasksAreUnique,
                WORKER_SETUP_DURATION_MS, ""Connect and tasks are imbalanced between the workers."");
    }
",non-flaky,5
118734,netty_netty,EmptyByteBufTest.testNioBuffer,"    @Test
    public void testNioBuffer() {
        EmptyByteBuf empty = new EmptyByteBuf(UnpooledByteBufAllocator.DEFAULT);
        assertThat(empty.nioBufferCount(), is(1));
        assertThat(empty.nioBuffer().position(), is(0));
        assertThat(empty.nioBuffer().limit(), is(0));
        assertThat(empty.nioBuffer(), is(sameInstance(empty.nioBuffer())));
        assertThat(empty.nioBuffer(), is(sameInstance(empty.internalNioBuffer(empty.readerIndex(), 0))));
    }
",non-flaky,5
175742,GoogleCloudPlatform_google-cloud-eclipse,MessagesTest.testCloudSdkNotConfigured,"  @Test
  public void testCloudSdkNotConfigured() {
    Assert.assertEquals(""Deploy failed."", Messages.getString(""deploy.failed.error.message""));
  }
",non-flaky,5
76764,quarkusio_quarkus,PackageIT.testQuarkusPackageOutputDirectory,"    @Test
    public void testQuarkusPackageOutputDirectory()
            throws MavenInvocationException, IOException, InterruptedException {
        testDir = initProject(""projects/quarkus.package.output-directory"");

        running = new RunningInvoker(testDir, false);
        // we do want to run the tests too
        final MavenProcessInvocationResult result = running.execute(Collections.singletonList(""package""),
                Collections.emptyMap());

        assertThat(result.getProcess().waitFor()).isEqualTo(0);

        File targetDir = getTargetDir();
        List<File> jars = getFilesEndingWith(targetDir, "".jar"");
        assertThat(jars).hasSize(1);

        targetDir = new File(targetDir, ""custom-output-dir"");
        assertThat(targetDir).exists();
        jars = getFilesEndingWith(targetDir, "".jar"");
        assertThat(jars).hasSize(1);
    }
",non-flaky,5
355,apache_hadoop,TestNetworkTopology.testChooseRandomExcludeAllNodes,"  @Test
  public void testChooseRandomExcludeAllNodes() {
    String scope = ""~"" + NodeBase.getPath(dataNodes[0]);
    Set<Node> excludedNodes = new HashSet<>();
    for (int i = 0; i < dataNodes.length; i++) {
      excludedNodes.add(dataNodes[i]);
    }
    Map<Node, Integer> frequency = pickNodesAtRandom(100, scope, excludedNodes);
    for (Node key : dataNodes) {
      // all nodes except the first should be more than zero
      assertTrue(frequency.get(key) == 0);
    }
  }
",non-flaky,5
170459,eclipse_jetty.project,ObjectMBeanTest.testDerivedAttributes,"    @Test
    public void testDerivedAttributes() throws Exception
    {
        Derived derived = new Derived();
        Managed managed = derived.getManagedInstance();
        ObjectMBean derivedMBean = (ObjectMBean)container.mbeanFor(derived);
        ObjectMBean managedMBean = (ObjectMBean)container.mbeanFor(managed);

        container.beanAdded(null, derived);
        container.beanAdded(null, managed);

        MBeanInfo derivedInfo = derivedMBean.getMBeanInfo();
        assertNotNull(derivedInfo);
        MBeanInfo managedInfo = managedMBean.getMBeanInfo();
        assertNotNull(managedInfo);

        assertEquals(""com.acme.Derived"", derivedInfo.getClassName(), ""name does not match"");
        assertEquals(""Test the mbean stuff"", derivedInfo.getDescription(), ""description does not match"");
        assertEquals(5, derivedInfo.getAttributes().length, ""attribute count does not match"");
        assertEquals(""Full Name"", derivedMBean.getAttribute(""fname""), ""attribute values does not match"");

        derivedMBean.setAttribute(new Attribute(""fname"", ""Fuller Name""));
        assertEquals(""Fuller Name"", derivedMBean.getAttribute(""fname""), ""set attribute value does not match"");
        assertEquals(""goop"", derivedMBean.getAttribute(""goop""), ""proxy attribute values do not match"");
    }
",non-flaky,5
162751,OpenAPITools_openapi-generator,AdditionalPropertiesBooleanTest.nameTest,"    @Test
    public void nameTest() {
        // TODO: test name
    }
",non-flaky,5
21008,NationalSecurityAgency_timely,TimelyTcpIT.testPutMultiple,"    @Test
    public void testPutMultiple() throws Exception {

        final TestServer m = new TestServer(conf);
        m.run();
        try (Socket sock = new Socket(""127.0.0.1"", 54321);
                PrintWriter writer = new PrintWriter(sock.getOutputStream(), true)) {
            // @formatter:off
            writer.write(""put sys.cpu.user "" + TEST_TIME + "" 1.0 tag1=value1 tag2=value2\n""
                       + ""put sys.cpu.idle "" + (TEST_TIME + 1) + "" 1.0 tag3=value3 tag4=value4\n"");
            writer.flush();
            while (2 != m.getTcpRequests().getCount()) {
                Thread.sleep(5);
            }
            Assert.assertEquals(2, m.getTcpRequests().getResponses().size());
            Assert.assertEquals(MetricRequest.class, m.getTcpRequests().getResponses().get(0).getClass());
            MetricRequest actual = (MetricRequest) m.getTcpRequests().getResponses().get(0);
            MetricRequest expected = new MetricRequest(
                    Metric.newBuilder()
                            .name(""sys.cpu.user"")
                            .value(TEST_TIME, 1.0D)
                            .tag(new Tag(""tag1"", ""value1""))
                            .tag(new Tag(""tag2"", ""value2""))
                            .build()
            );
            Assert.assertEquals(expected, actual);

            Assert.assertEquals(MetricRequest.class, m.getTcpRequests().getResponses().get(1).getClass());
            actual = (MetricRequest) m.getTcpRequests().getResponses().get(1);
            expected = new MetricRequest(
                    Metric.newBuilder()
                        .name(""sys.cpu.idle"")
                        .value(TEST_TIME + 1, 1.0D)
                        .tag(new Tag(""tag3"", ""value3""))
                        .tag(new Tag(""tag4"", ""value4""))
                        .build()
            );
            // @formatter:on
            Assert.assertEquals(expected, actual);

        } finally {
            m.shutdown();
        }
    }
",non-flaky,5
156404,apache_commons-lang,FastDateFormatTest.test_changeDefault_Locale_DateInstance,"    @Test
    public void test_changeDefault_Locale_DateInstance() {
        final FastDateFormat format1 = FastDateFormat.getDateInstance(FastDateFormat.FULL, Locale.GERMANY);
        final FastDateFormat format2 = FastDateFormat.getDateInstance(FastDateFormat.FULL);
        Locale.setDefault(Locale.GERMANY);
        final FastDateFormat format3 = FastDateFormat.getDateInstance(FastDateFormat.FULL);

        assertSame(Locale.GERMANY, format1.getLocale());
        assertEquals(Locale.US, format2.getLocale());
        assertSame(Locale.GERMANY, format3.getLocale());
        assertNotSame(format1, format2);
        assertNotSame(format2, format3);
    }
",non-flaky,5
26867,wildfly_wildfly,NamingEventCoordinatorTestCase.testFireAllEvent,"    @Test
    public void testFireAllEvent() throws Exception {
        final NamingEventCoordinator coordinator = new NamingEventCoordinator();

        final CollectingListener objectListener = new CollectingListener(1);
        coordinator.addListener(""test/path"", EventContext.OBJECT_SCOPE, objectListener);
        final CollectingListener subtreeListener = new CollectingListener(1);
        coordinator.addListener(""test"", EventContext.SUBTREE_SCOPE, subtreeListener);
        final CollectingListener oneLevelListener = new CollectingListener(1);
        coordinator.addListener(""test"", EventContext.ONELEVEL_SCOPE, oneLevelListener);

        coordinator.fireEvent(context, new CompositeName(""test/path""), null, null, NamingEvent.OBJECT_ADDED, ""bind"", EventContext.OBJECT_SCOPE, EventContext.ONELEVEL_SCOPE, EventContext.SUBTREE_SCOPE);

        objectListener.latch.await(1, TimeUnit.SECONDS);
        oneLevelListener.latch.await(1, TimeUnit.SECONDS);
        subtreeListener.latch.await(1, TimeUnit.SECONDS);

        assertEquals(1, objectListener.capturedEvents.size());
        assertEquals(1, subtreeListener.capturedEvents.size());
        assertEquals(1, oneLevelListener.capturedEvents.size());
    }
",non-flaky,5
118695,netty_netty,SmtpRequestEncoderTest.testEncodeRcpt,"    @Test
    public void testEncodeRcpt() {
        testEncode(SmtpRequests.rcpt(""me@netty.io""), ""RCPT TO:<me@netty.io>\r\n"");
    }
",non-flaky,5
176806,ctco_cukes,HttpAssertionFacadeImplTest.shouldReturnBodyWhenEnabledAndNoMax,"    @Test
    public void shouldReturnBodyWhenEnabledAndNoMax() {
        String body = ""{\n"" +
            ""  \""error\"": \""not found\""\n"" +
            ""}"";

        HttpResponseFacade mock = mock(HttpResponseFacade.class);
        when(mock.response()).thenReturn(generateResponse(
            ""application/json"",
            404,
            body.getBytes()));

        ((HttpAssertionFacadeImpl) facade).facade = mock;
        world.put(ASSERTS_STATUS_CODE_DISPLAY_BODY, ""true"");

        validateException(
            200,
            ""1 expectation failed.\n"" +
                ""Expected status code \""200\"" but was \""404\"" with body:\n"" +
                ""\""\""\""\n"" +
                body +
                ""\n\""\""\"".\n"");
    }
",non-flaky,5
110178,Wikidata_wikidata-toolkit,ValueRdfConverterTest.testWriteTimeValue,"	@Test
	public void testWriteTimeValue() throws RDFHandlerException,
			RDFParseException, IOException {
		TimeValueConverter valueConverter = new TimeValueConverter(
				this.rdfWriter, this.propertyRegister, this.rdfConversionBuffer);

		TimeValue value = objectFactory.getTimeValue(2008, (byte) 1, (byte) 1,
				(byte) 0, (byte) 0, (byte) 0, (byte) 9, 0, 0, 0,
				""http://www.wikidata.org/entity/Q1985727"");
		PropertyIdValue propertyIdValue = objectFactory.getPropertyIdValue(
				""P569"", ""http://www.wikidata.org/entity/"");
		Value valueURI = valueConverter.getRdfValue(value, propertyIdValue,
				false);
		valueConverter.writeValue(value, (Resource) valueURI);
		this.rdfWriter.finish();
		Model model = RdfTestHelpers.parseRdf(this.out.toString());
		assertEquals(model, RdfTestHelpers.parseRdf(RdfTestHelpers
				.getResourceFromFile(""TimeValue.rdf"")));
	}
",non-flaky,5
137153,spring-projects_spring-framework,MergedAnnotationsTests.handleParameterized,"	@TestPropertySource(locations = ""test.properties"")
		public void handleParameterized(T t) {
		}
",non-flaky,5
76988,Tencent_Firestorm,ShuffleWithRssClientTest.rpcFailTest,"  @Test
  public void rpcFailTest() throws Exception {
    String testAppId = ""rpcFailTest"";
    shuffleWriteClientImpl.registerShuffle(shuffleServerInfo1,
        testAppId, 0, Lists.newArrayList(new PartitionRange(0, 0)));
    Map<Long, byte[]> expectedData = Maps.newHashMap();
    Roaring64NavigableMap blockIdBitmap = Roaring64NavigableMap.bitmapOf();

    // simulator a failed server
    ShuffleServerInfo fakeShuffleServerInfo =
        new ShuffleServerInfo(""127.0.0.1-20001"", shuffleServers.get(0).getIp(), SHUFFLE_SERVER_PORT + 100);
    List<ShuffleBlockInfo> blocks = createShuffleBlockList(
        0, 0, 0, 3, 25, blockIdBitmap,
        expectedData, Lists.newArrayList(shuffleServerInfo1, fakeShuffleServerInfo));
    SendShuffleDataResult result = shuffleWriteClientImpl.sendShuffleData(testAppId, blocks);
    Roaring64NavigableMap failedBlockIdBitmap = Roaring64NavigableMap.bitmapOf();
    Roaring64NavigableMap succBlockIdBitmap = Roaring64NavigableMap.bitmapOf();
    for (Long blockId : result.getFailedBlockIds()) {
      failedBlockIdBitmap.addLong(blockId);
    }
    for (Long blockId : result.getSuccessBlockIds()) {
      succBlockIdBitmap.addLong(blockId);
    }
    assertEquals(blockIdBitmap, failedBlockIdBitmap);
    assertEquals(blockIdBitmap, succBlockIdBitmap);

    boolean commitResult = shuffleWriteClientImpl.sendCommit(Sets.newHashSet(
        shuffleServerInfo1, fakeShuffleServerInfo), testAppId, 0, 2);
    assertFalse(commitResult);

    Map<Integer, List<Long>> ptb = Maps.newHashMap();
    ptb.put(1, Lists.newArrayList(1L));
    try {
      Map<Integer, List<ShuffleServerInfo>> partitionToServers = Maps.newHashMap();
      partitionToServers.put(1, Lists.newArrayList(
          shuffleServerInfo1, fakeShuffleServerInfo));
      shuffleWriteClientImpl.reportShuffleResult(partitionToServers, testAppId, 0, 0, ptb, 2);
      fail(EXPECTED_EXCEPTION_MESSAGE);
    } catch (Exception e) {
      assertTrue(e.getMessage().contains(""Report shuffle result is failed for""));
    }
  }
",non-flaky,5
26861,wildfly_wildfly,ServiceBasedNamingStoreTestCase.testList,"    @Test
    public void testList() throws Exception {
        final Object value = new Object();
        bindObject(ServiceName.JBOSS.append(""TestBean""), value);
        bindObject(ServiceName.JBOSS.append(""foo"", ""TestBean""), value);
        bindObject(ServiceName.JBOSS.append(""foo"", ""bar"", ""TestBean""), value);
        bindObject(ServiceName.JBOSS.append(""foo"", ""bar"", ""baz"", ""TestBean""), value);

        store.add(ServiceName.JBOSS.append(""foos"", ""bar""));
        store.add(ServiceName.JBOSS.append(""fo"", ""bar""));
        store.add(ServiceName.JBOSS.append(""foo"", ""ba"", ""baz""));
        store.add(ServiceName.JBOSS.append(""foo"", ""bart"", ""baz""));
        store.add(ServiceName.JBOSS.append(""foo"", ""bar"", ""ba""));
        store.add(ServiceName.JBOSS.append(""foo"", ""bar"", ""bazt""));
        store.add(ServiceName.JBOSS.append(""foo"", ""bar"", ""art""));
        store.add(ServiceName.JBOSS.append(""other"", ""one""));

        List<NameClassPair> list = store.list(new CompositeName(""""));
        assertEquals(5, list.size());
        assertContains(list, ""TestBean"", Object.class);
        assertContains(list, ""foo"", Context.class);
        assertContains(list, ""fo"", Context.class);
        assertContains(list, ""foos"", Context.class);
        assertContains(list, ""other"", Context.class);


        list = store.list(new CompositeName(""foo""));
        assertEquals(4, list.size());
        assertContains(list, ""TestBean"", Object.class);
        assertContains(list, ""ba"", Context.class);
        assertContains(list, ""bart"", Context.class);
        assertContains(list, ""bar"", Context.class);
    }
",non-flaky,5
59573,looly_hutool,CronPatternTest.rangeYearTest,"	@Test(expected = CronException.class)
	public void rangeYearTest() {
		// yearçèå´æ¯1970~2099å¹´ï¼è¶åºæ¥é
		CronPattern pattern = new CronPattern(""0/1 * * * 1/1 ? 2020-2120"");
	}
",non-flaky,5
177957,aosp-mirror_platform_frameworks_support,FileProviderTest.testStrategyEscaping,"    @Test
    public void testStrategyEscaping() throws Exception {
        final SimplePathStrategy strat = new SimplePathStrategy(""authority"");
        strat.addRoot(""t/g"", mContext.getFilesDir());

        File expectedRoot = mContext.getFilesDir().getCanonicalFile();
        File file = buildPath(expectedRoot, ""lol\""wat?foo&bar"", ""wat.txt"");
        final String expected = ""content://authority/t%2Fg/lol%22wat%3Ffoo%26bar/wat.txt"";

        assertEquals(expected,
                strat.getUriForFile(file).toString());
        assertEquals(file.getPath(),
                strat.getFileForUri(Uri.parse(expected)).getPath());
    }
",non-flaky,5
94666,square_okhttp,Http2Test.pushPromise,"  @Test public void pushPromise() throws IOException {
      public void pushPromise(int streamId, int promisedStreamId, List<Header> headerBlock) {
        assertEquals(expectedStreamId, streamId);
        assertEquals(expectedPromisedStreamId, promisedStreamId);
        assertEquals(pushPromise, headerBlock);
      }
",non-flaky,5
76937,Tencent_Firestorm,RssShuffleWriterTest.onReceive,"  @Test
  public void writeTest() throws Exception {
    SparkConf conf = new SparkConf();
    conf.setAppName(""testApp"").setMaster(""local[2]"")
        .set(RssClientConfig.RSS_TEST_FLAG, ""true"")
        .set(RssClientConfig.RSS_WRITER_BUFFER_SIZE, ""32"")
        .set(RssClientConfig.RSS_WRITER_SERIALIZER_BUFFER_SIZE, ""32"")
        .set(RssClientConfig.RSS_WRITER_BUFFER_SEGMENT_SIZE, ""64"")
        .set(RssClientConfig.RSS_WRITER_BUFFER_SPILL_SIZE, ""128"")
        .set(RssClientConfig.RSS_WRITER_SEND_CHECK_TIMEOUT, ""10000"")
        .set(RssClientConfig.RSS_WRITER_SEND_CHECK_INTERVAL, ""1000"")
        .set(RssClientConfig.RSS_COORDINATOR_QUORUM, ""127.0.0.1:12345,127.0.0.1:12346"");
    // init SparkContext
    SparkContext sc = SparkContext.getOrCreate(conf);
    RssShuffleManager manager = new RssShuffleManager(conf, false);
    List<ShuffleBlockInfo> shuffleBlockInfos = Lists.newArrayList();

    manager.setEventLoop(new EventLoop<AddBlockEvent>(""test"") {
      @Override
      public void onReceive(AddBlockEvent event) {
        assertEquals(""taskId"", event.getTaskId());
        shuffleBlockInfos.addAll(event.getShuffleDataInfoList());
        Set<Long> blockIds = event.getShuffleDataInfoList().parallelStream()
            .map(sdi -> sdi.getBlockId()).collect(Collectors.toSet());
        manager.addSuccessBlockIds(event.getTaskId(), blockIds);
      }
",non-flaky,5
179475,abel533_Mapper,DefaultEnumTypeHandlerTest.testDelete,"    @Test
    public void testDelete(){
        SqlSession sqlSession = getSqlSession();
        try {
            UserMapper userMapper = sqlSession.getMapper(UserMapper.class);
            Assert.assertEquals(1, userMapper.deleteByPrimaryKey(1));

            User user = new User();
            user.setState(StateDictEnum.enabled);
            Assert.assertEquals(0, userMapper.delete(user));

            user = new User();
            user.setLock(LockDictEnum.unlocked);
            Assert.assertEquals(0, userMapper.delete(user));

            user = new User();
            user.setLock(LockDictEnum.locked);
            user.setState(StateDictEnum.disabled);
            Assert.assertEquals(1, userMapper.delete(user));
        } finally {
            sqlSession.close();
        }
    }
",non-flaky,5
91403,OpenLCB_OpenLCB_Java,CanInterfaceTest.testCTor,"    @Test
    public void testCTor() {
        NodeID nodeID = new NodeID(new byte[]{1,2,3,4,5,6});
        CanInterface t = new CanInterface(nodeID, new CanFrameListenerScaffold() );
        Assert.assertNotNull(""exists"",t);
    }
",non-flaky,5
137084,spring-projects_spring-framework,AbstractAnnotationMetadataTests.isFinalWhenNonFinalReturnsFalse,"	@Test
	public void isFinalWhenNonFinalReturnsFalse() {
		assertThat(get(TestClass.class).isFinal()).isFalse();
	}
",non-flaky,5
95670,togglz_togglz,SpringProfileActivationStrategyTest.testIsActiveThrowsWhenNoApplicationContext,"    @Test(expected = IllegalStateException.class)
    public void testIsActiveThrowsWhenNoApplicationContext() {
        FeatureState featureState = new FeatureState(TestFeatures.FEATURE_ONE, true);

        ContextClassLoaderApplicationContextHolder.release();

        strategy.isActive(featureState, null);
    }
",non-flaky,5
70784,apache_kafka,StartAndStopLatchTest.shouldReturnFalseWhenAwaitingForStopToNeverComplete,"    @Test
    public void shouldReturnFalseWhenAwaitingForStopToNeverComplete() throws Throwable {
        latch = new StartAndStopLatch(1, 1, this::complete, dependents, clock);
        future = asyncAwait(100);
        latch.recordStart();
        clock.sleep(10);
        assertFalse(future.get(200, TimeUnit.MILLISECONDS));
        assertTrue(future.isDone());
    }
",non-flaky,5
268,wildfly_wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993.testRebind.2,"@Test
public void testRebind() throws Exception {
    final Name name = new CompositeName(""test"");
    final Object value = new Object();
    final Object newValue = new Object();
    WritableServiceBasedNamingStore.pushOwner(OWNER_FOO);
    try {
        store.bind(name, value);
        store.rebind(name, newValue);
    } finally {
        WritableServiceBasedNamingStore.popOwner();
    }
    assertEquals(newValue, store.lookup(name));
}",test order dependency,4
113760,salesforce_reactive-grpc,GrpcRetryTest.manyToManyRetryImmediately,"    @Test
    public void manyToManyRetryImmediately() {
        Flux<Integer> test = newThreeErrorFlux()
                .<Integer>compose(GrpcRetry.ManyToMany.retryImmediately(Function.identity()));

        StepVerifier.create(test)
                .expectNext(0)
                .expectComplete()
                .verify(Duration.ofSeconds(1));
    }
",non-flaky,5
26900,wildfly_wildfly,InMemoryNamingStoreTestCase.testListNameNotFound,"    @Test
    public void testListNameNotFound() throws Exception {
        try {
            nameStore.list(new CompositeName(""test""));
            fail(""Should have thrown and NameNotFoundException"");
        } catch(NameNotFoundException expected) {}
    }
",non-flaky,5
176812,ctco_cukes,EndsWithRegexpTest.matchesEndWithRegexp,"    @Test
    public void matchesEndWithRegexp() throws Exception {
        assertThat(""hello world"", EndsWithRegexp.endsWithRegexp(""el.*world""));
    }
",non-flaky,5
84655,apache_zookeeper,ZooKeeperTest.testParseWithMultipleQuotes,"    @Test
    public void testParseWithMultipleQuotes() throws Exception {
        final ZooKeeper zk = createClient();
        ZooKeeperMain zkMain = new ZooKeeperMain(zk);
        String cmdstring = ""create /node '' ''"";
        zkMain.cl.parseCommand(cmdstring);
        assertEquals(zkMain.cl.getNumArguments(), 4, ""expected 5 arguments"");
        assertEquals(zkMain.cl.getCmdArgument(0), ""create"", ""create is not taken as first argument"");
        assertEquals(zkMain.cl.getCmdArgument(1), ""/node"", ""/node is not taken as second argument"");
        assertEquals(zkMain.cl.getCmdArgument(2), """", ""empty string is not taken as third argument"");
        assertEquals(zkMain.cl.getCmdArgument(3), """", ""empty string is not taken as fourth argument"");
    }
",non-flaky,5
162379,testcontainers_testcontainers-java,TestEnvironmentTest.testCompareVersionGreaterThan,"    @Test
    public void testCompareVersionGreaterThan() {
        assertTrue(""2.10 > 1.20"", new ComparableVersion(""2.10"").compareTo(new ComparableVersion(""1.20"")) == 1);
    }
",non-flaky,5
113771,salesforce_reactive-grpc,ReactiveStreamObserverPublisherClientTest.onCompletedDelegates,"    @Test
    public void onCompletedDelegates() {
        ClientCallStreamObserver<Object> obs = mock(ClientCallStreamObserver.class);
        Subscriber<Object> sub = mock(Subscriber.class);

        ReactiveStreamObserverPublisherClient<Object> pub = new ReactiveStreamObserverPublisherClient<Object>(obs);
        pub.subscribe(sub);

        pub.onCompleted();
        verify(sub).onComplete();
    }
",non-flaky,5
284,apache_hadoop,TestOffsetRange.testConstructor4,"  @Test(expected = IllegalArgumentException.class)
  public void testConstructor4() throws IOException {
    new OffsetRange(-3, 100);
  }
",non-flaky,5
118782,netty_netty,AbstractReferenceCountedByteBufTest.testRetainResurrect,"    @Test(expected = IllegalReferenceCountException.class)
    public void testRetainResurrect() {
        AbstractReferenceCountedByteBuf referenceCounted = newReferenceCounted();
        assertTrue(referenceCounted.release());
        assertEquals(0, referenceCounted.refCnt());
        referenceCounted.retain();
    }
",non-flaky,5
70808,apache_kafka,PluginUtilsTest.testPluginUrlsWithRelativeSymlinkBackwards,"    @Test
    public void testPluginUrlsWithRelativeSymlinkBackwards() throws Exception {
        createBasicDirectoryLayout();

        Path anotherPath = rootDir.newFolder(""moreplugins"").toPath().toRealPath();
        Files.createDirectories(anotherPath.resolve(""connectorB-deps""));
        Files.createSymbolicLink(
                pluginPath.resolve(""connectorB/deps/symlink""),
                Paths.get(""../../../moreplugins/connectorB-deps"")
        );

        List<Path> expectedUrls = createBasicExpectedUrls();
        expectedUrls.add(Files.createFile(anotherPath.resolve(""connectorB-deps/converter.jar"")));

        assertUrls(expectedUrls, PluginUtils.pluginUrls(pluginPath));
    }
",non-flaky,5
31002,camunda-cloud_zeebe,ArrayValueTest.shouldSerializeValuesAfterPartialRead,"  @Test
  public void shouldSerializeValuesAfterPartialRead() {
    // given
    addIntValues(array, 1, 2, 3);

    // when
    final Iterator<IntegerValue> iterator = array.iterator();
    iterator.next();
    iterator.next();

    // then
    encodeAndDecode(array);
    assertIntValues(array, 1, 2, 3);
  }
",non-flaky,5
33897,apache_camel,FhirReadIT.testResourceByStringIdAndVersionWithResourceClass,"    @Test
    public void testResourceByStringIdAndVersionWithResourceClass() throws Exception {
        final Map<String, Object> headers = new HashMap<>();
        // parameter type is Class
        headers.put(""CamelFhir.resourceClass"", ""Patient"");
        // parameter type is Long
        headers.put(""CamelFhir.stringId"", patient.getIdElement().getIdPart());
        // parameter type is String
        headers.put(""CamelFhir.version"", patient.getIdElement().getVersionIdPart());

        Patient result = requestBodyAndHeaders(""direct://RESOURCE_BY_STRING_ID_AND_VERSION_AND_STRING_RESOURCE"", null, headers);

        assertValidResponse(result);
    }
",non-flaky,5
26704,MundaneImmortal_pair-distribution-app,PairTest.testIsComplete,"	@Test
	public void testIsComplete()  {
		Pair subject = new Pair(Arrays.asList(new Developer(""dev1""), new Developer(""dev2"")));
		
		assertThat(subject.isComplete(), is(true));
	}
",non-flaky,5
170538,eclipse_jetty.project,TestAnnotationIntrospector.testIsIntrospectable,"    @Test
    public void testIsIntrospectable() throws Exception
    {
        try (StacklessLogging ignore = new StacklessLogging(AnnotationIntrospector.class))
        {
            WebAppContext wac = new WebAppContext();
            AnnotationIntrospector introspector = new AnnotationIntrospector(wac);
            //can't introspect nothing
            assertFalse(introspector.isIntrospectable(null, null));

            //can introspect if no metadata to say otherwise
            assertTrue(introspector.isIntrospectable(new Object(), null));

            //can introspect if metdata isn't a BaseHolder
            assertTrue(introspector.isIntrospectable(new Object(), new Object()));

            //an EMBEDDED sourced servlet can be introspected
            ServletHolder holder = new ServletHolder();
            holder.setHeldClass(ServletE.class);
            assertTrue(introspector.isIntrospectable(new ServletE(), holder));

            //a JAVAX API sourced servlet can be introspected
            holder = new ServletHolder(Source.JAVAX_API);
            holder.setHeldClass(ServletE.class);
            assertTrue(introspector.isIntrospectable(new ServletE(), holder));

            //an ANNOTATION sourced servlet can be introspected
            holder = new ServletHolder(new Source(Source.Origin.ANNOTATION, ServletE.class.getName()));
            holder.setHeldClass(ServletE.class);
            assertTrue(introspector.isIntrospectable(new ServletE(), holder));

            //a DESCRIPTOR sourced servlet can be introspected if web.xml metdata-complete==false
            File file = MavenTestingUtils.getTestResourceFile(""web31false.xml"");
            Resource resource = Resource.newResource(file);
            wac.getMetaData().setWebDescriptor(new WebDescriptor(resource));
            holder = new ServletHolder(new Source(Source.Origin.DESCRIPTOR, resource.toString()));
            assertTrue(introspector.isIntrospectable(new ServletE(), holder));

            //a DESCRIPTOR sourced servlet can be introspected if web-fragment.xml medata-complete==false && web.xml metadata-complete==false
            file = MavenTestingUtils.getTestResourceFile(""web-fragment4false.xml"");
            resource = Resource.newResource(file);
            wac.getMetaData().addFragmentDescriptor(Resource.newResource(file.getParentFile()), new FragmentDescriptor(resource));
            holder = new ServletHolder(new Source(Source.Origin.DESCRIPTOR, resource.toString()));
            assertTrue(introspector.isIntrospectable(new ServletE(), holder));

            //a DESCRIPTOR sourced servlet cannot be introspected if web-fragment.xml medata-complete==true (&& web.xml metadata-complete==false)
            file = MavenTestingUtils.getTestResourceFile(""web-fragment4true.xml"");
            resource = Resource.newResource(file);
            wac.getMetaData().addFragmentDescriptor(Resource.newResource(file.getParentFile()), new FragmentDescriptor(resource));
            holder = new ServletHolder(new Source(Source.Origin.DESCRIPTOR, resource.toString()));
            assertFalse(introspector.isIntrospectable(new ServletE(), holder));

            //a DESCRIPTOR sourced servlet cannot be introspected if web.xml medata-complete==true
            file = MavenTestingUtils.getTestResourceFile(""web31true.xml"");
            resource = Resource.newResource(file);
            wac.getMetaData().setWebDescriptor(new WebDescriptor(resource));
            holder = new ServletHolder(new Source(Source.Origin.DESCRIPTOR, resource.toString()));
            assertFalse(introspector.isIntrospectable(new ServletE(), holder));
        }
    }
",non-flaky,5
26890,wildfly_wildfly,InMemoryNamingStoreTestCase.testBindAndLookup,"    @Test
    public void testBindAndLookup() throws Exception {
        final Name name = new CompositeName(""test"");
        final Object object = new Object();
        nameStore.bind(name, object, Object.class);
        final Object result = nameStore.lookup(name);
        assertEquals(object, result);
    }
",non-flaky,5
162373,testcontainers_testcontainers-java,LazyFutureTest.timeoutWorks,"    @Test(timeout = 5_000)
    public void timeoutWorks() throws Exception {
        Future<Void> lazyFuture = new LazyFuture<Void>() {
            @Override
            @SneakyThrows(InterruptedException.class)
            protected Void resolve() {
                TimeUnit.MINUTES.sleep(1);
                return null;
            }
        };

        assertThrows(""Should timeout"", TimeoutException.class, () -> lazyFuture.get(10, TimeUnit.MILLISECONDS));
        pass(""timeout works"");
    }
",non-flaky,5
26871,wildfly_wildfly,NamingContextTestCase.testLookupWithContinuation,"    @Test
    public void testLookupWithContinuation() throws Exception {
        namingStore.bind(new CompositeName(""comp/nested""), ""test"");

        final Reference reference = new Reference(String.class.getName(), new StringRefAddr(""nns"", ""comp""), TestObjectFactoryWithNameResolution.class.getName(), null);
        namingStore.bind(new CompositeName(""test""), reference);

        Object result = namingContext.lookup(new CompositeName(""test/nested""));
        assertEquals(""test"", result);

        //the same with security permissions
        result = testActionPermission(JndiPermission.ACTION_LOOKUP, Arrays.asList(new JndiPermission(""comp/nested"", ""lookup"")), namingContext, ""test/nested"");
        assertEquals(""test"", result);
    }
",non-flaky,5
98036,vert-x3_vertx-mongo-client,MongoClientBulkWriteResultTest.testToJsonMongoClientBulkWriteResult,"  @Test
  public void testToJsonMongoClientBulkWriteResult() {
    JsonObject mongoClientBulkWriteResultJson = randomMongoClientBulkWriteResultJson();
    MongoClientBulkWriteResult mongoClientBulkWriteResult = new MongoClientBulkWriteResult(
        mongoClientBulkWriteResultJson);

    assertEquals(mongoClientBulkWriteResultJson, mongoClientBulkWriteResult.toJson());
  }
",non-flaky,5
118687,netty_netty,XmlDecoderTest.shouldDecodeWithoutHeader,"    @Test
    public void shouldDecodeWithoutHeader() {
        Object temp;

        write(XML4);

        temp = channel.readInbound();
        assertThat(temp, instanceOf(XmlDocumentStart.class));
        assertThat(((XmlDocumentStart) temp).version(), is(nullValue()));
        assertThat(((XmlDocumentStart) temp).encoding(), is(""UTF-8""));
        assertThat(((XmlDocumentStart) temp).standalone(), is(false));
        assertThat(((XmlDocumentStart) temp).encodingScheme(), is(nullValue()));

        temp = channel.readInbound();
        assertThat(temp, instanceOf(XmlElementStart.class));
        assertThat(((XmlElementStart) temp).name(), is(""netty""));
        assertThat(((XmlElementStart) temp).prefix(), is(""""));
        assertThat(((XmlElementStart) temp).namespace(), is(""""));
        assertThat(((XmlElementStart) temp).attributes().size(), is(0));
        assertThat(((XmlElementStart) temp).namespaces().size(), is(0));

        temp = channel.readInbound();
        assertThat(temp, instanceOf(XmlElementEnd.class));
        assertThat(((XmlElementEnd) temp).name(), is(""netty""));
        assertThat(((XmlElementEnd) temp).prefix(), is(""""));
        assertThat(((XmlElementEnd) temp).namespace(), is(""""));
        assertThat(((XmlElementEnd) temp).namespaces().size(), is(0));

        temp = channel.readInbound();
        assertThat(temp, nullValue());
    }
",non-flaky,5
77548,dropwizard_dropwizard,ResourceTestRuleTest.testCustomClientConfiguration,"    @Test
    public void testCustomClientConfiguration() {
        assertThat(resourceTestRule.client().getConfiguration().isRegistered(DummyExceptionMapper.class)).isTrue();
    }
",non-flaky,5
160391,ConsenSys_teku,ChainDataProviderTest.validatorParameterToIndex_shouldAcceptValidatorId,"  @Test
  public void validatorParameterToIndex_shouldAcceptValidatorId() {
    final ChainDataProvider provider =
        new ChainDataProvider(spec, recentChainData, combinedChainDataClient);

    assertThat(provider.validatorParameterToIndex(""2"")).isEqualTo(Optional.of(2));
  }
",non-flaky,5
98254,apache_jackrabbit,OSGiIT.listBundles,"    @Test
    public void listBundles() {
        for (Bundle bundle : context.getBundles()) {
            System.out.println(bundle);
        }
    }
",non-flaky,5
77661,pholser_junit-quickcheck,InstantPropertyParameterTypesTest.shouldHold,"    @Test public void missingMax() {
        @Property public void shouldHold(
            @InRange(min = ""2012-12-31T23:59:59.999999999Z"") Instant i) {

            assertThat(
                i,
                greaterThanOrEqualTo(Instant.parse(""2012-12-31T23:59:59.999999999Z"")));
        }
",non-flaky,5
86065,graylog2_graylog2-server,AggregationEventProcessorConfigTest.testValidAggregationConfiguration,"    @Test
    public void testValidAggregationConfiguration() {
        final AggregationEventProcessorConfig config = getConfig().toBuilder()
            .groupBy(ImmutableList.of(""bar""))
            .series(ImmutableList.of(this.getSeries()))
            .conditions(this.getConditions())
            .build();

        final ValidationResult validationResult = config.validate();
        assertThat(validationResult.failed()).isFalse();
        assertThat(validationResult.getErrors().size()).isEqualTo(0);
    }
",non-flaky,5
135061,undertow-io_undertow,PathMatcherTestCase.testDefaultFallthrough,"    @Test
    public void testDefaultFallthrough() {

        PathMatcher<String> pathMatcher = new PathMatcher<>(""default"");

        // check defaults
        Assert.assertEquals(""default"", pathMatcher.getPrefixPath(""/""));
        Assert.assertEquals(""default"", pathMatcher.match(""/"").getValue());

        // add a few items
        pathMatcher.addPrefixPath(""/test1"", ""test1"");
        pathMatcher.addPrefixPath(""/test2"", ""test2"");
        pathMatcher.addPrefixPath(""/test3"", ""test3"");
        pathMatcher.addPrefixPath(""/test4"", ""test4"");

        // check matching with no matches
        Assert.assertEquals(""default"", pathMatcher.match(""/adsfasdfdsaf"").getValue());
        Assert.assertEquals(""default"", pathMatcher.match(""/   "").getValue());
        Assert.assertEquals(""default"", pathMatcher.match(""/drooadfas"").getValue());
        Assert.assertEquals(""default"", pathMatcher.match(""/thing/thing"").getValue());
        Assert.assertEquals(""default"", pathMatcher.match("""").getValue());

        // check that matching actual matches still works
        Assert.assertEquals(""test1"", pathMatcher.match(""/test1"").getValue());
        Assert.assertEquals(""test2"", pathMatcher.match(""/test2"").getValue());
        Assert.assertEquals(""test3"", pathMatcher.match(""/test3"").getValue());
        Assert.assertEquals(""test4"", pathMatcher.match(""/test4"").getValue());
    }
",non-flaky,5
33850,apache_camel,FhirDeleteIT.testDeleteResource,"    @Test
    public void testDeleteResource() throws Exception {
        assertTrue(patientExists());
        // using org.hl7.fhir.instance.model.api.IBaseResource message body for single parameter ""resource""
        IBaseOperationOutcome result = requestBody(""direct://RESOURCE"", this.patient);

        LOG.debug(""resource: "" + result);
        assertNotNull(result, ""resource result"");
        assertFalse(patientExists());
    }
",non-flaky,5
98295,spotify_docker-client,DockerDateFormatTest.otherTimeZones,"  @Test
  public void otherTimeZones() throws Exception {
    final Date expected =
        new DateTime(2016, 6, 3, 6, 57, 17, 478, DateTimeZone.forOffsetHours(-4)).toDate();
    assertThat(dockerDateFormat.parse(""2016-06-03T06:57:17.4782869-04:00""), equalTo(expected));
  }
",non-flaky,5
98032,vert-x3_vertx-mongo-client,MongoClientBulkWriteResultTest.testMongoClientBulkWriteStatuses,"  @Test
  public void testMongoClientBulkWriteStatuses() {
    long randomMatched = TestUtils.randomLong();
    long randomModified = TestUtils.randomLong();
    long randomInserted = TestUtils.randomLong();
    long randomDeleted = TestUtils.randomLong();
    List<JsonObject> upserts = randomUpsertIds();

    MongoClientBulkWriteResult mongoClientBulkWriteResult = new MongoClientBulkWriteResult(randomInserted,
        randomMatched, randomDeleted, randomModified, upserts);

    assertEquals(randomMatched, mongoClientBulkWriteResult.getMatchedCount());
    assertEquals(randomModified, mongoClientBulkWriteResult.getModifiedCount());
    assertEquals(randomInserted, mongoClientBulkWriteResult.getInsertedCount());
    assertEquals(randomDeleted, mongoClientBulkWriteResult.getDeletedCount());
    assertEquals(upserts, mongoClientBulkWriteResult.getUpserts());
  }
",non-flaky,5
31005,camunda-cloud_zeebe,ArrayValueTest.shouldRemoveValueAtEnd,"  @Test
  public void shouldRemoveValueAtEnd() {
    // given
    addIntValues(array, 1, 2, 3);

    // when
    final Iterator<IntegerValue> iterator = array.iterator();
    iterator.next();
    iterator.next();
    iterator.next();
    iterator.remove();

    // then
    encodeAndDecode(array);
    assertIntValues(array, 1, 2);
  }
",non-flaky,5
86093,graylog2_graylog2-server,EventDefinitionDtoTest.testValidateWithEmptyConfigType,"    @Test
    public void testValidateWithEmptyConfigType() {
        final EventDefinitionDto invalidEventDefinition = testSubject.toBuilder()
            .config(new EventProcessorConfig.FallbackConfig())
            .build();
        final ValidationResult validationResult = invalidEventDefinition.validate();
        assertThat(validationResult.failed()).isTrue();
        assertThat(validationResult.getErrors()).containsOnlyKeys(""config"");
    }
",non-flaky,5
137124,spring-projects_spring-framework,AbstractMethodMetadataTests.isFinalWhenFinalReturnsTrue,"	@Test
	public void isFinalWhenFinalReturnsTrue() {
		assertThat(getTagged(WithFinalMethod.class).isFinal()).isTrue();
	}
",non-flaky,5
30957,camunda-cloud_zeebe,BrokerInfoTest.shouldEncodeDecodeNullValues,"  @Test
  public void shouldEncodeDecodeNullValues() {
    // given
    final BrokerInfo brokerInfo = new BrokerInfo();

    // when
    encodeDecode(brokerInfo);

    // then
    assertThat(brokerInfo.getNodeId()).isEqualTo(BrokerInfoEncoder.nodeIdNullValue());
    assertThat(brokerInfo.getPartitionsCount())
        .isEqualTo(BrokerInfoEncoder.partitionsCountNullValue());
    assertThat(brokerInfo.getClusterSize()).isEqualTo(BrokerInfoEncoder.clusterSizeNullValue());
    assertThat(brokerInfo.getReplicationFactor())
        .isEqualTo(BrokerInfoEncoder.replicationFactorNullValue());
    assertThat(brokerInfo.getAddresses()).isEmpty();
    assertThat(brokerInfo.getPartitionRoles()).isEmpty();
    assertThat(brokerInfo.getPartitionHealthStatuses()).isEmpty();
  }
",non-flaky,5
97727,vojtechhabarta_typescript-generator,JsonDeserializationTest.jaxrsApplicationClientTest,"    @Test
    public void jaxrsApplicationClientTest() {
        final Settings settings = TestUtils.settings();
        settings.outputFileType = TypeScriptFileType.implementationFile;
        settings.outputKind = TypeScriptOutputKind.module;
        settings.mapClasses = ClassMapping.asClasses;
        settings.extensions.add(new JsonDeserializationExtension(/*useJsonDeserializationInJaxrsApplicationClient*/true));
        settings.extensions.add(new AxiosClientExtension());
//        final File actualFile = new File(""target/JaxrsWithJsonDeserialization-actual.ts"");
//        new TypeScriptGenerator(settings).generateTypeScript(Input.from(JaxrsApplicationTest.OrganizationApplication.class), Output.to(actualFile));
        final String output = new TypeScriptGenerator(settings).generateTypeScript(Input.from(JaxrsApplicationTest.OrganizationApplication.class));
        Assert.assertTrue(output.contains(""copyFn: Organization.fromData""));
        Assert.assertTrue(output.contains(""copyFn: undefined""));
        Assert.assertTrue(output.contains(""copyFn: __getCopyArrayFn(Organization.fromData)""));
    }
",non-flaky,5
337,wildfly_wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993.testOnlyExternalContextAllowsCache,"@Test
public void testOnlyExternalContextAllowsCache() throws Exception {
    KernelServices services = createKernelServicesBuilder(AdditionalInitialization.MANAGEMENT)
    .build();
    Assert.assertTrue(services.isSuccessfulBoot());
    List<ModelNode> list = parse(ModelTestUtils.readResource(this.getClass(), ""subsystem.xml""));
    for (ModelNode addOp : list) {
        PathAddress addr = PathAddress.pathAddress(addOp.require(ModelDescriptionConstants.OP_ADDR));
        if (addr.size() == 2 && addr.getLastElement().getKey().equals(NamingSubsystemModel.BINDING) && BindingType.forName(addOp.get(NamingBindingResourceDefinition.BINDING_TYPE.getName()).asString()) != BindingType.EXTERNAL_CONTEXT) {
            addOp.get(NamingBindingResourceDefinition.CACHE.getName()).set(true);
            services.executeForFailure(addOp);
            addOp.remove(NamingBindingResourceDefinition.CACHE.getName());
            ModelTestUtils.checkOutcome(services.executeOperation(addOp));
            ModelTestUtils.checkFailed(services.executeOperation(Util.getWriteAttributeOperation(addr, NamingBindingResourceDefinition.CACHE.getName(), new ModelNode(true))));
        } else {
            ModelTestUtils.checkOutcome(services.executeOperation(addOp));
        }
    }",test order dependency,4
59595,looly_hutool,PinyinUtilTest.getPinyinByBopomofo4jTest,"	@Test
	public void getPinyinByBopomofo4jTest() {
		final Bopomofo4jEngine engine = new Bopomofo4jEngine();
		final String pinyin = engine.getPinyin(""ä½ å¥½h"", "" "");
		Assert.assertEquals(""ni haoh"", pinyin);
	}
",non-flaky,5
94717,ktuukkan_marine-api,SpeedOverGroundTest.minValueIsAvailable,"    @Test
    public void minValueIsAvailable() {
        assertTrue(SpeedOverGround.isAvailable(0));
    }
",non-flaky,5
98662,nutzam_nutz,BaseTest.test_pathargs,"    @Test
    public void test_pathargs() {
        get(""/common/pathArgs/Wendal"");
        assertEquals(""Wendal"", resp.getContent());

        get(""/common/pathArgs2/Wendal/12345/123456789/123/123.00/200.9/true/n"");
        assertEquals(""Wendal12345123456789123123200truen"", resp.getContent());

        get(""/common/pathArgs3/public/blog/200"");
        assertEquals(""public&200"", resp.getContent());
        get(""/common/pathArgs3/puZ"");
        assertEquals(""puZ&Z"", resp.getContent());

        get(""/common/pathArgs4/nutz?name=wendal"");
        assertEquals(""nutz&wendal"", resp.getContent());

        get(""/common/pathArgs5/nutz?user.name=wendal&user2.name=zozoh"");
        assertEquals(""nutz&wendal&zozoh"", resp.getContent());
    }
",non-flaky,5
110173,Wikidata_wikidata-toolkit,TimerTest.enableCpuTimeTaking,"	@Test
	public void enableCpuTimeTaking() {
		ThreadMXBean tmxb = ManagementFactory.getThreadMXBean();
		tmxb.setThreadCpuTimeEnabled(false);

		Timer timer = new Timer(""Test timer"", Timer.RECORD_ALL);
		timer.start();
		doDummyComputation();
		timer.stop();

		assertTrue(""Timer should have measured a CPU time."",
				timer.getTotalCpuTime() > 0);
	}
",non-flaky,5
114061,aws_aws-sdk-java-v2,EnhancedTypeTest.dequeOf_ReturnsRawClassOfDeque_WhenSpecifyingEnhancedType,"    @Test
    public void dequeOf_ReturnsRawClassOfDeque_WhenSpecifyingEnhancedType() {
        EnhancedType<Deque<String>> type = EnhancedType.dequeOf(EnhancedType.of(String.class));

        assertThat(type.rawClass()).isEqualTo(Deque.class);
        assertThat(type.rawClassParameters()).containsExactly(EnhancedType.of(String.class));
    }
",non-flaky,5
156088,soot-oss_soot,TypeBasedReflectionModelAnySubTypeTest.anySubTypePointsToResolution,"  @Test
  public void anySubTypePointsToResolution() {
    SootMethod entryPoint = prepareTarget(TEST_PTA_ENTRY_POINT, TEST_PACKAGE);
    commonInvokeTest(entryPoint);
  }
",non-flaky,5
94765,ktuukkan_marine-api,AbstractAISMessageListenerTest.testGenericsListenerDefaultConstructorThrows,"    @Test
    public void testGenericsListenerDefaultConstructorThrows() {
        try {
            GenericsListener<Integer, AISMessage01> gl = new GenericsListener<>();
            fail(""exception not thrown, resolved to "" + gl.messageType);
        } catch (IllegalStateException ise) {
            assertEquals(""Cannot resolve generic type <T>, use constructor with Class<T> param."", ise.getMessage());
        } catch (Exception e) {
            fail(""unexpected exception thrown: "" + e.getMessage());
        }
    }
",non-flaky,5
178040,aosp-mirror_platform_frameworks_support,GuidedDatePickerTest.testDateRangesWithMonthAndYearEqual,"    @Test
    public void testDateRangesWithMonthAndYearEqual() throws Throwable {

        long startTime = System.currentTimeMillis();

        GuidedDatePickerAction[] datePickerActions = setupDateActionsForMinAndMaxRangeTests();

        scrollToMinAndMaxDates(new int[] {0, 1, 2}, datePickerActions[3]);
        long executionTime = System.currentTimeMillis() - startTime;
        Log.d(TAG, ""testDateRangesWithMonthAndYearEqual() Execution time: "" + executionTime);
        Thread.sleep(FINAL_WAIT);
    }
",non-flaky,5
104627,apache_pinot,MergeRollupMinionClusterIntegrationTest.testSingleLevelRollup,"  @Test
  public void testSingleLevelRollup()
      throws Exception {
    // The original segments are time partitioned by month:
    // segmentName (totalDocs)
    // myTable2_16071_16101_3_1, myTable2_16071_16101_3_2 (9746)
    // myTable2_16102_16129_4_1, myTable2_16102_16129_4_2 (8690)
    // myTable2_16130_16159_5_1, myTable2_16130_16159_5_2 (9621)
    // myTable2_16160_16189_6_1, myTable2_16160_16189_6_2 (9454)
    // myTable2_16190_16220_7_1, myTable2_16190_16220_7_2 (10329)
    // myTable2_16221_16250_8_1, myTable2_16221_16250_8_2 (10468)
    // myTable2_16251_16281_9_1, myTable2_16251_16281_9_2 (10499)
    // myTable2_16282_16312_10_1, myTable2_16282_16312_10_2 (10196)
    // myTable2_16313_16342_11_1, myTable2_16313_16342_11_2 (9136)
    // myTable2_16343_16373_0_1, myTable2_16343_16373_0_2 (9292)
    // myTable2_16374_16404_1_1, myTable2_16374_16404_1_2 (8736)
    // myTable2_16405_16435_2_1, myTable2_16405_16435_2_2 (9378)

    // Expected merge tasks and result segments:
    // 1.
    //    {myTable2_16071_16101_3_1, myTable2_16071_16101_3_2, myTable2_16102_16129_4_1, myTable2_16102_16129_4_2,
    //     myTable2_16130_16159_5_1, myTable2_16130_16159_5_2, myTable2_16160_16189_6_1, myTable2_16160_16189_6_2
    //     myTable2_16190_16220_7}
    //      -> {merged_150days_T1_0_myTable2_16065_16198_0, merged_150days_T1_0_myTable2_16205_16219_1}
    // 2.
    //    {merged_150days_T1_0_myTable2_16205_16219_1, myTable2_16221_16250_8_1, myTable2_16221_16250_8_2,
    //     myTable2_16251_16281_9_1, myTable2_16251_16281_9_2, myTable2_16282_16312_10_1
    //     myTable2_16282_16312_10_2, myTable2_16313_16342_11_1, myTable2_16313_16342_11_2,
    //     myTable2_16343_16373_0_1, myTable2_16343_16373_0_2}
    //      -> {merged_150days_1628644088146_0_myTable2_16205_16345_0,
    //          merged_150days_1628644088146_0_myTable2_16352_16373_1}
    // 3.
    //    {merged_150days_1628644088146_0_myTable2_16352_16373_1, myTable2_16374_16404_1_1, myTable2_16374_16404_1_2
    //     myTable2_16405_16435_2_1, myTable2_16405_16435_2_2}
    //      -> {merged_150days_1628644105127_0_myTable2_16352_16429_0}

    String sqlQuery = ""SELECT count(*) FROM myTable2""; // 115545 rows for the test table
    JsonNode expectedJson = postSqlQuery(sqlQuery, _brokerBaseApiUrl);
    int[] expectedNumSegmentsQueried = {16, 7, 3};
    long expectedWatermark = 16050 * 86_400_000L;
    String offlineTableName = TableNameBuilder.OFFLINE.tableNameWithType(SINGLE_LEVEL_ROLLUP_TEST_TABLE);
    int numTasks = 0;
    for (String tasks = _taskManager.scheduleTasks(offlineTableName).get(MinionConstants.MergeRollupTask.TASK_TYPE);
        tasks != null; tasks =
        _taskManager.scheduleTasks(offlineTableName).get(MinionConstants.MergeRollupTask.TASK_TYPE), numTasks++) {
      assertEquals(_helixTaskResourceManager.getTaskConfigs(tasks).size(), 1);
      assertTrue(_helixTaskResourceManager.getTaskQueues()
          .contains(PinotHelixTaskResourceManager.getHelixJobQueueName(MinionConstants.MergeRollupTask.TASK_TYPE)));
      // Will not schedule task if there's incomplete task
      assertNull(
          _taskManager.scheduleTasks(offlineTableName).get(MinionConstants.RealtimeToOfflineSegmentsTask.TASK_TYPE));
      waitForTaskToComplete();

      // Check watermark
      MergeRollupTaskMetadata minionTaskMetadata = MergeRollupTaskMetadata
          .fromZNRecord(_taskManager.getClusterInfoAccessor().getMinionMergeRollupTaskZNRecord(offlineTableName));
      assertNotNull(minionTaskMetadata);
      assertEquals((long) minionTaskMetadata.getWatermarkMap().get(""150days""), expectedWatermark);
      expectedWatermark += 150 * 86_400_000L;

      // Check metadata of merged segments
      for (SegmentZKMetadata metadata : _pinotHelixResourceManager.getSegmentsZKMetadata(offlineTableName)) {
        if (metadata.getSegmentName().startsWith(""merged"")) {
          // Check merged segment zk metadata
          assertNotNull(metadata.getCustomMap());
          assertEquals(""150days"",
              metadata.getCustomMap().get(MinionConstants.MergeRollupTask.SEGMENT_ZK_METADATA_MERGE_LEVEL_KEY));
          // Check merged segments are time partitioned
          assertEquals(metadata.getEndTimeMs() / (86_400_000L * 150), metadata.getStartTimeMs() / (86_400_000L * 150));
        }
      }

      // Check total doc of merged segments are less than the original segments
      JsonNode actualJson = postSqlQuery(sqlQuery, _brokerBaseApiUrl);
      assertTrue(
          actualJson.get(""resultTable"").get(""rows"").get(0).get(0).asInt() < expectedJson.get(""resultTable"").get(""rows"")
              .get(0).get(0).asInt());
      // Check query routing
      int numSegmentsQueried = actualJson.get(""numSegmentsQueried"").asInt();
      assertEquals(numSegmentsQueried, expectedNumSegmentsQueried[numTasks]);
    }

    // Check total doc is half of the original after all merge tasks are finished
    JsonNode actualJson = postSqlQuery(sqlQuery, _brokerBaseApiUrl);
    assertEquals(actualJson.get(""resultTable"").get(""rows"").get(0).get(0).asInt(),
        expectedJson.get(""resultTable"").get(""rows"").get(0).get(0).asInt() / 2);
    // Check time column is rounded
    JsonNode responseJson =
        postSqlQuery(""SELECT count(*), DaysSinceEpoch FROM myTable2 GROUP BY DaysSinceEpoch ORDER BY DaysSinceEpoch"");
    for (int i = 0; i < responseJson.get(""resultTable"").get(""rows"").size(); i++) {
      int daysSinceEpoch = responseJson.get(""resultTable"").get(""rows"").get(i).get(1).asInt();
      assertTrue(daysSinceEpoch % 7 == 0);
    }
    // Check total tasks
    assertEquals(numTasks, 3);

    assertTrue(_controllerStarter.getControllerMetrics()
        .containsGauge(""mergeRollupTaskDelayInNumBuckets.myTable2_OFFLINE.150days""));
  }
",non-flaky,5
76921,Tencent_Firestorm,RssShuffleUtilsTest.odfsConfigurationTest,"  @Test
  public void odfsConfigurationTest() {
    SparkConf conf = new SparkConf();
    Configuration conf1 = RssShuffleUtils.newHadoopConfiguration(conf);
    assertFalse(conf1.getBoolean(""dfs.namenode.odfs.enable"", false));
    assertEquals(""org.apache.hadoop.fs.Hdfs"", conf1.get(""fs.AbstractFileSystem.hdfs.impl""));

    conf.set(RssClientConfig.RSS_OZONE_DFS_NAMENODE_ODFS_ENABLE, ""true"");
    conf1 = RssShuffleUtils.newHadoopConfiguration(conf);
    assertTrue(conf1.getBoolean(""dfs.namenode.odfs.enable"", false));
    assertEquals(""org.apache.hadoop.odfs.HdfsOdfsFilesystem"", conf1.get(""fs.hdfs.impl""));
    assertEquals(""org.apache.hadoop.odfs.HdfsOdfs"", conf1.get(""fs.AbstractFileSystem.hdfs.impl""));

    conf.set(RssClientConfig.RSS_OZONE_FS_HDFS_IMPL, ""expect_odfs_impl"");
    conf.set(RssClientConfig.RSS_OZONE_FS_ABSTRACT_FILE_SYSTEM_HDFS_IMPL, ""expect_odfs_abstract_impl"");
    conf1 = RssShuffleUtils.newHadoopConfiguration(conf);
    assertEquals(""expect_odfs_impl"", conf1.get(""fs.hdfs.impl""));
    assertEquals(""expect_odfs_abstract_impl"", conf1.get(""fs.AbstractFileSystem.hdfs.impl""));
  }
",non-flaky,5
134027,CorfuDB_CorfuDB,OrchestratorTest.testAddNodeRequestWithExisting,"    @Test
    public void testAddNodeRequestWithExisting() {
        sendAndValidateWorkflowDispatch(getAddNodeRequestMsg(ENDPOINT_1), WORKFLOW_ID_1);

        // Verify that no new workflow is run.
        verify(orchestrator, never()).run(any(IWorkflow.class), anyInt());
    }
",non-flaky,5
137154,spring-projects_spring-framework,MergedAnnotationsTests.doIt,"	@TestComponentScan(packages = ""com.example.app.test"")
		public void doIt() {
		}
",non-flaky,5
33680,alibaba_fastjson,JSONScannerTest.checkDate3,"  @Test
  public void checkDate3() throws Throwable {

    // Arrange
    char y0 = '2';
    char y1 = '1';
    char y2 = '1';
    char y3 = '1';
    char M0 = '1';
    char M1 = '0';
    int d0 = 49;
    int d1 = 32810;

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkDate"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""int""), Reflector.forName(""int""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, y0, y1, y2, y3, M0, M1, d0, d1);

    // Assert result
    Assert.assertEquals(false, retval);

  }
",non-flaky,5
110113,Wikidata_wikidata-toolkit,RdfSerializationActionTest.testDefaults,"	@Test
	public void testDefaults() {
		String[] args = new String[] { ""-a"", ""rdf"", ""--rdftasks"", ""entities"" };
		DumpProcessingOutputAction action = DumpProcessingOutputActionTest
				.getActionFromArgs(args);

		assertTrue(action instanceof RdfSerializationAction);
		assertTrue(action.needsSites());
		assertTrue(action.isReady());
		assertEquals(action.getActionName(), ""RdfSerializationAction"");
	}
",non-flaky,5
133942,CorfuDB_CorfuDB,ManagementHandlerTest.testHandleManagementLayout,"    @Test
    public void testHandleManagementLayout() {
        final Layout layout = getBasicLayout(ImmutableList.of(""localhost:9000""));
        ResponseMsg response = getResponseMsg(
                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.IGNORE),
                getManagementLayoutResponseMsg(layout)
        );

        managementHandler.handleMessage(response, mockChannelHandlerContext);

        // Verify that the correct request was completed (once) with the appropriate value,
        // and that we did not complete exceptionally.
        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));
        verify(mockClientRouter).completeRequest(response.getHeader().getRequestId(), layout);
    }
",non-flaky,5
91490,strapdata_elassandra,RareClusterStateIT.execute,"@TestLogging(""_root:DEBUG"")
    public void testAssignmentWithJustAddedNodes() throws Exception {
        internalCluster().startNode();
        final String index = ""index"";
        prepareCreate(index).setSettings(Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)
            .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)).get();
        ensureGreen(index);

        // close to have some unassigned started shards shards..
        client().admin().indices().prepareClose(index).get();


        final String masterName = internalCluster().getMasterName();
        final ClusterService clusterService = internalCluster().clusterService(masterName);
        final AllocationService allocationService = internalCluster().getInstance(AllocationService.class, masterName);
        clusterService.submitStateUpdateTask(""test-inject-node-and-reroute"", new ClusterStateUpdateTask() {
            @Override
            public ClusterState execute(ClusterState currentState) throws Exception {
                // inject a node
                ClusterState.Builder builder = ClusterState.builder(currentState);
                builder.nodes(DiscoveryNodes.builder(currentState.nodes()).add(new DiscoveryNode(""_non_existent"",
                        buildNewFakeTransportAddress(), emptyMap(), emptySet(), Version.CURRENT)));

                // open index
                final IndexMetaData indexMetaData = IndexMetaData.builder(currentState.metaData().index(index)).state(IndexMetaData.State.OPEN).build();

                builder.metaData(MetaData.builder(currentState.metaData()).put(indexMetaData, true));
                builder.blocks(ClusterBlocks.builder().blocks(currentState.blocks()).removeIndexBlocks(index));
                ClusterState updatedState = builder.build();

                RoutingTable.Builder routingTable = RoutingTable.builder(updatedState.routingTable());
                routingTable.addAsRecovery(updatedState.metaData().index(index));
                updatedState = ClusterState.builder(updatedState).routingTable(routingTable.build()).build();

                return allocationService.reroute(updatedState, ""reroute"");

            }
",non-flaky,5
156139,soot-oss_soot,LoadingTest.testLoadingJava11ClassFromCI,"  @Test
  public void testLoadingJava11ClassFromCI() {
    G.reset();
    Main.main(new String[] { ""-soot-modulepath"", ""VIRTUAL_FS_FOR_JDK"", ""-pp"", ""-src-prec"", ""only-class"",
        ""java.lang.invoke.ConstantBootstraps"" });

    SootClass klass = Scene.v().getSootClass(""java.lang.invoke.ConstantBootstraps"");
    assertTrue(klass.getName().equals(""java.lang.invoke.ConstantBootstraps""));
    assertTrue(klass.moduleName.equals(""java.base""));

  }
",non-flaky,5
86087,graylog2_graylog2-server,EventDefinitionHandlerTest.delete,"    @Test
    public void delete() {
        assertThat(eventDefinitionService.get(""54e3deadbeefdeadbeef0000"")).isPresent();
        assertThat(jobDefinitionService.get(""54e3deadbeefdeadbeef0001"")).isPresent();
        assertThat(jobTriggerService.get(""54e3deadbeefdeadbeef0002"")).isPresent();

        assertThat(handler.delete(""54e3deadbeefdeadbeef0000"")).isTrue();

        assertThat(eventDefinitionService.get(""54e3deadbeefdeadbeef0000"")).isNotPresent();
        assertThat(jobDefinitionService.get(""54e3deadbeefdeadbeef0001"")).isNotPresent();
        assertThat(jobTriggerService.get(""54e3deadbeefdeadbeef0002"")).isNotPresent();
    }
",non-flaky,5
19508,eclipse_xtext-core,TraceRegionTest.testLeafIterator_TwoChildren_NoGaps,"	@Test
	public void testLeafIterator_TwoChildren_NoGaps() {
		TraceRegion parent = new TraceRegion(0, 2, 0, 2, true, 2, 3, 0, 0, null, newURI());
		TraceRegion first = new TraceRegion(0, 1, 0, 1, true, 2, 3, 0, 0, parent, null);
		TraceRegion second = new TraceRegion(1, 1, 1, 2, true, 3, 4, 0, 0, parent, null);
		Iterator<AbstractTraceRegion> iter = parent.leafIterator();
		assertEquals(Arrays.asList(first, second).iterator(), iter);
	}
",non-flaky,5
94786,ktuukkan_marine-api,AISMessage21ParserTest.getTypeOfEPFD,"    @Test
    public void getTypeOfEPFD() throws Exception {
        assertEquals(1, msg.getTypeOfEPFD());
    }
",non-flaky,5
94643,square_okhttp,OkHttpClientTest.intercept,"  @Test public void clonedInterceptorsListsAreIndependent() throws Exception {
      @Override public Response intercept(Chain chain) throws IOException {
        return chain.proceed(chain.request());
      }
",non-flaky,5
135010,undertow-io_undertow,WebsocketStressTestCase.onMessage,"    @Test
    public void websocketFragmentationStressTestCase() throws Exception {

        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final CountDownLatch done = new CountDownLatch(1);

        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < 10000; ++i) {
            sb.append(""message "");
            sb.append(i);
        }
        String toSend = sb.toString();

        final Session session = defaultContainer.connectToServer(new Endpoint() {
            @Override
            public void onOpen(Session session, EndpointConfig config) {
                session.addMessageHandler(new MessageHandler.Partial<byte[]>() {
                    @Override
                    public void onMessage(byte[] bytes, boolean b) {
                        try {
                            out.write(bytes);
                        } catch (IOException e) {
                            e.printStackTrace();
                            done.countDown();
                        }
                        if (b) {
                            done.countDown();
                        }
                    }
",non-flaky,5
113779,salesforce_reactive-grpc,ReactiveBackpressureChunkerTest.requestManyChunksRequestsAsSatisfiedAndStopsWhenComplete,"    @Test
    public void requestManyChunksRequestsAsSatisfiedAndStopsWhenComplete() {
        int chunkSize = 3;
        ReactiveBackpressureChunker<Object> chunker = new ReactiveBackpressureChunker<Object>(chunkSize);
        UpstreamSubscription upstreamSubscription = new UpstreamSubscription();
        DownstreamSubscriber downstreamSubscriber = new DownstreamSubscriber();

        Subscriber<Object> chunkSubscriber = chunker.apply(downstreamSubscriber);
        chunkSubscriber.onSubscribe(upstreamSubscription);

        downstreamSubscriber.upstreamSubscription.request(9);
        assertThat(upstreamSubscription.lastRequested).isEqualTo(chunkSize);
        assertThat(upstreamSubscription.totalRequested).isEqualTo(chunkSize);

        send(chunkSubscriber, 1);
        assertThat(upstreamSubscription.lastRequested).isEqualTo(chunkSize);
        assertThat(upstreamSubscription.totalRequested).isEqualTo(3);
        send(chunkSubscriber, 1);
        assertThat(upstreamSubscription.lastRequested).isEqualTo(chunkSize);
        assertThat(upstreamSubscription.totalRequested).isEqualTo(3);
        send(chunkSubscriber, 1);
        // Chunk satisfied, request next chunk
        assertThat(upstreamSubscription.lastRequested).isEqualTo(chunkSize);
        assertThat(upstreamSubscription.totalRequested).isEqualTo(6);

        send(chunkSubscriber, 1);
        assertThat(upstreamSubscription.lastRequested).isEqualTo(chunkSize);
        assertThat(upstreamSubscription.totalRequested).isEqualTo(6);
        send(chunkSubscriber, 1);
        assertThat(upstreamSubscription.lastRequested).isEqualTo(chunkSize);
        assertThat(upstreamSubscription.totalRequested).isEqualTo(6);
        send(chunkSubscriber, 1);
        // Chunk satisfied, request next chunk
        assertThat(upstreamSubscription.lastRequested).isEqualTo(chunkSize);
        assertThat(upstreamSubscription.totalRequested).isEqualTo(9);

        send(chunkSubscriber, 1);
        assertThat(upstreamSubscription.lastRequested).isEqualTo(chunkSize);
        assertThat(upstreamSubscription.totalRequested).isEqualTo(9);
        send(chunkSubscriber, 1);
        assertThat(upstreamSubscription.lastRequested).isEqualTo(chunkSize);
        assertThat(upstreamSubscription.totalRequested).isEqualTo(9);
        send(chunkSubscriber, 1);
        // Requested satisfied, do not request any more
        assertThat(upstreamSubscription.lastRequested).isEqualTo(chunkSize);
        assertThat(upstreamSubscription.totalRequested).isEqualTo(9);
    }
",non-flaky,5
114118,aws_aws-sdk-java-v2,InstantAsStringAttributeConvertersTest.InstantAsStringAttributeConverterNotAcceptZonedTimeTest,"    @Test
    public void InstantAsStringAttributeConverterNotAcceptZonedTimeTest() {
        assertFails(() -> transformTo(CONVERTER, EnhancedAttributeValue.fromString(""1988-05-21T00:12:00+01:00[Europe/Paris]"")
                                                                       .toAttributeValue()));
    }
",non-flaky,5
16,wildfly_wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993.testFireObjectEvent,"@Test
public void testFireObjectEvent() throws Exception {
    final NamingEventCoordinator coordinator = new NamingEventCoordinator();
    final CollectingListener objectListener = new CollectingListener(1);
    coordinator.addListener(""test/path"", EventContext.OBJECT_SCOPE, objectListener);
    final CollectingListener subtreeListener = new CollectingListener(0);
    coordinator.addListener(""test"", EventContext.SUBTREE_SCOPE, subtreeListener);
    final CollectingListener oneLevelListener = new CollectingListener(0);
    coordinator.addListener(""test"", EventContext.ONELEVEL_SCOPE, oneLevelListener);
    coordinator.fireEvent(context, new CompositeName(""test/path""), null, null, NamingEvent.OBJECT_ADDED, ""bind"", EventContext.OBJECT_SCOPE);
    objectListener.latch.await(1, TimeUnit.SECONDS);
    assertEquals(1, objectListener.capturedEvents.size());
    assertTrue(oneLevelListener.capturedEvents.isEmpty());
    assertTrue(subtreeListener.capturedEvents.isEmpty());
}",test order dependency,4
97988,ReactiveX_RxJava,ObservableTests.testOfTypeWithPolymorphism,"    @Test
    public void testOfTypeWithPolymorphism() {
        ArrayList<Integer> l1 = new ArrayList<Integer>();
        l1.add(1);
        LinkedList<Integer> l2 = new LinkedList<Integer>();
        l2.add(2);

        @SuppressWarnings(""rawtypes"")
        Observable<List> observable = Observable.<Object>from(l1, l2, ""123"").ofType(List.class);

        @SuppressWarnings(""unchecked"")
        Observer<Object> aObserver = mock(Observer.class);
        observable.subscribe(aObserver);
        verify(aObserver, times(1)).onNext(l1);
        verify(aObserver, times(1)).onNext(l2);
        verify(aObserver, never()).onNext(""123"");
        verify(aObserver, never()).onError(
                org.mockito.Matchers.any(Throwable.class));
        verify(aObserver, times(1)).onCompleted();
    }
",non-flaky,5
98055,vert-x3_vertx-mongo-client,GridFsTest.testDownloadStreamById,"  @Test
  public void testDownloadStreamById() {
    long fileLength = (1027) + 7000;
    String fileName = createTempFileWithContent(fileLength);
    String downloadFileName = createTempFile();

    AtomicReference<MongoGridFsClient> gridFsClient = new AtomicReference<>();
    AtomicReference<String> idCreated = new AtomicReference<>();

    Promise<MongoGridFsClient> gridFsClientPromise = Promise.promise();

    mongoClient.createDefaultGridFsBucketService(gridFsClientPromise);

    gridFsClientPromise.future().compose(mongoGridFsClient -> {
      assertNotNull(mongoGridFsClient);
      gridFsClient.set(mongoGridFsClient);
      Promise<Void> dropPromise = Promise.promise();
      mongoGridFsClient.drop(dropPromise);
      return dropPromise.future();
    }).compose(dropped -> {
      Promise<String> uploadPromise = Promise.promise();
      gridFsClient.get().uploadFile(fileName, uploadPromise);
      return uploadPromise.future();
    }).compose(id -> {
      assertNotNull(id);
      idCreated.set(id);
      Promise<AsyncFile> openPromise = Promise.promise();
      vertx.fileSystem().open(downloadFileName, new OpenOptions().setWrite(true), openPromise);
      return openPromise.future();
    }).compose(asyncFile -> {
      Promise<Long> downloadedPromise = Promise.promise();
      gridFsClient.get().downloadById(asyncFile, idCreated.get(), downloadedPromise);
      return downloadedPromise.future();
    }).compose(length -> {
      assertTrue(fileLength == length);
      testComplete();
      return Future.succeededFuture();
    }).onComplete(event -> {
      if (event.failed()) {
        fail(event.cause());
      }
    });
    await();
  }
",non-flaky,5
59569,looly_hutool,CronPatternTest.CronPatternTest2,"	@Test
	public void CronPatternTest2() {
		CronPattern pattern = new CronPattern(""0/30 * * * *"");
		Assert.assertTrue(pattern.match(DateUtil.parse(""2018-10-09 12:00:00"").getTime(), false));
		Assert.assertTrue(pattern.match(DateUtil.parse(""2018-10-09 12:30:00"").getTime(), false));
		
		pattern = new CronPattern(""32 * * * *"");
		Assert.assertTrue(pattern.match(DateUtil.parse(""2018-10-09 12:32:00"").getTime(), false));
	}
",non-flaky,5
86041,graylog2_graylog2-server,NotificationDtoTest.testValidateHttpWithEmptyConfigParameters,"    @Test
    public void testValidateHttpWithEmptyConfigParameters() {
        final HTTPEventNotificationConfig emptyConfig = HTTPEventNotificationConfig.Builder.create()
                .url("""")
                .build();
        final NotificationDto emptyNotification = getHttpNotification().toBuilder().config(emptyConfig).build();
        final ValidationResult validationResult = emptyNotification.validate();
        assertThat(validationResult.failed()).isTrue();
        assertThat(validationResult.getErrors()).containsOnlyKeys(""url"");
    }
",non-flaky,5
59658,looly_hutool,ScriptUtilTest.evalTest,"	@Test
	public void evalTest() {
		ScriptUtil.eval(""print('Script test!');"");
	}
",non-flaky,5
118716,netty_netty,SocketTest.testReceivedBufferSize,"    @Test
    public void testReceivedBufferSize() throws Exception {
        int size = socket.getReceiveBufferSize();
        int newSize = 65535;
        assertTrue(size > 0);
        socket.setReceiveBufferSize(newSize);
        // Linux usually set it to double what is specified
        assertTrue(newSize <= socket.getReceiveBufferSize());
    }
",non-flaky,5
76704,quarkusio_quarkus,SimpleET.testGreetingEndpoint,"    @Test
    public void testGreetingEndpoint() {
        String uuid = UUID.randomUUID().toString();
        given()
                .pathParam(""name"", uuid)
                .when().get(""/hello/greeting/{name}"")
                .then()
                .statusCode(200)
                .body(is(""hello "" + uuid));
    }
",non-flaky,5
98030,vert-x3_vertx-mongo-client,MongoClientUpdateResultTest.testToJsonMongoClientUpdateResult,"  @Test
  public void testToJsonMongoClientUpdateResult() {
    JsonObject mongoClientUpdateResultJson = randomMongoClientUpdateResultJson();
    MongoClientUpdateResult mongoClientUpdateResult = new MongoClientUpdateResult(mongoClientUpdateResultJson);

    assertEquals(mongoClientUpdateResultJson, mongoClientUpdateResult.toJson());
  }
",non-flaky,5
114002,apache_struts,StrutsTestCaseTest.shouldAdditionalContextParamsBeAvailable,"    @Test
    public void shouldAdditionalContextParamsBeAvailable() throws Exception {
        // given
        String key = ""my-param"";
        assertNull(ActionContext.getContext().get(key));

        // when
        String output = executeAction(""/test/testAction.action"");
        assertEquals(""Hello"", output);

        // then
        assertNotNull(ActionContext.getContext().get(key));
    }
",non-flaky,5
86045,graylog2_graylog2-server,NotificationDtoTest.testValidEmailNotification,"    @Test
    public void testValidEmailNotification() {
        final NotificationDto validNotification = getEmailNotification();

        final ValidationResult validationResult = validNotification.validate();
        assertThat(validationResult.failed()).isFalse();
        assertThat(validationResult.getErrors().size()).isEqualTo(0);
    }
",non-flaky,5
84610,apache_zookeeper,CustomHostProviderTest.testZooKeeperWithCustomHostProvider,"    @Test
    public void testZooKeeperWithCustomHostProvider() throws IOException, InterruptedException {
        final int CLIENT_PORT = PortAssignment.unique();
        final HostProvider specialHostProvider = new SpecialHostProvider();
        int expectedCounter = 3;
        counter.set(expectedCounter);

        ZooKeeper zkDefaults = new ZooKeeper(
            ""127.0.0.1:"" + CLIENT_PORT,
            ClientBase.CONNECTION_TIMEOUT,
            DummyWatcher.INSTANCE,
            false);

        ZooKeeper zkSpecial = new ZooKeeper(
                ""127.0.0.1:"" + CLIENT_PORT,
                ClientBase.CONNECTION_TIMEOUT,
                DummyWatcher.INSTANCE,
                false,
                specialHostProvider);

        assertTrue(counter.get() == expectedCounter);
        zkDefaults.updateServerList(""127.0.0.1:"" + PortAssignment.unique());
        assertTrue(counter.get() == expectedCounter);

        zkSpecial.updateServerList(""127.0.0.1:"" + PortAssignment.unique());
        expectedCounter--;
        assertTrue(counter.get() == expectedCounter);
    }
",non-flaky,5
98219,apache_jackrabbit,CreateRepositoryTest.createRepositories,"    @Test
    public void createRepositories() throws Exception {
        doCreateRepositories(""jackrabbit-1.5"");
    }
",non-flaky,5
134985,undertow-io_undertow,SuspendResumeTestCase.testRejectWhenSuspended,"    @Test
    public void testRejectWhenSuspended() throws Exception {
        try {
            serverContainer.pause(null);
            WebSocketChannel channel = WebSocketClient.connectionBuilder(DefaultServer.getWorker(), DefaultServer.getBufferPool(), new URI(DefaultServer.getDefaultServerURL() + ""/""))
                    .connect().get();
            IoUtils.safeClose(channel);
            Assert.fail();
        } catch (UpgradeFailedException e) {
            //expected
        } finally {
            serverContainer.resume();
        }

    }
",non-flaky,5
9,apache_hadoop,TestRMContainerAllocator.testSimple,"@Test
public void testSimple() throws Exception {
    Configuration conf = new Configuration();
    MyResourceManager rm = new MyResourceManager(conf);
    rm.start();
    DrainDispatcher dispatcher = ((DrainDispatcher) (rm.getRMContext().getDispatcher()));
    RMApp app = rm.submitApp(1024);
    dispatcher.await();
    MockNM amNodeManager = rm.registerNode(""amNM:1234"", 2048);
    amNodeManager.nodeHeartbeat(true);
    dispatcher.await();
    ApplicationAttemptId appAttemptId = app.getCurrentAppAttempt().getAppAttemptId();
    rm.sendAMLaunched(appAttemptId);
    dispatcher.await();
    JobId jobId = MRBuilderUtils.newJobId(appAttemptId.getApplicationId(), 0);
    Job mockJob = mock(Job.class);
    when(mockJob.getReport()).thenReturn(MRBuilderUtils.newJobReport(jobId, ""job"", ""user"", RUNNING, 0, 0, 0, 0, 0, 0, ""jobfile""));
    MyContainerAllocator allocator = new MyContainerAllocator(rm, conf, appAttemptId, mockJob);
    MockNM nodeManager1 = rm.registerNode(""h1:1234"", 10240);
    MockNM nodeManager2 = rm.registerNode(""h2:1234"", 10240);
    MockNM nodeManager3 = rm.registerNode(""h3:1234"", 10240);
    dispatcher.await();
    ContainerRequestEvent event1 = createReq(jobId, 1, 1024, new String[]{ ""h1"" });
    allocator.sendRequest(event1);
    ContainerRequestEvent event2 = createReq(jobId, 2, 1024, new String[]{ ""h2"" });
    allocator.sendRequest(event2);
    List<TaskAttemptContainerAssignedEvent> assigned = allocator.schedule();
    dispatcher.await();
    Assert.assertEquals(""No of assignments must be 0"", 0, assigned.size());
    ContainerRequestEvent event3 = createReq(jobId, 3, 1024, new String[]{ ""h3"" });
    allocator.sendRequest(event3);
    assigned = allocator.schedule();
    dispatcher.await();
    Assert.assertEquals(""No of assignments must be 0"", 0, assigned.size());
    nodeManager1.nodeHeartbeat(true);
    nodeManager2.nodeHeartbeat(true);
    nodeManager3.nodeHeartbeat(true);
    dispatcher.await();
    assigned = allocator.schedule();
    dispatcher.await();
    checkAssignments(new ContainerRequestEvent[]{ event1, event2, event3 }, assigned, false);
}",async wait,0
156155,soot-oss_soot,TypeBasedReflectionModelTest.localBase,"    @Test
    public void localBase() {
        genericLocalVsStringConstantTest(false);
    }
",non-flaky,5
133983,CorfuDB_CorfuDB,ManagementViewTest.testGetLayoutForQuorum,"    @Test
    public void testGetLayoutForQuorum() {
        final String server1 = ""server1"";
        final String server2 = ""server2"";
        final String server3 = ""server3"";

        final List<String> servers = Arrays.asList(server1, server2, server3);
        final Layout layout = layoutUtil.getLayout(servers);

        Map<String, Layout> layouts = new HashMap<>();

        servers.forEach(server -> layouts.put(server, layout));

        Optional<Layout> quorumLayout = managementView.getLayoutFromQuorum(layouts, layouts.size() - 1);
        assertThat(quorumLayout).isEqualTo(Optional.of(layout));

        quorumLayout = managementView.getLayoutFromQuorum(layouts, layouts.size());
        assertThat(quorumLayout).isEqualTo(Optional.of(layout));

        quorumLayout = managementView.getLayoutFromQuorum(layouts, layouts.size() + 1);
        assertThat(quorumLayout).isEqualTo(Optional.empty());
    }
",non-flaky,5
60873,apache_druid,RedisStandaloneCacheTest.testBasicInjection,"  @Test
  public void testBasicInjection() throws Exception
  {
    String json = ""{ \""host\"": \""localhost\"", \""port\"": 6379, \""expiration\"": 3600}"";
    final RedisCacheConfig config = new ObjectMapper().readValue(json, RedisCacheConfig.class);

    Injector injector = Initialization.makeInjectorWithModules(
        GuiceInjectors.makeStartupInjector(), ImmutableList.of(
            binder -> {
              binder.bindConstant().annotatedWith(Names.named(""serviceName"")).to(""druid/test/redis"");
              binder.bindConstant().annotatedWith(Names.named(""servicePort"")).to(0);
              binder.bindConstant().annotatedWith(Names.named(""tlsServicePort"")).to(-1);

              binder.bindConstant().annotatedWith(Names.named(""host"")).to(""localhost"");
              binder.bindConstant().annotatedWith(Names.named(""port"")).to(6379);

              binder.bind(RedisCacheConfig.class).toInstance(config);
              binder.bind(Cache.class).toProvider(RedisCacheProviderWithConfig.class).in(ManageLifecycle.class);
            }
        )
    );
    Lifecycle lifecycle = injector.getInstance(Lifecycle.class);
    lifecycle.start();
    try {
      Cache cache = injector.getInstance(Cache.class);
      Assert.assertEquals(RedisStandaloneCache.class, cache.getClass());
    }
    finally {
      lifecycle.stop();
    }
  }
",non-flaky,5
60896,apache_druid,KafkaEmitterConfigTest.testJacksonModules,"  @Test
  public void testJacksonModules()
  {
    Assert.assertTrue(new KafkaEmitterModule().getJacksonModules().isEmpty());
  }
",non-flaky,5
33891,apache_camel,FhirReadIT.testResourceByLongId,"    @Test
    public void testResourceByLongId() throws Exception {
        final Map<String, Object> headers = new HashMap<>();
        // parameter type is Class
        headers.put(""CamelFhir.resource"", Patient.class);
        // parameter type is Long
        headers.put(""CamelFhir.longId"", Long.valueOf(patient.getIdElement().getIdPart()));

        Patient result = requestBodyAndHeaders(""direct://RESOURCE_BY_LONG_ID"", null, headers);

        assertValidResponse(result);
    }
",non-flaky,5
112715,hwang-pku_ormlite-core,BaseConnectionSourceTest.testClearDifferentConnection,"	@Test
	public void testClearDifferentConnection() throws Exception {
		OurConnectionSource cs = new OurConnectionSource();
		DatabaseConnection conn = cs.getReadOnlyConnection(null);
		cs.saveSpecialConnection(conn);
		cs.clearSpecialConnection(createMock(DatabaseConnection.class));
		cs.close();
	}
",non-flaky,5
21211,androidx_androidx,PreferenceDataStoreTest.testPutLongWithDataStoreOnPref,"    @Test
    public void testPutLongWithDataStoreOnPref() {
        mPreference.setPreferenceDataStore(mDataStore);
        mScreen.addPreference(mPreference);
        putLongTestCommon();
    }
",non-flaky,5
137088,spring-projects_spring-framework,AbstractAnnotationMetadataTests.getEnclosingClassNameWhenHasNoEnclosingClassReturnsNull,"	@Test
	public void getEnclosingClassNameWhenHasNoEnclosingClassReturnsNull() {
		assertThat(get(AbstractAnnotationMetadataTests.class).getEnclosingClassName()).isNull();
	}
",non-flaky,5
177955,aosp-mirror_platform_frameworks_support,FileProviderTest.testStrategyFileSimple,"    @Test
    public void testStrategyFileSimple() throws Exception {
        final SimplePathStrategy strat = new SimplePathStrategy(""authority"");
        strat.addRoot(""tag"", mContext.getFilesDir());

        File expectedRoot = mContext.getFilesDir().getCanonicalFile();
        File file = buildPath(expectedRoot, ""file.test"");
        assertEquals(file.getPath(),
                strat.getFileForUri(Uri.parse(""content://authority/tag/file.test"")).getPath());

        file = buildPath(expectedRoot, ""subdir"", ""file.test"");
        assertEquals(file.getPath(), strat.getFileForUri(
                Uri.parse(""content://authority/tag/subdir/file.test"")).getPath());
    }
",non-flaky,5
19483,eclipse_xtext-core,LineAndColumnTest.testSingleCharText,"	@Test
	public void testSingleCharText() {
		assertLineAndColumn(""a"", 0, 1, 1);
		assertLineAndColumn(""a"", 1, 1, 2);
	}
",non-flaky,5
201,wildfly_wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993.testLookupBinding.2.,"@Test
public void testLookupBinding() throws Exception {
    final ServiceName bindingName = ServiceName.JBOSS.append(""foo"", ""bar"");
    final Object value = new Object();
    bindObject(bindingName, value);
    final Object obj = store.lookup(new CompositeName(""foo/bar""));
    assertNotNull(obj);
    assertEquals(value, obj);
}",test order dependency,4
177194,line_armeria,BraveServiceIntegrationTest.httpStatusCodeSettable_onUncaughtException,"    @Test
    public void httpStatusCodeSettable_onUncaughtException() {
        throw new AssumptionViolatedException(
            ""Can't currently control the HTTP status code on uncaught exception. #2656"");
    }
",non-flaky,5
21218,androidx_androidx,PreferenceDataStoreTest.testGetFloatWithDataStoreOnMgr,"    @Test
    public void testGetFloatWithDataStoreOnMgr() {
        mManager.setPreferenceDataStore(mDataStore);
        mScreen.addPreference(mPreference);

        mPreference.getFloat(1f);

        verify(mDataStore, atLeastOnce()).getFloat(eq(KEY), eq(1f));
    }
",non-flaky,5
162677,OpenAPITools_openapi-generator,PetApiTest.updatePetWithFormTest,"    @Test
    public void updatePetWithFormTest() {
        Long petId = null;
        String name = null;
        String status = null;
        //api.updatePetWithForm(petId, name, status);
        
        // TODO: test validations
        
        
    }
",non-flaky,5
97978,ReactiveX_RxJava,ObservableTests.run,"    @Test
    public void testCustomObservableWithErrorInObserverAsynchronous() throws InterruptedException {
        final CountDownLatch latch = new CountDownLatch(1);
        final AtomicInteger count = new AtomicInteger();
        final AtomicReference<Throwable> error = new AtomicReference<Throwable>();
        Observable.create(new OnSubscribeFunc<String>() {

            @Override
            public Subscription onSubscribe(final Observer<? super String> observer) {
                final BooleanSubscription s = new BooleanSubscription();
                new Thread(new Runnable() {

                    @Override
                    public void run() {
                        try {
                            if (!s.isUnsubscribed()) {
                                observer.onNext(""1"");
                                observer.onNext(""2"");
                                observer.onNext(""three"");
                                observer.onNext(""4"");
                                observer.onCompleted();
                            }
                        } finally {
                            latch.countDown();
                        }
                    }
",non-flaky,5
307,apache_hadoop,TestRpcProgramNfs3.testCreate,"  @Test(timeout = 60000)
  public void testCreate() throws Exception {
    HdfsFileStatus status = nn.getRpcServer().getFileInfo(testdir);
    long dirId = status.getFileId();
    int namenodeId = Nfs3Utils.getNamenodeId(config);
    XDR xdr_req = new XDR();
    FileHandle handle = new FileHandle(dirId, namenodeId);
    CREATE3Request req = new CREATE3Request(handle, ""fubar"",
        Nfs3Constant.CREATE_UNCHECKED, new SetAttr3(), 0);
    req.serialize(xdr_req);
    
    // Attempt by an unpriviledged user should fail.
    CREATE3Response response1 = nfsd.create(xdr_req.asReadOnlyWrap(),
        securityHandlerUnpriviledged,
        new InetSocketAddress(""localhost"", 1234));
    assertEquals(""Incorrect return code:"", Nfs3Status.NFS3ERR_ACCES,
        response1.getStatus());

    // Attempt by a priviledged user should pass.
    CREATE3Response response2 = nfsd.create(xdr_req.asReadOnlyWrap(),
        securityHandler, new InetSocketAddress(""localhost"", 1234));
    assertEquals(""Incorrect return code:"", Nfs3Status.NFS3_OK,
        response2.getStatus());
  }
",non-flaky,5
43111,trinodb_trino,BaseConnectorSmokeTest.testPredicate,"    @Test
    public void testPredicate()
    {
        assertQuery(""SELECT name, regionkey FROM nation WHERE nationkey = 10"");
        assertQuery(""SELECT name, regionkey FROM nation WHERE nationkey BETWEEN 5 AND 15"");
        assertQuery(""SELECT name, regionkey FROM nation WHERE name = 'EGYPT'"");
    }
",non-flaky,5
162737,OpenAPITools_openapi-generator,OuterCompositeTest.myBooleanTest,"    @Test
    public void myBooleanTest() {
        // TODO: test myBoolean
    }
",non-flaky,5
76951,Tencent_Firestorm,ShuffleReadClientImplTest.readTest12,"  @Test
  public void readTest12() throws Exception {
    String basePath = HDFS_URI + ""clientReadTest12"";
    HdfsShuffleWriteHandler writeHandler =
        new HdfsShuffleWriteHandler(""appId"", 0, 1, 1, basePath, ""test1"", conf);

    Map<Long, byte[]> expectedData = Maps.newHashMap();
    Roaring64NavigableMap blockIdBitmap = Roaring64NavigableMap.bitmapOf();
    Roaring64NavigableMap taskIdBitmap = Roaring64NavigableMap.bitmapOf(0, 1);
    writeTestData(writeHandler, 5, 30, 0, expectedData, blockIdBitmap);
    writeTestData(writeHandler, 5, 30, 1, expectedData, blockIdBitmap);
    writeTestData(writeHandler, 5, 30, 2, Maps.newHashMap(), blockIdBitmap);

    // unexpected taskAttemptId should be filtered
    ShuffleReadClientImpl readClient = new ShuffleReadClientImpl(StorageType.HDFS.name(), ""appId"", 0, 1, 100, 1,
        10, 1000, basePath, blockIdBitmap, taskIdBitmap, Lists.newArrayList(), new Configuration());

    TestUtils.validateResult(readClient, expectedData);
    assertEquals(15, readClient.getProcessedBlockIds().getLongCardinality());
    readClient.checkProcessedBlockIds();
    readClient.close();
  }
",non-flaky,5
175816,GoogleCloudPlatform_google-cloud-eclipse,OpenUriSelectionListenerTest.testWidgetSelected_MalformedURL,"  @Test
  public void testWidgetSelected_MalformedURL() {
    SelectionEvent selectionEvent = getEvent(MALFORMED_URL);

    new OpenUriSelectionListener(queryParameterProvider, errorHandler, browserSupport).widgetSelected(selectionEvent);
    verify(errorHandler).handle(captor.capture(), any(URI.class));
    assertThat(captor.getValue(), instanceOf(MalformedURLException.class));
  }
",non-flaky,5
76963,Tencent_Firestorm,RssUtilsTest.testGetPropertiesFromFile,"  @Test
  public void testGetPropertiesFromFile() {
    final String filePath = Objects.requireNonNull(
        getClass().getClassLoader().getResource(""rss-defaults.conf"")).getFile();
    Map<String, String> properties = RssUtils.getPropertiesFromFile(filePath);
    assertEquals(""12121"", properties.get(""rss.coordinator.port""));
    assertEquals(""155"", properties.get(""rss.server.heartbeat.interval""));
    assertEquals(""true"", properties.get(""rss.x.y.z""));
    assertEquals(""-XX:+PrintGCDetails-Dkey=value-Dnumbers=\""one two three\"""",
        properties.get(""rss.a.b.c.extraJavaOptions""));
  }
",non-flaky,5
77493,dropwizard_dropwizard,JsonConfigurationFactoryTest.throwsAnExceptionOnMalformedFiles,"    @BeforeEach
    public void throwsAnExceptionOnMalformedFiles() {
        assertThatThrownBy(super::throwsAnExceptionOnMalformedFiles)
                .hasMessageContaining(""* Malformed JSON at line:"");
    }
",non-flaky,5
33708,alibaba_fastjson,JSONScannerTest.checkTime14,"  @Test
  public void checkTime14() throws Throwable {

    // Arrange
    JSONScanner objectUnderTest = ((JSONScanner)Reflector.getInstance(""com.alibaba.fastjson.parser.JSONScanner""));
    objectUnderTest.hasSpecial = false;
    objectUnderTest.token = 0;
    objectUnderTest.locale = null;
    objectUnderTest.np = 0;
    objectUnderTest.features = 0;
    Reflector.setField(objectUnderTest, ""text"", """");
    objectUnderTest.calendar = null;
    objectUnderTest.matchStat = 0;
    objectUnderTest.bp = 0;
    Reflector.setField(objectUnderTest, ""len"", 0);
    objectUnderTest.stringDefaultValue = """";
    objectUnderTest.pos = 0;
    objectUnderTest.sp = 0;
    objectUnderTest.sbuf = null;
    objectUnderTest.ch = '\u0000';
    objectUnderTest.timeZone = null;
    objectUnderTest.eofPos = 0;
    char h0 = '1';
    char h1 = '9';
    char m0 = '6';
    char m1 = '0';
    char s0 = '6';
    char s1 = '0';

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkTime"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(objectUnderTest, h0, h1, m0, m1, s0, s1);

    // Assert result
    Assert.assertEquals(true, retval);

  }
",non-flaky,5
137087,spring-projects_spring-framework,AbstractAnnotationMetadataTests.getEnclosingClassNameWhenHasEnclosingClassReturnsEnclosingClass,"	@Test
	public void getEnclosingClassNameWhenHasEnclosingClassReturnsEnclosingClass() {
		assertThat(get(TestClass.class).getEnclosingClassName()).isEqualTo(
				AbstractAnnotationMetadataTests.class.getName());
	}
",non-flaky,5
78241,apache_beam,StateInternalsTest.testBagIsEmpty,"  @Test
  public void testBagIsEmpty() throws Exception {
    BagState<String> value = underTest.state(NAMESPACE_1, STRING_BAG_ADDR);

    assertThat(value.isEmpty().read(), Matchers.is(true));
    ReadableState<Boolean> readFuture = value.isEmpty();
    value.add(""hello"");
    assertThat(readFuture.read(), Matchers.is(false));

    value.clear();
    assertThat(readFuture.read(), Matchers.is(true));
  }
",non-flaky,5
76710,quarkusio_quarkus,RegisterForReflectionITCase.testSelfWithNested,"    @Test
    public void testSelfWithNested() {
        final String resourceB = BASE_PKG + "".ResourceB"";

        assertRegistration(""ResourceB"", resourceB);
        assertRegistration(""InnerClassOfB"", resourceB + ""$InnerClassOfB"");
        assertRegistration(""StaticClassOfB"", resourceB + ""$StaticClassOfB"");
        assertRegistration(""InterfaceOfB"", resourceB + ""$InterfaceOfB"");
        assertRegistration(""InnerInnerOfB"", resourceB + ""$InnerClassOfB$InnerInnerOfB"");
    }
",non-flaky,5
113736,salesforce_reactive-grpc,ReactiveClientStandardServerInteropTest.oneToMany,"    @Test
    public void oneToMany() {
        ReactorGreeterGrpc.ReactorGreeterStub stub = ReactorGreeterGrpc.newReactorStub(channel);
        Mono<String> reactorRequest = Mono.just(""World"");
        Flux<String> reactorResponse = reactorRequest.map(this::toRequest).as(stub::sayHelloRespStream).map(this::fromResponse);

        StepVerifier.create(reactorResponse)
                .expectNext(""Hello World"", ""Hi World"", ""Greetings World"")
                .verifyComplete();
    }
",non-flaky,5
77702,pholser_junit-quickcheck,PrimitivePropertyParameterTypesTest.shouldHold,"    @Test public void rightOpenEndedRangedPrimitiveDouble() {
        @Property public void shouldHold(@InRange(minDouble = -2.71) double d) {
            assertThat(d, greaterThanOrEqualTo(-2.71));
            assertThat(d, lessThan(RangeAttributes.maxDouble()));
        }
",non-flaky,5
77537,dropwizard_dropwizard,PersonResourceExceptionMapperTest.testDefaultConstraintViolation,"    @Test
    public void testDefaultConstraintViolation() {
        assertThat(RESOURCES.target(""/person/blah/index"")
            .queryParam(""ind"", -1).request()
            .get().readEntity(String.class))
            .isEqualTo(""Invalid data"");
    }
",non-flaky,5
38261,palantir_atlasdb,AbstractSerializableTransactionTest.testClassicWriteSkew2Cell,"    @Test
    public void testClassicWriteSkew2Cell() {
        Transaction t0 = startTransaction();
        put(t0, ""row1"", ""col1"", ""100"");
        put(t0, ""row2"", ""col1"", ""100"");
        t0.commit();

        Transaction t1 = startTransaction();
        Transaction t2 = startTransaction();
        withdrawMoney(t1, true, true);
        withdrawMoney(t2, false, true);

        t2.commit();
        try {
            t1.commit();
            fail();
        } catch (TransactionSerializableConflictException e) {
            // this is expectecd to throw because it is a write skew
        }
    }
",non-flaky,5
104631,apache_pinot,OfflineClusterIntegrationTest.testRefreshTableConfigAndQueryTimeout,"  @Test
  public void testRefreshTableConfigAndQueryTimeout()
      throws Exception {
    // Set timeout as 5ms so that query will timeout
    TableConfig tableConfig = getOfflineTableConfig();
    tableConfig.setQueryConfig(new QueryConfig(5L));
    updateTableConfig(tableConfig);

    // Wait for at most 1 minute for broker to receive and process the table config refresh message
    TestUtils.waitForCondition(aVoid -> {
      try {
        JsonNode queryResponse = postQuery(TEST_TIMEOUT_QUERY);
        JsonNode exceptions = queryResponse.get(""exceptions"");
        if (exceptions.isEmpty()) {
          return false;
        }
        int errorCode = exceptions.get(0).get(""errorCode"").asInt();
        if (errorCode == QueryException.BROKER_TIMEOUT_ERROR_CODE) {
          // Timed out on broker side
          return true;
        }
        if (errorCode == QueryException.SERVER_NOT_RESPONDING_ERROR_CODE) {
          // Timed out on server side
          int numServersQueried = queryResponse.get(""numServersQueried"").asInt();
          int numServersResponded = queryResponse.get(""numServersResponded"").asInt();
          int numDocsScanned = queryResponse.get(""numDocsScanned"").asInt();
          return numServersQueried == getNumServers() && numServersResponded == 0 && numDocsScanned == 0;
        }
        return false;
      } catch (Exception e) {
        throw new RuntimeException(e);
      }
    }, 60_000L, ""Failed to refresh table config"");

    // Remove timeout so that query will finish
    tableConfig.setQueryConfig(null);
    updateTableConfig(tableConfig);

    // Wait for at most 1 minute for broker to receive and process the table config refresh message
    TestUtils.waitForCondition(aVoid -> {
      try {
        JsonNode queryResponse = postQuery(TEST_TIMEOUT_QUERY);
        JsonNode exceptions = queryResponse.get(""exceptions"");
        if (!exceptions.isEmpty()) {
          return false;
        }
        int numServersQueried = queryResponse.get(""numServersQueried"").asInt();
        int numServersResponded = queryResponse.get(""numServersResponded"").asInt();
        int numDocsScanned = queryResponse.get(""numDocsScanned"").asInt();
        return numServersQueried == getNumServers() && numServersResponded == getNumServers()
            && numDocsScanned == getCountStarResult();
      } catch (Exception e) {
        throw new RuntimeException(e);
      }
    }, 60_000L, ""Failed to refresh table config"");
  }
",non-flaky,5
89311,apache_samza,TestKafkaSystemAdminWithMock.testGetSSPMetadataEmptyPartition,"  @Test
  public void testGetSSPMetadataEmptyPartition() {
    SystemStreamPartition ssp = new SystemStreamPartition(TEST_SYSTEM, VALID_TOPIC, new Partition(0));
    SystemStreamPartition otherSSP = new SystemStreamPartition(TEST_SYSTEM, ""otherTopic"", new Partition(1));
    TopicPartition topicPartition = new TopicPartition(VALID_TOPIC, 0);
    TopicPartition otherTopicPartition = new TopicPartition(""otherTopic"", 1);
    when(mockKafkaConsumer.beginningOffsets(ImmutableList.of(topicPartition, otherTopicPartition))).thenReturn(
        ImmutableMap.of(topicPartition, 1L));
    when(mockKafkaConsumer.endOffsets(ImmutableList.of(topicPartition, otherTopicPartition))).thenReturn(
        ImmutableMap.of(topicPartition, 11L));

    Map<SystemStreamPartition, SystemStreamMetadata.SystemStreamPartitionMetadata> expected =
        ImmutableMap.of(ssp, new SystemStreamMetadata.SystemStreamPartitionMetadata(""1"", ""10"", ""11""), otherSSP,
            new SystemStreamMetadata.SystemStreamPartitionMetadata(null, null, null));
    assertEquals(expected, kafkaSystemAdmin.getSSPMetadata(ImmutableSet.of(ssp, otherSSP)));
  }
",non-flaky,5
170529,eclipse_jetty.project,TestSecurityAnnotationConversions.testPermitAll,"    @Test
    public void testPermitAll() throws Exception
    {
        //Assume we found 1 servlet with a @ServletSecurity security annotation
        WebAppContext wac = makeWebAppContext(PermitServlet.class.getCanonicalName(), ""permitServlet"", new String[]{
            ""/foo/*"", ""*.foo""
        });

        ServletSecurityAnnotationHandler annotationHandler = new ServletSecurityAnnotationHandler(wac);
        AnnotationIntrospector introspector = new AnnotationIntrospector(wac);
        introspector.registerHandler(annotationHandler);

        //set up the expected outcomes - no constraints at all as per Servlet Spec 3.1 pg 129
        //1 ConstraintMapping per ServletMapping pathSpec

        ConstraintMapping[] expectedMappings = new ConstraintMapping[]{};
        PermitServlet permit = new PermitServlet();
        introspector.introspect(permit, null);

        compareResults(expectedMappings, ((ConstraintAware)wac.getSecurityHandler()).getConstraintMappings());
    }
",non-flaky,5
19489,eclipse_xtext-core,SerializationUtilTest.testSyntaxErrorMessage,"	@Test
	public void testSyntaxErrorMessage() throws IOException {
		final String message = ""hi"";
		String [] issueCodes = { null, ""issue"" };
		String [][] issueDatas = { null, {null}, {""issue data""}};
		
		for (String[] issueData : issueDatas) {
			for (String issueCode : issueCodes) {
				SyntaxErrorMessage sem = new SyntaxErrorMessage(message, issueCode, issueData);
				ByteArrayOutputStream out = new ByteArrayOutputStream ();
				DataOutputStream dout = new DataOutputStream(out);
				SerializationUtil.writeSyntaxErrorMessage(dout, null, sem);
				dout.close();
				byte[] array = out.toByteArray();
				ByteArrayInputStream in = new ByteArrayInputStream(array); 
				DataInputStream din = new DataInputStream(in);
				SyntaxErrorMessage sem2 = SerializationUtil.readSyntaxErrorMessage(din, null);
				assertEquals(sem, sem2); 
			}
		}
		ByteArrayOutputStream out = new ByteArrayOutputStream ();
		DataOutputStream dout = new DataOutputStream(out);
		SerializationUtil.writeSyntaxErrorMessage(dout, null, null);
		dout.close();
		byte[] array = out.toByteArray();
		ByteArrayInputStream in = new ByteArrayInputStream(array); 
		DataInputStream din = new DataInputStream(in);
		SyntaxErrorMessage readMessage = SerializationUtil.readSyntaxErrorMessage(din, null);
		assertNull(readMessage);
	}
",non-flaky,5
78299,apache_beam,OutputAndTimeBoundedSplittableProcessElementInvokerTest.testInvokeProcessElementTimeBounded,"  @Test
  public void testInvokeProcessElementTimeBounded() throws Exception {
    SplittableProcessElementInvoker<Void, String, OffsetRange, OffsetRangeTracker>.Result res =
        runTest(10000, Duration.ZERO, Integer.MAX_VALUE, Duration.millis(100));
    assertFalse(res.getContinuation().shouldResume());
    OffsetRange residualRange = res.getResidualRestriction();
    // Should process ideally around 30 elements - but due to timing flakiness, we can't enforce
    // that precisely. Just test that it's not egregiously off.
    assertThat(residualRange.getFrom(), greaterThan(10L));
    assertThat(residualRange.getFrom(), lessThan(100L));
    assertEquals(10000, residualRange.getTo());
  }
",non-flaky,5
86049,graylog2_graylog2-server,NotificationGracePeriodServiceTest.falseWithDisabledGracePeriod,"    @Test
    public void falseWithDisabledGracePeriod() {
        final NotificationGracePeriodService notificationGracePeriodService = new NotificationGracePeriodService();

        when(settings.gracePeriodMs()).thenReturn(0L);
        when(definition.notificationSettings()).thenReturn(settings);
        when(definition.id()).thenReturn(""1234"");

        final Event event = new TestEvent();
        event.setKeyTuple(ImmutableList.of(""testkey""));
        assertThat(notificationGracePeriodService.inGracePeriod(definition, ""5678"", event)).isFalse();
        assertThat(notificationGracePeriodService.inGracePeriod(definition, ""5678"", event)).isFalse();
    }
",non-flaky,5
122610,vespa-engine_vespa,UnixPathTest.createDirectoryWithPermissions,"    @Test
    public void createDirectoryWithPermissions() {
        Path path = fs.getPath(""dir"");
        UnixPath unixPath = new UnixPath(path);
        String permissions = ""rwxr-xr--"";
        unixPath.createDirectory(permissions);
        assertTrue(unixPath.isDirectory());
        assertEquals(permissions, unixPath.getPermissions());
    }
",non-flaky,5
76712,quarkusio_quarkus,RegisterForReflectionITCase.testTargetWithoutNested,"    @Test
    public void testTargetWithoutNested() {
        final String resourceD = BASE_PKG + "".ResourceD"";

        assertRegistration(""FAILED"", resourceD);
        assertRegistration(""StaticClassOfD"", resourceD + ""$StaticClassOfD"");
        assertRegistration(""FAILED"", resourceD + ""$StaticClassOfD$OtherAccessibleClassOfD"");
    }
",non-flaky,5
137100,spring-projects_spring-framework,AbstractAnnotationMetadataTests.getAllAnnotationAttributesReturnsAllAttributes,"	@Test
	public void getAllAnnotationAttributesReturnsAllAttributes() {
		MultiValueMap<String, Object> attributes =
				get(WithMetaAnnotationAttributes.class).getAllAnnotationAttributes(AnnotationAttributes.class.getName());
		assertThat(attributes).containsOnlyKeys(""name"", ""size"");
		assertThat(attributes.get(""name"")).containsExactlyInAnyOrder(""m1"", ""m2"");
		assertThat(attributes.get(""size"")).containsExactlyInAnyOrder(1, 2);
	}
",non-flaky,5
86105,graylog2_graylog2-server,DBEventProcessorStateServiceTest.findByEventProcessorsAndMaxTimestamp,"    @Test
    public void findByEventProcessorsAndMaxTimestamp() {
        assertThat(stateService.findByEventDefinitionId(""54e3deadbeefdeadbeefaff3"")).isPresent().get().satisfies(dto -> {
            final DateTime maxTs = dto.maxProcessedTimestamp();
            final String id = dto.eventDefinitionId();

            assertThat(stateService.findByEventDefinitionsAndMaxTimestamp(ImmutableSet.of(id), maxTs))
                    .hasSize(1);
            assertThat(stateService.findByEventDefinitionsAndMaxTimestamp(ImmutableSet.of(id), maxTs.minusHours(1)))
                    .hasSize(1);
            assertThat(stateService.findByEventDefinitionsAndMaxTimestamp(ImmutableSet.of(id), maxTs.plusHours(1)))
                    .hasSize(0);

            assertThatThrownBy(() -> stateService.findByEventDefinitionsAndMaxTimestamp(ImmutableSet.of(), maxTs))
                    .isInstanceOf(IllegalArgumentException.class);
            assertThatThrownBy(() -> stateService.findByEventDefinitionsAndMaxTimestamp(null, maxTs))
                    .isInstanceOf(IllegalArgumentException.class);
            assertThatThrownBy(() -> stateService.findByEventDefinitionsAndMaxTimestamp(ImmutableSet.of(id), null))
                    .isInstanceOf(IllegalArgumentException.class);

            assertThat(stateService.findByEventDefinitionsAndMaxTimestamp(ImmutableSet.of(""nope""), maxTs))
                    .hasSize(0);
            assertThat(stateService.findByEventDefinitionsAndMaxTimestamp(ImmutableSet.of(id, ""nope""), maxTs))
                    .hasSize(1);
        });
    }
",non-flaky,5
30924,camunda-cloud_zeebe,MsgPackWriterMiscTest.testEncodedStringLength,"  @Test
  public void testEncodedStringLength() {
    assertThat(MsgPackWriter.getEncodedStringLength(0x1f)).isEqualTo(1 + 0x1f);
    assertThat(MsgPackWriter.getEncodedStringLength(0xff)).isEqualTo(2 + 0xff);
    assertThat(MsgPackWriter.getEncodedStringLength(0xffff)).isEqualTo(3 + 0xffff);
    assertThat(MsgPackWriter.getEncodedStringLength(0x7fff_fffa)).isEqualTo(5 + 0x7fff_fffa);
  }
",non-flaky,5
26880,wildfly_wildfly,NamingContextTestCase.testCreateSubcontext,"    @Test
    public void testCreateSubcontext() throws Exception {
        assertTrue(namingContext.createSubcontext(new CompositeName(""test"")) instanceof NamingContext);

        //the same with security permissions
        assertTrue(testActionPermission(JndiPermission.ACTION_CREATE_SUBCONTEXT, namingContext, ""securitytest"") instanceof NamingContext);
    }
",non-flaky,5
156170,soot-oss_soot,TypingMinimizeTest.testAllNonRelatedClassesTyping,"  @Test
  public void testAllNonRelatedClassesTyping() {

    List<Typing> typingList = new ArrayList<>();
    Local x1 = new JimpleLocal(""$x1"", null);

    Typing typing1 = new Typing(Arrays.asList(x1));
    typing1.set(x1, objectType);
    typingList.add(typing1);

    Typing typing2 = new Typing(Arrays.asList(x1));
    typing2.set(x1, stringType);
    typingList.add(typing2);

    Typing typing3 = new Typing(Arrays.asList(x1));
    typing3.set(x1, cloneableType);
    typingList.add(typing3);

    Typing typing4 = new Typing(Arrays.asList(x1));
    typing4.set(x1, integerType);
    typingList.add(typing4);

    Typing typing5 = new Typing(Arrays.asList(x1));
    typing5.set(x1, processType);
    typingList.add(typing5);

    Typing typing6 = new Typing(Arrays.asList(x1));
    typing6.set(x1, interfaceType);
    typingList.add(typing6);

    Typing typing7 = new Typing(Arrays.asList(x1));
    typing7.set(x1, abstractType);
    typingList.add(typing7);

    Typing typing8 = new Typing(Arrays.asList(x1));
    typing8.set(x1, fatherClassType);
    typingList.add(typing8);

    getTypingStrategy().minimize(typingList, new BytecodeHierarchy());

    assertEquals(7, typingList.size());
    assertThat(typingList, containsInAnyOrder(typing2, typing3, typing4, typing5, typing6, typing7, typing8));
  }
",non-flaky,5
133966,CorfuDB_CorfuDB,LogUnitHandlerTest.testTailResponse,"    @Test
    public void testTailResponse() {
        TailsResponse sampleTailsResponse = new TailsResponse(0L, 0L, new HashMap<>());
        ResponseMsg response = getResponseMsg(
                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.CHECK),
                getTailResponseMsg(sampleTailsResponse.getEpoch(), sampleTailsResponse.getLogTail(),
                        sampleTailsResponse.getStreamTails())
        );

        logUnitHandler.handleMessage(response, mockChannelHandlerContext);
        // Verify that the correct request was completed (once) with the appropriate value,
        // and that we did not complete exceptionally.
        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));
        verify(mockClientRouter).completeRequest(response.getHeader().getRequestId(), sampleTailsResponse);
    }
",non-flaky,5
110188,Wikidata_wikidata-toolkit,RdfConverterTest.testWriteItemDocument,"	@Test
	public void testWriteItemDocument() throws RDFHandlerException,
			IOException, RDFParseException {
		ItemDocument document = this.objectFactory.createItemDocument();
		this.rdfConverter.writeItemDocument(document);
		this.rdfWriter.finish();
		Model model = RdfTestHelpers.parseRdf(out.toString());
		assertEquals(model, RdfTestHelpers.parseRdf(RdfTestHelpers
				.getResourceFromFile(""ItemDocument.rdf"")));
	}
",non-flaky,5
99720,apache_cassandra,StressSettingsTest.isSerializable,"    @Test
    public void isSerializable() throws Exception
    {
        Map<String, String[]> args = new HashMap<>();
        args.put(""write"", new String[] {});
        StressSettings settings = StressSettings.get(args);
        // Will throw if not all settings are Serializable
        new ObjectOutputStream(new ByteArrayOutputStream()).writeObject(settings);
    }
",non-flaky,5
98617,nutzam_nutz,El2Test.test_issue411,"    @Test
    public void test_issue411(){
    	El el=new El(""a[0].b.isPass('')?'1':'2'"");
        Context ctx = Lang.context();
        ctx.set(""a"",new Object[]{new org.nutz.el.issue411.Issue411.A()} );
        assertEquals(""1"", el.eval(ctx));
    }
",non-flaky,5
30979,camunda-cloud_zeebe,UnpackedObjectTest.newPropertiesShouldHaveDefaultValueAfterReadingOldSerialization,"    @Test
    public void newPropertiesShouldHaveDefaultValueAfterReadingOldSerialization() {
      // given

      // set the new property to a value that is different from the default value
      addedProperty.setValue(true);

      // when
      newSchemaObject.wrap(bufferSerializedWithOldSchema);

      // then
      assertThat(addedProperty.getValue())
          .describedAs(""value of added property after reading"")
          .isFalse();
    }
",non-flaky,5
178032,aosp-mirror_platform_frameworks_support,GuidedDatePickerTest.testJanuaryToFebruaryTransitionForNonLeapYear,"    @Test
    public void testJanuaryToFebruaryTransitionForNonLeapYear() throws Throwable {
        long startTime = System.currentTimeMillis();
        Intent intent = new Intent();

        String title = ""Date Picker Transition Test"";
        String breadcrumb = ""Month Transition Test Demo"";
        String description = ""Testing the transition from Jan to Feb (nonleap year)"";
        GuidanceStylist.Guidance guidance = new GuidanceStylist.Guidance(title, description,
                breadcrumb, null);

        List<GuidedAction> actionList = new ArrayList<>();

        Calendar cal = Calendar.getInstance();

        cal.set(Calendar.YEAR, 2017);   // 2017 is a leap year
        cal.set(Calendar.MONTH, Calendar.JANUARY);
        cal.set(Calendar.DAY_OF_MONTH, cal.getActualMaximum(Calendar.DAY_OF_MONTH));
        Date initialDate = cal.getTime();

        GuidedDatePickerAction action = new GuidedDatePickerAction.Builder(
                mContext)
                .id(0)
                .title(""Date"")
                .date(initialDate.getTime())
                .datePickerFormat(""DMY"")
                .build();

        actionList.add(action);

        GuidedStepAttributesTestFragment.clear();
        GuidedStepAttributesTestFragment.GUIDANCE = guidance;
        GuidedStepAttributesTestFragment.ACTION_LIST = actionList;

        initActivity(intent);

        DatePicker mPickerView = (DatePicker) mActivity.findViewById(
                R.id.guidedactions_activator_item);

        verticalScrollToFieldValue(Calendar.MONTH, Calendar.FEBRUARY, new int[] {0, 1, 2},
                mPickerView, KeyEvent.KEYCODE_DPAD_DOWN);
        long executionTime = System.currentTimeMillis() - startTime;
        Log.d(TAG, ""testJanuaryToFebruaryTransition() Execution time: "" + executionTime);
        Thread.sleep(FINAL_WAIT);
    }
",non-flaky,5
97670,vojtechhabarta_typescript-generator,SpringTest.testEntityParameter,"    @Test
    public void testEntityParameter() {
        final Settings settings = TestUtils.settings();
        settings.outputFileType = TypeScriptFileType.implementationFile;
        settings.generateSpringApplicationClient = true;
        final String output = new TypeScriptGenerator(settings).generateTypeScript(Input.from(Controller3.class));
        Assert.assertTrue(output.contains(""setEntity(data: Data1): RestResponse<void>""));
        Assert.assertTrue(output.contains(""interface Data1""));
    }
",non-flaky,5
94623,square_okhttp,InterceptorTest.intercept,"  @Test public void networkInterceptorsHaveConnectionAccess() throws Exception {
      @Override public Response intercept(Chain chain) throws IOException {
        Connection connection = chain.connection();
        assertNotNull(connection);
        return chain.proceed(chain.request());
      }
",non-flaky,5
122568,vespa-engine_vespa,ChildProcess2ImplTest.testMaxOutputBytes,"    @Test
    public void testMaxOutputBytes() throws Exception {
        when(commandLine.getTimeout()).thenReturn(Duration.ofSeconds(1));
        when(commandLine.getMaxOutputBytes()).thenReturn(10L);
        when(commandLine.getOutputEncoding()).thenReturn(StandardCharsets.UTF_8);
        when(commandLine.getSigTermGracePeriod()).thenReturn(Duration.ofMinutes(2));
        when(commandLine.getSigKillGracePeriod()).thenReturn(Duration.ofMinutes(3));
        when(commandLine.toString()).thenReturn(""program arg"");

        when(timer.currentTime()).thenReturn(
                Instant.ofEpochMilli(0),
                Instant.ofEpochMilli(1));

        when(processApi.waitFor(anyLong(), any())).thenReturn(true);

        Files.write(temporaryFile, ""1234567890123"".getBytes(StandardCharsets.UTF_8));

        try (ChildProcess2Impl child =
                     new ChildProcess2Impl(commandLine, processApi, temporaryFile, timer)) {
            try {
                child.waitForTermination();
                fail();
            } catch (LargeOutputChildProcessException e) {
                assertEquals(
                        ""Command 'program arg' output more than 13 bytes: stdout/stderr: '1234567890123'"",
                        e.getMessage());
            }
        }
    }
",non-flaky,5
53169,cloudfoundry_uaa,ScimGroupTests.cant_drop_id,"    @Test(expected = IllegalArgumentException.class)
    public void cant_drop_id() {
        patch.getMeta().setAttributes(new String[] {""id""});
        group.patch(patch);
    }
",non-flaky,5
118779,netty_netty,AbstractReferenceCountedByteBufTest.testRetainOverflow2,"    @Test(expected = IllegalReferenceCountException.class)
    public void testRetainOverflow2() {
        AbstractReferenceCountedByteBuf referenceCounted = newReferenceCounted();
        assertEquals(1, referenceCounted.refCnt());
        referenceCounted.retain(Integer.MAX_VALUE);
    }
",non-flaky,5
159659,liquibase_liquibase,AbstractIntegrationTest.testDiffExternalForeignKeys,"   @Test
   public void testDiffExternalForeignKeys() throws Exception {
       assumeNotNull(this.getDatabase());
       clearDatabase();
       Liquibase liquibase = createLiquibase(externalfkInitChangeLog);
       liquibase.update(contexts);

       DiffResult diffResult = liquibase.diff(database, null, new CompareControl());
       DiffResultAssert.assertThat(diffResult).containsMissingForeignKeyWithName(""fk_person_country"");
   }
",non-flaky,5
33750,alibaba_fastjson,FastJsonpHttpMessageConverter4Case2Test.test2_2,"    @Test
    public void test2_2() throws Exception {

        String jsonStr = ""[{\""name\"":\""p1\"",\""sonList\"":[{\""name\"":\""s1\""}]},{\""name\"":\""p2\"",\""sonList\"":[{\""name\"":\""s2\""},{\""name\"":\""s3\""}]}]"";

        ResultActions actions = mockMvc.perform((post(""/fastjson/test2?jsonp=fnUpdateSome"").characterEncoding(""UTF-8"")
                .content(jsonStr).contentType(MediaType.APPLICATION_JSON)));
        actions.andDo(print());
        actions.andExpect(status().isOk()).andExpect(content().contentType(APPLICATION_JAVASCRIPT))
                .andExpect(content().string(""/**/fnUpdateSome({\""p1\"":1,\""p2\"":2})""));
    }
",non-flaky,5
99765,apache_cassandra,RateBasedBackPressureTest.testWindowSizeMustBeBiggerEqualThanTen,"    @Test(expected = IllegalArgumentException.class)
    public void testWindowSizeMustBeBiggerEqualThanTen() throws Exception
    {
        new RateBasedBackPressure(ImmutableMap.of(HIGH_RATIO, ""0.9"", FACTOR, ""5"", FLOW, ""FAST""), new TestTimeSource(), 1);
    }
",non-flaky,5
156052,jReddit_jReddit,JsonUtilsTest.testSafeJsonToDouble,"    @Test
    public void testSafeJsonToDouble() {
        Assert.assertNull(JsonUtils.safeJsonToDouble(null));
        Assert.assertNull(JsonUtils.safeJsonToDouble(""abcd""));
        Assert.assertNull(JsonUtils.safeJsonToDouble(""""));
        Assert.assertEquals((Double) (double) 35141, JsonUtils.safeJsonToDouble(""35141""), 0);
        Assert.assertEquals((Double) (double) 0, JsonUtils.safeJsonToDouble(""0""), 0);
    }
",non-flaky,5
60887,apache_druid,MaterializedViewSupervisorSpecTest.testSupervisorSerialization,"  @Test
  public void testSupervisorSerialization() throws IOException
  {
    String supervisorStr = ""{\n"" +
                           ""  \""type\"" : \""derivativeDataSource\"",\n"" +
                           ""  \""baseDataSource\"": \""wikiticker\"",\n"" +
                           ""  \""dimensionsSpec\"":{\n"" +
                           ""            \""dimensions\"" : [\n"" +
                           ""              \""isUnpatrolled\"",\n"" +
                           ""              \""metroCode\"",\n"" +
                           ""              \""namespace\"",\n"" +
                           ""              \""page\"",\n"" +
                           ""              \""regionIsoCode\"",\n"" +
                           ""              \""regionName\"",\n"" +
                           ""              \""user\""\n"" +
                           ""            ]\n"" +
                           ""          },\n"" +
                           ""    \""metricsSpec\"" : [\n"" +
                           ""        {\n"" +
                           ""          \""name\"" : \""count\"",\n"" +
                           ""          \""type\"" : \""count\""\n"" +
                           ""        },\n"" +
                           ""        {\n"" +
                           ""          \""name\"" : \""added\"",\n"" +
                           ""          \""type\"" : \""longSum\"",\n"" +
                           ""          \""fieldName\"" : \""added\""\n"" +
                           ""        }\n"" +
                           ""      ],\n"" +
                           ""  \""tuningConfig\"": {\n"" +
                           ""      \""type\"" : \""hadoop\""\n"" +
                           ""  }\n"" +
                           ""}"";
    MaterializedViewSupervisorSpec expected = new MaterializedViewSupervisorSpec(
        ""wikiticker"",
        new DimensionsSpec(
            Lists.newArrayList(
                new StringDimensionSchema(""isUnpatrolled""),
                new StringDimensionSchema(""metroCode""),
                new StringDimensionSchema(""namespace""),
                new StringDimensionSchema(""page""),
                new StringDimensionSchema(""regionIsoCode""),
                new StringDimensionSchema(""regionName""),
                new StringDimensionSchema(""user"")
            ),
            null,
            null
        ),
        new AggregatorFactory[]{
            new CountAggregatorFactory(""count""),
            new LongSumAggregatorFactory(""added"", ""added"")
        },
        HadoopTuningConfig.makeDefaultTuningConfig(),
        null,
        null,
        null,
        null,
        null,
        false,
        objectMapper,
        null,
        null,
        null,
        null,
        null,
        new MaterializedViewTaskConfig(),
        EasyMock.createMock(AuthorizerMapper.class),
        new NoopChatHandlerProvider(),
        new SupervisorStateManagerConfig()
    );
    MaterializedViewSupervisorSpec spec = objectMapper.readValue(supervisorStr, MaterializedViewSupervisorSpec.class);
    Assert.assertEquals(expected.getBaseDataSource(), spec.getBaseDataSource());
    Assert.assertEquals(expected.getId(), spec.getId());
    Assert.assertEquals(expected.getDataSourceName(), spec.getDataSourceName());
    Assert.assertEquals(expected.getDimensions(), spec.getDimensions());
    Assert.assertEquals(expected.getMetrics(), spec.getMetrics());
  }
",non-flaky,5
135775,Netflix_Hystrix,HystrixPluginsTest.testPropertiesStrategyViaProperty,"    @Test
    public void testPropertiesStrategyViaProperty() {
        try {
            String fullClass = HystrixPropertiesStrategyTestImpl.class.getName();
            System.setProperty(""hystrix.plugin.HystrixPropertiesStrategy.implementation"", fullClass);
            HystrixPropertiesStrategy impl = HystrixPlugins.getInstance().getPropertiesStrategy();
            assertTrue(impl instanceof HystrixPropertiesStrategyTestImpl);
        } finally {
            System.clearProperty(""hystrix.plugin.HystrixPropertiesStrategy.implementation"");
        }
	}*/
",non-flaky,5
26745,MundaneImmortal_pair-distribution-app,DeveloperTest.testToString,"	@Test
	public void testToString() {
		Developer developer = new Developer(""developerId"");
		
		assertThat(developer.toString(), is(""developerId""));
	}
",non-flaky,5
113988,apache_struts,URLDecoderUtilTest.testURLDecodeStringInvalid,"    @Test
    public void testURLDecodeStringInvalid() {
        // %n rather than %nn should throw an IAE according to the Javadoc
        Exception exception = null;
        try {
            URLDecoderUtil.decode(""%5xxxxx"", ""ISO-8859-1"");
        } catch (Exception e) {
            exception = e;
        }
        assertTrue(exception instanceof IllegalArgumentException);

        // Edge case trying to trigger ArrayIndexOutOfBoundsException
        exception = null;
        try {
            URLDecoderUtil.decode(""%5"", ""ISO-8859-1"");
        } catch (Exception e) {
            exception = e;
        }
        assertTrue(exception instanceof IllegalArgumentException);
    }
",non-flaky,5
135791,Netflix_Hystrix,RollingCollapserBatchSizeDistributionStreamTest.onCompleted,"    @Test
    public void testEmptyStreamProducesEmptyDistributions() {
        HystrixCollapserKey key = HystrixCollapserKey.Factory.asKey(""Collapser-Batch-Size-A"");
        stream = RollingCollapserBatchSizeDistributionStream.getInstance(key, 10, 100);
        stream.startCachingStreamValuesIfUnstarted();

        final CountDownLatch latch = new CountDownLatch(1);
        stream.observe().skip(10).take(10).subscribe(new Subscriber<CachedValuesHistogram>() {
            @Override
            public void onCompleted() {
                latch.countDown();
            }
",non-flaky,5
179457,abel533_Mapper,CamelCaseTest.testCamelhumpToUnderline,"    @Test
    public void testCamelhumpToUnderline() {
        Assert.assertEquals(""user_id"", StringUtil.camelhumpToUnderline(""userId""));
        Assert.assertEquals(""sys_user"", StringUtil.camelhumpToUnderline(""sysUser""));
        Assert.assertEquals(""sys_user_role"", StringUtil.camelhumpToUnderline(""sysUserRole""));
        Assert.assertEquals(""s_function"", StringUtil.camelhumpToUnderline(""sFunction""));
    }
",non-flaky,5
77563,dropwizard_dropwizard,OptionalHeaderParamResourceTest.getMessage,"    @Test
        public String getMessage(@HeaderParam(""message"") Optional<String> message) {
            return message.orElse(""Default Message"");
        }
",non-flaky,5
162703,OpenAPITools_openapi-generator,CatTest.declawedTest,"    @Test
    public void declawedTest() {
        // TODO: test declawed
    }
",non-flaky,5
114010,apache_struts,StrutsTilesAnnotationProcessorTest.findAnnotationMultipleActionNameNull,"    @Test
    public void findAnnotationMultipleActionNameNull() {
        StrutsTilesAnnotationProcessor annotationProcessor = new StrutsTilesAnnotationProcessor();
        TilesDefinition tilesDefinition = annotationProcessor.findAnnotation(new TilesTestActionMultipleAnnotations(), null);
        Assert.assertNotNull(tilesDefinition);
        Assert.assertEquals(""def1"", tilesDefinition.name());
    }
",non-flaky,5
112158,apache_shardingsphere-elasticjob,JobConfigurationGsonTypeAdapterTest.assertToDataflowJobJson,"    @Test
    public void assertToDataflowJobJson() {
        assertThat(GsonFactory.getGson().toJson(new TestJobRootConfiguration(new TestDataflowJobConfiguration(true).getTypeConfig())),
                is(APIJsonConstants.getDataflowJobJson(IgnoreJobExceptionHandler.class.getCanonicalName())));
    }
",non-flaky,5
98329,spotify_docker-client,DockerHostTest.testFromTcpSocketWithCert,"  @Test
  public void testFromTcpSocketWithCert() throws Exception {
    final String tcpSocket = ""tcp://127.0.0.1:2375"";
    final String certPath = ""/path/to/cert"";

    final DockerHost dockerHost = DockerHost.from(tcpSocket, certPath);
    assertThat(dockerHost.host(), equalTo(""127.0.0.1:2375""));
    assertThat(dockerHost.uri(), equalTo(new URI(""https://127.0.0.1:2375"")));
    assertThat(dockerHost.bindUri(), equalTo(new URI(tcpSocket)));
    assertThat(dockerHost.port(), equalTo(2375));
    assertThat(dockerHost.address(), equalTo(""127.0.0.1""));
    assertThat(dockerHost.dockerCertPath(), equalTo(certPath));
  }
",non-flaky,5
38207,palantir_atlasdb,RocksDbKeyValueServiceTest.testGetRange,"    @Test
    public void testGetRange() {
        final Cell cell = Cell.create(""r1"".getBytes(), ""c1"".getBytes());
        final Cell cell2 = Cell.create(""r1"".getBytes(), ""c2"".getBytes());
        final Cell cell3 = Cell.create(""r2"".getBytes(), ""c2"".getBytes());
        db.put(TABLE, ImmutableMap.of(cell, ""v1"".getBytes()), 2);
        db.put(TABLE, ImmutableMap.of(cell2, ""v2"".getBytes()), 2);
        db.put(TABLE, ImmutableMap.of(cell3, ""v3"".getBytes()), 4);
        final RangeRequest range = RangeRequest.builder().endRowExclusive(""r2"".getBytes()).build();
        final ClosableIterator<? extends RowResult<Value>> it = db.getRange(TABLE, range, 10);
        try {
            final List<RowResult<Value>> list = Lists.newArrayList();
            Iterators.addAll(list, it);
            assertEquals(1, list.size());
            final Map<Cell, Value> rows = db.getRows(TABLE, ImmutableList.of(""r1"".getBytes()), ColumnSelection.all(), 3);
            assertEquals(2, rows.size());
            final RowResult<Value> row = list.iterator().next();
            final Map<Cell, Value> cellsFromRow = putAll(Maps.<Cell, Value>newHashMap(), row.getCells());
            assertEquals(rows, cellsFromRow);
        } finally {
            it.close();
        }
    }
",non-flaky,5
70840,apache_kafka,WorkerSourceTaskTest.testSendRecordsPropagatesTimestamp,"    @Test
    public void testSendRecordsPropagatesTimestamp() throws Exception {
        final Long timestamp = System.currentTimeMillis();

        createWorkerTask();

        List<SourceRecord> records = Collections.singletonList(
                new SourceRecord(PARTITION, OFFSET, ""topic"", null, KEY_SCHEMA, KEY, RECORD_SCHEMA, RECORD, timestamp)
        );

        Capture<ProducerRecord<byte[], byte[]>> sent = expectSendRecordAnyTimes();

        PowerMock.replayAll();

        Whitebox.setInternalState(workerTask, ""toSend"", records);
        Whitebox.invokeMethod(workerTask, ""sendRecords"");
        assertEquals(timestamp, sent.getValue().timestamp());

        PowerMock.verifyAll();
    }
",non-flaky,5
59582,looly_hutool,MailTest.sendWithLongNameFileTest,"	@Test
	public void sendWithLongNameFileTest() {
		//éä»¶åé¿åº¦å¤§äº60æ¶çæµè¯
		MailUtil.send(""hutool@foxmail.com"", ""æµè¯"", ""<h1>é®ä»¶æ¥èªHutoolæµè¯</h1>"", true, FileUtil.file(""d:/6-LongLongä¸é¶æ®µå¹³å°å»ºè®¾å¨æ¥2018.3.12-3.16.xlsx""));
	}
",non-flaky,5
122640,vespa-engine_vespa,YumTest.testAlreadyRemoved,"    @Test
    public void testAlreadyRemoved() {
        terminal.expectCommand(
                ""yum remove --assumeyes package-1 package-2 2>&1"",
                0,
                ""foobar\nNo Packages marked for removal\n"");

        assertFalse(yum
                .remove(""package-1"", ""package-2"")
                .converge(taskContext));
    }
",non-flaky,5
94675,square_okhttp,Http2Test.goAway,"  @Test public void goAwayWithDebugDataRoundTrip() throws IOException {
      @Override public void goAway(
          int lastGoodStreamId, ErrorCode errorCode, ByteString debugData) {
        assertEquals(0, lastGoodStreamId);
        assertEquals(expectedError, errorCode);
        assertEquals(expectedData, debugData);
      }
",non-flaky,5
178041,aosp-mirror_platform_frameworks_support,GuidedDatePickerTest.testDateRangesWithAllFieldsEqual,"    @Test
    public void testDateRangesWithAllFieldsEqual() throws Throwable {

        long startTime = System.currentTimeMillis();

        GuidedDatePickerAction[] datePickerActions = setupDateActionsForMinAndMaxRangeTests();

        scrollToMinAndMaxDates(new int[] {0, 1, 2}, datePickerActions[4]);
        long executionTime = System.currentTimeMillis() - startTime;
        Log.d(TAG, ""testDateRangesWithAllFieldsEqual() Execution time: "" + executionTime);
        Thread.sleep(FINAL_WAIT);
    }
",non-flaky,5
53203,cloudfoundry_uaa,TotpMfaEndpointIntegrationTests.testQRCodeScreen_ClickManualAndReturn,"    @Test
    public void testQRCodeScreen_ClickManualAndReturn() throws Exception{
        performLogin(username);
        assertEquals(zoneUrl + ""/login/mfa/register"", webDriver.getCurrentUrl());

        webDriver.findElement(By.linkText(""manual setup instructions"")).click();
        assertEquals(zoneUrl + ""/login/mfa/manual"", webDriver.getCurrentUrl());

        webDriver.findElement(By.id(""Back"")).click();
        assertEquals(zoneUrl + ""/login/mfa/register"", webDriver.getCurrentUrl());

        String imageSrc = webDriver.findElement(By.id(""qr"")).getAttribute(""src"");

        String secretKey = getSecretFromQrImageString(imageSrc);

        webDriver.findElement(By.id(""Next"")).click();
        verifyCodeOnRegistration(secretKey, ""/"");
    }
",non-flaky,5
118756,netty_netty,ByteBufUtilTest.testWriteUtf8Surrogates,"    @Test
    public void testWriteUtf8Surrogates() {
        // leading surrogate + trailing surrogate
        String surrogateString = new StringBuilder(2)
                                .append('a')
                                .append('\uD800')
                                .append('\uDC00')
                                .append('b')
                                .toString();
        ByteBuf buf = Unpooled.buffer(16);
        buf.writeBytes(surrogateString.getBytes(CharsetUtil.UTF_8));
        ByteBuf buf2 = Unpooled.buffer(16);
        ByteBufUtil.writeUtf8(buf2, surrogateString);

        assertEquals(buf, buf2);
        assertEquals(buf.readableBytes(), ByteBufUtil.utf8Bytes(surrogateString));

        buf.release();
        buf2.release();
    }
",non-flaky,5
78307,apache_beam,SimpleDoFnRunnerTest.testProcessElementExceptionsWrappedAsUserCodeException,"  @Test
  public void testProcessElementExceptionsWrappedAsUserCodeException() {
    ThrowingDoFn fn = new ThrowingDoFn();
    DoFnRunner<String, String> runner =
        new SimpleDoFnRunner<>(
            null,
            fn,
            NullSideInputReader.empty(),
            null,
            null,
            Collections.emptyList(),
            mockStepContext,
            null,
            Collections.emptyMap(),
            WindowingStrategy.of(new GlobalWindows()));

    thrown.expect(UserCodeException.class);
    thrown.expectCause(is(fn.exceptionToThrow));

    runner.processElement(WindowedValue.valueInGlobalWindow(""anyValue""));
  }
",non-flaky,5
26779,MundaneImmortal_pair-distribution-app,CompanyTest.testGetTrack,"	@Test
	public void testGetTrack() {
		assertThat(new Company(""Company"").getTrack(), is(""COMPANY-ops/interrupt""));
	}
",non-flaky,5
106648,Alluxio_alluxio,AlluxioFuseFileSystemTest.mkDir,"  @Test
  public void mkDir() throws Exception {
    long mode = 0755L;
    mFuseFs.mkdir(""/foo/bar"", mode);
    verify(mFileSystem).createDirectory(BASE_EXPECTED_URI.join(""/foo/bar""),
        CreateDirectoryPOptions.newBuilder()
            .setMode(new alluxio.security.authorization.Mode((short) mode).toProto())
            .build());
  }
",non-flaky,5
110160,Wikidata_wikidata-toolkit,WebResourceFetcherTest.testSetProxy,"	@Test
	public void testSetProxy() {
		Proxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(
				""test.adress"", 8080));
		WebResourceFetcherImpl.setProxy(proxy);
		assertTrue(WebResourceFetcherImpl.hasProxy());
		assertEquals(proxy, WebResourceFetcherImpl.getProxy());
	}
",non-flaky,5
135067,undertow-io_undertow,URLUtilsTestCase.testIsAbsoluteUrlRecognizingEmptyOrNullAsRelative,"    @Test
    public void testIsAbsoluteUrlRecognizingEmptyOrNullAsRelative() {
        assertFalse(URLUtils.isAbsoluteUrl(null));
        assertFalse(URLUtils.isAbsoluteUrl(""""));
    }
",non-flaky,5
98655,nutzam_nutz,RawViewTest.test_raw2,"    // @Test
    public void test_raw2() throws Throwable {
        File src = new File(""H://main_qt"");
        File dst = new File(""H://cache.tmp"");
        RangeRange rangeRange = new RangeRange(0, src.length());
        // RawView.writeFileRange(src, new FileOutputStream(dst), rangeRange);
        //
        // System.out.println(Lang.digest(""md5"", src));
        // System.out.println(Lang.digest(""md5"", dst));

        List<RangeRange> rs = new ArrayList<RawView.RangeRange>();
        RawView.parseRange(""bytes=0-,-1000000,22222-22222222222"", rs, Long.MAX_VALUE);
        System.out.println(Json.toJson(rs));

        src = new File(""H://raw"");
        FileOutputStream out = new FileOutputStream(src);
        for (int i = 0; i < 255; i++) {
            out.write(i);
        }
        out.flush();
        out.close();

        rs = new ArrayList<RawView.RangeRange>();
        RawView.parseRange(""bytes=0-127"", rs, 256);
        rangeRange = rs.get(0);
        RawView.writeFileRange(src, new FileOutputStream(dst), rangeRange);
        System.out.println(dst.length());
        FileInputStream in = new FileInputStream(dst);
        for (int i = 0; i < 128; i++) {
            if (in.read() != i) {
                System.out.println(""ERR"");
            }
        }
        Streams.safeClose(in);

        rs = new ArrayList<RawView.RangeRange>();
        RawView.parseRange(""bytes=128-"", rs, 256);
        rangeRange = rs.get(0);
        RawView.writeFileRange(src, new FileOutputStream(dst), rangeRange);
        in = new FileInputStream(dst);
        for (int i = 0; i < 128; i++) {
            if (in.read() != (i + 128)) {
                System.out.println(""ERR"");
            }
        }
        Streams.safeClose(in);

        rs = new ArrayList<RawView.RangeRange>();
        RawView.parseRange(""bytes=-64"", rs, 256);
        rangeRange = rs.get(0);
        RawView.writeFileRange(src, new FileOutputStream(dst), rangeRange);
        in = new FileInputStream(dst);
        for (int i = 0; i < 64; i++) {
            if (in.read() != (i + 128 + 64)) {
                System.out.println(""ERR"");
            }
        }
        Streams.safeClose(in);

        System.out.println(""---------------------------END"");
    }
",non-flaky,5
122607,vespa-engine_vespa,UnixPathTest.permissions,"    @Test
    public void permissions() {
        String expectedPermissions = ""rwxr-x---"";
        UnixPath path = new UnixPath(fs.getPath(""file.txt""));
        path.writeUtf8File(""foo"");
        path.setPermissions(expectedPermissions);
        assertEquals(expectedPermissions, path.getPermissions());
    }
",non-flaky,5
76697,quarkusio_quarkus,UnitET.unitStyleTest2,"    @Test
    public void unitStyleTest2() {
        Assertions.assertEquals(""UNIT"", UnitService.service());
    }
",non-flaky,5
118769,netty_netty,ByteBufUtilTest.testIsTextWithUtf8,"    @Test
    public void testIsTextWithUtf8() {
        byte[][] validUtf8Bytes = {
                ""netty"".getBytes(CharsetUtil.UTF_8),
                {(byte) 0x24},
                {(byte) 0xC2, (byte) 0xA2},
                {(byte) 0xE2, (byte) 0x82, (byte) 0xAC},
                {(byte) 0xF0, (byte) 0x90, (byte) 0x8D, (byte) 0x88},
                {(byte) 0x24,
                        (byte) 0xC2, (byte) 0xA2,
                        (byte) 0xE2, (byte) 0x82, (byte) 0xAC,
                        (byte) 0xF0, (byte) 0x90, (byte) 0x8D, (byte) 0x88} // multiple characters
        };
        for (byte[] bytes : validUtf8Bytes) {
            assertIsText(bytes, true, CharsetUtil.UTF_8);
        }
        byte[][] invalidUtf8Bytes = {
                {(byte) 0x80},
                {(byte) 0xF0, (byte) 0x82, (byte) 0x82, (byte) 0xAC}, // Overlong encodings
                {(byte) 0xC2},                                        // not enough bytes
                {(byte) 0xE2, (byte) 0x82},                           // not enough bytes
                {(byte) 0xF0, (byte) 0x90, (byte) 0x8D},              // not enough bytes
                {(byte) 0xC2, (byte) 0xC0},                           // not correct bytes
                {(byte) 0xE2, (byte) 0x82, (byte) 0xC0},              // not correct bytes
                {(byte) 0xF0, (byte) 0x90, (byte) 0x8D, (byte) 0xC0}, // not correct bytes
                {(byte) 0xC1, (byte) 0x80},                           // out of lower bound
                {(byte) 0xE0, (byte) 0x80, (byte) 0x80},              // out of lower bound
                {(byte) 0xED, (byte) 0xAF, (byte) 0x80}               // out of upper bound
        };
        for (byte[] bytes : invalidUtf8Bytes) {
            assertIsText(bytes, false, CharsetUtil.UTF_8);
        }
    }
",non-flaky,5
135033,undertow-io_undertow,DateUtilsTestCase.testPerformance,"    @Test
    public void testPerformance() {

        String ie9Header = ""Wed, 12 Feb 2014 04:43:29 GMT; length=142951"";

        long timestamp = System.currentTimeMillis();
        for (int i=0; i < 1000; i++) {
            ie9Header.replaceAll("";.*$"", """");
        }
        long ts1 = System.currentTimeMillis() - timestamp;

        timestamp = System.currentTimeMillis();

        for (int i=0; i < 1000; i++) {
            int index = ie9Header.indexOf(';');
            final String trimmedDate = index >=0 ? ie9Header.substring(0, index) : ie9Header;
        }

        long ts2 = System.currentTimeMillis() - timestamp;

        Assert.assertTrue(ts2 < ts1);

    }
",non-flaky,5
156462,apache_commons-lang,DateUtilsFragmentTest.testMinutesOfDayWithCalendar,"    @Test
    public void testMinutesOfDayWithCalendar() {
        long testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.DATE);
        final long expectedValue = minutes + ((hours * DateUtils.MILLIS_PER_HOUR))/ DateUtils.MILLIS_PER_MINUTE;
        assertEquals(expectedValue, testResult);
        testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.DAY_OF_YEAR);
        assertEquals(expectedValue, testResult);
    }
",non-flaky,5
179416,abel533_Mapper,VersionTest.testVersion,"    @Test
    public void testVersion(){
        EntityHelper.initEntityNameMap(UserVersion.class, config);
        EntityTable entityTable = EntityHelper.getEntityTable(UserVersion.class);
        Assert.assertNotNull(entityTable);

        Set<EntityColumn> columns = entityTable.getEntityClassColumns();
        Assert.assertEquals(1, columns.size());

        for (EntityColumn column : columns) {
            Assert.assertTrue(column.getEntityField().isAnnotationPresent(Version.class));
        }
    }
",non-flaky,5
98654,nutzam_nutz,RawViewTest.test_raw,"    @Test
    public void test_raw() {
        get(""/views/raw"");
        assertEquals(""ABC"", resp.getContent());

        get(""/views/raw2"");
        assertEquals(3, resp.getContent().length());

        get(""/views/raw3"");
        assertEquals(3, resp.getContent().length());

        get(""/views/raw4"");
        assertEquals("""", resp.getContent());

        get(""/views/raw5"");
        assertTrue(resp.getHeader().get(""Content-Type"").startsWith(""application/json""));
    }
",non-flaky,5
77522,dropwizard_dropwizard,DropwizardAppRuleTest.canPerformAdminTask,"    @Test
    public void canPerformAdminTask() {
        final String response
            = RULE.client().target(""http://localhost:""
            + RULE.getAdminPort() + ""/tasks/hello?name=test_user"")
            .request()
            .post(Entity.entity("""", MediaType.TEXT_PLAIN), String.class);

        assertThat(response).isEqualTo(""Hello has been said to test_user"");
    }
",non-flaky,5
178028,aosp-mirror_platform_frameworks_support,ListRowDataAdapterTest.adapterSize_rowsRemoved,"    @Test
    public void adapterSize_rowsRemoved() {
        int itemCount = 4;
        ArrayObjectAdapter adapter = new ArrayObjectAdapter(presenterSelector);
        adapter.add(new SectionRow(""section 1""));
        for (int i = 0; i < itemCount; i++) {
            HeaderItem headerItem = new HeaderItem(i, ""header ""+i);
            adapter.add(new ListRow(headerItem, createListRowAdapter()));
        }

        ListRowDataAdapter listRowDataAdapter = new ListRowDataAdapter(adapter);
        assertEquals(5, listRowDataAdapter.size());

        adapter.add(new DividerRow());
        assertEquals(5, listRowDataAdapter.size());

        listRowDataAdapter.registerObserver(dataObserver);
        adapter.removeItems(3, 3);
        verify(dataObserver, times(1)).onItemRangeRemoved(3, 2);
        assertEquals(3, listRowDataAdapter.size());
    }
",non-flaky,5
104703,apache_pinot,ServerStarterIntegrationTest.testSetInstanceIdToHostname,"  @Test
  public void testSetInstanceIdToHostname()
      throws Exception {
    String expectedHost = NetUtils.getHostnameOrAddress();
    String expectedInstanceId = PREFIX_OF_SERVER_INSTANCE + expectedHost + ""_"" + DEFAULT_SERVER_NETTY_PORT;

    Map<String, Object> properties = new HashMap<>();
    properties.put(SET_INSTANCE_ID_TO_HOSTNAME_KEY, true);

    verifyInstanceConfig(new PinotConfiguration(properties), expectedInstanceId, expectedHost,
        DEFAULT_SERVER_NETTY_PORT);
  }
",non-flaky,5
94724,ktuukkan_marine-api,SpeedOverGroundTest.negativeValueIsNotCorrect,"    @Test
    public void negativeValueIsNotCorrect() {
        assertFalse(SpeedOverGround.isCorrect(-1));
    }
",non-flaky,5
175764,GoogleCloudPlatform_google-cloud-eclipse,StandardDeployPreferencesPanelTest.testGetHelpContextId,"  @Test
  public void testGetHelpContextId() {
    IProject project = mock(IProject.class);
    when(project.getName()).thenReturn("""");
    StandardDeployPreferencesPanel panel = new StandardDeployPreferencesPanel(
        shellResource.getShell(), project, mock(IGoogleLoginService.class), mock(Runnable.class),
        false, mock(ProjectRepository.class));

    assertEquals(
        ""com.google.cloud.tools.eclipse.appengine.deploy.ui.DeployAppEngineStandardProjectContext"",
        panel.getHelpContextId());
  }
",non-flaky,5
30964,camunda-cloud_zeebe,POJOArrayTest.shouldSerializeAppendedEntry,"  @Test
  public void shouldSerializeAppendedEntry() {
    // given
    final POJOArray pojo = new POJOArray();

    final DirectBuffer buffer =
        encodeMsgPack(
            (w) -> {
              w.writeMapHeader(1);
              encodeSimpleArrayProp(w);
            });

    pojo.wrap(buffer);
    final Iterator<MinimalPOJO> iterator = pojo.simpleArray().iterator();
    iterator.next();
    iterator.next();
    iterator.next();
    iterator.next();
    iterator.next();

    // when
    pojo.simpleArray().add().setLongProp(999L);

    // then
    final int writeLength = pojo.getLength();
    final UnsafeBuffer pojoBuffer = new UnsafeBuffer(new byte[writeLength]);
    pojo.write(pojoBuffer, 0);

    final Map<String, Object> msgPackMap = MsgPackUtil.asMap(pojoBuffer, 0, pojoBuffer.capacity());
    assertThat(msgPackMap)
        .containsOnly(
            entry(
                ""simpleArray"",
                ""[{longProp=123}, {longProp=456}, {longProp=789}, {longProp=555}, {longProp=777}, {longProp=999}]""));
  }
",non-flaky,5
175744,GoogleCloudPlatform_google-cloud-eclipse,AppEngineDeployPreferencesPanelTest.testAutoSelectSingleAccount,"  @Test
  public void testAutoSelectSingleAccount() {
    when(loginService.getAccounts()).thenReturn(oneAccountSet);
    deployPanel = createPanel(true /* requireValues */);
    assertThat(deployPanel.getSelectedCredential(), is(credential));

    // verify not in error
    IStatus status = getAccountSelectorValidationStatus();
    assertTrue(""account selector is in error: "" + status.getMessage(), status.isOK());

    assertThat(""auto-selected value should be propagated back to model"",
        deployPanel.model.getAccountEmail(), is(account1.getEmail()));
  }
",non-flaky,5
53168,cloudfoundry_uaa,ScimGroupTests.cant_drop_zone_id,"    @Test(expected = IllegalArgumentException.class)
    public void cant_drop_zone_id() {
        patch.getMeta().setAttributes(new String[] {""zoneID""});
        group.patch(patch);
    }
",non-flaky,5
98601,nutzam_nutz,El2Test.lssue_486,"    @Test
    public void lssue_486() {
        assertEquals(2 + (-3), El.eval(""2+(-3)""));
        assertEquals(2 + -3, El.eval(""2+-3""));
        assertEquals(2 * -3, El.eval(""2*-3""));
        assertEquals(-2 * -3, El.eval(""-2*-3""));
        assertEquals(2 / -3, El.eval(""2/-3""));
        assertEquals(2 % -3, El.eval(""2%-3""));
    }
",non-flaky,5
20972,NationalSecurityAgency_timely,TestMemoryDataStore.TestExtentOfStorage,"    @Test
    public void TestExtentOfStorage() {
        DataStoreCache mmStore = new DataStoreCache(configuration);

        HashMap<String, String> tags = new HashMap<>();
        tags.put(""host"", ""localhost"");

        long start = System.currentTimeMillis();
        long timestamp = start;

        for (int x = 1; x <= 100; x++) {

            Metric m = createMetric(""test.metric"", tags, 2.0, timestamp);
            mmStore.store(m);
            mmStore.flushCaches(-1);
            timestamp = timestamp + 60000;

            QueryRequest query = new QueryRequest();
            query.setStart(start);
            query.setEnd(start + 86400000);
            query.setMsResolution(true);
            QueryRequest.SubQuery subQuery = new QueryRequest.SubQuery();
            // subQuery.setDownsample(Optional.of(""5m-avg""));
            subQuery.setMetric(""test.metric"");
            query.setQueries(Collections.singleton(subQuery));

            try {
                List<QueryResponse> responseList = mmStore.query(query);
                long totalObservations = 0;
                for (QueryResponse r : responseList) {
                    totalObservations += r.getDps().size();
                }
                Assert.assertEquals(""Unexpected number of total observations"", x, totalObservations);

            } catch (TimelyException e) {
                e.printStackTrace();
            }

        }

    }
",non-flaky,5
95647,togglz_togglz,DeviceActivationStrategyTest.shouldBeActiveForMobile,"    @Test
    public void shouldBeActiveForMobile() throws Exception {
        String[] mobileOn = new String[]{""NO"", ""NO"", ""YES""};
        assertThat(requestFrom(NORMAL)).isInactiveWithParams(mobileOn);
        cleanup();
        assertThat(requestFrom(TABLET)).isInactiveWithParams(mobileOn);
        cleanup();
        assertThat(requestFrom(MOBILE)).isActiveWithParams(mobileOn);
        cleanup();
    }
",non-flaky,5
160353,ConsenSys_teku,SlashingProtectionExporterTest.shouldReadFileWithGenesisRootDefinedSecond,"  @Test
  public void shouldReadFileWithGenesisRootDefinedSecond(@TempDir Path tempDir)
      throws URISyntaxException, IOException {
    final SlashingProtectionExporter exporter = new SlashingProtectionExporter(tempDir);
    Optional<String> error =
        exporter.readSlashProtectionFile(
            usingResourceFile(""slashProtection.yml"", tempDir), log::add);
    assertThat(error).isEmpty();
    error =
        exporter.readSlashProtectionFile(
            usingResourceFile(""slashProtectionWithGenesisRoot.yml"", tempDir), log::add);
    assertThat(error).isEmpty();

    assertThat(log).containsExactly(""Exporting "" + pubkey, ""Exporting "" + pubkey);
  }
",non-flaky,5
33917,apache_camel,LdifRouteIT.tearDown,"    @AfterEach
    public void tearDown() throws Exception {
        if (camel != null) {
            camel.stop();
        }
    }
",non-flaky,5
70847,apache_kafka,WorkerSourceTaskTest.testCancel,"    @Test
    public void testCancel() {
        createWorkerTask();

        offsetReader.close();
        PowerMock.expectLastCall();

        PowerMock.replayAll();

        workerTask.cancel();

        PowerMock.verifyAll();
    }
",non-flaky,5
26734,MundaneImmortal_pair-distribution-app,OpsPairsCombinationsTest.testIsRotationForDifferentWeekPairs,"	@Test
	public void testIsRotationForDifferentWeekPairs() {
		List<Developer> standardDevs = getStandardDevs();
		DayPairs pairs = new DayPairs();
		pairs.setDate(getDateWeeksBefore(1));
		pairs.addPair(""track1"", new Pair(Arrays.asList(standardDevs.get(0), standardDevs.get(1)), true, ""track1""));
		
		OpsPairCombinations devPairCombinations = new OpsPairCombinations(Arrays.asList(pairs));
		Company company = new Company(""myCompany"");
		company.setDevOpsRotationStrategy(""weekly"");
		devPairCombinations.setCompany(company);

		assertThat(devPairCombinations.isRotationTime(Arrays.asList(""track1""), standardDevs, false), is(true));
	}
",non-flaky,5
98348,Kong_unirest-java,UriFormatterTest.semicolonsAsParam,"    @Test
    public void semicolonsAsParam() {
        assertLinkSurvives(""http://localhost/test?a=b;foo=bar"");
    }
",non-flaky,5
21265,androidx_androidx,PreferenceSingleLineTitleTest.bindViewHolder_singleLineTitleNotSet_shouldNotSetSingleLine,"    @Test
    public void bindViewHolder_singleLineTitleNotSet_shouldNotSetSingleLine() {
        PreferenceViewHolder holder = PreferenceViewHolder.createInstanceForTests(mViewGroup);
        mPreference.onBindViewHolder(holder);

        verify(mTitleView, never()).setSingleLine(anyBoolean());
    }
",non-flaky,5
113705,salesforce_reactive-grpc,CancellationPropagationIntegrationTest.serverCanCancelClientStreamImplicitlyBidi,"    @Test
    public void serverCanCancelClientStreamImplicitlyBidi() {
        TestService svc = new TestService();
        serverRule.getServiceRegistry().addService(svc);

        ReactorNumbersGrpc.ReactorNumbersStub stub = ReactorNumbersGrpc.newReactorStub(serverRule.getChannel());

        svc.setExplicitCancel(false);

        AtomicBoolean requestWasCanceled = new AtomicBoolean(false);
        AtomicBoolean requestDidProduce = new AtomicBoolean(false);

        Flux<NumberProto.Number> request = Flux
                .fromIterable(IntStream.range(0, NUMBER_OF_STREAM_ELEMENTS)::iterator)
                .delayElements(Duration.ofMillis(SEQUENCE_DELAY_MILLIS))
                .map(CancellationPropagationIntegrationTest::protoNum)
                .doOnNext(x -> {
                    requestDidProduce.set(true);
                    System.out.println(""Produced: "" + x.getNumber(0));
                })
                .doOnCancel(() -> {
                    requestWasCanceled.set(true);
                    System.out.println(""Client canceled"");
                });

        Flux<NumberProto.Number> observer = request.compose(stub::twoWayPressure)
                .doOnNext(number -> System.out.println(number.getNumber(0)))
                .doOnError(throwable -> System.out.println(throwable.getMessage()));

        StepVerifier.create(observer)
                .expectNext(protoNum(9))
                .verifyComplete();

        await().atMost(org.awaitility.Duration.FIVE_HUNDRED_MILLISECONDS).untilTrue(requestWasCanceled);

        assertThat(requestWasCanceled.get()).isTrue();
        assertThat(requestDidProduce.get()).isTrue();
    }
",non-flaky,5
137170,spring-projects_spring-framework,AnnotationsScannerTests.method,"		@TestAnnotation1
		public void method(String argument) {
		}
",non-flaky,5
223,wildfly_wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993.testList,"@Test
public void testList() throws Exception {
    bindList();
    NamingEnumeration<NameClassPair> results = namingContext.list(new CompositeName());
    checkListResults(results);
    results = (NamingEnumeration<NameClassPair>) testActionPermission(JndiPermission.ACTION_LIST, namingContext, null);
    checkListResults(results);
}",test order dependency,4
53151,cloudfoundry_uaa,SamlConfigTest.keys_are_not_modifiable,"    @Test
    public void keys_are_not_modifiable() {
        read_json(oldJson);
        exception.expect(UnsupportedOperationException.class);
        config.getKeys().clear();
    }
",non-flaky,5
114119,aws_aws-sdk-java-v2,InstantAsStringAttributeConvertersTest.InstantAsStringAttributeConverterNotAcceptLocalDateTest,"    @Test
    public void InstantAsStringAttributeConverterNotAcceptLocalDateTest() {
        assertFails(() -> transformTo(CONVERTER, EnhancedAttributeValue.fromString(""1988-05-21"")
                                                                       .toAttributeValue()));
    }
",non-flaky,5
137146,spring-projects_spring-framework,OrderComparatorTests.getOrder,"	@Test
		public int getOrder() {
			return this.order;
		}
",non-flaky,5
217,wildfly_wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993.testFireAllEvent,"@Test
public void testFireAllEvent() throws Exception {
    final NamingEventCoordinator coordinator = new NamingEventCoordinator();
    final CollectingListener objectListener = new CollectingListener(1);
    coordinator.addListener(""test/path"", EventContext.OBJECT_SCOPE, objectListener);
    final CollectingListener subtreeListener = new CollectingListener(1);
    coordinator.addListener(""test"", EventContext.SUBTREE_SCOPE, subtreeListener);
    final CollectingListener oneLevelListener = new CollectingListener(1);
    coordinator.addListener(""test"", EventContext.ONELEVEL_SCOPE, oneLevelListener);
    coordinator.fireEvent(context, new CompositeName(""test/path""), null, null, NamingEvent.OBJECT_ADDED, ""bind"", EventContext.OBJECT_SCOPE, EventContext.ONELEVEL_SCOPE, EventContext.SUBTREE_SCOPE);
    objectListener.latch.await(1, TimeUnit.SECONDS);
    oneLevelListener.latch.await(1, TimeUnit.SECONDS);
    subtreeListener.latch.await(1, TimeUnit.SECONDS);
    assertEquals(1, objectListener.capturedEvents.size());
    assertEquals(1, subtreeListener.capturedEvents.size());
    assertEquals(1, oneLevelListener.capturedEvents.size());
}",test order dependency,4
33887,apache_camel,FhirMetaIT.testGetFromType,"    @Test
    public void testGetFromType() throws Exception {
        final Map<String, Object> headers = new HashMap<>();
        // parameter type is Class
        headers.put(""CamelFhir.metaType"", Meta.class);
        // parameter type is String
        headers.put(""CamelFhir.resourceType"", ""Patient"");

        IBaseMetaType result = requestBodyAndHeaders(""direct://GET_FROM_TYPE"", null, headers);

        LOG.debug(""getFromType: "" + result);
        assertNotNull(result, ""getFromType result"");
    }
",non-flaky,5
112110,apache_shardingsphere-elasticjob,StatisticRdbRepositoryTest.assertAddTaskRunningStatistics,"    @Test
    public void assertAddTaskRunningStatistics() {
        assertTrue(repository.add(new TaskRunningStatistics(100, new Date())));
    }
",non-flaky,5
162756,OpenAPITools_openapi-generator,FileSchemaTestClassTest.filesTest,"    @Test
    public void filesTest() {
        // TODO: test files
    }
",non-flaky,5
20943,NationalSecurityAgency_timely,TimeSeriesGroupingIteratorTest.testMultipleTimeSeriesMovingAverage,"    @Test
    public void testMultipleTimeSeriesMovingAverage() throws Exception {
        table.clear();
        long ts = System.currentTimeMillis();
        List<Tag> tags1 = new ArrayList<>();
        tags1.add(new Tag(""host"", ""r01n01""));
        List<Tag> tags2 = new ArrayList<>();
        tags2.add(new Tag(""host"", ""r01n02""));
        for (int i = 0; i < 100; i++) {
            ts += 1000;
            Metric m = new Metric(""sys.cpu.user"", ts, i * 1.0D, tags1);
            byte[] row = MetricAdapter.encodeRowKey(m);
            Key k = new Key(row, tags1.get(0).join().getBytes(StandardCharsets.UTF_8),
                    MetricAdapter.encodeColQual(ts, """"), new byte[0], ts);
            Value v = new Value(MetricAdapter.encodeValue(m.getValue().getMeasure()));
            table.put(k, v);
            Metric m2 = new Metric(""sys.cpu.user"", ts, i * 2.0D, tags2);
            byte[] row2 = MetricAdapter.encodeRowKey(m2);
            Key k2 = new Key(row2, tags2.get(0).join().getBytes(StandardCharsets.UTF_8),
                    MetricAdapter.encodeColQual(ts, """"), new byte[0], ts);
            Value v2 = new Value(MetricAdapter.encodeValue(m2.getValue().getMeasure()));
            table.put(k2, v2);
        }
        SortedMapIterator source = new SortedMapIterator(table);
        TimeSeriesGroupingIterator iter = new TimeSeriesGroupingIterator();
        IteratorSetting settings = new IteratorSetting(100, TimeSeriesGroupingIterator.class);
        settings.addOption(TimeSeriesGroupingIterator.FILTER, ""0.20,0.20,0.20,0.20,0.20"");
        iter.init(source, settings.getOptions(), SCAN_IE);
        iter.seek(new Range(), EMPTY_COL_FAMS, true);

        // this section changed when the key structure changed so that identical
        // colFam values sorted consecutively within an given time period
        for (int i = 4; i < 100; i++) {
            checkNextResult(iter, new double[] { i - 4, i - 3, i - 2, i - 1, i });
        }
        for (int i = 4; i < 100; i++) {
            checkNextResult(iter, new double[] { (i - 4) * 2, (i - 3) * 2, (i - 2) * 2, (i - 1) * 2, i * 2 });
        }
        assertFalse(iter.hasTop());

    }
",non-flaky,5
178047,aosp-mirror_platform_frameworks_support,GuidedStepAttributesTest.testActionWithOneSubAction,"    @Test
    public void testActionWithOneSubAction() throws Throwable {
        ExpectedSubActionResult result = setUpActionsForSubActionsTest();

        final int actionPos = 1;
        final GuidedAction selectedAction = result.actionList.get(actionPos);
        List<Integer> expectedFocusedSeq = result.expectedFocusedSeq.get(actionPos);
        List<Integer> expectedClickedSeq = result.expectedClickedSeq.get(actionPos);

        traverseSubActionsAndVerifyFocusAndClickEvents(selectedAction, actionPos, expectedFocusedSeq,
                expectedClickedSeq);
    }
",non-flaky,5
30948,camunda-cloud_zeebe,ElasticsearchClientIT.shouldThrowExceptionIfFailToFlushBulk,"  @Test
  public void shouldThrowExceptionIfFailToFlushBulk() {
    // given
    final int bulkSize = 10;

    final Record<VariableRecordValue> recordMock = mock(Record.class);
    when(recordMock.getPartitionId()).thenReturn(1);
    when(recordMock.getValueType()).thenReturn(ValueType.PROCESS_INSTANCE);

    // bulk contains records that fail on flush
    IntStream.range(0, bulkSize)
        .forEach(
            i -> {
              when(recordMock.getKey()).thenReturn(RECORD_KEY + i);
              when(recordMock.toJson()).thenReturn(""invalid-json-"" + i);
              client.index(recordMock);
            });

    // and one valid record
    when(recordMock.getKey()).thenReturn(RECORD_KEY + bulkSize);
    when(recordMock.toJson()).thenReturn(""{}"");
    client.index(recordMock);

    // when/then
    assertThatThrownBy(client::flush)
        .isInstanceOf(ElasticsearchExporterException.class)
        .hasMessageContaining(
            ""Failed to flush 10 item(s) of bulk request [type: mapper_parsing_exception, reason: failed to parse]"");
  }
",non-flaky,5
97759,vojtechhabarta_typescript-generator,JaxrsApplicationTest.testReturnedTypesFromApplication,"    @Test
    public void testReturnedTypesFromApplication() {
        final List<SourceType<Type>> sourceTypes = JaxrsApplicationScanner.scanJaxrsApplication(TestApplication.class, null);
        List<Type> types = getTypes(sourceTypes);
        final List<Type> expectedTypes = Arrays.<Type>asList(
                TestApplication.class,
                TestResource1.class
        );
        assertHasSameItems(expectedTypes, types);
    }
",non-flaky,5
97678,vojtechhabarta_typescript-generator,SpringTest.testPageableController,"    @Test
    public void testPageableController() {
        final Settings settings = TestUtils.settings();
        settings.outputFileType = TypeScriptFileType.implementationFile;
        settings.generateSpringApplicationClient = true;
        final String output = new TypeScriptGenerator(settings).generateTypeScript(Input.from(PageableController.class));
        Assert.assertTrue(output.contains("" post(queryParams?: { page?: number; size?: number; sort?: string; }): RestResponse<Page<string>>""));
    }
",non-flaky,5
162681,OpenAPITools_openapi-generator,UserApiTest.createUsersWithListInputTest,"    @Test
    public void createUsersWithListInputTest() {
        List<User> body = null;
        //api.createUsersWithListInput(body);
        
        // TODO: test validations
        
        
    }
",non-flaky,5
162675,OpenAPITools_openapi-generator,PetApiTest.getPetByIdTest,"    @Test
    public void getPetByIdTest() {
        Long petId = null;
        //Pet response = api.getPetById(petId);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
",non-flaky,5
30967,camunda-cloud_zeebe,POJOArrayTest.shouldDeserializePOJOWithDefaultValues,"  @Test
  public void shouldDeserializePOJOWithDefaultValues() {
    // given
    final POJOArray pojo = new POJOArray();

    final DirectBuffer buffer =
        encodeMsgPack(
            (w) -> {
              w.writeMapHeader(1);
              encodeSimpleArrayProp(w);
            });

    // when
    pojo.wrap(buffer);

    // then
    final Iterator<MinimalPOJO> iterator1 = pojo.simpleArray().iterator();
    assertThat(iterator1.hasNext()).isTrue();
    assertThat(iterator1.next().getLongProp()).isEqualTo(123L);
    assertThat(iterator1.hasNext()).isTrue();
    assertThat(iterator1.next().getLongProp()).isEqualTo(456L);
    assertThat(iterator1.hasNext()).isTrue();
    assertThat(iterator1.next().getLongProp()).isEqualTo(789L);
    assertThat(iterator1.hasNext()).isTrue();
    assertThat(iterator1.next().getLongProp()).isEqualTo(555L);
    assertThat(iterator1.hasNext()).isTrue();
    assertThat(iterator1.next().getLongProp()).isEqualTo(777L);
    assertThat(iterator1.hasNext()).isFalse();
  }
",non-flaky,5
175753,GoogleCloudPlatform_google-cloud-eclipse,AppEngineDeployPreferencesPanelTest.testRefreshProjectsForSelectedCredential,"  @Test
  public void testRefreshProjectsForSelectedCredential()
      throws ProjectRepositoryException, InterruptedException {
    when(loginService.getAccounts()).thenReturn(twoAccountSet);
    initializeProjectRepository();

    deployPanel = createPanel(false /* requireValues */);
    Table projectTable = getProjectSelector().getViewer().getTable();
    assertNull(deployPanel.latestGcpProjectQueryJob);
    assertThat(projectTable.getItemCount(), is(0));

    selectAccount(account1);
    assertNotNull(deployPanel.latestGcpProjectQueryJob);
    deployPanel.latestGcpProjectQueryJob.join();
    assertThat(projectTable.getItemCount(), is(2));
    assertThat(((GcpProject) projectTable.getItem(0).getData()).getId(), is(""projectId1""));
    assertThat(((GcpProject) projectTable.getItem(1).getData()).getId(), is(""projectId2""));
  }
",non-flaky,5
98305,spotify_docker-client,CompressedDirectoryMatchFilepathTest.testMatchFilepath,"  @Test
  public void testMatchFilepath() {
    if (exception != null) {
      expectedException.expect(exception);
    }

    final Path path = fs.getPath(pathString);
    final boolean result = CompressedDirectory.goPathMatcher(fs, pattern).matches(path);

    final String description;
    if (matched) {
      description = MessageFormat.format(""the pattern {0} to match {1}"", pattern, pathString);
    } else {
      description = MessageFormat.format(""the pattern {0} not to match {1}"", pattern, pathString);
    }

    assertThat(result, describedAs(description, is(matched)));
  }
",non-flaky,5
70770,apache_kafka,ConnectWorkerIntegrationTest.testRestartFailedTask,"    @Test
    public void testRestartFailedTask() throws Exception {
        connect = connectBuilder.build();
        // start the clusters
        connect.start();

        int numTasks = 1;

        // Properties for the source connector. The task should fail at startup due to the bad broker address.
        Map<String, String> connectorProps = new HashMap<>();
        connectorProps.put(CONNECTOR_CLASS_CONFIG, MonitorableSourceConnector.class.getName());
        connectorProps.put(TASKS_MAX_CONFIG, Objects.toString(numTasks));
        connectorProps.put(CONNECTOR_CLIENT_PRODUCER_OVERRIDES_PREFIX + BOOTSTRAP_SERVERS_CONFIG, ""nobrokerrunningatthisaddress"");

        waitForCondition(() -> assertWorkersUp(NUM_WORKERS).orElse(false),
                WORKER_SETUP_DURATION_MS, ""Initial group of workers did not start in time."");

        // Try to start the connector and its single task.
        connect.configureConnector(CONNECTOR_NAME, connectorProps);

        waitForCondition(() -> assertConnectorTasksFailed(CONNECTOR_NAME, numTasks).orElse(false),
                CONNECTOR_SETUP_DURATION_MS, ""Connector tasks did not fail in time"");

        // Reconfigure the connector without the bad broker address.
        connectorProps.remove(CONNECTOR_CLIENT_PRODUCER_OVERRIDES_PREFIX + BOOTSTRAP_SERVERS_CONFIG);
        connect.configureConnector(CONNECTOR_NAME, connectorProps);

        // Restart the failed task
        String taskRestartEndpoint = connect.endpointForResource(
            String.format(""connectors/%s/tasks/0/restart"", CONNECTOR_NAME));
        connect.executePost(taskRestartEndpoint, """", Collections.emptyMap());

        // Ensure the task started successfully this time
        waitForCondition(() -> assertConnectorAndTasksRunning(CONNECTOR_NAME, numTasks).orElse(false),
            CONNECTOR_SETUP_DURATION_MS, ""Connector tasks are not all in running state."");
    }
",non-flaky,5
98216,apache_jackrabbit,JsonWriterTest.answer,"    @Test
    public void testDoubleOutput() throws Exception {
        StringWriter writer = new StringWriter();
        JsonWriter jsonWriter = new JsonWriter(writer);

        Node parent = createMock(Node.class);
        Property doubleProperty = createMock(Property.class);
        Value doublePropertyValue = createMock(Value.class);
        expect(doubleProperty.getType()).andReturn(PropertyType.DOUBLE).anyTimes();
        expect(doubleProperty.getName()).andReturn(""singleValued"").anyTimes();
        expect(doubleProperty.isMultiple()).andReturn(false).anyTimes();
        expect(doubleProperty.getValue()).andReturn(doublePropertyValue).anyTimes();
        expect(doublePropertyValue.getType()).andReturn(PropertyType.DOUBLE).anyTimes();
        expect(doublePropertyValue.getDouble()).andReturn(5d).anyTimes();
        expect(doublePropertyValue.getString()).andReturn(""5"").anyTimes();

        Property mvDoubleProperty = createMock(Property.class);
        Value mvDoublePropertyValue1 = createMock(Value.class);
        Value mvDoublePropertyValue2 = createMock(Value.class);
        expect(mvDoubleProperty.getType()).andReturn(PropertyType.DOUBLE).anyTimes();
        expect(mvDoubleProperty.getName()).andReturn(""multiValued"").anyTimes();
        expect(mvDoubleProperty.isMultiple()).andReturn(true).anyTimes();
        expect(mvDoubleProperty.getValues()).andReturn(new Value[] { mvDoublePropertyValue1, mvDoublePropertyValue2}).anyTimes();
        expect(mvDoublePropertyValue1.getType()).andReturn(PropertyType.DOUBLE).anyTimes();
        expect(mvDoublePropertyValue1.getDouble()).andReturn(42d).anyTimes();
        expect(mvDoublePropertyValue1.getString()).andReturn(""42"").anyTimes();
        expect(mvDoublePropertyValue2.getType()).andReturn(PropertyType.DOUBLE).anyTimes();
        expect(mvDoublePropertyValue2.getDouble()).andReturn(98.6).anyTimes();
        expect(mvDoublePropertyValue2.getString()).andReturn(""98.6"").anyTimes();

        final List<Property> properties = new ArrayList<Property>();
        properties.add(doubleProperty);
        properties.add(mvDoubleProperty);
        expect(parent.getProperties()).andAnswer(new IAnswer<PropertyIterator>() {
            @Override
            public PropertyIterator answer() throws Throwable {
                return new PropertyIteratorAdapter(properties.iterator());
            }
",non-flaky,5
84594,apache_zookeeper,BinaryInputArchiveTest.testBool,"    @Test
    public void testBool() {
        final boolean expected = false;
        final String tag = ""tag1"";
        checkWriterAndReader(
                (oa) -> oa.writeBool(expected, tag),
                (ia) -> {
                    boolean actual = ia.readBool(tag);
                    assertEquals(expected, actual);
                }
        );
    }
",non-flaky,5
112767,hwang-pku_ormlite-core,SelectIteratorTest.testIterator,"	@Test
	public void testIterator() throws Exception {
		Dao<Foo, Integer> dao = createDao(Foo.class, true);
		CloseableIterator<Foo> iterator = dao.iterator();
		assertFalse(iterator.hasNext());

		Foo foo1 = new Foo();
		assertEquals(1, dao.create(foo1));

		Foo foo2 = new Foo();
		assertEquals(1, dao.create(foo2));

		iterator = dao.iterator();
		assertTrue(iterator.hasNext());
		Foo result = iterator.next();
		assertEquals(foo1.id, result.id);
		assertTrue(iterator.hasNext());

		result = iterator.next();
		assertEquals(foo2.id, result.id);

		assertFalse(iterator.hasNext());
		assertNull(iterator.nextThrow());
	}
",non-flaky,5
89344,apache_samza,TestKafkaStreamSpec.testUnsupportedConfigStrippedFromProperties,"  @Test
  public void testUnsupportedConfigStrippedFromProperties() {
    StreamSpec original = new StreamSpec(""dummyId"", ""dummyPhysicalName"", ""dummySystemName"",
        ImmutableMap.of(""segment.bytes"", ""4"", ""replication.factor"", ""7""));

    // First verify the original
    assertEquals(""7"", original.get(""replication.factor""));
    assertEquals(""4"", original.get(""segment.bytes""));

    Map<String, String> config = original.getConfig();
    assertEquals(""7"", config.get(""replication.factor""));
    assertEquals(""4"", config.get(""segment.bytes""));


    // Now verify the Kafka spec
    KafkaStreamSpec spec = KafkaStreamSpec.fromSpec(original);
    assertNull(spec.get(""replication.factor""));
    assertEquals(""4"", spec.get(""segment.bytes""));

    Properties kafkaProperties = spec.getProperties();
    Map<String, String> kafkaConfig = spec.getConfig();
    assertNull(kafkaProperties.get(""replication.factor""));
    assertEquals(""4"", kafkaProperties.get(""segment.bytes""));

    assertNull(kafkaConfig.get(""replication.factor""));
    assertEquals(""4"", kafkaConfig.get(""segment.bytes""));
  }
",non-flaky,5
156433,apache_commons-lang,DateUtilsFragmentTest.testMillisecondFragmentInLargerUnitWithDate,"    @Test
    public void testMillisecondFragmentInLargerUnitWithDate() {
        assertEquals(0, DateUtils.getFragmentInMilliseconds(aDate, Calendar.MILLISECOND));
        assertEquals(0, DateUtils.getFragmentInSeconds(aDate, Calendar.MILLISECOND));
        assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MILLISECOND));
        assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MILLISECOND));
        assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MILLISECOND));
    }
",non-flaky,5
114124,aws_aws-sdk-java-v2,LocalDateTimeAttributeConverterTest.localDateTimeAttributeConverterMaxTest,"    @Test
    public void localDateTimeAttributeConverterMaxTest() {
        verifyTransform(LocalDateTime.MAX, ""+999999999-12-31T23:59:59.999999999"");
    }
",non-flaky,5
175783,GoogleCloudPlatform_google-cloud-eclipse,AppYamlValidatorTest.testValidateRuntime_nullRuntime,"  @Test
  public void testValidateRuntime_nullRuntime() throws IOException {
    File appYaml = createAppYamlFile(tempFolder.getRoot().toString(), ""runtime:"");
    IStatus result = AppYamlValidator.validateRuntime(appYaml);
    assertEquals(IStatus.ERROR, result.getSeverity());
    assertEquals(""\""runtime: null\"" in app.yaml is not \""java\""."", result.getMessage());
  }
",non-flaky,5
84571,apache_zookeeper,DistributedQueueTest.testTakeWait2,"    @Test
    public void testTakeWait2() throws Exception {
        String dir = ""/testTakeWait2"";
        final String testString = ""Hello World"";
        final int numClients = 1;
        final ZooKeeper[] clients = new ZooKeeper[numClients];
        final DistributedQueue[] queueHandles = new DistributedQueue[numClients];
        for (int i = 0; i < clients.length; i++) {
            clients[i] = createClient();
            queueHandles[i] = new DistributedQueue(clients[i], dir, null);
        }
        int numAttempts = 2;
        for (int i = 0; i < numAttempts; i++) {
            final byte[][] takeResult = new byte[1][];
            final String threadTestString = testString + i;
            Thread takeThread = new Thread(() -> {
                try {
                    takeResult[0] = queueHandles[0].take();
                } catch (KeeperException | InterruptedException ignore) {
                    // no op
                }
            });
            takeThread.start();

            Thread.sleep(1000);
            Thread offerThread = new Thread(() -> {
                try {
                    queueHandles[0].offer(threadTestString.getBytes());
                } catch (KeeperException | InterruptedException ignore) {
                    // no op
                }
            });
            offerThread.start();
            offerThread.join();

            takeThread.join();

            assertNotNull(takeResult[0]);
            assertEquals(new String(takeResult[0]), threadTestString);
        }
    }
",non-flaky,5
78301,apache_beam,OutputAndTimeBoundedSplittableProcessElementInvokerTest.testInvokeProcessElementVoluntaryReturnStop,"  @Test
  public void testInvokeProcessElementVoluntaryReturnStop() throws Exception {
    SplittableProcessElementInvoker<Void, String, OffsetRange, OffsetRangeTracker>.Result res =
        runTest(5, Duration.ZERO, Integer.MAX_VALUE, Duration.millis(100));
    assertFalse(res.getContinuation().shouldResume());
    assertNull(res.getResidualRestriction());
  }
",non-flaky,5
38215,palantir_atlasdb,RocksDbKeyValueServiceTest.testLockFile,"    @Test
    public void testLockFile() {
        try {
            RocksDbKeyValueService db2 = RocksDbKeyValueService.create(""testdb""); // tempted to make IBM DB2 joke
            assertTrue(""RocksDBKVS should protect against concurrent instances with a lock"", false);
        } catch (RuntimeException e) {
            assertTrue(""Unknown exception type thrown; expected IOException when two RocksDBs are pointed at same directory"", e.getCause() instanceof IOException);
        }
    }
",non-flaky,5
104645,apache_pinot,OfflineClusterIntegrationTest.testSelectionUDF,"  @Test
  public void testSelectionUDF()
      throws Exception {
    String pqlQuery = ""SELECT DaysSinceEpoch, timeConvert(DaysSinceEpoch,'DAYS','SECONDS') FROM mytable"";
    JsonNode response = postQuery(pqlQuery);
    ArrayNode selectionResults = (ArrayNode) response.get(""selectionResults"").get(""results"");
    assertNotNull(selectionResults);
    assertFalse(selectionResults.isEmpty());
    for (int i = 0; i < selectionResults.size(); i++) {
      long daysSinceEpoch = selectionResults.get(i).get(0).asLong();
      long secondsSinceEpoch = selectionResults.get(i).get(1).asLong();
      assertEquals(daysSinceEpoch * 24 * 60 * 60, secondsSinceEpoch);
    }

    pqlQuery =
        ""SELECT DaysSinceEpoch, timeConvert(DaysSinceEpoch,'DAYS','SECONDS') FROM mytable order by DaysSinceEpoch ""
            + ""limit 10000"";
    response = postQuery(pqlQuery);
    selectionResults = (ArrayNode) response.get(""selectionResults"").get(""results"");
    assertNotNull(selectionResults);
    assertFalse(selectionResults.isEmpty());
    long prevValue = -1;
    for (int i = 0; i < selectionResults.size(); i++) {
      long daysSinceEpoch = selectionResults.get(i).get(0).asLong();
      long secondsSinceEpoch = selectionResults.get(i).get(1).asLong();
      assertEquals(daysSinceEpoch * 24 * 60 * 60, secondsSinceEpoch);
      assertTrue(daysSinceEpoch >= prevValue);
      prevValue = daysSinceEpoch;
    }

    pqlQuery =
        ""SELECT DaysSinceEpoch, timeConvert(DaysSinceEpoch,'DAYS','SECONDS') FROM mytable order by timeConvert""
            + ""(DaysSinceEpoch,'DAYS','SECONDS') DESC limit 10000"";
    response = postQuery(pqlQuery);
    selectionResults = (ArrayNode) response.get(""selectionResults"").get(""results"");
    assertNotNull(selectionResults);
    assertFalse(selectionResults.isEmpty());
    prevValue = Long.MAX_VALUE;
    for (int i = 0; i < selectionResults.size(); i++) {
      long daysSinceEpoch = selectionResults.get(i).get(0).asLong();
      long secondsSinceEpoch = selectionResults.get(i).get(1).asLong();
      assertEquals(daysSinceEpoch * 24 * 60 * 60, secondsSinceEpoch);
      assertTrue(secondsSinceEpoch <= prevValue);
      prevValue = secondsSinceEpoch;
    }
  }
",non-flaky,5
91491,strapdata_elassandra,UpdateByQueryBasicTests.testBasics,"@TestLogging(""org.elasticsearch.index.reindex:TRACE,org.elasticsearch.action.bulk:TRACE,org.elasticsearch.search.SearchService:TRACE"")
    public void testBasics() throws Exception {
        indexRandom(true, client().prepareIndex(""test"", ""test"", ""1"").setSource(""foo"", ""a""),
                client().prepareIndex(""test"", ""test"", ""2"").setSource(""foo"", ""a""),
                client().prepareIndex(""test"", ""test"", ""3"").setSource(""foo"", ""b""),
                client().prepareIndex(""test"", ""test"", ""4"").setSource(""foo"", ""c""));
        assertHitCount(client().prepareSearch(""test"").setTypes(""test"").setSize(0).get(), 4);
        assertEquals(1, client().prepareGet(""test"", ""test"", ""1"").get().getVersion());
        assertEquals(1, client().prepareGet(""test"", ""test"", ""4"").get().getVersion());

        // Reindex all the docs
        assertThat(updateByQuery().source(""test"").refresh(true).get(), matcher().updated(4));
        assertEquals(2, client().prepareGet(""test"", ""test"", ""1"").get().getVersion());
        assertEquals(2, client().prepareGet(""test"", ""test"", ""4"").get().getVersion());

        // Now none of them
        assertThat(updateByQuery().source(""test"").filter(termQuery(""foo"", ""no_match"")).refresh(true).get(), matcher().updated(0));
        assertEquals(2, client().prepareGet(""test"", ""test"", ""1"").get().getVersion());
        assertEquals(2, client().prepareGet(""test"", ""test"", ""4"").get().getVersion());

        // Now half of them
        assertThat(updateByQuery().source(""test"").filter(termQuery(""foo"", ""a"")).refresh(true).get(), matcher().updated(2));
        assertEquals(3, client().prepareGet(""test"", ""test"", ""1"").get().getVersion());
        assertEquals(3, client().prepareGet(""test"", ""test"", ""2"").get().getVersion());
        assertEquals(2, client().prepareGet(""test"", ""test"", ""3"").get().getVersion());
        assertEquals(2, client().prepareGet(""test"", ""test"", ""4"").get().getVersion());

        // Limit with size
        UpdateByQueryRequestBuilder request = updateByQuery().source(""test"").size(3).refresh(true);
        request.source().addSort(""foo.keyword"", SortOrder.ASC);
        assertThat(request.get(), matcher().updated(3));
        // Only the first three documents are updated because of sort
        assertEquals(4, client().prepareGet(""test"", ""test"", ""1"").get().getVersion());
        assertEquals(4, client().prepareGet(""test"", ""test"", ""2"").get().getVersion());
        assertEquals(3, client().prepareGet(""test"", ""test"", ""3"").get().getVersion());
        assertEquals(2, client().prepareGet(""test"", ""test"", ""4"").get().getVersion());
    }
",non-flaky,5
97998,ReactiveX_RxJava,ReduceTests.call,"    @Test
    public void reduceInts() {
        Observable<Integer> o = Observable.from(1, 2, 3);
        int value = o.reduce(new Func2<Integer, Integer, Integer>() {

            @Override
            public Integer call(Integer t1, Integer t2) {
                return t1 + t2;
            }
",non-flaky,5
135767,Netflix_Hystrix,HystrixPluginsTest.testConcurrencyStrategyDefaultImpl,"    /*@Test
    public void testConcurrencyStrategyDefaultImpl() {
        HystrixConcurrencyStrategy impl = HystrixPlugins.getInstance().getConcurrencyStrategy();
        assertTrue(impl instanceof HystrixConcurrencyStrategyDefault);
    }
",non-flaky,5
178020,aosp-mirror_platform_frameworks_support,PlaybackControlGlueTest.testMediaPlayPauseButtonOnPause,"    @Test
    public void testMediaPlayPauseButtonOnPause() {
        PlaybackControlsRow row = new PlaybackControlsRow();
        glue.setControlsRow(row);
        SparseArrayObjectAdapter adapter = (SparseArrayObjectAdapter)
                row.getPrimaryActionsAdapter();
        PlaybackControlsRow.MultiAction playPause = (PlaybackControlsRow.MultiAction) adapter
                .lookup(PlaybackControlGlue.ACTION_PLAY_PAUSE);

        glue.onActionClicked(playPause);
        glue.onActionClicked(playPause);
        assertEquals(PlaybackControlGlue.PLAYBACK_SPEED_PAUSED, glue.getCurrentSpeedId());
        glue.onKey(null, KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE, new KeyEvent(KeyEvent.ACTION_DOWN,
                KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE));
        assertEquals(PlaybackControlGlue.PLAYBACK_SPEED_NORMAL, glue.getCurrentSpeedId());
    }
",non-flaky,5
118774,netty_netty,ByteBufUtilTest.testUtf8BytesWithSurrogates,"    @Test
    public void testUtf8BytesWithSurrogates() {
        final String s = ""a\uD800\uDC00b"";
        checkUtf8Bytes(s);
    }
",non-flaky,5
98057,vert-x3_vertx-mongo-client,GridFsTest.testFileDownload,"  @Test
  public void testFileDownload() {
    String fileName = createTempFileWithContent(1024);

    AtomicReference<MongoGridFsClient> gridFsClient = new AtomicReference<>();

    Promise<MongoGridFsClient> gridFsClientPromise = Promise.promise();

    mongoClient.createGridFsBucketService(""fs"", gridFsClientPromise);

    gridFsClientPromise.future().compose(mongoGridFsClient -> {
      assertNotNull(mongoGridFsClient);
      gridFsClient.set(mongoGridFsClient);
      Promise<Void> dropPromise = Promise.promise();
      mongoGridFsClient.drop(dropPromise);
      return dropPromise.future();
    }).compose(dropped -> {
      Promise<String> uploadPromise = Promise.promise();
      gridFsClient.get().uploadFile(fileName, uploadPromise);
      return uploadPromise.future();
    }).compose(uploaded -> {
      Promise<Long> downloadPromise = Promise.promise();
      gridFsClient.get().downloadFile(fileName, downloadPromise);
      return downloadPromise.future();
    }).compose(length -> {
      assertEquals(1024L, length.longValue());
      testComplete();
      return Future.succeededFuture();
    }).onComplete(event -> {
      if (event.failed()) {
        fail(event.cause());
      }
    });
    await();

  }
",non-flaky,5
30922,camunda-cloud_zeebe,MsgPackWriterMiscTest.testEncodedLongValueLength,"  @Test
  public void testEncodedLongValueLength() {
    assertThat(MsgPackWriter.getEncodedLongValueLength(0x7f)).isEqualTo(1);
    assertThat(MsgPackWriter.getEncodedLongValueLength(0xff)).isEqualTo(2);
    assertThat(MsgPackWriter.getEncodedLongValueLength(0xffff)).isEqualTo(3);
    assertThat(MsgPackWriter.getEncodedLongValueLength(0xffff_ffffL)).isEqualTo(5);
    assertThat(MsgPackWriter.getEncodedLongValueLength(0x7fff_ffff_ffff_ffffL)).isEqualTo(9);
    assertThat(MsgPackWriter.getEncodedLongValueLength(-0x20)).isEqualTo(1);
    assertThat(MsgPackWriter.getEncodedLongValueLength(Byte.MIN_VALUE)).isEqualTo(2);
    assertThat(MsgPackWriter.getEncodedLongValueLength(Short.MIN_VALUE)).isEqualTo(3);
    assertThat(MsgPackWriter.getEncodedLongValueLength(Integer.MIN_VALUE)).isEqualTo(5);
    assertThat(MsgPackWriter.getEncodedLongValueLength(Long.MIN_VALUE)).isEqualTo(9);
  }
",non-flaky,5
43052,trinodb_trino,BaseConnectorTest.testPredicateReflectedInExplain,"    @Test
    public void testPredicateReflectedInExplain()
    {
        // Even if the predicate is pushed down into the table scan, it should still be reflected in EXPLAIN (via ConnectorTableHandle.toString)
        assertExplain(
                ""EXPLAIN SELECT name FROM nation WHERE nationkey = 42"",
                ""(predicate|filterPredicate|constraint).{0,10}(nationkey|NATIONKEY)"");
    }
",non-flaky,5
21175,androidx_androidx,PreferenceGroupInitialExpandedChildrenCountTest.restoreHierarchyState_previouslyCollapsed_shouldRestoreToCollapsedState,"    @Test
    public void restoreHierarchyState_previouslyCollapsed_shouldRestoreToCollapsedState() {
        PreferenceGroup.SavedState state =
                new PreferenceGroup.SavedState(
                        Preference.BaseSavedState.EMPTY_STATE, Integer.MAX_VALUE);
        // Initialized as expanded, restore as collapsed, should collapse
        state.mInitialExpandedChildrenCount = INITIAL_EXPANDED_COUNT;
        mScreen.setInitialExpandedChildrenCount(Integer.MAX_VALUE);
        PreferenceGroupAdapter preferenceGroupAdapter =
                PreferenceGroupAdapter.createInstanceWithCustomHandler(mScreen, mHandler);
        mScreen.onRestoreInstanceState(state);
        verify(mHandler).sendMessageDelayed(any(Message.class), anyLong());
        assertPreferencesAreCollapsed(preferenceGroupAdapter);
    }
",non-flaky,5
110111,Wikidata_wikidata-toolkit,JsonSerializationActionTest.testJsonGzipOutput,"	@Test
	public void testJsonGzipOutput() throws IOException {
		String[] args = new String[] { ""-a"", ""json"", ""-o"",
				""/path/to/output.json"", ""-z"", ""gz"" };

		DirectoryManagerFactory
				.setDirectoryManagerClass(MockDirectoryManager.class);

		ClientConfiguration config = new ClientConfiguration(args);
		JsonSerializationAction jsa = (JsonSerializationAction) config
				.getActions().get(0);

		ItemIdValue subject1 = Datamodel.makeWikidataItemIdValue(""Q42"");
		MonolingualTextValue mtv1 = Datamodel.makeMonolingualTextValue(""Test1"",
				""en"");
		MonolingualTextValue mtv2 = Datamodel.makeMonolingualTextValue(""Test2"",
				""fr"");

		ItemDocument id1 = Datamodel.makeItemDocument(subject1,
				Arrays.asList(mtv1, mtv2), Arrays.asList(mtv1),
				Collections.<MonolingualTextValue> emptyList(),
				Collections.<StatementGroup> emptyList(),
				Collections.<String, SiteLink> emptyMap());

		jsa.open();
		jsa.processItemDocument(id1);
		jsa.close();

		MockDirectoryManager mdm = new MockDirectoryManager(
				Paths.get(""/path/to/""), false);

		ObjectMapper mapper = new DatamodelMapper(Datamodel.SITE_WIKIDATA);
		ObjectReader documentReader = mapper.readerFor(EntityDocumentImpl.class);
		MappingIterator<EntityDocument> documentIterator = documentReader
				.readValues(mdm.getInputStreamForFile(""output.json.gz"",
						CompressionType.GZIP));

		List<EntityDocument> results = new ArrayList<>();
		while (documentIterator.hasNextValue()) {
			EntityDocument document = documentIterator.nextValue();
			results.add(document);
		}
		documentIterator.close();

		assertEquals(1, results.size());
		assertEquals(id1, results.get(0));
	}
",non-flaky,5
176799,ctco_cukes,ContextCapturerTest.shouldNotInvokeCaptureValuesFromPatternIfNoGroupsFound,"    @Test
    public void shouldNotInvokeCaptureValuesFromPatternIfNoGroupsFound() throws Exception {
        capturer.capture(""hello"", ""world"");
        verify(capturer, never()).captureValuesFromPattern(anyString(), anyListOf(String.class), anyString());
    }
",non-flaky,5
162685,OpenAPITools_openapi-generator,UserApiTest.logoutUserTest,"    @Test
    public void logoutUserTest() {
        //api.logoutUser();
        
        // TODO: test validations
        
        
    }
",non-flaky,5
98088,vert-x3_vertx-mongo-client,ParsingSSLOptionsTest.one_should_be_able_to_enable_ssl_support_via_connection_string,"  @Test
  public void one_should_be_able_to_enable_ssl_support_via_connection_string() {
    // given
    final JsonObject withSSLEnabled = new JsonObject().put(
      ""connection_string"", ""mongodb://localhost:27017/mydb?replicaSet=myRs&ssl=true""
    );

    // when
    final SslSettings sslSettings = new MongoClientOptionsParser(vertx, withSSLEnabled).settings().getSslSettings();

    // then
    assertTrue(sslSettings.isEnabled());
  }
",non-flaky,5
91428,strapdata_elassandra,HistoryActionConditionTests.testActionConditionWithHardFailures,"@TestLogging(""org.elasticsearch.xpack.watcher:DEBUG,org.elasticsearch.xpack.watcher.WatcherIndexingListener:TRACE"")
    public void testActionConditionWithHardFailures() throws Exception {
        final String id = ""testActionConditionWithHardFailures"";

        final ExecutableCondition scriptConditionFailsHard = mockScriptCondition(""throw new IllegalStateException('failed');"");
        final List<ExecutableCondition> actionConditionsWithFailure =
                Arrays.asList(scriptConditionFailsHard, conditionPasses, InternalAlwaysCondition.INSTANCE);

        Collections.shuffle(actionConditionsWithFailure, random());

        final int failedIndex = actionConditionsWithFailure.indexOf(scriptConditionFailsHard);

        putAndTriggerWatch(id, input, actionConditionsWithFailure.toArray(new Condition[actionConditionsWithFailure.size()]));

        flush();

        assertWatchWithMinimumActionsCount(id, ExecutionState.EXECUTED, 1);

        // only one action should have failed via condition
        final SearchResponse response = searchHistory(SearchSourceBuilder.searchSource().query(termQuery(""watch_id"", id)));
        assertThat(response.getHits().getTotalHits(), is(1L));

        final SearchHit hit = response.getHits().getAt(0);
        final List<Object> actions = getActionsFromHit(hit.getSourceAsMap());

        for (int i = 0; i < actionConditionsWithFailure.size(); ++i) {
            final Map<String, Object> action = (Map<String, Object>)actions.get(i);
            final Map<String, Object> condition = (Map<String, Object>)action.get(""condition"");
            final Map<String, Object> logging = (Map<String, Object>)action.get(""logging"");

            assertThat(action.get(""id""), is(""action"" + i));

            if (i == failedIndex) {
                assertThat(action.get(""status""), is(""condition_failed""));
                assertThat(action.get(""reason""), is(""condition failed. skipping: [expected] failed hard""));
                assertThat(condition, nullValue());
                assertThat(logging, nullValue());
            } else {
                assertThat(condition.get(""type""), is(actionConditionsWithFailure.get(i).type()));

                assertThat(action.get(""status""), is(""success""));
                assertThat(condition.get(""met""), is(true));
                assertThat(action.get(""reason""), nullValue());
                assertThat(logging.get(""logged_text""), is(Integer.toString(i)));
            }
        }
    }
",non-flaky,5
176789,ctco_cukes,ContextInflaterTest.testInflateGroups_multipleEmpty,"    @Test
    public void testInflateGroups_multipleEmpty() throws Exception {
        String value = inflater.inflateGroups(""{(foo)} {(bar)}"", Sets.newHashSet(""foo"", ""bar""));
        assertThat(value, equalTo(""{(foo)} {(bar)}""));
    }
",non-flaky,5
97750,vojtechhabarta_typescript-generator,ModelCompilerTest.testDate,"    @Test
    public void testDate() throws Exception {
        final Settings settings = getTestSettings();
        final Type javaType = A.class.getField(""timestamp"").getGenericType();
        Assert.assertEquals(""DateAsString"", TestUtils.compileType(settings, javaType).toString());
    }
",non-flaky,5
30938,camunda-cloud_zeebe,ElasticsearchExporterTest.shouldNotExportDisabledValueTypes,"  @Test
  public void shouldNotExportDisabledValueTypes() {
    // given
    config.index.event = true;
    config.index.deployment = false;
    config.index.error = false;
    config.index.incident = false;
    config.index.job = false;
    config.index.jobBatch = false;
    config.index.message = false;
    config.index.messageSubscription = false;
    config.index.variable = false;
    config.index.variableDocument = false;
    config.index.processInstance = false;
    config.index.processInstanceCreation = false;
    config.index.processMessageSubscription = false;

    createAndOpenExporter();

    final ValueType[] valueTypes =
        new ValueType[] {
          ValueType.DEPLOYMENT,
          ValueType.ERROR,
          ValueType.INCIDENT,
          ValueType.JOB,
          ValueType.JOB_BATCH,
          ValueType.MESSAGE,
          ValueType.MESSAGE_SUBSCRIPTION,
          ValueType.VARIABLE,
          ValueType.VARIABLE_DOCUMENT,
          ValueType.PROCESS_INSTANCE,
          ValueType.PROCESS_INSTANCE_CREATION,
          ValueType.PROCESS_MESSAGE_SUBSCRIPTION
        };

    // when - then
    final Context.RecordFilter filter = testHarness.getContext().getFilter();

    assertThat(Arrays.stream(valueTypes).map(filter::acceptValue)).containsOnly(false);
  }
",non-flaky,5
33855,apache_camel,FhirValidateIT.testResource,"    @Test
    public void testResource() throws Exception {
        Patient bobbyHebb = new Patient().addName(new HumanName().addGiven(""Bobby"").setFamily(""Hebb""));
        // using org.hl7.fhir.instance.model.api.IBaseResource message body for single parameter ""resource""
        MethodOutcome result = requestBody(""direct://RESOURCE"", bobbyHebb);

        assertNotNull(result, ""resource result"");
        LOG.debug(""resource: "" + result);
        assertNotNull(result.getOperationOutcome());
        assertTrue(((OperationOutcome) result.getOperationOutcome()).getText().getDivAsString()
                .contains(""No issues detected during validation""));
    }
",non-flaky,5
33684,alibaba_fastjson,JSONScannerTest.checkDate7,"  @Test
  public void checkDate7() throws Throwable {

    // Arrange
    char y0 = '2';
    char y1 = '1';
    char y2 = '0';
    char y3 = '0';
    char M0 = '0';
    char M1 = '\u0000';
    int d0 = 0;
    int d1 = 0;

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkDate"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""int""), Reflector.forName(""int""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, y0, y1, y2, y3, M0, M1, d0, d1);

    // Assert result
    Assert.assertEquals(false, retval);

  }
",non-flaky,5
26901,wildfly_wildfly,InMemoryNamingStoreTestCase.testList,"    @Test
    public void testList() throws Exception {
        final Name name = new CompositeName(""test"");
        final Object object = new Object();
        nameStore.bind(name, object, Object.class);
        final Name nameTwo = new CompositeName(""testTwo"");
        final Object objectTwo = new Object();
        nameStore.bind(nameTwo, objectTwo, Object.class);
        final Name nameThree = new CompositeName(""testThree"");
        final Object objectThree = new Object();
        nameStore.bind(nameThree, objectThree, Object.class);

        nameStore.bind(new CompositeName(""testContext/test""), ""test"");

        final List<NameClassPair> results = nameStore.list(new CompositeName());
        assertEquals(4, results.size());
        final Set<String> expected = new HashSet<String>(Arrays.asList(""test"", ""testTwo"", ""testThree"", ""testContext""));
        for(NameClassPair result : results) {
            final String resultName = result.getName();
            if(""test"".equals(resultName) || ""testTwo"".equals(resultName) || ""testThree"".equals(resultName)) {
                assertEquals(Object.class.getName(), result.getClassName());
            } else if(""testContext"".equals(resultName)) {
                assertEquals(Context.class.getName(), result.getClassName());
            } else {
                fail(""Unknown result name: "" + resultName);
            }
            expected.remove(resultName);
        }
        assertTrue(""Not all expected results were returned"", expected.isEmpty());
    }
",non-flaky,5
177972,aosp-mirror_platform_frameworks_support,ColorUtilsTest.testColorToLAB,"    @Test
    public void testColorToLAB() {
        for (TestEntry entry : sEntryList) {
            verifyColorToLAB(entry.rgb, entry.lab);
        }
    }
",non-flaky,5
106602,Alluxio_alluxio,ClientTest.notEnoughVCoreForApplicationMaster,"  @Test
  public void notEnoughVCoreForApplicationMaster() throws Exception {
    int appMasterMem = 1024;
    int appMasterCore = 2;
    Resource resource = Resource.newInstance(appMasterMem, appMasterCore / 2);
    generateMaxAllocation(resource);
    mThrown.expect(RuntimeException.class);
    mThrown.expectMessage(ExceptionMessage.YARN_NOT_ENOUGH_RESOURCES.getMessage(
        ""ApplicationMaster"", ""virtual cores"", appMasterCore, resource.getVirtualCores()));
    String[] args = new String[] {
        ""-resource_path"", ""test"",
        ""-am_memory"", Integer.toString(appMasterMem),
        ""-am_vcores"", Integer.toString(appMasterCore)
    };
    Client client = new Client(args, mConf);
    client.run();
  }
",non-flaky,5
156107,soot-oss_soot,DefaultInterfaceTest.classInterfaceWithSameSignatureTest,"  @Test
  public void classInterfaceWithSameSignatureTest() {
    String testClass = ""soot.defaultInterfaceMethods.ClassInterfaceSameSignature"";
    String defaultClass = ""soot.defaultInterfaceMethods.HelloWorld"";

    final SootMethod target =
        prepareTarget(
            methodSigFromComponents(testClass, voidType, mainClass),
            testClass,
            defaultClass);

    SootMethod mainPrintMethod =
        Scene.v()
            .getMethod(""<soot.defaultInterfaceMethods.ClassInterfaceSameSignature: void print()>"");
    SootMethod defaultPrintMethod =
        Scene.v().getMethod(""<soot.defaultInterfaceMethods.HelloWorld: void print()>"");

    Body mainBody = target.retrieveActiveBody();
    SootMethod refMainMethod = resolveMethodRefInBody(mainBody.getUnits(), ""void print()"");
    SootMethod resolvedMethod =
        VirtualCalls.v()
            .resolveNonSpecial(
                Scene.v().getRefType(testClass), defaultPrintMethod.makeRef(), false);
    SootMethod concreteImpl =
        Scene.v()
            .getFastHierarchy()
            .resolveConcreteDispatch(Scene.v().getSootClass(testClass), defaultPrintMethod);
    Set<SootMethod> abstractImpl =
        Scene.v()
            .getFastHierarchy()
            .resolveAbstractDispatch(Scene.v().getSootClass(defaultClass), defaultPrintMethod);
    boolean edgeMainMethodToMainPrint = checkInEdges(mainPrintMethod, target);
    boolean edgeMainPrintToDefaultPrint = checkInEdges(defaultPrintMethod, target);
    final ReachableMethods reachableMethods = Scene.v().getReachableMethods();

    Map<SootMethod, String> targetMethods =
        new HashMap<SootMethod, String>() {
          {
            put(mainPrintMethod, ""print"");
            put(defaultPrintMethod, ""print"");
          }
        };

    ArrayList<Boolean> edgePresent =
        new ArrayList<Boolean>() {
          {
            add(edgeMainMethodToMainPrint);
          }
        };

    for (Map.Entry<SootMethod, String> targetMethod : targetMethods.entrySet()) {
      assertNotNull(targetMethod.getKey());
    }
    assertEquals(mainPrintMethod, resolvedMethod);
    assertEquals(mainPrintMethod, refMainMethod);
    for (Map.Entry<SootMethod, String> targetMethod : targetMethods.entrySet()) {
      assertEquals(targetMethod.getKey().getName(), targetMethod.getValue());
    }

    assertTrue(reachableMethods.contains(mainPrintMethod));

    for (boolean isPresent : edgePresent) {
      assertTrue(isPresent);
    }
    assertEquals(mainPrintMethod, concreteImpl);
    assertTrue(
        abstractImpl.contains(
            Scene.v()
                .getMethod(
                    ""<soot.defaultInterfaceMethods.ClassInterfaceSameSignature: void print()>"")));
  }
",non-flaky,5
98332,spotify_docker-client,DockerCertificatesTest.testNoDockerCertificatesInDir,"  @Test
  public void testNoDockerCertificatesInDir() throws Exception {
    final Path certDir = Paths.get(System.getProperty(""java.io.tmpdir""));
    final Optional<DockerCertificatesStore> result = DockerCertificates.builder()
        .dockerCertPath(certDir)
        .build();
    assertThat(result.isPresent(), is(false));
  }
",non-flaky,5
94723,ktuukkan_marine-api,SpeedOverGroundTest.negativeValueIsNotAvailable,"    @Test
    public void negativeValueIsNotAvailable() {
        assertFalse(SpeedOverGround.isAvailable(-1));
    }
",non-flaky,5
33930,apache_camel,CordaProducerIT.currentNodeTimeTest,"    @Test
    public void currentNodeTimeTest() throws Exception {
        Exchange exchange = createExchangeWithBodyAndHeader(null, OPERATION, CURRENT_NODE_TIME);
        template.send(exchange);
        Object body = exchange.getIn().getBody();
        assertNotNull(body);
        Object exception = exchange.getException();
        assertNull(exception);
    }
",non-flaky,5
99763,apache_cassandra,RateBasedBackPressureTest.testHighRatioMustBeSmallerEqualThanOne,"    @Test(expected = IllegalArgumentException.class)
    public void testHighRatioMustBeSmallerEqualThanOne() throws Exception
    {
        new RateBasedBackPressure(ImmutableMap.of(HIGH_RATIO, ""2"", FACTOR, ""2"", FLOW, ""FAST""), new TestTimeSource(), 10);
    }
",non-flaky,5
98658,nutzam_nutz,JspViewTest.test_simple,"    @Test
    public void test_simple(){
        get(""/views/jsp"");
        assertEquals(""null"", resp.getContent());
        get(""/views/jsp2"");
        assertEquals(""null"", resp.getContent());
        get(""/views/jsp3"");
        assertEquals(""null"", resp.getContent());
        get(""/views/jsp4"");
        assertEquals(""null"", resp.getContent());
    }
",non-flaky,5
77450,opensearch-project_OpenSearch,DependencyLicensesTaskTests.givenProjectWithAIgnoreShaConfigurationAndNoShaFileThenShouldReturnSilently,"    @Test
    public void givenProjectWithAIgnoreShaConfigurationAndNoShaFileThenShouldReturnSilently() throws Exception {
        project.getDependencies().add(""compile"", dependency);

        File licensesDir = getLicensesDir(project);
        createFileIn(licensesDir, ""groovy-all-LICENSE.txt"", PERMISSIVE_LICENSE_TEXT);
        createFileIn(licensesDir, ""groovy-all-NOTICE.txt"", """");

        task.get().ignoreSha(""groovy-all"");
        task.get().checkDependencies();
    }
",non-flaky,5
112103,apache_shardingsphere-elasticjob,DistributeOnceElasticJobListenerTest.assertAfterJobExecutedWhenIsAllCompleted,"    @Test
    public void assertAfterJobExecutedWhenIsAllCompleted() {
        when(guaranteeService.isAllCompleted()).thenReturn(true);
        distributeOnceElasticJobListener.afterJobExecuted(shardingContexts);
        verify(guaranteeService).registerComplete(Sets.newHashSet(0, 1));
        verify(elasticJobListenerCaller).after();
        verify(guaranteeService).clearAllCompletedInfo();
    }
",non-flaky,5
179414,abel533_Mapper,KeySqlTest.testAll,"    @Test
    public void testAll(){
        EntityHelper.initEntityNameMap(UserAll.class, config);
        EntityTable entityTable = EntityHelper.getEntityTable(UserAll.class);
        Assert.assertNotNull(entityTable);

        Set<EntityColumn> columns = entityTable.getEntityClassColumns();
        Assert.assertEquals(1, columns.size());

        for (EntityColumn column : columns) {
            Assert.assertEquals(""JDBC"", column.getGenerator());
            Assert.assertTrue(column.isIdentity());
        }
    }
",non-flaky,5
78234,apache_beam,SimplePushbackSideInputDoFnRunnerTest.processElementSideInputNotReadyMultipleWindows,"  @Test
  public void processElementSideInputNotReadyMultipleWindows() {
    when(reader.isReady(Mockito.eq(singletonView), Mockito.any(BoundedWindow.class)))
        .thenReturn(false);

    SimplePushbackSideInputDoFnRunner<Integer, Integer> runner =
        createRunner(ImmutableList.of(singletonView));

    WindowedValue<Integer> multiWindow =
        WindowedValue.of(
            2,
            new Instant(-2),
            ImmutableList.of(
                new IntervalWindow(new Instant(-500L), new Instant(0L)),
                new IntervalWindow(BoundedWindow.TIMESTAMP_MIN_VALUE, new Instant(250L)),
                GlobalWindow.INSTANCE),
            PaneInfo.ON_TIME_AND_ONLY_FIRING);
    Iterable<WindowedValue<Integer>> multiWindowPushback =
        runner.processElementInReadyWindows(multiWindow);
    assertThat(multiWindowPushback, equalTo(multiWindow.explodeWindows()));
    assertThat(underlying.inputElems, emptyIterable());
  }
",non-flaky,5
112632,tbsalling_aismessages,AISMessageTest.canReturnRawNmeaMessages,"    @Test
    public void canReturnRawNmeaMessages() {
        // Test one-liner
        AISMessage aisMessage = AISMessage.create(
            NMEAMessage.fromString(""!BSVDM,1,1,,A,1:02Ih001U0d=V:Op85<2aT>0<0F,0*3B"")
        );

        NMEAMessage[] nmeaMessages = aisMessage.getNmeaMessages();
        assertNotNull(nmeaMessages);
        assertEquals(1, nmeaMessages.length);
        assertEquals(""!BSVDM,1,1,,A,1:02Ih001U0d=V:Op85<2aT>0<0F,0*3B"", nmeaMessages[0].getRawMessage());

        // Test two-liner
        aisMessage =AISMessage.create(
            NMEAMessage.fromString(""!BSVDM,2,1,5,A,5:02Ih01WrRsEH57J20H5P8u8N222222222222167H66663k085QBS1H,0*55""),
            NMEAMessage.fromString(""!BSVDM,2,2,5,A,888888888888880,2*38"")
        );

        nmeaMessages = aisMessage.getNmeaMessages();
        assertNotNull(nmeaMessages);
        assertEquals(2, nmeaMessages.length);
        assertEquals(""!BSVDM,2,1,5,A,5:02Ih01WrRsEH57J20H5P8u8N222222222222167H66663k085QBS1H,0*55"", nmeaMessages[0].getRawMessage());
        assertEquals(""!BSVDM,2,2,5,A,888888888888880,2*38"", nmeaMessages[1].getRawMessage());
    }
",non-flaky,5
274,jReddit_jReddit,KeyValueFormatterTest.testFormatMultipleUTF8,"@Test
public void testFormatMultipleUTF8() {
    HashMap<String, String> params = new HashMap<String, String>();
    params.put(""a "", ""b, "");
    params.put(""c"", ""32626&"");
    Assert.assertTrue(""a =b%2C+&c=32626%26"".equals(KeyValueFormatter.format(params, true)) || ""c=32626%26&a =b%2C+"".equals(KeyValueFormatter.format(params, true)));
}",unordered collections,3
113715,salesforce_reactive-grpc,ServerErrorUpstreamCancellationIntegrationTest.serverErrorSignalsUpstreamCancellationManyToOne,"    @Test
    public void serverErrorSignalsUpstreamCancellationManyToOne() {
        serverRule.getServiceRegistry().addService(new ExplodeAfterFiveService());
        ReactorNumbersGrpc.ReactorNumbersStub stub = ReactorNumbersGrpc.newReactorStub(serverRule.getChannel());

        AtomicBoolean upstreamCancel = new AtomicBoolean(false);

        Mono<NumberProto.Number> observer = Flux.range(0, Integer.MAX_VALUE)
                .map(this::protoNum)
                .doOnCancel(() -> upstreamCancel.set(true))
                .as(stub::requestPressure)
                .doOnError(System.out::println)
                .doOnSuccess(i -> System.out.println(i.getNumber(0)));

        StepVerifier.create(observer)
                .verifyError(StatusRuntimeException.class);

        assertThat(upstreamCancel.get()).isTrue();
    }
",non-flaky,5
170474,eclipse_jetty.project,ObjectMBeanUtilTest.testSetAttributeAttributeWithWrongAttrName,"    @Test
    public void testSetAttributeAttributeWithWrongAttrName()
    {
        attribute = new Attribute(""fnameee"", ""charu"");

        AttributeNotFoundException e = assertThrows(AttributeNotFoundException.class, () -> objectMBean.setAttribute(attribute));

        assertNotNull(e, ""An AttributeNotFoundException must have occurred by now as there is no attribute "" + ""with the name ffname in bean"");
    }
",non-flaky,5
99784,apache_cassandra,MessagingServiceTest.testAppliesBackPressureWhenEnabled,"    @Test
    public void testAppliesBackPressureWhenEnabled() throws UnknownHostException
    {
        DatabaseDescriptor.setBackPressureEnabled(false);
        messagingService.applyBackPressure(Arrays.asList(InetAddressAndPort.getByName(""127.0.0.2"")), ONE_SECOND);
        assertFalse(MockBackPressureStrategy.applied);

        DatabaseDescriptor.setBackPressureEnabled(true);
        messagingService.applyBackPressure(Arrays.asList(InetAddressAndPort.getByName(""127.0.0.2"")), ONE_SECOND);
        assertTrue(MockBackPressureStrategy.applied);
    }
",non-flaky,5
77014,Tencent_Firestorm,AQESkewedJoinTest.resultCompareTest,"  @Test
  public void resultCompareTest() throws Exception {
    run();
  }
",non-flaky,5
97742,vojtechhabarta_typescript-generator,CustomTypeMappingTest.testEnumAsMap,"    @Test
    public void testEnumAsMap() throws Exception {
//        final ObjectMapper objectMapper = new ObjectMapper();
//        final String json = objectMapper.writeValueAsString(MyEnum.MY_FIRST_VALUE);
//        System.out.println(json);

        final Settings settings = TestUtils.settings();
        settings.customTypeMappings = Collections.singletonMap(""cz.habarta.typescript.generator.CustomTypeMappingTest$MyEnum"", ""{ code: string, definition: string }"");
        final String output = new TypeScriptGenerator(settings).generateTypeScript(Input.from(MyInterfUsingEnum.class));
        assertTrue(output.contains(""someValue: { code: string, definition: string }""));
    }
",non-flaky,5
175762,GoogleCloudPlatform_google-cloud-eclipse,BlankDeployPreferencesPanelTest.testGetHelpContextId,"  @Test
  public void testGetHelpContextId() {
    assertNull(new BlankDeployPreferencesPanel(shellTestResource.getShell()).getHelpContextId());
  }
",non-flaky,5
60921,apache_druid,DoubleMeanAveragerTest.testComputeResult,"  @Test
  public void testComputeResult()
  {
    BaseAverager<Number, Double> avg = new DoubleMeanAverager(3, ""test"", ""field"", 1);

    Assert.assertEquals(0.0, avg.computeResult(), 0.0);

    avg.addElement(Collections.singletonMap(""field"", 3.0), new HashMap<>());
    Assert.assertEquals(1.0, avg.computeResult(), 0.0);

    avg.addElement(Collections.singletonMap(""field"", 3.0), new HashMap<>());
    Assert.assertEquals(2.0, avg.computeResult(), 0.0);

    avg.addElement(Collections.singletonMap(""field"", 0), new HashMap<>());
    Assert.assertEquals(2.0, avg.computeResult(), 0.0);

    avg.addElement(Collections.singletonMap(""field"", 2.0), new HashMap<>());
    avg.addElement(Collections.singletonMap(""field"", 2.0), new HashMap<>());
    avg.addElement(Collections.singletonMap(""field"", 2.0), new HashMap<>());
    Assert.assertEquals(2.0, avg.computeResult(), 0.0);

    avg.skip();
    Assert.assertEquals(4.0 / 3, avg.computeResult(), 0.0);
  }
",non-flaky,5
91455,strapdata_elassandra,RecoveryWhileUnderLoadIT.testRecoverWhileUnderLoadAllocateReplicasTest,"@TestLogging(""_root:DEBUG,org.elasticsearch.index.shard:TRACE,org.elasticsearch.cluster.service:TRACE,org.elasticsearch.index.seqno:TRACE,org.elasticsearch.indices.recovery:TRACE"")
    public void testRecoverWhileUnderLoadAllocateReplicasTest() throws Exception {
        logger.info(""--> creating test index ..."");
        int numberOfShards = numberOfShards();
        assertAcked(prepareCreate(""test"", 1, Settings.builder().put(SETTING_NUMBER_OF_SHARDS, numberOfShards).put(SETTING_NUMBER_OF_REPLICAS, 1).put(IndexSettings.INDEX_TRANSLOG_DURABILITY_SETTING.getKey(), Translog.Durability.ASYNC)));

        final int totalNumDocs = scaledRandomIntBetween(200, 10000);
        int waitFor = totalNumDocs / 10;
        int extraDocs = waitFor;
        try (BackgroundIndexer indexer = new BackgroundIndexer(""test"", ""type"", client(), extraDocs)) {
            logger.info(""--> waiting for {} docs to be indexed ..."", waitFor);
            waitForDocs(waitFor, indexer);
            indexer.assertNoFailures();
            logger.info(""--> {} docs indexed"", waitFor);

            extraDocs = totalNumDocs / 10;
            waitFor += extraDocs;
            indexer.continueIndexing(extraDocs);
            logger.info(""--> flushing the index ...."");
            // now flush, just to make sure we have some data in the index, not just translog
            client().admin().indices().prepareFlush().execute().actionGet();

            logger.info(""--> waiting for {} docs to be indexed ..."", waitFor);
            waitForDocs(waitFor, indexer);
            indexer.assertNoFailures();
            logger.info(""--> {} docs indexed"", waitFor);

            extraDocs = totalNumDocs - waitFor;
            indexer.continueIndexing(extraDocs);

            logger.info(""--> allow 2 nodes for index [test] ..."");
            // now start another node, while we index
            allowNodes(""test"", 2);

            logger.info(""--> waiting for GREEN health status ..."");
            // make sure the cluster state is green, and all has been recovered
            assertNoTimeout(client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setTimeout(""5m"").setWaitForGreenStatus());

            logger.info(""--> waiting for {} docs to be indexed ..."", totalNumDocs);
            waitForDocs(totalNumDocs, indexer);
            indexer.assertNoFailures();
            logger.info(""--> {} docs indexed"", totalNumDocs);

            logger.info(""--> marking and waiting for indexing threads to stop ..."");
            indexer.stop();
            logger.info(""--> indexing threads stopped"");

            logger.info(""--> refreshing the index"");
            refreshAndAssert();
            logger.info(""--> verifying indexed content"");
            iterateAssertCount(numberOfShards, 10, indexer.getIds());
        }
    }
",non-flaky,5
135073,undertow-io_undertow,CookiesTestCase.testMultipleRequestCookies,"    @Test
    public void testMultipleRequestCookies() {
        Map<String, Cookie> cookies = Cookies.parseRequestCookies(2, false, Arrays.asList(
                ""CUSTOMER=WILE_E_COYOTE; $Domain=LOONEY_TUNES; $Version=1; $Path=/; SHIPPING=FEDEX""));

        Cookie cookie = cookies.get(""CUSTOMER"");
        Assert.assertEquals(""CUSTOMER"", cookie.getName());
        Assert.assertEquals(""WILE_E_COYOTE"", cookie.getValue());
        Assert.assertEquals(""LOONEY_TUNES"", cookie.getDomain());
        Assert.assertEquals(1, cookie.getVersion());
        Assert.assertEquals(""/"", cookie.getPath());

        cookie = cookies.get(""SHIPPING"");
        Assert.assertEquals(""SHIPPING"", cookie.getName());
        Assert.assertEquals(""FEDEX"", cookie.getValue());
        Assert.assertEquals(""LOONEY_TUNES"", cookie.getDomain());
        Assert.assertEquals(1, cookie.getVersion());
        Assert.assertEquals(""/"", cookie.getPath());
    }
",non-flaky,5
76769,quarkusio_quarkus,PackageIT.testLegacyJarHasValidCRC,"    @Test
    public void testLegacyJarHasValidCRC() throws Exception {
        testDir = initProject(""projects/uberjar-check"", ""projects/project-legacyjar-crc"");

        running = new RunningInvoker(testDir, false);
        final MavenProcessInvocationResult result = running.execute(Collections.singletonList(""package""),
                Collections.singletonMap(""QUARKUS_PACKAGE_TYPE"", ""legacy-jar""));

        assertThat(result.getProcess().waitFor()).isEqualTo(0);

        final File targetDir = getTargetDir();
        assertThat(getNumberOfFilesEndingWith(targetDir, "".jar"")).isEqualTo(2);

        final Path runnerJar = targetDir.toPath().resolve(""acme-1.0-SNAPSHOT-runner.jar"");
        Assertions.assertTrue(Files.exists(runnerJar), ""Runner jar "" + runnerJar + "" is missing"");
        assertZipEntriesCanBeOpenedAndClosed(runnerJar);
    }
",non-flaky,5
114076,aws_aws-sdk-java-v2,ExpressionTest.join_correctlyWrapsExpressions,"    @Test
    public void join_correctlyWrapsExpressions() {
        Expression expression1 = Expression.builder().expression(""one"").build();
        Expression expression2 = Expression.builder().expression(""two"").build();
        Expression expression3 = Expression.builder().expression(""three"").build();

        Expression coalescedExpression = Expression.join(Expression.join(expression1, expression2, "" AND ""),
                                                         expression3, "" AND "");

        String expectedExpression = ""((one) AND (two)) AND (three)"";
        assertThat(coalescedExpression.expression(), is(expectedExpression));
    }
",non-flaky,5
134992,undertow-io_undertow,AnnotatedEndpointTest.testIdleTimeout,"    @Test
    public void testIdleTimeout() throws Exception {
        AnnotatedClientEndpoint.reset();
        Session session = deployment.connectToServer(AnnotatedClientEndpoint.class, new URI(""ws://"" + DefaultServer.getHostAddress(""default"") + "":"" + DefaultServer.getHostPort(""default"") + ""/ws/chat/Bob""));

        Assert.assertEquals(""hi Bob (protocol=foo)"", AnnotatedClientEndpoint.message());

        session.close();
        Assert.assertEquals(""CLOSED"", AnnotatedClientEndpoint.message());
    }
",non-flaky,5
159628,liquibase_liquibase,H2IntegrationTest.runJsonChangelog,"    @Test
    public void runJsonChangelog() throws Exception {
        if (getDatabase() == null) {
            return;
        }

        Liquibase liquibase = createLiquibase(completeChangeLog);
        clearDatabase();

        //run again to test changelog testing logic
        liquibase = createLiquibase(""changelogs/json/common.tests.changelog.json"");
        liquibase.setChangeLogParameter(""loginuser"", getUsername());

        try {
            liquibase.update(this.contexts);
        } catch (ValidationFailedException e) {
            e.printDescriptiveError(System.out);
            throw e;
        }
    }
",non-flaky,5
98255,apache_jackrabbit,OSGiIT.listServices,"    @Test
    public void listServices() throws InvalidSyntaxException {
        for (ServiceReference<?> reference
                : context.getAllServiceReferences(null, null)) {
            System.out.println(reference);
        }
    }
",non-flaky,5
60937,apache_druid,LongMeanAveragerTest.testComputeResult,"  @Test
  public void testComputeResult()
  {
    BaseAverager<Number, Double> avg = new LongMeanAverager(3, ""test"", ""field"", 1);

    Assert.assertEquals(0.0, avg.computeResult(), 0.0);

    avg.addElement(Collections.singletonMap(""field"", 3L), new HashMap<>());
    Assert.assertEquals(1.0, avg.computeResult(), 0.0);

    avg.addElement(Collections.singletonMap(""field"", 3L), new HashMap<>());
    Assert.assertEquals(2.0, avg.computeResult(), 0.0);

    avg.addElement(Collections.singletonMap(""field"", 3), new HashMap<>());
    Assert.assertEquals(3.0, avg.computeResult(), 0.0);

    avg.addElement(Collections.singletonMap(""field"", 2L), new HashMap<>());
    avg.addElement(Collections.singletonMap(""field"", 2L), new HashMap<>());
    avg.addElement(Collections.singletonMap(""field"", 2L), new HashMap<>());
    Assert.assertEquals(2.0, avg.computeResult(), 0.0);

    avg.skip();
    Assert.assertEquals(4.0 / 3, avg.computeResult(), 0.0);
  }
",non-flaky,5
133934,CorfuDB_CorfuDB,LayoutHandlerTest.testPropose,"    @Test
    public void testPropose() {
        long defaultRank = 5L;
        ResponseMsg responseACK = getResponseMsg(
                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.IGNORE),
                getProposeLayoutResponseMsg(true, defaultRank)
        );
        ResponseMsg responseREJECT = getResponseMsg(
                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.CHECK),
                getProposeLayoutResponseMsg(false, defaultRank)
        );

        // Verify that the correct request was completed (once) with the appropriate value.
        layoutHandler.handleMessage(responseACK, mockChannelHandlerContext);
        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));
        verify(mockClientRouter).completeRequest(responseACK.getHeader().getRequestId(), true);

        // Verify that the correct exception was thrown with the appropriate field set.
        layoutHandler.handleMessage(responseREJECT, mockChannelHandlerContext);
        ArgumentCaptor<OutrankedException> exceptionCaptor = ArgumentCaptor.forClass(OutrankedException.class);
        verify(mockClientRouter).completeExceptionally(
                eq(responseREJECT.getHeader().getRequestId()), exceptionCaptor.capture());
        OutrankedException outrankedException = exceptionCaptor.getValue();
        assertThat(outrankedException.getNewRank()).isEqualTo(defaultRank);
    }
",non-flaky,5
53154,cloudfoundry_uaa,TokenPolicyTest.test_default_values,"    @Test
    public void test_default_values() throws Exception {
        TokenPolicy policy = new TokenPolicy();
        assertFalse(policy.isRefreshTokenUnique());
        assertFalse(policy.isJwtRevocable());
        assertEquals(TokenConstants.TokenFormat.JWT.getStringValue(), policy.getRefreshTokenFormat());
    }
",non-flaky,5
316,apache_hadoop,TestRpcProgramNfs3.testFsinfo,"  @Test(timeout = 60000)
  public void testFsinfo() throws Exception {
    HdfsFileStatus status = nn.getRpcServer().getFileInfo(""/tmp/bar"");
    long dirId = status.getFileId();
    int namenodeId = Nfs3Utils.getNamenodeId(config);
    FileHandle handle = new FileHandle(dirId, namenodeId);
    XDR xdr_req = new XDR();
    FSINFO3Request req = new FSINFO3Request(handle);
    req.serialize(xdr_req);
    
    // Attempt by an unpriviledged user should fail.
    FSINFO3Response response1 = nfsd.fsinfo(xdr_req.asReadOnlyWrap(),
        securityHandlerUnpriviledged,
        new InetSocketAddress(""localhost"", 1234));
    assertEquals(""Incorrect return code:"", Nfs3Status.NFS3ERR_ACCES,
        response1.getStatus());

    // Attempt by a priviledged user should pass.
    FSINFO3Response response2 = nfsd.fsinfo(xdr_req.asReadOnlyWrap(),
        securityHandler, new InetSocketAddress(""localhost"", 1234));
    assertEquals(""Incorrect return code:"", Nfs3Status.NFS3_OK,
        response2.getStatus());
  }
",non-flaky,5
94607,square_okhttp,CookiesTest.put,"  @Test public void cookieHandlerLikeAndroid() throws Exception {
      @Override public void put(URI uri, Map<String, List<String>> map) throws IOException {
      }
",non-flaky,5
179437,abel533_Mapper,SqlHelperTest.testLogicDeleteSql,"    @Test
    public void testLogicDeleteSql() {
        String wherePKColumns = SqlHelper.wherePKColumns(User.class);
        Assert.assertEquals(""<where> AND id = #{id} AND is_valid = 1</where>"", wherePKColumns);

        String whereAllIfColumns = SqlHelper.whereAllIfColumns(User.class, false);
        Assert.assertEquals(""<where><if test=\""id != null\""> AND id = #{id}</if><if test=\""username != null\""> AND username = #{username}</if> AND is_valid = 1</where>"", whereAllIfColumns);

        String isLogicDeletedColumn = SqlHelper.whereLogicDelete(User.class, true);
        Assert.assertEquals("" AND is_valid = 0"", isLogicDeletedColumn);

        String notLogicDeletedColumn = SqlHelper.whereLogicDelete(User.class, false);
        Assert.assertEquals("" AND is_valid = 1"", notLogicDeletedColumn);

        String updateSetColumns = SqlHelper.updateSetColumns(User.class, null, false, false);
        Assert.assertEquals(""<set>username = #{username},is_valid = 1,</set>"", updateSetColumns);
    }
",non-flaky,5
178051,aosp-mirror_platform_frameworks_support,PlaybackControlSupportGlueTest.testFastRewindToMaxThenReset,"    @Test
    public void testFastRewindToMaxThenReset() {
        PlaybackControlsRow row = new PlaybackControlsRow();
        glue.setControlsRow(row);
        SparseArrayObjectAdapter adapter = (SparseArrayObjectAdapter)
                row.getPrimaryActionsAdapter();
        PlaybackControlsRow.MultiAction playPause = (PlaybackControlsRow.MultiAction) adapter
                .lookup(PlaybackControlSupportGlue.ACTION_PLAY_PAUSE);
        PlaybackControlsRow.MultiAction fastForward = (PlaybackControlsRow.MultiAction) adapter
                .lookup(PlaybackControlSupportGlue.ACTION_FAST_FORWARD);
        PlaybackControlsRow.MultiAction rewind = (PlaybackControlsRow.MultiAction) adapter
                .lookup(PlaybackControlSupportGlue.ACTION_REWIND);

        assertFalse(glue.isMediaPlaying());
        glue.onActionClicked(playPause);
        assertTrue(glue.isMediaPlaying());
        assertEquals(PlaybackControlSupportGlue.PLAYBACK_SPEED_NORMAL, glue.getCurrentSpeedId());
        assertEquals(0, fastForward.getIndex());
        assertEquals(0, rewind.getIndex());

        // click multiple times to reach PLAYBACK_SPEED_FAST_L2
        glue.onActionClicked(rewind);
        assertEquals(-PlaybackControlSupportGlue.PLAYBACK_SPEED_FAST_L0, glue.getCurrentSpeedId());
        assertEquals(0, fastForward.getIndex());
        assertEquals(1, rewind.getIndex());
        glue.onActionClicked(rewind);
        assertEquals(-PlaybackControlSupportGlue.PLAYBACK_SPEED_FAST_L1, glue.getCurrentSpeedId());
        assertEquals(0, fastForward.getIndex());
        assertEquals(2, rewind.getIndex());
        glue.onActionClicked(rewind);
        assertEquals(-PlaybackControlSupportGlue.PLAYBACK_SPEED_FAST_L2, glue.getCurrentSpeedId());
        assertEquals(0, fastForward.getIndex());
        assertEquals(3, rewind.getIndex());
        glue.onActionClicked(rewind);
        assertEquals(-PlaybackControlSupportGlue.PLAYBACK_SPEED_FAST_L2, glue.getCurrentSpeedId());
        assertEquals(0, fastForward.getIndex());
        assertEquals(3, rewind.getIndex());

        // press playPause again put it back to play
        glue.onActionClicked(playPause);
        assertEquals(PlaybackControlSupportGlue.PLAYBACK_SPEED_NORMAL, glue.getCurrentSpeedId());
        assertEquals(0, fastForward.getIndex());
        assertEquals(0, rewind.getIndex());
    }
",non-flaky,5
179482,abel533_Mapper,SafeUpdateByMethodTest.testSafeUpdateNull,"    @Test(expected = PersistenceException.class)
    public void testSafeUpdateNull() {
        SqlSession sqlSession = getSqlSession();
        try {
            CountryMapper mapper = sqlSession.getMapper(CountryMapper.class);
            mapper.updateByExample(new Country(), null);
        } finally {
            sqlSession.close();
        }
    }
",non-flaky,5
70765,apache_kafka,StartAndStopCounterTest.shouldRecordStarts,"    @Test
    public void shouldRecordStarts() {
        assertEquals(0, counter.starts());
        counter.recordStart();
        assertEquals(1, counter.starts());
        counter.recordStart();
        assertEquals(2, counter.starts());
        assertEquals(2, counter.starts());
    }
",non-flaky,5
112068,apache_shardingsphere-elasticjob,StreamingDataflowElasticJobForMultipleThreadsTest.assertJobInit,"    @Test
    public void assertJobInit() {
        while (!StreamingDataflowElasticJob.isCompleted()) {
            WaitingUtils.waitingShortTime();
        }
        assertTrue(getRegCenter().isExisted(""/"" + getJobName() + ""/sharding""));
    }
",non-flaky,5
91472,strapdata_elassandra,ClusterApplierServiceTests.onSuccess,"    @TestLogging(""org.elasticsearch.cluster.service:TRACE"") // To ensure that we log cluster state events on TRACE level
    public void testClusterStateUpdateLogging() throws Exception {
        MockLogAppender mockAppender = new MockLogAppender();
        mockAppender.start();
        mockAppender.addExpectation(
                new MockLogAppender.SeenEventExpectation(
                        ""test1"",
                        clusterApplierService.getClass().getCanonicalName(),
                        Level.DEBUG,
                        ""*processing [test1]: took [1s] no change in cluster state""));
        mockAppender.addExpectation(
                new MockLogAppender.SeenEventExpectation(
                        ""test2"",
                        clusterApplierService.getClass().getCanonicalName(),
                        Level.TRACE,
                        ""*failed to execute cluster state applier in [2s]*""));

        Logger clusterLogger = Loggers.getLogger(""org.elasticsearch.cluster.service"");
        Loggers.addAppender(clusterLogger, mockAppender);
        try {
            final CountDownLatch latch = new CountDownLatch(3);
            clusterApplierService.currentTimeOverride = System.nanoTime();
            clusterApplierService.runOnApplierThread(""test1"",
                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(1).nanos(),
                new ClusterApplyListener() {
                    @Override
                    public void onSuccess(String source) {
                        latch.countDown();
                    }
",non-flaky,5
114083,aws_aws-sdk-java-v2,KeyTest.getKeyMap,"    @Test
    public void getKeyMap() {
        Map<String, AttributeValue> expectedResult = new HashMap<>();
        expectedResult.put(""gsi_id"", AttributeValue.builder().s(""id123"").build());
        expectedResult.put(""gsi_sort"", AttributeValue.builder().s(""id456"").build());
        assertThat(key.keyMap(FakeItemWithIndices.getTableSchema(), ""gsi_1""), is(expectedResult));
    }
",non-flaky,5
303,apache_hadoop,TestRpcProgramNfs3.testReadlink,"  @Test(timeout = 60000)
  public void testReadlink() throws Exception {
    // Create a symlink first.
    HdfsFileStatus status = nn.getRpcServer().getFileInfo(testdir);
    long dirId = status.getFileId();
    int namenodeId = Nfs3Utils.getNamenodeId(config);
    XDR xdr_req = new XDR();
    FileHandle handle = new FileHandle(dirId, namenodeId);
    SYMLINK3Request req = new SYMLINK3Request(handle, ""fubar"", new SetAttr3(),
        ""bar"");
    req.serialize(xdr_req);
    
    SYMLINK3Response response = nfsd.symlink(xdr_req.asReadOnlyWrap(),
        securityHandler, new InetSocketAddress(""localhost"", 1234));
    assertEquals(""Incorrect return code:"", Nfs3Status.NFS3_OK,
        response.getStatus());

    // Now perform readlink operations.
    FileHandle handle2 = response.getObjFileHandle();
    XDR xdr_req2 = new XDR();
    READLINK3Request req2 = new READLINK3Request(handle2);
    req2.serialize(xdr_req2);

    // Attempt by an unpriviledged user should fail.
    READLINK3Response response1 = nfsd.readlink(xdr_req2.asReadOnlyWrap(),
        securityHandlerUnpriviledged,
        new InetSocketAddress(""localhost"", 1234));
    assertEquals(""Incorrect return code:"", Nfs3Status.NFS3ERR_ACCES,
        response1.getStatus());

    // Attempt by a priviledged user should pass.
    READLINK3Response response2 = nfsd.readlink(xdr_req2.asReadOnlyWrap(),
        securityHandler, new InetSocketAddress(""localhost"", 1234));
    assertEquals(""Incorrect return code:"", Nfs3Status.NFS3_OK,
        response2.getStatus());
  }
",non-flaky,5
106587,Alluxio_alluxio,HdfsConfValidationTaskTest.validConf,"  @Test
  public void validConf() {
    String hdfsSite = Paths.get(sTestDir.toPath().toString(), ""hdfs-site.xml"").toString();
    ValidationTestUtils.writeXML(hdfsSite, ImmutableMap.of(""key1"", ""value1"", ""key3"", ""value3""));

    String coreSite = Paths.get(sTestDir.toPath().toString(), ""core-site.xml"").toString();
    ValidationTestUtils.writeXML(coreSite, ImmutableMap.of(""key1"", ""value1"", ""key4"", ""value4""));

    sConf.set(PropertyKey.UNDERFS_HDFS_CONFIGURATION,
            hdfsSite + HdfsConfValidationTask.SEPARATOR + coreSite);
    HdfsConfValidationTask task =
            new HdfsConfValidationTask(""hdfs://namenode:9000/alluxio"", sConf);
    ValidationTaskResult result = task.validateImpl(ImmutableMap.of());

    assertEquals(ValidationUtils.State.OK, result.getState());
  }
",non-flaky,5
177216,line_armeria,AbstractStreamDecoderTest.notEmpty,"    @Test
    public void notEmpty() {
        final StreamDecoder decoder = newDecoder();
        final ByteBuf buf = ByteBufAllocator.DEFAULT.buffer();
        buf.writeBytes(PAYLOAD);
        final HttpData data = decoder.decode(HttpData.wrap(buf));
        assertThat(buf.refCnt()).isZero();
        assertThat(data.byteBuf().refCnt()).isOne();
        data.close();
    }
",non-flaky,5
98591,nutzam_nutz,El2Test.stringTest,"    @Test
    public void stringTest() {
        assertEquals(""jk"", El.eval(""'jk'""));
        assertEquals(2, El.eval(""'jk'.length()""));
        assertEquals(2, El.eval(""\""jk\"".length()""));
        assertEquals(""jk"", El.eval(""\""    jk   \"".trim()""));
        assertEquals(""j\\n\\tk"", El.eval(""\""j\\n\\tk\""""));
    }
",non-flaky,5
177218,line_armeria,AbstractStreamDecoderTest.empty_pooled,"    @Test
    public void empty_pooled() {
        final StreamDecoder decoder = newDecoder();
        final ByteBuf buf = ByteBufAllocator.DEFAULT.buffer();
        final HttpData data = decoder.decode(HttpData.wrap(buf));
        assertThat(buf.refCnt()).isZero();

        // Even for a pooled empty input, the result is unpooled since there's no point in pooling empty
        // buffers.
        assertThat(data.isPooled()).isFalse();
    }
",non-flaky,5
94631,square_okhttp,InterceptorTest.intercept,"  @Test public void interceptorMakesAnUnrelatedRequest() throws Exception {
          @Override public Response intercept(Chain chain) throws IOException {
            if (chain.request().url().encodedPath().equals(""/b"")) {
              Request requestA = new Request.Builder()
                  .url(server.url(""/a""))
                  .build();
              Response responseA = client.newCall(requestA).execute();
              assertEquals(""a"", responseA.body().string());
            }

            return chain.proceed(chain.request());
          }
",non-flaky,5
26747,MundaneImmortal_pair-distribution-app,DeveloperTest.testGetTrackWeightOne,"	@Test
	public void testGetTrackWeightOne() {
		Developer developer = new Developer(""developerId"");
		
		developer.updateTrackWeight(""track"");
		
		assertThat(developer.getTrackWeight(""track""), is(1));
	}
",non-flaky,5
113789,salesforce_reactive-grpc,ReactivePublisherBackpressureOnReadyHandlerTest.onSubscribeCancelsSecondSubscription,"    @Test
    public void onSubscribeCancelsSecondSubscription() {
        ClientCallStreamObserver<Object> obs = mock(ClientCallStreamObserver.class);
        ReactivePublisherBackpressureOnReadyHandlerClient<Object> handler = new ReactivePublisherBackpressureOnReadyHandlerClient<Object>(obs);
        Subscription sub1 = mock(Subscription.class);
        Subscription sub2 = mock(Subscription.class);

        handler.onSubscribe(sub1);
        handler.onSubscribe(sub2);
        
        verify(sub2).cancel();
    }
",non-flaky,5
98278,spotify_docker-client,ImageInfoTest.test1_24,"  @Test
  public void test1_24() throws Exception {
    objectMapper.readValue(fixture(""fixtures/1.24/imageInfo.json""), ImageInfo.class);
  }
",non-flaky,5
177960,aosp-mirror_platform_frameworks_support,FileProviderTest.testQueryProjectionNull,"    @Test
    public void testQueryProjectionNull() throws Exception {
        final File file = new File(mContext.getFilesDir(), TEST_FILE);
        final Uri uri = stageFileAndGetUri(file, TEST_DATA);

        // Verify that null brings out default columns
        Cursor cursor = mResolver.query(uri, null, null, null, null);
        try {
            assertEquals(1, cursor.getCount());
            cursor.moveToFirst();
            assertEquals(TEST_FILE, cursor.getString(cursor.getColumnIndex(DISPLAY_NAME)));
            assertEquals(TEST_DATA.length, cursor.getLong(cursor.getColumnIndex(SIZE)));
        } finally {
            cursor.close();
        }
    }
",non-flaky,5
94674,square_okhttp,Http2Test.goAway,"  @Test public void goAwayWithoutDebugDataRoundTrip() throws IOException {
      @Override public void goAway(
          int lastGoodStreamId, ErrorCode errorCode, ByteString debugData) {
        assertEquals(expectedStreamId, lastGoodStreamId);
        assertEquals(expectedError, errorCode);
        assertEquals(0, debugData.size());
      }
",non-flaky,5
177251,line_armeria,DnsAddressEndpointGroupTest.backoff,"    @Test
    public void backoff() throws Exception {
        try (TestDnsServer server = new TestDnsServer(ImmutableMap.of())) { // Respond nothing.
            try (DnsAddressEndpointGroup group =
                         DnsAddressEndpointGroup.builder(""backoff.com"")
                                                .serverAddresses(server.addr())
                                                .resolvedAddressTypes(ResolvedAddressTypes.IPV4_PREFERRED)
                                                .backoff(Backoff.fixed(500))
                                                .build()) {

                await().untilAsserted(() -> assertThat(group.attemptsSoFar).isGreaterThan(2));
                assertThat(group.endpoints()).isEmpty();

                // Start to respond correctly.
                server.setResponses(ImmutableMap.of(
                        new DefaultDnsQuestion(""backoff.com."", A),
                        new DefaultDnsResponse(0)
                                .addRecord(ANSWER, newAddressRecord(""backoff.com"", ""1.1.1.1"", 1)),
                        new DefaultDnsQuestion(""backoff.com."", AAAA),
                        new DefaultDnsResponse(0)
                                .addRecord(ANSWER, newAddressRecord(""backoff.com"", ""::1"", 1))));

                await().untilAsserted(() -> assertThat(group.endpoints()).containsExactly(
                        Endpoint.of(""backoff.com"").withIpAddr(""1.1.1.1""),
                        Endpoint.of(""backoff.com"").withIpAddr(""::1"")));
            }
        }
    }
",non-flaky,5
159698,liquibase_liquibase,SelectFromDatabaseChangeLogLockExecutorTest.generateSql,"    @Test
    public void generateSql() throws Exception {
        this.statementUnderTest = new SelectFromDatabaseChangeLogLockStatement(""LOCKED"");
        assertCorrect(""select [locked] from [databasechangeloglock] where [id]=1"", MSSQLDatabase.class, SybaseDatabase.class);
        assertCorrect(""select [locked] from [databasechangeloglock] where [id]=1"", SybaseASADatabase.class);
        assertCorrect(""select [locked] from [databasechangeloglock] where [id]=1 for update"", OracleDatabase.class);
        assertCorrectOnRest(""select [locked] from [databasechangeloglock] where [id]=1"");
    }
",non-flaky,5
21174,androidx_androidx,PreferenceGroupInitialExpandedChildrenCountTest.restoreInstanceState_noChange_shouldDoNothing,"    @Test
    public void restoreInstanceState_noChange_shouldDoNothing() {
        PreferenceGroup.SavedState state;

        // Initialized as expanded, restore as expanded, should remain expanded
        state = new PreferenceGroup.SavedState(
                Preference.BaseSavedState.EMPTY_STATE, Integer.MAX_VALUE);
        PreferenceGroupAdapter preferenceGroupAdapter =
                PreferenceGroupAdapter.createInstanceWithCustomHandler(mScreen, mHandler);
        mScreen.onRestoreInstanceState(state);
        assertPreferencesAreExpanded(preferenceGroupAdapter);
        verify(mHandler, never()).sendMessageDelayed(any(Message.class), anyLong());

        // Initialized as collapsed, restore as collapsed, should remain collapsed
        mScreen.setInitialExpandedChildrenCount(INITIAL_EXPANDED_COUNT);
        state = new PreferenceGroup.SavedState(
                Preference.BaseSavedState.EMPTY_STATE, INITIAL_EXPANDED_COUNT);
        preferenceGroupAdapter =
                PreferenceGroupAdapter.createInstanceWithCustomHandler(mScreen, mHandler);
        mScreen.onRestoreInstanceState(state);
        assertPreferencesAreCollapsed(preferenceGroupAdapter);
        verify(mHandler, never()).sendMessageDelayed(any(Message.class), anyLong());
    }
",non-flaky,5
43043,trinodb_trino,BaseConnectorTest.testCharVarcharComparison,"    @Test
    public void testCharVarcharComparison()
    {
        skipTestUnless(hasBehavior(SUPPORTS_CREATE_TABLE));

        try (TestTable table = new TestTable(
                getQueryRunner()::execute,
                ""test_char_varchar"",
                ""(k, v) AS VALUES"" +
                        ""   (-1, CAST(NULL AS char(3))), "" +
                        ""   (3, CAST('   ' AS char(3))),"" +
                        ""   (6, CAST('x  ' AS char(3)))"")) {
            // varchar of length shorter than column's length
            assertQuery(
                    ""SELECT k, v FROM "" + table.getName() + "" WHERE v = CAST('  ' AS varchar(2))"",
                    // The value is included because both sides of the comparison are coerced to char(3)
                    ""VALUES (3, '   ')"");

            // varchar of length longer than column's length
            assertQuery(
                    ""SELECT k, v FROM "" + table.getName() + "" WHERE v = CAST('  ' AS varchar(4))"",
                    // The value is included because both sides of the comparison are coerced to char(4)
                    ""VALUES (3, '   ')"");

            // value that's not all-spaces
            assertQuery(
                    ""SELECT k, v FROM "" + table.getName() + "" WHERE v = CAST('x ' AS varchar(2))"",
                    // The value is included because both sides of the comparison are coerced to char(3)
                    ""VALUES (6, 'x  ')"");
        }
    }
",non-flaky,5
175,apache_beam,testRateLimitingMax,"@Test
public void testRateLimitingMax() {
    int n = 10;
    double rate = 10.0;
    long duration = runWithRate(n, rate, new IdentityFn<Integer>());
    long perElementPause = (long) (1000L / rate);
    long minDuration = (n - 1) * perElementPause;
    Assert.assertThat(duration, greaterThan(minDuration));
}",time,2
77649,pholser_junit-quickcheck,Primitive3DArrayPropertyParameterTypesTest.shouldHold,"    @Test public void wrapperFloatArray() {
        @Property(trials = 2) public void shouldHold(Float[][][] f) {
        }
",non-flaky,5
106645,Alluxio_alluxio,AlluxioFuseFileSystemTest.getattr,"  @Test
  public void getattr() throws Exception {
    // set up status
    FileInfo info = new FileInfo();
    info.setLength(4 * Constants.KB + 1);
    info.setLastModificationTimeMs(1000);
    String userName = System.getProperty(""user.name"");
    info.setOwner(userName);
    info.setGroup(AlluxioFuseUtils.getGroupName(userName));
    info.setFolder(true);
    info.setMode(123);
    info.setCompleted(true);
    URIStatus status = new URIStatus(info);

    // mock fs
    when(mFileSystem.getStatus(any(AlluxioURI.class))).thenReturn(status);

    FileStat stat = new FileStat(Runtime.getSystemRuntime());
    assertEquals(0, mFuseFs.getattr(""/foo"", stat));
    assertEquals(status.getLength(), stat.st_size.longValue());
    assertEquals(9, stat.st_blocks.intValue());
    assertEquals(status.getLastModificationTimeMs() / 1000, stat.st_ctim.tv_sec.get());
    assertEquals((status.getLastModificationTimeMs() % 1000) * 1000,
        stat.st_ctim.tv_nsec.longValue());
    assertEquals(status.getLastModificationTimeMs() / 1000, stat.st_mtim.tv_sec.get());
    assertEquals((status.getLastModificationTimeMs() % 1000) * 1000,
        stat.st_mtim.tv_nsec.longValue());
    assertEquals(AlluxioFuseUtils.getUid(System.getProperty(""user.name"")), stat.st_uid.get());
    assertEquals(AlluxioFuseUtils.getGid(System.getProperty(""user.name"")), stat.st_gid.get());
    assertEquals(123 | FileStat.S_IFDIR, stat.st_mode.intValue());
  }
",non-flaky,5
20978,NationalSecurityAgency_timely,WebSocketRequestDeserializationTest.testAddDeserializationWithTimeAndTags,"    @Test
    public void testAddDeserializationWithTimeAndTags() throws Exception {
        // @formatter:off
		String json = ""{"" +
						""\""operation\"" : \""add\"","" +
						""\""sessionId\"" : \""1234\"","" +
					    ""\""metric\"" : \""sys.cpu.user\"","" +
						""\""tags\"" : {"" +
					       ""\""tag2\"" : \""value2\"","" +
					       ""\""tag1\"" : \""value1\"""" +
					    ""},"" +
						""\""startTime\"" : \""1000\"","" +
					    ""\""endTime\"" : \""2000\""""+
					  ""}"";
		// @formatter:on
        WebSocketRequest request = JsonUtil.getObjectMapper().readValue(json.getBytes(), WebSocketRequest.class);
        Assert.assertNotNull(request);
        Assert.assertEquals(AddSubscription.class, request.getClass());
        Assert.assertEquals(""1234"", ((AddSubscription) request).getSessionId());
        Assert.assertEquals(""sys.cpu.user"", ((AddSubscription) request).getMetric());
        Assert.assertEquals(true, ((AddSubscription) request).getTags().isPresent());
        Map<String, String> tags = ((AddSubscription) request).getTags().get();
        Assert.assertTrue(tags.containsKey(""tag1""));
        Assert.assertEquals(""value1"", tags.get(""tag1""));
        Assert.assertTrue(tags.containsKey(""tag2""));
        Assert.assertEquals(""value2"", tags.get(""tag2""));
        Assert.assertEquals(true, ((AddSubscription) request).getStartTime().isPresent());
        long start = ((AddSubscription) request).getStartTime().get();
        Assert.assertEquals(1000L, start);
        Assert.assertEquals(true, ((AddSubscription) request).getEndTime().isPresent());
        long end = ((AddSubscription) request).getEndTime().get();
        Assert.assertEquals(2000L, end);
    }
",non-flaky,5
98097,vert-x3_vertx-mongo-client,ParsingSSLOptionsTest.testValidCaPemCertificateChain,"  @Test
  public void testValidCaPemCertificateChain() throws IOException {
    // given
    final File tmpFile = tmpFolder.newFile(""validCa.pem"");
    try (final FileWriter tmpWriter = new FileWriter(tmpFile)) {
      tmpWriter.write(""-----BEGIN CERTIFICATE-----\n"" +
        ""MIICljCCAfigAwIBAgIJAK0oe+f4DaojMAoGCCqGSM49BAMEMFkxCzAJBgNVBAYT\n"" +
        ""AkFUMQ8wDQYDVQQIDAZWaWVubmExDjAMBgNVBAoMBU5vRW52MSkwJwYDVQQLDCBO\n"" +
        ""b0VudiBSb290IENlcnRpZmljYXRlIEF1dGhvcml0eTAeFw0xNjEwMjcxNTAwNTFa\n"" +
        ""Fw00NjEwMjAxNTAwNTFaMFkxCzAJBgNVBAYTAkFUMQ8wDQYDVQQIDAZWaWVubmEx\n"" +
        ""DjAMBgNVBAoMBU5vRW52MSkwJwYDVQQLDCBOb0VudiBSb290IENlcnRpZmljYXRl\n"" +
        ""IEF1dGhvcml0eTCBmzAQBgcqhkjOPQIBBgUrgQQAIwOBhgAEAHpsMQth12N0d+aE\n"" +
        ""FIFRd8in4MTYZNSQEyQ4fuPDNq0Zb+4TXpUmedLZQJKkAQxorak8ESC/tXuQJDUL\n"" +
        ""OoKa+R6NAT4EKR1aaVVd7clC9rfGqVwGYslppycy9zsN6O4XLUiripamQF78FzRF\n"" +
        ""8wRZvkwYhzud+jpV6shgEMw3zmcwDSYKo2YwZDAdBgNVHQ4EFgQUD96n//91CReu\n"" +
        ""Cz1K0qics6aNFV0wHwYDVR0jBBgwFoAUD96n//91CReuCz1K0qics6aNFV0wEgYD\n"" +
        ""VR0TAQH/BAgwBgEB/wIBATAOBgNVHQ8BAf8EBAMCAYYwCgYIKoZIzj0EAwQDgYsA\n"" +
        ""MIGHAkFOxsApSB7fn8ZnYG/EUscn/uAkjxHsvdEkPKCC+XYCKMssW4YP2kR6gZjo\n"" +
        ""J8vaOAJZwNevBe/R9J8zMvsAWRJmWgJCAKLedGLnBuJOK9jjnKBwbVm5OIQfApMA\n"" +
        ""I2mJVnNXvS12w4DTZlP0K1t63WxsykBBTOIVXnYdPkdZvvnoAIcfA7iM\n"" +
        ""-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\n"" +
        ""MIIE0zCCA7ugAwIBAgIQGNrRniZ96LtKIVjNzGs7SjANBgkqhkiG9w0BAQUFADCB\n"" +
        ""yjELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQL\n"" +
        ""ExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykgMjAwNiBWZXJp\n"" +
        ""U2lnbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5MUUwQwYDVQQDEzxW\n"" +
        ""ZXJpU2lnbiBDbGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0\n"" +
        ""aG9yaXR5IC0gRzUwHhcNMDYxMTA4MDAwMDAwWhcNMzYwNzE2MjM1OTU5WjCByjEL\n"" +
        ""MAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZW\n"" +
        ""ZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykgMjAwNiBWZXJpU2ln\n"" +
        ""biwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5MUUwQwYDVQQDEzxWZXJp\n"" +
        ""U2lnbiBDbGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0aG9y\n"" +
        ""aXR5IC0gRzUwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCvJAgIKXo1\n"" +
        ""nmAMqudLO07cfLw8RRy7K+D+KQL5VwijZIUVJ/XxrcgxiV0i6CqqpkKzj/i5Vbex\n"" +
        ""t0uz/o9+B1fs70PbZmIVYc9gDaTY3vjgw2IIPVQT60nKWVSFJuUrjxuf6/WhkcIz\n"" +
        ""SdhDY2pSS9KP6HBRTdGJaXvHcPaz3BJ023tdS1bTlr8Vd6Gw9KIl8q8ckmcY5fQG\n"" +
        ""BO+QueQA5N06tRn/Arr0PO7gi+s3i+z016zy9vA9r911kTMZHRxAy3QkGSGT2RT+\n"" +
        ""rCpSx4/VBEnkjWNHiDxpg8v+R70rfk/Fla4OndTRQ8Bnc+MUCH7lP59zuDMKz10/\n"" +
        ""NIeWiu5T6CUVAgMBAAGjgbIwga8wDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8E\n"" +
        ""BAMCAQYwbQYIKwYBBQUHAQwEYTBfoV2gWzBZMFcwVRYJaW1hZ2UvZ2lmMCEwHzAH\n"" +
        ""BgUrDgMCGgQUj+XTGoasjY5rw8+AatRIGCx7GS4wJRYjaHR0cDovL2xvZ28udmVy\n"" +
        ""aXNpZ24uY29tL3ZzbG9nby5naWYwHQYDVR0OBBYEFH/TZafC3ey78DAJ80M5+gKv\n"" +
        ""MzEzMA0GCSqGSIb3DQEBBQUAA4IBAQCTJEowX2LP2BqYLz3q3JktvXf2pXkiOOzE\n"" +
        ""p6B4Eq1iDkVwZMXnl2YtmAl+X6/WzChl8gGqCBpH3vn5fJJaCGkgDdk+bW48DW7Y\n"" +
        ""5gaRQBi5+MHt39tBquCWIMnNZBU4gcmU7qKEKQsTb47bDN0lAtukixlE0kF6BWlK\n"" +
        ""WE9gyn6CagsCqiUXObXbf+eEZSqVir2G3l6BFoMtEMze/aiCKm0oHw0LxOXnGiYZ\n"" +
        ""4fQRbxC1lfznQgUy286dUV4otp6F01vvpX1FQHKOtw5rDgb7MzVIcbidJ4vEZV8N\n"" +
        ""hnacRHr2lVz2XTIIM6RUthg/aFzyQkqFOFSDX9HoLPKsEdao7WNq\n"" +
        ""-----END CERTIFICATE-----\n"");
    }
    final JsonObject withSSLAndCaPath = new JsonObject()
      .put(""ssl"", true)
      .put(""caPath"", tmpFile.getAbsolutePath());

    // when
    final SslSettings sslSettings = new MongoClientOptionsParser(vertx, withSSLAndCaPath)
      .settings()
      .getSslSettings();

    // then
    assertNotNull(sslSettings.getContext());
  }
",non-flaky,5
76991,Tencent_Firestorm,ShuffleWithRssClientTest.emptyTaskTest,"  @Test
  public void emptyTaskTest() {
    String testAppId = ""emptyTaskTest"";
    shuffleWriteClientImpl.registerShuffle(shuffleServerInfo1,
        testAppId, 0, Lists.newArrayList(new PartitionRange(0, 0)));
    boolean commitResult = shuffleWriteClientImpl
        .sendCommit(Sets.newHashSet(shuffleServerInfo1), testAppId, 0, 2);
    assertTrue(commitResult);
    commitResult = shuffleWriteClientImpl
        .sendCommit(Sets.newHashSet(shuffleServerInfo2), testAppId, 0, 2);
    assertFalse(commitResult);
  }
",non-flaky,5
43053,trinodb_trino,BaseConnectorTest.testSortItemsReflectedInExplain,"    @Test
    public void testSortItemsReflectedInExplain()
    {
        // Even if the sort items are pushed down into the table scan, it should still be reflected in EXPLAIN (via ConnectorTableHandle.toString)
        @Language(""RegExp"") String expectedPattern = hasBehavior(SUPPORTS_TOPN_PUSHDOWN)
                ? ""sortOrder=\\[(?i:nationkey):.* DESC NULLS LAST] limit=5""
                : ""\\[5 by \\((?i:nationkey) DESC NULLS LAST\\)]"";

        assertExplain(
                ""EXPLAIN SELECT name FROM nation ORDER BY nationkey DESC NULLS LAST LIMIT 5"",
                expectedPattern);
    }
",non-flaky,5
99801,apache_cassandra,OutboundConnectionSettingsTest.build_TcpConnectTimeoutLessThanZero,"    @Test (expected = IllegalArgumentException.class)
    public void build_TcpConnectTimeoutLessThanZero()
    {
        test(settings -> settings.withTcpConnectTimeoutInMS(-1));
    }
",non-flaky,5
104641,apache_pinot,OfflineClusterIntegrationTest.testDefaultColumns,"  @Test(dependsOnMethods = ""testAggregateMetadataAPI"")
  public void testDefaultColumns()
      throws Exception {
    long numTotalDocs = getCountStarResult();

    reloadWithExtraColumns();
    JsonNode queryResponse = postQuery(SELECT_STAR_QUERY);
    assertEquals(queryResponse.get(""totalDocs"").asLong(), numTotalDocs);
    assertEquals(queryResponse.get(""selectionResults"").get(""columns"").size(), 91);

    testNewAddedColumns();

    reloadWithMissingColumns();
    queryResponse = postQuery(SELECT_STAR_QUERY);
    assertEquals(queryResponse.get(""totalDocs"").asLong(), numTotalDocs);
    assertEquals(queryResponse.get(""selectionResults"").get(""columns"").size(), 75);

    reloadWithRegularColumns();
    queryResponse = postQuery(SELECT_STAR_QUERY);
    assertEquals(queryResponse.get(""totalDocs"").asLong(), numTotalDocs);
    assertEquals(queryResponse.get(""selectionResults"").get(""columns"").size(), 79);

    _tableSizeAfterRemovingIndex = getTableSize(getTableName());
  }
",non-flaky,5
33869,apache_camel,FhirHistoryIT.testOnTypeWithSubsetElements,"    @Test
    public void testOnTypeWithSubsetElements() throws Exception {
        final Map<String, Object> headers = new HashMap<>();
        // parameter type is Class
        headers.put(""CamelFhir.resourceType"", Patient.class);
        // parameter type is Class
        headers.put(""CamelFhir.returnType"", Bundle.class);
        // parameter type is Integer
        headers.put(""CamelFhir.count"", 1);
        // only include the identifier and name
        headers.put(ExtraParameters.SUBSET_ELEMENTS.getHeaderName(), new String[] { ""identifier"", ""name"" });

        Bundle result = requestBodyAndHeaders(""direct://ON_TYPE"", null, headers);

        LOG.debug(""onType: "" + result);
        assertNotNull(result, ""onType result"");
        assertEquals(1, result.getEntry().size());
    }
",non-flaky,5
60918,apache_druid,DoubleSumAveragerTest.testComputeResult,"  @Test
  public void testComputeResult()
  {
    BaseAverager<Number, Double> avg = new DoubleSumAverager(3, ""test"", ""field"", 1);

    Assert.assertEquals(0.0, avg.computeResult(), 0.0);

    avg.addElement(Collections.singletonMap(""field"", 3.0), new HashMap<>());
    Assert.assertEquals(3.0, avg.computeResult(), 0.0);

    avg.addElement(Collections.singletonMap(""field"", 3.0), new HashMap<>());
    Assert.assertEquals(6.0, avg.computeResult(), 0.0);

    avg.addElement(Collections.singletonMap(""field"", new Integer(0)), new HashMap<>());
    Assert.assertEquals(6.0, avg.computeResult(), 0.0);

    avg.addElement(Collections.singletonMap(""field"", 2.5), new HashMap<>());
    avg.addElement(Collections.singletonMap(""field"", 2.0), new HashMap<>());
    avg.addElement(Collections.singletonMap(""field"", 2.0), new HashMap<>());
    Assert.assertEquals(6.5, avg.computeResult(), 0.0);

    avg.skip();
    Assert.assertEquals(4.0, avg.computeResult(), 0.0);

  }
",non-flaky,5
159657,liquibase_liquibase,AbstractIntegrationTest.testDbDoc,"    @Test
    public void testDbDoc() throws Exception {
        assumeNotNull(this.getDatabase());

        Liquibase liquibase;
        clearDatabase();

        liquibase = createLiquibase(completeChangeLog);
        liquibase.setChangeLogParameter( ""loginuser"", getUsername());
        liquibase.update(this.contexts);

        Path outputDir = tempDirectory.newFolder().toPath().normalize();
        logger.fine(LogType.LOG, ""Database documentation will be written to this temporary folder: "" + outputDir);

        liquibase = createLiquibase(completeChangeLog);
        liquibase.setChangeLogParameter( ""loginuser"", getUsername());
        liquibase.generateDocumentation(outputDir.toAbsolutePath().toString(), this.contexts);
    }
",non-flaky,5
186,apache_struts,13d9053050c9e4fb2ef049db6a37d3f6eebf48fa.testRender_ok,"@Test
public void testRender_ok() {
    final Mock mockResponse = mock(RenderResponse.class);
    mockResponse.stubs().method(ANYTHING);
    PortletMode mode = PortletMode.VIEW;
    Map<String, String[]> requestParams = new HashMap<String, String[]>();
    requestParams.put(ACTION_PARAM, new String[]{""/view/testAction""});
    requestParams.put(EVENT_ACTION, new String[]{""true""});
    requestParams.put(MODE_PARAM, new String[]{mode.toString()});
    Map<String, Object> sessionMap = new HashMap<String, Object>();
    Map<String, String> initParams = new HashMap<String, String>();
    initParams.put(""viewNamespace"", ""/view"");
    initParams.put(StrutsConstants.STRUTS_ALWAYS_SELECT_FULL_NAMESPACE, ""true"");
    initPortletConfig(initParams, new HashMap<String, Object>());
    initRequest(requestParams, new HashMap<String, Object>(), sessionMap, PortletMode.VIEW, WindowState.NORMAL, false, null);
    setupActionFactory(""/view"", ""testAction"", ""success"", EasyMock.createNiceMock(ValueStack.class));
    mockInvocation.expects(once()).method(""getStack"").will(
    returnValue(null));
    try {
        dispatcher
        .setActionProxyFactory((ActionProxyFactory) mockActionFactory
        .proxy());
        dispatcher.init((PortletConfig) mockConfig.proxy());
        dispatcher.render((RenderRequest) mockRequest.proxy(),
        (RenderResponse) mockResponse.proxy());
    } catch (Exception e) {
        e.printStackTrace();
        fail(""Error occured"");
    }
}",test order dependency,4
77441,opensearch-project_OpenSearch,DependencyLicensesTaskTests.givenProjectWithDependencyButNoNoticeFileThenShouldReturnException,"    @Test
    public void givenProjectWithDependencyButNoNoticeFileThenShouldReturnException() throws Exception {
        expectedException.expect(GradleException.class);
        expectedException.expectMessage(containsString(""Missing NOTICE for ""));

        project.getDependencies().add(""compile"", dependency);

        createFileIn(getLicensesDir(project), ""groovy-all-LICENSE.txt"", PERMISSIVE_LICENSE_TEXT);

        updateShas.updateShas();
        task.get().checkDependencies();
    }
",non-flaky,5
156110,soot-oss_soot,DefaultInterfaceTest.interfaceInheritanceTest,"  @Test
  public void interfaceInheritanceTest() {
    String testClass = ""soot.defaultInterfaceMethods.InterfaceInheritance"";
    String defaultClass = ""soot.defaultInterfaceMethods.InterfaceTestA"";
    String defaultInterface = ""soot.defaultInterfaceMethods.InterfaceTestB"";

    final SootMethod target =
        prepareTarget(
            methodSigFromComponents(testClass, voidType, mainClass),
            testClass,
            defaultClass,
            defaultInterface);

    SootMethod interfaceTestAPrint =
        Scene.v().getMethod(""<soot.defaultInterfaceMethods.InterfaceTestA: void print()>"");
    SootMethod mainPrintMessageMethod =
        Scene.v()
            .getMethod(""<soot.defaultInterfaceMethods.InterfaceInheritance: void printMessage()>"");
    Body mainBody = target.retrieveActiveBody();
    SootMethod refMainMethod = resolveMethodRefInBody(mainBody.getUnits(), ""void print()"");
    SootMethod resolvedMethod =
        VirtualCalls.v()
            .resolveNonSpecial(
                Scene.v().getRefType(testClass), interfaceTestAPrint.makeRef(), false);
    SootMethod concreteImpl =
        Scene.v()
            .getFastHierarchy()
            .resolveConcreteDispatch(Scene.v().getSootClass(testClass), interfaceTestAPrint);
    Set<SootMethod> abstractImpl =
        Scene.v()
            .getFastHierarchy()
            .resolveAbstractDispatch(Scene.v().getSootClass(defaultClass), interfaceTestAPrint);

    boolean edgeMainToInterfaceTestAPrint = checkInEdges(interfaceTestAPrint, target);
    boolean edgeMainToMainPrintMessage = checkInEdges(mainPrintMessageMethod, target);
    final ReachableMethods reachableMethods = Scene.v().getReachableMethods();

    List<SootMethod> targetMethods =
        new ArrayList<SootMethod>() {
          {
            add(interfaceTestAPrint);
            add(mainPrintMessageMethod);
          }
        };

    for (SootMethod targetMethod : targetMethods) {
      Assert.assertNotNull(targetMethod);
    }
    assertEquals(targetMethods.get(0), refMainMethod);
    assertEquals(targetMethods.get(0).getName(), ""print"");
    assertTrue(edgeMainToInterfaceTestAPrint);
    assertFalse(edgeMainToMainPrintMessage);
    assertTrue(reachableMethods.contains(targetMethods.get(0)));
    assertFalse(reachableMethods.contains(targetMethods.get(1)));
    assertEquals(targetMethods.get(0), resolvedMethod);
    assertEquals(targetMethods.get(0), concreteImpl);
    assertTrue(abstractImpl.contains(targetMethods.get(0)));
  }
",non-flaky,5
33842,apache_camel,FhirOperationIT.testOnType,"    @Test
    public void testOnType() throws Exception {
        final Map<String, Object> headers = new HashMap<>();
        // parameter type is Class
        headers.put(""CamelFhir.resourceType"", Patient.class);
        // parameter type is String
        headers.put(""CamelFhir.name"", ""everything"");
        // parameter type is org.hl7.fhir.instance.model.api.IBaseParameters
        headers.put(""CamelFhir.parameters"", null);
        // parameter type is Class
        headers.put(""CamelFhir.outputParameterType"", Parameters.class);
        headers.put(""CamelFhir.useHttpGet"", Boolean.FALSE);
        // parameter type is Class
        headers.put(""CamelFhir.returnType"", null);
        // parameter type is java.util.Map
        headers.put(""CamelFhir.extraParameters"", null);

        final org.hl7.fhir.instance.model.api.IBaseResource result = requestBodyAndHeaders(""direct://ON_TYPE"", null, headers);

        assertNotNull(result, ""onType result"");
        LOG.debug(""onType: "" + result);
    }
",non-flaky,5
20942,NationalSecurityAgency_timely,TimeSeriesGroupingIteratorTest.testMovingAverage,"    @Test
    public void testMovingAverage() throws Exception {
        SortedMapIterator source = new SortedMapIterator(table);
        TimeSeriesGroupingIterator iter = new TimeSeriesGroupingIterator();
        IteratorSetting settings = new IteratorSetting(100, TimeSeriesGroupingIterator.class);
        settings.addOption(TimeSeriesGroupingIterator.FILTER, ""0.20,0.20,0.20,0.20,0.20"");
        iter.init(source, settings.getOptions(), SCAN_IE);
        iter.seek(new Range(), EMPTY_COL_FAMS, true);

        for (int i = 4; i < 100; i++) {
            checkNextResult(iter, new double[] { i - 4, i - 3, i - 2, i - 1, i });
        }
        assertFalse(iter.hasTop());
    }
",non-flaky,5
43041,trinodb_trino,BaseConnectorTest.ensureTestNamingConvention,"    @Test
    public void ensureTestNamingConvention()
    {
        // Enforce a naming convention to make code navigation easier.
        assertThat(getClass().getName())
                .endsWith(""ConnectorTest"");
    }
",non-flaky,5
281,apache_hadoop,TestOffsetRange.testConstructor1,"  @Test(expected = IllegalArgumentException.class)
  public void testConstructor1() throws IOException {
    new OffsetRange(0, 0);
  }
",non-flaky,5
112116,apache_shardingsphere-elasticjob,StatisticRdbRepositoryTest.assertGetSummedTaskResultStatistics,"    @Test
    public void assertGetSummedTaskResultStatistics() {
        for (StatisticInterval each : StatisticInterval.values()) {
            Date date = new Date();
            repository.add(new TaskResultStatistics(100, 2, each, date));
            repository.add(new TaskResultStatistics(200, 5, each, date));
            TaskResultStatistics po = repository.getSummedTaskResultStatistics(date, each);
            assertThat(po.getSuccessCount(), is(300));
            assertThat(po.getFailedCount(), is(7));
        }
    }
",non-flaky,5
104639,apache_pinot,OfflineClusterIntegrationTest.testServerErrorWithBrokerTimeout,"  @Test
  public void testServerErrorWithBrokerTimeout()
      throws Exception {
    // Set query timeout
    long queryTimeout = 5000;
    TableConfig tableConfig = getOfflineTableConfig();
    tableConfig.setQueryConfig(new QueryConfig(queryTimeout));
    updateTableConfig(tableConfig);

    long startTime = System.currentTimeMillis();
    // The query below will fail execution due to JSON_MATCH on column without json index
    JsonNode queryResponse = postSqlQuery(""SELECT count(*) FROM mytable WHERE JSON_MATCH(Dest, '$=123')"");

    assertTrue(System.currentTimeMillis() - startTime < queryTimeout);
    assertTrue(queryResponse.get(""exceptions"").get(0).get(""message"").toString().startsWith(""\""QueryExecutionError""));

    // Remove timeout
    tableConfig.setQueryConfig(null);
    updateTableConfig(tableConfig);
  }
",non-flaky,5
94783,ktuukkan_marine-api,AISMessage21ParserTest.getStern,"    @Test
    public void getStern() throws Exception {
        assertEquals(3, msg.getStern());
    }
",non-flaky,5
33890,apache_camel,FhirReadIT.testResourceById,"    @Test
    public void testResourceById() throws Exception {
        final Map<String, Object> headers = new HashMap<>();
        // parameter type is Class
        headers.put(""CamelFhir.resource"", Patient.class);
        // parameter type is org.hl7.fhir.instance.model.api.IIdType
        headers.put(""CamelFhir.id"", patient.getIdElement());

        Patient result = requestBodyAndHeaders(""direct://RESOURCE_BY_ID"", null, headers);

        assertValidResponse(result);
    }
",non-flaky,5
60907,apache_druid,MovingAverageIterableTest.testMissingDaysInMiddle,"  @Test
  public void testMissingDaysInMiddle()
  {
    System.setProperty(""druid.generic.useDefaultValueForNull"", ""true"");
    NullHandling.initializeForTests();
    Map<String, Object> event1 = new HashMap<>();
    Map<String, Object> event2 = new HashMap<>();

    List<DimensionSpec> ds = new ArrayList<>();
    ds.add(new DefaultDimensionSpec(""gender"", ""gender""));

    event1.put(""gender"", ""m"");
    event1.put(""pageViews"", 10L);
    Row row1 = new MapBasedRow(JAN_1, event1);

    event2.put(""gender"", ""m"");
    event2.put(""pageViews"", 20L);
    Row row2 = new MapBasedRow(JAN_4, event2);

    Sequence<RowBucket> seq = Sequences.simple(Arrays.asList(
        new RowBucket(JAN_1, Collections.singletonList(row1)),
        new RowBucket(JAN_2, Collections.emptyList()),
        new RowBucket(JAN_3, Collections.emptyList()),
        new RowBucket(JAN_4, Collections.singletonList(row2))
    ));

    Iterator<Row> iter = new MovingAverageIterable(
        seq,
        ds,
        Collections.singletonList(
            new LongMeanAveragerFactory(""movingAvgPageViews"", 4, 1, ""pageViews"")
        ),
        Collections.emptyList(),
        Collections.singletonList(new LongSumAggregatorFactory(""pageViews"", ""pageViews""))
    ).iterator();

    Assert.assertTrue(iter.hasNext());
    Row result = iter.next();
    Assert.assertEquals(""m"", (result.getDimension(""gender"")).get(0));
    Assert.assertEquals(2.5f, result.getMetric(""movingAvgPageViews"").floatValue(), 0.0f);

    Assert.assertTrue(iter.hasNext());
    result = iter.next();
    Assert.assertEquals(""m"", (result.getDimension(""gender"")).get(0));
    Assert.assertEquals(2.5f, result.getMetric(""movingAvgPageViews"").floatValue(), 0.0f);

    Assert.assertTrue(iter.hasNext());
    result = iter.next();
    Assert.assertEquals(""m"", (result.getDimension(""gender"")).get(0));
    Assert.assertEquals(2.5f, result.getMetric(""movingAvgPageViews"").floatValue(), 0.0f);

    Assert.assertTrue(iter.hasNext());
    result = iter.next();
    Assert.assertEquals(""m"", (result.getDimension(""gender"")).get(0));
    Assert.assertEquals(7.5f, result.getMetric(""movingAvgPageViews"").floatValue(), 0.0f);

    Assert.assertFalse(iter.hasNext());
  }
",non-flaky,5
112742,hwang-pku_ormlite-core,DatabaseConnectionProxyTest.testQueryForOneNull,"	@Test
	public void testQueryForOneNull() throws Exception {
		DatabaseConnectionProxy proxy = new DatabaseConnectionProxy(null);
		assertNull(proxy.queryForOne(""statment"", null, null, null, null));
		proxy.close();
	}
",non-flaky,5
26726,MundaneImmortal_pair-distribution-app,OpsPairsCombinationsTest.testGetPastPairByTrackThrowsRuntimeErrorForOpsPair,"	@Test(expected =  RuntimeException.class)
	public void testGetPastPairByTrackThrowsRuntimeErrorForOpsPair() {
		List<DayPairs> pairsListFromDevs = getPairsListFromDevs(getStandardDevs(), false);
		Pair opsPair = pairsListFromDevs.get(0).getPairByTrack(""track1"");
		opsPair.setOpsPair(true);
		OpsPairCombinations devPairCombinations = new OpsPairCombinations(pairsListFromDevs);
		
		
		devPairCombinations.getPastPairByTrack(0, ""track2"");
	}
",non-flaky,5
33752,alibaba_fastjson,FastJsonpHttpMessageConverter4Case2Test.test3_2,"    @Test
    public void test3_2() throws Exception {
        ResultActions actions = this.mockMvc.perform(post(""/fastjson/test3?jsonp=fnUpdateSome""));
        actions.andDo(print());
        actions.andExpect(status().isOk()).andExpect(content().contentType(APPLICATION_JAVASCRIPT))
                .andExpect(content().string(""/**/fnUpdateSome({})""));
    }
",non-flaky,5
94740,ktuukkan_marine-api,Longitude28Test.largeValueIsNotCorrect,"    @Test
    public void largeValueIsNotCorrect() {
        assertFalse(Longitude28.isCorrect(1+180*60*10000));
    }
",non-flaky,5
59629,looly_hutool,FtpTest.reconnectIfTimeoutTest,"	@Test
	public void reconnectIfTimeoutTest() throws InterruptedException {
		Ftp ftp = new Ftp(""looly.centos"");

		Console.log(""æå°pwd: "" + ftp.pwd());

		Console.log(""ä¼ç ä¸æ®µæ¶é´ï¼ç¶ååæ¬¡åépwdå½ä»¤ï¼æåºå¼å¸¸è¡¨æè¿æ¥è¶æ¶"");
		Thread.sleep(35 * 1000);

		try{
			Console.log(""æå°pwd: "" + ftp.pwd());
		}catch (FtpException e) {
			e.printStackTrace();
		}

		Console.log(""å¤æ­æ¯å¦è¶æ¶å¹¶éè¿..."");
		ftp.reconnectIfTimeout();

		Console.log(""æå°pwd: "" + ftp.pwd());

		IoUtil.close(ftp);
	}
",non-flaky,5
135720,Netflix_Hystrix,CommonHystrixCommandTests.call,"    @Test
    public void testExecutionHookSemaphoreExceptionNoFallback() {
        assertHooksOnFailure(
                new Func0<C>() {
                    @Override
                    public C call() {
                        return getCommand(ExecutionIsolationStrategy.SEMAPHORE, ExecutionResult.FAILURE, FallbackResult.UNIMPLEMENTED);
                    }
",non-flaky,5
156434,apache_commons-lang,DateUtilsFragmentTest.testMillisecondFragmentInLargerUnitWithCalendar,"    @Test
    public void testMillisecondFragmentInLargerUnitWithCalendar() {
        assertEquals(0, DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.MILLISECOND));
        assertEquals(0, DateUtils.getFragmentInSeconds(aCalendar, Calendar.MILLISECOND));
        assertEquals(0, DateUtils.getFragmentInMinutes(aCalendar, Calendar.MILLISECOND));
        assertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.MILLISECOND));
        assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.MILLISECOND));
    }
",non-flaky,5
21249,androidx_androidx,PreferencePersistTest.long_persistWhileDisabled_notPersisted,"    @Test
    public void long_persistWhileDisabled_notPersisted() {
        mPreference.setPersistent(false);

        boolean wasPersisted = mPreference.putLong(1);

        assertFalse(wasPersisted);
        assertEquals(-1, mSharedPref.getLong(KEY, -1));
    }
",non-flaky,5
133904,cdancy_jenkins-rest,ConfigurationAsCodeApiLiveTest.testCascApply,"    @Test
    public void testCascApply() {
        String config = payloadFromResource(""/casc.yml"");
        RequestStatus success = api().apply(config);
        assertTrue(success.value());
    }
",non-flaky,5
137164,spring-projects_spring-framework,AnnotationsScannerTests.method,"		@TestAnnotation1
		public void method() {
		}
",non-flaky,5
78311,apache_beam,SimpleDoFnRunnerTest.testFinishBundleExceptionsWrappedAsUserCodeException,"  @Test
  public void testFinishBundleExceptionsWrappedAsUserCodeException() {
    ThrowingDoFn fn = new ThrowingDoFn();
    DoFnRunner<String, String> runner =
        new SimpleDoFnRunner<>(
            null,
            fn,
            NullSideInputReader.empty(),
            null,
            null,
            Collections.emptyList(),
            mockStepContext,
            null,
            Collections.emptyMap(),
            WindowingStrategy.of(new GlobalWindows()));

    thrown.expect(UserCodeException.class);
    thrown.expectCause(is(fn.exceptionToThrow));

    runner.finishBundle();
  }
",non-flaky,5
179458,abel533_Mapper,FieldHelperTest.test1,"    @Test
    public void test1() throws IntrospectionException {
        List<EntityField> fields = FieldHelper.getFields(Country.class);
        for (EntityField field : fields) {
            System.out.println(field.getName() + ""  -  @Id:"" + field.isAnnotationPresent(Id.class) + ""  -  javaType:"" + field.getJavaType());
        }
        System.out.println(""======================================"");

        fields = FieldHelper.getAll(Country.class);
        for (EntityField field : fields) {
            System.out.println(field.getName() + ""  -  @Id:"" + field.isAnnotationPresent(Id.class) + ""  -  javaType:"" + field.getJavaType());
        }
        System.out.println(""======================================"");
    }
",non-flaky,5
137143,spring-projects_spring-framework,MethodMetadataReadingVisitorTests.getAnnotationsReturnsDirectAnnotations,"	@Test
	public void getAnnotationsReturnsDirectAnnotations() {
		assertThatExceptionOfType(UnsupportedOperationException.class).isThrownBy(
				super::getAnnotationsReturnsDirectAnnotations);
	}
",non-flaky,5
104684,apache_pinot,RealtimeToOfflineSegmentsMinionClusterIntegrationTest.testReload,"  @Test(enabled = false)
  public void testReload(boolean includeOfflineTable) {
  }
",non-flaky,5
91469,strapdata_elassandra,ClusterDisruptionIT.testAckedIndexing,"    @TestLogging(""_root:DEBUG,org.elasticsearch.action.bulk:TRACE,org.elasticsearch.action.get:TRACE,"" +
    public void testAckedIndexing() throws Exception {

        final int seconds = !(TEST_NIGHTLY && rarely()) ? 1 : 5;
        final String timeout = seconds + ""s"";

        final List<String> nodes = startCluster(rarely() ? 5 : 3);

        assertAcked(prepareCreate(""test"")
            .setSettings(Settings.builder()
                .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1 + randomInt(2))
                .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, randomInt(2))
            ));
        ensureGreen();

        ServiceDisruptionScheme disruptionScheme = addRandomDisruptionScheme();
        logger.info(""disruption scheme [{}] added"", disruptionScheme);

        final ConcurrentHashMap<String, String> ackedDocs = new ConcurrentHashMap<>(); // id -> node sent.

        final AtomicBoolean stop = new AtomicBoolean(false);
        List<Thread> indexers = new ArrayList<>(nodes.size());
        List<Semaphore> semaphores = new ArrayList<>(nodes.size());
        final AtomicInteger idGenerator = new AtomicInteger(0);
        final AtomicReference<CountDownLatch> countDownLatchRef = new AtomicReference<>();
        final List<Exception> exceptedExceptions = Collections.synchronizedList(new ArrayList<Exception>());

        logger.info(""starting indexers"");
        try {
            for (final String node : nodes) {
                final Semaphore semaphore = new Semaphore(0);
                semaphores.add(semaphore);
                final Client client = client(node);
                final String name = ""indexer_"" + indexers.size();
                final int numPrimaries = getNumShards(""test"").numPrimaries;
                Thread thread = new Thread(() -> {
                    while (!stop.get()) {
                        String id = null;
                        try {
                            if (!semaphore.tryAcquire(10, TimeUnit.SECONDS)) {
                                continue;
                            }
                            logger.info(""[{}] Acquired semaphore and it has {} permits left"", name, semaphore.availablePermits());
                            try {
                                id = Integer.toString(idGenerator.incrementAndGet());
                                int shard = Math.floorMod(Murmur3HashFunction.hash(id), numPrimaries);
                                logger.trace(""[{}] indexing id [{}] through node [{}] targeting shard [{}]"", name, id, node, shard);
                                IndexResponse response =
                                        client.prepareIndex(""test"", ""type"", id)
                                                .setSource(""{}"", XContentType.JSON)
                                                .setTimeout(timeout)
                                                .get(timeout);
                                assertEquals(DocWriteResponse.Result.CREATED, response.getResult());
                                ackedDocs.put(id, node);
                                logger.trace(""[{}] indexed id [{}] through node [{}], response [{}]"", name, id, node, response);
                            } catch (ElasticsearchException e) {
                                exceptedExceptions.add(e);
                                final String docId = id;
                                logger.trace(() -> new ParameterizedMessage(""[{}] failed id [{}] through node [{}]"", name, docId, node), e);
                            } finally {
                                countDownLatchRef.get().countDown();
                                logger.trace(""[{}] decreased counter : {}"", name, countDownLatchRef.get().getCount());
                            }
                        } catch (InterruptedException e) {
                            // fine - semaphore interrupt
                        } catch (AssertionError | Exception e) {
                            logger.info(() -> new ParameterizedMessage(""unexpected exception in background thread of [{}]"", node), e);
                        }
                    }
                });

                thread.setName(name);
                thread.start();
                indexers.add(thread);
            }

            int docsPerIndexer = randomInt(3);
            logger.info(""indexing {} docs per indexer before partition"", docsPerIndexer);
            countDownLatchRef.set(new CountDownLatch(docsPerIndexer * indexers.size()));
            for (Semaphore semaphore : semaphores) {
                semaphore.release(docsPerIndexer);
            }
            assertTrue(countDownLatchRef.get().await(1, TimeUnit.MINUTES));

            for (int iter = 1 + randomInt(2); iter > 0; iter--) {
                logger.info(""starting disruptions & indexing (iteration [{}])"", iter);
                disruptionScheme.startDisrupting();

                docsPerIndexer = 1 + randomInt(5);
                logger.info(""indexing {} docs per indexer during partition"", docsPerIndexer);
                countDownLatchRef.set(new CountDownLatch(docsPerIndexer * indexers.size()));
                Collections.shuffle(semaphores, random());
                for (Semaphore semaphore : semaphores) {
                    assertThat(semaphore.availablePermits(), equalTo(0));
                    semaphore.release(docsPerIndexer);
                }
                logger.info(""waiting for indexing requests to complete"");
                assertTrue(countDownLatchRef.get().await(docsPerIndexer * seconds * 1000 + 2000, TimeUnit.MILLISECONDS));

                logger.info(""stopping disruption"");
                disruptionScheme.stopDisrupting();
                for (String node : internalCluster().getNodeNames()) {
                    ensureStableCluster(nodes.size(), TimeValue.timeValueMillis(disruptionScheme.expectedTimeToHeal().millis() +
                        DISRUPTION_HEALING_OVERHEAD.millis()), true, node);
                }
                // in case of a bridge partition, shard allocation can fail ""index.allocation.max_retries"" times if the master
                // is the super-connected node and recovery source and target are on opposite sides of the bridge
                if (disruptionScheme instanceof NetworkDisruption &&
                    ((NetworkDisruption) disruptionScheme).getDisruptedLinks() instanceof Bridge) {
                    assertAcked(client().admin().cluster().prepareReroute().setRetryFailed(true));
                }
                ensureGreen(""test"");

                logger.info(""validating successful docs"");
                assertBusy(() -> {
                    for (String node : nodes) {
                        try {
                            logger.debug(""validating through node [{}] ([{}] acked docs)"", node, ackedDocs.size());
                            for (String id : ackedDocs.keySet()) {
                                assertTrue(""doc ["" + id + ""] indexed via node ["" + ackedDocs.get(id) + ""] not found"",
                                    client(node).prepareGet(""test"", ""type"", id).setPreference(""_local"").get().isExists());
                            }
                        } catch (AssertionError | NoShardAvailableActionException e) {
                            throw new AssertionError(e.getMessage() + "" (checked via node ["" + node + ""]"", e);
                        }
                    }
                }, 30, TimeUnit.SECONDS);

                logger.info(""done validating (iteration [{}])"", iter);
            }
        } finally {
            if (exceptedExceptions.size() > 0) {
                StringBuilder sb = new StringBuilder();
                for (Exception e : exceptedExceptions) {
                    sb.append(""\n"").append(e.getMessage());
                }
                logger.debug(""Indexing exceptions during disruption: {}"", sb);
            }
            logger.info(""shutting down indexers"");
            stop.set(true);
            for (Thread indexer : indexers) {
                indexer.interrupt();
                indexer.join(60000);
            }
        }
    }
",non-flaky,5
113726,salesforce_reactive-grpc,StandardClientReactiveServerInteropTest.oneToOne,"    @Test
    public void oneToOne() {
        AtomicBoolean called = new AtomicBoolean(false);
        GreeterGrpc.GreeterStub stub = GreeterGrpc.newStub(channel);

        HelloRequest request = HelloRequest.newBuilder().setName(""World"").build();
        stub.sayHello(request, new LambdaStreamObserver<>(
                response -> {
                    assertThat(response.getMessage()).isEqualTo(""Hello World"");
                    called.set(true);
                }
        ));

        await().atMost(1, TimeUnit.SECONDS).untilTrue(called);
    }
",non-flaky,5
26720,MundaneImmortal_pair-distribution-app,PairTest.testTrackSet,"	@Test
	public void testTrackSet() {
		Pair subject = new Pair();
		
		subject.setTrack(""track"");
		
		assertThat(subject.getTrack(), is(""track""));
	}
",non-flaky,5
78285,apache_beam,TimerInternalsTest.testCompareEqual,"  @Test
  public void testCompareEqual() {
    Instant timestamp = new Instant(100);
    StateNamespace namespace = StateNamespaces.global();
    TimerData timer = TimerData.of(""id"", namespace, timestamp, TimeDomain.EVENT_TIME);

    assertThat(
        timer, comparesEqualTo(TimerData.of(""id"", namespace, timestamp, TimeDomain.EVENT_TIME)));
  }
",non-flaky,5
59636,looly_hutool,TokenizerUtilTest.jcsegTest,"	@Test
	public void jcsegTest() {
		TokenizerEngine engine = new JcsegEngine();
		Result result = engine.parse(text);
		checkResult(result);
	}
",non-flaky,5
30962,camunda-cloud_zeebe,POJOArrayTest.shouldSerializeAfterPartiallyReadEntries,"  @Test
  public void shouldSerializeAfterPartiallyReadEntries() {
    // given
    final POJOArray pojo = new POJOArray();

    final DirectBuffer buffer =
        encodeMsgPack(
            (w) -> {
              w.writeMapHeader(1);
              encodeSimpleArrayProp(w);
            });

    pojo.wrap(buffer);
    final Iterator<MinimalPOJO> iterator = pojo.simpleArray().iterator();
    iterator.next();
    iterator.next();
    iterator.next();

    final int writeLength = pojo.getLength();

    // when
    final UnsafeBuffer pojoBuffer = new UnsafeBuffer(new byte[writeLength]);
    pojo.write(pojoBuffer, 0);

    // then
    final Map<String, Object> msgPackMap = MsgPackUtil.asMap(pojoBuffer, 0, pojoBuffer.capacity());
    assertThat(msgPackMap)
        .containsOnly(
            entry(
                ""simpleArray"",
                ""[{longProp=123}, {longProp=456}, {longProp=789}, {longProp=555}, {longProp=777}]""));
  }
",non-flaky,5
99774,apache_cassandra,RateBasedBackPressureTest.testBackPressureWithDifferentGroups,"    @Test
    public void testBackPressureWithDifferentGroups() throws Exception
    {
        long windowSize = 6000;
        TestTimeSource timeSource = new TestTimeSource();
        TestableBackPressure strategy = new TestableBackPressure(ImmutableMap.of(HIGH_RATIO, ""0.9"", FACTOR, ""10"", FLOW, ""SLOW""), timeSource, windowSize);
        RateBasedBackPressureState state1 = strategy.newState(InetAddressAndPort.getByName(""127.0.0.1""));
        RateBasedBackPressureState state2 = strategy.newState(InetAddressAndPort.getByName(""127.0.0.2""));
        RateBasedBackPressureState state3 = strategy.newState(InetAddressAndPort.getByName(""127.0.0.3""));
        RateBasedBackPressureState state4 = strategy.newState(InetAddressAndPort.getByName(""127.0.0.4""));

        // Update incoming and outgoing rates:
        state1.incomingRate.update(50); // this
        state1.outgoingRate.update(100);
        state2.incomingRate.update(100);
        state2.outgoingRate.update(100);
        state3.incomingRate.update(20); // this
        state3.outgoingRate.update(100);
        state4.incomingRate.update(80);
        state4.outgoingRate.update(100);

        // Move time ahead:
        timeSource.sleep(windowSize, TimeUnit.MILLISECONDS);

        // Verify the first group:
        Set<RateBasedBackPressureState> replicaGroup = Sets.newHashSet(state1, state2);
        strategy.apply(replicaGroup, 1, TimeUnit.SECONDS);
        assertTrue(strategy.checkAcquired());
        assertTrue(strategy.checkApplied());
        assertEquals(7.4, strategy.getRateLimiterForReplicaGroup(replicaGroup).getRate(), 0.1);

        // Verify the second group:
        replicaGroup = Sets.newHashSet(state3, state4);
        strategy.apply(replicaGroup, 1, TimeUnit.SECONDS);
        assertTrue(strategy.checkAcquired());
        assertTrue(strategy.checkApplied());
        assertEquals(3.0, strategy.getRateLimiterForReplicaGroup(replicaGroup).getRate(), 0.1);
    }
",non-flaky,5
76967,Tencent_Firestorm,ExitUtilsTest.test,"  @Test
  public void test() {
    try {
    final int status = -1;
    final String testExitMessage = ""testExitMessage"";
    try {
      ExitUtils.disableSystemExit();
      ExitUtils.terminate(status, testExitMessage, null, null);
      fail();
    } catch (ExitException e) {
      assertEquals(status, e.getStatus());
      assertEquals(testExitMessage, e.getMessage());
    }

    final Thread t = new Thread(null, () -> {
      throw new AssertionError(""TestUncaughtException"");
    }, ""testThread"");
    t.start();
    t.join();
  } catch (Exception e) {
      e.printStackTrace();
      fail();
    }

  }
",non-flaky,5
84598,apache_zookeeper,BinaryInputArchiveTest.testBuffer,"    @Test
    public void testBuffer() {
        final byte[] expected = ""hello-world"".getBytes(StandardCharsets.UTF_8);
        final String tag = ""tag1"";
        checkWriterAndReader(
                (oa) -> oa.writeBuffer(expected, tag),
                (ia) -> {
                    byte[] actual = ia.readBuffer(tag);
                    assertArrayEquals(expected, actual);
                }
        );
    }
",non-flaky,5
26869,wildfly_wildfly,NamingContextTestCase.testLookup,"    @Test
    public void testLookup() throws Exception {
        final Name name = new CompositeName(""test"");
        final Object object = new Object();
        namingStore.bind(name, object);

        Object result = namingContext.lookup(name);
        assertEquals(object, result);

        //the same with security permissions
        result = testActionPermission(JndiPermission.ACTION_LOOKUP, namingContext, ""test"");
        assertEquals(object, result);
    }
",non-flaky,5
98005,ReactiveX_RxJava,StartWithTests.startWith1,"    @Test
    public void startWith1() {
        List<String> values = Observable.from(""one"", ""two"").startWith(""zero"").toList().toBlockingObservable().single();

        assertEquals(""zero"", values.get(0));
        assertEquals(""two"", values.get(2));
    }
",non-flaky,5
86117,graylog2_graylog2-server,EventDefinitionFacadeTest.createNativeEntity,"    @Test
    public void createNativeEntity() {
        final EntityV1 entityV1 = createTestEntity();
        final NotificationDto notificationDto = NotificationDto.builder()
                .config(HTTPEventNotificationConfig.builder().url(""https://hulud.net"").build())
                .title(""Notify me Senpai"")
                .description(""A notification for senpai"")
                .id(""dead-beef"")
                .build();
        final EntityDescriptor entityDescriptor = EntityDescriptor.create(""123123"", ModelTypes.NOTIFICATION_V1);
        final ImmutableMap<EntityDescriptor, Object> nativeEntities = ImmutableMap.of(
                entityDescriptor, notificationDto);

        final JobDefinitionDto jobDefinitionDto = mock(JobDefinitionDto.class);
        final JobTriggerDto jobTriggerDto = mock(JobTriggerDto.class);
        when(jobDefinitionDto.id()).thenReturn(""job-123123"");
        when(jobSchedulerClock.nowUTC()).thenReturn(DateTime.now(DateTimeZone.UTC));
        when(jobDefinitionService.save(any(JobDefinitionDto.class))).thenReturn(jobDefinitionDto);
        when(jobTriggerService.create(any(JobTriggerDto.class))).thenReturn(jobTriggerDto);
        final UserImpl kmerzUser = new UserImpl(mock(PasswordAlgorithmFactory.class), new Permissions(ImmutableSet.of()), ImmutableMap.of(""username"", ""kmerz""));
        when(userService.load(""kmerz"")).thenReturn(kmerzUser);


        final NativeEntity<EventDefinitionDto> nativeEntity = facade.createNativeEntity(
                entityV1,
                ImmutableMap.of(),
                nativeEntities,
                ""kmerz"");
        assertThat(nativeEntity).isNotNull();

        final EventDefinitionDto eventDefinitionDto = nativeEntity.entity();
        assertThat(eventDefinitionDto.title()).isEqualTo(""title"");
        assertThat(eventDefinitionDto.description()).isEqualTo(""description"");
        assertThat(eventDefinitionDto.config().type()).isEqualTo(""aggregation-v1"");
        // verify that ownership was registered for this entity
        verify(entityOwnershipService, times(1)).registerNewEventDefinition(nativeEntity.entity().id(), kmerzUser);
    }
",non-flaky,5
177993,aosp-mirror_platform_frameworks_support,GuidedStepFragmentTest.answer,"    @Test
    public void nextAndBack() throws Throwable {
        final String firstFragmentName = generateMethodTestName(""first"");
        final String secondFragmentName = generateMethodTestName(""second"");
        GuidedStepTestFragment.Provider first = mockProvider(firstFragmentName);
        doAnswer(new Answer<Void>() {
            public Void answer(InvocationOnMock invocation) {
                List actions = (List) invocation.getArguments()[0];
                actions.add(new GuidedAction.Builder().id(1000).title(""OK"").build());
                return null;
            }
",non-flaky,5
53159,cloudfoundry_uaa,TokenPolicyTest.deserializationOfTokenPolicyWithVerificationKey_doesNotFail,"    @Test
    public void deserializationOfTokenPolicyWithVerificationKey_doesNotFail() {
        String jsonTokenPolicy = ""{\""keys\"":{\""key-id-1\"":{\""verificationKey\"":\""some-verification-key-1\"",\""signingKey\"":\""some-signing-key-1\""}}}"";
        TokenPolicy tokenPolicy = JsonUtils.readValue(jsonTokenPolicy, TokenPolicy.class);
        assertEquals(tokenPolicy.getKeys().get(""key-id-1""), ""some-signing-key-1"");
    }
",non-flaky,5
118692,netty_netty,SmtpRequestEncoderTest.testEncodeHelo,"    @Test
    public void testEncodeHelo() {
        testEncode(SmtpRequests.helo(""localhost""), ""HELO localhost\r\n"");
    }
",non-flaky,5
110179,Wikidata_wikidata-toolkit,RdfSerializerTest.testSerialization,"	@Test
	public void testSerialization() throws RDFParseException,
			RDFHandlerException, IOException {
		this.rdfSerializer.open();
		this.rdfSerializer.processItemDocument(this.objectFactory
				.createItemDocument());
		this.rdfSerializer.close();
		Model model = RdfTestHelpers.parseRdf(this.out.toString());
		assertEquals(RdfTestHelpers.parseRdf(RdfTestHelpers
				.getResourceFromFile(""completeRDFDocument.rdf"")), model);
	}
",non-flaky,5
110170,Wikidata_wikidata-toolkit,TimerTest.basicTimerOperation,"	@Test
	public void basicTimerOperation() {
		Timer timer = new Timer(""Test timer"", Timer.RECORD_ALL);
		assertEquals(timer.getName(), ""Test timer"");
		long threadId = timer.getThreadId();

		assertEquals(timer.getAvgCpuTime(), 0);
		assertEquals(timer.getAvgWallTime(), 0);

		ThreadMXBean tmxb = ManagementFactory.getThreadMXBean();
		if (!tmxb.isThreadCpuTimeEnabled()) {
			tmxb.setThreadCpuTimeEnabled(true);
		}

		long cpuTime1 = tmxb.getThreadCpuTime(threadId);
		long wallTime1 = System.nanoTime();
		timer.start();
		doDummyComputation();
		assertTrue(""Timer should be running"", timer.isRunning());
		timer.stop();
		cpuTime1 = tmxb.getThreadCpuTime(threadId) - cpuTime1;
		wallTime1 = System.nanoTime() - wallTime1;
		assertTrue(
				""Unrealistic CPU time: "" + timer.getTotalCpuTime()
						+ "" should be closer to "" + cpuTime1,
				(cpuTime1 - TimerTest.TIME_TOLERANCE) <= timer
						.getTotalCpuTime()
						&& timer.getTotalCpuTime() <= cpuTime1);
		assertTrue(
				""Unrealistic wall time: "" + timer.getTotalWallTime()
						+ "" should be closer to "" + wallTime1,
				(wallTime1 - 2 * TimerTest.TIME_TOLERANCE) <= timer
						.getTotalWallTime()
						&& timer.getTotalWallTime() <= wallTime1);

		long cpuTime2 = tmxb.getThreadCpuTime(threadId);
		long wallTime2 = System.nanoTime();
		timer.start();
		doDummyComputation();
		timer.stop();
		cpuTime1 += tmxb.getThreadCpuTime(threadId) - cpuTime2;
		wallTime1 += System.nanoTime() - wallTime2;
		assertTrue(
				""Unrealistic total CPU time: "" + timer.getTotalCpuTime()
						+ "" should be closer to "" + cpuTime1,
				(cpuTime1 - 2 * TimerTest.TIME_TOLERANCE) <= timer
						.getTotalCpuTime()
						&& timer.getTotalCpuTime() <= cpuTime1);
		assertTrue(
				""Unrealistic total wall time: "" + timer.getTotalWallTime()
						+ "" should be closer to "" + wallTime1,
				(wallTime1 - 4 * TimerTest.TIME_TOLERANCE) <= timer
						.getTotalWallTime()
						&& timer.getTotalWallTime() <= wallTime1);

		assertEquals(timer.getTotalCpuTime() / 2, timer.getAvgCpuTime());
		assertEquals(timer.getTotalWallTime() / 2, timer.getAvgWallTime());

		timer.reset();
		assertEquals(timer.getTotalCpuTime(), 0);
		assertEquals(timer.getTotalWallTime(), 0);
		assertFalse(""Timer should not be running"", timer.isRunning());
	}
",non-flaky,5
122586,vespa-engine_vespa,FileFinderTest.all_files_recursive,"        @Test
        public void all_files_recursive() {
            assertFileHelper(FileFinder.files(testRoot()),

                    of(""file-1.json"", ""test.json"", ""test.txt"", ""test/file.txt"", ""test/data.json"", ""test/subdir-1/test""),
                    of(""test"", ""test/subdir-1"", ""test/subdir-2""));
        }
",non-flaky,5
133899,cdancy_jenkins-rest,PluginManagerApiLiveTest.testGetPlugins,"    @Test
    public void testGetPlugins() {
        final Plugins plugins = api().plugins(3, null);
        assertNotNull(plugins);
        assertTrue(plugins.errors().isEmpty());
        assertFalse(plugins.plugins().isEmpty());
        assertNotNull(plugins.plugins().get(0).shortName());
    }
",non-flaky,5
99723,apache_cassandra,FQLReplayTest.testMergingIterator,"    @Test
    public void testMergingIterator() throws IOException
    {
        File f = generateQueries(100, false);
        File f2 = generateQueries(100, false);
        int queryCount = 0;
        try (ChronicleQueue queue = ChronicleQueueBuilder.single(f).build();
             ChronicleQueue queue2 = ChronicleQueueBuilder.single(f2).build();
             FQLQueryIterator iter = new FQLQueryIterator(queue.createTailer(), 101);
             FQLQueryIterator iter2 = new FQLQueryIterator(queue2.createTailer(), 101);
             MergeIterator<FQLQuery, List<FQLQuery>> merger = MergeIterator.get(Lists.newArrayList(iter, iter2), FQLQuery::compareTo, new Replay.Reducer()))
        {
            long last = -1;

            while (merger.hasNext())
            {
                List<FQLQuery> qs = merger.next();
                assertEquals(2, qs.size());
                assertEquals(0, qs.get(0).compareTo(qs.get(1)));
                assertTrue(qs.get(0).queryStartTime >= last);
                last = qs.get(0).queryStartTime;
                queryCount++;
            }
        }
        assertEquals(100, queryCount);
    }
",non-flaky,5
156450,apache_commons-lang,DateUtilsFragmentTest.testSecondsofMinuteWithCalendar,"    @Test
    public void testSecondsofMinuteWithCalendar() {
        final long testResult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.MINUTE);
        assertEquals(seconds, testResult);
        assertEquals(aCalendar.get(Calendar.SECOND), testResult);
    }
",non-flaky,5
112106,apache_shardingsphere-elasticjob,JobSchedulerTest.assertInit,"    @Test
    public void assertInit() throws NoSuchFieldException, SchedulerException {
        when(schedulerFacade.updateJobConfiguration(liteJobConfig)).thenReturn(liteJobConfig);
        when(schedulerFacade.newJobTriggerListener()).thenReturn(new JobTriggerListener(null, null));
        jobScheduler.init();
        verify(schedulerFacade).registerStartUpInfo(true);
        Scheduler scheduler = ReflectionUtils.getFieldValue(JobRegistry.getInstance().getJobScheduleController(""test_job""), JobScheduleController.class.getDeclaredField(""scheduler""));
        assertThat(scheduler.getListenerManager().getTriggerListeners().get(0), instanceOf(JobTriggerListener.class));
        assertTrue(scheduler.isStarted());
    }
",non-flaky,5
98014,vert-x3_vertx-mongo-client,MongoClientWithObjectIdTest.testInsertPreexistingObjectID,"  @Test
  public void testInsertPreexistingObjectID() throws Exception {
    String collection = randomCollection();
    mongoClient.createCollection(collection, onSuccess(res -> {
      JsonObject doc = createDoc();
      //Changed to hex string as a random string will not be valid for useObjectId = true
      doc.put(""_id"", new ObjectId().toHexString());
      mongoClient.insertWithOptions(collection, doc, ACKNOWLEDGED, onSuccess(id -> {
        assertNull(id);
        testComplete();
      }));
    }));
    await();
  }
",non-flaky,5
94752,ktuukkan_marine-api,Latitude27Test.largeNegativeValueIsNotCorrect,"    @Test
    public void largeNegativeValueIsNotCorrect() {
        assertFalse(Latitude27.isCorrect(-1-90*60*10000));
    }
",non-flaky,5
97696,vojtechhabarta_typescript-generator,TaggedUnionsTest.testAsyncResultWithGenerics,"    @Test
    public void testAsyncResultWithGenerics() {
        final Settings settings = TestUtils.settings();
        settings.outputKind = TypeScriptOutputKind.module;
        final String output = new TypeScriptGenerator(settings).generateTypeScript(Input.from(AsyncUsage.class));
        Assert.assertTrue(output.contains(""result: AsyncOperationResultUnion<string>""));
        Assert.assertTrue(output.contains(""type AsyncOperationResultUnion<T> = InProgressResult<T> | FinishedResult<T> | FailedResult<T>""));
    }
",non-flaky,5
60905,apache_druid,MovingAverageIterableTest.testMissingDataAtMiddle,"  @Test
  public void testMissingDataAtMiddle()
  {

    Map<String, Object> eventM = new HashMap<>();
    Map<String, Object> eventF = new HashMap<>();
    Map<String, Object> eventU = new HashMap<>();

    eventM.put(""gender"", ""m"");
    eventM.put(""pageViews"", 10L);
    eventF.put(""gender"", ""f"");
    eventF.put(""pageViews"", 20L);
    eventU.put(""gender"", ""u"");
    eventU.put(""pageViews"", 30L);

    List<DimensionSpec> ds = new ArrayList<>();
    ds.add(new DefaultDimensionSpec(""gender"", ""gender""));

    Row jan1Row1M = new MapBasedRow(JAN_1, eventM);
    Row jan1Row2F = new MapBasedRow(JAN_1, eventF);
    Row jan1Row3U = new MapBasedRow(JAN_1, eventU);
    Row jan2Row1M = new MapBasedRow(JAN_2, eventM);
    Row jan3Row1M = new MapBasedRow(JAN_3, eventM);
    Row jan3Row2F = new MapBasedRow(JAN_3, eventF);
    Row jan3Row3U = new MapBasedRow(JAN_3, eventU);
    Row jan4Row1M = new MapBasedRow(JAN_4, eventM);

    Sequence<RowBucket> seq = Sequences.simple(Arrays.asList(
        new RowBucket(JAN_1, Arrays.asList(jan1Row1M, jan1Row2F, jan1Row3U)),
        new RowBucket(JAN_2, Collections.singletonList(jan2Row1M)),
        new RowBucket(JAN_3, Arrays.asList(jan3Row1M, jan3Row2F, jan3Row3U)),
        new RowBucket(JAN_4, Collections.singletonList(jan4Row1M))
    ));

    Iterator<Row> iter = new MovingAverageIterable(
        seq,
        ds,
        Collections.singletonList(
            new LongMeanAveragerFactory(""movingAvgPageViews"", 3, 1, ""pageViews"")
        ),
        Collections.emptyList(),
        Collections.singletonList(new LongSumAggregatorFactory(""pageViews"", ""pageViews""))
    ).iterator();

    // Jan 1
    Assert.assertTrue(iter.hasNext());
    Row result = iter.next();
    Assert.assertEquals(""m"", (result.getDimension(""gender"")).get(0));
    Assert.assertEquals(JAN_1, (result.getTimestamp()));

    Assert.assertTrue(iter.hasNext());
    result = iter.next();
    Assert.assertEquals(""f"", (result.getDimension(""gender"")).get(0));
    Assert.assertEquals(JAN_1, (result.getTimestamp()));

    Assert.assertTrue(iter.hasNext());
    result = iter.next();
    Assert.assertEquals(""u"", (result.getDimension(""gender"")).get(0));
    Assert.assertEquals(JAN_1, (result.getTimestamp()));

    // Jan 2
    Assert.assertTrue(iter.hasNext());
    result = iter.next();
    Assert.assertEquals(""m"", (result.getDimension(""gender"")).get(0));
    Assert.assertEquals(JAN_2, (result.getTimestamp()));

    Assert.assertTrue(iter.hasNext());
    result = iter.next();
    Assert.assertEquals(""u"", (result.getDimension(""gender"")).get(0));
    Assert.assertEquals(JAN_2, (result.getTimestamp()));

    Assert.assertTrue(iter.hasNext());
    result = iter.next();
    Assert.assertEquals(""f"", (result.getDimension(""gender"")).get(0));
    Assert.assertEquals(JAN_2, (result.getTimestamp()));

    // Jan 3
    Assert.assertTrue(iter.hasNext());
    result = iter.next();
    Assert.assertEquals(""m"", (result.getDimension(""gender"")).get(0));
    Assert.assertEquals(JAN_3, (result.getTimestamp()));

    Assert.assertTrue(iter.hasNext());
    result = iter.next();
    Assert.assertEquals(""f"", (result.getDimension(""gender"")).get(0));
    Assert.assertEquals(JAN_3, (result.getTimestamp()));

    Assert.assertTrue(iter.hasNext());
    result = iter.next();
    Assert.assertEquals(""u"", (result.getDimension(""gender"")).get(0));
    Assert.assertEquals(JAN_3, (result.getTimestamp()));

    // Jan 4
    Assert.assertTrue(iter.hasNext());
    result = iter.next();
    Assert.assertEquals(""m"", (result.getDimension(""gender"")).get(0));
    Assert.assertEquals(JAN_4, (result.getTimestamp()));

    Assert.assertTrue(iter.hasNext());
    result = iter.next();
    Assert.assertEquals(""u"", (result.getDimension(""gender"")).get(0));
    Assert.assertEquals(JAN_4, (result.getTimestamp()));

    Assert.assertTrue(iter.hasNext());
    result = iter.next();
    Assert.assertEquals(""f"", (result.getDimension(""gender"")).get(0));
    Assert.assertEquals(JAN_4, (result.getTimestamp()));

    Assert.assertFalse(iter.hasNext());
  }
",non-flaky,5
38216,palantir_atlasdb,TextUtilsTest.testProperCaseWord,"    @Test
    public void testProperCaseWord() throws Exception {
        String[] words = new String[] { ""AA102"", ""nw"", ""dog"", ""daVID CHiu"", ""yu-gi-oh rules"" };
        String[] results = new String[] { ""AA102"", ""Nw"", ""Dog"", ""David chiu"", ""Yu-gi-oh rules"" };
        for (int i=0; i < words.length; i++) {
            String result = TextUtils.properCaseWord(words[i]);
            assertEquals(results[i], result);
        }
    }
",non-flaky,5
26731,MundaneImmortal_pair-distribution-app,OpsPairsCombinationsTest.testIsRotationTimeForEmptyHistoryWithEveryDayRotationAnNoWeeklyRotation,"	@Test
	public void testIsRotationTimeForEmptyHistoryWithEveryDayRotationAnNoWeeklyRotation() {
		OpsPairCombinations devPairCombinations = new OpsPairCombinations(new ArrayList<>());

		assertThat(devPairCombinations.isRotationTime(Arrays.asList(""track1""), getStandardDevs(), true), is(true));
	}
",non-flaky,5
110197,Wikidata_wikidata-toolkit,RdfConverterTest.testWriteSiteLinks,"	@Test
	public void testWriteSiteLinks() throws RDFHandlerException, IOException,
			RDFParseException {
		this.sites.setSiteInformation(""enwiki"", ""wikipedia"", ""en"", ""mediawiki"",
				""http://en.wikipedia.org/w/$1"",
				""http://en.wikipedia.org/wiki/$1"");
		this.sites.setSiteInformation(""dewiki"", ""wikipedia"", ""de"", ""mediawiki"",
				""http://de.wikipedia.org/w/$1"",
				""http://de.wikipedia.org/wiki/$1"");
		Map<String, SiteLink> siteLinks = objectFactory.createSiteLinks();
		this.rdfConverter.writeSiteLinks(this.resource, siteLinks);
		this.rdfWriter.finish();
		Model model = RdfTestHelpers.parseRdf(out.toString());
		assertEquals(model, RdfTestHelpers.parseRdf(RdfTestHelpers
				.getResourceFromFile(""SiteLinks.rdf"")));

	}
",non-flaky,5
156472,apache_commons-lang,DateUtilsFragmentTest.testHoursOfMonthWithCalendar,"    @Test
    public void testHoursOfMonthWithCalendar() {
        final long testResult = DateUtils.getFragmentInHours(aCalendar, Calendar.MONTH);
        assertEquals( hours +(((days - 1) * DateUtils.MILLIS_PER_DAY))
                        / DateUtils.MILLIS_PER_HOUR,
                testResult);
    }
",non-flaky,5
175814,GoogleCloudPlatform_google-cloud-eclipse,OpenUriSelectionListenerTest.testWidgetSelected_InvalidURI,"  @Test
  public void testWidgetSelected_InvalidURI() {
    SelectionEvent selectionEvent = getEvent(INVALID_URI);

    new OpenUriSelectionListener(queryParameterProvider, errorHandler, browserSupport).widgetSelected(selectionEvent);
    verify(errorHandler).handle(captor.capture(), any(URI.class));
    assertThat(captor.getValue(), instanceOf(URISyntaxException.class));
  }
",non-flaky,5
160398,ConsenSys_teku,ChainDataProviderTest.getBlockHeaders_shouldGetBlockGivenSlot,"  @Test
  public void getBlockHeaders_shouldGetBlockGivenSlot()
      throws ExecutionException, InterruptedException {
    final ChainDataProvider provider =
        new ChainDataProvider(spec, recentChainData, combinedChainDataClient);
    final UInt64 slot = combinedChainDataClient.getCurrentSlot();
    List<BlockHeader> results = provider.getBlockHeaders(Optional.empty(), Optional.of(slot)).get();
    assertThat(results.get(0).header.message.slot).isEqualTo(slot);
  }
",non-flaky,5
78233,apache_beam,SimplePushbackSideInputDoFnRunnerTest.processElementSideInputNotReady,"  @Test
  public void processElementSideInputNotReady() {
    when(reader.isReady(Mockito.eq(singletonView), Mockito.any(BoundedWindow.class)))
        .thenReturn(false);

    SimplePushbackSideInputDoFnRunner<Integer, Integer> runner =
        createRunner(ImmutableList.of(singletonView));

    WindowedValue<Integer> oneWindow =
        WindowedValue.of(
            2,
            new Instant(-2),
            new IntervalWindow(new Instant(-500L), new Instant(0L)),
            PaneInfo.ON_TIME_AND_ONLY_FIRING);
    Iterable<WindowedValue<Integer>> oneWindowPushback =
        runner.processElementInReadyWindows(oneWindow);
    assertThat(oneWindowPushback, containsInAnyOrder(oneWindow));
    assertThat(underlying.inputElems, emptyIterable());
  }
",non-flaky,5
59602,looly_hutool,ArchiverTest.cpioTest,"	@Test
	public void cpioTest(){
		final File file = FileUtil.file(""d:/test/compress/test.cpio"");
		StreamArchiver.create(CharsetUtil.CHARSET_UTF_8, ArchiveStreamFactory.CPIO, file)
				.add(FileUtil.file(""d:/Java""), (f)->{
					Console.log(""Add: {}"", f.getPath());
					return true;
				})
				.finish().close();
	}
",non-flaky,5
21177,androidx_androidx,PreferenceVisibilityTest.testPreferencesAreCreatedWithTheVisibilitySetInXml,"    @Test
    public void testPreferencesAreCreatedWithTheVisibilitySetInXml() {
        final Context context = InstrumentationRegistry.getTargetContext();
        final PreferenceManager manager = new PreferenceManager(context);
        final PreferenceScreen screen = manager.inflateFromResource(context,
                R.layout.test_visibility,
                null);

        // Preference without visibility set should be visible
        assertTrue(screen.getPreference(0).isVisible());
        // Preference with visibility set to true should be visible
        assertTrue(screen.getPreference(1).isVisible());
        // Preference with visibility set to false should not be invisible
        assertFalse(screen.getPreference(2).isVisible());
    }
",non-flaky,5
162674,OpenAPITools_openapi-generator,PetApiTest.findPetsByTagsTest,"    @Test
    public void findPetsByTagsTest() {
        List<String> tags = null;
        //List<Pet> response = api.findPetsByTags(tags);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
",non-flaky,5
256,apache_hadoop,TestDelegationTokenForProxyUser.testWebHdfsDoAs,"@Test
public void testWebHdfsDoAs() throws Exception {
    LOG.info(""START: testWebHdfsDoAs()"");
    ((Log4JLogger) (LOG)).getLogger().setLevel(ALL);
    ((Log4JLogger) (LOG)).getLogger().setLevel(ALL);
    final UserGroupInformation ugi = UserGroupInformation.createRemoteUser(REAL_USER);
    LOG.info(""ugi.getShortUserName()="" + ugi.getShortUserName());
    final WebHdfsFileSystem webhdfs = WebHdfsTestUtil.getWebHdfsFileSystemAs(ugi, config);
    final Path root = new Path(""/"");
    cluster.getFileSystem().setPermission(root, new FsPermission(((short) (0777))));
    {
        final URL url = WebHdfsTestUtil.toUrl(webhdfs, GETHOMEDIRECTORY, root, new DoAsParam(PROXY_USER));
        final HttpURLConnection conn = ((HttpURLConnection) (url.openConnection()));
        final Map<?, ?> m = WebHdfsTestUtil.connectAndGetJson(conn, SC_OK);
        conn.disconnect();
        final Object responsePath = m.get(Path.class.getSimpleName());
        LOG.info(""responsePath="" + responsePath);
        Assert.assertEquals(""/user/"" + PROXY_USER, responsePath);
    }
    {
        final URL url = WebHdfsTestUtil.toUrl(webhdfs, GETHOMEDIRECTORY, root, new DoAsParam(PROXY_USER) {
            @Override
            public String getName() {
                return ""DOas"";
            }
        });
        final HttpURLConnection conn = ((HttpURLConnection) (url.openConnection()));
        final Map<?, ?> m = WebHdfsTestUtil.connectAndGetJson(conn, SC_OK);
        conn.disconnect();
        final Object responsePath = m.get(Path.class.getSimpleName());
        LOG.info(""responsePath="" + responsePath);
        Assert.assertEquals(""/user/"" + PROXY_USER, responsePath);
    }
    final Path f = new Path(""/testWebHdfsDoAs/a.txt"");
    {
        final PutOpParam.Op op = Op.CREATE;
        final URL url = WebHdfsTestUtil.toUrl(webhdfs, op, f, new DoAsParam(PROXY_USER));
        HttpURLConnection conn = ((HttpURLConnection) (url.openConnection()));
        conn = WebHdfsTestUtil.twoStepWrite(webhdfs, op, conn);
        final FSDataOutputStream out = WebHdfsTestUtil.write(webhdfs, op, conn, 4096);
        out.write(""Hello, webhdfs user!"".getBytes());
        out.close();
        final FileStatus status = webhdfs.getFileStatus(f);
        LOG.info(""status.getOwner()="" + status.getOwner());
        Assert.assertEquals(PROXY_USER, status.getOwner());
    }
    {
        final PostOpParam.Op op = Op.APPEND;
        final URL url = WebHdfsTestUtil.toUrl(webhdfs, op, f, new DoAsParam(PROXY_USER));
        HttpURLConnection conn = ((HttpURLConnection) (url.openConnection()));
        conn = WebHdfsTestUtil.twoStepWrite(webhdfs, op, conn);
        final FSDataOutputStream out = WebHdfsTestUtil.write(webhdfs, op, conn, 4096);
        out.write(""\nHello again!"".getBytes());
        out.close();
        final FileStatus status = webhdfs.getFileStatus(f);
        LOG.info(""status.getOwner()="" + status.getOwner());
        LOG.info(""status.getLen()  ="" + status.getLen());
        Assert.assertEquals(PROXY_USER, status.getOwner());
    }
}",test order dependency,4
89279,apache_samza,TestJobsResource.testPutJobs,"  @Test
  public void testPutJobs()
      throws IOException {
    Response resp = target(""v1/jobs"").request().put(Entity.text(""""));
    assertEquals(405, resp.getStatus());
    resp.close();
  }
",non-flaky,5
98576,nutzam_nutz,ImagesTest.test_clipScale_url,"    @Test
    public void test_clipScale_url() throws Throwable {
        File file = Files.findFile(getClass().getPackage().getName().replace('.', '/')
                                    + ""/snapshot.jpg"");
        Images.clipScale(file.toURI().toURL(), File.createTempFile(""abc"", ""jpg""), 256, 256);
    }
",non-flaky,5
112694,hwang-pku_ormlite-core,TransactionManagerTest.call,"	@Test
	public void testTransactionManagerSavePointNull() throws Exception {
		ConnectionSource connectionSource = createMock(ConnectionSource.class);
		DatabaseConnection conn = createMock(DatabaseConnection.class);
		expect(conn.isAutoCommitSupported()).andReturn(false);
		expect(conn.setSavePoint(isA(String.class))).andReturn(null);
		conn.commit(null);
		expect(connectionSource.getDatabaseType()).andReturn(databaseType);
		expect(connectionSource.getReadWriteConnection(null)).andReturn(conn);
		expect(connectionSource.saveSpecialConnection(conn)).andReturn(true);
		connectionSource.clearSpecialConnection(conn);
		connectionSource.releaseConnection(conn);
		replay(connectionSource, conn);
		TransactionManager tm = new TransactionManager(connectionSource);
		tm.callInTransaction(new Callable<Void>() {
			@Override
			public Void call() {
				return null;
			}
",non-flaky,5
98595,nutzam_nutz,El2Test.test_simple_condition,"    @Test
    public void test_simple_condition() {
        Context context = Lang.context();
        context.set(""a"", 10);
        assertEquals(10, El.eval(context, ""a""));
        assertEquals(20, El.eval(context, ""a + a""));

        context.set(""b"", ""abc"");
        assertEquals(25, El.eval(context, ""a + 2 +a+ b.length()""));

        String s = ""a>5?'GT 5':'LTE 5'"";
        assertEquals(""GT 5"", El.eval(context, s));
        context.set(""a"", 5);
        assertEquals(""LTE 5"", El.eval(context, s));

        assertEquals(""jk"", El.eval(""\""j\""+\""k\""""));

    }
",non-flaky,5
91381,OpenLCB_OpenLCB_Java,FdiParserTest.testCTor,"    @Test
    public void testCTor() {
        Element e = new Element(""root"");
        Element segment = new Element(""segment"");
        segment.setAttribute(""space"",""5"");
        segment.setAttribute(""origin"",""0"");
        e.addContent(segment);
        Element group = new Element(""group"");
        group.setAttribute(""offset"",""0"");
        Element fm = new Element(""function"");
        Element fmn = new Element(""name"");
        fmn.addContent(""F1"");
        fm.addContent(fmn);
        fm.setAttribute(""size"",""1"");
        fm.setAttribute(""kind"",""momentary"");
        group.addContent(fm);
        Element ft = new Element(""function"");
        Element ftn = new Element(""name"");
        ftn.addContent(""F2"");
        ft.addContent(ftn);
        ft.setAttribute(""size"",""1"");
        ft.setAttribute(""kind"",""toggle"");
        group.addContent(ft);
        Element fa = new Element(""function"");
        Element fan = new Element(""name"");
        fan.addContent(""F3"");
        fa.addContent(fan);
        fa.setAttribute(""size"",""1"");
        fa.setAttribute(""kind"",""analog"");
        group.addContent(fa);
        e.addContent(group);
        FdiParser t = new FdiParser(e);
        Assert.assertNotNull(""exists"",t);
    }
",non-flaky,5
94767,ktuukkan_marine-api,AISMessage24ParserTest.getName,"    @Test
    public void getName() throws Exception {
        assertEquals(""THIS IS A CLASS B UN"", partA.getName());
    }
",non-flaky,5
38275,palantir_atlasdb,AbstractTransactionTest.testPrimaryKeyViolation,"    @Test
    public void testPrimaryKeyViolation() {
        Cell cell = Cell.create(""r1"".getBytes(), TransactionConstants.COMMIT_TS_COLUMN);
        keyValueService.putUnlessExists(TransactionConstants.TRANSACTION_TABLE,
            ImmutableMap.of(cell, ""v1"".getBytes()));
        try {
            keyValueService.putUnlessExists(TransactionConstants.TRANSACTION_TABLE,
                ImmutableMap.of(cell, ""v2"".getBytes()));
            fail();
        } catch (KeyAlreadyExistsException e) {
            //expected
        }
    }
",non-flaky,5
38201,palantir_atlasdb,RocksDbKeyValueServiceTest.testReadGood,"    @Test
    public void testReadGood() {
        final Cell cell = Cell.create(""r1"".getBytes(), ""2"".getBytes());
        db.put(TABLE, ImmutableMap.of(cell, ""v1"".getBytes()), 1);
        final Map<Cell, Value> res = db.get(TABLE, ImmutableMap.of(cell, 2L));
        assertEquals(1, res.size());
        final Value value = res.get(cell);
        assertEquals(1, value.getTimestamp());
        assertEquals(""v1"", new String(value.getContents()));
    }
",non-flaky,5
367,apache_hadoop,TestPermissionSymlinks.testAclRenameTargetNotWritableFC,"  @Test
  public void testAclRenameTargetNotWritableFC() throws Exception {
    fs.setAcl(target, Arrays.asList(
      aclEntry(ACCESS, USER, ALL),
      aclEntry(ACCESS, USER, user.getUserName(), READ_EXECUTE),
      aclEntry(ACCESS, GROUP, ALL),
      aclEntry(ACCESS, OTHER, ALL)));
    fs.setAcl(targetParent, Arrays.asList(
      aclEntry(ACCESS, USER, ALL),
      aclEntry(ACCESS, USER, user.getUserName(), READ_EXECUTE),
      aclEntry(ACCESS, GROUP, ALL),
      aclEntry(ACCESS, OTHER, ALL)));
    doRenameLinkTargetNotWritableFC();
  }
",non-flaky,5
175815,GoogleCloudPlatform_google-cloud-eclipse,OpenUriSelectionListenerTest.testWidgetDefaultSelected_InvalidURI,"  @Test
  public void testWidgetDefaultSelected_InvalidURI() {
    SelectionEvent selectionEvent = getEvent(INVALID_URI);

    new OpenUriSelectionListener(queryParameterProvider, errorHandler, browserSupport).widgetDefaultSelected(selectionEvent);
    verify(errorHandler).handle(captor.capture(), any(URI.class));
    assertThat(captor.getValue(), instanceOf(URISyntaxException.class));
  }
",non-flaky,5
170520,eclipse_jetty.project,TestAnnotationConfiguration.setup,"    @BeforeEach
    public void setup() throws Exception
    {
        web25 = MavenTestingUtils.getTestResourceFile(""web25.xml"");
        web31false = MavenTestingUtils.getTestResourceFile(""web31false.xml"");
        web31true = MavenTestingUtils.getTestResourceFile(""web31true.xml"");

        // prepare an sci that will be on the webapp's classpath
        jarDir = new File(MavenTestingUtils.getTestResourcesDir().getParentFile(), ""jar"");
        testSciJar = new File(jarDir, ""test-sci.jar"");
        assertTrue(testSciJar.exists());

        testContainerSciJar = new File(jarDir, ""test-sci-for-container-path.jar"");
        testWebInfClassesJar = new File(jarDir, ""test-sci-for-webinf.jar"");

        // unpack some classes to pretend that are in WEB-INF/classes
        unpacked = new File(MavenTestingUtils.getTargetTestingDir(), ""test-sci-for-webinf"");
        unpacked.mkdirs();
        FS.cleanDirectory(unpacked);
        JAR.unpack(testWebInfClassesJar, unpacked);
        webInfClasses = Resource.newResource(unpacked);

        containerLoader = new URLClassLoader(new URL[]{
            testContainerSciJar.toURI().toURL()
        }, Thread.currentThread().getContextClassLoader());

        targetClasses = Resource.newResource(MavenTestingUtils.getTargetDir().toURI()).addPath(""/test-classes"");

        classes = Arrays.asList(new Resource[]{webInfClasses, targetClasses});

        webAppLoader = new URLClassLoader(new URL[]{
            testSciJar.toURI().toURL(), targetClasses.getURI().toURL(), webInfClasses.getURI().toURL()
        },
            containerLoader);
    }
",non-flaky,5
92600,FasterXML_jackson-databind,TestTypeFactoryWithClassLoader.testUsesFallBackClassLoaderIfNoThreadClassLoaderAndNoWithClassLoader,"@Test
public void testUsesFallBackClassLoaderIfNoThreadClassLoaderAndNoWithClassLoader() throws ClassNotFoundException {
	Thread.currentThread().setContextClassLoader(null);
	TypeFactory spySut = spy(mapper.getTypeFactory());
	Assert.assertNull(spySut.getClassLoader());
	Assert.assertArrayEquals(null,spySut._modifiers);
	Class<?> clazz = spySut.findClass(aClassName);
	Assert.assertNotNull(clazz);
	verify(spySut).classForName(any(String.class));
}
",non-flaky,5
30952,camunda-cloud_zeebe,SubscriptionUtilTest.shouldGetZeroSubscriptionHashCodeIfEmpty,"  @Test
  public void shouldGetZeroSubscriptionHashCodeIfEmpty() {
    assertThat(getSubscriptionHashCode(new UnsafeBuffer())).isEqualTo(0);
  }
",non-flaky,5
84615,apache_zookeeper,GetEphemeralsTest.testGetEphemerals,"    @Test
    public void testGetEphemerals() throws IOException, KeeperException, InterruptedException {

        final CountDownLatch doneProcessing = new CountDownLatch(1);
        final List<String> unexpectedBehavior = new ArrayList<String>();
        zk.getEphemerals((rc, ctx, paths) -> {
            if (paths == null) {
                unexpectedBehavior.add(String.format(""Expected ephemeral count for""
                                                             + "" allPaths to be %d but was null"", expected.length));
            } else if (paths.size() != expected.length) {
                unexpectedBehavior.add(String.format(""Expected ephemeral count for allPaths to be %d but was %d"", expected.length, paths.size()));
            }
            for (int i = 0; i < expected.length; i++) {
                String path = expected[i];
                if (!paths.contains(path)) {
                    unexpectedBehavior.add(String.format(""Path=%s exists in getEphemerals list "", path));
                }
            }
            doneProcessing.countDown();
        }, null);
        long waitForCallbackSecs = 2L;
        if (!doneProcessing.await(waitForCallbackSecs, TimeUnit.SECONDS)) {
            fail(String.format(""getEphemerals didn't callback within %d seconds"", waitForCallbackSecs));
        }
        checkForUnexpectedBehavior(unexpectedBehavior);

    }
",non-flaky,5
59580,looly_hutool,CronTest.addAndRemoveTest,"	@Test
	public void addAndRemoveTest() {
		String id = CronUtil.schedule(""*/2 * * * * *"", (Runnable) () -> Console.log(""task running : 2s""));

		Console.log(id);
		CronUtil.remove(id);

		// æ¯æç§çº§å«å®æ¶ä»»å¡
		CronUtil.setMatchSecond(true);
		CronUtil.start();
	}
",non-flaky,5
86044,graylog2_graylog2-server,NotificationDtoTest.testValidHttpNotification,"    @Test
    public void testValidHttpNotification() {
        final NotificationDto validNotification = getHttpNotification();

        final ValidationResult validationResult = validNotification.validate();
        assertThat(validationResult.failed()).isFalse();
        assertThat(validationResult.getErrors().size()).isEqualTo(0);
    }
",non-flaky,5
77498,dropwizard_dropwizard,PolymorphicPrincipalEntityTest.setUp,"    @BeforeEach
    public void setUp() throws Exception {
        super.setUp();
    }
",non-flaky,5
94642,square_okhttp,DispatcherTest.run,"  @Test public void idleCallbackInvokedWhenIdle() throws InterruptedException {
      @Override public void run() {
        idle.set(true);
      }
",non-flaky,5
133937,CorfuDB_CorfuDB,ManagementHandlerTest.testHandleReportFailure1,"    @Test
    public void testHandleReportFailure1() {
        testHandleReportFailure(true);
    }
",non-flaky,5
86099,graylog2_graylog2-server,EventProcessorDtoTest.type,"    @Test
    public void automaticallyAddsPersistToStreamsStorageHandler() {
        final EventStorageHandler.Config testStorageHandlerConfig = new EventStorageHandler.Config() {
            @Override
            public String type() {
                return ""storage-test"";
            }
",non-flaky,5
76944,Tencent_Firestorm,ShuffleReadClientImplTest.readTest4,"  @Test
  public void readTest4() throws Exception {
    String basePath = HDFS_URI + ""clientReadTest4"";
    HdfsShuffleWriteHandler writeHandler =
        new HdfsShuffleWriteHandler(""appId"", 0, 0, 1, basePath, ""test1"", conf);

    Map<Long, byte[]> expectedData = Maps.newHashMap();
    Roaring64NavigableMap blockIdBitmap = Roaring64NavigableMap.bitmapOf();
    Roaring64NavigableMap taskIdBitmap = Roaring64NavigableMap.bitmapOf(0);
    writeTestData(writeHandler, 2, 30, 0, expectedData, blockIdBitmap);

    ShuffleReadClientImpl readClient = new ShuffleReadClientImpl(StorageType.HDFS.name(),
        ""appId"", 0, 1, 100, 2, 10, 1000,
        basePath, blockIdBitmap, taskIdBitmap, Lists.newArrayList(), new Configuration());
    Path dataFile = new Path(basePath + ""/appId/0/0-1/test1_0.data"");
    // data file is deleted after readClient checkExpectedBlockIds
    fs.delete(new Path(basePath + ""/appId/0/0-1/test1_0.data""), true);
    // sleep to wait delete operation
    Thread.sleep(10000);

    assertNull(readClient.readShuffleBlockData());
    try {
      fs.listStatus(dataFile);
      fail(""Index file should be deleted"");
    } catch (Exception e) {
    }

    try {
      readClient.checkProcessedBlockIds();
      fail(EXPECTED_EXCEPTION_MESSAGE);
    } catch (Exception e) {
      assertTrue(e.getMessage().startsWith(""Blocks read inconsistent: expected""));
    }
    readClient.close();
  }
",non-flaky,5
122559,vespa-engine_vespa,CommandLineTest.processFactorySpawnFails,"    @Test(expected = NegativeArraySizeException.class)
    public void processFactorySpawnFails() {
        terminal.interceptCommand(
                        commandLine.toString(),
                        command -> { throw new NegativeArraySizeException(); });
        commandLine.add(""foo"").execute();
    }
",non-flaky,5
43040,trinodb_trino,BaseDynamicPartitionPruningTest.testRightJoinWithNonSelectiveBuildSide,"    @Test(timeOut = 30_000)
    public void testRightJoinWithNonSelectiveBuildSide()
    {
        @Language(""SQL"") String selectQuery = ""SELECT * FROM partitioned_lineitem l RIGHT JOIN supplier s ON l.suppkey = s.suppkey"";
        ResultWithQueryId<MaterializedResult> result = getDistributedQueryRunner().executeWithQueryId(
                getSession(),
                selectQuery);
        MaterializedResult expected = computeActual(withDynamicFilteringDisabled(), selectQuery);
        assertEqualsIgnoreOrder(result.getResult(), expected);

        OperatorStats probeStats = searchScanFilterAndProjectOperatorStats(result.getQueryId(), getQualifiedTableName(PARTITIONED_LINEITEM));
        // Probe-side is fully scanned
        assertEquals(probeStats.getInputPositions(), LINEITEM_COUNT);

        DynamicFiltersStats dynamicFiltersStats = getDynamicFilteringStats(result.getQueryId());
        assertEquals(dynamicFiltersStats.getTotalDynamicFilters(), 1L);
        assertEquals(dynamicFiltersStats.getLazyDynamicFilters(), 1L);
        assertEquals(dynamicFiltersStats.getReplicatedDynamicFilters(), 0L);
        assertEquals(dynamicFiltersStats.getDynamicFiltersCompleted(), 1L);

        DynamicFilterDomainStats domainStats = getOnlyElement(dynamicFiltersStats.getDynamicFilterDomainStats());
        assertThat(domainStats.getSimplifiedDomain())
                .isEqualTo(getSimplifiedDomainString(1L, 100L, 100, BIGINT));
    }
",non-flaky,5
77505,dropwizard_dropwizard,OptionalAuthFilterOrderingTest.tearDown,"    @AfterEach
    public void tearDown() throws Exception {
        super.tearDown();
    }
",non-flaky,5
326,hwang-pku_ormlite-core,QueryBuilderTest.testQueryRaw,"@Test
public void testQueryRaw() throws Exception {
    Dao<Foo, Integer> dao = createDao(Foo.class, true);
    Foo foo = new Foo();
    foo.stringField = ""zipper"";
    dao.create(foo);
    QueryBuilder<Foo, Integer> qb = dao.queryBuilder();
    assertEquals(1, qb.countOf());
    GenericRawResults<String[]> results = qb.queryRaw();
    List<String[]> stringResults = results.getResults();
    assertEquals(1, stringResults.size());
    assertEquals(Integer.toString(foo.id), stringResults.get(0)[0]);
    assertEquals(foo.stringField, stringResults.get(0)[3]);
}",unordered collections,3
170521,eclipse_jetty.project,TestAnnotationConfiguration.testAnnotationScanControl,"    @Test
    public void testAnnotationScanControl() throws Exception
    {
        //check that a 2.5 webapp with configurationDiscovered will discover annotations
        TestableAnnotationConfiguration config25 = new TestableAnnotationConfiguration();
        WebAppContext context25 = new WebAppContext();
        context25.setClassLoader(Thread.currentThread().getContextClassLoader());
        context25.setAttribute(AnnotationConfiguration.MULTI_THREADED, Boolean.FALSE);
        context25.setAttribute(AnnotationConfiguration.MAX_SCAN_WAIT, 0);
        context25.setConfigurationDiscovered(false);
        context25.getMetaData().setWebDescriptor(new WebDescriptor(Resource.newResource(web25)));
        context25.getServletContext().setEffectiveMajorVersion(2);
        context25.getServletContext().setEffectiveMinorVersion(5);
        config25.configure(context25);
        config25.assertAnnotationDiscovery(false);

        //check that a 2.5 webapp discover annotations
        TestableAnnotationConfiguration config25b = new TestableAnnotationConfiguration();
        WebAppContext context25b = new WebAppContext();
        context25b.setClassLoader(Thread.currentThread().getContextClassLoader());
        context25b.setAttribute(AnnotationConfiguration.MULTI_THREADED, Boolean.FALSE);
        context25b.setAttribute(AnnotationConfiguration.MAX_SCAN_WAIT, 0);
        context25b.getMetaData().setWebDescriptor(new WebDescriptor(Resource.newResource(web25)));
        context25b.getServletContext().setEffectiveMajorVersion(2);
        context25b.getServletContext().setEffectiveMinorVersion(5);
        config25b.configure(context25b);
        config25b.assertAnnotationDiscovery(true);

        //check that a 3.x webapp with metadata true won't discover annotations
        TestableAnnotationConfiguration config31 = new TestableAnnotationConfiguration();
        WebAppContext context31 = new WebAppContext();
        context31.setClassLoader(Thread.currentThread().getContextClassLoader());
        context31.setAttribute(AnnotationConfiguration.MULTI_THREADED, Boolean.FALSE);
        context31.setAttribute(AnnotationConfiguration.MAX_SCAN_WAIT, 0);
        context31.getMetaData().setWebDescriptor(new WebDescriptor(Resource.newResource(web31true)));
        context31.getServletContext().setEffectiveMajorVersion(3);
        context31.getServletContext().setEffectiveMinorVersion(1);
        config31.configure(context31);
        config31.assertAnnotationDiscovery(false);

        //check that a 3.x webapp with metadata false will discover annotations
        TestableAnnotationConfiguration config31b = new TestableAnnotationConfiguration();
        WebAppContext context31b = new WebAppContext();
        context31b.setClassLoader(Thread.currentThread().getContextClassLoader());
        context31b.setAttribute(AnnotationConfiguration.MULTI_THREADED, Boolean.FALSE);
        context31b.setAttribute(AnnotationConfiguration.MAX_SCAN_WAIT, 0);
        context31b.getMetaData().setWebDescriptor(new WebDescriptor(Resource.newResource(web31false)));
        context31b.getServletContext().setEffectiveMajorVersion(3);
        context31b.getServletContext().setEffectiveMinorVersion(1);
        config31b.configure(context31b);
        config31b.assertAnnotationDiscovery(true);
    }
",non-flaky,5
26910,wildfly_wildfly,JSFModuleIdFactoryTestCase.noModulePathTest,"     @Test
     public void noModulePathTest() {
     JSFModuleIdFactory factory = JSFModuleIdFactory.getInstance();
     Assert.assertEquals(1, factory.getActiveJSFVersions().size());

     Assert.assertEquals(API_MODULE, factory.getApiModId(""main"").getName());
     Assert.assertEquals(""main"", factory.getApiModId(""main"").getSlot());
     Assert.assertEquals(IMPL_MODULE, factory.getImplModId(""main"").getName());
     Assert.assertEquals(""main"", factory.getImplModId(""main"").getSlot());
     Assert.assertEquals(INJECTION_MODULE, factory.getInjectionModId(""main"").getName());
     Assert.assertEquals(""main"", factory.getInjectionModId(""main"").getSlot());
     } */
",non-flaky,5
98627,nutzam_nutz,El2Test.test_issue_1475_1476,"    @Test
    public void test_issue_1475_1476() {
        
        Context context = Lang.context();
        context.set(""Math"", Math.class);
        
        
        //Queue<Object> rpn = new ShuntingYard().parseToRPN(""Math.max(10, 0-11)"");
        //System.out.println(rpn);
        
//        Queue<Object> rpn = new ShuntingYard().parseToRPN(""Math.max(0,-10)"");
//        System.out.println(rpn);
        Object max = El.eval(context, ""Math.max(0,-11)"");
        assertEquals(0, max);
        
        
        assertEquals(0, El.eval(context, ""Math.max(-1,0)""));
        assertEquals(0, El.eval(context, ""Math.max(0,-1)""));
        assertEquals(0, El.eval(context, ""Math.max(-0,-1)""));
        

        assertEquals(0, El.eval(context, ""Math.max(-1,Math.max(-1,Math.max(-1,Math.max(-1,0))))""));
        assertEquals(0, El.eval(context, ""Math.max(Math.max(Math.max(Math.max(0,-1),-1),-1),-1)""));
        assertEquals(0, El.eval(context, ""Math.max(-Math.max(-Math.max(-Math.max(-0,-1),-1),-1),-1)""));
    }
",non-flaky,5
159675,liquibase_liquibase,AddColumnExecutorTest.notNull,"    @Test
    public void notNull() throws Exception {
        this.statementUnderTest = new AddColumnStatement(null, null, TABLE_NAME, ""column_name"", ""int"", 42, new NotNullConstraint());

        assertCorrect(""ALTER TABLE [table_name] ADD [column_name] int DEFAULT 42 NOT NULL"", SybaseASADatabase.class, SybaseDatabase.class);
        assertCorrect(""alter table table_name add column_name int default 42 not null"", InformixDatabase.class);
        assertCorrect(""alter table [table_name] add [column_name] int constraint df_table_name_column_name default 42 not null"", MSSQLDatabase.class);
        assertCorrect(""alter table table_name add column_name int default 42 not null"", OracleDatabase.class, DerbyDatabase.class, HsqlDatabase.class, DB2Database.class, H2Database.class, FirebirdDatabase.class);
        assertCorrect(""not supported. fixme!!"", SQLiteDatabase.class);
        assertCorrectOnRest(""ALTER TABLE [table_name] ADD [column_name] int default 42 not null"");
    }
",non-flaky,5
21197,androidx_androidx,PreferenceDataStoreTest.testInitialValueIsFromDataStoreOnPreferenceManager,"    @Test
    public void testInitialValueIsFromDataStoreOnPreferenceManager() {
        when(mDataStore.getBoolean(anyString(), anyBoolean())).thenReturn(true);

        mManager.setPreferenceDataStore(mDataStore);
        CheckBoxPreference pref = new CheckBoxPreference(mContext);
        pref.setKey(""CheckboxTestPref"");

        mScreen.addPreference(pref);

        assertTrue(pref.isChecked());
    }
",non-flaky,5
84596,apache_zookeeper,BinaryInputArchiveTest.testFloat,"    @Test
    public void testFloat() {
        final float expected = 3.14159f;
        final String tag = ""tag1"";
        final float delta = 1e-10f;
        checkWriterAndReader(
                (oa) -> oa.writeFloat(expected, tag),
                (ia) -> {
                    float actual = ia.readFloat(tag);
                    assertEquals(expected, actual, delta);
                }
        );
    }
",non-flaky,5
26838,wildfly_wildfly,WritableServiceBasedNamingStoreTestCase.testUnbind,"    @Test
    public void testUnbind() throws Exception {
        final Name name = new CompositeName(""test"");
        final Object value = new Object();
        WritableServiceBasedNamingStore.pushOwner(OWNER_FOO);
        try {
            store.bind(name, value);
            store.unbind(name);
        } finally {
            WritableServiceBasedNamingStore.popOwner();
        }
        try {
            store.lookup(name);
            fail(""Should have thrown name not found"");
        } catch (NameNotFoundException expect) {
        }
    }
",non-flaky,5
98226,apache_jackrabbit,CreateRepositoryTest.createRepositories,"    @Test
    public void createRepositories() throws Exception {
        doCreateRepositories(""jackrabbit-1.3"");
    }
",non-flaky,5
59635,looly_hutool,TokenizerUtilTest.ikAnalyzerTest,"	@Test
	public void ikAnalyzerTest() {
		TokenizerEngine engine = new IKAnalyzerEngine();
		Result result = engine.parse(text);
		String resultStr = IterUtil.join((Iterator<Word>)result, "" "");
		Assert.assertEquals(""è¿ä¸¤ä¸ª æ¹æ³ ç åºå« å¨äº è¿åå¼"", resultStr);
	}
",non-flaky,5
77485,dropwizard_dropwizard,TaskServletTest.execute,"    @Test
            public void execute(Map<String, List<String>> parameters, PrintWriter output) throws Exception {
                output.println(""Vacuum cleaning"");
            }
",non-flaky,5
99736,apache_cassandra,FQLReplayTest.testFQLQuerySingleToStatement,"    @Test
    public void testFQLQuerySingleToStatement()
    {
        List<ByteBuffer> values = new ArrayList<>();
        for (int i = 0; i < 10; i++)
            values.add(ByteBufferUtil.bytes(i));
        FQLQuery.Single single = new FQLQuery.Single(""xyz"",
                                                     QueryOptions.DEFAULT.getProtocolVersion().asInt(),
                                                     QueryOptions.forInternalCalls(values),
                                                     1234,
                                                     12345,
                                                     54321,
                                                     ""select * from aaa"",
                                                     values);
        Statement stmt = single.toStatement();
        assertEquals(stmt.getDefaultTimestamp(), 12345);
        assertTrue(stmt instanceof SimpleStatement);
        SimpleStatement simpleStmt = (SimpleStatement)stmt;
        assertEquals(""select * from aaa"",simpleStmt.getQueryString(CodecRegistry.DEFAULT_INSTANCE));
        assertArrayEquals(values.toArray(), simpleStmt.getValues(com.datastax.driver.core.ProtocolVersion.fromInt(QueryOptions.DEFAULT.getProtocolVersion().asInt()), CodecRegistry.DEFAULT_INSTANCE));
    }
",non-flaky,5
59598,looly_hutool,PinyinUtilTest.getFirstLetterByPinyin4jTest,"	@Test
	public void getFirstLetterByPinyin4jTest(){
		final Pinyin4jEngine engine = new Pinyin4jEngine();
		final String result = engine.getFirstLetter(""ææµ·"", """");
		Assert.assertEquals(""lh"", result);
	}
",non-flaky,5
60877,apache_druid,InfluxParserTest.testParse,"  @Test
  public void testParse(String name, String input, Parsed expected)
  {
    Parser<String, Object> parser = new InfluxParser(null);
    Map<String, Object> parsed = parser.parseToMap(input);
    MatcherAssert.assertThat(
        ""correct measurement name"",
        parsed.get(""measurement""),
        Matchers.equalTo(expected.measurement)
    );
    MatcherAssert.assertThat(
        ""correct timestamp"",
        parsed.get(InfluxParser.TIMESTAMP_KEY),
        Matchers.equalTo(expected.timestamp)
    );
    expected.kv.forEach((k, v) -> MatcherAssert.assertThat(""correct field "" + k, parsed.get(k), Matchers.equalTo(v)));
    parsed.remove(""measurement"");
    parsed.remove(InfluxParser.TIMESTAMP_KEY);
    MatcherAssert.assertThat(""No extra keys in parsed data"", parsed.keySet(), Matchers.equalTo(expected.kv.keySet()));
  }
",non-flaky,5
137165,spring-projects_spring-framework,AnnotationsScannerTests.method,"		@TestInheritedAnnotation2
		public void method() {
		}
",non-flaky,5
104610,apache_pinot,AggregateMetricsClusterIntegrationTest.testQueries,"  @Test
  public void testQueries()
      throws Exception {
    String sql = ""SELECT SUM(AirTime), SUM(ArrDelay) FROM mytable"";
    testSqlQuery(sql, Collections.singletonList(sql));
    sql = ""SELECT SUM(AirTime), DaysSinceEpoch FROM mytable GROUP BY DaysSinceEpoch ORDER BY SUM(AirTime) DESC"";
    testSqlQuery(sql, Collections.singletonList(sql));
    sql = ""SELECT Origin, SUM(ArrDelay) FROM mytable WHERE Carrier = 'AA' GROUP BY Origin ORDER BY Origin"";
    testSqlQuery(sql, Collections.singletonList(sql));
  }
",non-flaky,5
137136,spring-projects_spring-framework,AnnotationMetadataReadingVisitorTests.verifyEquals,"	@Test
	public void verifyEquals() throws Exception {
	}
",non-flaky,5
38253,palantir_atlasdb,AbstractAtlasDbKeyValueServiceTest.testGetRangeThrowsOnError,"    @Test
    public void testGetRangeThrowsOnError() {
        try {
            keyValueService.getRange(TEST_NONEXISTING_TABLE, RangeRequest.all(), Long.MAX_VALUE).hasNext();
            Assert.fail(""getRange must throw on failure"");
        } catch (RuntimeException e) {
            // Expected
        }
    }
",non-flaky,5
159619,liquibase_liquibase,MariaDBIntegrationTest.testRunChangeLog,"    @Test
    public void testRunChangeLog() throws Exception {
        super.testRunChangeLog();    //To change body of overridden methods use File | Settings | File Templates.
    }
",non-flaky,5
159669,liquibase_liquibase,AbstractMssqlIntegrationTest.smartDataLoad,"    @Test
    public void smartDataLoad() throws Exception {
        assumeNotNull(this.getDatabase());
        Liquibase liquibase = createLiquibase(""changelogs/common/smartDataLoad.changelog.xml"");
        clearDatabase();
        try {
            liquibase.update(this.contexts);
        } catch (ValidationFailedException e) {
            e.printDescriptiveError(System.out);
            throw e;
        }
        try {
            liquibase.rollback(new Date(0), this.contexts);
        } catch (ValidationFailedException e) {
            e.printDescriptiveError(System.out);
            throw e;
        }
    }
",non-flaky,5
59570,looly_hutool,CronPatternTest.patternTest,"	@Test
	public void patternTest() {
		CronPattern pattern = new CronPattern(""* 0 4 * * ?"");
		assertMatch(pattern, ""2017-02-09 04:00:00"");
		assertMatch(pattern, ""2017-02-19 04:00:33"");

		// 6ä½Quartzé£æ ¼è¡¨è¾¾å¼
		pattern = new CronPattern(""* 0 4 * * ?"");
		assertMatch(pattern, ""2017-02-09 04:00:00"");
		assertMatch(pattern, ""2017-02-19 04:00:33"");
	}
",non-flaky,5
295,apache_hadoop,TestWrites.testOOOWrites,"  @Test
  public void testOOOWrites() throws IOException, InterruptedException {
    NfsConfiguration config = new NfsConfiguration();
    MiniDFSCluster cluster = null;
    RpcProgramNfs3 nfsd;
    final int bufSize = 32;
    final int numOOO = 3;
    SecurityHandler securityHandler = Mockito.mock(SecurityHandler.class);
    Mockito.when(securityHandler.getUser()).thenReturn(
        System.getProperty(""user.name""));
    String currentUser = System.getProperty(""user.name"");
    config.set(
        DefaultImpersonationProvider.getTestProvider().
            getProxySuperuserGroupConfKey(currentUser),
        ""*"");
    config.set(
        DefaultImpersonationProvider.getTestProvider().
            getProxySuperuserIpConfKey(currentUser),
        ""*"");
    ProxyUsers.refreshSuperUserGroupsConfiguration(config);
    // Use emphral port in case tests are running in parallel
    config.setInt(""nfs3.mountd.port"", 0);
    config.setInt(""nfs3.server.port"", 0);

    try {
      cluster = new MiniDFSCluster.Builder(config).numDataNodes(1).build();
      cluster.waitActive();

      Nfs3 nfs3 = new Nfs3(config);
      nfs3.startServiceInternal(false);
      nfsd = (RpcProgramNfs3) nfs3.getRpcProgram();

      DFSClient dfsClient = new DFSClient(DFSUtilClient.getNNAddress(config),
          config);
      int namenodeId = Nfs3Utils.getNamenodeId(config);
      HdfsFileStatus status = dfsClient.getFileInfo(""/"");
      FileHandle rootHandle = new FileHandle(status.getFileId(), namenodeId);

      CREATE3Request createReq = new CREATE3Request(rootHandle,
          ""out-of-order-write"" + System.currentTimeMillis(),
          Nfs3Constant.CREATE_UNCHECKED, new SetAttr3(), 0);
      XDR createXdr = new XDR();
      createReq.serialize(createXdr);
      CREATE3Response createRsp = nfsd.create(createXdr.asReadOnlyWrap(),
          securityHandler, new InetSocketAddress(""localhost"", 1234));
      FileHandle handle = createRsp.getObjHandle();

      byte[][] oooBuf = new byte[numOOO][bufSize];
      for (int i = 0; i < numOOO; i++) {
        Arrays.fill(oooBuf[i], (byte) i);
      }

      for (int i = 0; i < numOOO; i++) {
        final long offset = (numOOO - 1 - i) * bufSize;
        WRITE3Request writeReq = new WRITE3Request(handle, offset, bufSize,
            WriteStableHow.UNSTABLE, ByteBuffer.wrap(oooBuf[i]));
        XDR writeXdr = new XDR();
        writeReq.serialize(writeXdr);
        nfsd.write(writeXdr.asReadOnlyWrap(), null, 1, securityHandler,
            new InetSocketAddress(""localhost"", 1234));
      }

      waitWrite(nfsd, handle, 60000);
      READ3Request readReq = new READ3Request(handle, bufSize, bufSize);
      XDR readXdr = new XDR();
      readReq.serialize(readXdr);
      READ3Response readRsp = nfsd.read(readXdr.asReadOnlyWrap(),
          securityHandler, new InetSocketAddress(""localhost"", config.getInt(
              NfsConfigKeys.DFS_NFS_SERVER_PORT_KEY,
              NfsConfigKeys.DFS_NFS_SERVER_PORT_DEFAULT)));
      assertTrue(Arrays.equals(oooBuf[1], readRsp.getData().array()));
    } finally {
      if (cluster != null) {
        cluster.shutdown();
      }
    }
  }
",non-flaky,5
134003,CorfuDB_CorfuDB,RotateLinkFailureIT.rotateLinkFailureTest,"    @Test(timeout = 600000)
    public void rotateLinkFailureTest() {
        workflow(wf -> {
            wf.deploy();

            CorfuCluster corfuCluster = wf.getUniverse()
                    .getGroup(wf.getFixture().data().getGroupParamByIndex(0).getName());

            CorfuClient corfuClient = corfuCluster.getLocalCorfuClient();

            CorfuTable<String, String> table = corfuClient
                    .createDefaultCorfuTable(DEFAULT_STREAM_NAME);

            for (int i = 0; i < DEFAULT_TABLE_ITER; i++) {
                table.put(String.valueOf(i), String.valueOf(i));
            }

            //Should rotate link failures among cluster
            CorfuServer server0 = corfuCluster.getServerByIndex(0);
            CorfuServer server1 = corfuCluster.getServerByIndex(1);
            CorfuServer server2 = corfuCluster.getServerByIndex(2);

            log.info(""1st link failure rotation, disconnect between server0 and server1. "" +
                            ""Current layout: {}"", corfuClient.getLayout()
            );

            server0.disconnect(Collections.singletonList(server1));

            waitForLayoutChange(
                    layout -> {
                        List<String> expected = Collections.singletonList(server1.getEndpoint());
                        return layout.getUnresponsiveServers().equals(expected);
                    },
                    corfuClient
            );

            ScenarioUtils.waitForClusterUp(table, ""0"");

            Layout latestLayout = corfuClient.getLayout();

            log.info(""Verify data path working fine"");
            for (int i = 0; i < DEFAULT_TABLE_ITER; i++) {
                assertThat(table.get(String.valueOf(i))).isEqualTo(String.valueOf(i));
            }

            log.info(""2nd link failure rotation, disconnect between server1 and server2 "" +
                    ""and heal previous link failure between server0 and server1"");
            server1.disconnect(Collections.singletonList(server2));
            server0.reconnect(Collections.singletonList(server1));

            log.info(""Wait for some time to ensure cluster stabilizes Server1 should stay "" +
                    ""in unresponsive set, no layout change"");
            waitUninterruptibly(Duration.ofSeconds(30));
            assertThat(corfuClient.getLayout()).isEqualTo(latestLayout);

            ScenarioUtils.waitForClusterUp(table, ""0"");
            log.info(""Verify data path working fine"");
            for (int i = 0; i < DEFAULT_TABLE_ITER; i++) {
                assertThat(table.get(String.valueOf(i))).isEqualTo(String.valueOf(i));
            }

            log.info(""3rd link failure rotation, disconnect between server2 and server0 "" +
                    ""and heal previous link failure between server1 and server2"");
            server2.disconnect(Collections.singletonList(server0));
            server1.reconnect(Collections.singletonList(server2));

            log.info(""Server0 and server2 has same number of link failure ie. 1, "" +
                    ""the one with larger endpoint should be marked as unresponsive."");
            waitForLayoutChange(
                    layout -> {
                        List<String> expected = Collections.singletonList(server2.getEndpoint());
                        return layout.getUnresponsiveServers().equals(expected);
                    },
                    corfuClient
            );

            log.info(""Verify data path working fine"");
            waitUninterruptibly(Duration.ofSeconds(20));
            for (int i = 0; i < DEFAULT_TABLE_ITER; i++) {
                assertThat(table.get(String.valueOf(i))).isEqualTo(String.valueOf(i));
            }

            log.info(""4th link failure rotation, reverse the rotating direction, "" +
                    ""disconnect between server1 and server2 "" +
                    ""and heal previous link failure between server1 and server2"");
            server1.disconnect(Collections.singletonList(server2));
            server2.reconnect(Collections.singletonList(server0));

            log.info(""Wait for some time to ensure cluster stabilizes "" +
                    ""Server1 should stay in unresponsive set, no layout change"");
            waitUninterruptibly(Duration.ofSeconds(30));

            log.info(""Verify data path working fine"");
            for (int i = 0; i < DEFAULT_TABLE_ITER; i++) {
                assertThat(table.get(String.valueOf(i))).isEqualTo(String.valueOf(i));
            }

            log.info(""Finally stop rotation and heal all link failures."");
            server1.reconnect(Collections.singletonList(server2));
            waitForUnresponsiveServersChange(size -> size == 0, corfuClient);

            final Duration sleepDuration = Duration.ofSeconds(1);
            log.info(""Verify cluster status is STABLE"");
            ClusterStatusReport clusterStatusReport = corfuClient
                    .getManagementView()
                    .getClusterStatus();

            while (!clusterStatusReport.getClusterStatus().equals(ClusterStatus.STABLE)) {
                clusterStatusReport = corfuClient.getManagementView().getClusterStatus();
                Sleep.sleepUninterruptibly(sleepDuration);
            }
            assertThat(clusterStatusReport.getClusterStatus()).isEqualTo(ClusterStatus.STABLE);

            log.info(""Verify data path working fine"");
            for (int i = 0; i < DEFAULT_TABLE_ITER; i++) {
                assertThat(table.get(String.valueOf(i))).isEqualTo(String.valueOf(i));
            }

            corfuClient.shutdown();
        });
    }
",non-flaky,5
78284,apache_beam,TimerInternalsTest.testCoderIsSerializableWithWellKnownCoderType,"  @Test
  public void testCoderIsSerializableWithWellKnownCoderType() {
    CoderProperties.coderSerializable(TimerDataCoder.of(GlobalWindow.Coder.INSTANCE));
  }
",non-flaky,5
20921,NationalSecurityAgency_timely,WriteTimelyPluginTest.testWrite,"    @Test
    public void testWrite() throws Exception {
        Thread t = new Thread(server);
        t.start();
        setupPlugin();
        while (!server.ready()) {
            Thread.sleep(1000);
        }
        Assert.assertEquals(0, plugin.write(createMetric()));
        Thread.sleep(100);
        Assert.assertTrue(server.messageReceived());
        plugin.shutdown();
        server.shutdown();
        t.join();
    }
",non-flaky,5
98208,apache_jackrabbit,RepositoryServiceImplIT.testGetAgainstTrustedCertServer,"    @Test
    public void testGetAgainstTrustedCertServer() throws RepositoryException, ClientProtocolException, IOException {
        assumeTrue(""Cannot connect to http://www.apache.org"", canConnectTo(""http://www.apache.org""));
        RepositoryServiceImpl repositoryServiceImpl = RepositoryServiceImplTest.getRepositoryService(""https://jackrabbit.apache.org/jcr"", ConnectionOptions.builder().build());
        HttpClient client = repositoryServiceImpl.getClient(null);
        HttpGet get = new HttpGet(""https://jackrabbit.apache.org/jcr/index.html"");
        String content = client.execute(get, new BasicResponseHandler());
        assertFalse(content.isEmpty());
    }
",non-flaky,5
355,ReactiveX_RxJava,OperatorRetryTest.testRetryWithBackpressure,"@Test
public void testRetryWithBackpressure() throws InterruptedException {
    final int NUM_RETRIES = RxRingBuffer.SIZE * 2;
    for (int i = 0; i < 400; i++) {
        @SuppressWarnings(""unchecked"")
        Observer<String> observer = mock(Observer.class);
        Observable<String> origin = Observable.create(new FuncWithErrors(NUM_RETRIES));
        TestSubscriber<String> ts = new TestSubscriber<String>(observer);
        origin.retry().observeOn(Schedulers.computation()).unsafeSubscribe(ts);
        ts.awaitTerminalEvent(5, TimeUnit.SECONDS);
        InOrder inOrder = inOrder(observer);
        verify(observer, never()).onError(any(Throwable.class));
        inOrder.verify(observer, times(NUM_RETRIES + 1)).onNext(""beginningEveryTime"");
        inOrder.verify(observer, times(1)).onNext(""onSuccessOnly"");
        inOrder.verify(observer, times(1)).onCompleted();
        inOrder.verifyNoMoreInteractions();
    }
}",concurrency,1
43046,trinodb_trino,BaseConnectorTest.testExactPredicate,"    @Test
    public void testExactPredicate()
    {
        assertQueryReturnsEmptyResult(""SELECT * FROM orders WHERE orderkey = 10"");

        // filtered column is selected
        assertQuery(""SELECT custkey, orderkey FROM orders WHERE orderkey = 32"", ""VALUES (1301, 32)"");

        // filtered column is not selected
        assertQuery(""SELECT custkey FROM orders WHERE orderkey = 32"", ""VALUES (1301)"");
    }
",non-flaky,5
84608,apache_zookeeper,ExportJvmInfoTest.exportInfo,"    @Test
    public void exportInfo() throws Exception {
        runTest(true);
    }
",non-flaky,5
53215,cloudfoundry_uaa,ScimGroupEndpointsIntegrationTests.deleteNonExistentGroupFailsCorrectly,"    @Test
    public void deleteNonExistentGroupFailsCorrectly() {
        @SuppressWarnings(""unchecked"")
        Map<String, Object> g = deleteResource(groupEndpoint, DELETE_ME).getBody();
        assertTrue(g.containsKey(""error""));
        assertEquals(""scim_resource_not_found"", g.get(""error""));
    }
",non-flaky,5
160407,ConsenSys_teku,ChainDataProviderTest.getCommitteesFromState_shouldNotRequireFilters,"  @Test
  public void getCommitteesFromState_shouldNotRequireFilters() {
    final tech.pegasys.teku.spec.datastructures.state.beaconstate.BeaconState internalState =
        data.randomBeaconState(64);
    final ChainDataProvider provider =
        new ChainDataProvider(spec, recentChainData, combinedChainDataClient);

    assertThat(
            provider
                .getCommitteesFromState(
                    internalState, Optional.empty(), Optional.empty(), Optional.empty())
                .size())
        .isEqualTo(specConfig.getSlotsPerEpoch());
  }
",non-flaky,5
104698,apache_pinot,LLCRealtimeClusterIntegrationTest.testReload,"  @Test
  public void testReload()
      throws Exception {
    testReload(false);
  }
",non-flaky,5
122603,vespa-engine_vespa,FileContentCacheTest.get,"    @Test
    public void get() {
        when(unixPath.readBytes()).thenReturn(content);
        assertArrayEquals(content, cache.get(Instant.ofEpochMilli(0)));
        verify(unixPath, times(1)).readBytes();
        verifyNoMoreInteractions(unixPath);

        // cache hit
        assertArrayEquals(content, cache.get(Instant.ofEpochMilli(0)));
        verify(unixPath, times(1)).readBytes();
        verifyNoMoreInteractions(unixPath);

        // cache miss
        when(unixPath.readBytes()).thenReturn(newContent);
        assertArrayEquals(newContent, cache.get(Instant.ofEpochMilli(1)));
        verify(unixPath, times(1 + 1)).readBytes();
        verifyNoMoreInteractions(unixPath);

        // cache hit both at times 0 and 1
        assertArrayEquals(newContent, cache.get(Instant.ofEpochMilli(0)));
        verify(unixPath, times(1 + 1)).readBytes();
        verifyNoMoreInteractions(unixPath);
        assertArrayEquals(newContent, cache.get(Instant.ofEpochMilli(1)));
        verify(unixPath, times(1 + 1)).readBytes();
        verifyNoMoreInteractions(unixPath);
    }
",non-flaky,5
113722,salesforce_reactive-grpc,ClientThreadIntegrationTest.manyToMany,"    @Test
    public void manyToMany() {
        ReactorGreeterGrpc.ReactorGreeterStub stub = ReactorGreeterGrpc.newReactorStub(channel);
        Flux<HelloRequest> req = Flux.just(
                HelloRequest.newBuilder().setName(""a"").build(),
                HelloRequest.newBuilder().setName(""b"").build(),
                HelloRequest.newBuilder().setName(""c"").build(),
                HelloRequest.newBuilder().setName(""d"").build(),
                HelloRequest.newBuilder().setName(""e"").build());

        Flux<HelloResponse> resp = req.compose(stub::sayHelloBothStream);

        AtomicReference<String> clientThreadName = new AtomicReference<>();

        StepVerifier
                .create(resp
                        .map(HelloResponse::getMessage)
                        .doOnNext(x -> clientThreadName.set(Thread.currentThread().getName())))
                .expectNext(""Hello a and b"", ""Hello c and d"", ""Hello e"")
                .verifyComplete();

        assertThat(clientThreadName.get()).isEqualTo(""TheGrpcClient"");
        assertThat(serverThreadName.get()).isEqualTo(""TheGrpcServer"");
    }
",non-flaky,5
160427,ConsenSys_teku,ValidatorDataProviderTest.submitSignedBlock_shouldReturn500ForInternalError,"  @TestTemplate
  public void submitSignedBlock_shouldReturn500ForInternalError()
      throws ExecutionException, InterruptedException {
    final SignedBeaconBlock internalSignedBeaconBlock =
        dataStructureUtil.randomSignedBeaconBlock(1);
    final tech.pegasys.teku.api.schema.SignedBeaconBlock signedBeaconBlock =
        tech.pegasys.teku.api.schema.SignedBeaconBlock.create(internalSignedBeaconBlock);

    final SafeFuture<SendSignedBlockResult> failImportResult =
        completedFuture(SendSignedBlockResult.rejected(FailureReason.INTERNAL_ERROR.name()));

    when(validatorApiChannel.sendSignedBlock(any())).thenReturn(failImportResult);

    final SafeFuture<ValidatorBlockResult> validatorBlockResultSafeFuture =
        provider.submitSignedBlock(signedBeaconBlock);

    assertThat(validatorBlockResultSafeFuture.get().getResponseCode()).isEqualTo(500);
  }
",non-flaky,5
118705,netty_netty,SmtpResponseDecoderTest.testDecodeOneLineResponseNoDetails,"    @Test
    public void testDecodeOneLineResponseNoDetails() {
        EmbeddedChannel channel = newChannel();
        assertTrue(channel.writeInbound(newBuffer(""250 \r\n"")));
        assertTrue(channel.finish());

        SmtpResponse response = channel.readInbound();
        assertEquals(250, response.code());
        List<CharSequence> sequences = response.details();
        assertEquals(0, sequences.size());
    }
",non-flaky,5
21166,swankjesse_dex,MethodTest.annotatedMethod,"        @TestAnno
        public void annotatedMethod(){}

",non-flaky,5
175766,GoogleCloudPlatform_google-cloud-eclipse,FlexDeployPreferencesPanelTest.testDefaultAppYamlPathSet,"  @Test
  public void testDefaultAppYamlPathSet() {
    FlexDeployPreferencesPanel panel = createPanel(true /* requireValues */);

    Text appYamlField = findAppYamlField(panel);
    assertEquals(""src/main/appengine/app.yaml"", appYamlField.getText());
    assertTrue(getAppYamlPathValidationStatus(panel).isOK());
  }
",non-flaky,5
104615,apache_pinot,NullHandlingIntegrationTest.testCountWithNullDescription,"  @Test
  public void testCountWithNullDescription()
      throws Exception {
    String query = ""SELECT count(*) FROM "" + getTableName() + "" where description IS NOT NULL"";
    testQuery(query, Collections.singletonList(query));
  }
",non-flaky,5
175824,GoogleCloudPlatform_google-cloud-eclipse,BucketNameValidatorTest.testValidation_emptyString,"  @Test
  public void testValidation_emptyString() {
    assertThat(validator.validate("""").getSeverity(), is(IStatus.OK));
  }
",non-flaky,5
26893,wildfly_wildfly,InMemoryNamingStoreTestCase.testBindAndLookupResolveResult,"    @Test
    public void testBindAndLookupResolveResult() throws Exception {
        final Name name = new CompositeName(""test"");
        final Reference reference = new Reference(Context.class.getName());
        nameStore.bind(name, reference, Context.class);
        final Object result = nameStore.lookup(new CompositeName(""test/value""));
        assertTrue(result instanceof ResolveResult);
    }
",non-flaky,5
162419,testcontainers_testcontainers-java,DockerfileTest.dockerfileBuilderWorks,"    @Test
    public void dockerfileBuilderWorks() {
        ImageFromDockerfile image = new ImageFromDockerfile()
                .withFileFromClasspath(""test.txt"", ""mappable-resource/test-resource.txt"")
                .withFileFromString(""folder/someFile.txt"", ""hello"")
                .withDockerfileFromBuilder(builder -> builder
                        .from(""alpine:3.2"")
                        .workDir(""/app"")
                        .add(""test.txt"", ""test file.txt"")
                        .run(""ls"", ""-la"", ""/app/test file.txt"")
                        .copy(""folder/someFile.txt"", ""/someFile.txt"")
                        .expose(80, 8080)
                        .cmd(""while true; do cat /someFile.txt | nc -l -p 80; done"")
                );

        verifyImage(image);
    }
",non-flaky,5
159620,liquibase_liquibase,MariaDBIntegrationTest.snapshot,"    @Test
    public void snapshot() throws Exception {
        if (getDatabase() == null) {
            return;
        }


        runCompleteChangeLog();
        DatabaseSnapshot snapshot = SnapshotGeneratorFactory.getInstance().createSnapshot(getDatabase().getDefaultSchema(), getDatabase(), new SnapshotControl(getDatabase()));
        System.out.println(snapshot);
    }
",non-flaky,5
53200,cloudfoundry_uaa,TotpMfaEndpointIntegrationTests.testDisplayIdentityZoneNameOnRegisterPage,"    @Test
    public void testDisplayIdentityZoneNameOnRegisterPage() {
        performLogin(username);
        assertEquals(zoneUrl + ""/login/mfa/register"", webDriver.getCurrentUrl());

        assertEquals(webDriver.findElement(By.id(""mfa-identity-zone"")).getText(), mfaZone.getName());
    }
",non-flaky,5
177965,aosp-mirror_platform_frameworks_support,FileProviderTest.testWriteMissingFile,"    @Test
    public void testWriteMissingFile() throws Exception {
        final File file = new File(mContext.getFilesDir(), TEST_FILE);
        final Uri uri = stageFileAndGetUri(file, null);

        try {
            assertContentsEquals(new byte[0], uri);
            fail(""Somehow read missing file?"");
        } catch(FileNotFoundException e) {
        }

        final OutputStream out = mResolver.openOutputStream(uri);
        try {
            out.write(TEST_DATA_ALT);
        } finally {
            closeQuietly(out);
        }

        assertContentsEquals(TEST_DATA_ALT, uri);
    }
",non-flaky,5
97686,vojtechhabarta_typescript-generator,ModelCompilerUtilsTest.testSplitIdentifierIntoWords,"    @Test
    public void testSplitIdentifierIntoWords() {
        Assert.assertEquals(""Red"", splitIdentifierIntoWords(""Red""));
        Assert.assertEquals(""ATYPE"", splitIdentifierIntoWords(""ATYPE""));
        Assert.assertEquals(""camel Case Type"", splitIdentifierIntoWords(""camelCaseType""));
        Assert.assertEquals(""Pascal Case Type"", splitIdentifierIntoWords(""PascalCaseType""));
        Assert.assertEquals(""UPPER CASE TYPE"", splitIdentifierIntoWords(""UPPER_CASE_TYPE""));
        Assert.assertEquals(""XML Http Request"", splitIdentifierIntoWords(""XMLHttpRequest""));
        Assert.assertEquals(""HÃÄKY A ÄÃRKY"", splitIdentifierIntoWords(""HÃÄKY_A_ÄÃRKY""));
        Assert.assertEquals(""HÃ¡Äky A ÄÃ¡rky"", splitIdentifierIntoWords(""HÃ¡ÄkyAÄÃ¡rky""));
        Assert.assertEquals(""String 2 Json"", splitIdentifierIntoWords(""String2Json""));
        Assert.assertEquals(""string 2 json"", splitIdentifierIntoWords(""string2json""));
        Assert.assertEquals(""version 42 final"", splitIdentifierIntoWords(""version42final""));
    }
",non-flaky,5
106629,Alluxio_alluxio,AlluxioJniFuseFileSystemTest.renameOldNotExist,"  @Test
  public void renameOldNotExist() throws Exception {
    AlluxioURI oldPath = BASE_EXPECTED_URI.join(""/old"");
    AlluxioURI newPath = BASE_EXPECTED_URI.join(""/new"");
    doThrow(new FileDoesNotExistException(""File /old does not exist""))
        .when(mFileSystem).rename(oldPath, newPath);
    assertEquals(-ErrorCodes.ENOENT(), mFuseFs.rename(""/old"", ""/new""));
  }
",non-flaky,5
26866,wildfly_wildfly,NamingEventCoordinatorTestCase.testFireOneLevelEvent,"    @Test
    public void testFireOneLevelEvent() throws Exception {
        final NamingEventCoordinator coordinator = new NamingEventCoordinator();

        final CollectingListener objectListener = new CollectingListener(0);
        coordinator.addListener(""test/path"", EventContext.OBJECT_SCOPE, objectListener);
        final CollectingListener subtreeListener = new CollectingListener(0);
        coordinator.addListener(""test"", EventContext.SUBTREE_SCOPE, subtreeListener);
        final CollectingListener oneLevelListener = new CollectingListener(1);
        coordinator.addListener(""test"", EventContext.ONELEVEL_SCOPE, oneLevelListener);

        coordinator.fireEvent(context, new CompositeName(""test/path""), null, null, NamingEvent.OBJECT_ADDED, ""bind"", EventContext.ONELEVEL_SCOPE);

        oneLevelListener.latch.await(1, TimeUnit.SECONDS);

        assertTrue(objectListener.capturedEvents.isEmpty());
        assertTrue(subtreeListener.capturedEvents.isEmpty());
        assertEquals(1, oneLevelListener.capturedEvents.size());
    }
",non-flaky,5
84635,apache_zookeeper,GetAllChildrenNumberTest.tearDown,"    @AfterEach
    public void tearDown() throws Exception {
        super.tearDown();

        zk.close();
    }
",non-flaky,5
162691,OpenAPITools_openapi-generator,TypeHolderDefaultTest.boolItemTest,"    @Test
    public void boolItemTest() {
        // TODO: test boolItem
    }
",non-flaky,5
112089,apache_shardingsphere-elasticjob,AverageAllocationJobShardingStrategyTest.shardingForServersMoreThanShardingCount,"    @Test
    public void shardingForServersMoreThanShardingCount() {
        Map<JobInstance, List<Integer>> expected = new LinkedHashMap<>(3, 1);
        expected.put(new JobInstance(""host0@-@0""), Collections.singletonList(0));
        expected.put(new JobInstance(""host1@-@0""), Collections.singletonList(1));
        expected.put(new JobInstance(""host2@-@0""), Collections.<Integer>emptyList());
        assertThat(jobShardingStrategy.sharding(Arrays.asList(new JobInstance(""host0@-@0""), new JobInstance(""host1@-@0""), new JobInstance(""host2@-@0"")), ""test_job"", 2), is(expected));
    }
",non-flaky,5
113762,salesforce_reactive-grpc,GrpcRetryTest.manyToOneRetryWhen,"    @Test
    public void manyToOneRetryWhen() {
        Mono<Integer> test = newThreeErrorFlux()
                .<Mono<Integer>>as(GrpcRetry.ManyToOne.retryWhen(Flux::single, Retry.any().retryMax(4)));

        StepVerifier.create(test)
                .expectNext(0)
                .expectComplete()
                .verify(Duration.ofSeconds(1));
    }
",non-flaky,5
26791,MundaneImmortal_pair-distribution-app,DayPairsHelperTest.testAdaptPairsWeightForNewDevelopers,"	@Test
	public void testAdaptPairsWeightForNewDevelopers() {

		Developer developer1 = new Developer(""dev1"");
		developer1.setNew(true);
		Developer developer2 = new Developer(""dev2"");
		developer2.setNew(true);
		Developer developer3 = new Developer(""dev3"");
		Developer developer4 = new Developer(""dev4"");
		List<Developer> devs = Arrays.asList(developer1, developer2, developer3, developer4);
		PairCombinations pairs = new DevPairCombinations(getPairsListFromDevs(devs));

		Map<Pair, Integer> pairsWeight = subject.buildPairsWeightFromPastPairing(pairs, devs);
		subject.adaptPairsWeight(pairsWeight, devs);

		assertThat(pairsWeight.get(new Pair(Arrays.asList(new Developer(""dev1""), new Developer(""dev2"")))), is(102));
		assertThat(pairsWeight.get(new Pair(Arrays.asList(new Developer(""dev1""), new Developer(""dev3"")))), is(0));
		assertThat(pairsWeight.get(new Pair(Arrays.asList(new Developer(""dev1""), new Developer(""dev4"")))), is(1));
		assertThat(pairsWeight.get(new Pair(Arrays.asList(new Developer(""dev2""), new Developer(""dev3"")))), is(1));
		assertThat(pairsWeight.get(new Pair(Arrays.asList(new Developer(""dev2""), new Developer(""dev4"")))), is(0));
		assertThat(pairsWeight.get(new Pair(Arrays.asList(new Developer(""dev3""), new Developer(""dev4"")))), is(2));
	}
",non-flaky,5
53193,cloudfoundry_uaa,TotpMfaEndpointIntegrationTests.testQRCodeScreen,"    @Test
    public void testQRCodeScreen() throws Exception {
        performLogin(username);
        assertEquals(zoneUrl + ""/login/mfa/register"", webDriver.getCurrentUrl());

        String imageSrc = webDriver.findElement(By.id(""qr"")).getAttribute(""src"");

        String secretKey = getSecretFromQrImageString(imageSrc);

        webDriver.findElement(By.id(""Next"")).click();
        verifyCodeOnRegistration(secretKey, ""/"");
    }
",non-flaky,5
20994,NationalSecurityAgency_timely,DownsampleTest.simple,"    @Test
    public void simple() {
        Downsample dsample = new Downsample(10, 30, 1, new Avg());
        for (int i = 10; i < 30; i++) {
            dsample.add(i, i - 10);
        }
        int i = 0;
        for (Sample sample : dsample) {
            assertEquals(10 + i, sample.timestamp);
            assertTrue(sample.timestamp < 30);
            assertEquals(i, (int) sample.value);
            i++;
        }
        assertEquals(20, i);
        dsample = new Downsample(10, 100, 7, new Sum());
        for (int j = 0; j < 5; j++) {
            for (int k = 10; k < 100; k++) {
                dsample.add(k, j + 0.);
            }
        }
        i = 0;
        for (Sample sample : dsample) {
            assertEquals((1 + 2 + 3 + 4) * Math.min(7, (100 - (10 + i * 7))), sample.value, 0.0D);
            assertEquals(10 + i * 7, sample.timestamp);
            i++;
        }
        assertEquals((100 - 10) / 7 + 1, i);
        dsample = new Downsample(10, 30, 10, new Avg());
        for (int j = 10; j < 30; j++) {
            for (int k = 0; k < 10; k++) {
                dsample.add(j, k + 0.);
            }
        }
        for (int j = 0; j < 100; j++) {
            dsample.add(15, 0);
        }
        i = 0;
        for (Sample sample : dsample) {
            if (i == 0) {
                assertEquals(2.25, sample.value, 0.0D);
            } else {
                assertEquals(4.5, sample.value, 0.0D);
            }
            assertEquals(10 * i + 10, sample.timestamp);
            i++;
        }
        assertEquals(2, i);
    }
",non-flaky,5
175810,GoogleCloudPlatform_google-cloud-eclipse,SharedImagesTest.testCreateRefreshIcon,"  @Test
  public void testCreateRefreshIcon() {
    assertNotNull(SharedImages.REFRESH_IMAGE_DESCRIPTOR.createImage(shell.getDisplay()));
  }
",non-flaky,5
179436,abel533_Mapper,FieldHelperTest.testComplex,"    @Test
    public void testComplex(){
        List<EntityField> fieldList = FieldHelper.getFields(Admin.class);
        Assert.assertEquals(2, fieldList.size());
        Assert.assertEquals(""admin"", fieldList.get(0).getName());
        Assert.assertEquals(""user"", fieldList.get(1).getName());
    }
",non-flaky,5
332,apache_hadoop,TestViewfsWithNfs3.testNfsWriteNN2,"  @Test (timeout = 60000)
  public void testNfsWriteNN2() throws Exception {
    HdfsFileStatus status = nn2.getRpcServer().getFileInfo(""/user2/write2"");
    int namenodeId = Nfs3Utils.getNamenodeId(config, hdfs2.getUri());
    testNfsWriteResponse(status.getFileId(), namenodeId);
  }
",non-flaky,5
72,strapdata_elassandra,testTokenExpiry,"@Test
public void testTokenExpiry() throws Exception {
    ClockMock clock = ClockMock.frozen();
    TokenService tokenService = createTokenService(tokenServiceEnabledSettings, clock);
    Authentication authentication = new Authentication(new User(""joe"", ""admin""), new RealmRef(""native_realm"", ""native"", ""node1""), null);
    PlainActionFuture<Tuple<UserToken, String>> tokenFuture = new PlainActionFuture<>();
    tokenService.createUserToken(authentication, authentication, tokenFuture, Collections.emptyMap(), true);
    final UserToken token = tokenFuture.get().v1();
    mockGetTokenFromId(token);
    mockCheckTokenInvalidationFromId(token);
    authentication = token.getAuthentication();
    ThreadContext requestContext = new ThreadContext(Settings.EMPTY);
    storeTokenHeader(requestContext, tokenService.getUserTokenString(token));
    try (ThreadContext.StoredContext ignore = requestContext.newStoredContext(true)) {
        PlainActionFuture<UserToken> future = new PlainActionFuture<>();
        tokenService.getAndValidateToken(requestContext, future);
        assertAuthenticationEquals(authentication, future.get().getAuthentication());
    }
    final TimeValue defaultExpiration = TokenService.TOKEN_EXPIRATION.get(Settings.EMPTY);
    final int fastForwardAmount = randomIntBetween(1, Math.toIntExact(defaultExpiration.getSeconds()) - 5);
    try (ThreadContext.StoredContext ignore = requestContext.newStoredContext(true)) {
        clock.fastForwardSeconds(Math.toIntExact(defaultExpiration.getSeconds()) - fastForwardAmount);
        clock.rewind(TimeValue.timeValueNanos(clock.instant().getNano()));
        PlainActionFuture<UserToken> future = new PlainActionFuture<>();
        tokenService.getAndValidateToken(requestContext, future);
        assertAuthenticationEquals(authentication, future.get().getAuthentication());
    }
    assertSettingDeprecationsAndWarnings(new Setting[] { TokenService.BWC_ENABLED });
}",time,2
106639,Alluxio_alluxio,AlluxioFuseFileSystemTest.chownWithoutValidGid,"  @Test
  public void chownWithoutValidGid() throws Exception {
    long uid = AlluxioFuseUtils.getUid(System.getProperty(""user.name""));
    long gid = AlluxioFuseFileSystem.ID_NOT_SET_VALUE;
    mFuseFs.chown(""/foo/bar"", uid, gid);
    String userName = System.getProperty(""user.name"");
    String groupName = AlluxioFuseUtils.getGroupName(userName);
    AlluxioURI expectedPath = BASE_EXPECTED_URI.join(""/foo/bar"");
    SetAttributePOptions options =
        SetAttributePOptions.newBuilder().setGroup(groupName).setOwner(userName).build();
    verify(mFileSystem).setAttribute(expectedPath, options);

    gid = AlluxioFuseFileSystem.ID_NOT_SET_VALUE_UNSIGNED;
    mFuseFs.chown(""/foo/bar"", uid, gid);
    verify(mFileSystem, times(2)).setAttribute(expectedPath, options);
  }
",non-flaky,5
113977,apache_struts,NamedVariablePatternMatcherTest.testMatch,"    @Test
    public void testMatch() {
        NamedVariablePatternMatcher matcher = new NamedVariablePatternMatcher();

        Map<String, String> vars = new HashMap<>();
        CompiledPattern pattern = new CompiledPattern(Pattern.compile(""foo([^/]+)""), Arrays.asList(""bar""));

        assertTrue(matcher.match(vars, ""foobaz"", pattern));
        assertEquals(""baz"", vars.get(""bar""));
    }
",non-flaky,5
60885,apache_druid,DerivativeDataSourceMetadataTest.testEmptyBaseDataSource,"  @Test
  public void testEmptyBaseDataSource()
  {
    expectedException.expect(CoreMatchers.instanceOf(IllegalArgumentException.class));
    expectedException.expectMessage(
        ""baseDataSource cannot be null or empty. Please provide a baseDataSource.""
    );
    String baseDataSource = """";
    Set<String> dims = Sets.newHashSet(""dim1"", ""dim2"", ""dim3"");
    Set<String> metrics = Sets.newHashSet(""cost"");
    DerivativeDataSourceMetadata metadata = new DerivativeDataSourceMetadata(baseDataSource, dims, metrics);
  }
",non-flaky,5
162454,testcontainers_testcontainers-java,KeyValuesStatementTest.multilineTest,"    @Test
    public void multilineTest() throws Exception {
        ImmutableMap<String, String> pairs = ImmutableMap.<String, String>builder()
                .put(""line1"", ""1"")
                .put(""line2"", ""2"")
                .put(""line3"", ""3"")
                .build();

        assertStatement(new KeyValuesStatement(""TEST"", pairs));
    }
",non-flaky,5
33707,alibaba_fastjson,JSONScannerTest.checkTime13,"  @Test
  public void checkTime13() throws Throwable {

    // Arrange
    JSONScanner objectUnderTest = ((JSONScanner)Reflector.getInstance(""com.alibaba.fastjson.parser.JSONScanner""));
    objectUnderTest.hasSpecial = false;
    objectUnderTest.token = 0;
    objectUnderTest.locale = null;
    objectUnderTest.np = 0;
    objectUnderTest.features = 0;
    Reflector.setField(objectUnderTest, ""text"", """");
    objectUnderTest.calendar = null;
    objectUnderTest.matchStat = 0;
    objectUnderTest.bp = 0;
    Reflector.setField(objectUnderTest, ""len"", 0);
    objectUnderTest.stringDefaultValue = """";
    objectUnderTest.pos = 0;
    objectUnderTest.sp = 0;
    objectUnderTest.sbuf = null;
    objectUnderTest.ch = '\u0000';
    objectUnderTest.timeZone = null;
    objectUnderTest.eofPos = 0;
    char h0 = '1';
    char h1 = '9';
    char m0 = '6';
    char m1 = '0';
    char s0 = '>';
    char s1 = '\u0430';

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkTime"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(objectUnderTest, h0, h1, m0, m1, s0, s1);

    // Assert result
    Assert.assertEquals(false, retval);

  }
",non-flaky,5
78316,apache_beam,ReduceFnRunnerTest.testProcessingTimeTimerDoesNotGc,"  @Test
  public void testProcessingTimeTimerDoesNotGc() throws Exception {
    WindowingStrategy<?, IntervalWindow> strategy =
        WindowingStrategy.of((WindowFn<?, IntervalWindow>) FixedWindows.of(Duration.millis(100)))
            .withTimestampCombiner(TimestampCombiner.EARLIEST)
            .withMode(AccumulationMode.ACCUMULATING_FIRED_PANES)
            .withAllowedLateness(Duration.ZERO)
            .withTrigger(
                Repeatedly.forever(
                    AfterProcessingTime.pastFirstElementInPane().plusDelayOf(Duration.millis(10))));

    ReduceFnTester<Integer, Integer, IntervalWindow> tester =
        ReduceFnTester.combining(strategy, Sum.ofIntegers(), VarIntCoder.of());

    tester.advanceProcessingTime(new Instant(5000));
    injectElement(tester, 2); // processing timer @ 5000 + 10; EOW timer @ 100
    injectElement(tester, 5);

    tester.advanceProcessingTime(new Instant(10000));

    tester.assertHasOnlyGlobalAndStateFor(new IntervalWindow(new Instant(0), new Instant(100)));

    assertThat(
        tester.extractOutput(),
        contains(
            isSingleWindowedValue(
                equalTo(7), 2, 0, 100, PaneInfo.createPane(true, false, Timing.EARLY, 0, 0))));
  }
",non-flaky,5
99785,apache_cassandra,MessagingServiceTest.testDoesntApplyBackPressureToBroadcastAddress,"    @Test
    public void testDoesntApplyBackPressureToBroadcastAddress() throws UnknownHostException
    {
        DatabaseDescriptor.setBackPressureEnabled(true);
        messagingService.applyBackPressure(Arrays.asList(InetAddressAndPort.getByName(""127.0.0.1"")), ONE_SECOND);
        assertFalse(MockBackPressureStrategy.applied);
    }
",non-flaky,5
84587,apache_zookeeper,ZNodeNameTest.testOrderWithExtraPrefixes,"    @Test
    public void testOrderWithExtraPrefixes() throws Exception {
        String[] names = {""r-1-3-2"", ""r-2-2-1"", ""r-3-1-3""};
        ZNodeName zname;

        final Collection<ZNodeName> nodeNames = Arrays.asList(names).stream()
            .map(name -> new ZNodeName(name)).sorted().collect(Collectors.toList());

        final Iterator<ZNodeName> it = nodeNames.iterator();

        zname = it.next();
        assertEquals(""r-2-2-1"", zname.getName());
        assertEquals(""r-2-2"", zname.getPrefix());
        assertEquals(Integer.valueOf(1), zname.getSequence().get());

        zname = it.next();
        assertEquals(""r-1-3-2"", zname.getName());
        assertEquals(""r-1-3"", zname.getPrefix());
        assertEquals(Integer.valueOf(2), zname.getSequence().get());

        zname = it.next();
        assertEquals(""r-3-1-3"", zname.getName());
        assertEquals(""r-3-1"", zname.getPrefix());
        assertEquals(Integer.valueOf(3), zname.getSequence().get());
    }
",non-flaky,5
118757,netty_netty,ByteBufUtilTest.testWriteUtf8InvalidOnlyTrailingSurrogate,"    @Test
    public void testWriteUtf8InvalidOnlyTrailingSurrogate() {
        String surrogateString = new StringBuilder(2)
                                .append('a')
                                .append('\uDC00')
                                .append('b')
                                .toString();
        ByteBuf buf = Unpooled.buffer(16);
        buf.writeBytes(surrogateString.getBytes(CharsetUtil.UTF_8));
        ByteBuf buf2 = Unpooled.buffer(16);
        ByteBufUtil.writeUtf8(buf2, surrogateString);

        assertEquals(buf, buf2);
        assertEquals(buf.readableBytes(), ByteBufUtil.utf8Bytes(surrogateString));

        buf.release();
        buf2.release();
    }
",non-flaky,5
177167,line_armeria,SamlServiceProviderTest.shouldRespondAuthnRequest_HttpPost,"    @Test
    public void shouldRespondAuthnRequest_HttpPost() throws Exception {
        final AggregatedHttpResponse resp = client.get(""/post"").aggregate().join();
        assertThat(resp.status()).isEqualTo(HttpStatus.OK);
        assertThat(resp.contentType()).isEqualTo(MediaType.HTML_UTF_8);

        final Document doc = Jsoup.parse(resp.contentUtf8());
        assertThat(doc.body().attr(""onLoad"")).isEqualTo(""document.forms[0].submit()"");

        // SAMLRequest will be posted to the IdP's SSO URL.
        final Element form = doc.body().child(0);
        assertThat(form.attr(""method"")).isEqualTo(""post"");
        assertThat(form.attr(""action"")).isEqualTo(""http://idp.example.com/saml/sso/post"");
        assertThat(form.child(0).attr(""name"")).isEqualTo(SAML_REQUEST);
        assertThat(form.child(1).attr(""name"")).isEqualTo(RELAY_STATE);
    }
",non-flaky,5
177193,line_armeria,BraveServiceIntegrationTest.notFound,"    @Test
    public void notFound() {
        throw new AssumptionViolatedException(
                ""Armeria yields 'get /*' as a span name for a non-existent mapping."");
    }
",non-flaky,5
59575,looly_hutool,CronPatternUtilTest.matchedDatesTest2,"	@Test
	public void matchedDatesTest2() {
		//æµè¯æ¯å°æ¶æ§è¡
		List<Date> matchedDates = CronPatternUtil.matchedDates(""0 0 */1 * * *"", DateUtil.parse(""2018-10-15 14:33:22""), 5, true);
		Assert.assertEquals(5, matchedDates.size());
		Assert.assertEquals(""2018-10-15 15:00:00"", matchedDates.get(0).toString());
		Assert.assertEquals(""2018-10-15 16:00:00"", matchedDates.get(1).toString());
		Assert.assertEquals(""2018-10-15 17:00:00"", matchedDates.get(2).toString());
		Assert.assertEquals(""2018-10-15 18:00:00"", matchedDates.get(3).toString());
		Assert.assertEquals(""2018-10-15 19:00:00"", matchedDates.get(4).toString());
	}
",non-flaky,5
271,ReactiveX_RxJava,TestSchedulers.testSchedulingWithDueTime,"@Test
public void testSchedulingWithDueTime() throws InterruptedException {
    final CountDownLatch latch = new CountDownLatch(5);
    final AtomicInteger counter = new AtomicInteger();
    long start = System.currentTimeMillis();
    Schedulers.threadPoolForComputation().schedule(null, new Func2<Scheduler, String, Subscription>() {
        @Override
        public Subscription call(Scheduler scheduler, String state) {
            System.out.println(""doing work"");
            latch.countDown();
            counter.incrementAndGet();
            if (latch.getCount() == 0) {
                return Subscriptions.empty();
            } else {
                return scheduler.schedule(state, this, new Date(System.currentTimeMillis() + 50));
            }
        }
    }, new Date(System.currentTimeMillis() + 100));
    if (!latch.await(3000, TimeUnit.MILLISECONDS)) {
        fail(""didn't execute ... timed out"");
    }
    long end = System.currentTimeMillis();
    assertEquals(5, counter.get());
    if ((end - start) < 250) {
        fail(""it should have taken over 250ms since each step was scheduled 50ms in the future"");
    }
}",concurrency,1
113734,salesforce_reactive-grpc,ConcurrentRequestIntegrationTest.fourKindsOfRequestAtOnce,"    @Test
    public void fourKindsOfRequestAtOnce() throws Exception {
        StepVerifier.setDefaultTimeout(Duration.ofSeconds(3));

        ReactorGreeterGrpc.ReactorGreeterStub stub = ReactorGreeterGrpc.newReactorStub(channel);

        // == MAKE REQUESTS ==
        // One to One
        Mono<HelloRequest> req1 = Mono.just(HelloRequest.newBuilder().setName(""reactorjava"").build());
        Mono<HelloResponse> resp1 = req1.compose(stub::sayHello);

        // One to Many
        Mono<HelloRequest> req2 = Mono.just(HelloRequest.newBuilder().setName(""reactorjava"").build());
        Flux<HelloResponse> resp2 = req2.as(stub::sayHelloRespStream);

        // Many to One
        Flux<HelloRequest> req3 = Flux.just(
                HelloRequest.newBuilder().setName(""a"").build(),
                HelloRequest.newBuilder().setName(""b"").build(),
                HelloRequest.newBuilder().setName(""c"").build());

        Mono<HelloResponse> resp3 = req3.as(stub::sayHelloReqStream);

        // Many to Many
        Flux<HelloRequest> req4 = Flux.just(
                HelloRequest.newBuilder().setName(""a"").build(),
                HelloRequest.newBuilder().setName(""b"").build(),
                HelloRequest.newBuilder().setName(""c"").build(),
                HelloRequest.newBuilder().setName(""d"").build(),
                HelloRequest.newBuilder().setName(""e"").build());

        Flux<HelloResponse> resp4 = req4.compose(stub::sayHelloBothStream);

        // == VERIFY RESPONSES ==
        ListeningExecutorService executorService = MoreExecutors.listeningDecorator(Executors.newCachedThreadPool());

        // Run all four verifications in parallel
        try {
            // One to One
            ListenableFuture<Boolean> oneToOne = executorService.submit(() -> {
                StepVerifier.create(resp1.map(HelloResponse::getMessage))
                        .expectNext(""Hello reactorjava"")
                        .verifyComplete();
                return true;
            });

            // One to Many
            ListenableFuture<Boolean> oneToMany = executorService.submit(() -> {
                StepVerifier.create(resp2.map(HelloResponse::getMessage))
                        .expectNext(""Hello reactorjava"", ""Hi reactorjava"", ""Greetings reactorjava"")
                        .verifyComplete();
                return true;
            });

            // Many to One
            ListenableFuture<Boolean> manyToOne = executorService.submit(() -> {
                StepVerifier.create(resp3.map(HelloResponse::getMessage))
                        .expectNext(""Hello a and b and c"")
                        .verifyComplete();
                return true;
            });

            // Many to Many
            ListenableFuture<Boolean> manyToMany = executorService.submit(() -> {
                StepVerifier.create(resp4.map(HelloResponse::getMessage))
                        .expectNext(""Hello a and b"", ""Hello c and d"", ""Hello e"")
                        .verifyComplete();
                return true;
            });

            ListenableFuture<List<Boolean>> allFutures = Futures.allAsList(Lists.newArrayList(oneToOne, oneToMany, manyToOne, manyToMany));
            // Block for response
            List<Boolean> results = allFutures.get(3, TimeUnit.SECONDS);
            assertThat(results).containsExactly(true, true, true, true);

        } finally {
            executorService.shutdown();
        }
    }
",non-flaky,5
98610,nutzam_nutz,El2Test.testIssue292,"    @Test
    public void testIssue292() {
        Context context = Lang.context();
        context.set(""a"", 123);
        context.set(""b"", 20);
        Object o = El.eval(context, ""a>b?a:b"");
        assertEquals(123, o);
    }
",non-flaky,5
159688,liquibase_liquibase,CreateDatabaseChangeLogLockTableExecuteTest.generate,"    @Test
    public void generate() throws Exception {
        this.statementUnderTest = new CreateDatabaseChangeLogLockTableStatement();

        assertCorrect(new String[]{""create table [databasechangeloglock] ("" +
                ""[id] int not null, "" +
                ""[locked] boolean not null, "" +
                ""[lockgranted] datetime, "" +
                ""[lockedby] text, "" +
                ""constraint [pk_databasechangeloglock] primary key ([id]))""}, SQLiteDatabase.class);

        assertCorrect(new String[]{""create table [databasechangeloglock] ("" +
                ""[id] int not null, "" +
                ""[locked] bit not null, "" +
                ""[lockgranted] datetime null, "" +
                ""[lockedby] varchar(255) null, "" +
                ""constraint [pk_databasechangeloglock] primary key ([id]))""}, SybaseDatabase.class);

        assertCorrect(new String[]{""create table [databasechangeloglock] ("" +
                ""[id] int not null, "" +
                ""[locked] bit not null, "" +
                ""[lockgranted] datetime null, "" +
                ""[lockedby] varchar(255) null, "" +
                ""constraint [pk_databasechangeloglock] primary key ([id]))""}, SybaseASADatabase.class);

        assertCorrect(new String[]{""create table [databasechangeloglock] ("" +
                ""[id] int not null, "" +
                ""[locked] boolean not null, "" +
                ""[lockgranted] datetime, "" +
                ""[lockedby] varchar(255), "" +
                ""primary key (id))""}, InformixDatabase.class);
    
        assertCorrect(new String[]{""create table [databasechangeloglock] ("" +
                ""[id] [int] not null, "" +
                ""[locked] [bit] not null, "" +
                ""[lockgranted] [datetime2](3), "" +
                ""[lockedby] [nvarchar](255), "" +
                ""constraint [pk_databasechangeloglock] primary key ([id]))""}, MSSQLDatabase.class);

        assertCorrect(new String[]{""create table [databasechangeloglock] ("" +
                ""[id] integer not null, "" +
                ""[locked] smallint not null, "" +
                ""[lockgranted] timestamp, "" +
                ""[lockedby] varchar(255), "" +
                ""constraint [pk_dbchgloglock] primary key ([id]))""}, DB2Database.class);
    
        assertCorrect(new String[]{""create table databasechangeloglock ("" +
                ""id integer not null, "" +
                ""locked number(1) not null, "" +
                ""lockgranted timestamp, "" +
                ""lockedby varchar2(255), "" +
                ""constraint pk_databasechangeloglock primary key (id))""}, OracleDatabase.class);

        assertCorrect(new String[]{""create table [databasechangeloglock] ("" +
                ""[id] int not null, "" +
                ""[locked] boolean not null, "" +
                ""[lockgranted] datetime null, "" +
                ""[lockedby] varchar(255) null, "" +
                ""constraint [pk_databasechangeloglock] primary key ([id]))""}, MySQLDatabase.class);
    
        assertCorrect(new String[]{""create table [databasechangeloglock] ("" +
                ""[id] int not null, "" +
                ""[locked] boolean not null, "" +
                ""[lockgranted] datetime null, "" +
                ""[lockedby] varchar(255) null, "" +
                ""constraint [pk_databasechangeloglock] primary key ([id]))""}, MariaDBDatabase.class);

        assertCorrect(new String[]{""create table [databasechangeloglock] ("" +
                ""[id] int not null, "" +
                ""[locked] boolean not null, "" +
                ""[lockgranted] datetime, "" +
                ""[lockedby] varchar(255), "" +
                ""constraint [databasechangeloglock_pkey] primary key ([id]))""}, PostgresDatabase.class);

        assertCorrect(new String[]{""create table [databasechangeloglock] ("" +
                ""[id] int not null, "" +
                ""[locked] boolean not null, "" +
                ""[lockgranted] datetime, "" +
                ""[lockedby] varchar(255), "" +
                ""constraint [pk_dbchgloglock] primary key ([id]))""}, Db2zDatabase.class);

        // all other RDBMS
        assertCorrect(new String[]{""create table [databasechangeloglock] ("" +
                ""[id] int not null, "" +
                ""[locked] boolean not null, "" +
                ""[lockgranted] datetime, "" +
                ""[lockedby] varchar(255), "" +
                ""constraint [pk_databasechangeloglock] primary key ([id]))""});

    }
",non-flaky,5
179498,abel533_Mapper,TypeHandlerTest2.testDelete,"    @Test
    public void testDelete(){
        SqlSession sqlSession = getSqlSession();
        try {
            User2Mapper userMapper = sqlSession.getMapper(User2Mapper.class);
            Assert.assertEquals(1, userMapper.deleteByPrimaryKey(1));

            User2 user = new User2();
            Address address = new Address();
            address.setProvince(""Hebei"");
            address.setCity(""Handan"");
            user.setAddress(address);
            user.setState(StateEnum.enabled);
            Assert.assertEquals(0, userMapper.delete(user));

            user.setState(StateEnum.disabled);
            Assert.assertEquals(1, userMapper.delete(user));
        } finally {
            sqlSession.close();
        }
    }
",non-flaky,5
84601,apache_zookeeper,SimpleSysTest.testSimpleCase,"    @Test
    public void testSimpleCase() throws Exception {
        configureServers(serverCount);
        configureClients(clientCount, SimpleClient.class, getHostPort());
        Stat stat = new Stat();
        startServers();
        LOG.debug(""Connecting to "" + getHostPort());
        ZooKeeper zk = new ZooKeeper(getHostPort(), 15000, this);
        waitForConnect(zk, 10000);
        zk.create(""/simpleCase"", ""orig"".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);
        startClients();

        // Check that all clients connect properly
        for(int i = 0; i < getClientCount(); i++) {
            for(int j = 0; j < maxTries; j++) {
                try {
                    byte b[] = zk.getData(""/simpleCase/"" + i, false, stat);
                    Assert.assertEquals(""orig"", new String(b));
                } catch(NoNodeException e) {
                    if (j+1 == maxTries) {
                        Assert.fail(""Max tries exceeded on client "" + i);
                    }
                    Thread.sleep(1000);
                }
            }
        }

        // Kill half the servers, make a change, restart the dead
        // servers, and then bounce the other servers one by one
        for(int i = 0; i < getServerCount(); i++) {
            stopServer(i);
            if (i+1 > getServerCount()/2) {
                startServer(i);
            } else if (i+1 == getServerCount()/2) {
                Assert.assertTrue(""Connection didn't recover"", waitForConnect(zk, 10000));
                try {
                    zk.setData(""/simpleCase"", ""new"".getBytes(), -1);
                } catch(ConnectionLossException e) {
                    Assert.assertTrue(""Connection didn't recover"", waitForConnect(zk, 10000));
                    zk.setData(""/simpleCase"", ""new"".getBytes(), -1);
                }
                for(int j = 0; j < i; j++) {
                    LOG.info(""Starting server "" + j);
                    startServer(i);
                }
            }
        }
        Thread.sleep(100); // wait for things to stabilize
        Assert.assertTrue(""Servers didn't bounce"", waitForConnect(zk, 15000));
        try {
            zk.getData(""/simpleCase"", false, stat);
        } catch(ConnectionLossException e) {
            Assert.assertTrue(""Servers didn't bounce"", waitForConnect(zk, 15000));
        }

        // check that the change has propagated to everyone
        for(int i = 0; i < getClientCount(); i++) {
            for(int j = 0; j < maxTries; j++) {
                byte[] data = zk.getData(""/simpleCase/"" + i, false, stat);
                if (new String(data).equals(""new"")) {
                    break;
                }
                if (j+1 == maxTries) {
                    Assert.fail(""max tries exceeded for "" + i);
                }
                Thread.sleep(1000);
            }
        }

        // send out the kill signal
        zk.setData(""/simpleCase"", ""die"".getBytes(), -1);

        // watch for everyone to die
        for(int i = 0; i < getClientCount(); i++) {
            try {
                for(int j = 0; j < maxTries; j++) {
                    zk.getData(""/simpleCase/"" + i, false, stat);
                    if (j+1 == maxTries) {
                        Assert.fail(""max tries exceeded waiting for child "" + i + "" to die"");
                    }
                    Thread.sleep(200);
                }
            } catch(NoNodeException e) {
                // Great this is what we were hoping for!
            }
        }

        stopClients();
        stopServers();
    }
",non-flaky,5
30927,camunda-cloud_zeebe,MsgPackReadTokenTest.shouldReadToken,"  @Test
  public void shouldReadToken() {
    // given
    final MsgPackReader reader = new MsgPackReader();
    final ByteArrayBuilder builder = new ByteArrayBuilder();
    given.accept(builder);
    final DirectBuffer buf = new UnsafeBuffer(builder.value);
    reader.wrap(buf, 0, buf.capacity());

    // when
    final MsgPackToken msgPackToken = reader.readToken();

    // then
    assertThat(reader.getOffset()).isEqualTo(buf.capacity());
    assertThat(msgPackToken.getType()).isEqualTo(expectedType);
    assertion.accept(msgPackToken);
  }
",non-flaky,5
98656,nutzam_nutz,ViewZoneTest.test_view_resp,"    @Test
    public void test_view_resp() {
        get(""/views/resp/to/1"");
        assertEquals(""hi"", resp.getContent());
        get(""/views/resp/to/2"");
        assertEquals(200, resp.getStatus());
        assertEquals(""{\""name\"":\""wendal\""}"", resp.getContent());
    }
",non-flaky,5
162700,OpenAPITools_openapi-generator,CatTest.testCat,"    @Test
    public void testCat() {
        // TODO: test Cat
    }
",non-flaky,5
98339,Kong_unirest-java,AssertTest.expectAnyPath,"    @Test
    public void expectAnyPath(){
        client.expect(HttpMethod.GET)
                .thenReturn(""woh"");

        Unirest.get(path).asEmpty();

        client.verifyAll();
    }
",non-flaky,5
133972,CorfuDB_CorfuDB,LogUnitHandlerTest.testPrefixTrim,"    @Test
    public void testPrefixTrim() {
        ResponseMsg response = getResponseMsg(
                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.CHECK),
                getTrimLogResponseMsg()
        );

        logUnitHandler.handleMessage(response, mockChannelHandlerContext);
        // Verify that the correct request was completed (once) with the appropriate value,
        // and that we did not complete exceptionally.
        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));
        verify(mockClientRouter).completeRequest(response.getHeader().getRequestId(), true);
    }
",non-flaky,5
91405,OpenLCB_OpenLCB_Java,HubTest.testCTor,"    @Test
    public void testCTor() {
        Assume.assumeFalse(GraphicsEnvironment.isHeadless());
        Hub t = new Hub();
        Assert.assertNotNull(""exists"",t);
    }
",non-flaky,5
21208,androidx_androidx,PreferenceDataStoreTest.testPutIntWithDataStoreOnMgr,"    @Test
    public void testPutIntWithDataStoreOnMgr() {
        mManager.setPreferenceDataStore(mDataStore);
        mScreen.addPreference(mPreference);
        putIntTestCommon();
    }
",non-flaky,5
33658,alibaba_fastjson,TestIssue885.testReadFrom,"    @Test
    public void testReadFrom() {
        final User user = target(""user"").request().accept(""application/json"").get(User.class);
        assertNotNull(user);
        assertNotNull(user.getCreatedOn());
        assertEquals(user.getId().longValue(), 12345L);
        assertEquals(user.getName(), ""smallnest"");
    }
",non-flaky,5
94719,ktuukkan_marine-api,SpeedOverGroundTest.maxValueIsAvailable,"    @Test
    public void maxValueIsAvailable() {
        assertTrue(SpeedOverGround.isAvailable(1022));
    }
",non-flaky,5
19458,eclipse_xtext-core,ImportedNamespaceAwareLocalScopeProviderTest.iterator,"	@Test public void testMultipleFiles() throws Exception {
			public Iterator<EObject> iterator() {
				return res1.getAllContents();
			}
",non-flaky,5
156057,jReddit_jReddit,RedditTokenTest.testRefresh,"    @Test
    public void testRefresh() {
        
        RedditToken subject = new RedditToken(jsonToken);
        assertEquals(accessToken, subject.getAccessToken());
        assertEquals(refreshToken, subject.getRefreshToken());
        assertEquals(tokenType, subject.getTokenType());
        assertEquals(expiresIn, subject.getExpirationSpan());
        assertTrue(subject.hasScope(RedditScope.EDIT));
        assertTrue(subject.hasScope(RedditScope.FLAIR));
        
        subject.refresh(refreshJsonToken);
        
        assertEquals(accessToken2, subject.getAccessToken());
        assertEquals(refreshToken, subject.getRefreshToken());
        assertEquals(tokenType2, subject.getTokenType());
        assertEquals(expiresIn2, subject.getExpirationSpan());
        assertTrue(subject.hasScope(RedditScope.EDIT));
        assertFalse(subject.hasScope(RedditScope.FLAIR));
        
    }
",non-flaky,5
94788,ktuukkan_marine-api,AISMessage21ParserTest.getOffPositionIndicator,"    @Test
    public void getOffPositionIndicator() throws Exception {
        assertEquals(true, msg.getOffPositionIndicator());
    }
",non-flaky,5
76757,quarkusio_quarkus,CreateProjectMojoIT.testProjectGenerationFromScratchWithCustomDependencies,"    @Test
    public void testProjectGenerationFromScratchWithCustomDependencies() throws Exception {
        testDir = initEmptyProject(""projects/project-generation-with-resource-and-custom-deps"");
        assertThat(testDir).isDirectory();
        invoker = initInvoker(testDir);

        Properties properties = new Properties();
        properties.put(""projectGroupId"", ""org.acme"");
        properties.put(""projectArtifactId"", ""acme"");
        properties.put(""className"", ""org.acme.MyResource"");
        properties.put(""extensions"", ""resteasy,commons-io:commons-io:2.5"");
        InvocationResult result = setup(properties);

        assertThat(result.getExitCode()).isZero();

        // As the directory is not empty (log) navigate to the artifactID directory
        testDir = new File(testDir, ""acme"");

        assertThat(new File(testDir, ""pom.xml"")).isFile();
        assertThat(new File(testDir, ""src/main/java/org/acme/MyResource.java"")).isFile();
        assertThat(FileUtils.readFileToString(new File(testDir, ""pom.xml""), ""UTF-8""))
                .contains(""commons-io"");

        Model model = loadPom(testDir);
        assertThat(model.getDependencyManagement().getDependencies().stream()
                .anyMatch(d -> d.getArtifactId().equals(MojoUtils.TEMPLATE_PROPERTY_QUARKUS_PLATFORM_ARTIFACT_ID_VALUE)
                        && d.getVersion().equals(MojoUtils.TEMPLATE_PROPERTY_QUARKUS_PLATFORM_VERSION_VALUE)
                        && d.getScope().equals(""import"")
                        && d.getType().equals(""pom""))).isTrue();

        assertThat(
                model.getDependencies().stream().anyMatch(d -> d.getArtifactId().equalsIgnoreCase(""quarkus-resteasy"")
                        && d.getVersion() == null)).isTrue();

        assertThat(model.getDependencies().stream().anyMatch(d -> d.getArtifactId().equalsIgnoreCase(""commons-io"")
                && d.getVersion().equalsIgnoreCase(""2.5""))).isTrue();
    }
",non-flaky,5
104662,apache_pinot,OfflineClusterIntegrationTest.testAggregationFunctionsWithUnderscore,"  @Test
  public void testAggregationFunctionsWithUnderscore()
      throws Exception {
    String query;

    // The Accurate value is 6538.
    query = ""SELECT distinct_count(FlightNum) FROM mytable "";
    assertEquals(postQuery(query).get(""aggregationResults"").get(0).get(""value"").asLong(), 6538);
    assertEquals(postSqlQuery(query, _brokerBaseApiUrl).get(""resultTable"").get(""rows"").get(0).get(0).asLong(), 6538);

    // The Accurate value is 6538.
    query = ""SELECT c_o_u_n_t(FlightNum) FROM mytable "";
    assertEquals(postQuery(query).get(""aggregationResults"").get(0).get(""value"").asLong(), 115545);
    assertEquals(postSqlQuery(query, _brokerBaseApiUrl).get(""resultTable"").get(""rows"").get(0).get(0).asLong(), 115545);
  }
",non-flaky,5
76935,Tencent_Firestorm,RssShuffleReaderTest.readTest,"  @Test
  public void readTest() throws Exception {

    String basePath = HDFS_URI + ""readTest1"";
    HdfsShuffleWriteHandler writeHandler =
        new HdfsShuffleWriteHandler(""appId"", 0, 0, 1, basePath, ""test"", conf);

    Map<String, String> expectedData = Maps.newHashMap();
    Roaring64NavigableMap blockIdBitmap = Roaring64NavigableMap.bitmapOf();
    Roaring64NavigableMap taskIdBitmap = Roaring64NavigableMap.bitmapOf(0);
     writeTestData(writeHandler, 2, 5, expectedData,
        blockIdBitmap, ""key"", KRYO_SERIALIZER, 0);

    TaskContext contextMock = mock(TaskContext.class);
    RssShuffleHandle handleMock = mock(RssShuffleHandle.class);
    ShuffleDependency dependencyMock = mock(ShuffleDependency.class);
    when(handleMock.getAppId()).thenReturn(""appId"");
    when(handleMock.getShuffleId()).thenReturn(1);
    when(handleMock.getDependency()).thenReturn(dependencyMock);
    when(dependencyMock.serializer()).thenReturn(KRYO_SERIALIZER);
    when(contextMock.taskAttemptId()).thenReturn(1L);
    when(contextMock.attemptNumber()).thenReturn(1);
    when(contextMock.taskMetrics()).thenReturn(new TaskMetrics());
    doNothing().when(contextMock).killTaskIfInterrupted();
    when(dependencyMock.mapSideCombine()).thenReturn(false);
    when(dependencyMock.aggregator()).thenReturn(Option.empty());
    when(dependencyMock.keyOrdering()).thenReturn(Option.empty());

    RssShuffleReader rssShuffleReaderSpy = spy(new RssShuffleReader<String, String>(0, 1, contextMock,
        handleMock, basePath, 1000, conf, StorageType.HDFS.name(),
        1000, 2, 10, blockIdBitmap, taskIdBitmap));

    validateResult(rssShuffleReaderSpy.read(), expectedData, 10);
  }
",non-flaky,5
160425,ConsenSys_teku,ValidatorDataProviderTest.submitSignedBlock_shouldReturn200ForSuccess,"  @TestTemplate
  public void submitSignedBlock_shouldReturn200ForSuccess()
      throws ExecutionException, InterruptedException {
    final SignedBeaconBlock internalSignedBeaconBlock =
        dataStructureUtil.randomSignedBeaconBlock(1);
    final tech.pegasys.teku.api.schema.SignedBeaconBlock signedBeaconBlock =
        tech.pegasys.teku.api.schema.SignedBeaconBlock.create(internalSignedBeaconBlock);

    final SafeFuture<SendSignedBlockResult> successImportResult =
        completedFuture(SendSignedBlockResult.success(internalSignedBeaconBlock.getRoot()));

    when(validatorApiChannel.sendSignedBlock(any())).thenReturn(successImportResult);

    final SafeFuture<ValidatorBlockResult> validatorBlockResultSafeFuture =
        provider.submitSignedBlock(signedBeaconBlock);

    assertThat(validatorBlockResultSafeFuture.get().getResponseCode()).isEqualTo(200);
  }
",non-flaky,5
99703,apache_cassandra,DistributionSequenceTest.negValueSequence,"    @Test
    public void negValueSequence() throws Exception
    {
        Distribution dist = OptionDistribution.get(""seq(-1000..-10)"").get();
        assertTrue(dist instanceof DistributionSequence);

        assertEquals(-1000, dist.minValue());
        assertEquals( -10, dist.maxValue());
        assertEquals(-504, dist.average());

        assertEquals(-1000, dist.inverseCumProb(0d));
        assertEquals(-10, dist.inverseCumProb(1d));

        long min = dist.next();
        assertEquals(-1000, min);

        long last = min;
        long next = dist.next();
        while (last<next)
        {
            assertEquals(next, last+1); //increase by one each step
            last = next;
            next = dist.next();
        }

        assertEquals(-10, last); // wrapping
        assertEquals(-1000, next); // wrapping
    }
",non-flaky,5
59621,looly_hutool,EmojiUtilTest.containsEmojiTest,"	@Test
	public void containsEmojiTest() {
		boolean containsEmoji = EmojiUtil.containsEmoji(""æµè¯ä¸ä¸æ¯å¦åå«EMOJ:ð"");
		Assert.assertEquals(containsEmoji, true);
		boolean notContainsEmoji = EmojiUtil.containsEmoji(""ä¸åå«EMOJ:^_^"");
		Assert.assertEquals(notContainsEmoji, false);

	}
",non-flaky,5
113995,apache_struts,URLDecoderUtilTest.testURLDecodePlusCharAsSpace,"    @Test
    public void testURLDecodePlusCharAsSpace() {

        String result = URLDecoderUtil.decode(""a+b"", ""UTF-8"", true);
        assertEquals(""a b"", result);
    }
",non-flaky,5
97725,vojtechhabarta_typescript-generator,JsonDeserializationTest.test,"    @Test
    public void test() throws IOException {
        final Settings settings = TestUtils.settings();
        settings.outputKind = TypeScriptOutputKind.module;
        settings.outputFileType = TypeScriptFileType.implementationFile;
        settings.mapClasses = ClassMapping.asClasses;
        settings.extensions.add(new JsonDeserializationExtension());
        final File actualFile = new File(""target/JsonDeserializationTest-actual.ts"");
        new TypeScriptGenerator(settings).generateTypeScript(Input.from(User.class), Output.to(actualFile));
        final List<String> actualLines = Files.readAllLines(actualFile.toPath(), StandardCharsets.UTF_8);
        final List<String> expectedLines = Utils.readLines(getClass().getResourceAsStream(""JsonDeserializationTest-expected.ts""));

        int contentLines = 0;
        int foundLines = 0;
        final List<String> notFoundLines = new ArrayList<>();
        for (String expectedLine : expectedLines) {
            if (!expectedLine.isEmpty() || !expectedLine.trim().equals(""}"")) {
                contentLines++;
                if (actualLines.contains(expectedLine)) {
                    foundLines++;
                } else {
                    notFoundLines.add(expectedLine);
                }
            }
        }
",non-flaky,5
78268,apache_beam,LateDataUtilsTest.garbageCollectionTimeAfterEndOfGlobalWindow,"  @Test
  public void garbageCollectionTimeAfterEndOfGlobalWindow() {
    FixedWindows windowFn = FixedWindows.of(Duration.standardMinutes(5));
    WindowingStrategy<?, ?> strategy = WindowingStrategy.globalDefault().withWindowFn(windowFn);

    IntervalWindow window = windowFn.assignWindow(new Instant(BoundedWindow.TIMESTAMP_MAX_VALUE));
    assertThat(window.maxTimestamp(), equalTo(GlobalWindow.INSTANCE.maxTimestamp()));
    assertThat(
        LateDataUtils.garbageCollectionTime(window, strategy),
        equalTo(GlobalWindow.INSTANCE.maxTimestamp()));
  }
",non-flaky,5
137139,spring-projects_spring-framework,AnnotationMetadataReadingVisitorTests.getAnnotationsReturnsDirectAnnotations,"	@Test
	public void getAnnotationsReturnsDirectAnnotations() {
		assertThatExceptionOfType(UnsupportedOperationException.class)
			.isThrownBy(super::getAnnotationsReturnsDirectAnnotations);
	}
",non-flaky,5
86114,graylog2_graylog2-server,NotificationFacadeTest.delete,"    @Test
    public void delete() {
        long countBefore = notificationService.streamAll().count();
        assertThat(countBefore).isEqualTo(1);

        final Optional<NotificationDto> notificationDto = notificationService.get(
                ""5d4d33753d27460ad18e0c4d"");
        assertThat(notificationDto).isPresent();
        facade.delete(notificationDto.get());

        long countAfter = notificationService.streamAll().count();
        assertThat(countAfter).isEqualTo(0);
    }
",non-flaky,5
97697,vojtechhabarta_typescript-generator,TaggedUnionsTest.testBaseWithGenerics,"    @Test
    public void testBaseWithGenerics() {
        final Settings settings = TestUtils.settings();
        settings.outputKind = TypeScriptOutputKind.module;
        final String output = new TypeScriptGenerator(settings).generateTypeScript(Input.from(BaseUsage.class));
        Assert.assertTrue(output.contains(""result: BaseUnion<string, number>""));
        Assert.assertTrue(output.contains(""type BaseUnion<A, B> = FlippedGenericParameters<B, A>""));
    }
",non-flaky,5
38240,palantir_atlasdb,AbstractAtlasDbKeyValueServiceTest.testGetLatestTimestamps,"    @Test
    public void testGetLatestTimestamps() {
        putTestDataForMultipleTimestamps();
        Map<Cell, Long> timestamps = keyValueService.getLatestTimestamps(TEST_TABLE,
                ImmutableMap.of(Cell.create(row0, column0), TEST_TIMESTAMP + 2));
        assertTrue(""Incorrect number of values returned."", timestamps.size() == 1);
        assertEquals(""Incorrect value returned."", new Long(TEST_TIMESTAMP + 1),
                timestamps.get(Cell.create(row0, column0)));
    }
",non-flaky,5
170473,eclipse_jetty.project,ObjectMBeanUtilTest.testSetAttributeNullCheck,"    @Test
    public void testSetAttributeNullCheck() throws Exception
    {
        objectMBean.setAttribute(null);

        AttributeNotFoundException e = assertThrows(AttributeNotFoundException.class, () -> objectMBean.getAttribute(null));

        assertNotNull(e, ""An AttributeNotFoundException must have occurred by now as there is no attribute with the name null"");
    }
",non-flaky,5
98312,spotify_docker-client,DefaultDockerClientUnitTest.testHostForLocalHttps,"  @Test
  public void testHostForLocalHttps() {
    final DefaultDockerClient client = DefaultDockerClient.builder()
        .uri(""https://localhost:2375"").build();
    assertThat(client.getHost(), equalTo(""localhost""));
  }
",non-flaky,5
156455,apache_commons-lang,DateUtilsFragmentTest.testMinutesOfHourWithDate,"    @Test
    public void testMinutesOfHourWithDate() {
        final long testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.HOUR_OF_DAY);
        assertEquals(minutes, testResult);
    }
",non-flaky,5
104638,apache_pinot,OfflineClusterIntegrationTest.testBloomFilterTriggering,"  @Test(dependsOnMethods = ""testDefaultColumns"")
  public void testBloomFilterTriggering()
      throws Exception {
    long numTotalDocs = getCountStarResult();
    assertEquals(postQuery(TEST_UPDATED_BLOOM_FILTER_QUERY).get(""numSegmentsProcessed"").asLong(), NUM_SEGMENTS);

    // Update table config and trigger reload
    TableConfig tableConfig = getOfflineTableConfig();
    tableConfig.getIndexingConfig().setBloomFilterColumns(UPDATED_BLOOM_FILTER_COLUMNS);
    updateTableConfig(tableConfig);
    reloadOfflineTable(getTableName());
    TestUtils.waitForCondition(aVoid -> {
      try {
        JsonNode queryResponse = postQuery(TEST_UPDATED_BLOOM_FILTER_QUERY);
        // Total docs should not change during reload
        assertEquals(queryResponse.get(""totalDocs"").asLong(), numTotalDocs);
        return queryResponse.get(""numSegmentsProcessed"").asLong() == 0L;
      } catch (Exception e) {
        throw new RuntimeException(e);
      }
    }, 600_000L, ""Failed to generate bloom filter"");

    // Update table config to remove the new bloom filter, and
    // reload table to clean the new bloom filter physically.
    tableConfig = getOfflineTableConfig();
    tableConfig.getIndexingConfig().setBloomFilterColumns(getBloomFilterColumns());
    updateTableConfig(tableConfig);
    reloadOfflineTable(getTableName());
    TestUtils.waitForCondition(aVoid -> {
      try {
        JsonNode queryResponse = postQuery(TEST_UPDATED_BLOOM_FILTER_QUERY);
        // Total docs should not change during reload, but num entries scanned
        // gets back to total number of documents as bloom filter is removed.
        assertEquals(queryResponse.get(""totalDocs"").asLong(), numTotalDocs);
        return queryResponse.get(""numSegmentsProcessed"").asLong() == NUM_SEGMENTS;
      } catch (Exception e) {
        throw new RuntimeException(e);
      }
    }, 600_000L, ""Failed to cleanup obsolete index"");
    assertEquals(getTableSize(getTableName()), _tableSizeAfterRemovingIndex);
  }
",non-flaky,5
94760,ktuukkan_marine-api,AbstractAISMessageListenerTest.testSequenceListener,"    @Test
    public void testSequenceListener() {

        SequenceListener sl = new SequenceListener();

        sl.sentenceRead(AIS_05_1);
        assertNull(sl.received);

        sl.sentenceRead(AIS_05_2);
        assertEquals(sl.received.toString(), MSG_05.toString());
    }
",non-flaky,5
84652,apache_zookeeper,ZooKeeperTest.testParseWithQuotes,"    @Test
    public void testParseWithQuotes() throws Exception {
        final ZooKeeper zk = createClient();
        ZooKeeperMain zkMain = new ZooKeeperMain(zk);
        for (String quoteChar : new String[]{""'"", ""\""""}) {
            String cmdstring = String.format(""create /node %1$squoted data%1$s"", quoteChar);
            zkMain.cl.parseCommand(cmdstring);
            assertEquals(zkMain.cl.getNumArguments(), 3, ""quotes combine arguments"");
            assertEquals(zkMain.cl.getCmdArgument(0), ""create"", ""create is not taken as first argument"");
            assertEquals(zkMain.cl.getCmdArgument(1), ""/node"", ""/node is not taken as second argument"");
            assertEquals(zkMain.cl.getCmdArgument(2), ""quoted data"", ""quoted data is not taken as third argument"");
        }
    }
",non-flaky,5
94648,square_okhttp,ConnectionSpecSelectorTest.someFallbacksSupported,"  @Test
  public void someFallbacksSupported() throws Exception {
    ConnectionSpec sslV3 =
        new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS)
            .tlsVersions(TlsVersion.SSL_3_0)
            .build();

    ConnectionSpecSelector connectionSpecSelector = createConnectionSpecSelector(
        ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS, sslV3);

    TlsVersion[] enabledSocketTlsVersions = {TlsVersion.TLS_1_1, TlsVersion.TLS_1_0};
    SSLSocket socket = createSocketWithEnabledProtocols(enabledSocketTlsVersions);

    // MODERN_TLS is used here.
    connectionSpecSelector.configureSecureSocket(socket);
    assertEnabledProtocols(socket, TlsVersion.TLS_1_1, TlsVersion.TLS_1_0);

    boolean retry = connectionSpecSelector.connectionFailed(RETRYABLE_EXCEPTION);
    assertTrue(retry);
    socket.close();

    // COMPATIBLE_TLS is used here.
    socket = createSocketWithEnabledProtocols(enabledSocketTlsVersions);
    connectionSpecSelector.configureSecureSocket(socket);
    assertEnabledProtocols(socket, TlsVersion.TLS_1_0);

    retry = connectionSpecSelector.connectionFailed(RETRYABLE_EXCEPTION);
    assertFalse(retry);
    socket.close();

    // sslV3 is not used because SSLv3 is not enabled on the socket.
  }
",non-flaky,5
77000,Tencent_Firestorm,MultiStorageFaultToleranceTest.hdfsFaultTolerance,"  @Test
  public void hdfsFaultTolerance() {
    try {
      String appId = ""app_hdfs_fault_tolerance_data"";
      Map<Long, byte[]> expectedData = Maps.newHashMap();
      Map<Integer, List<Integer>> map = Maps.newHashMap();
      map.put(2, Lists.newArrayList(0, 3));
      map.put(3, Lists.newArrayList(3));
      registerShuffle(appId, map);

      Roaring64NavigableMap blockIdBitmap1 = Roaring64NavigableMap.bitmapOf();
      Roaring64NavigableMap blockIdBitmap2 = Roaring64NavigableMap.bitmapOf();
      Roaring64NavigableMap blockIdBitmap3 = Roaring64NavigableMap.bitmapOf();

      List<ShuffleBlockInfo> blocks1 = createShuffleBlockList(
          2, 0, 1,11, 10 * 1024 * 1024, blockIdBitmap1, expectedData);

      List<ShuffleBlockInfo> blocks2 = createShuffleBlockList(
          3, 3, 2,9, 10 * 1024 * 1024, blockIdBitmap2, expectedData);

      List<ShuffleBlockInfo> blocks3 = createShuffleBlockList(
          2, 3, 2,9, 10 * 1024 * 1024, blockIdBitmap3, expectedData);

      assertEquals(0, ShuffleStorageUtils.getStorageIndex(2, appId, 2, 0));
      assertEquals(0, ShuffleStorageUtils.getStorageIndex(2, appId, 3, 3));
      assertEquals(0, ShuffleStorageUtils.getStorageIndex(2, appId, 2, 3));
      assertEquals(1, cluster.getDataNodes().size());
      cluster.stopDataNode(0);
      assertEquals(0, cluster.getDataNodes().size());

      sendSinglePartitionToShuffleServer(appId, 2, 0, 1, blocks1);
      boolean isException = false;
      try {
        sendSinglePartitionToShuffleServer(appId, 3, 3,2, blocks2);
      } catch (RuntimeException re) {
        isException = true;
        assertTrue(re.getMessage().contains(""Fail to finish""));
      }
      assertTrue(isException);

      cluster.startDataNodes(conf, 1, true, HdfsServerConstants.StartupOption.REGULAR,
          null, null, null, false, true);
      assertEquals(1, cluster.getDataNodes().size());

      sendSinglePartitionToShuffleServer(appId, 2, 3, 2, blocks3);

      validateResult(appId, 2, 0, blockIdBitmap1, Roaring64NavigableMap.bitmapOf(1), expectedData);
      validateResult(appId, 2, 3, blockIdBitmap3, Roaring64NavigableMap.bitmapOf(2), expectedData);
    } catch (Exception e) {
      e.printStackTrace();
      fail();
    }
  }
",non-flaky,5
77692,pholser_junit-quickcheck,PrimitivePropertyParameterTypesTest.shouldHold,"    @Test public void leftOpenEndedRangedPrimitiveCharacter() {
        @Property public void shouldHold(@InRange(maxChar = '\u00FF') char ch) {
            assertThat(ch, lessThanOrEqualTo('\u00FF'));
        }
",non-flaky,5
98027,vert-x3_vertx-mongo-client,MongoClientUpdateResultTest.testDefaultMongoClientUpdateResult,"  @Test
  public void testDefaultMongoClientUpdateResult() {
    MongoClientUpdateResult mongoClientUpdateResult = new MongoClientUpdateResult();

    assertEquals(MongoClientUpdateResult.DEFAULT_DOCMATCHED, mongoClientUpdateResult.getDocMatched());
    assertNull(mongoClientUpdateResult.getDocUpsertedId());
    assertEquals(MongoClientUpdateResult.DEFAULT_DOCMODIFIED, mongoClientUpdateResult.getDocModified());
  }
",non-flaky,5
106607,Alluxio_alluxio,StatvfsTest.offset,"  @Test
  public void offset() {
    Statvfs jni = Statvfs.of(ByteBuffer.allocate(256));
    ru.serce.jnrfuse.struct.Statvfs jnr =
        ru.serce.jnrfuse.struct.Statvfs.of(Pointer.wrap(Runtime.getSystemRuntime(), 0x0));

    assertEquals(jnr.f_bsize.offset(), jni.f_bsize.offset());
    assertEquals(jnr.f_frsize.offset(), jni.f_frsize.offset());
    assertEquals(jnr.f_frsize.offset(), jni.f_frsize.offset());
    assertEquals(jnr.f_bfree.offset(), jni.f_bfree.offset());
    assertEquals(jnr.f_bavail.offset(), jni.f_bavail.offset());
    assertEquals(jnr.f_files.offset(), jni.f_files.offset());
    assertEquals(jnr.f_ffree.offset(), jni.f_ffree.offset());
    assertEquals(jnr.f_favail.offset(), jni.f_favail.offset());
    assertEquals(jnr.f_fsid.offset(), jni.f_fsid.offset());
    assertEquals(jnr.f_flag.offset(), jni.f_flag.offset());
    assertEquals(jnr.f_namemax.offset(), jni.f_namemax.offset());
  }
",non-flaky,5
33676,alibaba_fastjson,JSONScannerTest.charArrayCompare3,"  @Test
  public void charArrayCompare3() throws Throwable {

    // Arrange
    String src = ""!!!!!!!\""&&"";
    int offset = 6;
    char[] dest = { '\u0000' };

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""charArrayCompare"", Reflector.forName(""java.lang.String""), Reflector.forName(""int""), Reflector.forName(""char []""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, src, offset, dest);

    // Assert result
    Assert.assertEquals(false, retval);

  }
",non-flaky,5
137091,spring-projects_spring-framework,AbstractAnnotationMetadataTests.getInterfaceNamesWhenHasInterfacesReturnsNames,"	@Test
	public void getInterfaceNamesWhenHasInterfacesReturnsNames() {
		assertThat(get(TestSubclass.class).getInterfaceNames()).containsExactlyInAnyOrder(TestInterface.class.getName());
		assertThat(get(TestSubInterface.class).getInterfaceNames()).containsExactlyInAnyOrder(TestInterface.class.getName());
	}
",non-flaky,5
133996,CorfuDB_CorfuDB,HandOfGodIT.handOfGodTest,"    @Test(timeout = 300000)
    public void handOfGodTest() {
        workflow(wf -> {
            wf.deploy();

            ClientParams clientFixture = ClientParams.builder().build();
            CorfuCluster corfuCluster = wf.getUniverse()
                    .getGroup(wf.getFixture().data().getGroupParamByIndex(0).getName());

            CorfuClient corfuClient = corfuCluster.getLocalCorfuClient();

            CorfuTable<String, String> table = corfuClient.createDefaultCorfuTable(DEFAULT_STREAM_NAME);
            for (int i = 0; i < DEFAULT_TABLE_ITER; i++) {
                table.put(String.valueOf(i), String.valueOf(i));
            }

            //Should force remove two nodes from cluster
            CorfuServer server0 = corfuCluster.getServerByIndex(0);
            CorfuServer server1 = corfuCluster.getServerByIndex(1);
            CorfuServer server2 = corfuCluster.getServerByIndex(2);

            // Sequentially kill two nodes
            server1.kill();
            server2.kill();

            // Force remove the dead nodes
            corfuClient.getManagementView().forceRemoveNode(
                    server1.getEndpoint(),
                    clientFixture.getNumRetry(),
                    clientFixture.getTimeout(),
                    clientFixture.getPollPeriod()
            );

            corfuClient.getManagementView().forceRemoveNode(
                    server2.getEndpoint(),
                    clientFixture.getNumRetry(),
                    clientFixture.getTimeout(),
                    clientFixture.getPollPeriod()
            );

            // Verify layout contains only the node that is up
            corfuClient.invalidateLayout();
            Layout layout = corfuClient.getLayout();
            assertThat(layout.getAllActiveServers()).containsExactly(server0.getEndpoint());

            // Verify cluster status is STABLE
            ClusterStatusReport clusterStatusReport = corfuClient.getManagementView().getClusterStatus();
            assertThat(clusterStatusReport.getClusterStatus()).isEqualTo(ClusterStatus.STABLE);

            ScenarioUtils.waitUninterruptibly(Duration.ofSeconds(30));

            // Verify data path working
            for (int i = 0; i < DEFAULT_TABLE_ITER; i++) {
                assertThat(table.get(String.valueOf(i))).isEqualTo(String.valueOf(i));
            }

            corfuClient.shutdown();
        });
    }
",non-flaky,5
135742,Netflix_Hystrix,HystrixPropertyTest.testNested3,"    @Test
    public void testNested3() {
        HystrixProperty<String> nullValue = Factory.nullProperty();
        HystrixProperty<String> a = Factory.asProperty(nullValue, ""a"");

        HystrixProperty<String> withDefault = Factory.asProperty(a, ""b"");
        assertEquals(""a"", withDefault.get());
    }
",non-flaky,5
178002,aosp-mirror_platform_frameworks_support,BrowseSupportFragmentTest.testTwoBackKeysWithBackStack,"    @Test
    public void testTwoBackKeysWithBackStack() throws Throwable {
        final long dataLoadingDelay = 1000;
        Intent intent = new Intent();
        intent.putExtra(BrowseSupportFragmentTestActivity.EXTRA_LOAD_DATA_DELAY, dataLoadingDelay);
        intent.putExtra(BrowseSupportFragmentTestActivity.EXTRA_ADD_TO_BACKSTACK , true);
        mActivity = activityTestRule.launchActivity(intent);

        Thread.sleep(dataLoadingDelay + TRANSITION_LENGTH);

        assertNotNull(mActivity.getBrowseTestSupportFragment().getMainFragment());
        sendKeys(KeyEvent.KEYCODE_DPAD_RIGHT);
        Thread.sleep(TRANSITION_LENGTH);
        sendKeys(KeyEvent.KEYCODE_BACK, KeyEvent.KEYCODE_BACK);
    }
",non-flaky,5
91378,OpenLCB_OpenLCB_Java,TractionThrottleTest.put,"    @Test
    public void testCTor() {
        NodeID nodeID = new NodeID(new byte[]{1,2,3,4,5,6});
        Connection testConnection = new AbstractConnection(){
            public void put(Message msg, Connection node) {
            }
",non-flaky,5
60886,apache_druid,DerivativeDataSourceMetadataTest.testNullBaseDataSource,"  @Test
  public void testNullBaseDataSource()
  {
    expectedException.expect(CoreMatchers.instanceOf(IllegalArgumentException.class));
    expectedException.expectMessage(
        ""baseDataSource cannot be null or empty. Please provide a baseDataSource.""
    );
    String baseDataSource = null;
    Set<String> dims = Sets.newHashSet(""dim1"", ""dim2"", ""dim3"");
    Set<String> metrics = Sets.newHashSet(""cost"");
    DerivativeDataSourceMetadata metadata = new DerivativeDataSourceMetadata(baseDataSource, dims, metrics);
  }
",non-flaky,5
77567,dropwizard_dropwizard,DropwizardResourceConfigTest.foo,"    @Test
        public String foo() {
            return ""bar"";
        }
",non-flaky,5
182,apache_shardingsphere-elasticjob,b022898ef1b8c984e17efb2a422ee45f6b13e46e.assertGetLocalFailoverItemsIfShutdown,"@Test
public void assertGetLocalFailoverItemsIfShutdown() {
    assertThat(failoverService.getLocalFailoverItems(), is(Collections.<Integer>emptyList()));
    verify(jobNodeStorage, times(0)).getJobNodeChildrenKeys(""sharding"");
}",test order dependency,4
112739,hwang-pku_ormlite-core,DatabaseConnectionProxyTest.testDelete,"	@Test
	public void testDelete() throws Exception {
		DatabaseConnection conn = createMock(DatabaseConnection.class);
		String statement = ""insert bar"";
		int result = 13872321;
		expect(conn.delete(statement, null, null)).andReturn(result);
		conn.close();
		DatabaseConnectionProxy proxy = new DatabaseConnectionProxy(conn);
		replay(conn);
		assertEquals(result, proxy.delete(statement, null, null));
		proxy.close();
		verify(conn);
	}
",non-flaky,5
104701,apache_pinot,BasicAuthRealtimeIntegrationTest.testSegmentUploadDownload,"  @Test
  public void testSegmentUploadDownload()
      throws Exception {
    final Request query = new Request(""sql"", ""SELECT count(*) FROM "" + getTableName());

    ResultSetGroup resultBeforeOffline = getPinotConnection().execute(query);
    Assert.assertTrue(resultBeforeOffline.getResultSet(0).getLong(0) > 0);

    // schedule offline segment generation
    Assert.assertNotNull(_controllerStarter.getTaskManager().scheduleTasks());

    // wait for offline segments
    JsonNode offlineSegments = TestUtils.waitForResult(() -> {
      JsonNode segmentSets = JsonUtils.stringToJsonNode(
          sendGetRequest(_controllerRequestURLBuilder.forSegmentListAPI(getTableName()), AUTH_HEADER));
      JsonNode currentOfflineSegments =
          new IntRange(0, segmentSets.size()).stream().map(segmentSets::get).filter(s -> s.has(""OFFLINE""))
              .map(s -> s.get(""OFFLINE"")).findFirst().get();
      Assert.assertFalse(currentOfflineSegments.isEmpty());
      return currentOfflineSegments;
    }, 30000);

    // Verify constant row count
    ResultSetGroup resultAfterOffline = getPinotConnection().execute(query);
    Assert.assertEquals(resultBeforeOffline.getResultSet(0).getLong(0), resultAfterOffline.getResultSet(0).getLong(0));

    // download and sanity-check size of offline segment(s)
    for (int i = 0; i < offlineSegments.size(); i++) {
      String segment = offlineSegments.get(i).asText();
      Assert.assertTrue(
          sendGetRequest(_controllerRequestURLBuilder.forSegmentDownload(getTableName(), segment), AUTH_HEADER).length()
              > 200000); // download segment
    }
  }
",non-flaky,5
159679,liquibase_liquibase,AddUniqueConstraintExecutorTest.execute_withSchema,"//    @Test
//    public void execute_withSchema() throws Exception {
//        new DatabaseTestTemplate().testOnAvailableDatabases(
//                new SqlStatementDatabaseTest(TestContext.ALT_SCHEMA, new AddUniqueConstraintStatement(TestContext.ALT_SCHEMA, TABLE_NAME, COLUMN_NAME, ""uq_adduqtest"")) {
//                    protected void preExecuteAssert(DatabaseSnapshotGenerator snapshot) {
//                        assertFalse(snapshot.getTable(TABLE_NAME).getColumn(COLUMN_NAME).isUnique());
//                    }
//
//                    protected void postExecuteAssert(DatabaseSnapshotGenerator snapshot) {
//                        //todo: enable snapshot and assertion when snapshot can check for unique constraints
//                snapshot = new DatabaseSnapshotGenerator(database, TestContext.ALT_SCHEMA);
//                assertTrue(snapshot.getTable(TABLE_NAME).getColumn(COLUMN_NAME).isUnique());
//                    }
//
//                });
//    }
",non-flaky,5
135039,undertow-io_undertow,NetworkUtilsAddressParsingTestCase.testIpV4AddressWithLeadingZero,"    @Test(expected = IOException.class)
    public void testIpV4AddressWithLeadingZero() throws IOException {
        NetworkUtils.parseIpv4Address(""01.123.255.2"");
    }
",non-flaky,5
176825,ctco_cukes,DnComparatorTest.compare_sameTree,"    @Test
    public void compare_sameTree() throws Exception {
        assertThat(comparator.compare(""cn=root"", ""cn=b,cn=root""), is(more()));
        assertThat(comparator.compare(""cn=a,cn=root"", ""cn=root""), is(less()));
        assertThat(comparator.compare(""cn=a,cn=root"", ""cn=a,cn=root""), is(same()));
    }
",non-flaky,5
106604,Alluxio_alluxio,ClientTest.notEnoughVCoreForAlluxioMaster,"  @Test
  public void notEnoughVCoreForAlluxioMaster() throws Exception {
    mConf.set(PropertyKey.INTEGRATION_MASTER_RESOURCE_MEM, ""2048.00MB"");
    mConf.set(PropertyKey.INTEGRATION_MASTER_RESOURCE_CPU, ""4"");
    int masterMemInMB = (int) (mConf.getBytes(
        PropertyKey.INTEGRATION_MASTER_RESOURCE_MEM) / Constants.MB);
    int masterVCores = mConf.getInt(PropertyKey.INTEGRATION_MASTER_RESOURCE_CPU);
    Resource resource = Resource.newInstance(masterMemInMB, 3);
    generateMaxAllocation(resource);
    mThrown.expect(RuntimeException.class);
    mThrown.expectMessage(ExceptionMessage.YARN_NOT_ENOUGH_RESOURCES.getMessage(
        ""Alluxio Master"", ""virtual cores"", masterVCores, resource.getVirtualCores()));
    Client client = new Client(mConf);
    client.run();
  }
",non-flaky,5
76762,quarkusio_quarkus,NativeImageIT.testJavaLibraryPathAtRuntime,"    @Test
    public void testJavaLibraryPathAtRuntime() throws Exception {
        final File testDir = initProject(""projects/native-image-app"", ""projects/native-image-app-output"");
        final RunningInvoker running = new RunningInvoker(testDir, false);

        // trigger mvn package -Pnative -Dquarkus.ssl.native=true
        final String[] mvnArgs = new String[] { ""package"", ""-DskipTests"", ""-Pnative"", ""-Dquarkus.ssl.native=true"" };
        final MavenProcessInvocationResult result = running.execute(Arrays.asList(mvnArgs), Collections.emptyMap());
        await().atMost(10, TimeUnit.MINUTES).until(() -> result.getProcess() != null && !result.getProcess().isAlive());
        final String processLog = running.log();
        try {
            assertThat(processLog).containsIgnoringCase(""BUILD SUCCESS"");
        } catch (AssertionError ae) {
            // skip this test (instead of failing), if the native-image command wasn't available.
            // Bit brittle to rely on the log message, but it's OK in the context of this test
            Assumptions.assumeFalse(processLog.contains(""Cannot find the `native-image""),
                    ""Skipping test since native-image tool isn't available"");
            // native-image command was available but the build failed for some reason, throw the original error
            throw ae;
        } finally {
            running.stop();
        }

        // now that the native image is built, run it
        final Path nativeImageRunner = testDir.toPath().toAbsolutePath().resolve(Paths.get(""target/acme-1.0-SNAPSHOT-runner""));
        final Path tmpDir = Files.createTempDirectory(""native-image-test"");
        tmpDir.toFile().deleteOnExit();
        final Process nativeImageRunWithAdditionalLibPath = runNativeImage(nativeImageRunner,
                new String[] { ""-Djava.library.path="" + tmpDir.toString() });
        try {
            final String response = DevModeTestUtils.getHttpResponse(""/hello/javaLibraryPath"");
            Assertions.assertTrue(response.contains(tmpDir.toString()),
                    ""Response "" + response + "" for java.library.path was expected to contain the "" + tmpDir + "", but didn't"");
        } finally {
            nativeImageRunWithAdditionalLibPath.destroy();
        }

    }
",non-flaky,5
69,apache_samza,TestContainerAllocatorWithHostAffinity.testExpiredRequestAllocationOnAnyHost,"@Test
public void testExpiredRequestAllocationOnAnyHost() throws Exception {
    MockClusterResourceManager spyManager = spy(new MockClusterResourceManager(callback, state));
    ContainerManager spyContainerManager = spy(new ContainerManager(containerPlacementMetadataStore, state, spyManager, true, false, mock(LocalityManager.class), faultDomainManager, config));
    spyAllocator = Mockito.spy(new ContainerAllocator(spyManager, config, state, true, spyContainerManager));
    spyAllocator.requestResources(new HashMap<String, String>() {
        {
            put(""0"", ""hostname-0"");
            put(""1"", ""hostname-1"");
        }
    });
    spyAllocatorThread = new Thread(spyAllocator);
    spyAllocatorThread.start();
    Thread.sleep(1000);
    assertTrue(state.preferredHostRequests.get() == 2);
    assertTrue(state.expiredPreferredHostRequests.get() == 2);
    verify(spyContainerManager, times(1)).handleExpiredRequest(eq(""0""), eq(""hostname-0""), any(SamzaResourceRequest.class), any(ContainerAllocator.class), any(ResourceRequestState.class));
    verify(spyContainerManager, times(1)).handleExpiredRequest(eq(""1""), eq(""hostname-1""), any(SamzaResourceRequest.class), any(ContainerAllocator.class), any(ResourceRequestState.class));
    ArgumentCaptor<SamzaResourceRequest> cancelledRequestCaptor = ArgumentCaptor.forClass(SamzaResourceRequest.class);
    verify(spyManager, atLeast(2)).cancelResourceRequest(cancelledRequestCaptor.capture());
    assertTrue(cancelledRequestCaptor.getAllValues().stream().map(( resourceRequest) -> resourceRequest.getPreferredHost()).collect(Collectors.toSet()).size() > 2);
    assertTrue(state.matchedResourceRequests.get() == 0);
    assertTrue(state.anyHostRequests.get() > 2);
    spyAllocator.stop();
}",async wait,0
77558,dropwizard_dropwizard,DropwizardTestSupportWithResourceConfigProviderTest.open,"    @Test
        public InputStream open(String path) throws IOException {
            openCalled = true;
            return super.open(path);
        }
",non-flaky,5
78291,apache_beam,SideInputHandlerTest.testContains,"  @Test
  public void testContains() {
    SideInputHandler sideInputHandler =
        new SideInputHandler(ImmutableList.of(view1), InMemoryStateInternals.<Void>forKey(null));

    assertTrue(sideInputHandler.contains(view1));
    assertFalse(sideInputHandler.contains(view2));
  }
",non-flaky,5
33725,alibaba_fastjson,Bug89.testBug89,"    @Test
    public void testBug89() {
        try {
            String s = ""{\""a\"":Ð·ãâ )_,\""}"";
            JSON.parseObject(s);
            fail(""Expect JSONException"");
        } catch (JSONException e) {
            // good
        }
    }
",non-flaky,5
21259,androidx_androidx,PreferencePersistTest.boolean_persistWhileDisabled_notPersisted,"    @Test
    public void boolean_persistWhileDisabled_notPersisted() {
        mPreference.setPersistent(false);

        boolean wasPersisted = mPreference.putBoolean(true);

        assertFalse(wasPersisted);
        assertEquals(false, mSharedPref.getBoolean(KEY, false));
    }
",non-flaky,5
170456,eclipse_jetty.project,ObjectMBeanTest.testMBeanForStringArray,"    @Test
    public void testMBeanForStringArray()
    {
        String[] obj = {""a"", ""b""};
        Object mbean = container.mbeanFor(obj);
        assertNotNull(mbean);
        container.beanAdded(null, obj);
        ObjectName objectName = container.findMBean(obj);
        assertNotNull(objectName);
    }
",non-flaky,5
92617,FasterXML_jackson-databind,TestPropertyCreatorSubtypesExternalPropertyMissingProperty.testDeserializationEmpty,"    @Test
    public void testDeserializationEmpty() throws Exception {
        checkOrangeBoxEmpty(BOX_READER_PASS, orangeBoxEmptyJson);
        checkAppleBoxEmpty(BOX_READER_PASS, appleBoxEmptyJson);

        checkOrangeBoxEmpty(BOX_READER_FAIL, orangeBoxEmptyJson);
        checkAppleBoxEmpty(BOX_READER_FAIL, appleBoxEmptyJson);
    }
",non-flaky,5
97705,vojtechhabarta_typescript-generator,IncludeExcludePropertyTest.testExclude,"    @Test
    public void testExclude() {
        final Settings settings = TestUtils.settings();
        settings.jsonLibrary = library;
        settings.excludePropertyAnnotations = Arrays.asList(MyExclude.class);
        final String output = new TypeScriptGenerator(settings).generateTypeScript(Input.from(ClassWithAnnotatedProperties.class));
        Assert.assertTrue(output.contains(""property1""));
        Assert.assertTrue(output.contains(""property2""));
        Assert.assertTrue(!output.contains(""property3""));
        Assert.assertTrue(!output.contains(""property4""));
    }
",non-flaky,5
60891,apache_druid,MaterializedViewSupervisorSpecTest.testNullBaseDataSource,"  @Test
  public void testNullBaseDataSource()
  {
    expectedException.expect(CoreMatchers.instanceOf(IllegalArgumentException.class));
    expectedException.expectMessage(
        ""baseDataSource cannot be null or empty. Please provide a baseDataSource.""
    );
    //noinspection ResultOfObjectAllocationIgnored (this method call will trigger the expected exception)
    new MaterializedViewSupervisorSpec(
        null,
        new DimensionsSpec(
            Lists.newArrayList(
                new StringDimensionSchema(""isUnpatrolled""),
                new StringDimensionSchema(""metroCode""),
                new StringDimensionSchema(""namespace""),
                new StringDimensionSchema(""page""),
                new StringDimensionSchema(""regionIsoCode""),
                new StringDimensionSchema(""regionName""),
                new StringDimensionSchema(""user"")
            ),
            null,
            null
        ),
        new AggregatorFactory[]{
            new CountAggregatorFactory(""count""),
            new LongSumAggregatorFactory(""added"", ""added"")
        },
        HadoopTuningConfig.makeDefaultTuningConfig(),
        null,
        null,
        null,
        null,
        null,
        false,
        objectMapper,
        null,
        null,
        null,
        null,
        null,
        new MaterializedViewTaskConfig(),
        EasyMock.createMock(AuthorizerMapper.class),
        new NoopChatHandlerProvider(),
        new SupervisorStateManagerConfig()
    );
  }
",non-flaky,5
170461,eclipse_jetty.project,ObjectMBeanTest.testMethodNameMining,"    @Test
    public void testMethodNameMining()
    {
        assertEquals(""fullName"", MetaData.toAttributeName(""getFullName""));
        assertEquals(""fullName"", MetaData.toAttributeName(""getfullName""));
        assertEquals(""fullName"", MetaData.toAttributeName(""isFullName""));
        assertEquals(""fullName"", MetaData.toAttributeName(""isfullName""));
        assertEquals(""fullName"", MetaData.toAttributeName(""setFullName""));
        assertEquals(""fullName"", MetaData.toAttributeName(""setfullName""));
        assertEquals(""fullName"", MetaData.toAttributeName(""FullName""));
        assertEquals(""fullName"", MetaData.toAttributeName(""fullName""));
    }
",non-flaky,5
118723,netty_netty,DetectPeerCloseWithoutReadTest.serverCloseWithoutClientReadIsDetectedNoExtraReadRequested,"    @Test(timeout = 10000)
    public void serverCloseWithoutClientReadIsDetectedNoExtraReadRequested() throws InterruptedException {
        serverCloseWithoutClientReadIsDetected0(false);
    }
",non-flaky,5
26915,wildfly_wildfly,MailSubsystem10TestCase.testParseSubsystem,"    @Test
    public void testParseSubsystem() throws Exception {
        //Parse the subsystem xml into operations
        List<ModelNode> operations = super.parse(getSubsystemXml());

        ///Check that we have the expected number of operations
        //log.info(""operations: "" + operations);
        //log.info(""operations.size: "" + operations.size());
        Assert.assertEquals(7, operations.size());

        //Check that each operation has the correct content
        ModelNode addSubsystem = operations.get(0);
        Assert.assertEquals(ADD, addSubsystem.get(OP).asString());
        PathAddress addr = PathAddress.pathAddress(addSubsystem.get(OP_ADDR));
        Assert.assertEquals(1, addr.size());
        PathElement element = addr.getElement(0);
        Assert.assertEquals(SUBSYSTEM, element.getKey());
        Assert.assertEquals(MailExtension.SUBSYSTEM_NAME, element.getValue());
    }
",non-flaky,5
162743,OpenAPITools_openapi-generator,CategoryTest.idTest,"    @Test
    public void idTest() {
        // TODO: test id
    }
",non-flaky,5
94729,ktuukkan_marine-api,Longitude28Test.zeroIsAvailable,"    @Test
    public void zeroIsAvailable() {
        assertTrue(Longitude28.isAvailable(0));
    }
",non-flaky,5
177186,line_armeria,RequestContextCurrentTraceContextTest.newScope_appliesWhenNoCurrentRequestContext,"    @Test
    public void newScope_appliesWhenNoCurrentRequestContext() {
        try (Scope traceContextScope = currentTraceContext.newScope(traceContext)) {
            assertThat(traceContextScope).hasToString(""ThreadLocalScope"");
            assertThat(currentTraceContext.get()).isEqualTo(traceContext);
        }
    }
",non-flaky,5
113724,salesforce_reactive-grpc,AbstractStubTest.getChannelWorks,"    @Test
    public void getChannelWorks() {
        ManagedChannel channel = serverRule.getChannel();
        ReactorGreeterGrpc.ReactorGreeterStub stub = ReactorGreeterGrpc.newReactorStub(channel);

        assertThat(stub.getChannel()).isEqualTo(channel);
    }
",non-flaky,5
98228,apache_jackrabbit,CreateRepositoryTest.createRepositories,"    @Test
    public void createRepositories() throws Exception {
        doCreateRepositories(""jackrabbit-2.0"");
    }
",non-flaky,5
21242,androidx_androidx,PreferencePersistTest.int_retrieveWhenEmpty_returnsDefault,"    @Test
    public void int_retrieveWhenEmpty_returnsDefault() {
        final int expected = 1;
        int result = mPreference.getInt(expected);

        assertEquals(expected, result);
    }
",non-flaky,5
162704,OpenAPITools_openapi-generator,XmlItemTest.testXmlItem,"    @Test
    public void testXmlItem() {
        // TODO: test XmlItem
    }
",non-flaky,5
78251,apache_beam,StateInternalsTest.testMergeCombiningValueIntoSource,"  @Test
  public void testMergeCombiningValueIntoSource() throws Exception {
    CombiningState<Integer, int[], Integer> value1 = underTest.state(NAMESPACE_1, SUM_INTEGER_ADDR);
    CombiningState<Integer, int[], Integer> value2 = underTest.state(NAMESPACE_2, SUM_INTEGER_ADDR);

    value1.add(5);
    value2.add(10);
    value1.add(6);

    assertThat(value1.read(), equalTo(11));
    assertThat(value2.read(), equalTo(10));

    // Merging clears the old values and updates the result value.
    StateMerging.mergeCombiningValues(Arrays.asList(value1, value2), value1);

    assertThat(value1.read(), equalTo(21));
    assertThat(value2.read(), equalTo(0));
  }
",non-flaky,5
112758,hwang-pku_ormlite-core,ThreadLocalSelectArgTest.testColumnNameTypeValueConst,"	@Test
	public void testColumnNameTypeValueConst() {
		int val = 12;
		String columnName = ""fewopjfewpfjwe"";
		ThreadLocalSelectArg arg = new ThreadLocalSelectArg(columnName, val);
		assertTrue(arg.isValueSet());
		assertEquals(val, arg.getValue());
		assertEquals(columnName, arg.getColumnName());
	}
",non-flaky,5
157,wildfly_wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993.testStoredContext,"@Test
public void testStoredContext() throws Exception {
    final ServiceName bindingName = ServiceName.JBOSS.append(""foo-stored"").append(""again"");
    bindObject(bindingName, new Context() {
        @Override
        public Object lookup(Name name) throws NamingException {
            if (""blah/blah2"".equals(name.toString())) {
                return new Integer(5);
            }
            return null;
        }
        @Override
        public Object lookup(String name) throws NamingException {
            return lookup(new CompositeName(name));
        }
        @Override
        public void bind(Name name, Object obj) throws NamingException {
        }
        @Override
        public void bind(String name, Object obj) throws NamingException {
        }
        @Override
        public void rebind(Name name, Object obj) throws NamingException {
        }
        @Override
        public void rebind(String name, Object obj) throws NamingException {
        }
        @Override
        public void unbind(Name name) throws NamingException {
        }
        @Override
        public void unbind(String name) throws NamingException {
        }
        @Override
        public void rename(Name oldName, Name newName) throws NamingException {
        }
        @Override
        public void rename(String oldName, String newName) throws NamingException {
        }
        @Override
        public NamingEnumeration<NameClassPair> list(Name name) throws NamingException {
            return null;
        }
        @Override
        public NamingEnumeration<NameClassPair> list(String name) throws NamingException {
            return null;
        }
        @Override
        public NamingEnumeration<Binding> listBindings(Name name) throws NamingException {
            if (!""hi/there"".equals(name.toString()))
            throw new IllegalArgumentException(""Expected hi/there"");
            return null;
        }
        @Override
        public NamingEnumeration<Binding> listBindings(String name) throws NamingException {
            return null;
        }
        @Override
        public void destroySubcontext(Name name) throws NamingException {
        }
        @Override
        public void destroySubcontext(String name) throws NamingException {
        }
        @Override
        public Context createSubcontext(Name name) throws NamingException {
            return null;
        }
        @Override
        public Context createSubcontext(String name) throws NamingException {
            return null;
        }
        @Override
        public Object lookupLink(Name name) throws NamingException {
            return null;
        }
        @Override
        public Object lookupLink(String name) throws NamingException {
            return null;
        }
        @Override
        public NameParser getNameParser(Name name) throws NamingException {
            return null;
        }
        @Override
        public NameParser getNameParser(String name) throws NamingException {
            return null;
        }
        @Override
        public Name composeName(Name name, Name prefix) throws NamingException {
            return null;
        }
        @Override
        public String composeName(String name, String prefix) throws NamingException {
            return null;
        }
        @Override
        public Object addToEnvironment(String propName, Object propVal) throws NamingException {
            return null;
        }
        @Override
        public Object removeFromEnvironment(String propName) throws NamingException {
            return null;
        }
        @Override
        public Hashtable<?, ?> getEnvironment() throws NamingException {
            return null;
        }
        @Override
        public void close() throws NamingException {
        }
        @Override
        public String getNameInNamespace() throws NamingException {
            return null;
        }
    });
    final NamingContext ctx = new NamingContext(new CompositeName(), store, null);
    final Object obj = ctx.lookup(new CompositeName(""foo-stored/again/blah/blah2""));
    ctx.listBindings(""foo-stored/again/hi/there"");
    assertNotNull(obj);
    assertEquals(new Integer(5), obj);
}",test order dependency,4
76966,Tencent_Firestorm,RssUtilsTest.testShuffleIndexSegment,"  @Test
  public void testShuffleIndexSegment() {
    ShuffleIndexResult shuffleIndexResult = new ShuffleIndexResult();
    List<ShuffleDataSegment> shuffleDataSegments =
        RssUtils.transIndexDataToSegments(shuffleIndexResult, 1000);
    assertTrue(shuffleDataSegments.isEmpty());

    int readBufferSize = 32;
    int totalLength = 0;
    List<BufferSegment> bufferSegments = Lists.newArrayList();
    int[] dataSegmentLength = new int[]{32, 16, 10, 32, 6};

    for (int i = 0; i < dataSegmentLength.length; ++i) {
      long offset = totalLength;
      int length = dataSegmentLength[i];
      bufferSegments.add(new BufferSegment(i, offset, length, i, i, i));
      totalLength += length;
    }

    // those 5 segment's data length are [32, 16, 10, 32, 6] so the index should be
    // split into 3 ShuffleDataSegment, which are [32, 16 + 10 + 32, 6]
    int expectedTotalSegmentNum = 3;
    ByteBuffer byteBuffer = ByteBuffer.allocate(5 * 40);

    for (BufferSegment bufferSegment : bufferSegments) {
      byteBuffer.putLong(bufferSegment.getOffset());
      byteBuffer.putInt(bufferSegment.getLength());
      byteBuffer.putInt(bufferSegment.getUncompressLength());
      byteBuffer.putLong(bufferSegment.getCrc());
      byteBuffer.putLong(bufferSegment.getBlockId());
      byteBuffer.putLong(bufferSegment.getTaskAttemptId());
    }

    byte[] data = byteBuffer.array();
    shuffleDataSegments = RssUtils.transIndexDataToSegments(new ShuffleIndexResult(data), readBufferSize);
    assertEquals(expectedTotalSegmentNum, shuffleDataSegments.size());

    assertEquals(0, shuffleDataSegments.get(0).getOffset());
    assertEquals(32, shuffleDataSegments.get(0).getLength());
    assertEquals(1, shuffleDataSegments.get(0).getBufferSegments().size());

    assertEquals(32, shuffleDataSegments.get(1).getOffset());
    assertEquals(58, shuffleDataSegments.get(1).getLength());
    assertEquals(3,shuffleDataSegments.get(1).getBufferSegments().size());

    assertEquals(90, shuffleDataSegments.get(2).getOffset());
    assertEquals(6, shuffleDataSegments.get(2).getLength());
    assertEquals(1, shuffleDataSegments.get(2).getBufferSegments().size());
  }
",non-flaky,5
299,apache_hadoop,TestRpcProgramNfs3.testGetattr,"  @Test(timeout = 60000)
  public void testGetattr() throws Exception {
    HdfsFileStatus status = nn.getRpcServer().getFileInfo(""/tmp/bar"");
    long dirId = status.getFileId();
    int namenodeId = Nfs3Utils.getNamenodeId(config);
    FileHandle handle = new FileHandle(dirId, namenodeId);
    XDR xdr_req = new XDR();
    GETATTR3Request req = new GETATTR3Request(handle);
    req.serialize(xdr_req);
    
    // Attempt by an unpriviledged user should fail.
    GETATTR3Response response1 = nfsd.getattr(xdr_req.asReadOnlyWrap(),
        securityHandlerUnpriviledged,
        new InetSocketAddress(""localhost"", 1234));
    assertEquals(""Incorrect return code"", Nfs3Status.NFS3ERR_ACCES,
        response1.getStatus());

    // Attempt by a priviledged user should pass.
    GETATTR3Response response2 = nfsd.getattr(xdr_req.asReadOnlyWrap(),
        securityHandler, new InetSocketAddress(""localhost"", 1234));
    assertEquals(""Incorrect return code"", Nfs3Status.NFS3_OK,
        response2.getStatus());
  }
",non-flaky,5
178007,aosp-mirror_platform_frameworks_support,PlaybackOverlayFragmentTest.workaroundVideoViewStealFocus,"    @Test
    public void workaroundVideoViewStealFocus() {
        Intent intent = new Intent();
        mActivity = activityTestRule.launchActivity(intent);

        assertFalse(mActivity.findViewById(R.id.videoView).hasFocus());
        assertTrue(mActivity.getPlaybackFragment().getView().hasFocus());
    }
",non-flaky,5
26761,MundaneImmortal_pair-distribution-app,DevPairsCombinationsTest.testIsRotationForOneDayPairWithEveryDayRotation,"	@Test
	public void testIsRotationForOneDayPairWithEveryDayRotation() {
		List<Developer> standardDevs = getStandardDevs();
		List<DayPairs> pastPairs = getPairsListFromDevs(standardDevs);
		pastPairs.remove(2);
		pastPairs.remove(1);
		DevPairCombinations devPairCombinations = new DevPairCombinations(pastPairs);
		
		
		assertThat(devPairCombinations.isRotationTime(Arrays.asList(""track1"", ""track2""), standardDevs, true), is(true));
	}
",non-flaky,5
60917,apache_druid,LongMinAveragerFactoryTest.testCreateAverager,"  @Test
  public void testCreateAverager()
  {
    AveragerFactory<?, ?> fac = new LongMinAveragerFactory(""test"", 5, 1, ""field"");
    Assert.assertThat(fac.createAverager(), IsInstanceOf.instanceOf(LongMinAverager.class));
  }
",non-flaky,5
304,apache_hadoop,TestRpcProgramNfs3.testRead,"  @Test(timeout = 60000)
  public void testRead() throws Exception {
    HdfsFileStatus status = nn.getRpcServer().getFileInfo(""/tmp/bar"");
    long dirId = status.getFileId();
    int namenodeId = Nfs3Utils.getNamenodeId(config);
    FileHandle handle = new FileHandle(dirId, namenodeId);

    READ3Request readReq = new READ3Request(handle, 0, 5);
    XDR xdr_req = new XDR();
    readReq.serialize(xdr_req);

    // Attempt by an unpriviledged user should fail.
    READ3Response response1 = nfsd.read(xdr_req.asReadOnlyWrap(),
        securityHandlerUnpriviledged,
        new InetSocketAddress(""localhost"", 1234));
    assertEquals(""Incorrect return code:"", Nfs3Status.NFS3ERR_ACCES,
        response1.getStatus());

    // Attempt by a priviledged user should pass.
    READ3Response response2 = nfsd.read(xdr_req.asReadOnlyWrap(),
        securityHandler, new InetSocketAddress(""localhost"", 1234));
    assertEquals(""Incorrect return code:"", Nfs3Status.NFS3_OK,
        response2.getStatus());
  }
",non-flaky,5
76973,Tencent_Firestorm,SparkClientWithLocalTest.readTest1,"  @Test
  public void readTest1() {
    String testAppId = ""localReadTest1"";
    registerApp(testAppId, Lists.newArrayList(new PartitionRange(0, 0)));
    Map<Long, byte[]> expectedData = Maps.newHashMap();
    Roaring64NavigableMap blockIdBitmap = Roaring64NavigableMap.bitmapOf();
    Roaring64NavigableMap taskIdBitmap = Roaring64NavigableMap.bitmapOf(0);
    createTestData(testAppId, expectedData, blockIdBitmap, taskIdBitmap);
    blockIdBitmap.addLong((1 << Constants.TASK_ATTEMPT_ID_MAX_LENGTH));
    ShuffleReadClientImpl readClient;
    readClient = new ShuffleReadClientImpl(StorageType.LOCALFILE.name(), testAppId, 0, 0, 100, 1,
        10, 1000, """", blockIdBitmap, taskIdBitmap, shuffleServerInfo, null);
    validateResult(readClient, expectedData);
    try {
      // can't find all expected block id, data loss
      readClient.checkProcessedBlockIds();
      fail(EXPECTED_EXCEPTION_MESSAGE);
    } catch (Exception e) {
      assertTrue(e.getMessage().contains(""Blocks read inconsistent:""));
    } finally {
      readClient.close();
    }
  }
",non-flaky,5
136460,kiwiproject_dropwizard-service-utilities,MonitoredJobTest.handle,"        @Test
                public void handle(MonitoredJob job, Exception exception) {
                    throw new RuntimeException(""error handling error"");
                }
",non-flaky,5
122549,vespa-engine_vespa,SystemCtlTest.testUnitExists,"    @Test
    public void testUnitExists() {
        SystemCtl systemCtl = new SystemCtl(terminal);

        terminal.expectCommand(""systemctl list-unit-files foo.service 2>&1"", 0,
                ""UNIT FILE STATE\n"" +
                        ""\n"" +
                        ""0 unit files listed.\n"");
        assertFalse(systemCtl.serviceExists(taskContext, ""foo""));

        terminal.expectCommand(""systemctl list-unit-files foo.service 2>&1"", 0,
                ""UNIT FILE           STATE  \n"" +
                        ""foo.service enabled\n"" +
                        ""\n"" +
                        ""1 unit files listed.\n"");
        assertTrue(systemCtl.serviceExists(taskContext, ""foo""));

        terminal.expectCommand(""systemctl list-unit-files foo.service 2>&1"", 0, ""garbage"");
        try {
            systemCtl.serviceExists(taskContext, ""foo"");
            fail();
        } catch (Exception e) {
            assertThat(e.getMessage(), containsString(""garbage""));
        }
    }
",non-flaky,5
94634,square_okhttp,InterceptorTest.intercept,"  @Test public void networkInterceptorModifiedRequestIsReturned() throws IOException {
      @Override public Response intercept(Chain chain) throws IOException {
        return chain.proceed(chain.request().newBuilder()
            .header(""User-Agent"", ""intercepted request"")
            .build());
      }
",non-flaky,5
54,androidx_androidx,testGenerateCleanupCallback_deletesOldFinishedWork,"@Test
public void testGenerateCleanupCallback_deletesOldFinishedWork() {
    Work work1 = new Work.Builder(TestWorker.class)
    .withInitialState(SUCCEEDED)
    .withPeriodStartTime(0L)
    .build();
    Work work2 = new Work.Builder(TestWorker.class).withPeriodStartTime(Long.MAX_VALUE).build();
    insertWorkSpecAndTags(work1);
    insertWorkSpecAndTags(work2);
    SupportSQLiteOpenHelper openHelper = mDatabase.getOpenHelper();
    SupportSQLiteDatabase db = openHelper.getWritableDatabase();
    WorkDatabase.generateCleanupCallback().onOpen(db);
    WorkSpecDao workSpecDao = mDatabase.workSpecDao();
    assertThat(workSpecDao.getWorkSpec(work1.getId()), is(nullValue()));
    assertThat(workSpecDao.getWorkSpec(work2.getId()), is(not(nullValue())));
}",time,2
159631,liquibase_liquibase,SQLiteIntegrationTest.smartDataLoad,"    @Test
    public void smartDataLoad() throws Exception {
        if (this.getDatabase() == null) {
            return;
        }

        Liquibase liquibase = createLiquibase(""changelogs/common/smartDataLoad.changelog.xml"");
        clearDatabase();

        try {
            liquibase.update(this.contexts);
        } catch (ValidationFailedException e) {
            e.printDescriptiveError(System.out);
            throw e;
        }

        // check that the automatically rollback now works too
        try {
            liquibase.rollback(new Date(0), this.contexts);
        } catch (ValidationFailedException e) {
            e.printDescriptiveError(System.out);
            throw e;
        }
    }
",non-flaky,5
122573,vespa-engine_vespa,MakeDirectoryTest.okIfParentExists,"    @Test
    public void okIfParentExists() {
        String path = ""/dir"";
        MakeDirectory makeDirectory = new MakeDirectory(fileSystem.getPath(path));
        assertTrue(makeDirectory.converge(context));
        assertTrue(Files.isDirectory(fileSystem.getPath(path)));

        MakeDirectory makeDirectory2 = new MakeDirectory(fileSystem.getPath(path));
        assertFalse(makeDirectory2.converge(context));
    }
",non-flaky,5
113775,salesforce_reactive-grpc,ReactiveBackpressureChunkerTest.applySubscribes,"    @Test
    public void applySubscribes() {
        ReactiveBackpressureChunker<Object> chunker = new ReactiveBackpressureChunker<Object>(16);

        UpstreamSubscription upstreamSubscription = new UpstreamSubscription();
        DownstreamSubscriber downstreamSubscriber = new DownstreamSubscriber();

        Subscriber<Object> chunkSubscriber = chunker.apply(downstreamSubscriber);
        assertThat(chunkSubscriber).isNotNull();

        chunkSubscriber.onSubscribe(upstreamSubscription);
        assertThat(downstreamSubscriber.upstreamSubscription).isNotNull();
    }
",non-flaky,5
70837,apache_kafka,WorkerSourceTaskTest.testCommit,"    @Test
    public void testCommit() throws Exception {
        // Test that the task commits properly when prompted
        createWorkerTask();

        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));
        EasyMock.expectLastCall();
        sourceTask.start(TASK_PROPS);
        EasyMock.expectLastCall();
        statusListener.onStartup(taskId);
        EasyMock.expectLastCall();

        // We'll wait for some data, then trigger a flush
        final CountDownLatch pollLatch = expectPolls(1);
        expectOffsetFlush(true);

        sourceTask.stop();
        EasyMock.expectLastCall();
        expectOffsetFlush(true);

        statusListener.onShutdown(taskId);
        EasyMock.expectLastCall();

        producer.close(EasyMock.anyObject(Duration.class));
        EasyMock.expectLastCall();

        transformationChain.close();
        EasyMock.expectLastCall();

        PowerMock.replayAll();

        workerTask.initialize(TASK_CONFIG);
        Future<?> taskFuture = executor.submit(workerTask);

        assertTrue(awaitLatch(pollLatch));
        assertTrue(workerTask.commitOffsets());
        workerTask.stop();
        assertTrue(workerTask.awaitStop(1000));

        taskFuture.get();
        assertPollMetrics(1);

        PowerMock.verifyAll();
    }
",non-flaky,5
70846,apache_kafka,WorkerSourceTaskTest.answer,"    @Test
    public void testSlowTaskStart() throws Exception {
        final CountDownLatch startupLatch = new CountDownLatch(1);
        final CountDownLatch finishStartupLatch = new CountDownLatch(1);

        createWorkerTask();

        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));
        EasyMock.expectLastCall();
        sourceTask.start(TASK_PROPS);
        EasyMock.expectLastCall().andAnswer(new IAnswer<Object>() {
            @Override
            public Object answer() throws Throwable {
                startupLatch.countDown();
                assertTrue(awaitLatch(finishStartupLatch));
                return null;
            }
",non-flaky,5
86051,graylog2_graylog2-server,NotificationGracePeriodServiceTest.outsideGracePeriod,"    @Test
    public void outsideGracePeriod() {
        final NotificationGracePeriodService notificationGracePeriodService = new NotificationGracePeriodService();

        when(settings.gracePeriodMs()).thenReturn(10L);
        when(definition.notificationSettings()).thenReturn(settings);
        when(definition.id()).thenReturn(""1234"");

        final Event event = new TestEvent();
        event.setKeyTuple(ImmutableList.of(""testkey""));
        final Event event2 = new TestEvent();
        event2.setKeyTuple(ImmutableList.of(""testkey""));
        event2.setEventTimestamp(event.getEventTimestamp().plus(11L));
        assertThat(notificationGracePeriodService.inGracePeriod(definition, ""5678"", event)).isFalse();
        assertThat(notificationGracePeriodService.inGracePeriod(definition, ""5678"", event2)).isFalse();
    }
",non-flaky,5
98637,nutzam_nutz,SimpleAdaptorTest.test_multi_err_ctxs2,"    @Test
    public void test_multi_err_ctxs2() {
        get(""/adaptor/multi/err/ctxs2/a/b?id=ABC"");
        assertEquals(200, resp.getStatus());

        get(""/adaptor/multi/err/ctxs2/a/b/ABC"");
        assertEquals(200, resp.getStatus());
    }
",non-flaky,5
43029,trinodb_trino,BaseDynamicPartitionPruningTest.testJoinWithSelectiveBuildSide,"    @Test(timeOut = 30_000)
    public void testJoinWithSelectiveBuildSide()
    {
        @Language(""SQL"") String selectQuery = ""SELECT * FROM partitioned_lineitem JOIN supplier ON partitioned_lineitem.suppkey = supplier.suppkey "" +
                ""AND supplier.name = 'Supplier#000000001'"";
        ResultWithQueryId<MaterializedResult> result = getDistributedQueryRunner().executeWithQueryId(
                getSession(),
                selectQuery);
        MaterializedResult expected = computeActual(withDynamicFilteringDisabled(), selectQuery);
        assertEqualsIgnoreOrder(result.getResult(), expected);

        OperatorStats probeStats = searchScanFilterAndProjectOperatorStats(result.getQueryId(), getQualifiedTableName(PARTITIONED_LINEITEM));
        // Probe-side is partially scanned
        assertEquals(probeStats.getInputPositions(), 615L);

        DynamicFiltersStats dynamicFiltersStats = getDynamicFilteringStats(result.getQueryId());
        assertEquals(dynamicFiltersStats.getTotalDynamicFilters(), 1L);
        assertEquals(dynamicFiltersStats.getLazyDynamicFilters(), 1L);
        assertEquals(dynamicFiltersStats.getReplicatedDynamicFilters(), 0L);
        assertEquals(dynamicFiltersStats.getDynamicFiltersCompleted(), 1L);

        DynamicFilterDomainStats domainStats = getOnlyElement(dynamicFiltersStats.getDynamicFilterDomainStats());
        assertEquals(domainStats.getSimplifiedDomain(), singleValue(BIGINT, 1L).toString(getSession().toConnectorSession()));
    }
",non-flaky,5
84565,apache_zookeeper,DistributedQueueTest.testRemove3,"    @Test
    public void testRemove3() throws Exception {
        createNremoveMtest(""/testRemove3"", 1000, 1000);
    }
",non-flaky,5
113731,salesforce_reactive-grpc,EndToEndIntegrationTest.oneToMany,"    @Test
    public void oneToMany() throws IOException {
        ReactorGreeterGrpc.ReactorGreeterStub stub = ReactorGreeterGrpc.newReactorStub(channel);
        Mono<HelloRequest> req = Mono.just(HelloRequest.newBuilder().setName(""reactorjava"").build());
        Flux<HelloResponse> resp = req.as(stub::sayHelloRespStream);

        StepVerifier.create(resp.map(HelloResponse::getMessage))
                .expectNext(""Hello reactorjava"", ""Hi reactorjava"", ""Greetings reactorjava"")
                .verifyComplete();
    }
",non-flaky,5
159665,liquibase_liquibase,MssqlIntegrationTest.defaultValuesTests,"    @Test
    public void defaultValuesTests() throws Exception {
        clearDatabase();

        assumeNotNull(this.getDatabase());

        Liquibase liquibase = createLiquibase(""changelogs/mssql/issues/default.values.xml"");
        liquibase.update((String) null);

        DatabaseSnapshot snapshot = SnapshotGeneratorFactory.getInstance().createSnapshot(CatalogAndSchema.DEFAULT, this.getDatabase(), new SnapshotControl(getDatabase()));

        for (Table table : snapshot.get(Table.class)) {
            for (Column column : table.getColumns()) {
                if (column.getName().toLowerCase().endsWith(""_default"")) {
                    Object defaultValue = column.getDefaultValue();
                    assertNotNull(""Null default value for "" + table.getName() + ""."" + column.getName(), defaultValue);
                    if (column.getName().toLowerCase().contains(""date"") || column.getName().toLowerCase().contains(""time"")) {
                        if (defaultValue instanceof String) {
                            assertTrue(defaultValue.equals(""2017-12-09 23:52:39.1234567 +01:00""));
                        } else if (defaultValue instanceof DatabaseFunction) {
                            ((DatabaseFunction) defaultValue).getValue().contains(""type datetimeoffset"");
                        } else if (defaultValue instanceof Time) {
                            Calendar calendar = Calendar.getInstance();
                            calendar.setTime(((Date) defaultValue));
                            assertEquals(23, calendar.get(Calendar.HOUR_OF_DAY));
                            assertEquals(52, calendar.get(Calendar.MINUTE));
                            assertEquals(39, calendar.get(Calendar.SECOND));
                        } else {
                            assertTrue(""Unexpected default type ""+defaultValue.getClass().getName()+"" for "" + table.getName() + ""."" + column.getName(), defaultValue instanceof Date);
                            Calendar calendar = Calendar.getInstance();
                            calendar.setTime(((Date) defaultValue));
                            assertEquals(9, calendar.get(Calendar.DAY_OF_MONTH));
                            assertEquals(11, calendar.get(Calendar.MONTH));
                            assertEquals(2017, calendar.get(Calendar.YEAR));
                        }
                    } else if (column.getName().toLowerCase().contains(""char_"")) {
                        assertTrue(""Unexpected default type ""+defaultValue.getClass().getName()+"" for "" + table.getName() + ""."" + column.getName(), defaultValue instanceof String);
                    } else if (column.getName().toLowerCase().contains(""binary_"")) {
                        assertTrue(""Unexpected default type ""+defaultValue.getClass().getName()+"" for "" + table.getName() + ""."" + column.getName(), defaultValue instanceof DatabaseFunction);
                    } else {
                        assertTrue(""Unexpected default type ""+defaultValue.getClass().getName()+"" for "" + table.getName() + ""."" + column.getName(), defaultValue instanceof Number);
                        assertEquals(1, ((Number) defaultValue).intValue());
                    }
                }
            }
        }
    }
",non-flaky,5
106630,Alluxio_alluxio,AlluxioJniFuseFileSystemTest.renameNewExist,"  @Test
  public void renameNewExist() throws Exception {
    AlluxioURI oldPath = BASE_EXPECTED_URI.join(""/old"");
    AlluxioURI newPath = BASE_EXPECTED_URI.join(""/new"");
    doThrow(new FileAlreadyExistsException(""File /new already exists""))
        .when(mFileSystem).rename(oldPath, newPath);
    assertEquals(-ErrorCodes.EEXIST(), mFuseFs.rename(""/old"", ""/new""));
  }
",non-flaky,5
291,trinodb_trino,testAuthenticationFromMultipleThreadsWithCachedToken,"@Test
public void testAuthenticationFromMultipleThreadsWithCachedToken()
{
    ExecutorService executor = newCachedThreadPool(daemonThreadsNamed(this.getClass().getName() + ""%n""));
    MockTokenPoller tokenPoller = new MockTokenPoller()
    .withResult(URI.create(""http://token.uri""), successful(new Token(""valid-token"")));
    MockRedirectHandler redirectHandler = new MockRedirectHandler()
    .sleepOnRedirect(Duration.ofMillis(10));
    ExternalAuthenticator authenticator = new ExternalAuthenticator(redirectHandler, tokenPoller, KnownToken.memoryCached(), Duration.ofSeconds(1));
    List<Future<Request>> requests = times(
    4, () -> authenticator.authenticate(null, getUnauthorizedResponse(""Bearer x_token_server=\""http://token.uri\"", x_redirect_server=\""http://redirect.uri\"""")))
    .map(executor::submit)
    .collect(toImmutableList());
    ConcurrentRequestAssertion assertion = new ConcurrentRequestAssertion(requests);
    assertion.requests()
    .extracting(Request::headers)
    .extracting(headers -> headers.get(AUTHORIZATION))
    .containsOnly(""Bearer valid-token"");
    assertion.assertThatNoExceptionsHasBeenThrown();
    assertThat(redirectHandler.getRedirectionCount()).isEqualTo(1);
}",concurrency,1
95709,togglz_togglz,EnumBasedFeatureProviderTest.shouldFailForNonEnumType,"    @Test(expected = IllegalArgumentException.class)
    public void shouldFailForNonEnumType() {
        new EnumBasedFeatureProvider(NotAnEnum.class);
    }
",non-flaky,5
20923,NationalSecurityAgency_timely,MetricParserTest.testParseWithEscapedCharacters,"    @Test
    public void testParseWithEscapedCharacters() {

        MetricParser parser = new MetricParser();
        Metric m = parser.parse(""put mymetric 12341234 5.0 tag1=value1,value1 tag2=value2=value2"");

        Assert.assertEquals(""mymetric"", m.getName());
        Assert.assertEquals(12341234, (long) m.getValue().getTimestamp());
        Assert.assertEquals(5.0, (double) m.getValue().getMeasure(), 0);
        List<Tag> expected = new ArrayList<>();
        expected.add(new Tag(""tag1"", ""value1,value1""));
        expected.add(new Tag(""tag2"", ""value2=value2""));
        Assert.assertEquals(expected, m.getTags());
    }
",non-flaky,5
122593,vespa-engine_vespa,FileFinderTest.match_file_and_directory_with_same_name,"        @Test
        public void match_file_and_directory_with_same_name() {
            assertFileHelper(FileFinder.from(testRoot())
                            .match(FileFinder.nameEndsWith(""test"")),

                    of(""test"", ""test/subdir-1/test""),
                    of(""file-1.json"", ""test.json"", ""test.txt""));
        }
",non-flaky,5
98335,spotify_docker-client,DockerCertificatesTest.testReadPrivateKeyPkcs1,"  @Test
  public void testReadPrivateKeyPkcs1() throws Exception {
    DockerCertificates.builder()
        .dockerCertPath(getCertPath())
        .clientKeyPath(getVariant(""key-pkcs1.pem""))
        .sslFactory(factory)
        .build();

    verify(factory).newSslContext(keyStore.capture(), password.capture(), trustStore.capture());

    final KeyStore.PrivateKeyEntry pkEntry = (KeyStore.PrivateKeyEntry) keyStore.getValue()
        .getEntry(""key"", new KeyStore.PasswordProtection(password.getValue()));

    assertNotNull(pkEntry.getPrivateKey());
  }
",non-flaky,5
26741,MundaneImmortal_pair-distribution-app,DeveloperTest.testHashCodeOfEqualInstances,"	@Test
	public void testHashCodeOfEqualInstances() {
		Developer developer = new Developer(""developerId"");
		Developer sameDeveloper = new Developer(""developerId"");
		
		assertThat(developer.hashCode(), is(sameDeveloper.hashCode()));
	}
",non-flaky,5
70785,apache_kafka,StartAndStopLatchTest.shouldReturnTrueWhenAwaitingForStartAndStopToComplete,"    @Test
    public void shouldReturnTrueWhenAwaitingForStartAndStopToComplete() throws Throwable {
        latch = new StartAndStopLatch(1, 1, this::complete, dependents, clock);
        future = asyncAwait(100);
        latch.recordStart();
        latch.recordStop();
        clock.sleep(10);
        assertTrue(future.get(200, TimeUnit.MILLISECONDS));
        assertTrue(future.isDone());
    }
",non-flaky,5
106609,Alluxio_alluxio,FileStatTest.dataConsistency,"  @Test
  public void dataConsistency() {
    FileStat stat = FileStat.of(ByteBuffer.allocateDirect(256));
    int mode = FileStat.ALL_READ | FileStat.ALL_WRITE | FileStat.S_IFDIR;
    long size = 0x123456789888721L;
    stat.st_mode.set(mode);
    stat.st_size.set(size);
    assertEquals(mode, stat.st_mode.intValue());
    assertEquals(size, stat.st_size.longValue());

    ByteBuffer buf = stat.getBuffer();
    assertEquals(mode, buf.getShort((int) stat.st_mode.offset()));
    assertEquals(size, buf.getLong((int) stat.st_size.offset()));
  }
",non-flaky,5
38254,palantir_atlasdb,AbstractAtlasDbKeyValueServiceTest.testGetRangeWithHistoryThrowsOnError,"    @Test
    public void testGetRangeWithHistoryThrowsOnError() {
        try {
            keyValueService.getRangeWithHistory(TEST_NONEXISTING_TABLE, RangeRequest.all(), Long.MAX_VALUE).hasNext();
            Assert.fail(""getRangeWithHistory must throw on failure"");
        } catch (RuntimeException e) {
            // Expected
        }
    }
",non-flaky,5
136455,kiwiproject_dropwizard-service-utilities,StandardExceptionMappersTest.setRegisterDefaultExceptionMappers,"        @Test
                public void setRegisterDefaultExceptionMappers(Boolean registerDefaultExceptionMappers) {
                    throw new RuntimeException(""oops"");
                }
",non-flaky,5
177198,line_armeria,RequestContextStorageCustomizingTest.pop,"    @Test
            public void pop(RequestContext current, @Nullable RequestContext toRestore) {
                popped.set(true);
                super.pop(current, toRestore);
            }
",non-flaky,5
77437,opensearch-project_OpenSearch,DependencyLicensesTaskTests.givenProjectWithoutLicensesDirButWithDependenciesThenShouldThrowException,"    @Test
    public void givenProjectWithoutLicensesDirButWithDependenciesThenShouldThrowException() throws Exception {
        expectedException.expect(GradleException.class);
        expectedException.expectMessage(containsString(""does not exist, but there are dependencies""));

        project.getDependencies().add(""compile"", dependency);
        task.get().checkDependencies();
    }
",non-flaky,5
114045,aws_aws-sdk-java-v2,AsyncUpdateItemWithResponseIntegrationTest.putItem_returnItemCollectionMetrics_set_itemCollectionMetricsNotNull,"    @Test
    public void putItem_returnItemCollectionMetrics_set_itemCollectionMetricsNotNull() {
        Record record = new Record().setId(1).setId2(10);
        UpdateItemEnhancedRequest<Record> request = UpdateItemEnhancedRequest.builder(Record.class)
                                                                             .item(record)
                                                                             .returnItemCollectionMetrics(ReturnItemCollectionMetrics.SIZE)
                                                                             .build();

        UpdateItemEnhancedResponse<Record> response = mappedTable.updateItemWithResponse(request).join();

        assertThat(response.itemCollectionMetrics()).isNotNull();
    }
",non-flaky,5
249,spring-projects_spring-framework,validUsage,"@Test
void validUsage() throws Exception {
    assertThat(stopWatch.isRunning()).isFalse();
    stopWatch.start(name1);
    Thread.sleep(duration1);
    assertThat(stopWatch.isRunning()).isTrue();
    assertThat(stopWatch.currentTaskName()).isEqualTo(name1);
    stopWatch.stop();
    assertThat(stopWatch.isRunning()).isFalse();
    assertThat(stopWatch.getLastTaskTimeNanos())
    .as(""last task time in nanoseconds for task #2"")
    .isGreaterThanOrEqualTo(millisToNanos(duration2))
    .isLessThanOrEqualTo(millisToNanos(duration2 + fudgeFactor));
    assertThat(stopWatch.getTotalTimeMillis())
    .as(""total time in milliseconds for tasks #1 and #2"")
    .isGreaterThanOrEqualTo(duration1 + duration2 - fudgeFactor)
    .isLessThanOrEqualTo(duration1 + duration2 + fudgeFactor);
    assertThat(stopWatch.getTotalTimeSeconds())
    .as(""total time in seconds for task #2"")
    .isGreaterThanOrEqualTo((duration1 + duration2 - fudgeFactor) / 1000.0)
    .isLessThanOrEqualTo((duration1 + duration2 + fudgeFactor) / 1000.0);
    assertThat(stopWatch.getTaskCount()).isEqualTo(2);
    assertThat(stopWatch.prettyPrint()).contains(name1, name2);
    assertThat(stopWatch.getTaskInfo()).extracting(TaskInfo::getTaskName).containsExactly(name1, name2);
    assertThat(stopWatch.toString()).contains(ID, name1, name2);
    assertThat(stopWatch.getId()).isEqualTo(ID);
}",time,2
104680,apache_pinot,RealtimeToOfflineSegmentsMinionClusterIntegrationTest.testHardcodedSqlQueries,"  @Test(enabled = false)
  public void testHardcodedSqlQueries() {
  }
",non-flaky,5
133925,cdancy_jenkins-rest,StatisticsApiLiveTest.testOverallLoad,"    @Test
    public void testOverallLoad() {
        OverallLoad load = api().overallLoad();
        assertNotNull(load);
    }
",non-flaky,5
160434,ConsenSys_teku,StateSelectorFactoryTest.forSlot_shouldGetStateAtSlotExact,"  @Test
  public void forSlot_shouldGetStateAtSlotExact() throws ExecutionException, InterruptedException {
    when(client.getStateAtSlotExact(state.getSlot()))
        .thenReturn(SafeFuture.completedFuture(Optional.of(state)));
    Optional<BeaconState> result = factory.forSlot(state.getSlot()).getState().get();
    assertThat(result).isEqualTo(Optional.of(state));
    verify(client).getStateAtSlotExact(state.getSlot());
  }
",non-flaky,5
133900,cdancy_jenkins-rest,PluginManagerApiLiveTest.testInstallNecessaryPlugins,"    @Test
    public void testInstallNecessaryPlugins() {
        final RequestStatus status = api().installNecessaryPlugins(""artifactory@2.2.1"");
        assertNotNull(status);
        assertTrue(status.value());
        assertTrue(status.errors().isEmpty());
    }
",non-flaky,5
122563,vespa-engine_vespa,CommandLineTest.testMapEachLine,"    @Test
    public void testMapEachLine() {
        assertEquals(
                1 + 2 + 3,
                terminal.ignoreCommand(""1\n2\n3\n"")
                        .newCommandLine(context)
                        .add(""foo"")
                        .execute()
                        .mapEachLine(Integer::valueOf)
                        .stream()
                        .mapToInt(i -> i)
                        .sum());
    }
",non-flaky,5
86069,graylog2_graylog2-server,AggregationEventProcessorTest.testEventsFromAggregationResultWithConditions,"    @Test
    public void testEventsFromAggregationResultWithConditions() {
        final DateTime now = DateTime.now(DateTimeZone.UTC);
        final AbsoluteRange timerange = AbsoluteRange.create(now.minusHours(1), now.plusHours(1));

        // We expect to get the end of the aggregation timerange as event time
        final TestEvent event1 = new TestEvent(timerange.to());
        final TestEvent event2 = new TestEvent(timerange.to());
        when(eventFactory.createEvent(any(EventDefinition.class), eq(now), anyString()))
                .thenReturn(event1)  // first invocation return value
                .thenReturn(event2); // second invocation return value

        // There should only be one result because the second result's ""abc123"" value is less than 40. (it is 23)
        // See result builder below
        final AggregationConditions conditions = AggregationConditions.builder()
                .expression(Expr.And.create(
                        Expr.Greater.create(Expr.NumberReference.create(""abc123""), Expr.NumberValue.create(40.0d)),
                        Expr.Lesser.create(Expr.NumberReference.create(""xyz789""), Expr.NumberValue.create(2.0d))
                ))
                .build();

        final EventDefinitionDto eventDefinitionDto = EventDefinitionDto.builder()
                .id(""dto-id-1"")
                .title(""Test Aggregation"")
                .description(""A test aggregation event processors"")
                .priority(1)
                .alert(false)
                .notificationSettings(EventNotificationSettings.withGracePeriod(60000))
                .config(AggregationEventProcessorConfig.builder()
                        .query("""")
                        .streams(ImmutableSet.of())
                        .groupBy(ImmutableList.of(""group_field_one"", ""group_field_two""))
                        .series(ImmutableList.of())
                        .conditions(conditions)
                        .searchWithinMs(30000)
                        .executeEveryMs(30000)
                        .build())
                .keySpec(ImmutableList.of())
                .build();
        final AggregationEventProcessorParameters parameters = AggregationEventProcessorParameters.builder()
                .timerange(timerange)
                .build();

        final AggregationEventProcessor eventProcessor = new AggregationEventProcessor(eventDefinitionDto, searchFactory, eventProcessorDependencyCheck, stateService, moreSearch, streamService, messages);

        final AggregationResult result = AggregationResult.builder()
                .effectiveTimerange(timerange)
                .totalAggregatedMessages(1)
                .sourceStreams(ImmutableSet.of(""stream-1"", ""stream-2"", ""stream-3""))
                .keyResults(ImmutableList.of(
                        AggregationKeyResult.builder()
                                .key(ImmutableList.of(""one"", ""two""))
                                .timestamp(now)
                                .seriesValues(ImmutableList.of(
                                        AggregationSeriesValue.builder()
                                                .key(ImmutableList.of(""a""))
                                                .value(42.0d)
                                                .series(AggregationSeries.builder()
                                                        .id(""abc123"")
                                                        .function(AggregationFunction.COUNT)
                                                        .field(""source"")
                                                        .build())
                                                .build(),
                                        AggregationSeriesValue.builder()
                                                .key(ImmutableList.of(""a""))
                                                .value(1.0d)
                                                .series(AggregationSeries.builder()
                                                        .id(""xyz789"")
                                                        .function(AggregationFunction.CARD)
                                                        .field(""source"")
                                                        .build())
                                                .build()
                                ))
                                .build(),
                        AggregationKeyResult.builder()
                                .key(ImmutableList.of(now.toString(), ""one"", ""two""))
                                .seriesValues(ImmutableList.of(
                                        AggregationSeriesValue.builder()
                                                .key(ImmutableList.of(""a""))
                                                .value(23.0d) // Doesn't match condition
                                                .series(AggregationSeries.builder()
                                                        .id(""abc123"")
                                                        .function(AggregationFunction.COUNT)
                                                        .field(""source"")
                                                        .build())
                                                .build(),
                                        AggregationSeriesValue.builder()
                                                .key(ImmutableList.of(""a""))
                                                .value(1.0d)
                                                .series(AggregationSeries.builder()
                                                        .id(""xyz789"")
                                                        .function(AggregationFunction.CARD)
                                                        .field(""source"")
                                                        .build())
                                                .build()
                                ))
                                .build()
                ))
                .build();

        final ImmutableList<EventWithContext> eventsWithContext = eventProcessor.eventsFromAggregationResult(eventFactory, parameters, result);

        assertThat(eventsWithContext).hasSize(1);

        assertThat(eventsWithContext.get(0)).satisfies(eventWithContext -> {
            final Event event = eventWithContext.event();

            assertThat(event.getId()).isEqualTo(event1.getId());
            assertThat(event.getMessage()).isEqualTo(event1.getMessage());
            assertThat(event.getEventTimestamp()).isEqualTo(timerange.to());
            assertThat(event.getTimerangeStart()).isEqualTo(timerange.from());
            assertThat(event.getTimerangeEnd()).isEqualTo(timerange.to());
            // Should contain all streams because when config.streams is empty, we search in all streams
            assertThat(event.getSourceStreams()).containsOnly(""stream-1"", ""stream-2"", ""stream-3"");

            final Message message = eventWithContext.messageContext().orElse(null);

            assertThat(message).isNotNull();
            assertThat(message.getField(""group_field_one"")).isEqualTo(""one"");
            assertThat(message.getField(""group_field_two"")).isEqualTo(""two"");
            assertThat(message.getField(""aggregation_key"")).isEqualTo(""one|two"");
            assertThat(message.getField(""aggregation_value_count_source"")).isEqualTo(42.0d);
            assertThat(message.getField(""aggregation_value_card_source"")).isEqualTo(1.0d);
        });
    }
",non-flaky,5
21170,androidx_androidx,PreferenceGroupInitialExpandedChildrenCountTest.createPreferenceGroupAdapter_expandButtonSummaryShouldListVisiblePreferencesOnly,"    @Test
    public void createPreferenceGroupAdapter_expandButtonSummaryShouldListVisiblePreferencesOnly() {
        mScreen.setInitialExpandedChildrenCount(INITIAL_EXPANDED_COUNT);
        mPreferenceList.get(INITIAL_EXPANDED_COUNT + 1).setVisible(false);
        mPreferenceList.get(INITIAL_EXPANDED_COUNT + 4).setVisible(false);
        PreferenceGroupAdapter preferenceGroupAdapter = new PreferenceGroupAdapter(mScreen);
        // Preference 5 to Preference 9 are collapsed, only preferences 5, 7, 8 are visible
        CharSequence summary = mPreferenceList.get(INITIAL_EXPANDED_COUNT).getTitle();
        summary = mContext.getString(R.string.summary_collapsed_preference_list,
                summary, mPreferenceList.get(INITIAL_EXPANDED_COUNT + 2).getTitle());
        summary = mContext.getString(R.string.summary_collapsed_preference_list,
                summary, mPreferenceList.get(INITIAL_EXPANDED_COUNT + 3).getTitle());
        final Preference expandButton = preferenceGroupAdapter.getItem(INITIAL_EXPANDED_COUNT);
        assertEquals(summary, expandButton.getSummary());
    }
",non-flaky,5
77708,pholser_junit-quickcheck,PrimitivePropertyParameterTypesTest.shouldHold,"    @Test public void shrinkingPrimitiveNegativeDouble() {
        @Property public void shouldHold(
            @InRange(minDouble = -4400.998877665544, maxDouble = -777.012301230123) double d) {

            values.add(d);

            fail();
        }
",non-flaky,5
159630,liquibase_liquibase,SQLiteIntegrationTest.testRunChangeLog,"    @Test
    public void testRunChangeLog() throws Exception {
        super.testRunChangeLog();    //To change body of overridden methods use File | Settings | File Templates.
    }
",non-flaky,5
70857,apache_kafka,TransformationConfigTest.testEmbeddedConfigRegexRouter,"    @Test
    public void testEmbeddedConfigRegexRouter() {
        // Validate that we can construct a Connector config containing the extended config for the transform
        HashMap<String, String> connProps = new HashMap<>();
        connProps.put(""name"", ""foo"");
        connProps.put(""connector.class"", MockConnector.class.getName());
        connProps.put(""transforms"", ""example"");
        connProps.put(""transforms.example.type"", RegexRouter.class.getName());
        connProps.put(""transforms.example.regex"", ""(.*)"");
        connProps.put(""transforms.example.replacement"", ""prefix-$1"");

        Plugins plugins = null; // Safe when we're only constructing the config
        new ConnectorConfig(plugins, connProps);
    }
",non-flaky,5
170506,eclipse_jetty.project,MBeanContainerTest.testDump,"    @Test
    public void testDump()
    {
        assertNotNull(mbeanContainer.dump(), ""Dump operation shouldn't return null if operation is success"");
    }
",non-flaky,5
135011,undertow-io_undertow,ClassUtilsTest.testExtractHandlerType,"    @Test
    public void testExtractHandlerType() {

        Map<Class<?>, Boolean>  types = ClassUtils.getHandlerTypes(FinalIm.class);
        Assert.assertEquals(1, types.size());
        Assert.assertTrue(types.containsKey(ByteBuffer.class));

        types = ClassUtils.getHandlerTypes(ByteBufferFromSuperClassEncoder.class);
        Assert.assertEquals(1, types.size());
        Assert.assertTrue(types.containsKey(ByteBuffer.class));

        types = ClassUtils.getHandlerTypes(MessageHandlerImpl.class);
        Assert.assertEquals(1, types.size());
        Assert.assertTrue(types.containsKey(ByteBuffer.class));
        Assert.assertFalse(types.get(ByteBuffer.class));

        types = ClassUtils.getHandlerTypes(AsyncMessageHandlerImpl.class);
        Assert.assertEquals(1, types.size());
        Assert.assertTrue(types.containsKey(ByteBuffer.class));
        Assert.assertTrue(types.get(ByteBuffer.class));

        types = ClassUtils.getHandlerTypes(ComplexMessageHandlerImpl.class);
        Assert.assertEquals(2, types.size());
        Assert.assertTrue(types.containsKey(ByteBuffer.class));
        Assert.assertFalse(types.get(ByteBuffer.class));
        Assert.assertTrue(types.containsKey(String.class));
        Assert.assertTrue(types.get(String.class));
        Assert.assertFalse(types.containsKey(byte[].class));

    }
",non-flaky,5
76939,Tencent_Firestorm,ClientUtilsTest.getBlockIdTest,"  @Test
  public void getBlockIdTest() {
    // max value of blockId
    assertEquals(
        new Long(9223372036854775807L), ClientUtils.getBlockId(16777215, 1048575, 524287));
    // just a random test
    assertEquals(
        new Long(1759218709299300L), ClientUtils.getBlockId(100, 100, 100));
    // min value of blockId
    assertEquals(
        new Long(0L), ClientUtils.getBlockId(0, 0, 0));
    try {
      ClientUtils.getBlockId(16777216, 0, 0);
      fail(EXCEPTION_EXPECTED);
    } catch (Exception e) {
      assertTrue(e.getMessage().contains(""Can't support partitionId[16777216], the max value should be 16777215""));
    }
    try {
      ClientUtils.getBlockId(0, 1048576, 0);
      fail(EXCEPTION_EXPECTED);
    } catch (Exception e) {
      assertTrue(e.getMessage().contains(""Can't support taskAttemptId[1048576], the max value should be 1048575""));
    }
    try {
      ClientUtils.getBlockId(0, 0, 524288);
      fail(EXCEPTION_EXPECTED);
    } catch (Exception e) {
      assertTrue(e.getMessage().contains(""Can't support sequence[524288], the max value should be 524287""));
    }
  }
",non-flaky,5
89332,apache_samza,TestKafkaSystemAdminJava.testCreateChangelogStreamWithSpecialCharsInTopicName,"  @Test
  public void testCreateChangelogStreamWithSpecialCharsInTopicName() {
    // cannot contain period
    testCreateChangelogStreamHelp(""test-Change_Log-Stream"");
  }
",non-flaky,5
162744,OpenAPITools_openapi-generator,CategoryTest.nameTest,"    @Test
    public void nameTest() {
        // TODO: test name
    }
",non-flaky,5
38221,palantir_atlasdb,TextUtilsTest.testTruncateStringToCharLength,"    @Test
    public void testTruncateStringToCharLength() {
        String string = ""abcde"";
        assertEquals(string, TextUtils.truncateStringToCharLength(string, 5, ""...""));
        assertEquals(string, TextUtils.truncateStringToCharLength(string, 5, """"));
        assertEquals(string, TextUtils.truncateStringToCharLength(string, 6, ""...""));
        assertEquals(string, TextUtils.truncateStringToCharLength(string, 6, """"));
        assertEquals(""a..."", TextUtils.truncateStringToCharLength(string, 4, ""...""));
        assertEquals(""abcd"", TextUtils.truncateStringToCharLength(string, 4, """"));
    }
",non-flaky,5
122605,vespa-engine_vespa,UnixPathTest.createParents,"    @Test
    public void createParents() {
        Path parentDirectory = fs.getPath(""/a/b/c"");
        Path filePath = parentDirectory.resolve(""bar"");
        UnixPath path = new UnixPath(filePath);

        assertFalse(Files.exists(fs.getPath(""/a"")));
        path.createParents();
        assertTrue(Files.exists(parentDirectory));
    }
",non-flaky,5
77451,opensearch-project_OpenSearch,DependencyLicensesTaskTests.givenProjectWithoutLicensesDirWhenAskingForShaFilesThenShouldThrowException,"    @Test
    public void givenProjectWithoutLicensesDirWhenAskingForShaFilesThenShouldThrowException() {
        expectedException.expect(GradleException.class);
        expectedException.expectMessage(containsString(""isn't a valid directory""));

        task.get().getShaFiles();
    }
",non-flaky,5
92615,FasterXML_jackson-databind,TestPropertyCreatorSubtypesExternalPropertyMissingProperty.testDeserializationPresent,"    @Test
    public void testDeserializationPresent() throws Exception {
        checkOrangeBox(BOX_READER_PASS);
        checkAppleBox(BOX_READER_PASS);

        checkOrangeBox(BOX_READER_FAIL);
        checkAppleBox(BOX_READER_FAIL);
    }
",non-flaky,5
30984,camunda-cloud_zeebe,ObjectMappingDefaultValuesTest.shouldWriteDefaultValue,"  @Test
  public void shouldWriteDefaultValue() {
    // given
    final long defaultValue = -1L;
    final DefaultValuesPOJO pojo = new DefaultValuesPOJO(defaultValue);
    pojo.setNoDefaultValueProperty(123123L);

    final UnsafeBuffer buf = new UnsafeBuffer(new byte[pojo.getLength()]);

    // when
    pojo.write(buf, 0);

    // then
    final MsgPackReader reader = new MsgPackReader();
    reader.wrap(buf, 0, buf.capacity());
    final Map<String, Object> msgPackMap = MsgPackUtil.asMap(buf, 0, buf.capacity());

    assertThat(msgPackMap).hasSize(2);
    assertThat(msgPackMap)
        .contains(entry(""noDefaultValueProp"", 123123L), entry(""defaultValueProp"", defaultValue));
  }
",non-flaky,5
21199,androidx_androidx,PreferenceDataStoreTest.testPutStringWithDataStoreOnMgr,"    @Test
    public void testPutStringWithDataStoreOnMgr() {
        mManager.setPreferenceDataStore(mDataStore);
        mScreen.addPreference(mPreference);
        putStringTestCommon();
    }
",non-flaky,5
106573,Alluxio_alluxio,UfsOperationsTest.ufsContractTest,"  @Test
  public void ufsContractTest() throws Exception {
    File ufsPath = mFolder.newFolder(""ufsContractTest"");

    try {
      UnderFileSystemContractTest
          .main(new String[] {""--path"", ""file://"" + ufsPath.getAbsolutePath()});
    } catch (Throwable e) {
      fail(""UFS contract failed: "" + e.getMessage());
    }
  }
",non-flaky,5
162363,testcontainers_testcontainers-java,PublicBinaryAPITest.testMethodArguments,"    @Test
    public void testMethodArguments() {
        assertThat(classNode.methods)
                .filteredOn(it -> (it.access & (Opcodes.ACC_PUBLIC | Opcodes.ACC_PROTECTED)) != 0)
                .allSatisfy(method -> assertThat(Arrays.asList(Type.getArgumentTypes(method.desc)))
                        .extracting(Type::getClassName)
                        .allSatisfy(it -> assertThat(it).doesNotStartWith(SHADED_PACKAGE))
                );
    }
",non-flaky,5
112642,tbsalling_aismessages,BinaryBroadcastMessageTest.canDecodeMultiSentenceUnknownApplicationSpecificMessage,"    @Test
    public void canDecodeMultiSentenceUnknownApplicationSpecificMessage() {
        AISMessage aisMessage = AISMessage.create(
                NMEAMessage.fromString(""!AIVDM,2,1,8,A,803Iw60F14m1CPH4mDT4RDi@000003RP9iHb@001irBQ0@4gAaI00000261Q,0*04""),
                NMEAMessage.fromString(""!AIVDM,2,2,8,A,pGp07IiTPi@BkU5pSwrrbs8219RW=R19RV=R19RVER19RVKtDb>jq20000>4,0*47"")
        );

        System.out.println(aisMessage.toString());

        assertEquals(88, ((BinaryBroadcastMessage) aisMessage).getDesignatedAreaCode().intValue());
        assertEquals(4, ((BinaryBroadcastMessage) aisMessage).getFunctionalId().intValue());
        assertEquals(UnknownApplicationSpecificMessage.class, ((BinaryBroadcastMessage) aisMessage).getApplicationSpecificMessage().getClass());
    }
",non-flaky,5
104613,apache_pinot,SegmentPartitionLLCRealtimeClusterIntegrationTest.testNonPartitionedStream,"  @Test(dependsOnMethods = ""testPartitionRouting"")
  public void testNonPartitionedStream()
      throws Exception {
    // Push the second Avro file into Kafka without partitioning
    _partitionColumn = null;
    pushAvroIntoKafka(Collections.singletonList(_avroFiles.get(1)));

    // Wait for all documents loaded
    _countStarResult += NUM_DOCS_IN_SECOND_AVRO_FILE;
    waitForAllDocsLoaded(600_000L);

    // Check partition metadata
    int[] numSegmentsForPartition = new int[2];
    String realtimeTableName = TableNameBuilder.REALTIME.tableNameWithType(getTableName());
    List<SegmentZKMetadata> segmentsZKMetadata = _helixResourceManager.getSegmentsZKMetadata(realtimeTableName);
    for (SegmentZKMetadata segmentZKMetadata : segmentsZKMetadata) {
      SegmentPartitionMetadata segmentPartitionMetadata = segmentZKMetadata.getPartitionMetadata();
      assertNotNull(segmentPartitionMetadata);
      Map<String, ColumnPartitionMetadata> columnPartitionMetadataMap =
          segmentPartitionMetadata.getColumnPartitionMap();
      assertEquals(columnPartitionMetadataMap.size(), 1);
      ColumnPartitionMetadata columnPartitionMetadata = columnPartitionMetadataMap.get(PARTITION_COLUMN);
      assertNotNull(columnPartitionMetadata);
      assertTrue(columnPartitionMetadata.getFunctionName().equalsIgnoreCase(""murmur""));
      assertEquals(columnPartitionMetadata.getNumPartitions(), 2);
      int partitionGroupId = new LLCSegmentName(segmentZKMetadata.getSegmentName()).getPartitionGroupId();
      numSegmentsForPartition[partitionGroupId]++;

      if (segmentZKMetadata.getStatus() == Status.IN_PROGRESS) {
        // For consuming segment, the partition metadata should only contain the stream partition
        assertEquals(columnPartitionMetadata.getPartitions(), Collections.singleton(partitionGroupId));
      } else {
        LLCSegmentName llcSegmentName = new LLCSegmentName(segmentZKMetadata.getSegmentName());
        int sequenceNumber = llcSegmentName.getSequenceNumber();
        if (sequenceNumber == 0) {
          // The partition metadata for the first completed segment should only contain the stream partition
          assertEquals(columnPartitionMetadata.getPartitions(), Collections.singleton(partitionGroupId));
        } else {
          // The partition metadata for the new completed segments should contain both partitions
          assertEquals(columnPartitionMetadata.getPartitions(), new HashSet<>(Arrays.asList(0, 1)));
        }
      }
    }

    // There should be 4 segments for partition 0, 4 segments for partition 1
    assertEquals(numSegmentsForPartition[0], 4);
    assertEquals(numSegmentsForPartition[1], 4);

    // Check partition routing
    int numSegments = segmentsZKMetadata.size();

    // Query partition 0
    {
      String query = ""SELECT COUNT(*) FROM mytable WHERE DestState = 'CA'"";
      JsonNode response = postQuery(query);

      String queryToCompare = ""SELECT COUNT(*) FROM mytable WHERE DestState BETWEEN 'CA' AND 'CA'"";
      JsonNode responseToCompare = postQuery(queryToCompare);

      // Should skip the first completed segments and the consuming segment for partition 1
      assertEquals(response.get(MetadataKey.NUM_SEGMENTS_QUERIED.getName()).asInt(), numSegments - 2);
      assertEquals(responseToCompare.get(MetadataKey.NUM_SEGMENTS_QUERIED.getName()).asInt(), numSegments);

      // The result won't match because the consuming segment for partition 1 is pruned out
    }

    // Query partition 1
    {
      String query = ""SELECT COUNT(*) FROM mytable WHERE DestState = 'FL'"";
      JsonNode response = postQuery(query);

      String queryToCompare = ""SELECT COUNT(*) FROM mytable WHERE DestState BETWEEN 'FL' AND 'FL'"";
      JsonNode responseToCompare = postQuery(queryToCompare);

      // Should skip the first completed segments and the consuming segment for partition 0
      assertEquals(response.get(MetadataKey.NUM_SEGMENTS_QUERIED.getName()).asInt(), numSegments - 2);
      assertEquals(responseToCompare.get(MetadataKey.NUM_SEGMENTS_QUERIED.getName()).asInt(), numSegments);

      // The result won't match because the consuming segment for partition 0 is pruned out
    }

    // Push the third Avro file into Kafka with partitioning
    _partitionColumn = PARTITION_COLUMN;
    pushAvroIntoKafka(Collections.singletonList(_avroFiles.get(2)));

    // Wait for all documents loaded
    _countStarResult += NUM_DOCS_IN_THIRD_AVRO_FILE;
    waitForAllDocsLoaded(600_000L);

    // Check partition metadata
    numSegmentsForPartition = new int[2];
    segmentsZKMetadata = _helixResourceManager.getSegmentsZKMetadata(realtimeTableName);
    for (SegmentZKMetadata segmentZKMetadata : segmentsZKMetadata) {
      SegmentPartitionMetadata segmentPartitionMetadata = segmentZKMetadata.getPartitionMetadata();
      assertNotNull(segmentPartitionMetadata);
      Map<String, ColumnPartitionMetadata> columnPartitionMetadataMap =
          segmentPartitionMetadata.getColumnPartitionMap();
      assertEquals(columnPartitionMetadataMap.size(), 1);
      ColumnPartitionMetadata columnPartitionMetadata = columnPartitionMetadataMap.get(PARTITION_COLUMN);
      assertNotNull(columnPartitionMetadata);
      assertTrue(columnPartitionMetadata.getFunctionName().equalsIgnoreCase(""murmur""));
      assertEquals(columnPartitionMetadata.getNumPartitions(), 2);
      int partitionGroupId = new LLCSegmentName(segmentZKMetadata.getSegmentName()).getPartitionGroupId();
      numSegmentsForPartition[partitionGroupId]++;

      if (segmentZKMetadata.getStatus() == Status.IN_PROGRESS) {
        // For consuming segment, the partition metadata should only contain the stream partition
        assertEquals(columnPartitionMetadata.getPartitions(), Collections.singleton(partitionGroupId));
      } else {
        // The partition metadata for the new completed segments should only contain the stream partition
        LLCSegmentName llcSegmentName = new LLCSegmentName(segmentZKMetadata.getSegmentName());
        int sequenceNumber = llcSegmentName.getSequenceNumber();
        if (sequenceNumber == 0 || sequenceNumber >= 4) {
          // The partition metadata for the first and new completed segments should only contain the stream partition
          assertEquals(columnPartitionMetadata.getPartitions(), Collections.singleton(partitionGroupId));
        } else {
          // The partition metadata for the completed segments containing records from the second Avro file should
          // contain both partitions
          assertEquals(columnPartitionMetadata.getPartitions(), new HashSet<>(Arrays.asList(0, 1)));
        }
      }
    }

    // There should be 6 segments for partition 0, 6 segments for partition 1
    assertEquals(numSegmentsForPartition[0], 6);
    assertEquals(numSegmentsForPartition[1], 6);

    // Check partition routing
    numSegments = segmentsZKMetadata.size();

    // Query partition 0
    {
      String query = ""SELECT COUNT(*) FROM mytable WHERE DestState = 'CA'"";
      JsonNode response = postQuery(query);

      String queryToCompare = ""SELECT COUNT(*) FROM mytable WHERE DestState BETWEEN 'CA' AND 'CA'"";
      JsonNode responseToCompare = postQuery(queryToCompare);

      // Should skip 2 completed segments and the consuming segment for partition 1
      assertEquals(response.get(MetadataKey.NUM_SEGMENTS_QUERIED.getName()).asInt(), numSegments - 3);
      assertEquals(responseToCompare.get(MetadataKey.NUM_SEGMENTS_QUERIED.getName()).asInt(), numSegments);

      // The result should match again after all the segments with the non-partitioning records are committed
      assertEquals(response.get(""aggregationResults"").get(0).get(""value"").asInt(),
          responseToCompare.get(""aggregationResults"").get(0).get(""value"").asInt());
    }

    // Query partition 1
    {
      String query = ""SELECT COUNT(*) FROM mytable WHERE DestState = 'FL'"";
      JsonNode response = postQuery(query);

      String queryToCompare = ""SELECT COUNT(*) FROM mytable WHERE DestState BETWEEN 'FL' AND 'FL'"";
      JsonNode responseToCompare = postQuery(queryToCompare);

      // Should skip 2 completed segments and the consuming segment for partition 0
      assertEquals(response.get(MetadataKey.NUM_SEGMENTS_QUERIED.getName()).asInt(), numSegments - 3);
      assertEquals(responseToCompare.get(MetadataKey.NUM_SEGMENTS_QUERIED.getName()).asInt(), numSegments);

      // The result should match again after all the segments with the non-partitioning records are committed
      assertEquals(response.get(""aggregationResults"").get(0).get(""value"").asInt(),
          responseToCompare.get(""aggregationResults"").get(0).get(""value"").asInt());
    }
  }
",non-flaky,5
91421,strapdata_elassandra,RemoteIndexAuditTrailStartingTests.transportSSLEnabled,"@TestLogging(""org.elasticsearch.xpack.security.audit.index:TRACE"")
    public boolean transportSSLEnabled() {
        return sslEnabled;
    }
",non-flaky,5
98021,vert-x3_vertx-mongo-client,UpdateOptionsTest.testDefaultOptions,"  @Test
  public void testDefaultOptions() {
    UpdateOptions options = new UpdateOptions();
    assertNull(options.getWriteOption());
    assertFalse(options.isMulti());
    assertFalse(options.isUpsert());
    assertNull(options.getArrayFilters());
  }
",non-flaky,5
70829,apache_kafka,WorkerConfigTest.testAdminListenersConfigAllowedValues,"    @Test
    public void testAdminListenersConfigAllowedValues() {
        Map<String, String> props = baseProps();

        // no value set for ""admin.listeners""
        WorkerConfig config = new WorkerConfig(WorkerConfig.baseConfigDef(), props);
        assertNull(""Default value should be null."", config.getList(WorkerConfig.ADMIN_LISTENERS_CONFIG));

        props.put(WorkerConfig.ADMIN_LISTENERS_CONFIG, """");
        config = new WorkerConfig(WorkerConfig.baseConfigDef(), props);
        assertTrue(config.getList(WorkerConfig.ADMIN_LISTENERS_CONFIG).isEmpty());

        props.put(WorkerConfig.ADMIN_LISTENERS_CONFIG, ""http://a.b:9999, https://a.b:7812"");
        config = new WorkerConfig(WorkerConfig.baseConfigDef(), props);
        assertEquals(config.getList(WorkerConfig.ADMIN_LISTENERS_CONFIG), Arrays.asList(""http://a.b:9999"", ""https://a.b:7812""));

        new WorkerConfig(WorkerConfig.baseConfigDef(), props);
    }
",non-flaky,5
113998,apache_struts,StrutsJUnit4ConventionTestCaseTest.testConventionUrl,"    @Test
    public void testConventionUrl() throws Exception {
        // Output is filled out only for FreeMarker and Velocity templates
        // If you wanna use JSP check response.getForwardedUrl()
        String output = executeAction(""/view.action"");

        assertTrue(output.contains(""This is the view Hello World""));

        ViewAction action = this.getAction();
        assertEquals(""Hello World"", action.getMessage());
    }
",non-flaky,5
118752,netty_netty,ByteBufUtilTest.testWriteUsAsciiCompositeWrapped,"    @Test
    public void testWriteUsAsciiCompositeWrapped() {
        String usAscii = ""NettyRocks"";
        ByteBuf buf = Unpooled.buffer(16);
        buf.writeBytes(usAscii.getBytes(CharsetUtil.US_ASCII));
        ByteBuf buf2 = new WrappedCompositeByteBuf(Unpooled.compositeBuffer().addComponent(
                Unpooled.buffer(8)).addComponent(Unpooled.buffer(24)));
        // write some byte so we start writing with an offset.
        buf2.writeByte(1);
        ByteBufUtil.writeAscii(buf2, usAscii);

        // Skip the previously written byte.
        assertEquals(buf, buf2.skipBytes(1));

        buf.release();
        buf2.release();
    }
",non-flaky,5
84575,apache_zookeeper,LeaderElectionSupportTest.testNodes3,"    @Test
    public void testNodes3() throws Exception {
        int testIterations = 3;
        final CountDownLatch latch = new CountDownLatch(testIterations);
        final AtomicInteger failureCounter = new AtomicInteger();

        for (int i = 0; i < testIterations; i++) {
            runElectionSupportThread(latch, failureCounter);
        }

        assertEquals(0, failureCounter.get());

        if (!latch.await(10, TimeUnit.SECONDS)) {
            LOGGER.info(""Waited for all threads to start, but timed out. We had {} failures."", failureCounter);
        }
    }
",non-flaky,5
21193,androidx_androidx,PreferenceDataStoreTest.testSetGetOnPreferenceManager,"    @Test
    public void testSetGetOnPreferenceManager() {
        mManager.setPreferenceDataStore(mDataStore);

        assertEquals(mDataStore, mManager.getPreferenceDataStore());
        assertNull(mManager.getSharedPreferences());
    }
",non-flaky,5
33868,apache_camel,FhirHistoryIT.testOnType,"    @Test
    public void testOnType() throws Exception {
        final Map<String, Object> headers = new HashMap<>();
        // parameter type is Class
        headers.put(""CamelFhir.resourceType"", Patient.class);
        // parameter type is Class
        headers.put(""CamelFhir.returnType"", Bundle.class);
        // parameter type is Integer
        headers.put(""CamelFhir.count"", 1);

        Bundle result = requestBodyAndHeaders(""direct://ON_TYPE"", null, headers);

        LOG.debug(""onType: "" + result);
        assertNotNull(result, ""onType result"");
        assertEquals(1, result.getEntry().size());
    }
",non-flaky,5
26832,wildfly_wildfly,JndiPermissionTestCase.testCollectionSecurity,"    @Test
    public void testCollectionSecurity() {
        final PermissionCollection permissionCollection = new JndiPermission("""", """").newPermissionCollection();
        permissionCollection.add(new JndiPermission(""foo/bar"", ""unbind,rebind""));
        permissionCollection.setReadOnly();
        try {
            permissionCollection.add(new JndiPermission(""fob/baz"", ""unbind,rebind""));
            fail(""Expected exception"");
        } catch (SecurityException ignored) {
        }
    }
",non-flaky,5
162393,testcontainers_testcontainers-java,DirectoryTarResourceTest.simpleRecursiveClasspathResourceTest,"    @Test
    public void simpleRecursiveClasspathResourceTest() throws TimeoutException {
        // This test combines the copying of classpath resources from JAR files with the recursive TAR approach, to allow JARed classpath resources to be copied in to an image

        WaitingConsumer wait = new WaitingConsumer();

        final ToStringConsumer toString = new ToStringConsumer();

        GenericContainer container = new GenericContainer(
                new ImageFromDockerfile()
                        .withDockerfileFromBuilder(builder ->
                                builder.from(""alpine:3.3"")
                                        .copy(""/tmp/foo"", ""/foo"")
                                        .cmd(""ls -lRt /foo"")
                                        .build()
                        ).withFileFromClasspath(""/tmp/foo"", ""/recursive/dir""))          // here we use /org/junit as a directory that really should exist on the classpath
                .withStartupCheckStrategy(new OneShotStartupCheckStrategy())
                .withLogConsumer(wait.andThen(toString));

        container.start();
        wait.waitUntilEnd(60, TimeUnit.SECONDS);

        final String results = toString.toUtf8String();

        // ExternalResource.class is known to exist in a subdirectory of /org/junit so should be successfully copied in
        assertTrue(""The container has a file that was copied in via a recursive copy from a JAR resource"", results.contains(""content.txt""));
    }
",non-flaky,5
135777,Netflix_Hystrix,CollapsedRequestSubjectTest.testSetResponseSuccess,"    @Test
    public void testSetResponseSuccess() throws InterruptedException, ExecutionException {
        CollapsedRequestSubject<String, String> cr = new CollapsedRequestSubject<String, String>(""hello"");
        Observable<String> o = cr.toObservable();
        Future<String> v = o.toBlocking().toFuture();

        cr.setResponse(""theResponse"");

        // fetch value
        assertEquals(""theResponse"", v.get());
    }
",non-flaky,5
77432,opensearch-project_OpenSearch,UpdateShasTaskTests.whenDependencyDoesntExistThenShouldDeleteDependencySha,"    @Test
    public void whenDependencyDoesntExistThenShouldDeleteDependencySha() throws IOException, NoSuchAlgorithmException {

        File unusedSha = createFileIn(getLicensesDir(project), ""test.sha1"", """");
        task.updateShas();

        assertFalse(unusedSha.exists());
    }
",non-flaky,5
94660,square_okhttp,OptionalMethodTest.invokeOptionalBadArgs,"  @Test
  public void invokeOptionalBadArgs() throws Exception {
    SubClass1 subClass1 = new SubClass1();
    assertIllegalArgumentExceptionOnInvokeOptional(METHOD_WITH_ARGS_CORRECT_PARAMS,
        subClass1); // no args
    assertIllegalArgumentExceptionOnInvokeOptional(METHOD_WITH_ARGS_CORRECT_PARAMS, subClass1, 123);
    assertIllegalArgumentExceptionOnInvokeOptional(METHOD_WITH_ARGS_CORRECT_PARAMS, subClass1,
        true);
    assertIllegalArgumentExceptionOnInvokeOptional(METHOD_WITH_ARGS_CORRECT_PARAMS, subClass1,
        new Object());
    assertIllegalArgumentExceptionOnInvokeOptional(METHOD_WITH_ARGS_CORRECT_PARAMS, subClass1,
        ""one"", ""two"");
  }
",non-flaky,5
99756,apache_cassandra,AsyncStreamingInputPlusTest.consumeUntil_MultipleBufferr_Partial_HappyPath,"    @Test
    public void consumeUntil_MultipleBufferr_Partial_HappyPath() throws IOException
    {
        consumeUntilTestCycle(2, 8, 0, 13);
    }
",non-flaky,5
77526,dropwizard_dropwizard,DAOTestRuleConfigTest.explicitConfigCreatesSessionFactory,"    @Test
    public void explicitConfigCreatesSessionFactory() {
        // it yields a valid SessionFactory instance
        final SessionFactory sessionFactory = database.getSessionFactory();
        assertThat(sessionFactory).isNotNull();
        assertThat(sessionFactory.getProperties())
                .containsEntry(AvailableSettings.FORMAT_SQL, ""true"")
                .containsEntry(""foobar"", ""baz"");

        final Session currentSession = sessionFactory.getCurrentSession();

        // an instance of an entity contained in the package can be saved
        currentSession.saveOrUpdate(new TestEntity(""foo""));
    }
",non-flaky,5
170532,eclipse_jetty.project,TestSecurityAnnotationConversions.testMethodAnnotation2,"    @Test
    public void testMethodAnnotation2() throws Exception
    {
        //A ServletSecurity annotation that has HttpConstraint of CONFIDENTIAL with defined roles, but a
        //HttpMethodConstraint for GET that permits all, but also requires CONFIDENTIAL
        WebAppContext wac = makeWebAppContext(Method2Servlet.class.getCanonicalName(), ""method2Servlet"", new String[]{
            ""/foo/*"", ""*.foo""
        });

        AnnotationIntrospector introspector = new AnnotationIntrospector(wac);
        ServletSecurityAnnotationHandler annotationHandler = new ServletSecurityAnnotationHandler(wac);
        introspector.registerHandler(annotationHandler);

        //set up the expected outcomes: - a Constraint for the RolesAllowed on the class
        //with userdata constraint of DC_CONFIDENTIAL
        //and mappings for each of the pathSpecs
        Constraint expectedConstraint1 = new Constraint();
        expectedConstraint1.setAuthenticate(true);
        expectedConstraint1.setRoles(new String[]{""tom"", ""dick"", ""harry""});
        expectedConstraint1.setDataConstraint(Constraint.DC_CONFIDENTIAL);

        //a Constraint for the Permit on the GET method with a userdata
        //constraint of DC_CONFIDENTIAL
        Constraint expectedConstraint2 = new Constraint();
        expectedConstraint2.setDataConstraint(Constraint.DC_CONFIDENTIAL);

        ConstraintMapping[] expectedMappings = new ConstraintMapping[4];
        expectedMappings[0] = new ConstraintMapping();
        expectedMappings[0].setConstraint(expectedConstraint1);
        expectedMappings[0].setPathSpec(""/foo/*"");
        expectedMappings[0].setMethodOmissions(new String[]{""GET""});
        expectedMappings[1] = new ConstraintMapping();
        expectedMappings[1].setConstraint(expectedConstraint1);
        expectedMappings[1].setPathSpec(""*.foo"");
        expectedMappings[1].setMethodOmissions(new String[]{""GET""});

        expectedMappings[2] = new ConstraintMapping();
        expectedMappings[2].setConstraint(expectedConstraint2);
        expectedMappings[2].setPathSpec(""/foo/*"");
        expectedMappings[2].setMethod(""GET"");
        expectedMappings[3] = new ConstraintMapping();
        expectedMappings[3].setConstraint(expectedConstraint2);
        expectedMappings[3].setPathSpec(""*.foo"");
        expectedMappings[3].setMethod(""GET"");

        introspector.introspect(new Method2Servlet(), null);
        compareResults(expectedMappings, ((ConstraintAware)wac.getSecurityHandler()).getConstraintMappings());
    }
",non-flaky,5
38287,palantir_atlasdb,AbstractTransactionTest.testRangePagingBatchSizeOne,"    @Test
    public void testRangePagingBatchSizeOne() {
        int totalPuts = 100;
        for (int i = 0 ; i < totalPuts ; i++) {
            putDirect(""row""+i, ""col1"", ""v1"", 0);
        }

        RangeRequest rangeRequest = RangeRequest.builder().batchHint(1).build();
        Map<RangeRequest, TokenBackedBasicResultsPage<RowResult<Value>, byte[]>> ranges = keyValueService.getFirstBatchForRanges(TEST_TABLE, Iterables.limit(Iterables.cycle(rangeRequest), 100), 1);
        assertEquals(1, ranges.keySet().size());
        assertEquals(1, ranges.values().iterator().next().getResults().size());
        assertEquals(""row0"", PtBytes.toString(ranges.values().iterator().next().getResults().iterator().next().getRowName()));
    }
",non-flaky,5
162726,OpenAPITools_openapi-generator,XmlItemTest.namespaceArrayTest,"    @Test
    public void namespaceArrayTest() {
        // TODO: test namespaceArray
    }
",non-flaky,5
70792,apache_kafka,DelegatingClassLoaderTest.testOtherResources,"    @Test
    public void testOtherResources() {
        assertFalse(
            DelegatingClassLoader.serviceLoaderManifestForPlugin(""META-INF/services/org.apache.kafka.connect.transforms.Transformation""));
        assertFalse(DelegatingClassLoader.serviceLoaderManifestForPlugin(""resource/version.properties""));
    }
",non-flaky,5
162395,testcontainers_testcontainers-java,DockerComposeWaitStrategyTest.testWaitOnMultipleStrategiesPassing,"    @Test
    public void testWaitOnMultipleStrategiesPassing() {
        final DockerComposeContainer environment = new DockerComposeContainer(new File(""src/test/resources/compose-test.yml""))
            .withExposedService(""redis_1"", REDIS_PORT, Wait.forListeningPort())
            .withExposedService(""db_1"", 3306, Wait.forLogMessage("".*ready for connections.*\\s"", 1))
            .withTailChildContainers(true);

        try {
            environment.starting(Description.createTestDescription(Object.class, ""name""));
            VisibleAssertions.pass(""Docker compose should start after waiting for listening port"");
        } catch (RuntimeException e) {
            VisibleAssertions.fail(""Docker compose should start after waiting for listening port with failed with: "" + e);
        }
    }
",non-flaky,5
175759,GoogleCloudPlatform_google-cloud-eclipse,GcpProjectQueryJobTest.testRun_abandonIfDisposed,"  @Test
  public void testRun_abandonIfDisposed() throws InterruptedException, ProjectRepositoryException {
    when(projectSelector.isDisposed()).thenReturn(true);

    queryJob.schedule();
    queryJob.join();

    verify(projectRepository).getProjects(credential);
    verify(projectSelector, never()).setProjects(projects);
  }
",non-flaky,5
177226,line_armeria,FileWatcherRegistryTest.closeEndpointGroupStopsRegistry,"    @Test
    public void closeEndpointGroupStopsRegistry() throws Exception {

        final File file = folder.newFile(""temp-file.properties"");

        final FileWatcherRegistry fileWatcherRegistry = new FileWatcherRegistry();
        fileWatcherRegistry.register(file.toPath(), () -> {});

        assertThat(fileWatcherRegistry.isRunning()).isTrue();

        fileWatcherRegistry.close();

        assertThat(fileWatcherRegistry.isRunning()).isFalse();
    }
",non-flaky,5
160341,ConsenSys_teku,MetricsDataFactoryTest.shouldExtractMetricsFromPrometheusMetricsAndSerialiseJson,"  @Test
  public void shouldExtractMetricsFromPrometheusMetricsAndSerialiseJson()
      throws JsonProcessingException {
    when(prometheusMock.streamObservations()).thenReturn(getMockObservations().stream());
    final MetricsDataFactory metricsDataFactory = new MetricsDataFactory(prometheusMock);

    final List<BaseMetricData> baseMetricData = metricsDataFactory.getMetricData(timeProvider);
    assertThat(baseMetricData.size()).isEqualTo(3);
    final String beaconNode = jsonProvider.objectToJSON(baseMetricData.get(0));
    final String validator = jsonProvider.objectToJSON(baseMetricData.get(1));
    final String system = jsonProvider.objectToJSON(baseMetricData.get(2));

    BeaconNodeMetricData beaconNodeDeserialized =
        jsonProvider.jsonToObject(beaconNode, BeaconNodeMetricData.class);
    ValidatorMetricData validatorDeserialized =
        jsonProvider.jsonToObject(validator, ValidatorMetricData.class);
    SystemMetricData systemDeserialized = jsonProvider.jsonToObject(system, SystemMetricData.class);

    assertThat(baseMetricData.get(0)).isInstanceOf(BeaconNodeMetricData.class);
    assertThat(baseMetricData.get(1)).isInstanceOf(ValidatorMetricData.class);
    assertThat(baseMetricData.get(2)).isInstanceOf(SystemMetricData.class);

    assertThat(baseMetricData.get(0)).isEqualTo(beaconNodeDeserialized);
    assertThat(baseMetricData.get(1)).isEqualTo(validatorDeserialized);
    assertThat(baseMetricData.get(2)).isEqualTo(systemDeserialized);
  }
",non-flaky,5
53194,cloudfoundry_uaa,TotpMfaEndpointIntegrationTests.force_password_happens_after_MFA,"    @Test
    public void force_password_happens_after_MFA() throws Exception {
        IntegrationTestUtils.updateUserToForcePasswordChange(
            getRestTemplate(),
            baseUrl,
            adminAccessToken,
            user.getId(),
            mfaZone.getId()
        );

        performLogin(username);
        assertEquals(zoneUrl + ""/login/mfa/register"", webDriver.getCurrentUrl());

        String imageSrc = webDriver.findElement(By.id(""qr"")).getAttribute(""src"");

        String secretKey = getSecretFromQrImageString(imageSrc);

        webDriver.findElement(By.id(""Next"")).click();
        verifyCodeOnRegistration(secretKey, ""/force_password_change"");


    }
",non-flaky,5
59586,looly_hutool,MailTest.mailAccountTest,"	@Test
	public void mailAccountTest() {
		MailAccount account = new MailAccount();
		account.setFrom(""hutool@yeah.net"");
		account.setDebug(true);
		account.defaultIfEmpty();
		Properties props = account.getSmtpProps();
		Assert.assertEquals(""true"", props.getProperty(""mail.debug""));
	}
",non-flaky,5
122629,vespa-engine_vespa,YumPackageNameTest.testBuilder,"    @Test
    public void testBuilder() {
        YumPackageName yumPackage = new YumPackageName.Builder(""docker"")
                .setEpoch(""2"")
                .setVersion(""1.12.6"")
                .setRelease(""71.git3e8e77d.el7.centos.1"")
                .setArchitecture(""x86_64"")
                .build();
        assertEquals(""2:docker-1.12.6-71.git3e8e77d.el7.centos.1.x86_64"", yumPackage.toName());
    }
",non-flaky,5
98628,nutzam_nutz,Log4jTest.test_normal_debug,"    @Test
    public void test_normal_debug() {
        Logs.setAdapter(new Log4jLogAdapter());
        Log log4nut = Logs.getLog(Dao.class);
        assertTrue(log4nut.getClass().getName().contains(Log4jLogAdapter.class.getName()));
        Logger log4j = LogManager.getLogger(Dao.class);

        assertEquals(log4nut.isInfoEnabled(), log4j.isInfoEnabled());
        assertEquals(log4nut.isDebugEnabled(), log4j.isDebugEnabled());
        assertEquals(log4nut.isTraceEnabled(), log4j.isTraceEnabled());
    }
",non-flaky,5
95661,togglz_togglz,TogglzApplicationContextBinderApplicationListenerTest.contextRefreshed,"    @Test
    public void contextRefreshed() {
        ContextRefreshedEvent contextRefreshedEvent = mock(ContextRefreshedEvent.class);
        when(contextRefreshedEvent.getApplicationContext()).thenReturn(applicationContext);
        // Invoke context refreshed event
        applicationListener.onApplicationEvent(contextRefreshedEvent);
        // Assert application context bound
        assertSame(applicationContext, ContextClassLoaderApplicationContextHolder.get());
    }
",non-flaky,5
33700,alibaba_fastjson,JSONScannerTest.checkTime6,"  @Test
  public void checkTime6() throws Throwable {

    // Arrange
    JSONScanner objectUnderTest = ((JSONScanner)Reflector.getInstance(""com.alibaba.fastjson.parser.JSONScanner""));
    objectUnderTest.hasSpecial = false;
    objectUnderTest.token = 0;
    objectUnderTest.locale = null;
    objectUnderTest.np = 0;
    objectUnderTest.features = 0;
    Reflector.setField(objectUnderTest, ""text"", """");
    objectUnderTest.calendar = null;
    objectUnderTest.matchStat = 0;
    objectUnderTest.bp = 0;
    Reflector.setField(objectUnderTest, ""len"", 0);
    objectUnderTest.stringDefaultValue = """";
    objectUnderTest.pos = 0;
    objectUnderTest.sp = 0;
    objectUnderTest.sbuf = null;
    objectUnderTest.ch = '\u0000';
    objectUnderTest.timeZone = null;
    objectUnderTest.eofPos = 0;
    char h0 = '0';
    char h1 = '9';
    char m0 = '1';
    char m1 = '\u0000';
    char s0 = '\u0000';
    char s1 = '\u0000';

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkTime"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(objectUnderTest, h0, h1, m0, m1, s0, s1);

    // Assert result
    Assert.assertEquals(false, retval);

  }
",non-flaky,5
70803,apache_kafka,PluginUtilsTest.testPluginUrlsWithJars,"    @Test
    public void testPluginUrlsWithJars() throws Exception {
        createBasicDirectoryLayout();

        List<Path> expectedUrls = createBasicExpectedUrls();

        assertUrls(expectedUrls, PluginUtils.pluginUrls(pluginPath));
    }
",non-flaky,5
33690,alibaba_fastjson,JSONScannerTest.checkDate13,"  @Test
  public void checkDate13() throws Throwable {

    // Arrange
    char y0 = '2';
    char y1 = '1';
    char y2 = '1';
    char y3 = '1';
    char M0 = '1';
    char M1 = '0';
    int d0 = 48;
    int d1 = 0;

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkDate"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""int""), Reflector.forName(""int""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, y0, y1, y2, y3, M0, M1, d0, d1);

    // Assert result
    Assert.assertEquals(false, retval);

  }
",non-flaky,5
19479,eclipse_xtext-core,CompositeNodeTest.iterator,"	@Test public void testGetLeafNodes_01() {
			public Iterator<INode> iterator() {
				return new AbstractIterator<INode>() {

					private BidiTreeIterator<AbstractNode> delegate = node.basicIterator();
					
					@Override
					protected INode computeNext() {
						if (delegate.hasPrevious())
							return delegate.previous();
						return endOfData();
					}
				};
			}
",non-flaky,5
104700,apache_pinot,SegmentWriterUploaderIntegrationTest.testFileBasedSegmentWriterAndDefaultUploader,"  @Test
  public void testFileBasedSegmentWriterAndDefaultUploader()
      throws Exception {

    TableConfig offlineTableConfig = createOfflineTableConfig();
    addTableConfig(offlineTableConfig);

    SegmentWriter segmentWriter = new FileBasedSegmentWriter();
    segmentWriter.init(offlineTableConfig, _schema);
    SegmentUploader segmentUploader = new SegmentUploaderDefault();
    segmentUploader.init(offlineTableConfig);

    GenericRow reuse = new GenericRow();
    long totalDocs = 0;
    for (int i = 0; i < 3; i++) {
      AvroRecordReader avroRecordReader = new AvroRecordReader();
      avroRecordReader.init(_avroFiles.get(i), null, null);

      long numDocsInSegment = 0;
      while (avroRecordReader.hasNext()) {
        avroRecordReader.next(reuse);
        segmentWriter.collect(reuse);
        numDocsInSegment++;
        totalDocs++;
      }
      // flush to segment
      URI segmentTarURI = segmentWriter.flush();
      // upload
      segmentUploader.uploadSegment(segmentTarURI, null);

      // check num segments
      Assert.assertEquals(getNumSegments(), i + 1);
      // check numDocs in latest segment
      Assert.assertEquals(getNumDocsInLatestSegment(), numDocsInSegment);
      // check totalDocs in query
      checkTotalDocsInQuery(totalDocs);
    }
    segmentWriter.close();

    dropAllSegments(_tableNameWithType, TableType.OFFLINE);
    checkNumSegments(0);

    // upload all together using dir
    segmentUploader.uploadSegmentsFromDir(_tarDir.toURI(), null);
    // check num segments
    Assert.assertEquals(getNumSegments(), 3);
    // check totalDocs in query
    checkTotalDocsInQuery(totalDocs);

    dropOfflineTable(_tableNameWithType);
  }
",non-flaky,5
175823,GoogleCloudPlatform_google-cloud-eclipse,BucketNameValidatorTest.testValidation_nonStringInput,"  @Test
  public void testValidation_nonStringInput() {
    IStatus status = validator.validate(new Object());
    assertThat(status.getSeverity(), is(IStatus.ERROR));
    assertThat(status.getMessage(), is(""Invalid bucket name""));
  }
",non-flaky,5
162422,testcontainers_testcontainers-java,GenericContainerRuleTest.testIsRunning,"    @Test
    public void testIsRunning() {
        try (GenericContainer container = new GenericContainer().withCommand(""top"")) {
            assertFalse(""Container is not started and not running"", container.isRunning());
            container.start();
            assertTrue(""Container is started and running"", container.isRunning());
        }
    }
",non-flaky,5
77573,dropwizard_dropwizard,OptionalCookieParamResourceTest.getMessage,"    @Test
        public String getMessage(@CookieParam(""message"") Optional<String> message) {
            return message.or(""Default Message"");
        }
",non-flaky,5
104629,apache_pinot,OfflineClusterIntegrationTest.testInstancesStarted,"  @Test
  public void testInstancesStarted() {
    assertEquals(_serviceStatusCallbacks.size(), getNumBrokers() + getNumServers());
    for (ServiceStatus.ServiceStatusCallback serviceStatusCallback : _serviceStatusCallbacks) {
      assertEquals(serviceStatusCallback.getServiceStatus(), ServiceStatus.Status.GOOD);
    }
  }
",non-flaky,5
21244,androidx_androidx,PreferencePersistTest.int_persistWhileDisabled_notPersisted,"    @Test
    public void int_persistWhileDisabled_notPersisted() {
        mPreference.setPersistent(false);

        boolean wasPersisted = mPreference.putInt(1);

        assertFalse(wasPersisted);
        assertEquals(-1, mSharedPref.getLong(KEY, -1));
    }
",non-flaky,5
86059,graylog2_graylog2-server,AggregationEventProcessorConfigTest.toJobSchedulerConfig,"    @Test
    public void toJobSchedulerConfig() {
        final EventDefinitionDto dto = dbService.get(""54e3deadbeefdeadbeefaffe"").orElse(null);

        assertThat(dto).isNotNull();

        assertThat(dto.config().toJobSchedulerConfig(dto, clock)).isPresent().get().satisfies(schedulerConfig -> {
            assertThat(schedulerConfig.jobDefinitionConfig()).satisfies(jobDefinitionConfig -> {
                assertThat(jobDefinitionConfig).isInstanceOf(EventProcessorExecutionJob.Config.class);

                final EventProcessorExecutionJob.Config config = (EventProcessorExecutionJob.Config) jobDefinitionConfig;

                assertThat(config.eventDefinitionId()).isEqualTo(dto.id());
                assertThat(config.processingWindowSize()).isEqualTo(300000);
                assertThat(config.processingHopSize()).isEqualTo(300000);
                assertThat(config.parameters()).isEqualTo(AggregationEventProcessorParameters.builder()
                        .timerange(AbsoluteRange.create(clock.nowUTC().minus(300000), clock.nowUTC()))
                        .build());
            });

            assertThat(schedulerConfig.schedule()).satisfies(schedule -> {
                assertThat(schedule).isInstanceOf(IntervalJobSchedule.class);

                final IntervalJobSchedule config = (IntervalJobSchedule) schedule;

                assertThat(config.interval()).isEqualTo(300000);
                assertThat(config.unit()).isEqualTo(TimeUnit.MILLISECONDS);
            });
        });
    }
",non-flaky,5
133962,CorfuDB_CorfuDB,LogUnitHandlerTest.testWrite,"    @Test
    public void testWrite() {
        ResponseMsg response = getResponseMsg(
                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.CHECK),
                getWriteLogResponseMsg()
        );

        logUnitHandler.handleMessage(response, mockChannelHandlerContext);
        // Verify that the correct request was completed (once) with the appropriate value,
        // and that we did not complete exceptionally.
        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));
        verify(mockClientRouter).completeRequest(response.getHeader().getRequestId(), true);
    }
",non-flaky,5
156069,jReddit_jReddit,RedditOAuthAgentTest.testRefreshTokenOAuthProblemException,"    @Test(expected=RedditOAuthException.class)
    public void testRefreshTokenOAuthProblemException() throws OAuthSystemException, OAuthProblemException, RedditOAuthException {
        when(mockOAuthClient.accessToken(any(OAuthClientRequest.class))).thenThrow(OAuthProblemException.error(""Error""));
        subject.refreshToken(mockRedditTokenRefreshable);
    }
",non-flaky,5
70774,apache_kafka,RebalanceSourceConnectorsIntegrationTest.testDeleteConnector,"    @Test
    public void testDeleteConnector() throws Exception {
        // create test topic
        connect.kafka().createTopic(TOPIC_NAME, NUM_TOPIC_PARTITIONS);

        // setup up props for the source connector
        Map<String, String> props = new HashMap<>();
        props.put(CONNECTOR_CLASS_CONFIG, MonitorableSourceConnector.class.getSimpleName());
        props.put(TASKS_MAX_CONFIG, String.valueOf(NUM_TASKS));
        props.put(""throughput"", String.valueOf(1));
        props.put(""messages.per.poll"", String.valueOf(10));
        props.put(TOPIC_CONFIG, TOPIC_NAME);
        props.put(KEY_CONVERTER_CLASS_CONFIG, StringConverter.class.getName());
        props.put(VALUE_CONVERTER_CLASS_CONFIG, StringConverter.class.getName());

        waitForCondition(() -> this.assertWorkersUp(3),
                WORKER_SETUP_DURATION_MS, ""Connect workers did not start in time."");

        // start a source connector
        IntStream.range(0, 4).forEachOrdered(
            i -> {
                try {
                    connect.configureConnector(CONNECTOR_NAME + i, props);
                } catch (IOException e) {
                    throw new ConnectException(e);
                }
            });

        waitForCondition(() -> this.assertConnectorAndTasksRunning(CONNECTOR_NAME + 3, NUM_TASKS).orElse(true),
                CONNECTOR_SETUP_DURATION_MS, ""Connector tasks did not start in time."");

        // delete connector
        connect.deleteConnector(CONNECTOR_NAME + 3);

        waitForCondition(() -> !this.assertConnectorAndTasksRunning(CONNECTOR_NAME + 3, NUM_TASKS).orElse(true),
                CONNECTOR_SETUP_DURATION_MS, ""Connector tasks did not stop in time."");

        waitForCondition(this::assertConnectorAndTasksAreUnique,
                WORKER_SETUP_DURATION_MS, ""Connect and tasks are imbalanced between the workers."");
    }
",non-flaky,5
91392,OpenLCB_OpenLCB_Java,DemoReadWriteAccessTest.testCTor,"    @Test
    public void testCTor() {
        Assume.assumeFalse(GraphicsEnvironment.isHeadless());
        DemoReadWriteAccess t = new DemoReadWriteAccess();
        Assert.assertNotNull(""exists"",t);
    }
",non-flaky,5
98081,vert-x3_vertx-mongo-client,WriteConcernParserTest.testAdvancedWriteConcern_w_string_only,"  @Test
  public void testAdvancedWriteConcern_w_string_only() {
    WriteConcern expected = new WriteConcern(""foo"");
    JsonObject config = new JsonObject();
    config.put(""w"", ""foo"");

    WriteConcern wc = new WriteConcernParser(null, config).writeConcern();
    assertNotNull(wc);
    assertEquals(expected, wc);
  }
",non-flaky,5
177236,line_armeria,PropertiesEndpointGroupTest.testWithPrefixThatEndsWithDot,"    @Test
    public void testWithPrefixThatEndsWithDot() {
        final PropertiesEndpointGroup endpointGroup = PropertiesEndpointGroup.of(
                getClass().getClassLoader(), ""server-list.properties"", ""serverA.hosts."");

        assertThat(endpointGroup.endpoints()).containsExactlyInAnyOrder(Endpoint.parse(""127.0.0.1:8080""),
                                                                        Endpoint.parse(""127.0.0.1:8081""),
                                                                        Endpoint.parse(""127.0.0.1""));
    }
",non-flaky,5
77706,pholser_junit-quickcheck,PrimitivePropertyParameterTypesTest.shouldHold,"    @Test public void rightOpenEndedRangedWrapperDouble() {
        @Property public void shouldHold(@InRange(min = ""-2.71"") Double d) {
            assertThat(d, greaterThanOrEqualTo(-2.71));
            assertThat(d, lessThan(RangeAttributes.maxDouble()));
        }
",non-flaky,5
19427,eclipse_xtext-core,GenericModuleTest.get,"	@Test public void testProviderInstanceBinding() throws Exception {
			public Date get() {
				return null;
			}
",non-flaky,5
97981,ReactiveX_RxJava,ObservableTests.run,"    @Test
    public void testPublish() throws InterruptedException {
        final AtomicInteger counter = new AtomicInteger();
        ConnectableObservable<String> o = Observable.create(new OnSubscribeFunc<String>() {

            @Override
            public Subscription onSubscribe(final Observer<? super String> observer) {
                final BooleanSubscription subscription = new BooleanSubscription();
                new Thread(new Runnable() {

                    @Override
                    public void run() {
                        counter.incrementAndGet();
                        observer.onNext(""one"");
                        observer.onCompleted();
                    }
",non-flaky,5
156128,soot-oss_soot,LambdaMetaFactoryAdaptTest.parameterBoxing,"  @Test
  public void parameterBoxing() {
    String testClass = ""soot.lambdaMetaFactory.Adapt"";

    final SootMethod target = prepareTarget(methodSigFromComponents(testClass, ""void"", ""parameterBoxingTarget""), testClass);

    // TODO more fine-grained testing

    validateAllBodies(target.getDeclaringClass());
  }
",non-flaky,5
77444,opensearch-project_OpenSearch,DependencyLicensesTaskTests.givenProjectWithDependencyAndEverythingInOrderThenShouldReturnSilently,"    @Test
    public void givenProjectWithDependencyAndEverythingInOrderThenShouldReturnSilently() throws Exception {
        project.getDependencies().add(""compile"", dependency);

        File licensesDir = getLicensesDir(project);

        createAllDefaultDependencyFiles(licensesDir, ""groovy-all"");
        task.get().checkDependencies();
    }
",non-flaky,5
33733,alibaba_fastjson,FastJsonViewTest.isInjectComponent,"    @Test
    public void isInjectComponent() {
        wac.getBean(FastJsonViewResponseBodyAdvice.class);
    }
",non-flaky,5
77445,opensearch-project_OpenSearch,DependencyLicensesTaskTests.givenProjectWithALicenseButWithoutTheDependencyThenShouldThrowException,"    @Test
    public void givenProjectWithALicenseButWithoutTheDependencyThenShouldThrowException() throws Exception {
        expectedException.expect(GradleException.class);
        expectedException.expectMessage(containsString(""Unused license ""));

        project.getDependencies().add(""compile"", dependency);

        File licensesDir = getLicensesDir(project);
        createAllDefaultDependencyFiles(licensesDir, ""groovy-all"");
        createFileIn(licensesDir, ""non-declared-LICENSE.txt"", """");

        task.get().checkDependencies();
    }
",non-flaky,5
159666,liquibase_liquibase,MssqlIntegrationTest.dataTypesTest,"    @Test
    public void dataTypesTest() throws Exception {
        assumeNotNull(this.getDatabase());
        clearDatabase();

        Liquibase liquibase = createLiquibase(""changelogs/mssql/issues/data.types.xml"");
        liquibase.update((String) null);

        DatabaseSnapshot snapshot = SnapshotGeneratorFactory.getInstance().createSnapshot(CatalogAndSchema.DEFAULT, this.getDatabase(), new SnapshotControl(getDatabase()));

        for (Table table : snapshot.get(Table.class)) {
            if (getDatabase().isLiquibaseObject(table)) {
                continue;
            }
            for (Column column : table.getColumns()) {
                String expectedType = column.getName().split(""_"")[0];

                switch(expectedType.toUpperCase()) {
                    // See https://docs.microsoft.com/en-us/sql/t-sql/data-types/ntext-text-and-image-transact-sql
                    // Types text, ntext and image are deprecated and should be translated into
                    // varchar(max), nvarchar(max) and varbinary(max).
                    case ""TEXT"":
                        expectedType=""varchar"";
                        break;
                    case ""NTEXT"":
                        expectedType=""nvarchar"";
                        break;
                    case ""IMAGE"":
                        expectedType=""varbinary"";
                        break;
                    default:
                        // nothing to do
                }

                String foundTypeDefinition = DataTypeFactory.getInstance().from(column.getType(), new MSSQLDatabase()).toDatabaseDataType(getDatabase()).toString();
                // [varbinary] -> varbinary
                foundTypeDefinition = foundTypeDefinition.replaceFirst(""^\\[(.*?)\\]"", ""$1"");
                String foundType = foundTypeDefinition.replaceFirst(""\\(.*"", """").trim();

                assertEquals(""Wrong data type for "" + table.getName() + ""."" + column.getName(),
                    expectedType.toLowerCase(),
                    foundType.toLowerCase()
                );

                if (""varbinary"".equalsIgnoreCase(expectedType)) {
                    if (column.getName().endsWith(""_MAX"")) {
                        assertEquals(""VARBINARY(MAX)"", foundTypeDefinition.toUpperCase());
                    } else {
                        assertEquals(""VARBINARY(1)"", foundTypeDefinition.toUpperCase());
                    }
                }
            }
        }
    }
",non-flaky,5
97965,ReactiveX_RxJava,ObservableTests.fromArityArgs1,"    @Test
    public void fromArityArgs1() {
        Observable<String> items = Observable.from(""one"");

        assertEquals(new Integer(1), items.count().toBlockingObservable().single());
        assertEquals(""one"", items.takeLast(1).toBlockingObservable().single());
    }
",non-flaky,5
170481,eclipse_jetty.project,ObjectMBeanUtilTest.testInvoke,"    @Test
    public void testInvoke() throws Exception
    {
        String value = (String)objectMBean.invoke(""good"", new Object[0], new String[0]);

        assertEquals(""not bad"", value, ""Method(good) invocation on objectMBean must return not bad"");
    }
",non-flaky,5
98361,Kong_unirest-java,PostRequestHandlersTest.accept,"    @Test
        public void accept(HttpResponse<?> httpResponse) {

            this.httpResponse = httpResponse;
        }
",non-flaky,5
26769,MundaneImmortal_pair-distribution-app,DayPairsTest.testEquals,"	@Test
	public void testEquals() {
		DayPairs pairsOfToday = new DayPairs();
		DayPairs differentPairsOfToday = new DayPairs();
		DayPairs yesterdayPairs = new DayPairs();
		yesterdayPairs.setDate(getYesterdayDate());
		Pair pair1 = new Pair(Arrays.asList(new Developer(""dev1""), new Developer(""dev2"")));
		Pair pair2 = new Pair(Arrays.asList(new Developer(""dev3""), new Developer(""dev4"")));
		pairsOfToday.addPair(""track1"", pair1);
		differentPairsOfToday.addPair(""track2"", pair2);
		yesterdayPairs.addPair(""track1"", pair1);
		
		assertThat(pairsOfToday, is(equalTo(differentPairsOfToday)));
		assertThat(yesterdayPairs, is(not(equalTo(pairsOfToday))));
	}
",non-flaky,5
26902,wildfly_wildfly,InMemoryNamingStoreTestCase.testListBindingsNameNotFound,"    @Test
    public void testListBindingsNameNotFound() throws Exception {
        try {
            nameStore.listBindings(new CompositeName(""test""));
            fail(""Should have thrown and NameNotFoundException"");
        } catch(NameNotFoundException expected) {}
    }
",non-flaky,5
78292,apache_beam,SideInputHandlerTest.testIsReady,"  @Test
  public void testIsReady() {
    SideInputHandler sideInputHandler =
        new SideInputHandler(
            ImmutableList.of(view1, view2), InMemoryStateInternals.<Void>forKey(null));

    IntervalWindow firstWindow = new IntervalWindow(new Instant(0), new Instant(WINDOW_MSECS_1));

    IntervalWindow secondWindow = new IntervalWindow(new Instant(0), new Instant(WINDOW_MSECS_2));

    // side input should not yet be ready
    assertFalse(sideInputHandler.isReady(view1, firstWindow));

    // add a value for view1
    sideInputHandler.addSideInputValue(
        view1,
        valuesInWindow(
            materializeValuesFor(View.asIterable(), ""Hello""), new Instant(0), firstWindow));

    // now side input should be ready
    assertTrue(sideInputHandler.isReady(view1, firstWindow));

    // second window input should still not be ready
    assertFalse(sideInputHandler.isReady(view1, secondWindow));
  }
",non-flaky,5
94755,ktuukkan_marine-api,Latitude27Test.conversionToKnotsWorks,"    @Test
    public void conversionToKnotsWorks() {
        assertEquals(-90.0, Latitude27.toDegrees(Double.valueOf(-90.0*60*10000).intValue()), DELTA);
        assertEquals(-45.1, Latitude27.toDegrees(Double.valueOf(-45.1*60*10000).intValue()), DELTA);
        assertEquals(0.0, Latitude27.toDegrees(0), 0.00001);
        assertEquals(45.9, Latitude27.toDegrees(Double.valueOf(45.9*60*10000).intValue()), DELTA);
        assertEquals(90.0, Latitude27.toDegrees(Double.valueOf(90.0*60*10000).intValue()), DELTA);
    }
",non-flaky,5
162414,testcontainers_testcontainers-java,DockerNetworkModeTest.testHostNetworkContainer,"    @Test
    public void testHostNetworkContainer() throws TimeoutException {
        String output = getContainerOutput(hostNetwork);

        assertTrue(""'host' network can access the internet"", output.contains(""seq=1""));
    }
",non-flaky,5
97761,vojtechhabarta_typescript-generator,JaxrsApplicationTest.testWithParsingWithExplicitApplication,"    @Test
    public void testWithParsingWithExplicitApplication() {
        final List<SourceType<Type>> sourceTypes = JaxrsApplicationScanner.scanJaxrsApplication(TestApplication.class, null);
        testWithParsing(sourceTypes, true);
    }
",non-flaky,5
26755,MundaneImmortal_pair-distribution-app,DevPairsCombinationsTest.testGetPastPairByTrackThrowsRuntimeErrorForOpsPair,"	@Test(expected =  RuntimeException.class)
	public void testGetPastPairByTrackThrowsRuntimeErrorForOpsPair() {
		List<DayPairs> pairsListFromDevs = getPairsListFromDevs(getStandardDevs());
		Pair opsPair = pairsListFromDevs.get(0).getPairByTrack(""track1"");
		opsPair.setOpsPair(true);
		DevPairCombinations devPairCombinations = new DevPairCombinations(pairsListFromDevs);
		
		
		assertThat(devPairCombinations.getPastPairByTrack(0, ""track1""), is(Arrays.asList(getPairsListFromDevs(getStandardDevs()).get(0).getPairByTrack(""track1""))));
	}
",non-flaky,5
137169,spring-projects_spring-framework,AnnotationsScannerTests.method,"		@TestAnnotation1
		public void method() {
		}
",non-flaky,5
110181,Wikidata_wikidata-toolkit,PropertyRegisterTest.testFetchPropertyUriPattern,"	@Test
	public void testFetchPropertyUriPattern() {
		PropertyIdValue pid = this.dataObjectFactory.getPropertyIdValue(""P434"",
				this.siteIri);
		assertEquals(""http://musicbrainz.org/$1/artist"",
				this.propertyRegister.getPropertyUriPattern(pid));
		// Check twice to test that the cached retrieval works too
		assertEquals(""http://musicbrainz.org/$1/artist"",
				this.propertyRegister.getPropertyUriPattern(pid));
		assertEquals(50,
				this.propertyRegister.smallestUnfetchedPropertyIdNumber);
		assertTrue(this.propertyRegister.datatypes.keySet().contains(""P434""));
	}
",non-flaky,5
97987,ReactiveX_RxJava,ObservableTests.testOfType,"    @Test
    public void testOfType() {
        Observable<String> observable = Observable.from(1, ""abc"", false, 2L).ofType(String.class);

        @SuppressWarnings(""unchecked"")
        Observer<Object> aObserver = mock(Observer.class);
        observable.subscribe(aObserver);
        verify(aObserver, never()).onNext(1);
        verify(aObserver, times(1)).onNext(""abc"");
        verify(aObserver, never()).onNext(false);
        verify(aObserver, never()).onNext(2L);
        verify(aObserver, never()).onError(
                org.mockito.Matchers.any(Throwable.class));
        verify(aObserver, times(1)).onCompleted();
    }
",non-flaky,5
33908,apache_camel,PutProducerIntegrationIT.configure,"    @Test
            public void configure() {
                from(""direct:start"").to(""beanstalk:"" + tubeName + ""?jobPriority=1000&jobTimeToRun=5"").to(""mock:result"");
            }
",non-flaky,5
77646,pholser_junit-quickcheck,Primitive3DArrayPropertyParameterTypesTest.shouldHold,"    @Test public void primitive3DDoubleArray() {
        @Property(trials = 2) public void shouldHold(double[][][] d) {
        }
",non-flaky,5
84622,apache_zookeeper,ServerConfigTest.testTooManyArguments,"    @Test
    public void testTooManyArguments() {
        assertThrows(IllegalArgumentException.class, () -> {
            String[] args = {""2181"", ""/data/dir"", ""60000"", ""10000"", ""9999""};
            serverConfig.parse(args);
        });
    }
",non-flaky,5
59665,looly_hutool,SystemUtilTest.getJavaInfoTest,"	@Test
	public void getJavaInfoTest() {
		JavaInfo javaInfo = SystemUtil.getJavaInfo();
		Assert.assertNotNull(javaInfo);
	}
",non-flaky,5
43077,trinodb_trino,BaseConnectorTest.verifySupportsRowLevelDeleteDeclaration,"    @Test
    public void verifySupportsRowLevelDeleteDeclaration()
    {
        if (hasBehavior(SUPPORTS_ROW_LEVEL_DELETE)) {
            // Covered by testRowLevelDelete
            return;
        }

        skipTestUnless(hasBehavior(SUPPORTS_CREATE_TABLE));
        try (TestTable table = new TestTable(getQueryRunner()::execute, ""test_supports_row_level_delete"", ""AS SELECT * FROM region"")) {
            assertQueryFails(""DELETE FROM "" + table.getName() + "" WHERE regionkey = 2"", ""This connector does not support deletes"");
        }
    }
",non-flaky,5
98272,spotify_docker-client,HostConfigTest.testJsonAlways,"  @Test
  public void testJsonAlways() throws Exception {
    final HostConfig hostConfig = objectMapper
        .readValue(fixture(""fixtures/hostConfig/restartPolicyAlways.json""),
                   HostConfig.class);
    assertThat(hostConfig.restartPolicy(), is(HostConfig.RestartPolicy.always()));
  }
",non-flaky,5
112748,hwang-pku_ormlite-core,DatabaseConnectionProxyTest.testCloseNull,"	@Test
	public void testCloseNull() throws Exception {
		new DatabaseConnectionProxy(null).close();
	}
",non-flaky,5
97712,vojtechhabarta_typescript-generator,DateTest.testDate_forJavaUtilDate,"    @Test
    public void testDate_forJavaUtilDate() {
        final Settings settings = TestUtils.settings();
        settings.mapDate = DateMapping.asDate;
        final String dts = new TypeScriptGenerator(settings).generateTypeScript(Input.from(Dates.class));
        Assert.assertTrue(dts.contains(""date: Date;""));
        Assert.assertTrue(dts.contains(""dateList: Date[];""));
        Assert.assertTrue(dts.contains(""datesMap: { [index: string]: Date[] };""));
        Assert.assertTrue(dts.contains(""dates: Date[];""));
        Assert.assertTrue(dts.contains(""calendar: Date;""));
    }
",non-flaky,5
33870,apache_camel,FhirUpdateIT.testResource,"    @Test
    public void testResource() throws Exception {
        Date date = new SimpleDateFormat(""yyyy-MM-dd"").parse(""1998-04-29"");
        assertNotEquals(date, patient.getBirthDate());
        this.patient.setBirthDate(date);
        final Map<String, Object> headers = new HashMap<>();
        // parameter type is org.hl7.fhir.instance.model.api.IBaseResource
        headers.put(""CamelFhir.resource"", this.patient);
        // parameter type is org.hl7.fhir.instance.model.api.IIdType
        headers.put(""CamelFhir.id"", this.patient.getIdElement());
        // parameter type is ca.uhn.fhir.rest.api.PreferReturnEnum
        headers.put(""CamelFhir.preferReturn"", PreferReturnEnum.REPRESENTATION);

        MethodOutcome result = requestBodyAndHeaders(""direct://RESOURCE"", null, headers);

        assertNotNull(result, ""resource result"");
        LOG.debug(""resource: "" + result);
        assertEquals(date, ((Patient) result.getResource()).getBirthDate(), ""Birth date not updated!"");
    }
",non-flaky,5
178038,aosp-mirror_platform_frameworks_support,GuidedDatePickerTest.testDateRangesMDYFormat,"    @Test
    public void testDateRangesMDYFormat() throws Throwable {

        long startTime = System.currentTimeMillis();

        GuidedDatePickerAction[] datePickerActions = setupDateActionsForMinAndMaxRangeTests();

        scrollToMinAndMaxDates(new int[] {1, 0, 2}, datePickerActions[0]);
        long executionTime = System.currentTimeMillis() - startTime;
        Log.d(TAG, ""testDateRangesMDYFormat() Execution time: "" + executionTime);
        Thread.sleep(FINAL_WAIT);
    }
",non-flaky,5
78264,apache_beam,SplittableParDoProcessFnTest.testCheckpointsAfterNumOutputs,"  @Test
  public void testCheckpointsAfterNumOutputs() throws Exception {
    int max = 100;
    DoFn<Integer, String> fn = new CounterFn(Integer.MAX_VALUE);
    Instant base = Instant.now();
    int baseIndex = 42;

    ProcessFnTester<Integer, String, OffsetRange, Long, OffsetRangeTracker> tester =
        new ProcessFnTester<>(
            base,
            fn,
            BigEndianIntegerCoder.of(),
            SerializableCoder.of(OffsetRange.class),
            max,
            MAX_BUNDLE_DURATION);

    List<String> elements;

    // Create an fn that attempts to 2x output more than checkpointing allows.
    tester.startElement(baseIndex, new OffsetRange(0, 2 * max + max / 2));
    elements = tester.takeOutputElements();
    assertEquals(max, elements.size());
    // Should output the range [0, max)
    assertThat(elements, hasItem(String.valueOf(baseIndex)));
    assertThat(elements, hasItem(String.valueOf(baseIndex + max - 1)));

    assertTrue(tester.advanceProcessingTimeBy(Duration.standardSeconds(1)));
    elements = tester.takeOutputElements();
    assertEquals(max, elements.size());
    // Should output the range [max, 2*max)
    assertThat(elements, hasItem(String.valueOf(baseIndex + max)));
    assertThat(elements, hasItem(String.valueOf(baseIndex + 2 * max - 1)));

    assertTrue(tester.advanceProcessingTimeBy(Duration.standardSeconds(1)));
    elements = tester.takeOutputElements();
    assertEquals(max / 2, elements.size());
    // Should output the range [2*max, 2*max + max/2)
    assertThat(elements, hasItem(String.valueOf(baseIndex + 2 * max)));
    assertThat(elements, hasItem(String.valueOf(baseIndex + 2 * max + max / 2 - 1)));
    assertThat(elements, not(hasItem((String.valueOf(baseIndex + 2 * max + max / 2)))));
  }
",non-flaky,5
53210,cloudfoundry_uaa,ScimGroupEndpointsIntegrationTests.createGroupWithMembersSucceeds,"    @Test
    public void createGroupWithMembersSucceeds() {
        ScimGroup g1 = createGroup(CFID, JOEL, DALE, VIDYA);
        // Check we can GET the group
        ScimGroup g2 = client.getForObject(serverRunning.getUrl(groupEndpoint + ""/{id}""), ScimGroup.class, g1.getId());
        assertEquals(g1, g2);
        assertEquals(3, g2.getMembers().size());
        assertTrue(g2.getMembers().contains(JOEL));
        assertTrue(g2.getMembers().contains(DALE));
        assertTrue(g2.getMembers().contains(VIDYA));

        // check that User.groups is updated
        validateUserGroups(JOEL.getMemberId(), CFID);
        validateUserGroups(DALE.getMemberId(), CFID);
        validateUserGroups(VIDYA.getMemberId(), CFID);
    }
",non-flaky,5
19450,eclipse_xtext-core,ImportedNamespaceAwareLocalScopeProviderTest.iterator,"	@Test public void testRelativePath() throws Exception {
			public Iterator<EObject> iterator() {
				return resource.getAllContents();
			}
",non-flaky,5
98266,spotify_docker-client,ContainerStateTest.testLoadFromRandomFixture,"  @Test
  public void testLoadFromRandomFixture() throws Exception {
    final ContainerState containerState = objectMapper
        .readValue(fixture(""fixtures/container-state-random.json""), ContainerState.class);
    assertThat(containerState.paused(), is(false));
    assertThat(containerState.restarting(), is(false));
    assertThat(containerState.running(), is(true));
    assertThat(containerState.exitCode(), is(0));
    assertThat(containerState.pid(), is(27629));
    assertThat(containerState.startedAt(), is(new Date(1412236798929L)));
    assertThat(containerState.finishedAt(), is(new Date(-62135769600000L)));
    assertThat(containerState.error(), is(""this is an error""));
    assertThat(containerState.oomKilled(), is(false));
    assertThat(containerState.status(), is(""running""));
    
    ContainerState.Health health = containerState.health();
    assertThat(health.failingStreak(), is(1));
    assertThat(health.status(), is(""starting""));
    assertThat(health.log().size(), is(1));
    
    ContainerState.HealthLog log = health.log().get(0);
    assertThat(log.start(), is(new Date(1412236801547L)));
    assertThat(log.end(), is(new Date(1412236802697L)));
    assertThat(log.exitCode(), is(1));
    assertThat(log.output(), is(""output""));
  }
",non-flaky,5
86111,graylog2_graylog2-server,NotificationFacadeTest.loadNativeEntity,"    @Test
    public void loadNativeEntity() {
        final NativeEntityDescriptor nativeEntityDescriptor = NativeEntityDescriptor.create(
                ModelId.of(""content-pack-id""),
                ModelId.of(""5d4d33753d27460ad18e0c4d""),
                ModelTypes.NOTIFICATION_V1,
                ""title"");
        final Optional<NativeEntity<NotificationDto>> optionalNativeEntity = facade.loadNativeEntity(
                nativeEntityDescriptor);
        assertThat(optionalNativeEntity).isPresent();
        final NativeEntity<NotificationDto> nativeEntity = optionalNativeEntity.get();
        assertThat(nativeEntity.entity()).isNotNull();
        final NotificationDto notificationDto = nativeEntity.entity();
        assertThat(notificationDto.id()).isEqualTo(""5d4d33753d27460ad18e0c4d"");
    }
",non-flaky,5
59593,looly_hutool,PinyinUtilTest.getPinyinTest,"	@Test
	public void getPinyinTest(){
		final String pinyin = PinyinUtil.getPinyin(""ä½ å¥½"", "" "");
		Assert.assertEquals(""ni hao"", pinyin);
	}
",non-flaky,5
162400,testcontainers_testcontainers-java,BaseDockerComposeTest.simpleTest,"    @Test
    public void simpleTest() {
        Jedis jedis = new Jedis(getEnvironment().getServiceHost(""redis_1"", REDIS_PORT), getEnvironment().getServicePort(""redis_1"", REDIS_PORT));

        jedis.incr(""test"");
        jedis.incr(""test"");
        jedis.incr(""test"");

        assertEquals(""A redis instance defined in compose can be used in isolation"", ""3"", jedis.get(""test""));
    }
",non-flaky,5
112763,hwang-pku_ormlite-core,RawResultsImplTest.mapRow,"	@Test
	public void testCustomColumnNames() throws Exception {
		Dao<Foo, Integer> dao = createDao(Foo.class, true);
		Foo foo = new Foo();
		foo.val = 1213213;
		assertEquals(1, dao.create(foo));
		final String idName = ""SOME_ID"";
		final String valName = ""SOME_VAL"";
		final AtomicBoolean gotResult = new AtomicBoolean(false);
		GenericRawResults<Object> results =
				dao.queryRaw(""select id as "" + idName + "", val as "" + valName + "" from foo"",
						new RawRowMapper<Object>() {
							@Override
							public Object mapRow(String[] columnNames, String[] resultColumns) {
								assertEquals(idName, columnNames[0]);
								assertEquals(valName, columnNames[1]);
								gotResult.set(true);
								return new Object();
							}
",non-flaky,5
162740,OpenAPITools_openapi-generator,ModelApiResponseTest.typeTest,"    @Test
    public void typeTest() {
        // TODO: test type
    }
",non-flaky,5
113857,finos_symphony-wdk,IntegrationTestConfiguration.workflowResourcesProvider,"@TestConfiguration
  public ResourceProvider workflowResourcesProvider() {
    return new TestResourcesProvider(Paths.get(""dummy"").toString());
  }
",non-flaky,5
53213,cloudfoundry_uaa,ScimGroupEndpointsIntegrationTests.createExistingGroupFailsCorrectly,"    @Test
    public void createExistingGroupFailsCorrectly() {
        ScimGroup g1 = createGroup(CFID);
        @SuppressWarnings(""unchecked"")
        Map<String, String> g2 = client.postForEntity(serverRunning.getUrl(groupEndpoint), g1, Map.class).getBody();
        assertTrue(g2.containsKey(""error""));
        assertEquals(""scim_resource_already_exists"", g2.get(""error""));
    }
",non-flaky,5
177228,line_armeria,FileWatcherRegistryTest.testMultipleFileSystems,"    @Test
    public void testMultipleFileSystems() throws Exception {

        final FileWatcherRegistry fileWatcherRegistry = new FileWatcherRegistry();

        final Path path1 = createMockedPath();
        final Path path2 = createMockedPath();

        final FileWatchRegisterKey key1 = fileWatcherRegistry.register(path1, () -> {});
        final FileWatchRegisterKey key2 = fileWatcherRegistry.register(path2, () -> {});
        assertThat(fileWatcherRegistry.isRunning()).isTrue();

        fileWatcherRegistry.unregister(key1);
        assertThat(fileWatcherRegistry.isRunning()).isTrue();

        fileWatcherRegistry.unregister(key2);
        assertThat(fileWatcherRegistry.isRunning()).isFalse();
    }
",non-flaky,5
135030,undertow-io_undertow,DateUtilsTestCase.testParseFirefoxDate,"    @Test
    public void testParseFirefoxDate() {

        String firefoxHeader = ""Mon, 31 Mar 2014 09:24:49 GMT"";
        Date firefoxDate = DateUtils.parseDate(firefoxHeader);

        Assert.assertNotNull(firefoxDate);

        Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone(""GMT""));
        calendar.set(2014, Calendar.MARCH, 31, 9, 24, 49);
        calendar.set(Calendar.MILLISECOND, 0);

        Assert.assertEquals(calendar.getTime(), firefoxDate);


    }
",non-flaky,5
122574,vespa-engine_vespa,StoredBooleanTest.storedBoolean,"    @Test
    public void storedBoolean() {
        assertFalse(storedBoolean.value());
        storedBoolean.set(context);
        assertTrue(storedBoolean.value());
        storedBoolean.clear(context);
        assertFalse(storedBoolean.value());
    }
",non-flaky,5
60945,apache_druid,RowBucketIterableTest.testSingleDayMultipleRow,"  @Test
  public void testSingleDayMultipleRow()
  {
    intervals = new ArrayList<>();
    intervals.add(INTERVAL_JAN_1_1);

    rows = new ArrayList<>();
    rows.add(JAN_1_M_10);
    rows.add(JAN_1_F_20);
    rows.add(JAN_1_U_30);

    List<Row> expectedDay1 = Arrays.asList(JAN_1_M_10, JAN_1_F_20, JAN_1_U_30);

    Sequence<Row> seq = Sequences.simple(rows);
    RowBucketIterable rbi = new RowBucketIterable(seq, intervals, ONE_DAY);
    Iterator<RowBucket> iter = rbi.iterator();

    RowBucket actual = iter.next();
    Assert.assertEquals(JAN_1, actual.getDateTime());
    Assert.assertEquals(expectedDay1, actual.getRows());
  }
",non-flaky,5
19456,eclipse_xtext-core,ImportedNamespaceAwareLocalScopeProviderTest.iterator,"	@Test public void testUnambiguousImportAreShadowed_01() throws Exception {
			public Iterator<EObject> iterator() {
				return resource.getAllContents();
			}
",non-flaky,5
26896,wildfly_wildfly,InMemoryNamingStoreTestCase.testRebindEmptyName,"    @Test
    public void testRebindEmptyName() throws Exception {
        try {
            nameStore.rebind(new CompositeName(), new Object(), Object.class);
            fail(""Should have thrown and InvalidNameException"");
        } catch(InvalidNameException expected){}

        try {
            nameStore.rebind(new CompositeName(""""), new Object(), Object.class);
            fail(""Should have thrown and InvalidNameException"");
        } catch(InvalidNameException expected){}
    }
",non-flaky,5
98357,Kong_unirest-java,CallbackFutureTest.completed,"    @Test @Disabled
                        public void completed(HttpResponse<JsonNode> response) {
                            throw new UnirestException(""Failure!"");
                        }
",non-flaky,5
94671,square_okhttp,Http2Test.ping,"  @Test public void pingRoundTrip() throws IOException {
      @Override public void ping(boolean ack, int payload1, int payload2) {
        assertTrue(ack);
        assertEquals(expectedPayload1, payload1);
        assertEquals(expectedPayload2, payload2);
      }
",non-flaky,5
137159,spring-projects_spring-framework,AnnotationsScannerTests.method,"		@TestAnnotation2
		public void method() {
		}
",non-flaky,5
122601,vespa-engine_vespa,FileDeleterTest.deleteExisting,"    @Test
    public void deleteExisting() {
        assertFalse(deleter.converge(context));
        path.createParents().writeUtf8File(""bar"");
        assertTrue(deleter.converge(context));
        assertFalse(deleter.converge(context));
    }
",non-flaky,5
137160,spring-projects_spring-framework,AnnotationsScannerTests.method,"		@TestInheritedAnnotation2
		public void method() {
		}
",non-flaky,5
33737,alibaba_fastjson,FastJsonViewTest.test4,"    @Test
    public void test4() throws Exception {
        mockMvc.perform(
                (post(""/fastjsonview/test4"").characterEncoding(""UTF-8"")
                        .contentType(MediaType.APPLICATION_JSON))).andExpect(status
                ().isOk()).andDo(print()).andExpect(content().string(""{\""id\"":100,\""name\"":\""æµè¯\"",\""rootDepartment\"":{\""children\"":[],\""id\"":1,\""members\"":[],\""name\"":\""é¨é¨1\""}}""));
    }
",non-flaky,5
94748,ktuukkan_marine-api,Latitude27Test.maxValueIsCorrect,"    @Test
    public void maxValueIsCorrect() {
        assertTrue(Latitude27.isCorrect(90*60*10000));
    }
",non-flaky,5
376,apache_hadoop,TestRefreshUserMappings.testRefreshSuperUserGroupsConfiguration,"  @Test
  public void testRefreshSuperUserGroupsConfiguration() throws Exception {
    final String SUPER_USER = ""super_user"";
    final List<String> groupNames1 = new ArrayList<>();
    groupNames1.add(""gr1"");
    groupNames1.add(""gr2"");
    final List<String> groupNames2 = new ArrayList<>();
    groupNames2.add(""gr3"");
    groupNames2.add(""gr4"");

    //keys in conf
    String userKeyGroups = DefaultImpersonationProvider.getTestProvider().
        getProxySuperuserGroupConfKey(SUPER_USER);
    String userKeyHosts = DefaultImpersonationProvider.getTestProvider().
        getProxySuperuserIpConfKey (SUPER_USER);
    
    config.set(userKeyGroups, ""gr3,gr4,gr5""); // superuser can proxy for this group
    config.set(userKeyHosts,""127.0.0.1"");
    ProxyUsers.refreshSuperUserGroupsConfiguration(config);
    
    UserGroupInformation ugi1 = mock(UserGroupInformation.class);
    UserGroupInformation ugi2 = mock(UserGroupInformation.class);
    UserGroupInformation suUgi = mock(UserGroupInformation.class);
    when(ugi1.getRealUser()).thenReturn(suUgi);
    when(ugi2.getRealUser()).thenReturn(suUgi);

    when(suUgi.getShortUserName()).thenReturn(SUPER_USER); // super user
    when(suUgi.getUserName()).thenReturn(SUPER_USER+""L""); // super user
     
    when(ugi1.getShortUserName()).thenReturn(""user1"");
    when(ugi2.getShortUserName()).thenReturn(""user2"");
    
    when(ugi1.getUserName()).thenReturn(""userL1"");
    when(ugi2.getUserName()).thenReturn(""userL2"");

    // set groups for users
    when(ugi1.getGroups()).thenReturn(groupNames1);
    when(ugi2.getGroups()).thenReturn(groupNames2);


    // check before
    try {
      ProxyUsers.authorize(ugi1, ""127.0.0.1"");
      fail(""first auth for "" + ugi1.getShortUserName() + "" should've failed "");
    } catch (AuthorizationException e) {
      // expected
      System.err.println(""auth for "" + ugi1.getUserName() + "" failed"");
    }
    try {
      ProxyUsers.authorize(ugi2, ""127.0.0.1"");
      System.err.println(""auth for "" + ugi2.getUserName() + "" succeeded"");
      // expected
    } catch (AuthorizationException e) {
      fail(""first auth for "" + ugi2.getShortUserName() + "" should've succeeded: "" + e.getLocalizedMessage());
    }
    
    // refresh will look at configuration on the server side
    // add additional resource with the new value
    // so the server side will pick it up
    String rsrc = ""testGroupMappingRefresh_rsrc.xml"";
    addNewConfigResource(rsrc, userKeyGroups, ""gr2"", userKeyHosts, ""127.0.0.1"");  
    
    DFSAdmin admin = new DFSAdmin(config);
    String [] args = new String[]{""-refreshSuperUserGroupsConfiguration""};
    admin.run(args);
    
    try {
      ProxyUsers.authorize(ugi2, ""127.0.0.1"");
      fail(""second auth for "" + ugi2.getShortUserName() + "" should've failed "");
    } catch (AuthorizationException e) {
      // expected
      System.err.println(""auth for "" + ugi2.getUserName() + "" failed"");
    }
    try {
      ProxyUsers.authorize(ugi1, ""127.0.0.1"");
      System.err.println(""auth for "" + ugi1.getUserName() + "" succeeded"");
      // expected
    } catch (AuthorizationException e) {
      fail(""second auth for "" + ugi1.getShortUserName() + "" should've succeeded: "" + e.getLocalizedMessage());
    }
    
    
  }
",non-flaky,5
30951,camunda-cloud_zeebe,SubscriptionUtilTest.shouldGetSubscriptionHashCode,"  @Test
  public void shouldGetSubscriptionHashCode() {
    assertThat(getSubscriptionHashCode(wrapString(""a""))).isEqualTo(97);
    assertThat(getSubscriptionHashCode(wrapString(""b""))).isEqualTo(98);
    assertThat(getSubscriptionHashCode(wrapString(""c""))).isEqualTo(99);
    assertThat(getSubscriptionHashCode(wrapString(""foobar""))).isEqualTo(-1268878963);
  }
",non-flaky,5
113987,apache_struts,BeanConfigTest.testConstructor2,"    @Test
    public void testConstructor2() throws Exception {
        Class<TestBean> expectedClass = TestBean.class;
        String expectedName = ""expectedBeanName"";
        Class<Object> expectedType = Object.class;
        Scope expectedScope = Scope.PROTOTYPE;
        boolean expectedOnlyStatic = true;
        boolean expectedOptional = true;

        BeanConfig beanConfig = new BeanConfig(expectedClass, expectedName, expectedType, expectedScope,
                expectedOnlyStatic, expectedOptional);

        Assert.assertEquals(expectedClass, beanConfig.getClazz());
        Assert.assertEquals(expectedName, beanConfig.getName());
        Assert.assertEquals(expectedScope, beanConfig.getScope());
        Assert.assertEquals(expectedType, beanConfig.getType());
        Assert.assertEquals(expectedOnlyStatic, beanConfig.isOnlyStatic());
        Assert.assertEquals(expectedOptional, beanConfig.isOptional());
    }
",non-flaky,5
162397,testcontainers_testcontainers-java,DockerComposeWaitStrategyTest.testWaitOnOneOfMultipleStrategiesFailing,"    @Test
    public void testWaitOnOneOfMultipleStrategiesFailing() {
        final DockerComposeContainer environment = new DockerComposeContainer(new File(""src/test/resources/compose-test.yml""))
            .withExposedService(""redis_1"", REDIS_PORT, Wait.forListeningPort().withStartupTimeout(Duration.ofSeconds(10)))
            .waitingFor(""db_1"", Wait.forLogMessage("".*test test test.*\\s"", 1).withStartupTimeout(Duration.ofSeconds(10)))
            .withTailChildContainers(true);

        VisibleAssertions.assertThrows(""waiting on one failing strategy to time out"",
            RuntimeException.class,
            () -> environment.starting(Description.createTestDescription(Object.class, ""name"")));
    }
",non-flaky,5
179487,abel533_Mapper,SafeDeleteByFieldTest.testSafeDeleteNull,"    @Test(expected = PersistenceException.class)
    public void testSafeDeleteNull() {
        SqlSession sqlSession = getSqlSession();
        try {
            CountryMapper mapper = sqlSession.getMapper(CountryMapper.class);
            mapper.delete(null);
        } finally {
            sqlSession.close();
        }
    }
",non-flaky,5
97757,vojtechhabarta_typescript-generator,DefaultTypeProcessorTest.testWildcards,"    @Test
    public void testWildcards() throws NoSuchFieldException {
        TypeProcessor converter = new DefaultTypeProcessor();
        final TypeProcessor.Context context = getTestContext(converter);
        assertEquals(""string[]"", converter.processType(C.class.getDeclaredField(""x"").getGenericType(), context).getTsType().toString());
        assertEquals(""any[]"", converter.processType(C.class.getDeclaredField(""y"").getGenericType(), context).getTsType().toString());
        assertEquals(""any[]"", converter.processType(C.class.getDeclaredField(""z"").getGenericType(), context).getTsType().toString());
    }
",non-flaky,5
53130,cloudfoundry_uaa,UaaMetricsEmitterTests.auditService_metrics_emitted,"    @Test
    public void auditService_metrics_emitted() throws Exception {
        Mockito.when(metricsUtils.pullUpMap(""cloudfoundry.identity"", ""*"", server)).thenReturn((Map)mBeanMap2);
        uaaMetricsEmitter.emitMetrics();
        Mockito.verify(statsDClient).gauge(""audit_service.user_authentication_count"", 3);
        Mockito.verify(statsDClient).gauge(""audit_service.user_not_found_count"", 1);
        Mockito.verify(statsDClient).gauge(""audit_service.principal_authentication_failure_count"", 4);
        Mockito.verify(statsDClient).gauge(""audit_service.principal_not_found_count"", 5);
        Mockito.verify(statsDClient).gauge(""audit_service.user_authentication_failure_count"", 6);
        Mockito.verify(statsDClient).gauge(""audit_service.client_authentication_count"", 7);
        Mockito.verify(statsDClient).gauge(""audit_service.client_authentication_failure_count"", 42);
    }
",non-flaky,5
162361,testcontainers_testcontainers-java,PublicBinaryAPITest.testInterfaces,"    @Test
    public void testInterfaces() {
        assertThat(classNode.interfaces)
                .allSatisfy(it -> assertThat(it).doesNotStartWith(SHADED_PACKAGE_PATH));
    }
",non-flaky,5
135015,undertow-io_undertow,AjpClientTestCase.acknowledged,"    @Test
    public void testSendPing() throws Exception {
        //
        final UndertowClient client = createClient();

        final List<ClientResponse> responses = new CopyOnWriteArrayList<>();
        final FutureResult<Boolean> result = new FutureResult<>();
        final CountDownLatch latch = new CountDownLatch(3);
        final ClientConnection connection = client.connect(ADDRESS, worker, DefaultServer.getBufferPool(), OptionMap.EMPTY).get();
        Assert.assertTrue(connection.isPingSupported());
        try {
            connection.getIoThread().execute(new Runnable() {
                @Override
                public void run() {
                        final ClientRequest request = new ClientRequest().setMethod(Methods.GET).setPath(MESSAGE);
                        request.getRequestHeaders().put(Headers.HOST, DefaultServer.getHostAddress());
                        connection.sendRequest(request, createClientCallback(responses, latch));
                        connection.sendPing(new ClientConnection.PingListener() {
                            @Override
                            public void acknowledged() {
                                result.setResult(true);
                                latch.countDown();
                            }
",non-flaky,5
135769,Netflix_Hystrix,HystrixPluginsTest.testConcurrencyStrategyViaProperty,"    @Test
    public void testConcurrencyStrategyViaProperty() {
        try {
            String fullClass = HystrixConcurrencyStrategyTestImpl.class.getName();
            System.setProperty(""hystrix.plugin.HystrixConcurrencyStrategy.implementation"", fullClass);
            HystrixConcurrencyStrategy impl = HystrixPlugins.getInstance().getConcurrencyStrategy();
            assertTrue(impl instanceof HystrixConcurrencyStrategyTestImpl);
        } finally {
            System.clearProperty(""hystrix.plugin.HystrixConcurrencyStrategy.implementation"");
        }
	}*/
",non-flaky,5
26730,MundaneImmortal_pair-distribution-app,OpsPairsCombinationsTest.testIsRotationTimeForEmptyHistoryWithEveryDayRotation,"	@Test
	public void testIsRotationTimeForEmptyHistoryWithEveryDayRotation() {
		OpsPairCombinations devPairCombinations = new OpsPairCombinations(new ArrayList<>());
		Company company = new Company(""myCompany"");
		company.setDevOpsRotationStrategy(""weekly"");
		devPairCombinations.setCompany(company);

		assertThat(devPairCombinations.isRotationTime(Arrays.asList(""track1""), getStandardDevs(), true), is(false));
	}
",non-flaky,5
156055,jReddit_jReddit,JsonUtilsTest.testSafeJsonToLong,"    @Test
    public void testSafeJsonToLong() {
        Assert.assertNull(JsonUtils.safeJsonToLong(null));
        Assert.assertNull(JsonUtils.safeJsonToLong(""abcd""));
        Assert.assertNull(JsonUtils.safeJsonToLong(""""));
        Assert.assertEquals((Long) (long) 355, (Long) JsonUtils.safeJsonToLong(""355""));
        Assert.assertNull(JsonUtils.safeJsonToLong(""25275738927589278572891""));
        Assert.assertNull(JsonUtils.safeJsonToLong(""-25275738927589278572891""));
        Assert.assertEquals((Long) Long.MAX_VALUE, (Long) JsonUtils.safeJsonToLong("""" + Long.MAX_VALUE));
        Assert.assertEquals((Long) Long.MIN_VALUE, (Long) JsonUtils.safeJsonToLong("""" + Long.MIN_VALUE));
        Assert.assertEquals((Long) (long) 0, JsonUtils.safeJsonToLong(""0""));
    }
",non-flaky,5
112697,hwang-pku_ormlite-core,TransactionManagerTest.call,"	@Test
	public void testTransactionManagerRollbackOtherException() throws Exception {
		ConnectionSource connectionSource = createMock(ConnectionSource.class);
		DatabaseConnection conn = createMock(DatabaseConnection.class);
		expect(conn.isAutoCommitSupported()).andReturn(false);
		Savepoint savePoint = createMock(Savepoint.class);
		expect(savePoint.getSavepointName()).andReturn(""name"").anyTimes();
		expect(conn.setSavePoint(isA(String.class))).andReturn(savePoint);
		conn.rollback(savePoint);
		expect(connectionSource.getDatabaseType()).andReturn(databaseType);
		expect(connectionSource.getReadWriteConnection(null)).andReturn(conn);
		expect(connectionSource.saveSpecialConnection(conn)).andReturn(true);
		connectionSource.clearSpecialConnection(conn);
		connectionSource.releaseConnection(conn);
		replay(connectionSource, conn, savePoint);
		TransactionManager tm = new TransactionManager(connectionSource);
		try {
			tm.callInTransaction(new Callable<Void>() {
				@Override
				public Void call() throws Exception {
					throw new Exception(""you better roll back!!"");
				}
",non-flaky,5
162405,testcontainers_testcontainers-java,OutputStreamTest.testFetchStdoutWithTimeout,"    @Test
    public void testFetchStdoutWithTimeout() throws TimeoutException {

        WaitingConsumer consumer = new WaitingConsumer();

        container.followOutput(consumer, STDOUT);

        assertThrows(""a TimeoutException should be thrown"", TimeoutException.class, () -> {
            consumer.waitUntil(frame -> frame.getType() == STDOUT && frame.getUtf8String().contains(""seq=5""),
                    2, TimeUnit.SECONDS);
            return true;
        });
    }
",non-flaky,5
98220,apache_jackrabbit,CreateRepositoryTest.createRepositories,"    @Test
    public void createRepositories() throws Exception {
        doCreateRepositories(""jackrabbit-1.4"");
    }
",non-flaky,5
112151,apache_shardingsphere-elasticjob,ShardingItemsTest.assertToItemsStringWhenEmpty,"    @Test
    public void assertToItemsStringWhenEmpty() {
        assertThat(ShardingItems.toItemsString(Collections.<Integer>emptyList()), is(""""));
    }
",non-flaky,5
98265,spotify_docker-client,ContainerStatsTest.test1_26,"  @Test
  public void test1_26() throws Exception {
    objectMapper.readValue(fixture(""fixtures/1.26/containerStats.json""), ContainerStats.class);
  }
",non-flaky,5
20964,NationalSecurityAgency_timely,TestWrappedGorillaCompressor.testSerialization,"    @Test
    public void testSerialization() throws IOException, ClassNotFoundException {

        long start = System.currentTimeMillis();
        WrappedGorillaCompressor originalCompressor = new WrappedGorillaCompressor(start);
        long t = start;

        for (int x = 1; x <= 10; x++) {
            originalCompressor.addValue(t, 10);
            t = t + 1000;
        }
        originalCompressor.close();
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        ObjectOutputStream oos = new ObjectOutputStream(outputStream);
        oos.writeObject(originalCompressor);
        oos.close();

        ByteArrayInputStream inputStream = new ByteArrayInputStream(outputStream.toByteArray());
        ObjectInputStream ois = new ObjectInputStream(inputStream);
        WrappedGorillaCompressor copyCompressor = (WrappedGorillaCompressor) ois.readObject();

        GorillaDecompressor d = new GorillaDecompressor(new LongArrayInput(copyCompressor.getCompressorOutput()));

        LinkedList<Pair> q = new LinkedList<>();
        Pair p = null;
        while ((p = d.readPair()) != null) {
            q.add(p);
        }

        Assert.assertEquals(10, q.size());
        Assert.assertEquals(start, q.peekFirst().getTimestamp());
        Assert.assertEquals(start + 9000, q.peekLast().getTimestamp());
    }
",non-flaky,5
156146,soot-oss_soot,ClassRenamerTest.getOrAddNewName_cachingName,"  @Test
  public void getOrAddNewName_cachingName() {
    ClassRenamer.v().setRemovePackages(false);
    ClassRenamer.v().setRenamePackages(false);

    final String newName = ClassRenamer.v().getOrAddNewName(null, ""ClassName"");
    assertThat(newName, not(containsString(""."")));

    Map<String, String> mapping = ClassRenamer.v().getClassNameMapping((pOldName, pNewName) -> pOldName.equals(""ClassName""));
    assertThat(mapping, hasEntry(""ClassName"", newName));
    assertThat(mapping.size(), equalTo(1));

    assertThat(ClassRenamer.v().getOrAddNewName(null, ""ClassName""), equalTo(newName));

    mapping = ClassRenamer.v().getClassNameMapping((pOldName, pNewName) -> pOldName.equals(""ClassName""));
    assertThat(mapping, hasEntry(""ClassName"", newName));
    assertThat(mapping.size(), equalTo(1));
  }
",non-flaky,5
26795,MundaneImmortal_pair-distribution-app,DayPairsHelperTest.testGenerateNewDayPairsSoloRequired,"	@Test
	public void testGenerateNewDayPairsSoloRequired() {
		PairCombinations pairs = getPairsList();
		List<Developer> devs = Arrays.asList(new Developer(""dev1""), new Developer(""dev2""), new Developer(""dev3""));
		List<String> tracks = Arrays.asList(""track1"", ""track2"", ""track3"");
		Map<Pair, Integer> pairsWeight = subject.buildPairsWeightFromPastPairing(pairs, devs);

		DayPairs dayPairs = subject.generateNewDayPairs(tracks, devs, pairs, pairsWeight, getStandardCompanies());

		assertThat(dayPairs.getTracks().size(), is(2));
		assertThat(dayPairs.getTracks(), containsInAnyOrder(""track1"", ""track2""));
		assertThat(dayPairs.getPairByTrack(""track1""),
				is((new Pair(Arrays.asList(new Developer(""dev1""), new Developer(""dev2""))))));
	}
",non-flaky,5
70818,apache_kafka,PluginsTest.newPluginShouldInstantiateWithPluginClassLoader,"    @Test
    public void newPluginShouldInstantiateWithPluginClassLoader() {
        TestPlugins.assertAvailable();
        Converter plugin = plugins.newPlugin(
            TestPlugins.ALIASED_STATIC_FIELD,
            new AbstractConfig(new ConfigDef(), Collections.emptyMap()),
            Converter.class
        );

        assertInstanceOf(SamplingTestPlugin.class, plugin, ""Cannot collect samples"");
        Map<String, SamplingTestPlugin> samples = ((SamplingTestPlugin) plugin).flatten();
        assertPluginClassLoaderAlwaysActive(samples);
    }
",non-flaky,5
162425,testcontainers_testcontainers-java,GenericContainerRuleTest.environmentAndCustomCommandTest,"    @Test
    public void environmentAndCustomCommandTest() throws IOException {
        String line = getReaderForContainerPort80(alpineEnvVar).readLine();

        assertEquals(""An environment variable can be passed into a command"", ""42"", line);
    }
",non-flaky,5
113713,salesforce_reactive-grpc,BackpressureIntegrationTest.bidiResponseBackpressure,"    @Test
    public void bidiResponseBackpressure() {
        serverRule.getServiceRegistry().addService(new TestService());

        ReactorNumbersGrpc.ReactorNumbersStub stub = ReactorNumbersGrpc.newReactorStub(serverRule.getChannel());

        Flux<NumberProto.Number> reactorRequest = Flux.empty();

        Flux<NumberProto.Number> reactorResponse = reactorRequest.compose(stub::twoWayResponsePressure)
                .doOnNext(n -> System.out.println(n.getNumber(0) + ""  <--""))
                .doOnNext(n -> waitIfValuesAreEqual(n.getNumber(0), 3));

        StepVerifier.create(reactorResponse)
                .expectNextCount(NUMBER_OF_STREAM_ELEMENTS)
                .expectComplete()
                .verify(Duration.ofSeconds(5));

        assertThat(numberOfWaits.get()).isEqualTo(1);
    }
",non-flaky,5
98314,spotify_docker-client,DefaultDockerClientUnitTest.testHostForIpHttps,"  @Test
  public void testHostForIpHttps() {
    final DefaultDockerClient client = DefaultDockerClient.builder()
        .uri(""https://192.168.53.103:2375"").build();
    assertThat(client.getHost(), equalTo(""192.168.53.103""));
  }
",non-flaky,5
160374,ConsenSys_teku,MetadataTest.shouldSerializeWithoutRoot,"  @Test
  public void shouldSerializeWithoutRoot() throws JsonProcessingException {
    final Metadata metadata = new Metadata(INTERCHANGE_VERSION, null);
    assertThat(jsonProvider.objectToPrettyJSON(metadata))
        .isEqualToIgnoringWhitespace(""{\""interchange_format_version\"":\""5\""}"");
  }
",non-flaky,5
156121,soot-oss_soot,AbstractLambdaMetaFactoryCGTest.constructorMethodRef,"  @Test
  public void constructorMethodRef() {
    String testClass = ""soot.lambdaMetaFactory.ConstructorMethodRef"";

    final SootMethod target
        = prepareTarget(methodSigFromComponents(testClass, TEST_METHOD_RET, TEST_METHOD_NAME), testClass);

    final CallGraph cg = Scene.v().getCallGraph();

    final String referencedMethodName = ""<init>"";

    final String metaFactoryClass = getMetaFactoryNameMethodRef(testClass, referencedMethodName);

    final SootMethod bootstrap
        = Scene.v().getMethod(methodSigFromComponents(metaFactoryClass, ""java.util.function.Supplier"", ""bootstrap$""));
    final SootMethod metaFactoryConstructor
        = Scene.v().getMethod(methodSigFromComponents(metaFactoryClass, ""void"", ""<init>""));
    final SootMethod get = Scene.v().getMethod(methodSigFromComponents(metaFactoryClass, ""java.lang.Object"", ""get""));
    final SootMethod referencedMethod
        = Scene.v().getMethod(methodSigFromComponents(testClass, ""void"", referencedMethodName));

    final List<Edge> edgesFromTarget = newArrayList(cg.edgesOutOf(target));

    assertTrue(""There should be an edge from main to the bootstrap method of the synthetic LambdaMetaFactory"",
        edgesFromTarget.stream().anyMatch(e -> e.tgt().equals(bootstrap) && e.isStatic()));
    assertTrue(""There should be an edge to the constructor of the LambdaMetaFactory in the bootstrap method"",
        newArrayList(cg.edgesOutOf(bootstrap)).stream()
            .anyMatch(e -> e.tgt().equals(metaFactoryConstructor) && e.isSpecial()));
    assertTrue(
        ""There should be an interface invocation on the synthetic LambdaMetaFactory's implementation of the functional interface  in the main method"",
        edgesFromTarget.stream().anyMatch(e -> e.getTgt().equals(get) && e.kind() == Kind.INTERFACE));
    assertTrue(""There should be a special call to the referenced method"",
        newArrayList(cg.edgesOutOf(get)).stream().anyMatch(e -> e.getTgt().equals(referencedMethod) && e.isSpecial()));

    validateAllBodies(target.getDeclaringClass(), bootstrap.getDeclaringClass());
  }
",non-flaky,5
106585,Alluxio_alluxio,HdfsConfValidationTaskTest.cannotParseCoreSiteXml,"  @Test
  public void cannotParseCoreSiteXml() throws IOException {
    String hdfsSite = Paths.get(sTestDir.toPath().toString(), ""hdfs-site.xml"").toString();
    ValidationTestUtils.writeXML(hdfsSite, ImmutableMap.of(""key2"", ""value2""));
    RandomAccessFile hdfsFile = new RandomAccessFile(hdfsSite, ""rw"");
    hdfsFile.setLength(hdfsFile.length() - 10);

    String coreSite = Paths.get(sTestDir.toPath().toString(), ""core-site.xml"").toString();
    ValidationTestUtils.writeXML(coreSite, ImmutableMap.of(""key1"", ""value1""));
    RandomAccessFile coreFile = new RandomAccessFile(coreSite, ""rw"");
    coreFile.setLength(coreFile.length() - 10);

    sConf.set(PropertyKey.UNDERFS_HDFS_CONFIGURATION,
            hdfsSite + HdfsConfValidationTask.SEPARATOR + coreSite);
    HdfsConfValidationTask task =
            new HdfsConfValidationTask(""hdfs://namenode:9000/alluxio"", sConf);
    ValidationTaskResult result = task.loadHdfsConfig();
    assertEquals(ValidationUtils.State.FAILED, result.getState());
    assertThat(result.getResult(),
        containsString(String.format(""Failed to parse %s"", hdfsSite)));
    assertThat(result.getResult(), containsString(String.format(""Failed to parse %s"", coreSite)));
    assertThat(result.getAdvice(), containsString(String.format(""Failed to parse %s"", hdfsSite)));
    assertThat(result.getAdvice(), containsString(String.format(""Failed to parse %s"", coreSite)));
  }
",non-flaky,5
38245,palantir_atlasdb,AbstractAtlasDbKeyValueServiceTest.testGetAllTimestamps,"    @Test
    public void testGetAllTimestamps() {
        putTestDataForMultipleTimestamps();
        final Cell cell = Cell.create(row0, column0);
        final Set<Cell> cellSet = ImmutableSet.of(cell);
        Multimap<Cell, Long> timestamps = keyValueService.getAllTimestamps(
                TEST_TABLE,
                cellSet,
                TEST_TIMESTAMP);
        assertEquals(0, timestamps.size());

        timestamps = keyValueService.getAllTimestamps(TEST_TABLE, cellSet, TEST_TIMESTAMP + 1);
        assertEquals(1, timestamps.size());
        assertTrue(timestamps.containsEntry(cell, TEST_TIMESTAMP));

        timestamps = keyValueService.getAllTimestamps(TEST_TABLE, cellSet, TEST_TIMESTAMP + 2);
        assertEquals(2, timestamps.size());
        assertTrue(timestamps.containsEntry(cell, TEST_TIMESTAMP));
        assertTrue(timestamps.containsEntry(cell, TEST_TIMESTAMP + 1));

        assertEquals(
                timestamps,
                keyValueService.getAllTimestamps(TEST_TABLE, cellSet, TEST_TIMESTAMP + 3));
    }
",non-flaky,5
162732,OpenAPITools_openapi-generator,XmlItemTest.prefixNamespaceArrayTest,"    @Test
    public void prefixNamespaceArrayTest() {
        // TODO: test prefixNamespaceArray
    }
",non-flaky,5
98079,vert-x3_vertx-mongo-client,WriteConcernParserTest.testAdvancedWriteConcern_w_string,"  @Test
  public void testAdvancedWriteConcern_w_string() {
    WriteConcern expected = WriteConcern.MAJORITY.withWTimeout(1, TimeUnit.MILLISECONDS).withJournal(true);
    JsonObject config = new JsonObject();
    config.put(""w"", ""majority"");
    config.put(""wtimeoutMS"", 1);
    config.put(""j"", true);

    WriteConcern wc = new WriteConcernParser(null, config).writeConcern();
    assertNotNull(wc);
    assertEquals(expected, wc);
  }
",non-flaky,5
77001,Tencent_Firestorm,MultiStorageFaultToleranceTest.diskFaultTolerance,"  @Test
  public void diskFaultTolerance() {
    String appId = ""app_disk_fault_tolerance_data"";
    Map<Long, byte[]> expectedData = Maps.newHashMap();

    Map<Integer, List<Integer>> map = Maps.newHashMap();
    map.put(2, Lists.newArrayList(1, 3));
    map.put(3, Lists.newArrayList(1));
    registerShuffle(appId, map);

    Roaring64NavigableMap blockIdBitmap1 = Roaring64NavigableMap.bitmapOf();
    Roaring64NavigableMap blockIdBitmap2 = Roaring64NavigableMap.bitmapOf();
    Roaring64NavigableMap blockIdBitmap3 = Roaring64NavigableMap.bitmapOf();
    Roaring64NavigableMap blockIdBitmap4 = Roaring64NavigableMap.bitmapOf();

    List<ShuffleBlockInfo> blocks1 = createShuffleBlockList(
        2, 1, 1,11, 10 * 1024 * 1024, blockIdBitmap1, expectedData);

    List<ShuffleBlockInfo> blocks2 = createShuffleBlockList(
        3, 1, 2,9, 10 * 1024 * 1024, blockIdBitmap2, expectedData);

    List<ShuffleBlockInfo> blocks3 = createShuffleBlockList(
        2, 3, 2,9, 10 * 1024 * 1024, blockIdBitmap3, expectedData);

    List<ShuffleBlockInfo> blocks4 = createShuffleBlockList(
        2, 1, 1, 11, 10 * 1024 * 1024, blockIdBitmap4, expectedData);

    assertEquals(1, ShuffleStorageUtils.getStorageIndex(2, appId, 2, 1));
    assertEquals(1, ShuffleStorageUtils.getStorageIndex(2, appId, 3, 1));
    assertEquals(1, ShuffleStorageUtils.getStorageIndex(2, appId, 2, 3));
    assertEquals(1, ShuffleStorageUtils.getStorageIndex(2, appId, 2, 1));
    try {
      sendSinglePartitionToShuffleServer(appId, 2, 1, 1, blocks1);
      sendSinglePartitionToShuffleServer(appId, 3, 1,2, blocks2);
      sendSinglePartitionToShuffleServer(appId, 2, 3, 2, blocks3);
      sendSinglePartitionToShuffleServer(appId, 2, 1, 1, blocks4);
    } catch (Exception e) {
      e.printStackTrace();
      fail();
    }
    validateResult(appId, 2, 1, blockIdBitmap1, Roaring64NavigableMap.bitmapOf(1), expectedData);
    validateResult(appId, 3, 1, blockIdBitmap2, Roaring64NavigableMap.bitmapOf(2), expectedData);
    validateResult(appId, 2, 3, blockIdBitmap3, Roaring64NavigableMap.bitmapOf(2), expectedData);
  }
",non-flaky,5
20981,NationalSecurityAgency_timely,SearchLookupResponseTest.testResponse1,"    @Test
    public void testResponse1() throws Exception {
        SearchLookupResponse response = new SearchLookupResponse();
        response.setType(""LOOKUP"");
        response.setMetric(""sys.cpu.user"");
        response.putTag(""host"", ""localhost"");
        response.putTag(""rack"", ""r1"");
        response.setTime(1500);
        List<Result> results = new ArrayList<>();
        Result r1 = new Result();
        r1.setMetric(""sys.cpu.idle"");
        r1.setTsuid(""000011000008203D00"");
        r1.putTag(""host"", ""localhost"");
        r1.putTag(""rack"", ""r1"");
        Result r2 = new Result();
        r2.setMetric(""sys.cpu.user"");
        r2.setTsuid(""000011000008203D01"");
        r2.putTag(""host"", ""localhost"");
        r2.putTag(""rack"", ""r1"");
        results.add(r1);
        results.add(r2);
        response.setResults(results);
        response.setTotalResults(results.size());
        String r = JsonUtil.getObjectMapper().writeValueAsString(response);
        String expected = ""{\""type\"":\""LOOKUP\"",\""metric\"":\""sys.cpu.user\"",\""tags\"":{\""rack\"":\""r1\"",\""host\"":\""localhost\""},\""limit\"":0,\""time\"":1500,\""totalResults\"":2,\""results\"":[{\""tags\"":{\""rack\"":\""r1\"",\""host\"":\""localhost\""},\""metric\"":\""sys.cpu.idle\"",\""tsuid\"":\""000011000008203D00\""},{\""tags\"":{\""rack\"":\""r1\"",\""host\"":\""localhost\""},\""metric\"":\""sys.cpu.user\"",\""tsuid\"":\""000011000008203D01\""}]}"";
        Assert.assertEquals(expected, r);
        SearchLookupResponse slr = JsonUtil.getObjectMapper().readValue(r, SearchLookupResponse.class);
        Assert.assertEquals(response, slr);
    }
",non-flaky,5
135068,undertow-io_undertow,URLUtilsTestCase.testIsAbsoluteUrlIgnoresSyntaxErrorsAreNotAbsolute,"    @Test
    public void testIsAbsoluteUrlIgnoresSyntaxErrorsAreNotAbsolute() {
        assertFalse(URLUtils.isAbsoluteUrl("":""));
    }
",non-flaky,5
76752,quarkusio_quarkus,CreateProjectMojoIT.testProjectGenerationFromScratchWithResource,"    @Test
    public void testProjectGenerationFromScratchWithResource() throws Exception {
        testDir = initEmptyProject(""projects/project-generation-with-resource"");
        assertThat(testDir).isDirectory();
        invoker = initInvoker(testDir);

        Properties properties = new Properties();
        properties.put(""projectGroupId"", ""org.acme"");
        properties.put(""projectArtifactId"", ""acme"");
        properties.put(""className"", ""org.acme.MyResource.java"");
        properties.put(""extensions"", ""resteasy"");
        InvocationResult result = setup(properties);

        assertThat(result.getExitCode()).isZero();

        // As the directory is not empty (log) navigate to the artifactID directory
        testDir = new File(testDir, ""acme"");

        assertThat(new File(testDir, ""pom.xml"")).isFile();
        assertThat(new File(testDir, ""src/main/java"")).isDirectory();

        check(new File(testDir, ""src/main/java/org/acme/MyResource.java""), ""package org.acme;"");
    }
",non-flaky,5
160432,ConsenSys_teku,StateSelectorFactoryTest.justifiedSelector_shouldGetJustifiedState,"  @Test
  public void justifiedSelector_shouldGetJustifiedState()
      throws ExecutionException, InterruptedException {
    when(client.getJustifiedState()).thenReturn(SafeFuture.completedFuture(Optional.of(state)));
    Optional<BeaconState> result = factory.justifiedSelector().getState().get();
    assertThat(result).isEqualTo(Optional.of(state));
    verify(client).getJustifiedState();
  }
",non-flaky,5
19473,eclipse_xtext-core,PathTraverserTest.testEmptyFolder,"	@Test
	public void testEmptyFolder() throws Exception {
		String path = pathTo(""emptyFolder"");
		Set<URI> uris = new PathTraverser().findAllResourceUris(path, everythingButDummy);
		assertTrue(uris.isEmpty());
	}
",non-flaky,5
21263,androidx_androidx,PreferenceParentGroupTest.parentReassignTest,"    @Test
    public void parentReassignTest() {
        PreferenceManager manager = new PreferenceManager(mContext);

        PreferenceScreen screen = manager.createPreferenceScreen(mContext);

        PreferenceCategory category1 = new PreferenceCategory(mContext);
        screen.addPreference(category1);
        PreferenceCategory category2 = new PreferenceCategory(mContext);
        screen.addPreference(category2);

        CheckBoxPreference pref = new CheckBoxPreference(mContext);
        assertNull(pref.getParent());

        category1.addPreference(pref);
        assertEquals(category1, pref.getParent());

        category1.removePreference(pref);
        category2.addPreference(pref);
        assertEquals(category2, pref.getParent());
    }
",non-flaky,5
43026,trinodb_trino,TestDevelopmentLoaderConfig.testDefaults,"    @Test
    public void testDefaults()
    {
        assertRecordedDefaults(recordDefaults(DevelopmentLoaderConfig.class)
                .setPlugins("""")
                .setMavenLocalRepository(ArtifactResolver.USER_LOCAL_REPO)
                .setMavenRemoteRepository(ArtifactResolver.MAVEN_CENTRAL_URI));
    }
",non-flaky,5
98669,nutzam_nutz,BaseTest.test_issue_1220,"    @Test
    public void test_issue_1220() throws IOException {
        File f = File.createTempFile(""abc_"", "".json"");
        org.nutz.lang.Files.write(f, ""abc"");
        File f2 = File.createTempFile(""def_"", "".json"");
        org.nutz.lang.Files.write(f2, ""def"");
        upload(""/upload/issue1220"", new NutMap(""file"", new File[]{f, f2}));
        assertEquals(200, resp.getStatus());
        String cnt = resp.getContent();
        System.out.println(cnt);
        assertEquals(""2,3,3"", cnt);
    }
",non-flaky,5
104691,apache_pinot,ConvertToRawIndexMinionClusterIntegrationTest.testConvertToRawIndexTask,"  @Test
  public void testConvertToRawIndexTask()
      throws Exception {
    String offlineTableName = TableNameBuilder.OFFLINE.tableNameWithType(getTableName());

    File testDataDir = new File(CommonConstants.Server.DEFAULT_INSTANCE_DATA_DIR + ""-0"", offlineTableName);
    if (!testDataDir.isDirectory()) {
      testDataDir = new File(CommonConstants.Server.DEFAULT_INSTANCE_DATA_DIR + ""-1"", offlineTableName);
    }
    Assert.assertTrue(testDataDir.isDirectory());
    File tableDataDir = testDataDir;

    // Check that all columns have dictionary
    File[] indexDirs = tableDataDir.listFiles();
    Assert.assertNotNull(indexDirs);
    for (File indexDir : indexDirs) {
      SegmentMetadata segmentMetadata = new SegmentMetadataImpl(indexDir);
      for (String columnName : segmentMetadata.getSchema().getColumnNames()) {
        Assert.assertTrue(segmentMetadata.getColumnMetadataFor(columnName).hasDictionary());
      }
    }

    // Should create the task queues and generate a ConvertToRawIndexTask task with 5 child tasks
    Assert.assertNotNull(_taskManager.scheduleTasks().get(ConvertToRawIndexTask.TASK_TYPE));
    Assert.assertTrue(_helixTaskResourceManager.getTaskQueues()
        .contains(PinotHelixTaskResourceManager.getHelixJobQueueName(ConvertToRawIndexTask.TASK_TYPE)));

    // Should generate one more ConvertToRawIndexTask task with 3 child tasks
    Assert.assertNotNull(_taskManager.scheduleTasks().get(ConvertToRawIndexTask.TASK_TYPE));

    // Should not generate more tasks
    Assert.assertNull(_taskManager.scheduleTasks().get(ConvertToRawIndexTask.TASK_TYPE));

    // Wait at most 600 seconds for all tasks COMPLETED and new segments refreshed
    TestUtils.waitForCondition(input -> {
      // Check task state
      for (TaskState taskState : _helixTaskResourceManager.getTaskStates(ConvertToRawIndexTask.TASK_TYPE).values()) {
        if (taskState != TaskState.COMPLETED) {
          return false;
        }
      }

      // Check segment ZK metadata
      for (SegmentZKMetadata segmentZKMetadata : _helixResourceManager.getSegmentsZKMetadata(offlineTableName)) {
        Map<String, String> customMap = segmentZKMetadata.getCustomMap();
        if (customMap == null || customMap.size() != 1 || !customMap
            .containsKey(ConvertToRawIndexTask.TASK_TYPE + MinionConstants.TASK_TIME_SUFFIX)) {
          return false;
        }
      }

      // Check segment metadata
      File[] indexDirs1 = tableDataDir.listFiles();
      Assert.assertNotNull(indexDirs1);
      for (File indexDir : indexDirs1) {
        SegmentMetadata segmentMetadata;

        // Segment metadata file might not exist if the segment is refreshing
        try {
          segmentMetadata = new SegmentMetadataImpl(indexDir);
        } catch (Exception e) {
          return false;
        }

        // The columns in COLUMNS_TO_CONVERT should have raw index
        List<String> rawIndexColumns = Arrays.asList(StringUtils.split(COLUMNS_TO_CONVERT, ','));
        for (String columnName : segmentMetadata.getSchema().getColumnNames()) {
          if (rawIndexColumns.contains(columnName)) {
            if (segmentMetadata.getColumnMetadataFor(columnName).hasDictionary()) {
              return false;
            }
          } else {
            if (!segmentMetadata.getColumnMetadataFor(columnName).hasDictionary()) {
              return false;
            }
          }
        }
      }

      return true;
    }, 600_000L, ""Failed to get all tasks COMPLETED and new segments refreshed"");
  }
",non-flaky,5
60901,apache_druid,MovingAverageIterableTest.testAveraging,"  @Test
  public void testAveraging()
  {

    Map<String, Object> event1 = new HashMap<>();
    Map<String, Object> event2 = new HashMap<>();
    Map<String, Object> event3 = new HashMap<>();
    Map<String, Object> event4 = new HashMap<>();

    List<DimensionSpec> ds = new ArrayList<>();
    ds.add(new DefaultDimensionSpec(""gender"", ""gender""));

    event1.put(""gender"", ""m"");
    event1.put(""pageViews"", 10L);
    Row row1 = new MapBasedRow(JAN_1, event1);

    event2.put(""gender"", ""m"");
    event2.put(""pageViews"", 20L);
    Row row2 = new MapBasedRow(JAN_2, event2);

    event3.put(""gender"", ""m"");
    event3.put(""pageViews"", 30L);
    Row row3 = new MapBasedRow(JAN_3, event3);

    event4.put(""gender"", ""f"");
    event4.put(""pageViews"", 40L);
    Row row4 = new MapBasedRow(JAN_3, event4);

    float retval = 14.5f;

    Sequence<RowBucket> seq = Sequences.simple(Arrays.asList(
        new RowBucket(JAN_1, Collections.singletonList(row1)),
        new RowBucket(JAN_2, Collections.singletonList(row2)),
        new RowBucket(JAN_3, Arrays.asList(row3, row4))
    ));

    Iterator<Row> iter = new MovingAverageIterable(
        seq,
        ds,
        Arrays.asList(
            new ConstantAveragerFactory(""costPageViews"", 7, retval),
            new LongMeanAveragerFactory(""movingAvgPageViews"", 7, 1, ""pageViews"")
        ),
        Collections.emptyList(),
        Collections.singletonList(new LongSumAggregatorFactory(""pageViews"", ""pageViews""))
    ).iterator();

    Assert.assertTrue(iter.hasNext());
    Row caResult = iter.next();

    Assert.assertEquals(JAN_1, caResult.getTimestamp());
    Assert.assertEquals(""m"", (caResult.getDimension(""gender"")).get(0));
    Assert.assertEquals(retval, caResult.getMetric(""costPageViews"").floatValue(), 0.0f);
    Assert.assertEquals(1.4285715f, caResult.getMetric(""movingAvgPageViews"").floatValue(), 0.0f);

    Assert.assertTrue(iter.hasNext());
    caResult = iter.next();
    Assert.assertEquals(""m"", (caResult.getDimension(""gender"")).get(0));
    Assert.assertEquals(4.285714f, caResult.getMetric(""movingAvgPageViews"").floatValue(), 0.0f);

    Assert.assertTrue(iter.hasNext());
    caResult = iter.next();
    Assert.assertEquals(""m"", (caResult.getDimension(""gender"")).get(0));
    Assert.assertEquals(8.571428f, caResult.getMetric(""movingAvgPageViews"").floatValue(), 0.0f);

    Assert.assertTrue(iter.hasNext());
    caResult = iter.next();
    Assert.assertEquals(""f"", (caResult.getDimension(""gender"")).get(0));
    Assert.assertEquals(5.714285850f, caResult.getMetric(""movingAvgPageViews"").floatValue(), 0.0f);

    Assert.assertFalse(iter.hasNext());

  }
",non-flaky,5
99725,apache_cassandra,FQLReplayTest.testStoringResults,"    @Test
    public void testStoringResults() throws Throwable
    {
        File tmpDir = Files.createTempDirectory(""results"").toFile();
        File queryDir = Files.createTempDirectory(""queries"").toFile();

        ResultHandler.ComparableResultSet res = createResultSet(10, 10, true);
        ResultStore rs = new ResultStore(Collections.singletonList(tmpDir), queryDir);
        FQLQuery query = new FQLQuery.Single(""abc"", QueryOptions.DEFAULT.getProtocolVersion().asInt(), QueryOptions.DEFAULT, 12345, 11111, 22, ""select * from abc"", Collections.emptyList());
        try
        {
            rs.storeColumnDefinitions(query, Collections.singletonList(res.getColumnDefinitions()));
            Iterator<ResultHandler.ComparableRow> it = res.iterator();
            while (it.hasNext())
            {
                List<ResultHandler.ComparableRow> row = Collections.singletonList(it.next());
                rs.storeRows(row);
            }
            // this marks the end of the result set:
            rs.storeRows(Collections.singletonList(null));
        }
        finally
        {
            rs.close();
        }

        compareResults(Collections.singletonList(Pair.create(query, res)),
                       readResultFile(tmpDir, queryDir));

    }
",non-flaky,5
30921,camunda-cloud_zeebe,MsgPackWriterMiscTest.testEncodedBooleanValueLength,"  @Test
  public void testEncodedBooleanValueLength() {
    assertThat(MsgPackWriter.getEncodedBooleanValueLength()).isEqualTo(1);
  }
",non-flaky,5
94659,square_okhttp,OptionalMethodTest.invokeOptional,"  @Test
  public void invokeOptional() throws Exception {
    {
      BaseClass base = new BaseClass();
      assertEquals(""string"", STRING_METHOD_RETURNS_STRING.invokeOptional(base));
      assertEquals(""string"", STRING_METHOD_RETURNS_ANY.invokeOptional(base));
      assertNull(STRING_METHOD_RETURNS_INT.invokeOptional(base));
      assertNull(VOID_METHOD_RETURNS_ANY.invokeOptional(base));
      assertNull(VOID_METHOD_RETURNS_VOID.invokeOptional(base));
      assertNull(SUBCLASS_METHOD_RETURNS_ANY.invokeOptional(base));
      assertNull(SUBCLASS_METHOD_RETURNS_STRING.invokeOptional(base));
      assertNull(SUBCLASS_METHOD_RETURNS_INT.invokeOptional(base));
      assertNull(METHOD_WITH_ARGS_WRONG_PARAMS.invokeOptional(base));
      assertNull(METHOD_WITH_ARGS_CORRECT_PARAMS.invokeOptional(base));
    }
    {
      SubClass1 subClass1 = new SubClass1();
      assertEquals(""string"", STRING_METHOD_RETURNS_STRING.invokeOptional(subClass1));
      assertEquals(""string"", STRING_METHOD_RETURNS_ANY.invokeOptional(subClass1));
      assertNull(STRING_METHOD_RETURNS_INT.invokeOptional(subClass1));
      assertNull(VOID_METHOD_RETURNS_ANY.invokeOptional(subClass1));
      assertNull(VOID_METHOD_RETURNS_VOID.invokeOptional(subClass1));
      assertEquals(""subclassMethod1"", SUBCLASS_METHOD_RETURNS_ANY.invokeOptional(subClass1));
      assertEquals(""subclassMethod1"", SUBCLASS_METHOD_RETURNS_STRING.invokeOptional(subClass1));
      assertNull(SUBCLASS_METHOD_RETURNS_INT.invokeOptional(subClass1));
      assertNull(METHOD_WITH_ARGS_WRONG_PARAMS.invokeOptional(subClass1));
      assertEquals(""arg"", METHOD_WITH_ARGS_CORRECT_PARAMS.invokeOptional(subClass1, ""arg""));
    }

    {
      SubClass2 subClass2 = new SubClass2();
      assertEquals(""string"", STRING_METHOD_RETURNS_STRING.invokeOptional(subClass2));
      assertEquals(""string"", STRING_METHOD_RETURNS_ANY.invokeOptional(subClass2));
      assertNull(STRING_METHOD_RETURNS_INT.invokeOptional(subClass2));
      assertNull(VOID_METHOD_RETURNS_ANY.invokeOptional(subClass2));
      assertNull(VOID_METHOD_RETURNS_VOID.invokeOptional(subClass2));
      assertEquals(1234, SUBCLASS_METHOD_RETURNS_ANY.invokeOptional(subClass2));
      assertNull(SUBCLASS_METHOD_RETURNS_STRING.invokeOptional(subClass2));
      assertEquals(1234, SUBCLASS_METHOD_RETURNS_INT.invokeOptional(subClass2));
      assertNull(METHOD_WITH_ARGS_WRONG_PARAMS.invokeOptional(subClass2));
      assertEquals(""arg"", METHOD_WITH_ARGS_CORRECT_PARAMS.invokeOptional(subClass2, ""arg""));
    }
  }
",non-flaky,5
114066,aws_aws-sdk-java-v2,EnhancedTypeTest.collectionOf_ReturnsRawClassOfCollection_WhenSpecifyingClass,"    @Test
    public void collectionOf_ReturnsRawClassOfCollection_WhenSpecifyingClass() {
        EnhancedType<Collection<String>> type = EnhancedType.collectionOf(String.class);

        assertThat(type.rawClass()).isEqualTo(Collection.class);
        assertThat(type.rawClassParameters()).containsExactly(EnhancedType.of(String.class));
    }
",non-flaky,5
160438,ConsenSys_teku,StateSelectorFactoryTest.stateSelector_shouldReturnEmptyWhenPreForkChoice,"  @Test
  public void stateSelector_shouldReturnEmptyWhenPreForkChoice()
      throws ExecutionException, InterruptedException {
    final StorageQueryChannel historicalChainData = mock(StorageQueryChannel.class);
    final RecentChainData recentChainData = mock(RecentChainData.class);
    final CombinedChainDataClient client1 =
        new CombinedChainDataClient(recentChainData, historicalChainData, spec);
    final StateSelectorFactory factory = new StateSelectorFactory(client1);
    when(recentChainData.isPreGenesis()).thenReturn(false);
    when(recentChainData.isPreForkChoice()).thenReturn(true);
    final SafeFuture<Optional<BeaconState>> future =
        factory.defaultStateSelector(ZERO.toString()).getState();
    assertThat(future.get()).isEmpty();
  }
",non-flaky,5
98103,vert-x3_vertx-mongo-client,ParsingStreamTypeTest.should_not_include_any_stream_type_by_default_for_backwards_compatibility,"  @Test
  public void should_not_include_any_stream_type_by_default_for_backwards_compatibility() {
    // given
    final JsonObject noStreamTypeProvided = new JsonObject().put(
      ""connection_string"", ""mongodb://localhost:27017/mydb?replicaSet=myRs""
    );

    // when
    final MongoClientSettings parsedSettings = new MongoClientOptionsParser(vertx, noStreamTypeProvided).settings();

    // then
    assertNull(parsedSettings.getStreamFactoryFactory());
  }
",non-flaky,5
162374,testcontainers_testcontainers-java,LazyFutureTest.testThreadSafety,"    @Test(timeout = 5_000)
    public void testThreadSafety() throws Exception {
        final int numOfThreads = 3;
        CountDownLatch latch = new CountDownLatch(numOfThreads);
        AtomicInteger counter = new AtomicInteger();

        Future<Integer> lazyFuture = new LazyFuture<Integer>() {
            @Override
            @SneakyThrows(InterruptedException.class)
            protected Integer resolve() {
                latch.await();
                return counter.incrementAndGet();
            }
        };

        Future<List<Integer>> task = new ForkJoinPool(numOfThreads).submit(() -> {
            return IntStream.rangeClosed(1, numOfThreads).parallel().mapToObj(i -> Futures.getUnchecked(lazyFuture)).collect(toList());
        });

        while (latch.getCount() > 0) {
            latch.countDown();
        }

        assertEquals(""All threads receives the same result"", Collections.nCopies(numOfThreads, 1), task.get());
    }
",non-flaky,5
135718,Netflix_Hystrix,CommonHystrixCommandTests.call,"    @Test
    public void testExecutionHookSemaphoreSuccess() {
        assertHooksOnSuccess(
                new Func0<C>() {
                    @Override
                    public C call() {
                        return getCommand(ExecutionIsolationStrategy.SEMAPHORE, ExecutionResult.SUCCESS, FallbackResult.SUCCESS);
                    }
",non-flaky,5
26780,MundaneImmortal_pair-distribution-app,CompanyTest.testGetCompanyExperiencedDevs,"	@Test
	public void testGetCompanyExperiencedDevs() {
		Developer developerCompanyA = new Developer(""a"");
		developerCompanyA.setCompany(new Company(""a""));
		Developer newDeveloperCompanyA = new Developer(""a"");
		newDeveloperCompanyA.setCompany(new Company(""a""));
		newDeveloperCompanyA.setNew(true);
		Developer developerCompanyB = new Developer(""b"");
		developerCompanyB.setCompany(new Company(""b""));
		
		List<Developer> companyDevs = new Company(""a"").getCompanyExperiencedDevs(Arrays.asList(developerCompanyA, developerCompanyB, newDeveloperCompanyA));
		
		assertThat(companyDevs.size(), is(1));
		assertThat(companyDevs.get(0), is(developerCompanyA));
	}
",non-flaky,5
97971,ReactiveX_RxJava,ObservableTests.testFirstOfSome,"    @Test
    public void testFirstOfSome() {
        Observable<Integer> observable = Observable.from(1, 2, 3);
        observable.first().subscribe(w);
        verify(w, times(1)).onNext(anyInt());
        verify(w).onNext(1);
        verify(w, times(1)).onCompleted();
        verify(w, never()).onError(any(Throwable.class));
    }
",non-flaky,5
110125,Wikidata_wikidata-toolkit,ClientTest.testWriteReport,"	@Test
	public void testWriteReport() throws IOException {
		DirectoryManagerFactory
				.setDirectoryManagerClass(MockDirectoryManager.class);

		MockDirectoryManager mdm = new MockDirectoryManager(
				Paths.get(""/output/""), false);

		String[] args = {""-n"", ""-a"", ""rdf"", ""--rdftasks"", ""aliases"", ""-o"",
				""/output/wikidata.rdf"", ""-r"", ""/output/report.txt"" };

		Client client = new Client(mockDpc, args);
		DumpProcessingAction action = client.clientConfiguration.actions.get(0);
		action.open();
		action.close();
		client.writeReport();
		assertTrue(IOUtils
				.toString(
						mdm.getInputStreamForFile(""report.txt"",
								CompressionType.NONE))
				.matches(
						""RdfSerializationAction: Finished serialization of \\d+ RDF triples in file /output/wikidata.rdf""
								+ System.lineSeparator()));

	}
",non-flaky,5
135042,undertow-io_undertow,NetworkUtilsAddressParsingTestCase.testIpV4AddressMultipleDots,"    @Test(expected = IOException.class)
    public void testIpV4AddressMultipleDots() throws IOException {
        NetworkUtils.parseIpv4Address(""1..255.2"");
    }
",non-flaky,5
99717,apache_cassandra,SettingsMiscTest.parsesVersionMatch,"    @Test
    public void parsesVersionMatch() throws Exception
    {
        String versionString = SettingsMisc.parseVersionFile(""CassandraVersion=TheBestVersion\n"");
        assertEquals(""Version: TheBestVersion"", versionString);
    }
",non-flaky,5
94625,square_okhttp,InterceptorTest.intercept,"  @Test public void networkInterceptorsCanChangeRequestMethodFromGetToPost() throws Exception {
      @Override public Response intercept(Chain chain) throws IOException {
        Request originalRequest = chain.request();
        MediaType mediaType = MediaType.parse(""text/plain"");
        RequestBody body = RequestBody.create(mediaType, ""abc"");
        return chain.proceed(originalRequest.newBuilder()
            .method(""POST"", body)
            .header(""Content-Type"", mediaType.toString())
            .header(""Content-Length"", Long.toString(body.contentLength()))
            .build());
      }
",non-flaky,5
20914,NationalSecurityAgency_timely,MetricHistogramTest.testAvg,"    @Test
    public void testAvg() throws Exception {
        int sum = 0;
        for (int i = 1; i <= 100; i++) {
            sum += i;
        }
        Assert.assertEquals((sum / 100.0D), m.avg(), 0.0D);
    }
",non-flaky,5
19437,eclipse_xtext-core,XtextValidationTest.expectedContext,"	@Test public void testNegatedTokenNotEOF_2() throws Exception {
		String grammarAsText =
				""grammar test with org.eclipse.xtext.common.Terminals\n"" +
						""generate test 'http://test'\n"" +
						""A: foo=DUMMY;\n"" +
						""terminal DUMMY: !(EOF | ID);"";
		Grammar grammar = (Grammar) getModel(grammarAsText);
		XtextValidator validator = get(XtextValidator.class);
		ValidatingMessageAcceptor messageAcceptor = new ValidatingMessageAcceptor(null, true, false);
		TerminalRule terminal = (TerminalRule) grammar.getRules().get(1);
		NegatedToken token = (NegatedToken)terminal.getAlternatives();
		messageAcceptor.expectedContext(((Alternatives)token.getTerminal()).getElements().get(0));
		configureValidator(validator, messageAcceptor, token);
		validator.checkNegatedTokenNotEOF(token);
		messageAcceptor.validate();
	}

	public class ValidatingMessageAcceptor extends AbstractValidationMessageAcceptor {

		private final Set<EObject> contexts;
		private boolean error;
		private boolean warning;
		private boolean info;

		public ValidatingMessageAcceptor(EObject context, boolean error, boolean warning) {
			this.contexts = Sets.newHashSet();
			if (context != null)
				contexts.add(context);
			this.error = error;
			this.warning = warning;
		}
		
		public void expectedContext(EObject... contexts) {
			this.contexts.addAll(Arrays.asList(contexts));
		}
",non-flaky,5
106581,Alluxio_alluxio,HdfsConfValidationTaskTest.loadedConf,"  @Test
  public void loadedConf() {
    String hdfsSite = Paths.get(sTestDir.toPath().toString(), ""hdfs-site.xml"").toString();
    ValidationTestUtils.writeXML(hdfsSite, ImmutableMap.of(""key2"", ""value2""));

    String coreSite = Paths.get(sTestDir.toPath().toString(), ""core-site.xml"").toString();
    ValidationTestUtils.writeXML(coreSite, ImmutableMap.of(""key1"", ""value1""));

    sConf.set(PropertyKey.UNDERFS_HDFS_CONFIGURATION,
            hdfsSite + HdfsConfValidationTask.SEPARATOR + coreSite);
    HdfsConfValidationTask task =
            new HdfsConfValidationTask(""hdfs://namenode:9000/alluxio"", sConf);
    ValidationTaskResult result = task.loadHdfsConfig();
    assertEquals(result.getState(), ValidationUtils.State.OK);
  }
",non-flaky,5
156386,apache_commons-lang,ClassPathUtilsTest.testToFullyQualifiedPathPackageNull,"    @Test
    public void testToFullyQualifiedPathPackageNull() {
        assertThrows(NullPointerException.class,
                () -> ClassPathUtils.toFullyQualifiedPath(ClassPathUtils.class.getPackage(), null));
    }
",non-flaky,5
297,wildfly_wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993.testRegisterURLSchemeHandler,"@Test
public void testRegisterURLSchemeHandler() throws Exception {
    InitialContext ictx = new InitialContext(null);
    try {
        ictx.lookup(""foobar:something"");
        Assert.fail(""Precondition: the foobar: scheme should not yet be registered"");
    } catch (NamingException ne) {
    }
    ObjectFactory tof = new TestObjectFactory();
    InitialContext.addUrlContextFactory(""foobar"", tof);
    String something = (String) ictx.lookup(""foobar:something"");
    Assert.assertTrue(""The object should now be provided by our TestObjectFactory"", something.startsWith(""TestObject:""));
    try {
        InitialContext.removeUrlContextFactory(""foobar:"", new TestObjectFactory());
        Assert.fail(""Should throw an IllegalArgumentException since the associated factory object doesn't match the registration"");
    } catch (IllegalArgumentException iae) {
    }
    Assert.assertEquals(""The foobar: scheme should still be registered"", something, ictx.lookup(""foobar:something""));
    InitialContext.removeUrlContextFactory(""foobar"", tof);
    try {
        ictx.lookup(""foobar:something"");
        Assert.fail(""The foobar: scheme should not be registered any more"");
    } catch (NamingException ne) {
    }
}",test order dependency,4
110130,Wikidata_wikidata-toolkit,ClientConfigurationTest.testDefaultArguments,"	@Test
	public void testDefaultArguments() {
		String[] args = new String[] {};
		ClientConfiguration config = new ClientConfiguration(args);
		assertFalse(config.getOfflineMode());
		assertEquals(null, config.getDumpDirectoryLocation());
		assertEquals(null, config.getFilterLanguages());
		assertEquals(null, config.getFilterSiteKeys());
		assertEquals(null, config.getFilterProperties());
		assertEquals(null, config.getReportFileName());
		assertEquals(null, config.getInputDumpLocation());
		assertEquals(null, config.getLocalDumpFile());
		assertFalse(config.isQuiet());
	}
",non-flaky,5
135018,undertow-io_undertow,HttpClientTestCase.run,"    @Test
    public void testSimpleBasic() throws Exception {
        //
        final UndertowClient client = createClient();

        final List<ClientResponse> responses = new CopyOnWriteArrayList<>();
        final CountDownLatch latch = new CountDownLatch(10);
        final ClientConnection connection = client.connect(ADDRESS, worker, DefaultServer.getBufferPool(), OptionMap.EMPTY).get();
        try {
            connection.getIoThread().execute(new Runnable() {
                @Override
                public void run() {
                    for (int i = 0; i < 10; i++) {
                        final ClientRequest request = new ClientRequest().setMethod(Methods.GET).setPath(MESSAGE);
                        request.getRequestHeaders().put(Headers.HOST, DefaultServer.getHostAddress());
                        connection.sendRequest(request, createClientCallback(responses, latch));
                    }
                }
",non-flaky,5
94815,ktuukkan_marine-api,AISMessage04Test.getLatitudeInDegrees,"    @Test
    public void getLatitudeInDegrees() throws Exception {
        assertEquals(-29.870835, msg.getLatitudeInDegrees(), 0.000001);
    }
",non-flaky,5
97969,ReactiveX_RxJava,ObservableTests.onSubscribe,"    @Test
    public void testCountError() {
        Observable<String> o = Observable.create(new OnSubscribeFunc<String>() {
            @Override
            public Subscription onSubscribe(Observer<? super String> obsv) {
                obsv.onError(new RuntimeException());
                return Subscriptions.empty();
            }
",non-flaky,5
21206,androidx_androidx,PreferenceDataStoreTest.testGetStringSetWithDataStoreOnMgr,"    @Test
    public void testGetStringSetWithDataStoreOnMgr() {
        mManager.setPreferenceDataStore(mDataStore);
        mScreen.addPreference(mPreference);
        Set<String> testSet = new HashSet<>();

        mPreference.getStringSet(testSet);

        verify(mDataStore, atLeastOnce()).getStringSet(eq(KEY), eq(testSet));
    }
",non-flaky,5
179455,abel533_Mapper,VersionTest.testUpdateInt,"    @Test
    public void testUpdateInt() {
        SqlSession sqlSession = getSqlSession();
        try {
            UserIntMapper mapper = sqlSession.getMapper(UserIntMapper.class);
            UserInt user = mapper.selectByPrimaryKey(999);
            assertNotNull(user);
            Integer age = user.getAge();
            int count = mapper.updateByPrimaryKey(user);
            assertEquals(1, count);

            user = mapper.selectByPrimaryKey(999);
            assertFalse(age.equals(user.getAge()));
        } finally {
            sqlSession.close();
        }
    }
",non-flaky,5
78261,apache_beam,SplittableParDoProcessFnTest.testUpdatesWatermark,"  @Test
  public void testUpdatesWatermark() throws Exception {
    DoFn<Instant, String> fn = new WatermarkUpdateFn();
    Instant base = Instant.now();

    ProcessFnTester<Instant, String, OffsetRange, Long, OffsetRangeTracker> tester =
        new ProcessFnTester<>(
            base,
            fn,
            InstantCoder.of(),
            SerializableCoder.of(OffsetRange.class),
            3,
            MAX_BUNDLE_DURATION);

    tester.startElement(base, new OffsetRange(0, 8));
    assertThat(tester.takeOutputElements(), hasItems(""0"", ""1"", ""2""));
    assertEquals(base.plus(Duration.standardSeconds(2)), tester.getWatermarkHold());

    assertTrue(tester.advanceProcessingTimeBy(Duration.standardSeconds(1)));
    assertThat(tester.takeOutputElements(), hasItems(""3"", ""4"", ""5""));
    assertEquals(base.plus(Duration.standardSeconds(5)), tester.getWatermarkHold());

    assertTrue(tester.advanceProcessingTimeBy(Duration.standardSeconds(1)));
    assertThat(tester.takeOutputElements(), hasItems(""6"", ""7""));
    assertEquals(null, tester.getWatermarkHold());
  }
",non-flaky,5
112711,hwang-pku_ormlite-core,BaseConnectionSourceTest.testBasicStuff,"	@Test
	public void testBasicStuff() throws Exception {
		OurConnectionSource cs = new OurConnectionSource();
		assertFalse(cs.isSavedConnection(createMock(DatabaseConnection.class)));
		DatabaseConnection conn = cs.getReadOnlyConnection(null);
		assertNotNull(conn);
		assertNull(cs.getSpecialConnection(null));
		cs.saveSpecialConnection(conn);
		assertSame(conn, cs.getSpecialConnection(null));
		assertTrue(cs.isSavedConnection(conn));
		assertFalse(cs.isSavedConnection(createMock(DatabaseConnection.class)));
		DatabaseConnection conn2 = cs.getReadOnlyConnection(null);
		assertSame(conn, conn2);
		assertNotNull(conn2);
		cs.clearSpecialConnection(conn);
		assertNull(cs.getSpecialConnection(null));
		assertFalse(cs.isSavedConnection(conn));
		assertNull(cs.getSavedConnection());
		cs.close();
	}
",non-flaky,5
19498,eclipse_xtext-core,TraceRegionTest.testConstructor,"	@Test
	public void testConstructor() {
		TraceRegion region = new TraceRegion(0, 1, 0, 0, true, 2, 3, 0, 0, null, newURI());
		assertEquals(0, region.getMyOffset());
		assertEquals(1, region.getMyLength());
		assertEquals(2, region.getMergedAssociatedLocation().getOffset());
		assertEquals(3, region.getMergedAssociatedLocation().getLength());
		assertEquals(newURI(), region.getAssociatedSrcRelativePath());
		assertNull(region.getParent());
		assertTrue(region.getNestedRegions().isEmpty());
	}
",non-flaky,5
175827,GoogleCloudPlatform_google-cloud-eclipse,BucketNameValidatorTest.testValidation_endWithDot,"  @Test
  public void testValidation_endWithDot() {
    assertThat(validator.validate(""bucket."").getSeverity(), is(IStatus.ERROR));
  }
",non-flaky,5
86038,graylog2_graylog2-server,NotificationResourceHandlerTest.testExecution,"    @Test
    public void testExecution() throws EventNotificationException {
        notificationResourceHandler.test(getHttpNotification(), ""testUser"");

        ArgumentCaptor<EventNotificationContext> captor = ArgumentCaptor.forClass(EventNotificationContext.class);
        verify(eventNotification, times(1)).execute(captor.capture());

        assertThat(captor.getValue()).satisfies(ctx -> {
            assertThat(ctx.event().message()).isEqualTo(""Notification test message triggered from user <testUser>"");
            assertThat(ctx.notificationId()).isEqualTo(NotificationTestData.TEST_NOTIFICATION_ID);
            assertThat(ctx.notificationConfig().type()).isEqualTo(HTTPEventNotificationConfig.TYPE_NAME);
            assertThat(ctx.eventDefinition().get().title()).isEqualTo(""Event Definition Test Title"");
        });
    }
",non-flaky,5
26833,wildfly_wildfly,JndiPermissionTestCase.testCollectionSerialization,"    @Test
    public void testCollectionSerialization() {
        final PermissionCollection permissionCollection = new JndiPermission("""", """").newPermissionCollection();
        permissionCollection.add(new JndiPermission(""foo/bar"", ""createSubcontext,rebind""));
        permissionCollection.add(new JndiPermission(""foo"", ""addNamingListener""));
        permissionCollection.add(new JndiPermission(""-"", ""lookup,rebind""));
        final PermissionCollection other = (PermissionCollection) ((SerializedJndiPermissionCollection) ((JndiPermissionCollection)permissionCollection).writeReplace()).readResolve();
        Enumeration<Permission> e;
        assertNotNull(e = other.elements());
        assertTrue(e.hasMoreElements());
        assertEquals(new JndiPermission(""foo/bar"", ""createSubcontext,rebind""), e.nextElement());
        assertTrue(e.hasMoreElements());
        assertEquals(new JndiPermission(""foo"", ""addNamingListener""), e.nextElement());
        assertTrue(e.hasMoreElements());
        assertEquals(new JndiPermission(""-"", ""lookup,rebind""), e.nextElement());
        assertFalse(e.hasMoreElements());
    }
",non-flaky,5
175737,GoogleCloudPlatform_google-cloud-eclipse,MultipleConnectionsTest.testDefaultSettings,"	@Test
	public void testDefaultSettings() throws CoreException {
		connector = new SocketListenMultiConnector();
		Map<String, Connector.Argument> defaults = connector.getDefaultArguments();
		assertTrue(defaults.containsKey(""connectionLimit""));
		assertEquals(1, ((Connector.IntegerArgument) defaults.get(""connectionLimit"")).intValue());
	}
",non-flaky,5
78300,apache_beam,OutputAndTimeBoundedSplittableProcessElementInvokerTest.testInvokeProcessElementTimeBoundedWithStartupDelay,"  @Test
  public void testInvokeProcessElementTimeBoundedWithStartupDelay() throws Exception {
    SplittableProcessElementInvoker<Void, String, OffsetRange, OffsetRangeTracker>.Result res =
        runTest(10000, Duration.standardSeconds(3), Integer.MAX_VALUE, Duration.millis(100));
    assertFalse(res.getContinuation().shouldResume());
    OffsetRange residualRange = res.getResidualRestriction();
    // Same as above, but this time it counts from the time of the first tryClaim() call
    assertThat(residualRange.getFrom(), greaterThan(10L));
    assertThat(residualRange.getFrom(), lessThan(100L));
    assertEquals(10000, residualRange.getTo());
  }
",non-flaky,5
160418,ConsenSys_teku,BlockSelectorFactoryTest.headSelector_shouldGetBestBlock,"  @Test
  public void headSelector_shouldGetBestBlock() throws ExecutionException, InterruptedException {
    when(client.getBestBlock()).thenReturn(Optional.of(block));
    List<SignedBeaconBlock> blockList = blockSelectorFactory.headSelector().getBlock().get();
    verify(client).getBestBlock();
    assertThat(blockList).containsExactly(block);
  }
",non-flaky,5
53208,cloudfoundry_uaa,ScimGroupEndpointsIntegrationTests.getGroupsWithoutAttributesReturnsAllData,"    @Test
    public void getGroupsWithoutAttributesReturnsAllData() {
        @SuppressWarnings(""rawtypes"")
        ResponseEntity<Map> response = client.getForEntity(serverRunning.getUrl(groupEndpoint), Map.class);

        @SuppressWarnings(""rawtypes"")
        Map results = response.getBody();
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertTrue(""There should be more than zero users"", (Integer) results.get(""totalResults"") > 0);
        assertTrue(""There should be some resources"", ((Collection<?>) results.get(""resources"")).size() > 0);
        @SuppressWarnings(""rawtypes"")
        Map firstGroup = (Map) ((List) results.get(""resources"")).get(0);
        assertTrue(firstGroup.containsKey(""id""));
        assertTrue(firstGroup.containsKey(""displayName""));
        assertTrue(firstGroup.containsKey(""schemas""));
        assertTrue(firstGroup.containsKey(""meta""));
    }
",non-flaky,5
159678,liquibase_liquibase,AddUniqueConstraintExecutorTest.execute_noSchema,"    //    @Test
//    public void execute_noSchema() throws Exception {
//        new DatabaseTestTemplate().testOnAvailableDatabases(
//                new SqlStatementDatabaseTest(null, new AddUniqueConstraintStatement(null, TABLE_NAME, COLUMN_NAME, ""uq_adduqtest"")) {
//
//                    protected void preExecuteAssert(DatabaseSnapshotGenerator snapshot) {
//                        assertFalse(snapshot.getTable(TABLE_NAME).getColumn(COLUMN_NAME).isUnique());
//                    }
//
//                    protected void postExecuteAssert(DatabaseSnapshotGenerator snapshot) {
//                        //todo: enable snapshot and assertion when snapshot can check for unique constraints
//                        //snapshot = new DatabaseSnapshotGenerator(snapshot);
//                    	assertTrue(snapshot.getTable(TABLE_NAME).getColumn(COLUMN_NAME).isUnique());
//                    }
//                });
//    }
",non-flaky,5
89283,apache_samza,TestJobsResource.testGetJobIdNotFound,"  @Test
  public void testGetJobIdNotFound()
      throws IOException {
    Response resp = target(String.format(""v1/jobs/%s/%s"", MockJobProxy.JOB_INSTANCE_2_NAME, ""BadJobId"")).request().get();
    assertEquals(404, resp.getStatus());

    final Map<String, String> errorMessage = objectMapper.readValue(resp.readEntity(String.class), new TypeReference<Map<String, String>>() { });
    assertTrue(errorMessage.get(""message""), errorMessage.get(""message"").contains(""does not exist""));
    resp.close();
  }
",non-flaky,5
86129,graylog2_graylog2-server,TemplateFieldValueProviderTest.templateWithMessageContext,"    @Test
    public void templateWithMessageContext() {
        final TestEvent event = new TestEvent();
        final EventWithContext eventWithContext = EventWithContext.create(event, newMessage(ImmutableMap.of(""hello"", ""world"")));

        final FieldValue fieldValue = newTemplate(""hello: ${source.hello}"").doGet(""test"", eventWithContext);

        assertThat(fieldValue.value()).isEqualTo(""hello: world"");
    }
",non-flaky,5
162380,testcontainers_testcontainers-java,TestEnvironmentTest.testCompareVersionIgnoresExcessLength,"    @Test
    public void testCompareVersionIgnoresExcessLength() {
        assertTrue(""1.20 == 1.20.3"", new ComparableVersion(""1.20"").compareTo(new ComparableVersion(""1.20.3"")) == 0);
    }
",non-flaky,5
86135,graylog2_graylog2-server,TemplateFieldValueProviderTest.templateBooleanFormatting,"    @Test
    public void templateBooleanFormatting() {
        final TestEvent event = new TestEvent();
        final EventWithContext eventWithContext = EventWithContext.create(event, newMessage(ImmutableMap.of(""success"", true)));

        final FieldValue fieldValue = newTemplate(""success: ${source.success}"").doGet(""test"", eventWithContext);

        assertThat(fieldValue.value()).isEqualTo(""success: true"");
    }
",non-flaky,5
162757,OpenAPITools_openapi-generator,AdditionalPropertiesIntegerTest.testAdditionalPropertiesInteger,"    @Test
    public void testAdditionalPropertiesInteger() {
        // TODO: test AdditionalPropertiesInteger
    }
",non-flaky,5
78282,apache_beam,StateTagTest.testCombiningValueWithContextEquality,"  @Test
  public void testCombiningValueWithContextEquality() {
    CoderRegistry registry = CoderRegistry.createDefault();

    Combine.BinaryCombineIntegerFn maxFn = Max.ofIntegers();
    Combine.BinaryCombineIntegerFn minFn = Min.ofIntegers();

    Coder<int[]> accum1 = maxFn.getAccumulatorCoder(registry, VarIntCoder.of());
    Coder<int[]> accum2 = minFn.getAccumulatorCoder(registry, BigEndianIntegerCoder.of());

    StateTag<?> fooCoder1Max1 =
        StateTags.combiningValueWithContext(""foo"", accum1, CombineFnUtil.toFnWithContext(maxFn));
    StateTag<?> fooCoder1Max2 =
        StateTags.combiningValueWithContext(""foo"", accum1, CombineFnUtil.toFnWithContext(maxFn));
    StateTag<?> fooCoder1Min =
        StateTags.combiningValueWithContext(""foo"", accum1, CombineFnUtil.toFnWithContext(minFn));

    StateTag<?> fooCoder2Max =
        StateTags.combiningValueWithContext(""foo"", accum2, CombineFnUtil.toFnWithContext(maxFn));
    StateTag<?> barCoder1Max =
        StateTags.combiningValueWithContext(""bar"", accum1, CombineFnUtil.toFnWithContext(maxFn));

    // Same name, coder and combineFn
    assertEquals(fooCoder1Max1, fooCoder1Max2);
    assertEquals(
        StateTags.convertToBagTagInternal((StateTag) fooCoder1Max1),
        StateTags.convertToBagTagInternal((StateTag) fooCoder1Max2));
    // Different combineFn, but we treat them as equal since we only serialize the bits.
    assertEquals(fooCoder1Max1, fooCoder1Min);
    assertEquals(
        StateTags.convertToBagTagInternal((StateTag) fooCoder1Max1),
        StateTags.convertToBagTagInternal((StateTag) fooCoder1Min));

    // Different input coder coder.
    assertNotEquals(fooCoder1Max1, fooCoder2Max);
    assertNotEquals(
        StateTags.convertToBagTagInternal((StateTag) fooCoder1Max1),
        StateTags.convertToBagTagInternal((StateTag) fooCoder2Max));

    // These StateTags have different IDs.
    assertNotEquals(fooCoder1Max1, barCoder1Max);
    assertNotEquals(
        StateTags.convertToBagTagInternal((StateTag) fooCoder1Max1),
        StateTags.convertToBagTagInternal((StateTag) barCoder1Max));
  }
",non-flaky,5
21003,NationalSecurityAgency_timely,DownsampleIteratorTest.memoryEstimatorTestSmallObjects,"    @Test
    public void memoryEstimatorTestSmallObjects() {
        long maxMemory = 1000;
        long start = System.currentTimeMillis();
        long period = 500l;
        long sizeOfObjects = 20;
        SampleObject o = new SampleObject();
        DownsampleMemoryEstimator memoryEstimator = new DownsampleMemoryEstimator(maxMemory, start, period);
        boolean shouldReturn = false;
        for (long x = 100; x <= 5000; x += 100) {
            long timestamp = start + x;
            o.setSizeInBytes(o.sizeInBytes() + sizeOfObjects);
            shouldReturn = memoryEstimator.shouldReturnBasedOnMemoryUsage(timestamp, o);
            if (memoryEstimator.isNewBucket()) {
                long memoryPercentageUsedCalculated = Math.round((double) o.sizeInBytes() / maxMemory * 100);
                long memoryPercentageUsedEstimate = Math.round(memoryEstimator.getMemoryUsedPercentage());
                long percentError = Math.round(Math.abs(memoryPercentageUsedCalculated - memoryPercentageUsedEstimate)
                        / memoryPercentageUsedCalculated * 100);
                assertTrue(percentError == 0);
            }

            if (shouldReturn) {
                o.setSizeInBytes(0);
                memoryEstimator.reset();
            }
        }
        assertTrue(shouldReturn);
    }
",non-flaky,5
76723,quarkusio_quarkus,QuarkusCodestartBuildIT.generateAzureFunctionsHttpExampleProjectRun,"    @Test
    public void generateAzureFunctionsHttpExampleProjectRun() throws Exception {
        generateProjectRunTests(""maven"", ""java"", singletonList(""azure-functions-http-example""));
    }
",non-flaky,5
98356,Kong_unirest-java,AsGenericTypeTest.getSomeTees,"    @Test
        public T getSomeTees() {
            return someTees;
        }
",non-flaky,5
110202,Wikidata_wikidata-toolkit,MwLocalDumpFileTest.testExplicitGetters,"	@Test
	public void testExplicitGetters() throws IOException {
		this.dm.setFileContents(this.dmPath
				.resolve(""testdump-20150512.json.gz""), """");
		MwLocalDumpFile df = new MwLocalDumpFile(
				""/testdump-20150512.json.gz"",
				DumpContentType.SITES, ""20150815"",
				""wikidatawiki"");

		assertEquals(""20150815"", df.getDateStamp());
		assertEquals(""wikidatawiki"", df.getProjectName());
		assertEquals(DumpContentType.SITES, df.getDumpContentType());
		String toString = df.toString();

		assertEquals(this.dmPath.resolve(""testdump-20150512.json.gz""),
				df.getPath());

		assertTrue(toString.contains(""20150815""));
		assertTrue(toString.contains(""wikidatawiki""));
		assertTrue(toString.toLowerCase().contains(
				DumpContentType.SITES.toString().toLowerCase()));
	}
",non-flaky,5
77624,pholser_junit-quickcheck,DurationPropertyParameterTypesTest.shouldHold,"    @Test public void malformedMin() {
        @Property public void shouldHold(
            @InRange(
",non-flaky,5
112764,hwang-pku_ormlite-core,DeleteBuilderTest.testDeleteAll,"	@Test
	public void testDeleteAll() throws Exception {
		DeleteBuilder<Foo, Integer> stmtb = new DeleteBuilder<Foo, Integer>(databaseType, baseFooTableInfo, null);
		StringBuilder sb = new StringBuilder();
		sb.append(""DELETE FROM "");
		databaseType.appendEscapedEntityName(sb, baseFooTableInfo.getTableName());
		assertEquals(sb.toString(), stmtb.prepareStatementString());
	}
",non-flaky,5
26788,MundaneImmortal_pair-distribution-app,DayPairsHelperTest.testUpdateDataBaseWithTrelloContentWithException,"	@Test(expected = RuntimeException.class)
	public void testUpdateDataBaseWithTrelloContentWithException() {
		List<DayPairs> pairsList = getPairsListFromDevs(getStandardDevs());
		when(trelloPairsRepository.findByDate(pairsList.get(2).getDate())).thenReturn(pairsList);

		subject.updateDataBaseWithTrelloContent(pairsList);
	}
",non-flaky,5
59661,looly_hutool,ScriptUtilTest.luaTest,"	@Test
	public void luaTest() throws ScriptException {
		final ScriptEngine engine = ScriptUtil.getLuaEngine();
		engine.eval(""print('Hello Lua')"");
	}
",non-flaky,5
38279,palantir_atlasdb,AbstractTransactionTest.testKeyValueRangeColumnSelection,"    @Test
    public void testKeyValueRangeColumnSelection() {
        putDirect(""row1"", ""col1"", ""v1"", 0);
        putDirect(""row1"", ""col2"", ""v2"", 2);
        putDirect(""row1"", ""col4"", ""v5"", 3);
        putDirect(""row1a"", ""col4"", ""v5"", 100);
        putDirect(""row2"", ""col2"", ""v3"", 1);
        putDirect(""row2"", ""col4"", ""v4"", 6);

        List<byte[]> selectedColumns = ImmutableList.of(PtBytes.toBytes(""col2""));
        RangeRequest simpleRange = RangeRequest.builder().retainColumns(ColumnSelection.create(selectedColumns)).build();
        ImmutableList<RowResult<Value>> list = ImmutableList.copyOf(keyValueService.getRange(TEST_TABLE, simpleRange, 1));
        assertEquals(0, list.size());

        list = ImmutableList.copyOf(keyValueService.getRange(TEST_TABLE, simpleRange, 2));
        assertEquals(1, list.size());
        RowResult<Value> row = list.iterator().next();
        assertEquals(1, row.getColumns().size());

        list = ImmutableList.copyOf(keyValueService.getRange(TEST_TABLE, simpleRange, 3));
        assertEquals(2, list.size());
        row = list.iterator().next();
        assertEquals(1, row.getColumns().size());

        list = ImmutableList.copyOf(keyValueService.getRange(TEST_TABLE, simpleRange.getBuilder().endRowExclusive(PtBytes.toBytes(""row2"")).build(), 3));
        assertEquals(1, list.size());
        row = list.iterator().next();
        assertEquals(1, row.getColumns().size());

        list = ImmutableList.copyOf(keyValueService.getRange(TEST_TABLE, simpleRange.getBuilder().startRowInclusive(PtBytes.toBytes(""row1a"")).build(), 3));
        assertEquals(1, list.size());
        row = list.iterator().next();
        assertEquals(1, row.getColumns().size());
    }
",non-flaky,5
89317,apache_samza,TestKafkaSystemAdminWithMock.testGetSSPMetadataWithRetry,"  @Test
  public void testGetSSPMetadataWithRetry() {
    SystemStreamPartition oneSSP = new SystemStreamPartition(TEST_SYSTEM, VALID_TOPIC, new Partition(0));
    SystemStreamPartition otherSSP = new SystemStreamPartition(TEST_SYSTEM, ""otherTopic"", new Partition(1));
    ImmutableSet<SystemStreamPartition> ssps = ImmutableSet.of(oneSSP, otherSSP);
    List<TopicPartition> topicPartitions = ssps.stream()
        .map(ssp -> new TopicPartition(ssp.getStream(), ssp.getPartition().getPartitionId()))
        .collect(Collectors.toList());
    Map<TopicPartition, Long> testBeginningOffsets =
        ImmutableMap.of(testTopicPartition0, KAFKA_BEGINNING_OFFSET_FOR_PARTITION0, testTopicPartition1,
            KAFKA_BEGINNING_OFFSET_FOR_PARTITION1);

    when(mockKafkaConsumer.beginningOffsets(topicPartitions)).thenThrow(new RuntimeException())
        .thenReturn(testBeginningOffsets);
    Map<SystemStreamPartition, SystemStreamMetadata.SystemStreamPartitionMetadata> sspMetadata =
        kafkaSystemAdmin.getSSPMetadata(ssps, new ExponentialSleepStrategy(2,
            1, 1));

    assertEquals(""metadata should return for 2 topics"", sspMetadata.size(), 2);

    // retried twice because the first fails and the second succeeds
    Mockito.verify(mockKafkaConsumer, Mockito.times(2)).beginningOffsets(topicPartitions);
  }
",non-flaky,5
339,apache_hadoop,TestExportsTable.testViewFsMultipleExportPoint,"  @Test
  public void testViewFsMultipleExportPoint() throws IOException {
    NfsConfiguration config = new NfsConfiguration();
    MiniDFSCluster cluster = null;
    String clusterName = RandomStringUtils.randomAlphabetic(10);

    String exportPoint = ""/hdfs1,/hdfs2"";
    config.setStrings(NfsConfigKeys.DFS_NFS_EXPORT_POINT_KEY, exportPoint);
    config.set(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY,
        FsConstants.VIEWFS_SCHEME + ""://"" + clusterName);
    // Use emphral port in case tests are running in parallel
    config.setInt(""nfs3.mountd.port"", 0);
    config.setInt(""nfs3.server.port"", 0);
    config.set(""nfs.http.address"", ""0.0.0.0:0"");

    try {
      cluster =
          new MiniDFSCluster.Builder(config).nnTopology(
              MiniDFSNNTopology.simpleFederatedTopology(2))
              .numDataNodes(2)
              .build();
      cluster.waitActive();
      DistributedFileSystem hdfs1 = cluster.getFileSystem(0);
      DistributedFileSystem hdfs2 = cluster.getFileSystem(1);
      cluster.waitActive();
      Path base1 = new Path(""/user1"");
      Path base2 = new Path(""/user2"");
      hdfs1.delete(base1, true);
      hdfs2.delete(base2, true);
      hdfs1.mkdirs(base1);
      hdfs2.mkdirs(base2);
      ConfigUtil.addLink(config, clusterName, ""/hdfs1"",
          hdfs1.makeQualified(base1).toUri());
      ConfigUtil.addLink(config, clusterName, ""/hdfs2"",
          hdfs2.makeQualified(base2).toUri());

      // Start nfs
      final Nfs3 nfsServer = new Nfs3(config);
      nfsServer.startServiceInternal(false);

      Mountd mountd = nfsServer.getMountd();
      RpcProgramMountd rpcMount = (RpcProgramMountd) mountd.getRpcProgram();
      assertTrue(rpcMount.getExports().size() == 2);

      String exportInMountd1 = rpcMount.getExports().get(0);
      assertTrue(exportInMountd1.equals(""/hdfs1""));

      String exportInMountd2 = rpcMount.getExports().get(1);
      assertTrue(exportInMountd2.equals(""/hdfs2""));

    } finally {
      if (cluster != null) {
        cluster.shutdown();
      }
    }
  }
",non-flaky,5
156163,soot-oss_soot,TypingMinimizeTest.testMostCommonTypingPairs_4,"  @Test
  public void testMostCommonTypingPairs_4() {

    List<Typing> typingList = new ArrayList<>();

    Type Type1 = cloneableType;
    Type Type2 = serializableType;
    Type Type3 = abstractMapType;

    Local x1 = new JimpleLocal(""$x1"", null);

    Typing typing1 = new Typing(Arrays.asList(x1));
    typing1.set(x1, Type1);
    typingList.add(typing1);

    Typing typing2 = new Typing(Arrays.asList(x1));
    typing2.set(x1, Type2);
    typingList.add(typing2);

    Typing typing3 = new Typing(Arrays.asList(x1));
    typing3.set(x1, Type3);
    typingList.add(typing3);

    getTypingStrategy().minimize(typingList, new BytecodeHierarchy());

    assertEquals(3, typingList.size());

  }
",non-flaky,5
156171,soot-oss_soot,EntryPointsTest.testClinitOf,"	@Test
	public void testClinitOf() {
		Path cp = Paths.get(""src"", ""test"", ""resources"", ""Clinit"", ""bin"");
		G.reset();
		Options.v().set_prepend_classpath(true);
		Options.v().set_process_dir(Collections.singletonList(cp.toFile().getAbsolutePath()));
		Options.v().set_src_prec(Options.src_prec_class);
		Options.v().set_allow_phantom_refs(true);
		Options.v().set_ignore_resolving_levels(true);
		Options.v().setPhaseOption(""cg.spark"", ""on"");
		Options.v().setPhaseOption(""cg.spark"", ""string-constants:true"");
		Options.v().set_whole_program(true);
		Scene.v().loadNecessaryClasses();
		SootMethod mainMethod = Scene.v().getMainMethod();
		Scene.v().setEntryPoints(Collections.singletonList(mainMethod));
		PackManager.v().getPack(""cg"").apply();
		CallGraph cg = Scene.v().getCallGraph();
		boolean found = false;
		for (Edge edge : cg) {
			if (edge.getSrc().method().getSignature().equals(""<soot.Main: void main(java.lang.String[])>"")) {
				if (edge.getTgt().method().getSignature().equals(""<soot.A: void <clinit>()>"")) { // A1 is used in main
					found = true;
					break;
				}
			}
		}
		assertTrue(found);
		SootClass a1 = Scene.v().getSootClassUnsafe(""soot.A1"");
		SootClass a = Scene.v().getSootClassUnsafe(""soot.A"");
		assertTrue(a1 != null);
		List<String> clinits1 = new ArrayList<>();
		EntryPoints.v().clinitsOf(a1).forEach(e -> {
			clinits1.add(e.toString());
		});
		List<String> clinits = new ArrayList<>();
		EntryPoints.v().clinitsOf(a).forEach(e -> {
			clinits.add(e.toString());
		});
		assertEquals(clinits1, clinits);
	}
",non-flaky,5
77012,Tencent_Firestorm,MultiStorageTest.diskUsageTest,"  @Test
  public void diskUsageTest() {
    String appId = ""app_read_diskusage_data"";
    long originSize = shuffleServers.get(0).getShuffleBufferManager().getCapacity();
    Map<Long, byte[]> expectedData = Maps.newHashMap();

    RssRegisterShuffleRequest rr1 =  new RssRegisterShuffleRequest(appId, 2,
        Lists.newArrayList(new PartitionRange(0, 0)));
    shuffleServerClient.registerShuffle(rr1);

    RssRegisterShuffleRequest rr2 =  new RssRegisterShuffleRequest(appId, 3,
        Lists.newArrayList(new PartitionRange(1, 1)));
    shuffleServerClient.registerShuffle(rr2);

    RssRegisterShuffleRequest rr3 =  new RssRegisterShuffleRequest(appId, 2,
        Lists.newArrayList(new PartitionRange(1, 1)));
    shuffleServerClient.registerShuffle(rr3);

    Roaring64NavigableMap blockIdBitmap1 = Roaring64NavigableMap.bitmapOf();
    Roaring64NavigableMap blockIdBitmap2 = Roaring64NavigableMap.bitmapOf();
    Roaring64NavigableMap blockIdBitmap3 = Roaring64NavigableMap.bitmapOf();

    List<ShuffleBlockInfo> blocks1 = createShuffleBlockList(
        2, 0, 1,30, 10 * 1024 * 1024, blockIdBitmap1, expectedData);

    List<ShuffleBlockInfo> blocks2 = createShuffleBlockList(
        3, 1, 2,9, 10 * 1024 * 1024, blockIdBitmap2, expectedData);

    List<ShuffleBlockInfo> blocks3 = createShuffleBlockList(
        2, 1, 2,9, 10 * 1024 * 1024, blockIdBitmap3, expectedData);

    DiskItem item = shuffleServers.get(0).getMultiStorageManager().getDiskItem(appId, 2, 0);
    item.createMetadataIfNotExist(appId + ""/"" + 2);
    item.getLock(appId + ""/"" + 2).readLock().lock();
    sendSinglePartitionToShuffleServer(appId, 2, 0, 1, blocks1);
    assertFalse(item.canWrite());
    assertEquals(30 * 1024 * 1024 * 10, item.getNotUploadedSize(appId + ""/"" + 2));
    assertEquals(1, item.getNotUploadedPartitions(appId + ""/"" + 2).getCardinality());
    boolean isException = false;
    try {
      sendSinglePartitionToShuffleServer(appId, 2, 1, 2, blocks3);
    } catch (RuntimeException re) {
      isException = true;
      assertTrue(re.getMessage().contains(""Can't finish shuffle process""));
    }
    item.getLock(appId + ""/"" + 2).readLock().unlock();
    Uninterruptibles.sleepUninterruptibly(6, TimeUnit.SECONDS);
    assertEquals(originSize, shuffleServers.get(0).getShuffleBufferManager().getCapacity());
    assertTrue(isException);
    RssGetShuffleResultRequest rg1 = new RssGetShuffleResultRequest(appId, 2, 0);
    shuffleServerClient.getShuffleResult(rg1);
    validateResult(appId, 2, 0, expectedData, Sets.newHashSet());
    ShuffleReadClientImpl readClient = new ShuffleReadClientImpl(""LOCALFILE_AND_HDFS"",
        appId, 2, 0, 100, 1, 10, 1000, HDFS_URI + ""rss/multi_storage"",
        blockIdBitmap1, Roaring64NavigableMap.bitmapOf(1), Lists.newArrayList(new ShuffleServerInfo(""test"", LOCALHOST, SHUFFLE_SERVER_PORT)), conf);
    validateResult(readClient, expectedData, blockIdBitmap1);
    try {
      sendSinglePartitionToShuffleServer(appId, 3, 1,2, blocks2);
    } catch (RuntimeException re) {
      fail();
    }
    RssGetShuffleResultRequest rg2 = new RssGetShuffleResultRequest(appId, 3, 1);
    shuffleServerClient.getShuffleResult(rg2);
    validateResult(appId, 3, 1, expectedData,
        getExpectBlockIds(blocks2));

    Uninterruptibles.sleepUninterruptibly(5, TimeUnit.SECONDS);
  }
",non-flaky,5
97741,vojtechhabarta_typescript-generator,CustomTypeMappingTest.test,"    @Test
    public void test() {
        final Settings settings = TestUtils.settings();
        settings.quotes = ""'"";
        settings.referencedFiles.add(""../src/test/ts/my-custom-types.d.ts"");
        settings.importDeclarations.add(""import * as myModule from '../src/test/ts/my-module.d.ts'"");
        settings.customTypeMappings.put(""java.util.Date"", ""MyDate"");
        settings.customTypeMappings.put(""java.util.Calendar"", ""myModule.MyCalendar"");
//        new TypeScriptGenerator(settings).generateTypeScript(Input.from(CustomTypesUsage.class), Output.to(new File(""target/CustomTypeMappingTest.d.ts"")));
        final String output = new TypeScriptGenerator(settings).generateTypeScript(Input.from(CustomTypesUsage.class));
        assertTrue(output.contains(""/// <reference path='../src/test/ts/my-custom-types.d.ts' />""));
        assertTrue(output.contains(""import * as myModule from '../src/test/ts/my-module.d.ts';""));
        assertTrue(output.contains(""date1: MyDate;""));
        assertTrue(output.contains(""calendar1: myModule.MyCalendar;""));
    }
",non-flaky,5
159613,liquibase_liquibase,MavenIntegrationTest.testUpdate,"//    @Test
//    public void testUpdate() throws Exception{
//        Verifier verifier=createVerifier();
//
//        verifier.executeGoal( ""clean"" );
//        verifier.executeGoal( ""install"" );
//
//        //Verify everithing has gone well.
//        verifier.verifyErrorFreeLog();
//
//        //Reset the streams before executing the verifier
//        verifier.resetStreams();
//    }
",non-flaky,5
92616,FasterXML_jackson-databind,TestPropertyCreatorSubtypesExternalPropertyMissingProperty.testDeserializationNull,"    @Test
    public void testDeserializationNull() throws Exception {
        checkOrangeBoxNull(BOX_READER_PASS, orangeBoxNullJson);
        checkAppleBoxNull(BOX_READER_PASS, appleBoxNullJson);

        checkOrangeBoxNull(BOX_READER_FAIL, orangeBoxNullJson);
        checkAppleBoxNull(BOX_READER_FAIL, appleBoxNullJson);
    }
",non-flaky,5
114007,apache_struts,StrutsJUnit4SessionTestCaseTest.testPersistingSessionValues,"    @Test
    public void testPersistingSessionValues() throws Exception {
        String output = executeAction(""/sessiontest/sessionSet.action"");
        Assert.assertEquals(""sessionValue"", output);

        this.finishExecution();

        String output2 = executeAction(""/sessiontest/sessionGet.action"");
        Assert.assertEquals(""sessionValue"", output2);
    }
",non-flaky,5
162402,testcontainers_testcontainers-java,DockerComposeContainerScalingTest.simpleTest,"    @Test
    public void simpleTest() {

        for (int i = 0; i < 3; i++) {
            clients[i].incr(""somekey"");

            assertEquals(""Each redis instance is separate"", ""1"", clients[i].get(""somekey""));
        }
    }
",non-flaky,5
239,Netflix_Hystrix,HealthCountsStreamTest.testShortCircuited,"@Test
public void testShortCircuited() {
    HystrixCommandKey key = Factory.asKey(""CMD-Health-G"");
    stream = HealthCountsStream.getInstance(key, 10, 100);
    final CountDownLatch latch = new CountDownLatch(1);
    stream.observe().take(10).subscribe(getSubscriber(latch));
    CommandStreamTest.Command failure1 = Command.from(groupKey, key, FAILURE, 20);
    CommandStreamTest.Command failure2 = Command.from(groupKey, key, FAILURE, 20);
    CommandStreamTest.Command failure3 = Command.from(groupKey, key, FAILURE, 20);
    CommandStreamTest.Command shortCircuit1 = Command.from(groupKey, key, SUCCESS);
    CommandStreamTest.Command shortCircuit2 = Command.from(groupKey, key, SUCCESS);
    failure1.observe();
    failure2.observe();
    failure3.observe();
    try {
        Thread.sleep(100);
    } catch (InterruptedException ie) {
        fail(ie.getMessage());
    }
    shortCircuit1.observe();
    shortCircuit2.observe();
    try {
        assertTrue(latch.await(10000, TimeUnit.MILLISECONDS));
    } catch (InterruptedException ex) {
        fail(""Interrupted ex"");
    }
    assertTrue(shortCircuit1.isResponseShortCircuited());
    assertTrue(shortCircuit2.isResponseShortCircuited());
    System.out.println(""ReqLog : "" + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());
    assertEquals(3L, stream.getLatest().getErrorCount());
    assertEquals(3L, stream.getLatest().getTotalRequests());
}",async wait,0
294,apache_hadoop,TestWrites.testWriteStableHow,"  @Test
  public void testWriteStableHow() throws IOException, InterruptedException {
    NfsConfiguration config = new NfsConfiguration();
    DFSClient client = null;
    MiniDFSCluster cluster = null;
    RpcProgramNfs3 nfsd;
    SecurityHandler securityHandler = Mockito.mock(SecurityHandler.class);
    Mockito.when(securityHandler.getUser()).thenReturn(
        System.getProperty(""user.name""));
    String currentUser = System.getProperty(""user.name"");
    config.set(
            DefaultImpersonationProvider.getTestProvider().
                getProxySuperuserGroupConfKey(currentUser),
            ""*"");
    config.set(
            DefaultImpersonationProvider.getTestProvider().
                getProxySuperuserIpConfKey(currentUser),
            ""*"");
    ProxyUsers.refreshSuperUserGroupsConfiguration(config);

    try {
      cluster = new MiniDFSCluster.Builder(config).numDataNodes(1).build();
      cluster.waitActive();
      client = new DFSClient(DFSUtilClient.getNNAddress(config), config);
      int namenodeId = Nfs3Utils.getNamenodeId(config);

      // Use emphral port in case tests are running in parallel
      config.setInt(""nfs3.mountd.port"", 0);
      config.setInt(""nfs3.server.port"", 0);
      
      // Start nfs
      Nfs3 nfs3 = new Nfs3(config);
      nfs3.startServiceInternal(false);
      nfsd = (RpcProgramNfs3) nfs3.getRpcProgram();

      HdfsFileStatus status = client.getFileInfo(""/"");
      FileHandle rootHandle = new FileHandle(status.getFileId(), namenodeId);
      // Create file1
      CREATE3Request createReq = new CREATE3Request(rootHandle, ""file1"",
          Nfs3Constant.CREATE_UNCHECKED, new SetAttr3(), 0);
      XDR createXdr = new XDR();
      createReq.serialize(createXdr);
      CREATE3Response createRsp = nfsd.create(createXdr.asReadOnlyWrap(),
          securityHandler, new InetSocketAddress(""localhost"", 1234));
      FileHandle handle = createRsp.getObjHandle();

      // Test DATA_SYNC
      byte[] buffer = new byte[10];
      for (int i = 0; i < 10; i++) {
        buffer[i] = (byte) i;
      }
      WRITE3Request writeReq = new WRITE3Request(handle, 0, 10,
          WriteStableHow.DATA_SYNC, ByteBuffer.wrap(buffer));
      XDR writeXdr = new XDR();
      writeReq.serialize(writeXdr);
      nfsd.write(writeXdr.asReadOnlyWrap(), null, 1, securityHandler,
          new InetSocketAddress(""localhost"", 1234));

      waitWrite(nfsd, handle, 60000);

      // Readback
      READ3Request readReq = new READ3Request(handle, 0, 10);
      XDR readXdr = new XDR();
      readReq.serialize(readXdr);
      READ3Response readRsp = nfsd.read(readXdr.asReadOnlyWrap(),
          securityHandler, new InetSocketAddress(""localhost"", 1234));

      assertTrue(Arrays.equals(buffer, readRsp.getData().array()));

      // Test FILE_SYNC

      // Create file2
      CREATE3Request createReq2 = new CREATE3Request(rootHandle, ""file2"",
          Nfs3Constant.CREATE_UNCHECKED, new SetAttr3(), 0);
      XDR createXdr2 = new XDR();
      createReq2.serialize(createXdr2);
      CREATE3Response createRsp2 = nfsd.create(createXdr2.asReadOnlyWrap(),
          securityHandler, new InetSocketAddress(""localhost"", 1234));
      FileHandle handle2 = createRsp2.getObjHandle();

      WRITE3Request writeReq2 = new WRITE3Request(handle2, 0, 10,
          WriteStableHow.FILE_SYNC, ByteBuffer.wrap(buffer));
      XDR writeXdr2 = new XDR();
      writeReq2.serialize(writeXdr2);
      nfsd.write(writeXdr2.asReadOnlyWrap(), null, 1, securityHandler,
          new InetSocketAddress(""localhost"", 1234));

      waitWrite(nfsd, handle2, 60000);

      // Readback
      READ3Request readReq2 = new READ3Request(handle2, 0, 10);
      XDR readXdr2 = new XDR();
      readReq2.serialize(readXdr2);
      READ3Response readRsp2 = nfsd.read(readXdr2.asReadOnlyWrap(),
          securityHandler, new InetSocketAddress(""localhost"", 1234));

      assertTrue(Arrays.equals(buffer, readRsp2.getData().array()));
      // FILE_SYNC should sync the file size
      status = client.getFileInfo(""/file2"");
      assertTrue(status.getLen() == 10);

    } finally {
      if (cluster != null) {
        cluster.shutdown();
      }
    }
  }
",non-flaky,5
170493,eclipse_jetty.project,ConnectorServerTest.testRMIServerPort,"    @Test
    public void testRMIServerPort() throws Exception
    {
        ServerSocket server = new ServerSocket(0);
        int port = server.getLocalPort();
        server.close();

        connectorServer = new ConnectorServer(new JMXServiceURL(""service:jmx:rmi://localhost:"" + port + ""/jndi/rmi:///jmxrmi""), objectName);
        connectorServer.start();

        JMXServiceURL address = connectorServer.getAddress();
        assertEquals(port, address.getPort());

        InetAddress loopback = InetAddress.getLoopbackAddress();
        new Socket(loopback, port).close();
    }
",non-flaky,5
77677,pholser_junit-quickcheck,PrimitivePropertyParameterTypesTest.shouldHold,"    @Test public void shrinkingBooleanFromTrue() {
        @Property public void shouldHold(boolean b) {
            values.add(b);

            assumeTrue(b);
            fail();
        }
",non-flaky,5
160370,ConsenSys_teku,SignedAttestationTest.shouldSerialize,"  @Test
  public void shouldSerialize() throws JsonProcessingException {
    final SignedAttestation signedAttestation = new SignedAttestation(source, target, signingRoot);
    String str = jsonProvider.objectToPrettyJSON(signedAttestation);
    assertThat(str).isEqualToNormalizingNewlines(jsonData);
  }
",non-flaky,5
91423,strapdata_elassandra,LicensingTests.nodeSettings,"@TestLogging(""org.elasticsearch.cluster.service:TRACE,org.elasticsearch.discovery.zen:TRACE,org.elasticsearch.action.search:TRACE,"" +
    public Settings nodeSettings(int nodeOrdinal) {
        return Settings.builder().put(super.nodeSettings(nodeOrdinal))
                .put(NetworkModule.HTTP_ENABLED.getKey(), true)
            .put(TestZenDiscovery.USE_MOCK_PINGS.getKey(), false)
                .build();
    }
",non-flaky,5
59657,looly_hutool,ScriptUtilTest.compileTest,"	@Test
	public void compileTest() {
		CompiledScript script = ScriptUtil.compile(""print('Script test!');"");
		try {
			script.eval();
		} catch (ScriptException e) {
			throw new ScriptRuntimeException(e);
		}
	}
",non-flaky,5
97704,vojtechhabarta_typescript-generator,IncludeExcludePropertyTest.testInclude,"    @Test
    public void testInclude() {
        final Settings settings = TestUtils.settings();
        settings.jsonLibrary = library;
        settings.includePropertyAnnotations = Arrays.asList(MyInclude.class);
        final String output = new TypeScriptGenerator(settings).generateTypeScript(Input.from(ClassWithAnnotatedProperties.class));
        Assert.assertTrue(!output.contains(""property1""));
        Assert.assertTrue(output.contains(""property2""));
        Assert.assertTrue(!output.contains(""property3""));
        Assert.assertTrue(output.contains(""property4""));
    }
",non-flaky,5
19515,eclipse_xtext-core,TraceRegionTest.testLeafIterator_TwoChildren_WithGaps,"	@Test
	public void testLeafIterator_TwoChildren_WithGaps() {
		final TraceRegion parent = new TraceRegion(0, 3, 0, 3, true, 2, 3, 0, 0, null, newURI());
		TraceRegion first = new TraceRegion(0, 1, 0, 1, true, 2, 3, 0, 0, parent, null);
		AbstractTraceRegion second = new AbstractStatefulTraceRegion(new TextRegionWithLineInformation(1, 1, 1, 2), true, new LocationData(2, 3, 0, 0, null), parent) {};
		AbstractTraceRegion third = new TraceRegion(2, 1, 2, 3, true, 3, 4, 0, 0, parent, null);
		Iterator<AbstractTraceRegion> iter = parent.leafIterator();
		assertEquals(Arrays.asList(first, second, third).iterator(), iter);
	}
",non-flaky,5
59624,looly_hutool,JschUtilTest.sftpTest,"	@Test
	public void sftpTest() {
		Session session = JschUtil.getSession(""looly.centos"", 22, ""root"", ""123456"");
		Sftp sftp = JschUtil.createSftp(session);
		sftp.mkDirs(""/opt/test/aaa/bbb"");
		Console.log(""OK"");
	}
",non-flaky,5
122624,vespa-engine_vespa,IPAddressesTest.translator_with_valid_parameters,"    @Test
    public void translator_with_valid_parameters() {

        // Test simplest possible address
        Inet6Address original = (Inet6Address) InetAddresses.forString(""2001:db8::1"");
        Inet6Address prefix = (Inet6Address) InetAddresses.forString(""fd00::"");
        InetAddress translated = IPAddresses.prefixTranslate(original, prefix, 8);
        assertEquals(""fd00:0:0:0:0:0:0:1"", translated.getHostAddress());


        // Test an actual aws address we use
        original = (Inet6Address) InetAddresses.forString(""2600:1f16:f34:5300:ccc6:1703:b7c2:369d"");
        translated = IPAddresses.prefixTranslate(original, prefix, 8);
        assertEquals(""fd00:0:0:0:ccc6:1703:b7c2:369d"", translated.getHostAddress());

        // Test different subnet size
        translated = IPAddresses.prefixTranslate(original, prefix, 6);
        assertEquals(""fd00:0:0:5300:ccc6:1703:b7c2:369d"", translated.getHostAddress());
    }
",non-flaky,5
20968,NationalSecurityAgency_timely,TestGorillaStore.testOne,"    @Test
    public void testOne() {

        GorillaStore gStore = new GorillaStore();

        long now = System.currentTimeMillis();
        gStore.addValue(now += 100, 1.123);
        gStore.addValue(now += 100, 2.314);
        gStore.addValue(now += 100, 3.856);
        gStore.addValue(now += 100, 4.7678);
        gStore.addValue(now += 100, 5.8966);
        gStore.addValue(now += 100, 6.0976);
        gStore.addValue(now += 100, 1.2345);

        List<WrappedGorillaDecompressor> decompressorList = gStore.getDecompressors(0, Long.MAX_VALUE);
        Pair pair = null;
        for (WrappedGorillaDecompressor w : decompressorList) {
            while ((pair = w.readPair()) != null) {
                System.out.println(pair.getTimestamp() + "" --> "" + pair.getDoubleValue());
            }
        }

        System.out.println(""---------------"");

        gStore.addValue(now += 100, 2.3456);
        gStore.addValue(now += 100, 3.4567);

        decompressorList = gStore.getDecompressors(0, Long.MAX_VALUE);
        pair = null;
        for (WrappedGorillaDecompressor w : decompressorList) {
            while ((pair = w.readPair()) != null) {
                System.out.println(pair.getTimestamp() + "" --> "" + pair.getDoubleValue());
            }
        }
    }
",non-flaky,5
30940,camunda-cloud_zeebe,ElasticsearchExporterTest.shouldNotExportDisabledRecordTypes,"  @Test
  public void shouldNotExportDisabledRecordTypes() {
    // given
    config.index.command = false;
    config.index.event = false;
    config.index.rejection = false;
    config.index.deployment = true;

    createAndOpenExporter();

    final RecordType[] recordTypes =
        new RecordType[] {RecordType.COMMAND, RecordType.EVENT, RecordType.COMMAND_REJECTION};

    // when - then
    final Context.RecordFilter filter = testHarness.getContext().getFilter();

    assertThat(Arrays.stream(recordTypes).map(filter::acceptType)).containsOnly(false);
  }
",non-flaky,5
91488,strapdata_elassandra,IndexRecoveryIT.testRerouteRecovery,"    @TestLogging(
    public void testRerouteRecovery() throws Exception {
        logger.info(""--> start node A"");
        final String nodeA = internalCluster().startNode();

        logger.info(""--> create index on node: {}"", nodeA);
        ByteSizeValue shardSize = createAndPopulateIndex(INDEX_NAME, 1, SHARD_COUNT, REPLICA_COUNT).getShards()[0].getStats().getStore().size();

        logger.info(""--> start node B"");
        final String nodeB = internalCluster().startNode();

        ensureGreen();

        logger.info(""--> slowing down recoveries"");
        slowDownRecovery(shardSize);

        logger.info(""--> move shard from: {} to: {}"", nodeA, nodeB);
        client().admin().cluster().prepareReroute()
                .add(new MoveAllocationCommand(INDEX_NAME, 0, nodeA, nodeB))
                .execute().actionGet().getState();

        logger.info(""--> waiting for recovery to start both on source and target"");
        final Index index = resolveIndex(INDEX_NAME);
        assertBusy(() -> {
            IndicesService indicesService = internalCluster().getInstance(IndicesService.class, nodeA);
            assertThat(indicesService.indexServiceSafe(index).getShard(0).recoveryStats().currentAsSource(),
                    equalTo(1));
            indicesService = internalCluster().getInstance(IndicesService.class, nodeB);
            assertThat(indicesService.indexServiceSafe(index).getShard(0).recoveryStats().currentAsTarget(),
                    equalTo(1));
        });

        logger.info(""--> request recoveries"");
        RecoveryResponse response = client().admin().indices().prepareRecoveries(INDEX_NAME).execute().actionGet();

        List<RecoveryState> recoveryStates = response.shardRecoveryStates().get(INDEX_NAME);
        List<RecoveryState> nodeARecoveryStates = findRecoveriesForTargetNode(nodeA, recoveryStates);
        assertThat(nodeARecoveryStates.size(), equalTo(1));
        List<RecoveryState> nodeBRecoveryStates = findRecoveriesForTargetNode(nodeB, recoveryStates);
        assertThat(nodeBRecoveryStates.size(), equalTo(1));

        assertRecoveryState(nodeARecoveryStates.get(0), 0, RecoverySource.EmptyStoreRecoverySource.INSTANCE, true, Stage.DONE, null, nodeA);
        validateIndexRecoveryState(nodeARecoveryStates.get(0).getIndex());

        assertOnGoingRecoveryState(nodeBRecoveryStates.get(0), 0, PeerRecoverySource.INSTANCE, true, nodeA, nodeB);
        validateIndexRecoveryState(nodeBRecoveryStates.get(0).getIndex());

        logger.info(""--> request node recovery stats"");
        NodesStatsResponse statsResponse = client().admin().cluster().prepareNodesStats().clear().setIndices(new CommonStatsFlags(CommonStatsFlags.Flag.Recovery)).get();
        long nodeAThrottling = Long.MAX_VALUE;
        long nodeBThrottling = Long.MAX_VALUE;
        for (NodeStats nodeStats : statsResponse.getNodes()) {
            final RecoveryStats recoveryStats = nodeStats.getIndices().getRecoveryStats();
            if (nodeStats.getNode().getName().equals(nodeA)) {
                assertThat(""node A should have ongoing recovery as source"", recoveryStats.currentAsSource(), equalTo(1));
                assertThat(""node A should not have ongoing recovery as target"", recoveryStats.currentAsTarget(), equalTo(0));
                nodeAThrottling = recoveryStats.throttleTime().millis();
            }
            if (nodeStats.getNode().getName().equals(nodeB)) {
                assertThat(""node B should not have ongoing recovery as source"", recoveryStats.currentAsSource(), equalTo(0));
                assertThat(""node B should have ongoing recovery as target"", recoveryStats.currentAsTarget(), equalTo(1));
                nodeBThrottling = recoveryStats.throttleTime().millis();
            }
        }

        logger.info(""--> checking throttling increases"");
        final long finalNodeAThrottling = nodeAThrottling;
        final long finalNodeBThrottling = nodeBThrottling;
        assertBusy(() -> {
            NodesStatsResponse statsResponse1 = client().admin().cluster().prepareNodesStats().clear().setIndices(new CommonStatsFlags(CommonStatsFlags.Flag.Recovery)).get();
            assertThat(statsResponse1.getNodes(), hasSize(2));
            for (NodeStats nodeStats : statsResponse1.getNodes()) {
                final RecoveryStats recoveryStats = nodeStats.getIndices().getRecoveryStats();
                if (nodeStats.getNode().getName().equals(nodeA)) {
                    assertThat(""node A throttling should increase"", recoveryStats.throttleTime().millis(), greaterThan(finalNodeAThrottling));
                }
                if (nodeStats.getNode().getName().equals(nodeB)) {
                    assertThat(""node B throttling should increase"", recoveryStats.throttleTime().millis(), greaterThan(finalNodeBThrottling));
                }
            }
        });


        logger.info(""--> speeding up recoveries"");
        restoreRecoverySpeed();

        // wait for it to be finished
        ensureGreen();

        response = client().admin().indices().prepareRecoveries(INDEX_NAME).execute().actionGet();

        recoveryStates = response.shardRecoveryStates().get(INDEX_NAME);
        assertThat(recoveryStates.size(), equalTo(1));

        assertRecoveryState(recoveryStates.get(0), 0, PeerRecoverySource.INSTANCE, true, Stage.DONE, nodeA, nodeB);
        validateIndexRecoveryState(recoveryStates.get(0).getIndex());
        Consumer<String> assertNodeHasThrottleTimeAndNoRecoveries = nodeName ->  {
            NodesStatsResponse nodesStatsResponse = client().admin().cluster().prepareNodesStats().setNodesIds(nodeName)
                .clear().setIndices(new CommonStatsFlags(CommonStatsFlags.Flag.Recovery)).get();
            assertThat(nodesStatsResponse.getNodes(), hasSize(1));
            NodeStats nodeStats = nodesStatsResponse.getNodes().get(0);
            final RecoveryStats recoveryStats = nodeStats.getIndices().getRecoveryStats();
            assertThat(recoveryStats.currentAsSource(), equalTo(0));
            assertThat(recoveryStats.currentAsTarget(), equalTo(0));
            assertThat(nodeName + "" throttling should be >0"", recoveryStats.throttleTime().millis(), greaterThan(0L));
        };
        // we have to use assertBusy as recovery counters are decremented only when the last reference to the RecoveryTarget
        // is decremented, which may happen after the recovery was done.
        assertBusy(() -> assertNodeHasThrottleTimeAndNoRecoveries.accept(nodeA));
        assertBusy(() -> assertNodeHasThrottleTimeAndNoRecoveries.accept(nodeB));

        logger.info(""--> bump replica count"");
        client().admin().indices().prepareUpdateSettings(INDEX_NAME)
                .setSettings(Settings.builder().put(""number_of_replicas"", 1)).execute().actionGet();
        ensureGreen();

        assertBusy(() -> assertNodeHasThrottleTimeAndNoRecoveries.accept(nodeA));
        assertBusy(() -> assertNodeHasThrottleTimeAndNoRecoveries.accept(nodeB));

        logger.info(""--> start node C"");
        String nodeC = internalCluster().startNode();
        assertFalse(client().admin().cluster().prepareHealth().setWaitForNodes(""3"").get().isTimedOut());

        logger.info(""--> slowing down recoveries"");
        slowDownRecovery(shardSize);

        logger.info(""--> move replica shard from: {} to: {}"", nodeA, nodeC);
        client().admin().cluster().prepareReroute()
                .add(new MoveAllocationCommand(INDEX_NAME, 0, nodeA, nodeC))
                .execute().actionGet().getState();

        response = client().admin().indices().prepareRecoveries(INDEX_NAME).execute().actionGet();
        recoveryStates = response.shardRecoveryStates().get(INDEX_NAME);

        nodeARecoveryStates = findRecoveriesForTargetNode(nodeA, recoveryStates);
        assertThat(nodeARecoveryStates.size(), equalTo(1));
        nodeBRecoveryStates = findRecoveriesForTargetNode(nodeB, recoveryStates);
        assertThat(nodeBRecoveryStates.size(), equalTo(1));
        List<RecoveryState> nodeCRecoveryStates = findRecoveriesForTargetNode(nodeC, recoveryStates);
        assertThat(nodeCRecoveryStates.size(), equalTo(1));

        assertRecoveryState(nodeARecoveryStates.get(0), 0, PeerRecoverySource.INSTANCE, false, Stage.DONE, nodeB, nodeA);
        validateIndexRecoveryState(nodeARecoveryStates.get(0).getIndex());

        assertRecoveryState(nodeBRecoveryStates.get(0), 0, PeerRecoverySource.INSTANCE, true, Stage.DONE, nodeA, nodeB);
        validateIndexRecoveryState(nodeBRecoveryStates.get(0).getIndex());

        // relocations of replicas are marked as REPLICA and the source node is the node holding the primary (B)
        assertOnGoingRecoveryState(nodeCRecoveryStates.get(0), 0, PeerRecoverySource.INSTANCE, false, nodeB, nodeC);
        validateIndexRecoveryState(nodeCRecoveryStates.get(0).getIndex());

        if (randomBoolean()) {
            // shutdown node with relocation source of replica shard and check if recovery continues
            internalCluster().stopRandomNode(InternalTestCluster.nameFilter(nodeA));
            ensureStableCluster(2);

            response = client().admin().indices().prepareRecoveries(INDEX_NAME).execute().actionGet();
            recoveryStates = response.shardRecoveryStates().get(INDEX_NAME);

            nodeARecoveryStates = findRecoveriesForTargetNode(nodeA, recoveryStates);
            assertThat(nodeARecoveryStates.size(), equalTo(0));
            nodeBRecoveryStates = findRecoveriesForTargetNode(nodeB, recoveryStates);
            assertThat(nodeBRecoveryStates.size(), equalTo(1));
            nodeCRecoveryStates = findRecoveriesForTargetNode(nodeC, recoveryStates);
            assertThat(nodeCRecoveryStates.size(), equalTo(1));

            assertRecoveryState(nodeBRecoveryStates.get(0), 0, PeerRecoverySource.INSTANCE, true, Stage.DONE, nodeA, nodeB);
            validateIndexRecoveryState(nodeBRecoveryStates.get(0).getIndex());

            assertOnGoingRecoveryState(nodeCRecoveryStates.get(0), 0, PeerRecoverySource.INSTANCE, false, nodeB, nodeC);
            validateIndexRecoveryState(nodeCRecoveryStates.get(0).getIndex());
        }

        logger.info(""--> speeding up recoveries"");
        restoreRecoverySpeed();
        ensureGreen();

        response = client().admin().indices().prepareRecoveries(INDEX_NAME).execute().actionGet();
        recoveryStates = response.shardRecoveryStates().get(INDEX_NAME);

        nodeARecoveryStates = findRecoveriesForTargetNode(nodeA, recoveryStates);
        assertThat(nodeARecoveryStates.size(), equalTo(0));
        nodeBRecoveryStates = findRecoveriesForTargetNode(nodeB, recoveryStates);
        assertThat(nodeBRecoveryStates.size(), equalTo(1));
        nodeCRecoveryStates = findRecoveriesForTargetNode(nodeC, recoveryStates);
        assertThat(nodeCRecoveryStates.size(), equalTo(1));

        assertRecoveryState(nodeBRecoveryStates.get(0), 0, PeerRecoverySource.INSTANCE, true, Stage.DONE, nodeA, nodeB);
        validateIndexRecoveryState(nodeBRecoveryStates.get(0).getIndex());

        // relocations of replicas are marked as REPLICA and the source node is the node holding the primary (B)
        assertRecoveryState(nodeCRecoveryStates.get(0), 0, PeerRecoverySource.INSTANCE, false, Stage.DONE, nodeB, nodeC);
        validateIndexRecoveryState(nodeCRecoveryStates.get(0).getIndex());
    }
",non-flaky,5
122618,vespa-engine_vespa,TextBufferImplTest.testWrite,"    @Test
    public void testWrite() {
        assertEquals("""", textBuffer.getString());
        assertWrite(2, 0, ""foo\nbar\n"",
                0, 0, ""foo\nbar\n"");

        assertWrite(1, 6, ""fofirst\nsecondo\nbar\n"",
                0, 2, ""first\nsecond"");

        assertWrite(3, 1, ""fofirst\nsecondo\nbar\na"",
                3, 0, ""a"");
        assertWrite(4, 0, ""fofirst\nsecondo\nbar\na\n"",
                3, 1, ""\n"");
    }
",non-flaky,5
94787,ktuukkan_marine-api,AISMessage21ParserTest.getUtcSecond,"    @Test
    public void getUtcSecond() throws Exception {
        // UTC time stamp?
        assertEquals(9, msg.getUtcSecond());
    }
",non-flaky,5
113783,salesforce_reactive-grpc,ReactivePublisherBackpressureOnReadyHandlerTest.runPrimesThePump,"    @Test
    public void runPrimesThePump() {
        ClientCallStreamObserver<Object> obs = mock(ClientCallStreamObserver.class);
        when(obs.isReady()).thenReturn(true);
        ReactivePublisherBackpressureOnReadyHandlerClient<Object> handler = new ReactivePublisherBackpressureOnReadyHandlerClient<Object>(obs);
        Subscription sub = mock(Subscription.class);

        handler.onSubscribe(sub);

        handler.run();
        verify(sub).request(1);
    }
",non-flaky,5
99799,apache_cassandra,OutboundConnectionSettingsTest.build_SmallSendSize,"    @Test (expected = IllegalArgumentException.class)
    public void build_SmallSendSize()
    {
        test(settings -> settings.withSocketSendBufferSizeInBytes(999));
    }
",non-flaky,5
19441,eclipse_xtext-core,TypeHierarchyHelperTest.testNikolaus,"	@Test
	public void testNikolaus() throws Exception {
		// no uplift for less than two children
		EClassInfo a = addClass(""a"");
		EClassInfo b = addClass(""b"");
		EClassInfo c = addClass(""c"");
		EClassInfo d = addClass(""d"");
		EClassInfo e = addClass(""e"");
		b.addSupertype(a);
		c.addSupertype(a);
		d.addSupertype(b);
		d.addSupertype(c);
		e.addSupertype(b);
		e.addSupertype(c);

		addAttribute(b, STRING, ""f2"");
		addAttribute(c, STRING, ""f2"");
		addAttribute(d, INT, ""f1"");
		addAttribute(e, INT, ""f1"");

		assertEquals(0, a.getEClass().getEStructuralFeatures().size());
		assertEquals(1, b.getEClass().getEStructuralFeatures().size());
		assertEquals(1, c.getEClass().getEStructuralFeatures().size());
		assertEquals(1, d.getEClass().getEStructuralFeatures().size());
		assertEquals(1, e.getEClass().getEStructuralFeatures().size());

		liftUpFeatures();

		assertEquals(1, a.getEClass().getEStructuralFeatures().size());
		assertEquals(0, b.getEClass().getEStructuralFeatures().size());
		assertEquals(0, c.getEClass().getEStructuralFeatures().size());
		assertEquals(1, d.getEClass().getEStructuralFeatures().size());
		assertEquals(1, e.getEClass().getEStructuralFeatures().size());
	}
",non-flaky,5
76922,Tencent_Firestorm,RssShuffleDataIteratorTest.readTest1,"  @Test
  public void readTest1() throws Exception {
    String basePath = HDFS_URI + ""readTest1"";
    HdfsShuffleWriteHandler writeHandler =
        new HdfsShuffleWriteHandler(""appId"", 0, 0, 1, basePath, ""test1"", conf);

    Map<String, String> expectedData = Maps.newHashMap();
    Roaring64NavigableMap blockIdBitmap = Roaring64NavigableMap.bitmapOf();
    Roaring64NavigableMap taskIdBitmap = Roaring64NavigableMap.bitmapOf(0);
    writeTestData(writeHandler, 2, 5, expectedData,
        blockIdBitmap, ""key"", KRYO_SERIALIZER, 0);

    RssShuffleDataIterator rssShuffleDataIterator = getDataIterator(basePath, blockIdBitmap, taskIdBitmap);

    validateResult(rssShuffleDataIterator, expectedData, 10);

    blockIdBitmap.add(ClientUtils.getBlockId(0, 0, Constants.MAX_SEQUENCE_NO));
    rssShuffleDataIterator = getDataIterator(basePath, blockIdBitmap, taskIdBitmap);
    int recNum = 0;
    try {
      // can't find all expected block id, data loss
      while (rssShuffleDataIterator.hasNext()) {
        rssShuffleDataIterator.next();
        recNum++;
      }
      fail(EXPECTED_EXCEPTION_MESSAGE);
    } catch (Exception e) {
      assertTrue(e.getMessage().startsWith(""Blocks read inconsistent:""));
    }
    assertEquals(10, recNum);
  }
",non-flaky,5
156442,apache_commons-lang,DateUtilsFragmentTest.testDayOfYearFragmentInLargerUnitWithCalendar,"    @Test
    public void testDayOfYearFragmentInLargerUnitWithCalendar() {
        assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.DAY_OF_YEAR));
    }
",non-flaky,5
43081,trinodb_trino,BaseConnectorTest.testUpdateRowConcurrently,"    @Test(timeOut = 60_000, invocationCount = 4)
    public void testUpdateRowConcurrently()
            throws Exception
",non-flaky,5
77666,pholser_junit-quickcheck,OffsetTimePropertyParameterTypesTest.shouldHold,"    @Test public void malformedMax() {
        @Property public void shouldHold(
            @InRange(
",non-flaky,5
98077,vert-x3_vertx-mongo-client,WriteConcernParserTest.testInvalidTypeWriteConcern,"  @Test(expected = IllegalArgumentException.class)
  public void testInvalidTypeWriteConcern() {
    JsonObject config = new JsonObject();
    config.put(""writeConcern"", 123);

    new WriteConcernParser(null, config);
  }
",non-flaky,5
76934,Tencent_Firestorm,RssShuffleWriterTest.onReceive,"  @Test
  public void postBlockEventTest() throws Exception {
    WriteBufferManager mockBufferManager = mock(WriteBufferManager.class);
    ShuffleDependency mockDependency = mock(ShuffleDependency.class);
    ShuffleWriteMetrics mockMetrics = mock(ShuffleWriteMetrics.class);
    Partitioner mockPartitioner = mock(Partitioner.class);
    when(mockDependency.partitioner()).thenReturn(mockPartitioner);
    SparkConf sparkConf = new SparkConf();
    when(mockPartitioner.numPartitions()).thenReturn(2);
    List<AddBlockEvent> events = Lists.newArrayList();

    EventLoop<AddBlockEvent> eventLoop = new EventLoop<AddBlockEvent>(""test"") {
      @Override
      public void onReceive(AddBlockEvent event) {
        events.add(event);
      }
",non-flaky,5
327,apache_hadoop,TestDFSIO.testRead,"@Test
public void testRead() throws Exception {
    FileSystem fs = cluster.getFileSystem();
    long tStart = System.currentTimeMillis();
    bench.readTest(fs);
    long execTime = System.currentTimeMillis() - tStart;
    bench.analyzeResult(fs, TestType.TEST_TYPE_READ, execTime);
}",test order dependency,4
98289,spotify_docker-client,RegistryAuthTest.testFromDockerConfig_MultiConfig,"  @Test
  public void testFromDockerConfig_MultiConfig() throws Exception {
    final RegistryAuth myDockParsed = RegistryAuth.fromDockerConfig(getTestFilePath(
        ""dockerConfig/multiConfig.json""), ""https://narnia.mydock.io/v1/"").build();
    assertThat(myDockParsed, equalTo(MY_AUTH_CONFIG));
    final RegistryAuth dockerIoParsed = RegistryAuth.fromDockerConfig(getTestFilePath(
        ""dockerConfig/multiConfig.json""), ""https://index.docker.io/v1/"").build();
    assertThat(dockerIoParsed, equalTo(DOCKER_AUTH_CONFIG));
  }
",non-flaky,5
136456,kiwiproject_dropwizard-service-utilities,StandardExceptionMappersTest.setRegisterDefaultExceptionMappers,"        @Test
                public void setRegisterDefaultExceptionMappers(Boolean registerDefaultExceptionMappers) {
                    assertThat(registerDefaultExceptionMappers).isFalse();
                }
",non-flaky,5
89368,apache_samza,TestKafkaCheckpointManager.testReadCheckpointV1,"  @Test
  public void testReadCheckpointV1() throws InterruptedException {
    setupSystemFactory(config());
    CheckpointV1 checkpointV1 = buildCheckpointV1(INPUT_SSP0, ""0"");
    List<IncomingMessageEnvelope> checkpointEnvelopes =
        ImmutableList.of(newCheckpointV1Envelope(TASK0, checkpointV1, ""0""));
    setupConsumer(checkpointEnvelopes);
    KafkaCheckpointManager kafkaCheckpointManager = buildKafkaCheckpointManager(true, config());
    kafkaCheckpointManager.register(TASK0);
    Checkpoint actualCheckpoint = kafkaCheckpointManager.readLastCheckpoint(TASK0);
    assertEquals(checkpointV1, actualCheckpoint);
  }
",non-flaky,5
112682,hwang-pku_ormlite-core,BaseDaoEnabledTest.testUpdateId,"	@Test
	public void testUpdateId() throws Exception {
		Dao<One, Integer> dao = createDao(One.class, true);
		One one = new One();
		String stuff1 = ""fewpfjewfew"";
		one.stuff = stuff1;
		assertEquals(1, dao.create(one));
		int id = one.id;
		assertNotNull(dao.queryForId(id));
		assertEquals(1, one.updateId(id + 1));
		assertNull(dao.queryForId(id));
		assertNotNull(dao.queryForId(id + 1));
	}
",non-flaky,5
30974,camunda-cloud_zeebe,ObjectMappingUndeclaredPropertiesTest.shouldIncludeUndeclaredPropertiesInLengthEstimation,"  @Test
  public void shouldIncludeUndeclaredPropertiesInLengthEstimation() {
    // given
    final MinimalPOJO pojo = new MinimalPOJO();
    pojo.wrap(MSG_PACK);

    // when
    final long writeLength = pojo.getLength();

    // then
    assertThat(writeLength).isEqualTo(MSG_PACK.capacity());
  }
",non-flaky,5
104636,apache_pinot,OfflineClusterIntegrationTest.testLiteralOnlyFunc,"  @Test
  public void testLiteralOnlyFunc()
      throws Exception {
    long currentTsMin = System.currentTimeMillis();
    long oneHourAgoTsMin = currentTsMin - ONE_HOUR_IN_MS;
    String sqlQuery =
        ""SELECT 1, now() as currentTs, ago('PT1H') as oneHourAgoTs, 'abc', toDateTime(now(), 'yyyy-MM-dd z') as ""
            + ""today, now(), ago('PT1H')"";
    JsonNode response = postSqlQuery(sqlQuery, _brokerBaseApiUrl);
    long currentTsMax = System.currentTimeMillis();
    long oneHourAgoTsMax = currentTsMax - ONE_HOUR_IN_MS;

    assertEquals(response.get(""resultTable"").get(""dataSchema"").get(""columnNames"").get(0).asText(), ""1"");
    assertEquals(response.get(""resultTable"").get(""dataSchema"").get(""columnNames"").get(1).asText(), ""currentTs"");
    assertEquals(response.get(""resultTable"").get(""dataSchema"").get(""columnNames"").get(2).asText(), ""oneHourAgoTs"");
    assertEquals(response.get(""resultTable"").get(""dataSchema"").get(""columnNames"").get(3).asText(), ""abc"");
    assertEquals(response.get(""resultTable"").get(""dataSchema"").get(""columnNames"").get(4).asText(), ""today"");
    String nowColumnName = response.get(""resultTable"").get(""dataSchema"").get(""columnNames"").get(5).asText();
    String oneHourAgoColumnName = response.get(""resultTable"").get(""dataSchema"").get(""columnNames"").get(6).asText();
    assertTrue(Long.parseLong(nowColumnName) > currentTsMin);
    assertTrue(Long.parseLong(nowColumnName) < currentTsMax);
    assertTrue(Long.parseLong(oneHourAgoColumnName) > oneHourAgoTsMin);
    assertTrue(Long.parseLong(oneHourAgoColumnName) < oneHourAgoTsMax);

    assertEquals(response.get(""resultTable"").get(""dataSchema"").get(""columnDataTypes"").get(0).asText(), ""LONG"");
    assertEquals(response.get(""resultTable"").get(""dataSchema"").get(""columnDataTypes"").get(1).asText(), ""LONG"");
    assertEquals(response.get(""resultTable"").get(""dataSchema"").get(""columnDataTypes"").get(2).asText(), ""LONG"");
    assertEquals(response.get(""resultTable"").get(""dataSchema"").get(""columnDataTypes"").get(3).asText(), ""STRING"");
    assertEquals(response.get(""resultTable"").get(""dataSchema"").get(""columnDataTypes"").get(4).asText(), ""STRING"");
    assertEquals(response.get(""resultTable"").get(""dataSchema"").get(""columnDataTypes"").get(5).asText(), ""LONG"");
    assertEquals(response.get(""resultTable"").get(""dataSchema"").get(""columnDataTypes"").get(6).asText(), ""LONG"");

    int first = response.get(""resultTable"").get(""rows"").get(0).get(0).asInt();
    long second = response.get(""resultTable"").get(""rows"").get(0).get(1).asLong();
    long third = response.get(""resultTable"").get(""rows"").get(0).get(2).asLong();
    String fourth = response.get(""resultTable"").get(""rows"").get(0).get(3).asText();
    assertEquals(first, 1);
    assertTrue(second > currentTsMin);
    assertTrue(second < currentTsMax);
    assertTrue(third > oneHourAgoTsMin);
    assertTrue(third < oneHourAgoTsMax);
    assertEquals(fourth, ""abc"");
    String todayStr = response.get(""resultTable"").get(""rows"").get(0).get(4).asText();
    String expectedTodayStr =
        Instant.now().atZone(ZoneId.of(""UTC"")).format(DateTimeFormatter.ofPattern(""yyyy-MM-dd z""));
    assertEquals(todayStr, expectedTodayStr);
    long nowValue = response.get(""resultTable"").get(""rows"").get(0).get(5).asLong();
    assertEquals(nowValue, Long.parseLong(nowColumnName));
    long oneHourAgoValue = response.get(""resultTable"").get(""rows"").get(0).get(6).asLong();
    assertEquals(oneHourAgoValue, Long.parseLong(oneHourAgoColumnName));
  }
",non-flaky,5
33672,alibaba_fastjson,IgnoreTypeDeserializer.parseWithExistType,"    @Test
    public void parseWithExistType() {
        String s = ""{\""@type\"":\""com.alibaba.fastjson.deserializer.ValueBean\"",\""val\"":1}"";
        Object object = JSONObject.parse(s);
        Assert.assertNotNull(object);
        Assert.assertTrue(object instanceof ValueBean);
        Assert.assertEquals(new Integer(1), ValueBean.class.cast(object).getVal());
    }
",non-flaky,5
53220,cloudfoundry_uaa,ScimGroupEndpointsIntegrationTests.testAccessTokenReflectsGroupMembershipForPasswordGrant,"    @Test
    public void testAccessTokenReflectsGroupMembershipForPasswordGrant() throws Exception {

        createTestClient(DELETE_ME, ""secret"", CFID);
        ScimUser user = createUser(DELETE_ME, ""Passwo3d"");
        createGroup(CFID, new ScimGroupMember(user.getId()));
        OAuth2AccessToken token = getAccessTokenWithPassword(DELETE_ME, ""secret"", DELETE_ME, ""Passwo3d"");
        assertTrue(""Wrong token: "" + token, token.getScope().contains(CFID));

        deleteTestClient(DELETE_ME);
        deleteResource(userEndpoint, user.getId());

    }
",non-flaky,5
19488,eclipse_xtext-core,SerializationUtilTest.testFillIdToEObjectMap,"	@Test
	public void testFillIdToEObjectMap() {
		EPackage pack = EcoreFactory.eINSTANCE.createEPackage();
		EClass root = createEClass(pack, ""Root"");
		EClass someType = createEClass(pack, ""SomeType"");

		EReference ref1 = addEReference(root, someType, ""ref1"", false);
		EReference ref2 = addEReference(root, someType, ""ref2"", true);

		EFactory factory = pack.getEFactoryInstance();
		EObject rootObject = factory.create(root);
		EObject someTypeObject1 = factory.create(someType);
		EObject someTypeObject2 = factory.create(someType);
		rootObject.eSet(ref1, someTypeObject1);
		rootObject.eSet(ref2, someTypeObject2);

		List<EObject> map = new ArrayList<>();
		SerializationUtil.fillIdToEObjectMap(rootObject, map);
		assertTrue(map.contains(rootObject));
		assertTrue(map.contains(someTypeObject1));
		assertFalse(map.contains(someTypeObject2));
		assertEquals(2, map.size());
	}
",non-flaky,5
99738,apache_cassandra,FQLReplayTest.testParser,"    @Test
    public void testParser() {
        QueryReplayer.ParsedTargetHost pth;
        pth = fromString(""127.0.0.1"");
        assertEquals(""127.0.0.1"", pth.host);
        assertEquals(9042, pth.port );
        assertNull(pth.user);
        assertNull(pth.password);

        pth = fromString(""127.0.0.1:3333"");
        assertEquals(""127.0.0.1"", pth.host);
        assertEquals(3333, pth.port );
        assertNull(pth.user);
        assertNull(pth.password);

        pth = fromString(""aaa:bbb@127.0.0.1:3333"");
        assertEquals(""127.0.0.1"", pth.host);
        assertEquals(3333, pth.port );
        assertEquals(""aaa"", pth.user);
        assertEquals(""bbb"", pth.password);

        pth = fromString(""aaa:bbb@127.0.0.1"");
        assertEquals(""127.0.0.1"", pth.host);
        assertEquals(9042, pth.port );
        assertEquals(""aaa"", pth.user);
        assertEquals(""bbb"", pth.password);
    }
",non-flaky,5
134028,CorfuDB_CorfuDB,OrchestratorTest.testAddNodeRequestWithoutExisting,"    @Test
    public void testAddNodeRequestWithoutExisting() {
        // We expect a new workflow to be created and prepare the required mocked behaviour.
        ArgumentCaptor<AddNodeRequest> requestArgumentCaptor = ArgumentCaptor.forClass(AddNodeRequest.class);
        AddNodeWorkflow mockWorkflow = mock(AddNodeWorkflow.class);
        doReturn(WORKFLOW_ID_2).when(mockWorkflow).getId();
        doReturn(mockWorkflow).when(workflowFactory).getAddNode(any(AddNodeRequest.class));

        sendAndValidateWorkflowDispatch(getAddNodeRequestMsg(ENDPOINT_2), WORKFLOW_ID_2);

        // Verify that a single AddNodeWorkflow was built for the given endpoint, and
        // that the corresponding workflowId was added to the activeWorkflows map.
        verify(workflowFactory).getAddNode(requestArgumentCaptor.capture());
        assertEquals(ENDPOINT_2, requestArgumentCaptor.getValue().getEndpoint());
        assertTrue(orchestrator.activeWorkflows.containsKey(WORKFLOW_ID_2));

        // Verify that run() was invoked with the newly created workflow.
        verify(orchestrator).run(eq(mockWorkflow), anyInt());
    }
",non-flaky,5
113777,salesforce_reactive-grpc,ReactiveBackpressureChunkerTest.requestOneSupplyOneDoesntRequestAnother,"    @Test
    public void requestOneSupplyOneDoesntRequestAnother() {
        int chunkSize = 16;
        ReactiveBackpressureChunker<Object> chunker = new ReactiveBackpressureChunker<Object>(chunkSize);
        UpstreamSubscription upstreamSubscription = new UpstreamSubscription();
        DownstreamSubscriber downstreamSubscriber = new DownstreamSubscriber();

        Subscriber<Object> chunkSubscriber = chunker.apply(downstreamSubscriber);
        chunkSubscriber.onSubscribe(upstreamSubscription);

        downstreamSubscriber.upstreamSubscription.request(1);
        send(chunkSubscriber, 1);
        assertThat(upstreamSubscription.totalRequested).isEqualTo(chunkSize);
    }
",non-flaky,5
113978,apache_struts,NamedVariablePatternMatcherTest.testIsLiteral,"    @Test
    public void testIsLiteral() {
        NamedVariablePatternMatcher matcher = new NamedVariablePatternMatcher();

        assertTrue(matcher.isLiteral(""bob""));
        assertFalse(matcher.isLiteral(""bob{jim}""));
    }
",non-flaky,5
133981,CorfuDB_CorfuDB,ClientHandshakeHandlerTest.testResponseDroppedBeforeHandshake,"    @Test
    public void testResponseDroppedBeforeHandshake() {
        // Take out the handshake request message upon channelActive.
        Object out = embeddedChannel.readOutbound();
        assertTrue(out instanceof RequestMsg);
        assertTrue(((RequestMsg) out).getPayload().hasHandshakeRequest());
        // Get a ping ResponseMsg
        ResponseMsg response = getResponseMsg(
                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.IGNORE),
                getPingResponseMsg()
        );

        embeddedChannel.writeInbound(response);

        // Verify that the response was correctly dropped and there is no inbound nor outbound messages.
        assertNull(embeddedChannel.readInbound());
        assertNull(embeddedChannel.readOutbound());
    }
",non-flaky,5
137078,spring-projects_spring-framework,AbstractAnnotationMetadataTests.getClassNameReturnsClassName,"	@Test
	public void getClassNameReturnsClassName() {
		assertThat(get(TestClass.class).getClassName()).isEqualTo(TestClass.class.getName());
	}
",non-flaky,5
112126,apache_shardingsphere-elasticjob,StatisticRdbRepositoryTest.assertFindLatestJobRunningStatistics,"    @Test
    public void assertFindLatestJobRunningStatistics() {
        repository.add(new JobRunningStatistics(100, new Date()));
        repository.add(new JobRunningStatistics(200, new Date()));
        Optional<JobRunningStatistics> po = repository.findLatestJobRunningStatistics();
        assertThat(po.get().getRunningCount(), is(200));
    }
",non-flaky,5
113714,salesforce_reactive-grpc,BackpressureIntegrationTest.bidiRequestBackpressure,"    @Test
    public void bidiRequestBackpressure() {
        serverRule.getServiceRegistry().addService(new TestService());

        ReactorNumbersGrpc.ReactorNumbersStub stub = ReactorNumbersGrpc.newReactorStub(serverRule.getChannel());

        Flux<NumberProto.Number> reactorRequest = Flux
                .fromIterable(IntStream.range(0, NUMBER_OF_STREAM_ELEMENTS)::iterator)
                .doOnNext(i -> System.out.println(i + "" --> ""))
                .doOnNext(i -> updateNumberOfWaits(lastValueTime, numberOfWaits))
                .map(BackpressureIntegrationTest::protoNum);

        Flux<NumberProto.Number> reactorResponse = reactorRequest.compose(stub::twoWayRequestPressure);

        StepVerifier.create(reactorResponse)
                .expectNextMatches(v -> v.getNumber(0) == NUMBER_OF_STREAM_ELEMENTS - 1)
                .expectComplete()
                .verify(Duration.ofSeconds(5));

        assertThat(numberOfWaits.get()).isEqualTo(1);
    }
",non-flaky,5
55,pholser_junit-quickcheck,ReflectionTest.findingAnnotationsRecursively,"@Test
public void findingAnnotationsRecursively() {
    Method method = findMethod(this.getClass(), ""withMarker"", String.class);
    List<Annotation> annotations = allAnnotations(method.getParameters()[0]);
    assertEquals(4, annotations.size());
    assertEquals(X.class, annotations.get(0).annotationType());
    assertEquals(Y.class, annotations.get(1).annotationType());
    assertEquals(Z.class, annotations.get(2).annotationType());
    assertEquals(W.class, annotations.get(3).annotationType());
}",unordered collections,3
106672,Alluxio_alluxio,BaseFileSystemTest.getStatusException,"  @Test
  public void getStatusException() throws Exception {
    AlluxioURI file = new AlluxioURI(""/file"");
    GetStatusPOptions getStatusOptions = GetStatusPOptions.getDefaultInstance();
    when(mFileSystemMasterClient.getStatus(file, FileSystemOptions.getStatusDefaults(mConf)
        .toBuilder().mergeFrom(getStatusOptions).build())).thenThrow(EXCEPTION);
    try {
      mFileSystem.getStatus(file, getStatusOptions);
      fail(SHOULD_HAVE_PROPAGATED_MESSAGE);
    } catch (Exception e) {
      assertSame(EXCEPTION, e);
    }

    verifyFilesystemContextAcquiredAndReleased();
  }
",non-flaky,5
99706,apache_cassandra,DistributionGaussianTest.simpleGaussian,"    @Test
    public void simpleGaussian()
    {
        Distribution dist = OptionDistribution.get(""gaussian(1..10)"").get();
        assertTrue(dist instanceof DistributionBoundApache);

        assertEquals(1, dist.minValue());
        assertEquals(10, dist.maxValue());
        assertEquals(5, dist.average());

        assertEquals(1, dist.inverseCumProb(0d));
        assertEquals(10, dist.inverseCumProb(1d));

        int testCount = 100000;
        int[] results = new int[11];
        for (int i = 0; i < testCount; i++)
        {
            int val = toIntExact(dist.next());
            results[val]++;
        }

        // Increasing for the first half
        for (int i = toIntExact(dist.minValue()); i < dist.average(); i++)
        {
            assertTrue(results[i] < results[i + 1]);
        }

        // Decreasing for the second half
        for (int i = toIntExact(dist.average()) + 1; i < dist.maxValue(); i++)
        {
            assertTrue(results[i] > results[i + 1]);
        }
    }
",non-flaky,5
60925,apache_druid,DoubleMeanNoNullAveragerTest.testComputeResult,"  @Test
  public void testComputeResult()
  {
    BaseAverager<Number, Double> avg = new DoubleMeanNoNullAverager(3, ""test"", ""field"", 1);

    Assert.assertEquals(Double.NaN, avg.computeResult(), 0.0);

    avg.addElement(Collections.singletonMap(""field"", 3.0), new HashMap<>());
    Assert.assertEquals(3.0, avg.computeResult(), 0.0);

    avg.addElement(Collections.singletonMap(""field"", 3.0), new HashMap<>());
    Assert.assertEquals(3.0, avg.computeResult(), 0.0);

    avg.addElement(Collections.singletonMap(""field"", 0), new HashMap<>());
    Assert.assertEquals(2.0, avg.computeResult(), 0.0);

    avg.addElement(Collections.singletonMap(""field"", 2.0), new HashMap<>());
    avg.addElement(Collections.singletonMap(""field"", 2.0), new HashMap<>());
    avg.addElement(Collections.singletonMap(""field"", 2.0), new HashMap<>());
    Assert.assertEquals(2.0, avg.computeResult(), 0.0);

    avg.skip();
    Assert.assertEquals(2.0, avg.computeResult(), 0.0);

    // testing cycleSize functionality
    BaseAverager<Number, Double> averager = new DoubleMeanNoNullAverager(14, ""test"", ""field"", 7);

    averager.addElement(Collections.singletonMap(""field"", 2.0), new HashMap<>());
    Assert.assertEquals(2.0, averager.computeResult(), 0.0);

    averager.addElement(Collections.singletonMap(""field"", 4.0), new HashMap<>());
    averager.addElement(Collections.singletonMap(""field"", 5.0), new HashMap<>());
    averager.addElement(Collections.singletonMap(""field"", 6.0), new HashMap<>());
    averager.addElement(Collections.singletonMap(""field"", 7.0), new HashMap<>());
    averager.addElement(Collections.singletonMap(""field"", 8.0), new HashMap<>());
    averager.addElement(Collections.singletonMap(""field"", 9.0), new HashMap<>());
    averager.addElement(Collections.singletonMap(""field"", null), new HashMap<>());
    averager.addElement(Collections.singletonMap(""field"", 11.0), new HashMap<>());
    averager.addElement(Collections.singletonMap(""field"", 12.0), new HashMap<>());
    averager.addElement(Collections.singletonMap(""field"", 13.0), new HashMap<>());
    averager.addElement(Collections.singletonMap(""field"", 14.0), new HashMap<>());
    averager.addElement(Collections.singletonMap(""field"", 15.0), new HashMap<>());
    averager.addElement(Collections.singletonMap(""field"", 16.0), new HashMap<>());

    Assert.assertEquals(7.5, averager.computeResult(), 0.0);

    averager.addElement(Collections.singletonMap(""field"", 3.0), new HashMap<>());
    Assert.assertEquals(8.5, averager.computeResult(), 0.0);
  }
",non-flaky,5
70842,apache_kafka,WorkerSourceTaskTest.testSendRecordsNoTimestamp,"    @Test
    public void testSendRecordsNoTimestamp() throws Exception {
        final Long timestamp = -1L;
        createWorkerTask();

        List<SourceRecord> records = Collections.singletonList(
                new SourceRecord(PARTITION, OFFSET, ""topic"", null, KEY_SCHEMA, KEY, RECORD_SCHEMA, RECORD, timestamp)
        );

        Capture<ProducerRecord<byte[], byte[]>> sent = expectSendRecordAnyTimes();

        PowerMock.replayAll();

        Whitebox.setInternalState(workerTask, ""toSend"", records);
        Whitebox.invokeMethod(workerTask, ""sendRecords"");
        assertEquals(null, sent.getValue().timestamp());

        PowerMock.verifyAll();
    }
",non-flaky,5
26835,wildfly_wildfly,WritableServiceBasedNamingStoreTestCase.testBindNoOwner,"    @Test
    public void testBindNoOwner() throws Exception {
        try {
            store.bind(new CompositeName(""test""), new Object());
            fail(""Should have failed with a read-only context exception"");
        } catch (UnsupportedOperationException expected) {
        }
    }
",non-flaky,5
38281,palantir_atlasdb,AbstractTransactionTest.testKeyValueRanges,"    @Test
    public void testKeyValueRanges() {
        putDirect(""row1"", ""col1"", """", 0);
        putDirect(""row2"", ""col1"", """", 0);
        putDirect(""row2"", ""col2"", """", 0);

        Map<RangeRequest, TokenBackedBasicResultsPage<RowResult<Value>, byte[]>> ranges = keyValueService.getFirstBatchForRanges(TEST_TABLE, ImmutableList.of(RangeRequest.builder().build(), RangeRequest.builder().build()), 1);
        assertTrue(ranges.size() >= 1);
    }
",non-flaky,5
38247,palantir_atlasdb,AbstractAtlasDbKeyValueServiceTest.testDeleteMultipleVersions,"    @Test
    public void testDeleteMultipleVersions() {
        putTestDataForMultipleTimestamps();
        Cell cell = Cell.create(row0, column0);
        ClosableIterator<RowResult<Value>> result = keyValueService.getRange(
                TEST_TABLE,
                RangeRequest.all(),
                TEST_TIMESTAMP + 1);
        assertTrue(result.hasNext());

        keyValueService.delete(TEST_TABLE, ImmutableMultimap.of(cell, TEST_TIMESTAMP));

        result = keyValueService.getRange(TEST_TABLE, RangeRequest.all(), TEST_TIMESTAMP + 1);
        assertTrue(!result.hasNext());

        result = keyValueService.getRange(TEST_TABLE, RangeRequest.all(), TEST_TIMESTAMP + 2);
        assertTrue(result.hasNext());
    }
",non-flaky,5
359,apache_hadoop,TestPermission.testFilePermission,"  @Test
  public void testFilePermission() throws Exception {
    final Configuration conf = new HdfsConfiguration();
    conf.setBoolean(DFSConfigKeys.DFS_PERMISSIONS_ENABLED_KEY, true);
    MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(3).build();
    cluster.waitActive();

    try {
      nnfs = FileSystem.get(conf);
      // test permissions on files that do not exist
      assertFalse(nnfs.exists(CHILD_FILE1));
      try {
        nnfs.setPermission(CHILD_FILE1, new FsPermission((short)0777));
        assertTrue(false);
      }
      catch(java.io.FileNotFoundException e) {
        LOG.info(""GOOD: got "" + e);
      }
      
      // make sure nn can take user specified permission (with default fs
      // permission umask applied)
      FSDataOutputStream out = nnfs.create(CHILD_FILE1, new FsPermission(
          (short) 0777), true, 1024, (short) 1, 1024, null);
      FileStatus status = nnfs.getFileStatus(CHILD_FILE1);
      // FS_PERMISSIONS_UMASK_DEFAULT is 0022
      assertTrue(status.getPermission().toString().equals(""rwxr-xr-x""));
      nnfs.delete(CHILD_FILE1, false);
      
      // following dir/file creations are legal
      nnfs.mkdirs(CHILD_DIR1);
      status = nnfs.getFileStatus(CHILD_DIR1);
      assertThat(""Expect 755 = 777 (default dir) - 022 (default umask)"",
          status.getPermission().toString(), is(""rwxr-xr-x""));
      out = nnfs.create(CHILD_FILE1);
      status = nnfs.getFileStatus(CHILD_FILE1);
      assertTrue(status.getPermission().toString().equals(""rw-r--r--""));
      byte data[] = new byte[FILE_LEN];
      RAN.nextBytes(data);
      out.write(data);
      out.close();
      nnfs.setPermission(CHILD_FILE1, new FsPermission(""700""));
      status = nnfs.getFileStatus(CHILD_FILE1);
      assertTrue(status.getPermission().toString().equals(""rwx------""));

      // mkdirs with null permission
      nnfs.mkdirs(CHILD_DIR3, null);
      status = nnfs.getFileStatus(CHILD_DIR3);
      assertThat(""Expect 755 = 777 (default dir) - 022 (default umask)"",
          status.getPermission().toString(), is(""rwxr-xr-x""));

      // following read is legal
      byte dataIn[] = new byte[FILE_LEN];
      FSDataInputStream fin = nnfs.open(CHILD_FILE1);
      int bytesRead = fin.read(dataIn);
      assertTrue(bytesRead == FILE_LEN);
      for(int i=0; i<FILE_LEN; i++) {
        assertEquals(data[i], dataIn[i]);
      }

      // test execution bit support for files
      nnfs.setPermission(CHILD_FILE1, new FsPermission(""755""));
      status = nnfs.getFileStatus(CHILD_FILE1);
      assertTrue(status.getPermission().toString().equals(""rwxr-xr-x""));
      nnfs.setPermission(CHILD_FILE1, new FsPermission(""744""));
      status = nnfs.getFileStatus(CHILD_FILE1);
      assertTrue(status.getPermission().toString().equals(""rwxr--r--""));
      nnfs.setPermission(CHILD_FILE1, new FsPermission(""700""));
      
      ////////////////////////////////////////////////////////////////
      // test illegal file/dir creation
      UserGroupInformation userGroupInfo = 
        UserGroupInformation.createUserForTesting(USER_NAME, GROUP_NAMES );
      
      userfs = DFSTestUtil.getFileSystemAs(userGroupInfo, conf);

      // make sure mkdir of a existing directory that is not owned by 
      // this user does not throw an exception.
      userfs.mkdirs(CHILD_DIR1);
      
      // illegal mkdir
      assertTrue(!canMkdirs(userfs, CHILD_DIR2));

      // illegal file creation
      assertTrue(!canCreate(userfs, CHILD_FILE2));

      // illegal file open
      assertTrue(!canOpen(userfs, CHILD_FILE1));

      nnfs.setPermission(ROOT_PATH, new FsPermission((short)0755));
      nnfs.setPermission(CHILD_DIR1, new FsPermission(""777""));
      nnfs.setPermission(new Path(""/""), new FsPermission((short)0777));
      final Path RENAME_PATH = new Path(""/foo/bar"");
      userfs.mkdirs(RENAME_PATH);
      assertTrue(canRename(userfs, RENAME_PATH, CHILD_DIR1));
      // test permissions on files that do not exist
      assertFalse(userfs.exists(CHILD_FILE3));
      try {
        userfs.setPermission(CHILD_FILE3, new FsPermission((short) 0777));
        fail(""setPermission should fail for non-exist file"");
      } catch (java.io.FileNotFoundException ignored) {
      }

      // Make sure any user can create file in root.
      nnfs.setPermission(ROOT_PATH, new FsPermission(""777""));

      testSuperCanChangeOwnerGroup();
      testNonSuperCanChangeToOwnGroup();
      testNonSuperCannotChangeToOtherGroup();
      testNonSuperCannotChangeGroupForOtherFile();
      testNonSuperCannotChangeGroupForNonExistentFile();
      testNonSuperCannotChangeOwner();
      testNonSuperCannotChangeOwnerForOtherFile();
      testNonSuperCannotChangeOwnerForNonExistentFile();
    } finally {
      cluster.shutdown();
    }
  }
",non-flaky,5
77651,pholser_junit-quickcheck,Primitive3DArrayPropertyParameterTypesTest.shouldHold,"    @Test public void wrapperIntegerArray() {
        @Property(trials = 2) public void shouldHold(Integer[][][] i) {
        }
",non-flaky,5
133994,CorfuDB_CorfuDB,CorfuClusterParamsTest.testFullNodeName,"    @Test
    public void testFullNodeName() {
        final String clusterName = ""mycluster"";
        final int port = ServerUtil.getRandomOpenPort();

        CorfuServerParams param = CorfuServerParams
                .serverParamsBuilder()
                .port(port)
                .clusterName(clusterName)
                .serverVersion(""1.0.0"")
                .build();

        SortedSet<CorfuServerParams> corfuServers = new TreeSet<>(Collections.singletonList(param));

        CorfuClusterParams clusterParams = CorfuClusterParams.builder()
                .name(clusterName)
                .nodes(corfuServers)
                .serverVersion(""1.0.0"")
                .build();

        String fqdn = clusterParams.getFullNodeName(""node"" + port);

        assertThat(fqdn).isEqualTo(clusterName + ""-corfu-"" + ""node"" + port);
    }
",non-flaky,5
66,palantir_atlasdb,incrementUpperLimitIfOneMinuteElapsedSinceLastUpdate,"@Test
public void incrementUpperLimitIfOneMinuteElapsedSinceLastUpdate() throws InterruptedException {
    Clock clock = mock(Clock.class);
    when(clock.getTimeMillis()).thenReturn(0L, TWO_MINUTES_IN_MILLIS, 2 * TWO_MINUTES_IN_MILLIS, 3 * TWO_MINUTES_IN_MILLIS);
    TimestampBoundStore timestampBoundStore = initialTimestampBoundStore();
    PersistentTimestampService persistentTimestampService = PersistentTimestampService.create(timestampBoundStore, clock);
    persistentTimestampService.getFreshTimestamp();
    Thread.sleep(10);
    persistentTimestampService.getFreshTimestamp();
    Thread.sleep(10);
    verify(timestampBoundStore, atLeast(2)).storeUpperLimit(anyLong());
}",async wait,0
137079,spring-projects_spring-framework,AbstractAnnotationMetadataTests.isInterfaceWhenInterfaceReturnsTrue,"	@Test
	public void isInterfaceWhenInterfaceReturnsTrue() {
		assertThat(get(TestInterface.class).isInterface()).isTrue();
		assertThat(get(TestAnnotation.class).isInterface()).isTrue();
	}
",non-flaky,5
91482,strapdata_elassandra,QueueResizingEsThreadPoolExecutorTests.testAutoQueueSizingWithMax,"    @TestLogging(""org.elasticsearch.common.util.concurrent:DEBUG"")
    public void testAutoQueueSizingWithMax() throws Exception {
        ThreadContext context = new ThreadContext(Settings.EMPTY);
        ResizableBlockingQueue<Runnable> queue =
                new ResizableBlockingQueue<>(ConcurrentCollections.<Runnable>newBlockingQueue(),
                        5000);

        int threads = randomIntBetween(1, 5);
        int measureWindow = randomIntBetween(10, 100);
        int max = randomIntBetween(5010, 5024);
        logger.info(""--> auto-queue with a measurement window of {} tasks"", measureWindow);
        QueueResizingEsThreadPoolExecutor executor =
                new QueueResizingEsThreadPoolExecutor(
                        ""test-threadpool"", threads, threads, 1000,
                        TimeUnit.MILLISECONDS, queue, 10, max, fastWrapper(), measureWindow, TimeValue.timeValueMillis(1),
                        EsExecutors.daemonThreadFactory(""queuetest""), new EsAbortPolicy(), context);
        executor.prestartAllCoreThreads();
        logger.info(""--> executor: {}"", executor);

        // Execute a task multiple times that takes 1ms
        executeTask(executor, measureWindow * 3);

        // The queue capacity should increase, but no higher than the maximum
        assertBusy(() -> {
            assertThat(queue.capacity(), equalTo(max));
        });
        executor.shutdown();
        executor.awaitTermination(10, TimeUnit.SECONDS);
        context.close();
    }
",non-flaky,5
113759,salesforce_reactive-grpc,GrpcRetryTest.manyToManyRetryWhen,"    @Test
    public void manyToManyRetryWhen() {
        Flux<Integer> test = newThreeErrorFlux()
                .<Integer>compose(GrpcRetry.ManyToMany.retryWhen(Function.identity(), Retry.any().retryMax(4)));

        StepVerifier.create(test)
                .expectNext(0)
                .expectComplete()
                .verify(Duration.ofSeconds(1));
    }
",non-flaky,5
99727,apache_cassandra,FQLReplayTest.testCompareEqualRows,"    @Test
    public void testCompareEqualRows()
    {
        ResultComparator rc = new ResultComparator();

        ResultHandler.ComparableResultSet res = createResultSet(10, 10, false);
        ResultHandler.ComparableResultSet res2 = createResultSet(10, 10, false);
        List<ResultHandler.ComparableResultSet> toCompare = Lists.newArrayList(res, res2);
        List<Iterator<ResultHandler.ComparableRow>> iters = toCompare.stream().map(Iterable::iterator).collect(Collectors.toList());

        while (true)
        {
            List<ResultHandler.ComparableRow> rows = ResultHandler.rows(iters);
            assertTrue(rc.compareRows(Lists.newArrayList(""eq1"", ""eq2""), null, rows));
            if (rows.stream().allMatch(Objects::isNull))
                break;
        }
    }
",non-flaky,5
177202,line_armeria,SpringTomcatApplicationItTest.greetingShouldReturnDefaultMessage,"    @Test
    public void greetingShouldReturnDefaultMessage() throws Exception {
        assertThat(restTemplate.getForObject(""http://localhost:"" +
                                             httpPort +
                                             ""/tomcat/api/rest/v1/greeting"",
                                             String.class))
                .contains(""Hello, World!"");
    }
",non-flaky,5
112720,hwang-pku_ormlite-core,DatabaseConnectionProxyTest.testIsAutoCommitSupportedNull,"	@Test
	public void testIsAutoCommitSupportedNull() throws Exception {
		DatabaseConnectionProxy proxy = new DatabaseConnectionProxy(null);
		assertFalse(proxy.isAutoCommitSupported());
		proxy.close();
	}
",non-flaky,5
104656,apache_pinot,OfflineClusterIntegrationTest.testNonAggregationGroupByQuery,"  @Test
  public void testNonAggregationGroupByQuery()
      throws Exception {
    // by default 10 rows will be returned, so use high limit
    String pql = ""SELECT Carrier FROM mytable GROUP BY Carrier LIMIT 1000000"";
    String sql = ""SELECT Carrier FROM mytable GROUP BY Carrier"";
    testSqlQuery(pql, Collections.singletonList(sql));

    pql = ""SELECT Carrier, DestAirportID FROM mytable GROUP BY Carrier, DestAirportID LIMIT 1000000"";
    sql = ""SELECT Carrier, DestAirportID FROM mytable GROUP BY Carrier, DestAirportID"";
    testSqlQuery(pql, Collections.singletonList(sql));

    pql =
        ""SELECT Carrier, DestAirportID, DestStateName FROM mytable GROUP BY Carrier, DestAirportID, DestStateName ""
            + ""LIMIT 1000000"";
    sql = ""SELECT Carrier, DestAirportID, DestStateName FROM mytable GROUP BY Carrier, DestAirportID, DestStateName"";
    testSqlQuery(pql, Collections.singletonList(sql));

    pql =
        ""SELECT Carrier, DestAirportID, DestCityName FROM mytable GROUP BY Carrier, DestAirportID, DestCityName LIMIT""
            + "" 1000000"";
    sql = ""SELECT Carrier, DestAirportID, DestCityName FROM mytable GROUP BY Carrier, DestAirportID, DestCityName"";
    testSqlQuery(pql, Collections.singletonList(sql));

    pql = ""SELECT ArrTime-DepTime FROM mytable GROUP BY ArrTime, DepTime LIMIT 1000000"";
    sql = ""SELECT ArrTime-DepTime FROM mytable GROUP BY ArrTime, DepTime"";
    testSqlQuery(pql, Collections.singletonList(sql));

    pql = ""SELECT ArrTime-DepTime,ArrTime/3,DepTime*2 FROM mytable GROUP BY ArrTime, DepTime LIMIT 1000000"";
    sql = ""SELECT ArrTime-DepTime,ArrTime/3,DepTime*2 FROM mytable GROUP BY ArrTime, DepTime"";
    testSqlQuery(pql, Collections.singletonList(sql));

    pql = ""SELECT ArrTime+DepTime FROM mytable GROUP BY ArrTime + DepTime LIMIT 1000000"";
    sql = ""SELECT ArrTime+DepTime FROM mytable GROUP BY ArrTime + DepTime"";
    testSqlQuery(pql, Collections.singletonList(sql));
  }
",non-flaky,5
160385,ConsenSys_teku,ChainDataProviderTest.getGenesisData_shouldThrowIfStoreNotAvailable,"  @Test
  public void getGenesisData_shouldThrowIfStoreNotAvailable() {
    final ChainDataProvider provider =
        new ChainDataProvider(spec, null, mockCombinedChainDataClient);
    when(mockCombinedChainDataClient.isStoreAvailable()).thenReturn(false);
    assertThatThrownBy(provider::getGenesisData).isInstanceOf(ChainDataUnavailableException.class);
  }
",non-flaky,5
199,apache_shardingsphere-elasticjob,b022898ef1b8c984e17efb2a422ee45f6b13e46e.assertGetCurrentShardingTotalCountIfNull,"@Test
public void assertGetCurrentShardingTotalCountIfNull() {
    assertThat(JobRegistry.getInstance().getCurrentShardingTotalCount(""exist_job_instance""), is(0));
}",test order dependency,4
19439,eclipse_xtext-core,TypeHierarchyHelperTest.testSimpeCase02,"	@Test
	public void testSimpeCase02() throws Exception {
		// no uplift for less than two children
		EClassInfo a = addClass(""a"");
		EClassInfo b = addClass(""b"");
		b.addSupertype(a);
		addAttribute(b, INT, ""f1"");

		assertEquals(0, a.getEClass().getEStructuralFeatures().size());
		assertEquals(1, b.getEClass().getEStructuralFeatures().size());

		liftUpFeatures();

		assertEquals(0, a.getEClass().getEStructuralFeatures().size());
		assertEquals(1, b.getEClass().getEStructuralFeatures().size());
	}
",non-flaky,5
177244,line_armeria,DnsAddressEndpointGroupTest.ipV6Only,"    @Test
    public void ipV6Only() throws Exception {
        try (TestDnsServer server = new TestDnsServer(ImmutableMap.of(
                new DefaultDnsQuestion(""bar.com."", A),
                new DefaultDnsResponse(0).addRecord(ANSWER, newAddressRecord(""bar.com."", ""1.1.1.1"")),
                new DefaultDnsQuestion(""bar.com."", AAAA),
                new DefaultDnsResponse(0).addRecord(ANSWER, newAddressRecord(""bar.com."", ""::1""))
                                         .addRecord(ANSWER, newAddressRecord(""bar.com."", ""::1234:5678:90ab""))
                                         .addRecord(ANSWER, newAddressRecord(""bar.com."",
                                                                             ""2404:6800:4004:806::2013""))
        ))) {
            try (DnsAddressEndpointGroup group =
                         DnsAddressEndpointGroup.builder(""bar.com"")
                                                .port(8080)
                                                .serverAddresses(server.addr())
                                                .resolvedAddressTypes(ResolvedAddressTypes.IPV6_ONLY)
                                                .build()) {

                assertThat(group.whenReady().get(10, TimeUnit.SECONDS)).containsExactly(
                        Endpoint.of(""bar.com"", 8080).withIpAddr(""2404:6800:4004:806::2013""),
                        Endpoint.of(""bar.com"", 8080).withIpAddr(""::1""),
                        Endpoint.of(""bar.com"", 8080).withIpAddr(""::1234:5678:90ab""));
            }
        }
    }
",non-flaky,5
177252,line_armeria,DnsAddressEndpointGroupTest.backoffOnEmptyResponse,"    @Test
    public void backoffOnEmptyResponse() throws Exception {
        try (TestDnsServer server = new TestDnsServer(ImmutableMap.of(
                // Respond with empty records.
                new DefaultDnsQuestion(""empty.com."", A), new DefaultDnsResponse(0),
                new DefaultDnsQuestion(""empty.com."", AAAA), new DefaultDnsResponse(0)
        ))) {
            try (DnsAddressEndpointGroup group =
                         DnsAddressEndpointGroup.builder(""empty.com"")
                                                .serverAddresses(server.addr())
                                                .resolvedAddressTypes(ResolvedAddressTypes.IPV4_PREFERRED)
                                                .backoff(Backoff.fixed(500))
                                                .build()) {

                await().untilAsserted(() -> assertThat(group.attemptsSoFar).isGreaterThan(2));
                assertThat(group.endpoints()).isEmpty();

                // Start to respond correctly.
                server.setResponses(ImmutableMap.of(
                        new DefaultDnsQuestion(""empty.com."", A),
                        new DefaultDnsResponse(0)
                                .addRecord(ANSWER, newAddressRecord(""empty.com"", ""1.1.1.1"", 1)),
                        new DefaultDnsQuestion(""empty.com."", AAAA),
                        new DefaultDnsResponse(0)
                                .addRecord(ANSWER, newAddressRecord(""empty.com"", ""::1"", 1))));

                await().untilAsserted(() -> assertThat(group.endpoints()).containsExactly(
                        Endpoint.of(""empty.com"").withIpAddr(""1.1.1.1""),
                        Endpoint.of(""empty.com"").withIpAddr(""::1"")));
            }
        }
    }
",non-flaky,5
98624,nutzam_nutz,El2Test.test_el_issue1185,"    @Test(timeout=5000, expected=Exception.class)
    public void test_el_issue1185() {
        Context context = Lang.context();
        El.eval(context, ""a.b)*0.30"");
    }
",non-flaky,5
70862,apache_kafka,TransformationConfigTest.testEmbeddedConfigValueToKey,"    @Test
    public void testEmbeddedConfigValueToKey() {
        // Validate that we can construct a Connector config containing the extended config for the transform
        HashMap<String, String> connProps = new HashMap<>();
        connProps.put(""name"", ""foo"");
        connProps.put(""connector.class"", MockConnector.class.getName());
        connProps.put(""transforms"", ""example"");
        connProps.put(""transforms.example.type"", ValueToKey.class.getName());
        connProps.put(""transforms.example.fields"", ""field"");

        Plugins plugins = null; // Safe when we're only constructing the config
        new ConnectorConfig(plugins, connProps);
    }
",non-flaky,5
30988,camunda-cloud_zeebe,ObjectMappingTest.shouldNotDeserializePOJOWithWrongValueType,"  @Test
  public void shouldNotDeserializePOJOWithWrongValueType() {
    // given
    final POJO pojo = new POJO();

    final DirectBuffer buffer =
        encodeMsgPack(
            (w) -> {
              w.writeMapHeader(1);

              w.writeString(wrapString(""stringProp""));
              w.writeFloat(123123.123123d);
            });

    // then
    exception.expect(RuntimeException.class);
    exception.expectMessage(
        ""Could not deserialize object [POJO]. Deserialization stuck at offset 13"");

    // when
    pojo.wrap(buffer);
  }
",non-flaky,5
156425,apache_commons-lang,GmtTimeZoneTest.inDaylightTime,"    @Test
    public void inDaylightTime() {
        assertFalse(new GmtTimeZone(false, 0, 0).useDaylightTime());
    }
",non-flaky,5
162682,OpenAPITools_openapi-generator,UserApiTest.deleteUserTest,"    @Test
    public void deleteUserTest() {
        String username = null;
        //api.deleteUser(username);
        
        // TODO: test validations
        
        
    }
",non-flaky,5
134991,undertow-io_undertow,AnnotatedEndpointTest.testAnnotatedClientEndpoint,"    @Test
    public void testAnnotatedClientEndpoint() throws Exception {
        AnnotatedClientEndpoint.reset();
        Session session = deployment.connectToServer(AnnotatedClientEndpoint.class, new URI(""ws://"" + DefaultServer.getHostAddress(""default"") + "":"" + DefaultServer.getHostPort(""default"") + ""/ws/chat/Bob""));

        Assert.assertEquals(""hi Bob (protocol=foo)"", AnnotatedClientEndpoint.message());

        session.close();
        Assert.assertEquals(""CLOSED"", AnnotatedClientEndpoint.message());
    }
",non-flaky,5
178,salesforce_reactive-grpc,ChainedCallIntegrationTest.servicesCanCallOtherServices,"@Test
public void servicesCanCallOtherServices() throws InterruptedException {
    ReactorGreeterGrpc.ReactorGreeterStub stub = ReactorGreeterGrpc.newReactorStub(channel);
    Mono<String> chain =
    Mono.just(request(""X"")).compose(stub::sayHello).map(ChainedCallIntegrationTest::bridge).doOnSuccess(System.out::println).as(stub::sayHelloRespStream).map(ChainedCallIntegrationTest::bridge).doOnNext(System.out::println).compose(stub::sayHelloBothStream).map(ChainedCallIntegrationTest::bridge).doOnNext(System.out::println).as(stub::sayHelloReqStream).map(ChainedCallIntegrationTest::bridge).doOnSuccess(System.out::println).compose(stub::sayHello).map(HelloResponse::getMessage).doOnSuccess(System.out::println);
    StepVerifier.create(chain).expectNext(""[<{[X]}> :: </[X]/> :: <\\[X]\\> :: <([X])>]"").expectComplete().verify(Duration.ofSeconds(2));
}",concurrency,1
162678,OpenAPITools_openapi-generator,PetApiTest.uploadFileTest,"    @Test
    public void uploadFileTest() {
        Long petId = null;
        String additionalMetadata = null;
        org.apache.cxf.jaxrs.ext.multipart.Attachment file = null;
        //ModelApiResponse response = api.uploadFile(petId, additionalMetadata, file);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
",non-flaky,5
53197,cloudfoundry_uaa,TotpMfaEndpointIntegrationTests.testMfaVerifyPageWithoutLoggingIn,"    @Test
    public void testMfaVerifyPageWithoutLoggingIn() {
        webDriver.get(zoneUrl + ""/logout.do"");
        webDriver.get(zoneUrl + ""/login/mfa/verify"");
        assertEquals(zoneUrl + ""/login"", webDriver.getCurrentUrl());
    }
",non-flaky,5
135054,undertow-io_undertow,NetworkUtilsAddressParsingTestCase.testIpV6Hostname2,"    @Test(expected = IOException.class)
    public void testIpV6Hostname2() throws IOException {
        NetworkUtils.parseIpv6Address(""ff"");
    }
",non-flaky,5
156410,apache_commons-lang,FastDateFormatTest.testTimeDefaults,"    @Test
    public void testTimeDefaults() {
        assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, Locale.CANADA),
                FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA));

        assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone(""America/New_York"")),
                FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone(""America/New_York""), Locale.getDefault()));

        assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG),
                FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault()));
    }
",non-flaky,5
33894,apache_camel,FhirReadIT.testResourceByLongIdAndStringResource,"    @Test
    public void testResourceByLongIdAndStringResource() throws Exception {
        final Map<String, Object> headers = new HashMap<>();
        // parameter type is Class
        headers.put(""CamelFhir.resource"", Patient.class);
        // parameter type is Long
        headers.put(""CamelFhir.longId"", Long.valueOf(patient.getIdElement().getIdPart()));

        Patient result = requestBodyAndHeaders(""direct://RESOURCE_BY_LONG_ID_AND_STRING_RESOURCE"", null, headers);

        assertValidResponse(result);
    }
",non-flaky,5
98018,vert-x3_vertx-mongo-client,MongoClientWithObjectIdTest.testInsertAlreadyExists,"  @Test
  public void testInsertAlreadyExists() throws Exception {
    String collection = randomCollection();
    mongoClient.createCollection(collection, onSuccess(res -> {
      JsonObject doc = createDoc();
      mongoClient.insert(collection, doc, onSuccess(id -> {
        assertNotNull(id);
        doc.put(""_id"", id);
        mongoClient.insert(collection, doc, response -> {
          assertFalse(response.succeeded());
          testComplete();
        });
      }));
    }));
    await();
  }
",non-flaky,5
94613,square_okhttp,URLConnectionTest.createSocket,"  @Test public void contentDisagreesWithContentLengthHeaderBodyTooShort() throws IOException {
  public void testConnectViaSocketFactory(boolean useHttps) throws IOException {
    SocketFactory uselessSocketFactory = new SocketFactory() {
      public Socket createSocket() {
        throw new IllegalArgumentException(""useless"");
      }
",non-flaky,5
95738,togglz_togglz,JDBCRepositoryAutoCommitTest.shouldUpdateWithAutoCommitDisabled,"    @Test
    public void shouldUpdateWithAutoCommitDisabled() {
        givenSomeDataSourceWithAutoCommitSetTo(false);
        whenTheFeatureIsEnabled();
        thenTheDatabaseShouldBeUpdated();
    }
",non-flaky,5
122639,vespa-engine_vespa,YumTest.testAlreadyUpgraded,"    @Test
    public void testAlreadyUpgraded() {
        terminal.expectCommand(
                ""yum upgrade --assumeyes --setopt skip_missing_names_on_update=False package-1 package-2 2>&1"",
                0,
                ""foobar\nNo packages marked for update\n"");

        assertFalse(yum
                .upgrade(""package-1"", ""package-2"")
                .converge(taskContext));
    }
",non-flaky,5
156072,jReddit_jReddit,RedditOAuthAgentTest.testTokenAppOnlyOAuthSystemException,"    @Test(expected=RedditOAuthException.class)
    public void testTokenAppOnlyOAuthSystemException() throws OAuthSystemException, OAuthProblemException, RedditOAuthException {
        when(mockOAuthClient.accessToken(any(OAuthClientRequest.class))).thenThrow(new OAuthSystemException());
        subject.tokenAppOnly(false);
    }
",non-flaky,5
113711,salesforce_reactive-grpc,BackpressureIntegrationTest.clientToServerBackpressure,"    @Test
    public void clientToServerBackpressure() {
        serverRule.getServiceRegistry().addService(new TestService());

        ReactorNumbersGrpc.ReactorNumbersStub stub = ReactorNumbersGrpc.newReactorStub(serverRule.getChannel());

        Flux<NumberProto.Number> reactorRequest = Flux
                .fromIterable(IntStream.range(0, NUMBER_OF_STREAM_ELEMENTS)::iterator)
                .doOnNext(i -> System.out.println(i + "" --> ""))
                .doOnNext(i -> updateNumberOfWaits(lastValueTime, numberOfWaits))
                .map(BackpressureIntegrationTest::protoNum);

        Mono<NumberProto.Number> reactorResponse = reactorRequest.as(stub::requestPressure);

        StepVerifier.create(reactorResponse)
                .expectNextMatches(v -> v.getNumber(0) == NUMBER_OF_STREAM_ELEMENTS - 1)
                .expectComplete()
                .verify(Duration.ofSeconds(5));

        assertThat(numberOfWaits.get()).isEqualTo(1);
    }
",non-flaky,5
60953,apache_druid,RowBucketIterableTest.testApplyLastDayNoRows,"  @Test
  public void testApplyLastDayNoRows()
  {
    intervals = new ArrayList<>();
    intervals.add(INTERVAL_JAN_1_4);

    List<Row> expectedDay1 = Arrays.asList(JAN_1_M_10, JAN_1_F_20);
    List<Row> expectedDay2 = Collections.singletonList(JAN_2_M_10);
    List<Row> expectedDay3 = Collections.singletonList(JAN_3_F_20);
    List<Row> expectedDay4 = Collections.emptyList();

    rows = new ArrayList<>();
    rows.add(JAN_1_M_10);
    rows.add(JAN_1_F_20);
    rows.add(JAN_2_M_10);
    rows.add(JAN_3_F_20);

    Sequence<Row> seq = Sequences.simple(rows);
    RowBucketIterable rbi = new RowBucketIterable(seq, intervals, ONE_DAY);
    Iterator<RowBucket> iter = rbi.iterator();

    RowBucket actual = iter.next();
    Assert.assertEquals(expectedDay1, actual.getRows());

    actual = iter.next();
    Assert.assertEquals(expectedDay2, actual.getRows());

    actual = iter.next();
    Assert.assertEquals(expectedDay3, actual.getRows());

    actual = iter.next();
    Assert.assertEquals(JAN_4, actual.getDateTime());
    Assert.assertEquals(expectedDay4, actual.getRows());
  }
",non-flaky,5
70797,apache_kafka,PluginUtilsTest.testConnectFrameworkClasses,"    @Test
    public void testConnectFrameworkClasses() {
        assertFalse(PluginUtils.shouldLoadInIsolation(""org.apache.kafka.common.""));
        assertFalse(PluginUtils.shouldLoadInIsolation(
                ""org.apache.kafka.common.config.AbstractConfig"")
        );
        assertFalse(PluginUtils.shouldLoadInIsolation(
                ""org.apache.kafka.common.config.ConfigDef$Type"")
        );
        assertFalse(PluginUtils.shouldLoadInIsolation(
                ""org.apache.kafka.common.serialization.Deserializer"")
        );
        assertFalse(PluginUtils.shouldLoadInIsolation(""org.apache.kafka.connect.""));
        assertFalse(PluginUtils.shouldLoadInIsolation(
                ""org.apache.kafka.connect.connector.Connector"")
        );
        assertFalse(PluginUtils.shouldLoadInIsolation(
                ""org.apache.kafka.connect.source.SourceConnector"")
        );
        assertFalse(PluginUtils.shouldLoadInIsolation(
                ""org.apache.kafka.connect.sink.SinkConnector"")
        );
        assertFalse(PluginUtils.shouldLoadInIsolation(""org.apache.kafka.connect.connector.Task""));
        assertFalse(PluginUtils.shouldLoadInIsolation(
                ""org.apache.kafka.connect.source.SourceTask"")
        );
        assertFalse(PluginUtils.shouldLoadInIsolation(""org.apache.kafka.connect.sink.SinkTask""));
        assertFalse(PluginUtils.shouldLoadInIsolation(
                ""org.apache.kafka.connect.transforms.Transformation"")
        );
        assertFalse(PluginUtils.shouldLoadInIsolation(
                ""org.apache.kafka.connect.storage.Converter"")
        );
        assertFalse(PluginUtils.shouldLoadInIsolation(
                ""org.apache.kafka.connect.storage.OffsetBackingStore"")
        );
        assertFalse(PluginUtils.shouldLoadInIsolation(
                ""org.apache.kafka.clients.producer.ProducerConfig"")
        );
        assertFalse(PluginUtils.shouldLoadInIsolation(
                ""org.apache.kafka.clients.consumer.ConsumerConfig"")
        );
        assertFalse(PluginUtils.shouldLoadInIsolation(
                ""org.apache.kafka.clients.admin.KafkaAdminClient"")
        );
        assertFalse(PluginUtils.shouldLoadInIsolation(
                ""org.apache.kafka.connect.rest.ConnectRestExtension"")
        );
    }
",non-flaky,5
156158,soot-oss_soot,DeadAssignmentEliminatorTest.keepEssentialCast,"  @Test
  public void keepEssentialCast() {
    // create test method and body
    SootClass cl = new SootClass(""TestClass"", Modifier.PUBLIC);
    SootMethod method = new SootMethod(""testMethod"", Collections.singletonList(RefType.v(""java.lang.Object"")),
        ArrayType.v(IntType.v(), 1), Modifier.PUBLIC);
    cl.addMethod(method);
    JimpleBody body = Jimple.v().newBody(method);
    method.setActiveBody(body);

    // create locals
    Chain<Local> locals = body.getLocals();
    Local a = Jimple.v().newLocal(""a"", IntType.v());
    locals.add(a);
    Local b = Jimple.v().newLocal(""b"", IntType.v());
    locals.add(b);
    Local c = Jimple.v().newLocal(""c"", IntType.v());
    locals.add(c);
    Local d = Jimple.v().newLocal(""d"", IntType.v());
    locals.add(d);

    // create code
    UnitPatchingChain units = body.getUnits();
    Unit identity0 = Jimple.v().newIdentityStmt(a, Jimple.v().newParameterRef(RefType.v(""java.lang.Object""), 0));
    units.add(identity0);
    Unit cast0 = Jimple.v().newAssignStmt(b, Jimple.v().newCastExpr(a, ArrayType.v(IntType.v(), 1)));
    units.add(cast0);
    Unit cast1 = Jimple.v().newAssignStmt(c, Jimple.v().newCastExpr(a, RefType.v(""java.lang.Number"")));
    units.add(cast1);
    Unit cast2 = Jimple.v().newAssignStmt(d, Jimple.v().newCastExpr(NullConstant.v(), RefType.v(""java.lang.Number"")));
    units.add(cast2);
    Unit ret = Jimple.v().newReturnStmt(b);
    units.add(ret);

    // execute transform
    DeadAssignmentEliminator.v().internalTransform(body, ""testPhase"", Collections.emptyMap());

    // check resulting code (cast should be removed)
    Iterator<Unit> it = units.iterator();
    assertEquals(identity0, it.next());
    assertEquals(cast0, it.next());
    assertEquals(cast1, it.next());
    assertEquals(ret, it.next());
    assertEquals(4, units.size());
  }
",non-flaky,5
60924,apache_druid,BaseAveragerFactoryTest.testFinalization,"  @Test
  public void testFinalization()
  {
    Long input = 5L;
    Assert.assertEquals(input, fac.finalizeComputation(input));
  }
",non-flaky,5
20913,NationalSecurityAgency_timely,MetricHistogramTest.testMax,"    @Test
    public void testMax() throws Exception {
        Assert.assertEquals(100.0D, m.max(), 0.0D);
    }
",non-flaky,5
94696,square_okhttp,JavaApiConverterTest.getBody,"  @Test public void createOkResponseForCacheGet_withMissingStatusLine() throws Exception {
      @Override public InputStream getBody() throws IOException {
        return null; // Should never be called
      }
",non-flaky,5
21002,NationalSecurityAgency_timely,DownsampleIteratorTest.simpleTestDownsampling,"    @Test
    public void simpleTestDownsampling() throws Exception {
        DownsampleIterator iter = new DownsampleIterator();
        Map<Set<Tag>, Downsample> samples = runQuery(iter, testData2, 200, -1);
        assertEquals(2, samples.size());
        for (Tag tag : new Tag[] { new Tag(""host"", ""host1""), new Tag(""host"", ""host2"") }) {
            Downsample dsample = samples.get(Collections.singleton(tag));
            assertNotNull(dsample);
            long ts = 0;
            double value = .2;
            if (tag.getValue().equals(""host2"")) {
                value = .5;
            }
            int count = 0;
            for (Sample sample : dsample) {
                assertEquals(ts, sample.timestamp);
                ts += 200;
                assertEquals(value, sample.value, 0.0001);
                count++;
            }
            assertEquals(5, count);
        }
    }
",non-flaky,5
98082,vert-x3_vertx-mongo-client,WriteConcernParserTest.testSimpleAndAdvancedWriteConcern,"  @Test
  public void testSimpleAndAdvancedWriteConcern() {
    WriteConcern expected = WriteConcern.JOURNALED;
    JsonObject config = new JsonObject();
    config.put(""w"", ""majority"");
    config.put(""wtimeoutMS"", 1);
    config.put(""j"", true);
    // this overwrites the other options
    config.put(""writeConcern"", ""journaled"");

    WriteConcern wc = new WriteConcernParser(null, config).writeConcern();
    assertNotNull(wc);
    assertEquals(expected, wc);
  }
",non-flaky,5
156375,apache_commons-lang,ClassPathUtilsTest.testConstructor,"    @Test
    public void testConstructor() {
        assertNotNull(new ClassPathUtils());
        final Constructor<?>[] cons = ClassPathUtils.class.getDeclaredConstructors();
        assertEquals(1, cons.length);
        assertTrue(Modifier.isPublic(cons[0].getModifiers()));
        assertTrue(Modifier.isPublic(ClassPathUtils.class.getModifiers()));
        assertFalse(Modifier.isFinal(ClassPathUtils.class.getModifiers()));
    }
",non-flaky,5
59591,looly_hutool,QrCodeUtilTest.decodeTest,"	@Test
	public void decodeTest() {
		String decode = QrCodeUtil.decode(FileUtil.file(""e:/pic/qr.png""));
		Console.log(decode);
	}
",non-flaky,5
94693,square_okhttp,ResponseCacheTest.get,"  @Test public void responseCacheReturnsNullStatusLine() throws Exception {
      public CacheResponse get(URI uri, String requestMethod,
          Map<String, List<String>> requestHeaders)
",non-flaky,5
91459,strapdata_elassandra,RelocationIT.testIndexAndRelocateConcurrently,"    @TestLogging(
    public void testIndexAndRelocateConcurrently() throws ExecutionException, InterruptedException {
        int halfNodes = randomIntBetween(1, 3);
        Settings[] nodeSettings = Stream.concat(
            Stream.generate(() -> Settings.builder().put(""node.attr.color"", ""blue"").build()).limit(halfNodes),
            Stream.generate(() -> Settings.builder().put(""node.attr.color"", ""red"").build()).limit(halfNodes)
            ).toArray(Settings[]::new);
        List<String> nodes = internalCluster().startNodes(nodeSettings);
        String[] blueNodes = nodes.subList(0, halfNodes).stream().toArray(String[]::new);
        String[] redNodes = nodes.subList(halfNodes, nodes.size()).stream().toArray(String[]::new);
        logger.info(""blue nodes: {}"", (Object)blueNodes);
        logger.info(""red nodes: {}"", (Object)redNodes);
        ensureStableCluster(halfNodes * 2);

        final Settings.Builder settings = Settings.builder()
                .put(""index.routing.allocation.exclude.color"", ""blue"")
                .put(indexSettings())
                .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, randomInt(halfNodes - 1))
                .put(IndexService.GLOBAL_CHECKPOINT_SYNC_INTERVAL_SETTING.getKey(), ""100ms"");
        assertAcked(prepareCreate(""test"", settings));
        assertAllShardsOnNodes(""test"", redNodes);
        int numDocs = randomIntBetween(100, 150);
        ArrayList<String> ids = new ArrayList<>();
        logger.info("" --> indexing [{}] docs"", numDocs);
        IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs];
        for (int i = 0; i < numDocs; i++) {
            String id = randomRealisticUnicodeOfLength(10) + String.valueOf(i);
            ids.add(id);
            docs[i] = client().prepareIndex(""test"", ""type1"", id).setSource(""field1"", English.intToEnglish(i));
        }
        indexRandom(true, docs);
        SearchResponse countResponse = client().prepareSearch(""test"").get();
        assertHitCount(countResponse, numDocs);

        logger.info("" --> moving index to new nodes"");
        Settings build = Settings.builder().put(""index.routing.allocation.exclude.color"", ""red"")
            .put(""index.routing.allocation.include.color"", ""blue"").build();
        client().admin().indices().prepareUpdateSettings(""test"").setSettings(build).execute().actionGet();

        // index while relocating
        logger.info("" --> indexing [{}] more docs"", numDocs);
        for (int i = 0; i < numDocs; i++) {
            String id = randomRealisticUnicodeOfLength(10) + String.valueOf(numDocs + i);
            ids.add(id);
            docs[i] = client().prepareIndex(""test"", ""type1"", id).setSource(""field1"", English.intToEnglish(numDocs + i));
        }
        indexRandom(true, docs);
        numDocs *= 2;

        logger.info("" --> waiting for relocation to complete"");
        ensureGreen(""test""); // move all shards to the new nodes (it waits on relocation)

        final int numIters = randomIntBetween(10, 20);
        for (int i = 0; i < numIters; i++) {
            logger.info("" --> checking iteration {}"", i);
            SearchResponse afterRelocation = client().prepareSearch().setSize(ids.size()).get();
            assertNoFailures(afterRelocation);
            assertSearchHits(afterRelocation, ids.toArray(new String[ids.size()]));
        }

    }
",non-flaky,5
43079,trinodb_trino,BaseConnectorTest.testRowLevelDelete,"    @Test
    public void testRowLevelDelete()
    {
        skipTestUnless(hasBehavior(SUPPORTS_CREATE_TABLE) && hasBehavior(SUPPORTS_ROW_LEVEL_DELETE));
        // TODO (https://github.com/trinodb/trino/issues/5901) Use longer table name once Oracle version is updated
        try (TestTable table = new TestTable(getQueryRunner()::execute, ""test_row_delete"", ""AS SELECT * FROM region"")) {
            assertUpdate(""DELETE FROM "" + table.getName() + "" WHERE regionkey = 2"", 1);
            assertQuery(""SELECT count(*) FROM "" + table.getName(), ""VALUES 4"");
        }
    }
",non-flaky,5
133894,julianghionoiu_dpnt-coverage,EventSupportTest.correctly_create_sns_event,"    @Test
    public void correctly_create_sns_event() throws JsonProcessingException {
        SNSEvent snsEvent = new SNSEvent(""{ \""key\"": \""value\"" }"");

        String output = objectMapper.writeValueAsString(snsEvent.asJsonNode());

        assertThat(output, equalTo(""{\""Records\"":[{\""Sns\"":"" +
                ""{\""Message\"":\""{ \\\""key\\\"": \\\""value\\\"" }\""}}"" +
                ""]}""));
    }
",non-flaky,5
309,apache_kafka,testForceMetadataRefreshForPatternSubscriptionDuringRebalance,"@Test
public void testForceMetadataRefreshForPatternSubscriptionDuringRebalance() {
    final String consumerId = ""consumer"";
    subscriptions.subscribe(Pattern.compile("".*""), rebalanceListener);
    client.updateMetadata(TestUtils.metadataUpdateWith(1, singletonMap(topic1, 1)));
    assertEquals(singleton(topic1), subscriptions.subscription());
    client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));
    coordinator.ensureCoordinatorReady(time.timer(Long.MAX_VALUE));
    client.prepareMetadataUpdate(metadataResponse);
    client.prepareResponse(joinGroupFollowerResponse(1, consumerId, ""leader"", Errors.NONE));
    client.prepareResponse(new MockClient.RequestMatcher() {
        @Override
        public boolean matches(AbstractRequest body) {
            SyncGroupRequest sync = (SyncGroupRequest) body;
            return sync.memberId().equals(consumerId) &&
            sync.generationId() == 1 &&
            sync.groupAssignment().isEmpty();
        }
    }, syncGroupResponse(singletonList(t1p), Errors.NONE));
    partitionAssignor.prepare(singletonMap(consumerId, singletonList(t1p)));
    coordinator.poll(time.timer(Long.MAX_VALUE));
    final Set<String> updatedSubscriptionSet = new HashSet<>(Arrays.asList(topic1, topic2));
    assertEquals(updatedSubscriptionSet, subscriptions.subscription());
    metadata.requestUpdate();
    client.poll(Long.MAX_VALUE, time.milliseconds());
    assertFalse(coordinator.rejoinNeededOrPending());
}",concurrency,1
113712,salesforce_reactive-grpc,BackpressureIntegrationTest.serverToClientBackpressure,"    @Test
    public void serverToClientBackpressure() {
        serverRule.getServiceRegistry().addService(new TestService());

        ReactorNumbersGrpc.ReactorNumbersStub stub = ReactorNumbersGrpc.newReactorStub(serverRule.getChannel());

        Mono<Empty> reactorRequest = Mono.just(Empty.getDefaultInstance());

        Flux<NumberProto.Number> reactorResponse = reactorRequest.as(stub::responsePressure)
                .doOnNext(n -> System.out.println(n.getNumber(0) + ""  <--""))
                .doOnNext(n -> waitIfValuesAreEqual(n.getNumber(0), 3));

        StepVerifier.create(reactorResponse)
                .expectNextCount(NUMBER_OF_STREAM_ELEMENTS)
                .expectComplete()
                .verify(Duration.ofSeconds(5));

        assertThat(numberOfWaits.get()).isEqualTo(1);
    }
",non-flaky,5
110129,Wikidata_wikidata-toolkit,ClientConfigurationTest.testReadConfigFile2,"	@Test
	public void testReadConfigFile2() throws IOException {
		String configFile = ""src/test/resources/testConf2.ini"";
		String[] args = new String[] { ""-c"", configFile };
		ClientConfiguration config = new ClientConfiguration(args);

		assertFalse(config.getOfflineMode());
		assertFalse(config.isQuiet());
		assertEquals(""testfile.json.gz"", config.getInputDumpLocation());
		assertEquals(""report.txt"", config.getReportFileName());
		// remaining content was already tested above
	}
",non-flaky,5
33837,apache_camel,FileCopyExample.testCopyFileOverIronMQ,"    @Test
    public void testCopyFileOverIronMQ() throws Exception {
        getMockEndpoint(""mock:result"").expectedMessageCount(1);
        assertMockEndpointsSatisfied();
        assertFileExists(""target/out/test.txt"");
    }
",non-flaky,5
94615,square_okhttp,URLConnectionTest.intercept,"  @Test public void interceptorsNotInvoked() throws Exception {
      @Override public Response intercept(Chain chain) throws IOException {
        throw new AssertionError();
      }
",non-flaky,5
175785,GoogleCloudPlatform_google-cloud-eclipse,AppYamlValidatorTest.testValidateRuntime_customRuntime,"  @Test
  public void testValidateRuntime_customRuntime() throws IOException {
    File appYaml = createAppYamlFile(tempFolder.getRoot().toString(), ""runtime: custom"");
    IStatus result = AppYamlValidator.validateRuntime(appYaml);
    assertEquals(IStatus.ERROR, result.getSeverity());
    assertEquals(""\""runtime: custom\"" is not yet supported by Cloud Tools for Eclipse."",
        result.getMessage());
  }
",non-flaky,5
98612,nutzam_nutz,El2Test.testIssue303,"    @Test
    public void testIssue303() {
        Context context = Lang.context();
        Issue303 item = new Issue303(""item"");
        item.child = new Issue303(""child"");
        context.set(""item"", item);

        assertEquals(""child"", El.eval(context, ""item.child.getName()""));
        assertEquals(0, El.eval(context, ""item.list.size()""));
    }
",non-flaky,5
135066,undertow-io_undertow,URLUtilsTestCase.testIsAbsoluteUrlRecognizingRelativeUrls,"    @Test
    public void testIsAbsoluteUrlRecognizingRelativeUrls() {
        assertFalse(URLUtils.isAbsoluteUrl(""relative""));
        assertFalse(URLUtils.isAbsoluteUrl(""relative/path""));
        assertFalse(URLUtils.isAbsoluteUrl(""relative/path?query=val""));
        assertFalse(URLUtils.isAbsoluteUrl(""/root/relative/path""));
    }
",non-flaky,5
177994,aosp-mirror_platform_frameworks_support,GuidedStepFragmentTest.answer,"    @Test
    public void restoreFragments() throws Throwable {
        final String firstFragmentName = generateMethodTestName(""first"");
        final String secondFragmentName = generateMethodTestName(""second"");
        GuidedStepTestFragment.Provider first = mockProvider(firstFragmentName);
        doAnswer(new Answer<Void>() {
            public Void answer(InvocationOnMock invocation) {
                List actions = (List) invocation.getArguments()[0];
                actions.add(new GuidedAction.Builder().id(1000).title(""OK"").build());
                actions.add(new GuidedAction.Builder().id(1001).editable(true).title(""text"")
                        .build());
                actions.add(new GuidedAction.Builder().id(1002).editable(true).title(""text"")
                        .autoSaveRestoreEnabled(false).build());
                return null;
            }
",non-flaky,5
170526,eclipse_jetty.project,TestAnnotationConfiguration.testDiscoveredFalseWithSCIs,"    @Test
    public void testDiscoveredFalseWithSCIs() throws Exception
    {
        ClassLoader old = Thread.currentThread().getContextClassLoader();
        Thread.currentThread().setContextClassLoader(webAppLoader);
        try
        {
            //test 2.5 webapp with configurationDiscovered=false loads only server scis
            AnnotationConfiguration config = new AnnotationConfiguration();
            WebAppContext context = new WebAppContext();
            List<ServletContainerInitializer> scis;
            context.setConfigurationDiscovered(false);
            context.setClassLoader(webAppLoader);
            context.getMetaData().setWebDescriptor(new WebDescriptor(Resource.newResource(web25)));
            context.getMetaData().setWebInfClassesResources(classes);
            context.getMetaData().addWebInfResource(Resource.newResource(testSciJar.toURI().toURL()));
            context.getServletContext().setEffectiveMajorVersion(2);
            context.getServletContext().setEffectiveMinorVersion(5);
            scis = config.getNonExcludedInitializers(context);
            assertNotNull(scis);
            for (ServletContainerInitializer s : scis)
            {
                //should not have any of the web-inf lib scis in here
                assertFalse(s.getClass().getName().equals(""com.acme.ordering.AcmeServletContainerInitializer""));
                assertFalse(s.getClass().getName().equals(""com.acme.initializer.FooInitializer""));
                //NOTE: should also not have the web-inf classes scis in here either, but due to the
                //way the test is set up, the sci we're pretending is in web-inf classes will actually
                //NOT be loaded by the webapp's classloader, but rather by the junit classloader, so
                //it looks as if it is a container class.
            }
        }
        finally
        {
            Thread.currentThread().setContextClassLoader(old);
        }
    }
",non-flaky,5
43101,trinodb_trino,AbstractTestIntegrationSmokeTest.testExplainAnalyze,"    @Test
    public void testExplainAnalyze()
    {
        assertExplainAnalyze(""EXPLAIN ANALYZE SELECT * FROM orders"");
        assertExplainAnalyze(""EXPLAIN ANALYZE SELECT count(*), clerk FROM orders GROUP BY clerk"");
        assertExplainAnalyze(
                ""EXPLAIN ANALYZE SELECT x + y FROM ("" +
                        ""   SELECT orderdate, COUNT(*) x FROM orders GROUP BY orderdate) a JOIN ("" +
                        ""   SELECT orderdate, COUNT(*) y FROM orders GROUP BY orderdate) b ON a.orderdate = b.orderdate"");
        assertExplainAnalyze(""EXPLAIN ANALYZE SELECT count(*), clerk FROM orders GROUP BY clerk UNION ALL SELECT sum(orderkey), clerk FROM orders GROUP BY clerk"");

        assertExplainAnalyze(""EXPLAIN ANALYZE SHOW COLUMNS FROM orders"");
        assertExplainAnalyze(""EXPLAIN ANALYZE EXPLAIN SELECT count(*) FROM orders"");
        assertExplainAnalyze(""EXPLAIN ANALYZE EXPLAIN ANALYZE SELECT count(*) FROM orders"");
        assertExplainAnalyze(""EXPLAIN ANALYZE SHOW FUNCTIONS"");
        assertExplainAnalyze(""EXPLAIN ANALYZE SHOW TABLES"");
        assertExplainAnalyze(""EXPLAIN ANALYZE SHOW SCHEMAS"");
        assertExplainAnalyze(""EXPLAIN ANALYZE SHOW CATALOGS"");
        assertExplainAnalyze(""EXPLAIN ANALYZE SHOW SESSION"");
    }
",non-flaky,5
98306,spotify_docker-client,ImageRefTest.testImageWithoutTag,"  @Test
  public void testImageWithoutTag() {
    final ImageRef sut = new ImageRef(""foobar"");
    assertThat(sut.getImage(), equalTo(""foobar""));
    assertThat(sut.getTag(), is(nullValue()));
  }
",non-flaky,5
135006,undertow-io_undertow,JsrWebSocketServer07Test.testErrorHandling,"    @Test
    public void testErrorHandling() throws Exception {


        ServerWebSocketContainer builder = new ServerWebSocketContainer(TestClassIntrospector.INSTANCE, DefaultServer.getWorker(), DefaultServer.getBufferPool(), Collections.EMPTY_LIST, false, false);

        builder.addEndpoint(ServerEndpointConfig.Builder.create(ProgramaticErrorEndpoint.class, ""/"").configurator(new InstanceConfigurator(new ProgramaticErrorEndpoint())).build());
        deployServlet(builder);

        AnnotatedClientEndpoint c = new AnnotatedClientEndpoint();

        Session session = ContainerProvider.getWebSocketContainer().connectToServer(c, new URI(""ws://"" + DefaultServer.getHostAddress(""default"") + "":"" + DefaultServer.getHostPort(""default"") + ""/""));
        Assert.assertEquals(""hi"", ProgramaticErrorEndpoint.getMessage());
        session.getAsyncRemote().sendText(""app-error"");
        Assert.assertEquals(""app-error"", ProgramaticErrorEndpoint.getMessage());
        Assert.assertEquals(""ERROR: java.lang.RuntimeException"", ProgramaticErrorEndpoint.getMessage());
        Assert.assertTrue(c.isOpen());

        session.getBasicRemote().sendText(""io-error"");
        Assert.assertEquals(""io-error"", ProgramaticErrorEndpoint.getMessage());
        Assert.assertEquals(""ERROR: java.lang.RuntimeException"", ProgramaticErrorEndpoint.getMessage());
        Assert.assertTrue(c.isOpen());
        ((UndertowSession) session).forceClose();
        Assert.assertEquals(""CLOSED"", ProgramaticErrorEndpoint.getMessage());

    }
",non-flaky,5
113702,salesforce_reactive-grpc,CancellationPropagationIntegrationTest.clientCanCancelServerStreamImplicitly,"    @Test
    public void clientCanCancelServerStreamImplicitly() throws InterruptedException {
        TestService svc = new TestService();
        serverRule.getServiceRegistry().addService(svc);

        ReactorNumbersGrpc.ReactorNumbersStub stub = ReactorNumbersGrpc.newReactorStub(serverRule.getChannel());
        Flux<NumberProto.Number> test = Mono.just(Empty.getDefaultInstance()).as(stub::responsePressure)
                .doOnNext(number -> System.out.println(number.getNumber(0)))
                .doOnError(throwable -> System.out.println(throwable.getMessage()))
                .doOnComplete(() -> System.out.println(""Completed""))
                .doOnCancel(() -> System.out.println(""Client canceled""))
                .take(10);

        Disposable subscription = test.publish().connect();

        Thread.sleep(1000);

        assertThat(svc.wasCanceled()).isTrue();
    }
",non-flaky,5
77715,pholser_junit-quickcheck,PrimitivePropertyParameterTypesTest.shouldHold,"    @Test public void rangedWrapperFloat() {
        @Property public void shouldHold(@InRange(min = ""-0.1234"", max = ""0.000123"") Float f) {
            assertThat(f, allOf(greaterThanOrEqualTo(-0.1234F), lessThan(0.000123F)));
        }
",non-flaky,5
98634,nutzam_nutz,SimpleAdaptorTest.test_err_param_anywhere,"    @Test
    public void test_err_param_anywhere() {
        get(""/adaptor/err/param/anywhere?id=ABC"");
        assertEquals(200, resp.getStatus());

        get(""/adaptor/err/param/anywhere/ABC"");
        assertEquals(200, resp.getStatus());
    }
",non-flaky,5
91466,strapdata_elassandra,MasterDisruptionIT.execute,"    @TestLogging(""_root:DEBUG,org.elasticsearch.cluster.service:TRACE,org.elasticsearch.test.disruption:TRACE"")
    public void testStaleMasterNotHijackingMajority() throws Exception {
        // 3 node cluster with unicast discovery and minimum_master_nodes set to 2:
        final List<String> nodes = startCluster(3, 2);

        // Save the current master node as old master node, because that node will get frozen
        final String oldMasterNode = internalCluster().getMasterName();
        for (String node : nodes) {
            ensureStableCluster(3, node);
        }
        assertMaster(oldMasterNode, nodes);

        // Simulating a painful gc by suspending all threads for a long time on the current elected master node.
        SingleNodeDisruption masterNodeDisruption = new LongGCDisruption(random(), oldMasterNode);

        // Save the majority side
        final List<String> majoritySide = new ArrayList<>(nodes);
        majoritySide.remove(oldMasterNode);

        // Keeps track of the previous and current master when a master node transition took place on each node on the majority side:
        final Map<String, List<Tuple<String, String>>> masters = Collections.synchronizedMap(new HashMap<String, List<Tuple<String,
                        String>>>());
        for (final String node : majoritySide) {
            masters.put(node, new ArrayList<Tuple<String, String>>());
            internalCluster().getInstance(ClusterService.class, node).addListener(event -> {
                DiscoveryNode previousMaster = event.previousState().nodes().getMasterNode();
                DiscoveryNode currentMaster = event.state().nodes().getMasterNode();
                if (!Objects.equals(previousMaster, currentMaster)) {
                    logger.info(""node {} received new cluster state: {} \n and had previous cluster state: {}"", node, event.state(),
                            event.previousState());
                    String previousMasterNodeName = previousMaster != null ? previousMaster.getName() : null;
                    String currentMasterNodeName = currentMaster != null ? currentMaster.getName() : null;
                    masters.get(node).add(new Tuple<>(previousMasterNodeName, currentMasterNodeName));
                }
            });
        }

        final CountDownLatch oldMasterNodeSteppedDown = new CountDownLatch(1);
        internalCluster().getInstance(ClusterService.class, oldMasterNode).addListener(event -> {
            if (event.state().nodes().getMasterNodeId() == null) {
                oldMasterNodeSteppedDown.countDown();
            }
        });

        internalCluster().setDisruptionScheme(masterNodeDisruption);
        logger.info(""freezing node [{}]"", oldMasterNode);
        masterNodeDisruption.startDisrupting();

        // Wait for the majority side to get stable
        assertDifferentMaster(majoritySide.get(0), oldMasterNode);
        assertDifferentMaster(majoritySide.get(1), oldMasterNode);

        // the test is periodically tripping on the following assertion. To find out which threads are blocking the nodes from making
        // progress we print a stack dump
        boolean failed = true;
        try {
            assertDiscoveryCompleted(majoritySide);
            failed = false;
        } finally {
            if (failed) {
                logger.error(""discovery failed to complete, probably caused by a blocked thread: {}"",
                        new HotThreads().busiestThreads(Integer.MAX_VALUE).ignoreIdleThreads(false).detect());
            }
        }

        // The old master node is frozen, but here we submit a cluster state update task that doesn't get executed,
        // but will be queued and once the old master node un-freezes it gets executed.
        // The old master node will send this update + the cluster state where he is flagged as master to the other
        // nodes that follow the new master. These nodes should ignore this update.
        internalCluster().getInstance(ClusterService.class, oldMasterNode).submitStateUpdateTask(""sneaky-update"", new
                ClusterStateUpdateTask(Priority.IMMEDIATE) {
                    @Override
                    public ClusterState execute(ClusterState currentState) throws Exception {
                        return ClusterState.builder(currentState).build();
                    }
",non-flaky,5
135047,undertow-io_undertow,NetworkUtilsAddressParsingTestCase.testIpv6Address,"    @Test
    public void testIpv6Address() throws IOException {
        String addressString = ""2001:1db8:100:3:6:ff00:42:8329"";
        InetAddress res = NetworkUtils.parseIpv6Address(addressString);
        Assert.assertTrue(res instanceof Inet6Address);

        int[] parts = {0x2001, 0x1db8, 0x100, 0x3, 0x6, 0xff00, 0x42, 0x8329};
        for(int i = 0 ; i < parts.length; ++i) {
            Assert.assertEquals(((byte)(parts[i]>>8)), res.getAddress()[i * 2]);
            Assert.assertEquals(((byte)(parts[i])), res.getAddress()[i * 2 + 1]);
        }
        Assert.assertEquals(""/"" + addressString, res.toString());

        addressString = ""2001:1db8:100::6:ff00:42:8329"";
        res = NetworkUtils.parseIpv6Address(addressString);
        Assert.assertTrue(res instanceof Inet6Address);

        parts = new int[]{0x2001, 0x1db8, 0x100, 0x0, 0x6, 0xff00, 0x42, 0x8329};
        for(int i = 0 ; i < parts.length; ++i) {
            Assert.assertEquals(((byte)(parts[i]>>8)), res.getAddress()[i * 2]);
            Assert.assertEquals(((byte)(parts[i])), res.getAddress()[i * 2 + 1]);
        }
        Assert.assertEquals(""/2001:1db8:100:0:6:ff00:42:8329"", res.toString());

        addressString = ""2001:1db8:100::ff00:42:8329"";
        res = NetworkUtils.parseIpv6Address(addressString);
        Assert.assertTrue(res instanceof Inet6Address);

        parts = new int[]{0x2001, 0x1db8, 0x100, 0x0, 0x0, 0xff00, 0x42, 0x8329};
        for(int i = 0 ; i < parts.length; ++i) {
            Assert.assertEquals(((byte)(parts[i]>>8)), res.getAddress()[i * 2]);
            Assert.assertEquals(((byte)(parts[i])), res.getAddress()[i * 2 + 1]);
        }
        Assert.assertEquals(""/2001:1db8:100:0:0:ff00:42:8329"", res.toString());


        addressString = ""::1"";
        res = NetworkUtils.parseIpv6Address(addressString);
        Assert.assertTrue(res instanceof Inet6Address);

        parts = new int[]{0, 0, 0, 0, 0, 0, 0, 0x1};
        for(int i = 0 ; i < parts.length; ++i) {
            Assert.assertEquals(((byte)(parts[i]>>8)), res.getAddress()[i * 2]);
            Assert.assertEquals(((byte)(parts[i])), res.getAddress()[i * 2 + 1]);
        }
        Assert.assertEquals(""/0:0:0:0:0:0:0:1"", res.toString());
    }
",non-flaky,5
162444,testcontainers_testcontainers-java,HttpWaitStrategyTest.testWaitUntilReadyWithUnauthorizedWithLambda,"    @Test
    public void testWaitUntilReadyWithUnauthorizedWithLambda() {
        waitUntilReadyAndSucceed(startContainerWithCommand(createShellCommand(""401 UNAUTHORIZED"", GOOD_RESPONSE_BODY),
            createHttpWaitStrategy(ready)
                .forStatusCodeMatching(it -> it >= 200 && it < 300 || it == 401)
        ));
    }
",non-flaky,5
77564,dropwizard_dropwizard,OptionalLongMessageBodyWriterTest.showWithQueryParam,"    @Test
        public OptionalLong showWithQueryParam(@QueryParam(""id"") OptionalLong id) {
            return id;
        }
",non-flaky,5
98221,apache_jackrabbit,CreateRepositoryTest.createRepositories,"    @Test
    public void createRepositories() throws Exception {
        doCreateRepositories(""jackrabbit-1.6"");
    }
",non-flaky,5
89295,apache_samza,TestLocalStoreMonitor.shouldDoNothingWhenLastModifiedTimeOfOffsetFileIsLessThanOffsetTTL,"  @Test
  public void shouldDoNothingWhenLastModifiedTimeOfOffsetFileIsLessThanOffsetTTL() throws Exception {
    File offsetFile = createOffsetFile(taskStoreDir);
    localStoreMonitor.monitor();
    assertTrue(""Offset file should exist."", offsetFile.exists());
    assertEquals(0, localStoreMonitorMetrics.diskSpaceFreedInBytes.getCount());
  }
",non-flaky,5
94649,square_okhttp,RouteSelectorTest.select,"  @Test public void proxySelectorReturnsNull() throws Exception {
      @Override public List<Proxy> select(URI uri) {
        assertEquals(uriHost, uri.getHost());
        return null;
      }
",non-flaky,5
89282,apache_samza,TestJobsResource.testGetJobNameNotFound,"  @Test
  public void testGetJobNameNotFound()
      throws IOException {
    Response resp = target(String.format(""v1/jobs/%s/%s"", ""BadJobName"", MockJobProxy.JOB_INSTANCE_2_ID)).request().get();
    assertEquals(404, resp.getStatus());

    final Map<String, String> errorMessage = objectMapper.readValue(resp.readEntity(String.class), new TypeReference<Map<String, String>>() { });
    assertTrue(errorMessage.get(""message""), errorMessage.get(""message"").contains(""does not exist""));
    resp.close();
  }
",non-flaky,5
135076,undertow-io_undertow,CookiesTestCase.testEqualsInValueAllowed,"    @Test
    public void testEqualsInValueAllowed() {
        Map<String, Cookie> cookies = Cookies.parseRequestCookies(1, true, Arrays.asList(""CUSTOMER=WILE_E_COYOTE=THE_COYOTE""));
        Cookie cookie = cookies.get(""CUSTOMER"");
        Assert.assertNotNull(cookie);
        Assert.assertEquals(""WILE_E_COYOTE=THE_COYOTE"", cookie.getValue());
    }
",non-flaky,5
110128,Wikidata_wikidata-toolkit,ClientConfigurationTest.testReadConfigFile,"	@Test
	public void testReadConfigFile() throws IOException {
		String configFile = ""src/test/resources/testConf.ini"";
		String[] args = new String[] { ""-c"", configFile };
		ClientConfiguration config = new ClientConfiguration(args);

		assertTrue(config.getOfflineMode());
		assertTrue(config.isQuiet());
		assertEquals(""dumps/wikidata/"", config.getDumpDirectoryLocation());
		assertEquals(Collections.<String> emptySet(),
				config.getFilterSiteKeys());
		assertEquals(Collections.singleton(Datamodel
						.makeWikidataPropertyIdValue(""P31"")),
				config.getFilterProperties());
		Set<String> langFilters = new HashSet<>();
		langFilters.add(""fr"");
		langFilters.add(""zh"");
		assertEquals(langFilters, config.getFilterLanguages());

		assertEquals(2, config.getActions().size());
		assertTrue(config.getActions().get(0) instanceof RdfSerializationAction);
		assertTrue(config.getActions().get(1) instanceof JsonSerializationAction);
		RdfSerializationAction rdfAction = (RdfSerializationAction) config
				.getActions().get(0);
		JsonSerializationAction jsonAction = (JsonSerializationAction) config
				.getActions().get(1);

		assertTrue(rdfAction.useStdOut);
		assertEquals(DumpProcessingOutputAction.COMPRESS_GZIP,
				rdfAction.compressionType);
		assertEquals(""/tmp/wikidata-items.nt"", rdfAction.outputDestination);
		assertEquals(RdfSerializer.TASK_ITEMS | RdfSerializer.TASK_STATEMENTS
				| RdfSerializer.TASK_TERMS, rdfAction.tasks);

		assertFalse(jsonAction.useStdOut);
		assertEquals(DumpProcessingOutputAction.COMPRESS_BZ2,
				jsonAction.compressionType);
		assertEquals(""/tmp/wikidata-dump.json"", jsonAction.outputDestination);
	}
",non-flaky,5
156096,soot-oss_soot,AsmInnerClassTest.InnerStaticInner,"  @Test
  public void InnerStaticInner() {
    SootMethod target3 =
        prepareTarget(
            methodSigFromComponents(TEST_TARGET_CLASS + ""$Inner$InnerInner"", ""void"", ""method""),
            TEST_TARGET_CLASS + ""$Inner$InnerInner"");
    // one dummy
    assertEquals(2, Scene.v().getApplicationClasses().size());
    assertTrue(target3.getDeclaringClass().hasOuterClass());
    assertTrue(target3.getDeclaringClass().isInnerClass());
    InnerClassTag innerClassTag = null;
    for (Tag tag : target3.getDeclaringClass().getTags()) {
      // FIXME: we have multiple innerclasstags? for a parent it makes sense but for a child class?
      if (tag instanceof InnerClassTag) {
        boolean inner =
            ((InnerClassTag) tag)
                .getInnerClass()
                .equals(""soot/asm/ScopeFinderTarget$Inner$InnerInner"");
        if (inner) {
          innerClassTag = (InnerClassTag) tag;
          break;
        }
      }
    }
    assertNotNull(innerClassTag);
    assertEquals(""soot/asm/ScopeFinderTarget$Inner$InnerInner"", innerClassTag.getInnerClass());
    assertEquals(""soot/asm/ScopeFinderTarget$Inner"", innerClassTag.getOuterClass());
    assertFalse(Modifier.isStatic(innerClassTag.getAccessFlags()));
  }
",non-flaky,5
312,apache_hadoop,TestRpcProgramNfs3.testRename,"  @Test(timeout = 60000)
  public void testRename() throws Exception {
    HdfsFileStatus status = nn.getRpcServer().getFileInfo(testdir);
    long dirId = status.getFileId();
    int namenodeId = Nfs3Utils.getNamenodeId(config);
    XDR xdr_req = new XDR();
    FileHandle handle = new FileHandle(dirId, namenodeId);
    RENAME3Request req = new RENAME3Request(handle, ""bar"", handle, ""fubar"");
    req.serialize(xdr_req);
    
    // Attempt by an unprivileged user should fail.
    RENAME3Response response1 = nfsd.rename(xdr_req.asReadOnlyWrap(),
        securityHandlerUnpriviledged,
        new InetSocketAddress(""localhost"", 1234));
    assertEquals(""Incorrect return code:"", Nfs3Status.NFS3ERR_ACCES,
        response1.getStatus());

    // Attempt by a privileged user should pass.
    RENAME3Response response2 = nfsd.rename(xdr_req.asReadOnlyWrap(),
        securityHandler, new InetSocketAddress(""localhost"", 1234));
    assertEquals(""Incorrect return code:"", Nfs3Status.NFS3_OK,
        response2.getStatus());
  }
",non-flaky,5
177254,line_armeria,DnsAddressEndpointGroupTest.partialIpV6Response,"    @ParameterizedTest
    public void partialIpV6Response(ResolvedAddressTypes resolvedAddressTypes) throws Exception {
        try (TestDnsServer server = new TestDnsServer(ImmutableMap.of(
                // Respond AAAA record only.
                // Respond with NXDOMAIN for A.
                new DefaultDnsQuestion(""partial.com."", AAAA),
                new DefaultDnsResponse(0).addRecord(ANSWER, newAddressRecord(""partial.com"", ""::1""))
        ))) {
            try (DnsAddressEndpointGroup group =
                         DnsAddressEndpointGroup.builder(""partial.com"")
                                                .serverAddresses(server.addr())
                                                .resolvedAddressTypes(resolvedAddressTypes)
                                                .backoff(Backoff.fixed(500))
                                                .build()) {

                assertThat(group.whenReady().get()).containsExactly(
                        Endpoint.of(""partial.com"").withIpAddr(""::1""));
            }
        }
    }
",non-flaky,5
21235,androidx_androidx,PreferencePersistTest.string_persistAndRetrieve_returnsPersistedValue,"    @Test
    public void string_persistAndRetrieve_returnsPersistedValue() {
        final String expected = ""Test"";

        mPreference.putString(expected);
        String result = mPreference.getString(""Default"");

        assertEquals(expected, result);
    }
",non-flaky,5
133947,CorfuDB_CorfuDB,BaseHandlerTest.testHandleReset,"    @Test
    public void testHandleReset() {
        ResponseMsg response = getResponseMsg(
                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.IGNORE),
                getResetResponseMsg()
        );

        baseHandler.handleMessage(response, mockChannelHandlerContext);

        // Verify that the correct request was completed (once) with the appropriate value,
        // and that we did not complete exceptionally.
        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));
        verify(mockClientRouter).completeRequest(response.getHeader().getRequestId(), true);
    }
",non-flaky,5
168,apache_shardingsphere-elasticjob,b022898ef1b8c984e17efb2a422ee45f6b13e46e.assertPersistEphemeralSequential,"@Test
public void assertPersistEphemeralSequential() throws Exception {
    zkRegCenter.persistEphemeralSequential(""/sequential/test_ephemeral_sequential"");
    zkRegCenter.persistEphemeralSequential(""/sequential/test_ephemeral_sequential"");
    CuratorFramework client = CuratorFrameworkFactory.newClient(EmbedTestingServer.getConnectionString(), new RetryOneTime(2000));
    client.start();
    client.blockUntilConnected();
    List<String> actual = client.getChildren().forPath(""/"" + ZookeeperRegistryCenterModifyTest.class.getName() + ""/sequential"");
    assertThat(actual.size(), is(2));
    for (String each : actual) {
        assertThat(each, startsWith(""test_ephemeral_sequential""));
    }
    zkRegCenter.close();
    actual = client.getChildren().forPath(""/"" + ZookeeperRegistryCenterModifyTest.class.getName() + ""/sequential"");
    assertTrue(actual.isEmpty());
    zkRegCenter.init();
}",test order dependency,4
21203,androidx_androidx,PreferenceDataStoreTest.testPutStringSetWithDataStoreOnPref,"    @Test
    public void testPutStringSetWithDataStoreOnPref() {
        mPreference.setPreferenceDataStore(mDataStore);
        mScreen.addPreference(mPreference);
        putStringSetTestCommon();
    }
",non-flaky,5
94601,square_okhttp,UrlConnectionCacheTest.gzip,"  @Test public void testGoldenCacheResponse() throws Exception {
  public Buffer gzip(String data) throws IOException {
    Buffer result = new Buffer();
    BufferedSink sink = Okio.buffer(new GzipSink(result));
    sink.writeUtf8(data);
    sink.close();
    return result;
  }
",non-flaky,5
177986,aosp-mirror_platform_frameworks_support,CustomTabsIntentTest.testToolbarColor,"    @Test
    public void testToolbarColor() {
        int color = Color.RED;
        Intent intent = new CustomTabsIntent.Builder().setToolbarColor(color).build().intent;
        assertTrue(intent.hasExtra(CustomTabsIntent.EXTRA_TOOLBAR_COLOR));
        assertEquals(color, intent.getIntExtra(CustomTabsIntent.EXTRA_TOOLBAR_COLOR, 0));
    }
",non-flaky,5
20917,NationalSecurityAgency_timely,MetricHistogramTest.test75thPercentile,"    @Test
    public void test75thPercentile() throws Exception {
        Assert.assertEquals(75.0D, m.getPercentile(75), 0.0D);
    }
",non-flaky,5
38242,palantir_atlasdb,AbstractAtlasDbKeyValueServiceTest.testGetAllTableNames,"    @Test
    public void testGetAllTableNames() {
        final TableReference anotherTable = TableReference.createWithEmptyNamespace(""AnotherTable"");
        assertEquals(1, keyValueService.getAllTableNames().size());
        assertEquals(TEST_TABLE, keyValueService.getAllTableNames().iterator().next());
        keyValueService.createTable(anotherTable, AtlasDbConstants.GENERIC_TABLE_METADATA);
        assertEquals(2, keyValueService.getAllTableNames().size());
        assertTrue(keyValueService.getAllTableNames().contains(anotherTable));
        assertTrue(keyValueService.getAllTableNames().contains(TEST_TABLE));
        keyValueService.dropTable(anotherTable);
        assertEquals(1, keyValueService.getAllTableNames().size());
        assertEquals(TEST_TABLE, keyValueService.getAllTableNames().iterator().next());
    }
",non-flaky,5
156176,soot-oss_soot,ModuleUtilTest.TwoLevelRequiresTransitiveExportFailing,"    @Test
    public void TwoLevelRequiresTransitiveExportFailing() {
        G.reset();
        ModuleScene moduleScene = ModuleScene.v();

        SootModuleInfo moduleA = new SootModuleInfo(SootModuleInfo.MODULE_INFO, ""moduleA"");
        moduleA.addExportedPackage(""de.upb"");
        moduleScene.addClassSilent(moduleA);

        SootModuleInfo moduleB = new SootModuleInfo(SootModuleInfo.MODULE_INFO, ""moduleB"");
        moduleB.getRequiredModules().put(moduleA, Modifier.REQUIRES_TRANSITIVE);
        moduleScene.addClassSilent(moduleB);


        SootModuleInfo moduleC = new SootModuleInfo(SootModuleInfo.MODULE_INFO, ""moduleC"");
        moduleC.getRequiredModules().put(moduleB, Modifier.REQUIRES_STATIC);
        moduleScene.addClassSilent(moduleC);


        SootModuleInfo moduleD = new SootModuleInfo(SootModuleInfo.MODULE_INFO, ""moduleD"");
        moduleD.getRequiredModules().put(moduleC, Modifier.REQUIRES_STATIC);
        moduleScene.addClassSilent(moduleD);

        ModuleUtil moduleUtil = ModuleUtil.v();
        String foundModule = moduleUtil.declaringModule(""de.upb.A"", ""moduleD"");
        // output should be D, because module C, does NOT REQUIERS TRANSITIVE module B
        Assert.assertEquals(""moduleD"", foundModule);

    }
",non-flaky,5
98626,nutzam_nutz,El2Test.test_issue_1229,"    @Test
    public void test_issue_1229() {
        Context ctx = Lang.context();
        ctx.set(""obj"", new NutMap(""pet"", null).setv(""girls"", new ArrayList<String>()));
        El.eval(ctx, ""obj.pet"");
        El.eval(ctx, ""!!(obj.pet)"");
        assertTrue((Boolean)El.eval(ctx, ""!!(obj.pet.name) == null""));
        assertTrue((Boolean)El.eval(ctx, ""!(!(!!(obj.pet.name) == null))""));
        assertEquals(""wendal"", El.eval(ctx, ""!!(obj.pet.name) ||| 'wendal'""));
        assertEquals(""dog"", El.eval(ctx, ""!!(obj.girls) ||| 'dog'""));
    }
",non-flaky,5
114117,aws_aws-sdk-java-v2,InstantAsStringAttributeConvertersTest.InstantAsStringAttributeConverterNotAcceptOffsetTimeTest,"    @Test
    public void InstantAsStringAttributeConverterNotAcceptOffsetTimeTest() {
        assertFails(() -> transformTo(CONVERTER, EnhancedAttributeValue.fromString(""1988-05-21T00:12:00+01:00"")
                                                                       .toAttributeValue()));
    }
",non-flaky,5
70819,apache_kafka,PluginsTest.shouldFailToFindConverterInCurrentClassloader,"    @Test(expected = ConfigException.class)
    public void shouldFailToFindConverterInCurrentClassloader() {
        TestPlugins.assertAvailable();
        props.put(WorkerConfig.KEY_CONVERTER_CLASS_CONFIG, TestPlugins.SAMPLING_CONVERTER);
        createConfig();
    }
",non-flaky,5
75,apache_hadoop,TestPathData.testUnqualifiedUriContents,"@Test
public void testUnqualifiedUriContents() throws Exception {
    dirString = ""d1"";
    item = new PathData(dirString, conf);
    PathData[] items = item.getDirectoryContents();
    assertEquals(sortedString(""d1/f1"", ""d1/f1.1"", ""d1/f2""), sortedString(items));
}",test order dependency,4
175770,GoogleCloudPlatform_google-cloud-eclipse,FlexDeployPreferencesDialogTest.testFlexPricingLabel,"  @Test
  public void testFlexPricingLabel() {
    dialog.setBlockOnOpen(false);
    dialog.open();
    Composite dialogArea = (Composite) dialog.createDialogArea(shellResource.getShell());

    assertNotNull(findGcpPricingLink(dialogArea));
  }
",non-flaky,5
175758,GoogleCloudPlatform_google-cloud-eclipse,GcpProjectQueryJobTest.testRun_setsProjects,"  @Test
  public void testRun_setsProjects() throws InterruptedException, ProjectRepositoryException {
    queryJob.schedule();
    queryJob.join();

    verify(projectRepository).getProjects(credential);
    verify(isLatestQueryJob).apply(queryJob);
    verify(projectSelector).isDisposed();
    verify(projectSelector).setProjects(projects);
  }
",non-flaky,5
113970,apache_struts,DefaultActionProxyTest.testThorwExceptionOnNotAllowedMethod,"    @Test
    public void testThorwExceptionOnNotAllowedMethod() throws Exception {
        final String filename = ""com/opensymphony/xwork2/config/providers/xwork-test-allowed-methods.xml"";
        loadConfigurationProviders(new XmlConfigurationProvider(filename));
        DefaultActionProxy dap = new DefaultActionProxy(new MockActionInvocation(), ""strict"", ""Default"", ""notAllowed"", true, true);
        container.inject(dap);

        try {
            dap.prepare();
            fail(""Must throw exception!"");
        } catch (Exception e) {
            assertEquals(e.getMessage(), ""Method notAllowed for action Default is not allowed!"");
        }
    }
",non-flaky,5
118760,netty_netty,ByteBufUtilTest.testWriteUtf8InvalidTwoLeadingSurrogates,"    @Test
    public void testWriteUtf8InvalidTwoLeadingSurrogates() {
        String surrogateString = new StringBuilder(2)
                                .append('a')
                                .append('\uD800')
                                .append('\uD800')
                                .append('b')
                                .toString();
        ByteBuf buf = Unpooled.buffer(16);
        buf.writeBytes(surrogateString.getBytes(CharsetUtil.UTF_8));
        ByteBuf buf2 = Unpooled.buffer(16);
        ByteBufUtil.writeUtf8(buf2, surrogateString);

        assertEquals(buf, buf2);
        assertEquals(buf.readableBytes(), ByteBufUtil.utf8Bytes(surrogateString));
        buf.release();
        buf2.release();
    }
",non-flaky,5
89284,apache_samza,TestJobsResource.testGetJobNameWithoutId,"  @Test
  public void testGetJobNameWithoutId()
      throws IOException {
    Response resp = target(String.format(""v1/jobs/%s"", MockJobProxy.JOB_INSTANCE_2_NAME)).request().get();
    assertEquals(404, resp.getStatus());
    resp.close();
  }
",non-flaky,5
177223,line_armeria,WeightRampingUpStrategyTest.compare,"    @Test
        public int compare(Endpoint o1, Endpoint o2) {
            if (o1.equals(o2) && o1.weight() == o2.weight()) {
                return 0;
            }
            return -1;
        }
",non-flaky,5
156059,jReddit_jReddit,RedditOAuthAgentTest.testDefaultConstructor,"    @Test
    public void testDefaultConstructor() {
        RedditApp app = new RedditWebApp(clientID, clientSecret, redirectURI);
        new RedditOAuthAgent(userAgent, app);
        app = new RedditScriptApp(clientID, clientSecret, redirectURI);
        new RedditOAuthAgent(userAgent, app);
        app = new RedditInstalledApp(clientID, redirectURI);
        new RedditOAuthAgent(userAgent, app);
    }
",non-flaky,5
91419,strapdata_elassandra,NativePrivilegeStoreTests.setup,"@TestLogging(""org.elasticsearch.xpack.security.authz.store.NativePrivilegeStore:TRACE"")
    public void setup() {
        requests = new ArrayList<>();
        listener = new AtomicReference<>();
        client = new NoOpClient(getTestName()) {
            @Override
            protected <Request extends ActionRequest,
                Response extends ActionResponse,
                RequestBuilder extends ActionRequestBuilder<Request, Response, RequestBuilder>>
            void doExecute(Action<Request, Response, RequestBuilder> action, Request request, ActionListener<Response> listener) {
                NativePrivilegeStoreTests.this.requests.add(request);
                NativePrivilegeStoreTests.this.listener.set(listener);
            }
        };
        final SecurityIndexManager securityIndex = mock(SecurityIndexManager.class);
        when(securityIndex.freeze()).thenReturn(securityIndex);
        when(securityIndex.indexExists()).thenReturn(true);
        when(securityIndex.isAvailable()).thenReturn(true);
        Mockito.doAnswer(invocationOnMock -> {
            assertThat(invocationOnMock.getArguments().length, equalTo(2));
            assertThat(invocationOnMock.getArguments()[1], instanceOf(Runnable.class));
            ((Runnable) invocationOnMock.getArguments()[1]).run();
            return null;
        }).when(securityIndex).prepareIndexIfNeededThenExecute(any(Consumer.class), any(Runnable.class));
        Mockito.doAnswer(invocationOnMock -> {
            assertThat(invocationOnMock.getArguments().length, equalTo(2));
            assertThat(invocationOnMock.getArguments()[1], instanceOf(Runnable.class));
            ((Runnable) invocationOnMock.getArguments()[1]).run();
            return null;
        }).when(securityIndex).checkIndexVersionThenExecute(any(Consumer.class), any(Runnable.class));
        store = new NativePrivilegeStore(Settings.EMPTY, client, securityIndex);
    }
",non-flaky,5
60878,apache_druid,InfluxParserTest.testParseWhitelistPass,"  @Test
  public void testParseWhitelistPass()
  {
    Parser<String, Object> parser = new InfluxParser(Sets.newHashSet(""cpu""));
    String input = ""cpu,host=foo.bar.baz,region=us-east,application=echo pct_idle=99.3,pct_user=88.8,m1_load=2 1465839830100400200"";
    Map<String, Object> parsed = parser.parseToMap(input);
    MatcherAssert.assertThat(parsed.get(""measurement""), Matchers.equalTo(""cpu""));
  }
",non-flaky,5
30913,camunda-cloud_zeebe,TestConfigurationFactoryTest.shouldReadConfiguration,"  @Test
  public void shouldReadConfiguration() {
    // when
    final SampleConfiguration actual =
        sutConfigurationFactory.create(
            null,
            ""config-test"",
            ""TestConfigurationFactoryTestSample.yaml"",
            SampleConfiguration.class);

    // then
    assertThat(actual.getSetting()).isEqualTo(""test"");
    assertThat(actual.getTimeout()).isEqualTo(Duration.ofSeconds(3));
    assertThat(actual.getSize()).isEqualTo(DataSize.ofMegabytes(2));
    assertThat(actual.getArgs()).containsOnly(entry(""foo"", ""bar""));
  }
",non-flaky,5
84605,apache_zookeeper,PrometheusMetricsProviderTest.testGauge,"    @Test
    public void testGauge() throws Exception {
        int[] values = {78, -89};
        int[] callCounts = {0, 0};
        Gauge gauge0 = () -> {
            callCounts[0]++;
            return values[0];
        };
        Gauge gauge1 = () -> {
            callCounts[1]++;
            return values[1];
        };
        provider.getRootContext().registerGauge(""gg"", gauge0);

        int[] count = {0};
        provider.dump((k, v) -> {
            assertEquals(""gg"", k);
            assertEquals(values[0], ((Number) v).intValue());
            count[0]++;
        }
        );
        assertEquals(1, callCounts[0]);
        assertEquals(0, callCounts[1]);
        assertEquals(1, count[0]);
        count[0] = 0;
        String res2 = callServlet();
        assertThat(res2, CoreMatchers.containsString(""# TYPE gg gauge""));
        assertThat(res2, CoreMatchers.containsString(""gg 78.0""));

        provider.getRootContext().unregisterGauge(""gg"");
        provider.dump((k, v) -> {
            count[0]++;
        }
        );
        assertEquals(2, callCounts[0]);
        assertEquals(0, callCounts[1]);
        assertEquals(0, count[0]);
        String res3 = callServlet();
        assertTrue(res3.isEmpty());

        provider.getRootContext().registerGauge(""gg"", gauge1);

        provider.dump((k, v) -> {
            assertEquals(""gg"", k);
            assertEquals(values[1], ((Number) v).intValue());
            count[0]++;
        }
        );
        assertEquals(2, callCounts[0]);
        assertEquals(1, callCounts[1]);
        assertEquals(1, count[0]);
        count[0] = 0;

        String res4 = callServlet();
        assertThat(res4, CoreMatchers.containsString(""# TYPE gg gauge""));
        assertThat(res4, CoreMatchers.containsString(""gg -89.0""));
        assertEquals(2, callCounts[0]);
        // the servlet must sample the value again (from gauge1)
        assertEquals(2, callCounts[1]);

        // override gauge, without unregister
        provider.getRootContext().registerGauge(""gg"", gauge0);

        provider.dump((k, v) -> {
            count[0]++;
        }
        );
        assertEquals(1, count[0]);
        assertEquals(3, callCounts[0]);
        assertEquals(2, callCounts[1]);
    }
",non-flaky,5
110161,Wikidata_wikidata-toolkit,DirectoryManagerTest.testToString,"	@Test
	public void testToString() throws IOException {
		assertEquals(Paths.get(System.getProperty(""user.dir"")).toString(),
				dm.toString());
	}
",non-flaky,5
89366,apache_samza,TestKafkaCheckpointManager.testCreateResourcesSkipValidation,"  @Test
  public void testCreateResourcesSkipValidation() {
    setupSystemFactory(config());
    KafkaCheckpointManager kafkaCheckpointManager = buildKafkaCheckpointManager(false, config());
    kafkaCheckpointManager.createResources();

    verify(this.createResourcesSystemAdmin).start();
    verify(this.createResourcesSystemAdmin).createStream(CHECKPOINT_SPEC);
    verify(this.createResourcesSystemAdmin, never()).validateStream(CHECKPOINT_SPEC);
    verify(this.createResourcesSystemAdmin).stop();
  }
",non-flaky,5
84591,apache_zookeeper,TestApacheCuratorCompatibility.testBasicUsageOfApisAndRecipesInCluster,"    @Test
    public void testBasicUsageOfApisAndRecipesInCluster() throws Exception {
        try (TestingCluster cluster = new TestingCluster(3)) {
            cluster.start();
            doTest(cluster.getConnectString());
        }
    }
",non-flaky,5
94801,ktuukkan_marine-api,AISMessage09ParserTest.getCourseOverGround,"    @Test
    public void getCourseOverGround() throws Exception {
        assertEquals(30.0, msg.getCourseOverGround(), 0.1);
    }
",non-flaky,5
99773,apache_cassandra,RateBasedBackPressureTest.testBackPressureSlowFlow,"    @Test
    public void testBackPressureSlowFlow() throws Exception
    {
        long windowSize = 6000;
        TestTimeSource timeSource = new TestTimeSource();
        TestableBackPressure strategy = new TestableBackPressure(ImmutableMap.of(HIGH_RATIO, ""0.9"", FACTOR, ""10"", FLOW, ""SLOW""), timeSource, windowSize);
        RateBasedBackPressureState state1 = strategy.newState(InetAddressAndPort.getByName(""127.0.0.1""));
        RateBasedBackPressureState state2 = strategy.newState(InetAddressAndPort.getByName(""127.0.0.2""));
        RateBasedBackPressureState state3 = strategy.newState(InetAddressAndPort.getByName(""127.0.0.3""));

        // Update incoming and outgoing rates:
        state1.incomingRate.update(50);
        state1.outgoingRate.update(100);
        state2.incomingRate.update(100);
        state2.outgoingRate.update(100);
        state3.incomingRate.update(20); // slow
        state3.outgoingRate.update(100);

        // Move time ahead:
        timeSource.sleep(windowSize, TimeUnit.MILLISECONDS);

        // Verify the slow replica rate limiting has been applied:
        Set<RateBasedBackPressureState> replicaGroup = Sets.newHashSet(state1, state2, state3);
        strategy.apply(replicaGroup, 1, TimeUnit.SECONDS);
        assertTrue(strategy.checkAcquired());
        assertTrue(strategy.checkApplied());
        assertEquals(3.0, strategy.getRateLimiterForReplicaGroup(replicaGroup).getRate(), 0.1);
    }
",non-flaky,5
98287,spotify_docker-client,RegistryAuthTest.testFromDockerConfig_WrongConfigs,"  @Test
  public void testFromDockerConfig_WrongConfigs() throws Exception {
    final RegistryAuth registryAuth1 = RegistryAuth.fromDockerConfig(getTestFilePath(
        ""dockerConfig/wrongConfig1.json"")).build();
    assertThat(registryAuth1, equalTo(EMPTY_AUTH_CONFIG));

    final RegistryAuth registryAuth2 = RegistryAuth.fromDockerConfig(getTestFilePath(
        ""dockerConfig/wrongConfig2.json"")).build();
    assertThat(registryAuth2, equalTo(EMPTY_AUTH_CONFIG));
  }
",non-flaky,5
114069,aws_aws-sdk-java-v2,EnhancedTypeTest.sortedMapOf_ReturnsRawClassOfSortedMap_WhenSpecifyingEnhancedType,"    @Test
    public void sortedMapOf_ReturnsRawClassOfSortedMap_WhenSpecifyingEnhancedType() {
        EnhancedType<SortedMap<String, Integer>> type =
            EnhancedType.sortedMapOf(EnhancedType.of(String.class), EnhancedType.of(Integer.class));

        assertThat(type.rawClass()).isEqualTo(SortedMap.class);
        assertThat(type.rawClassParameters()).containsExactly(EnhancedType.of(String.class), EnhancedType.of(Integer.class));
    }
",non-flaky,5
118771,netty_netty,ByteBufUtilTest.testIsTextWithAscii,"    @Test
    public void testIsTextWithAscii() {
        byte[] validBytes = {(byte) 0x00, (byte) 0x01, (byte) 0x37, (byte) 0x7F};
        byte[] invalidBytes = {(byte) 0x80, (byte) 0xFF};

        assertIsText(validBytes, true, CharsetUtil.US_ASCII);
        assertIsText(invalidBytes, false, CharsetUtil.US_ASCII);
    }
",non-flaky,5
21223,androidx_androidx,PreferenceDataStoreTest.testSharedPrefNotNullIfNoDS,"    @Test
    public void testSharedPrefNotNullIfNoDS() {
        mScreen.addPreference(mPreference);

        assertNotNull(mPreference.getSharedPreferences());
    }
",non-flaky,5
20955,NationalSecurityAgency_timely,MetricAgeOffIteratorTest.testAgeoffMixed,"    @Test
    public void testAgeoffMixed() throws Exception {
        SortedMap<Key, Value> table = new TreeMap<>();
        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.idle"", TEST_TIME - (3 * ONE_DAY)), new byte[0],
                new byte[0], new byte[0], TEST_TIME - (3 * ONE_DAY)), EMPTY_VALUE);
        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.idle"", TEST_TIME - (2 * ONE_DAY)), new byte[0],
                new byte[0], new byte[0], TEST_TIME - (2 * ONE_DAY)), EMPTY_VALUE);
        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.idle"", TEST_TIME - (1 * ONE_DAY)), new byte[0],
                new byte[0], new byte[0], TEST_TIME - (1 * ONE_DAY)), EMPTY_VALUE);
        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.idle"", TEST_TIME), new byte[0], new byte[0], new byte[0],
                TEST_TIME), EMPTY_VALUE);
        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.idle"", TEST_TIME + ONE_DAY), new byte[0], new byte[0],
                new byte[0], TEST_TIME + ONE_DAY), EMPTY_VALUE);
        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.idle"", TEST_TIME + (2 * ONE_DAY)), new byte[0],
                new byte[0], new byte[0], TEST_TIME + (2 * ONE_DAY)), EMPTY_VALUE);
        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME - (3 * ONE_DAY)), new byte[0],
                new byte[0], new byte[0], TEST_TIME - (3 * ONE_DAY)), EMPTY_VALUE);
        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME - (2 * ONE_DAY)), new byte[0],
                new byte[0], new byte[0], TEST_TIME - (2 * ONE_DAY)), EMPTY_VALUE);
        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME - (1 * ONE_DAY)), new byte[0],
                new byte[0], new byte[0], TEST_TIME - (1 * ONE_DAY)), EMPTY_VALUE);
        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME), new byte[0], new byte[0], new byte[0],
                TEST_TIME), EMPTY_VALUE);
        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME + ONE_DAY), new byte[0], new byte[0],
                new byte[0], TEST_TIME + ONE_DAY), EMPTY_VALUE);
        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME + (2 * ONE_DAY)), new byte[0],
                new byte[0], new byte[0], TEST_TIME + (2 * ONE_DAY)), EMPTY_VALUE);

        SortedKeyValueIterator<Key, Value> source = new SortedMapIterator(table);
        MetricAgeOffIterator iter = new MetricAgeOffIterator();
        HashMap<String, String> options = new HashMap<>();
        options.put(MetricAgeOffIterator.AGE_OFF_PREFIX + ""default"", Integer.toString(1 * ONE_DAY));
        options.put(MetricAgeOffIterator.AGE_OFF_PREFIX + ""sys.cpu.user"", Integer.toString(2 * ONE_DAY));
        iter.init(source, options, null);
        iter.seek(new Range(), columnFamilies, true);
        int seen = 0;
        while (iter.hasTop()) {
            Key k = iter.getTopKey();
            Assert.assertTrue(
                    k.getTimestamp() >= (TEST_TIME - (2 * ONE_DAY)) && k.getTimestamp() <= TEST_TIME + (2 * ONE_DAY));
            seen++;
            iter.next();
        }
        Assert.assertEquals(7, seen);

    }
",non-flaky,5
177162,line_armeria,SamlRequestIdManagerTest.shouldMatchJWTPattern,"    @Test
    public void shouldMatchJWTPattern() throws UnsupportedEncodingException {
        final Pattern p = Pattern.compile(""[a-zA-Z0-9-_]+\\.[a-zA-Z0-9-_]+\\.[a-zA-Z0-9-_]+"");
        final SamlRequestIdManager manager =
                SamlRequestIdManager.ofJwt(""me"", ""test"", 60, 5);
        final String id = manager.newId();
        assertThat(p.matcher(id).matches()).isTrue();
        assertThat(manager.validateId(id)).isTrue();
    }
",non-flaky,5
78276,apache_beam,StateTagTest.testValueEquality,"  @Test
  public void testValueEquality() {
    StateTag<?> fooVarInt1 = StateTags.value(""foo"", VarIntCoder.of());
    StateTag<?> fooVarInt2 = StateTags.value(""foo"", VarIntCoder.of());
    StateTag<?> fooBigEndian = StateTags.value(""foo"", BigEndianIntegerCoder.of());
    StateTag<?> barVarInt = StateTags.value(""bar"", VarIntCoder.of());

    assertEquals(fooVarInt1, fooVarInt2);
    assertNotEquals(fooVarInt1, fooBigEndian);
    assertNotEquals(fooVarInt1, barVarInt);
  }
",non-flaky,5
26765,MundaneImmortal_pair-distribution-app,DayPairsTest.testGetDate,"	@Test
	public void testGetDate() throws ParseException {
		assertThat(new DayPairs().getDate(), is(equalTo(getDateWithoutTime(new Date()))));
	}
",non-flaky,5
98667,nutzam_nutz,BaseTest.test_aop_trans_1,"    @Test
    public void test_aop_trans_1() {
        String name = """"+System.currentTimeMillis();
        get(""/aop/test1?name=""+name);
        assertEquals(200, resp.getStatus());
        get(""/aop/test1/result?name=""+name);
        assertEquals(200, resp.getStatus());
        assertEquals(""0"", resp.getContent());
    }
",non-flaky,5
156085,soot-oss_soot,PropagateLineNumberTagTest.transitiveNullAssignment,"  @Test
  public void transitiveNullAssignment() {
    SootMethod target =
        prepareTarget(
            methodSigFromComponents(TEST_TARGET_CLASS, ""void"", ""transitiveNullAssignment""),
            TEST_TARGET_CLASS);

    Body body = target.retrieveActiveBody();

    // first call to foo
    Optional<Unit> unit =
        body.getUnits().stream()
            .filter(
                u ->
                    u.toString()
                        .equals(
                            ""staticinvoke <soot.jimple.PropagateLineNumberTag: soot.jimple.PropagateLineNumberTag$A foo(soot.jimple.PropagateLineNumberTag$A)>(null)""))
            .findFirst();

    assertTrue(unit.isPresent());

    List<ValueBox> useBoxes = unit.get().getUseBoxes();

    assertEquals(2, useBoxes.size());
    ValueBox valueBox = useBoxes.get(0);
    assertTrue(valueBox instanceof ImmediateBox);
    assertEquals(1, valueBox.getTags().size());
    assertTrue(valueBox.getTags().get(0) instanceof LineNumberTag);
    assertEquals(39, valueBox.getJavaSourceStartLineNumber());

    // second call to foo
    unit =
        body.getUnits().stream()
            .filter(
                u ->
                    u.toString()
                        .equals(
                            ""staticinvoke <soot.jimple.PropagateLineNumberTag: soot.jimple.PropagateLineNumberTag$A foo(soot.jimple.PropagateLineNumberTag$A)>(null)""))
            .skip(1)
            .findFirst();

    assertTrue(unit.isPresent());
    useBoxes = unit.get().getUseBoxes();
    assertEquals(2, useBoxes.size());
    valueBox = useBoxes.get(0);
    assertTrue(valueBox instanceof ImmediateBox);
    assertEquals(1, valueBox.getTags().size());
    assertTrue(valueBox.getTags().get(0) instanceof LineNumberTag);
    assertEquals(39, valueBox.getJavaSourceStartLineNumber());
  }
",non-flaky,5
106603,Alluxio_alluxio,ClientTest.notEnoughMemoryForAlluxioMaster,"  @Test
  public void notEnoughMemoryForAlluxioMaster() throws Exception {
    mConf.set(PropertyKey.INTEGRATION_MASTER_RESOURCE_MEM, ""2048.00MB"");
    mConf.set(PropertyKey.INTEGRATION_MASTER_RESOURCE_CPU, ""4"");
    int masterMemInMB = (int) (mConf.getBytes(
        PropertyKey.INTEGRATION_MASTER_RESOURCE_MEM) / Constants.MB);
    Resource resource = Resource.newInstance(masterMemInMB / 2, 4);
    generateMaxAllocation(resource);
    mThrown.expect(RuntimeException.class);
    mThrown.expectMessage(ExceptionMessage.YARN_NOT_ENOUGH_RESOURCES.getMessage(
        ""Alluxio Master"", ""memory"", masterMemInMB, resource.getMemory()));
    Client client = new Client(mConf);
    client.run();
  }
",non-flaky,5
59662,looly_hutool,ScriptUtilTest.groovyTest,"	@Test
	public void groovyTest() throws ScriptException {
		final ScriptEngine engine = ScriptUtil.getGroovyEngine();
		engine.eval(""println 'Hello Groovy'"");
	}
",non-flaky,5
59592,looly_hutool,QrCodeUtilTest.generateAsBase64Test,"	@Test
	public void generateAsBase64Test(){
		String base64 = QrCodeUtil.generateAsBase64(""http://hutool.cn/"", new QrConfig(400, 400), ""png"");
		System.out.println(base64);

		byte[] bytes = FileUtil.readBytes(
			new File(""d:/test/qr.png""));
		String encode = Base64.encode(bytes);
		String base641 = QrCodeUtil.generateAsBase64(""http://hutool.cn/"", new QrConfig(400, 400), ""png"", encode);
		System.out.println(base641);

	}
",non-flaky,5
122561,vespa-engine_vespa,CommandLineTest.programFails,"    @Test
    public void programFails() {
        terminal.expectCommand(""foo 2>&1"", 1, """");
        try {
            commandLine.add(""foo"").execute();
            fail();
        } catch (ChildProcessFailureException e) {
            assertEquals(
                    ""Command 'foo 2>&1' terminated with exit code 1: stdout/stderr: ''"",
                    e.getMessage());
        }
    }
",non-flaky,5
78281,apache_beam,StateTagTest.testCombiningValueEquality,"  @Test
  public void testCombiningValueEquality() {
    Combine.BinaryCombineIntegerFn maxFn = Max.ofIntegers();
    Coder<Integer> input1 = VarIntCoder.of();
    Coder<Integer> input2 = BigEndianIntegerCoder.of();
    Combine.BinaryCombineIntegerFn minFn = Min.ofIntegers();

    StateTag<?> fooCoder1Max1 = StateTags.combiningValueFromInputInternal(""foo"", input1, maxFn);
    StateTag<?> fooCoder1Max2 = StateTags.combiningValueFromInputInternal(""foo"", input1, maxFn);
    StateTag<?> fooCoder1Min = StateTags.combiningValueFromInputInternal(""foo"", input1, minFn);

    StateTag<?> fooCoder2Max = StateTags.combiningValueFromInputInternal(""foo"", input2, maxFn);
    StateTag<?> barCoder1Max = StateTags.combiningValueFromInputInternal(""bar"", input1, maxFn);

    // Same name, coder and combineFn
    assertEquals(fooCoder1Max1, fooCoder1Max2);
    assertEquals(
        StateTags.convertToBagTagInternal((StateTag) fooCoder1Max1),
        StateTags.convertToBagTagInternal((StateTag) fooCoder1Max2));

    // Different combineFn, but we treat them as equal since we only serialize the bits.
    assertEquals(fooCoder1Max1, fooCoder1Min);
    assertEquals(
        StateTags.convertToBagTagInternal((StateTag) fooCoder1Max1),
        StateTags.convertToBagTagInternal((StateTag) fooCoder1Min));

    // Different input coder coder.
    assertNotEquals(fooCoder1Max1, fooCoder2Max);
    assertNotEquals(
        StateTags.convertToBagTagInternal((StateTag) fooCoder1Max1),
        StateTags.convertToBagTagInternal((StateTag) fooCoder2Max));

    // These StateTags have different IDs.
    assertNotEquals(fooCoder1Max1, barCoder1Max);
    assertNotEquals(
        StateTags.convertToBagTagInternal((StateTag) fooCoder1Max1),
        StateTags.convertToBagTagInternal((StateTag) barCoder1Max));
  }
",non-flaky,5
106644,Alluxio_alluxio,AlluxioFuseFileSystemTest.flush,"  @Test
  public void flush() throws Exception {
    FileOutStream fos = mock(FileOutStream.class);
    AlluxioURI anyURI = any();
    CreateFilePOptions options = any();
    when(mFileSystem.createFile(anyURI, options)).thenReturn(fos);

    // open a file
    mFileInfo.flags.set(O_WRONLY.intValue());
    mFuseFs.create(""/foo/bar"", 0, mFileInfo);

    // then call flush into it
    mFuseFs.flush(""/foo/bar"", mFileInfo);
    verify(fos).flush();
  }
",non-flaky,5
91409,OpenLCB_OpenLCB_Java,StreamInitiateRequestMessageTest.testCTor,"    @Test
    public void testCTor() {
        NodeID id1 = new NodeID(new byte[]{1, 1, 0, 0, 0, 4});
        NodeID id2 = new NodeID(new byte[]{1, 1, 0, 0, 4, 4});
        StreamInitiateRequestMessage t = new StreamInitiateRequestMessage(id1,id2,0,(byte)0x00,(byte)0x00);
        Assert.assertNotNull(""exists"",t);
    }
",non-flaky,5
89357,apache_samza,TestKafkaCheckpointManager.testCreateResourcesTopicCreationError,"  @Test(expected = TopicAlreadyMarkedForDeletionException.class)
  public void testCreateResourcesTopicCreationError() {
    setupSystemFactory(config());
    // throw an exception during createStream
    doThrow(new TopicAlreadyMarkedForDeletionException(""invalid stream"")).when(this.createResourcesSystemAdmin)
        .createStream(CHECKPOINT_SPEC);
    KafkaCheckpointManager checkpointManager = buildKafkaCheckpointManager(true, config());
    // expect an exception during startup
    checkpointManager.createResources();
  }
",non-flaky,5
26789,MundaneImmortal_pair-distribution-app,DayPairsHelperTest.testUpdateDataBaseWithTrelloContent,"	@Test
	public void testUpdateDataBaseWithTrelloContent() {
		List<DayPairs> pairsList = getPairsListFromDevs(getStandardDevs());
		DayPairs oldPairs = new DayPairs();
		oldPairs.setDate(pairsList.get(0).getDate());
		oldPairs.addPair(""oldTrack"", new Pair());
		when(trelloPairsRepository.findByDate(pairsList.get(0).getDate())).thenReturn(Arrays.asList(oldPairs));
		when(trelloPairsRepository.findByDate(pairsList.get(1).getDate())).thenReturn(Arrays.asList());

		subject.updateDataBaseWithTrelloContent(pairsList);

		verify(trelloPairsRepository, atLeast(1)).save(pairsList.get(0));
		verify(trelloPairsRepository, atLeast(1)).save(pairsList.get(1));
	}
",non-flaky,5
112078,apache_shardingsphere-elasticjob,ExceptionUtilTest.assertTransformWithException,"    @Test
    public void assertTransformWithException() {
        assertTrue(ExceptionUtil.transform(new Exception(""Exception"")).startsWith(""java.lang.Exception""));
    }
",non-flaky,5
26923,wildfly_wildfly,MailSubsystem20TestCase.testRuntime,"    @Test
    public void testRuntime() throws Exception {
        KernelServicesBuilder builder = createKernelServicesBuilder(new DefaultInitializer())
                .setSubsystemXml(getSubsystemXml());
        KernelServices mainServices = builder.build();
        if (!mainServices.isSuccessfulBoot()) {
            Assert.fail(mainServices.getBootError().toString());
        }
        ServiceController<?> javaMailService = mainServices.getContainer().getService(MailSessionDefinition.SESSION_CAPABILITY.getCapabilityServiceName(""defaultMail""));
        javaMailService.setMode(ServiceController.Mode.ACTIVE);
        Session session = (Session) javaMailService.getValue();
        Assert.assertNotNull(""session should not be null"", session);
        Properties properties = session.getProperties();
        Assert.assertNotNull(""smtp host should be set"", properties.getProperty(""mail.smtp.host""));
        Assert.assertNotNull(""pop3 host should be set"", properties.getProperty(""mail.pop3.host""));
        Assert.assertNotNull(""imap host should be set"", properties.getProperty(""mail.imap.host""));

        ServiceController<?> defaultMailService = mainServices.getContainer().getService(MailSessionDefinition.SESSION_CAPABILITY.getCapabilityServiceName(""default2""));
        session = (Session) defaultMailService.getValue();
        Assert.assertEquals(""Debug should be true"", true, session.getDebug());


        ServiceController<?> customMailService = mainServices.getContainer().getService(MailSessionDefinition.SESSION_CAPABILITY.getCapabilityServiceName(""custom""));
        session = (Session) customMailService.getValue();
        properties = session.getProperties();
        String host = properties.getProperty(""mail.smtp.host"");
        Assert.assertNotNull(""smtp host should be set"", host);
        Assert.assertEquals(""mail.example.com"", host);

        Assert.assertEquals(""localhost"", properties.get(""mail.pop3.host"")); //this one should be read out of socket binding
        Assert.assertEquals(""some-custom-prop-value"", properties.get(""mail.pop3.custom_prop"")); //this one should be extra property
        Assert.assertEquals(""fully-qualified-prop-name"", properties.get(""some.fully.qualified.property"")); //this one should be extra property

        MailSessionService service = (MailSessionService) customMailService.getService();
        Credentials credentials = service.getConfig().getCustomServers()[0].getCredentials();
        Assert.assertEquals(credentials.getUsername(), ""username"");
        Assert.assertEquals(credentials.getPassword(), ""password"");


    }
",non-flaky,5
170494,eclipse_jetty.project,ConnectorServerTest.testRMIServerAndRMIRegistryOnSameHostAndSamePort,"    @Test
    public void testRMIServerAndRMIRegistryOnSameHostAndSamePort() throws Exception
    {
        // RMI can multiplex connections on the same address and port for different
        // RMI objects, in this case the RMI registry and the RMI server. In this
        // case, the RMIServerSocketFactory will be invoked only once.
        // The case with different address and same port is already covered by TCP,
        // that can listen to 192.168.0.1:1099 and 127.0.0.1:1099 without problems.

        String host = ""localhost"";
        ServerSocket serverSocket = new ServerSocket(0);
        int port = serverSocket.getLocalPort();
        serverSocket.close();

        connectorServer = new ConnectorServer(new JMXServiceURL(""rmi"", host, port, ""/jndi/rmi://"" + host + "":"" + port + ""/jmxrmi""), objectName);
        connectorServer.start();

        JMXServiceURL address = connectorServer.getAddress();
        assertEquals(port, address.getPort());
    }
",non-flaky,5
110142,Wikidata_wikidata-toolkit,ClientConfigurationTest.testReportArgumentsLong,"	@Test
	public void testReportArgumentsLong() {
		String[] args = new String[] { ""--report"", ""output/report.txt"" };
		ClientConfiguration config = new ClientConfiguration(args);
		assertEquals(""output/report.txt"", config.getReportFileName());
	}
",non-flaky,5
77458,opensearch-project_OpenSearch,OpenSearchIntegTestCase.clusterService,"    @TestGroup(enabled = false, sysProperty = OpenSearchIntegTestCase.SYSPROP_THIRDPARTY)
    public ClusterService clusterService() {
        return internalCluster().clusterService();
    }
",non-flaky,5
162399,testcontainers_testcontainers-java,NonExistentImagePullTest.pullingNonExistentImageFailsGracefully,"    @Test(timeout = 60_000L)
    public void pullingNonExistentImageFailsGracefully() {

        assertThrows(""Pulling a nonexistent container will cause an exception to be thrown"",
                ContainerFetchException.class, () -> {
                    return new GenericContainer(""richnorth/nonexistent:latest"");
                });
    }
",non-flaky,5
94725,ktuukkan_marine-api,SpeedOverGroundTest.largeValueIsNotAvailable,"    @Test
    public void largeValueIsNotAvailable() {
        assertFalse(SpeedOverGround.isAvailable(1100));
    }
",non-flaky,5
98618,nutzam_nutz,El2Test.test_uu32_uu64,"    @Test
    public void test_uu32_uu64(){
        Context ctx = Lang.context();
        
        El el = new El(""uuid()"");
        assertEquals(32, el.eval(ctx).toString().length());
        
        el = new El(""uuid(32)"");
        assertTrue(26 >= el.eval(ctx).toString().length());
        
        el = new El(""uuid(64)"");
        assertTrue(23 >= el.eval(ctx).toString().length());
    }
",non-flaky,5
285,apache_hadoop,TestOffsetRange.testCompare,"  @Test
  public void testCompare() throws IOException {
    OffsetRange r1 = new OffsetRange(0, 1);
    OffsetRange r2 = new OffsetRange(1, 3);
    OffsetRange r3 = new OffsetRange(1, 3);
    OffsetRange r4 = new OffsetRange(3, 4);

    assertEquals(0, OffsetRange.ReverseComparatorOnMin.compare(r2, r3));
    assertEquals(0, OffsetRange.ReverseComparatorOnMin.compare(r2, r2));
    assertTrue(OffsetRange.ReverseComparatorOnMin.compare(r2, r1) < 0);
    assertTrue(OffsetRange.ReverseComparatorOnMin.compare(r2, r4) > 0);
  }
",non-flaky,5
114104,aws_aws-sdk-java-v2,TypeConvertingVisitorTest.defaultConvertersThrowExceptions,"    @Test
    public void defaultConvertersThrowExceptions() {
        assertThat(DefaultVisitor.INSTANCE.convert(EnhancedAttributeValue.nullValue())).isEqualTo(null);

        assertDefaultConversionFails(EnhancedAttributeValue.fromString(""foo""));
        assertDefaultConversionFails(EnhancedAttributeValue.fromNumber(""1""));
        assertDefaultConversionFails(EnhancedAttributeValue.fromBoolean(true));
        assertDefaultConversionFails(EnhancedAttributeValue.fromBytes(SdkBytes.fromUtf8String("""")));
        assertDefaultConversionFails(EnhancedAttributeValue.fromSetOfStrings(Collections.emptyList()));
        assertDefaultConversionFails(EnhancedAttributeValue.fromSetOfNumbers(Collections.emptyList()));
        assertDefaultConversionFails(EnhancedAttributeValue.fromSetOfBytes(Collections.emptyList()));
        assertDefaultConversionFails(EnhancedAttributeValue.fromListOfAttributeValues(Collections.emptyList()));
        assertDefaultConversionFails(EnhancedAttributeValue.fromMap(Collections.emptyMap()));
    }
",non-flaky,5
106605,Alluxio_alluxio,ClientTest.notEnoughMemoryForAlluxioWorker,"  @Test
  public void notEnoughMemoryForAlluxioWorker() throws Exception {
    mConf.set(PropertyKey.INTEGRATION_WORKER_RESOURCE_MEM, ""2048.00MB"");
    mConf.set(PropertyKey.WORKER_RAMDISK_SIZE, ""4096.00MB"");
    mConf.set(PropertyKey.INTEGRATION_WORKER_RESOURCE_CPU, ""8"");
    int workerMemInMB = (int) (mConf.getBytes(
        PropertyKey.INTEGRATION_WORKER_RESOURCE_MEM) / Constants.MB);
    int ramdiskMemInMB = (int) (mConf.getBytes(
        PropertyKey.WORKER_RAMDISK_SIZE) / Constants.MB);
    Resource resource = Resource.newInstance((workerMemInMB + ramdiskMemInMB) / 2, 4);
    generateMaxAllocation(resource);
    mThrown.expect(RuntimeException.class);
    mThrown.expectMessage(ExceptionMessage.YARN_NOT_ENOUGH_RESOURCES.getMessage(
        ""Alluxio Worker"", ""memory"", (workerMemInMB + ramdiskMemInMB), resource.getMemory()));
    Client client = new Client(mConf);
    client.run();
  }
",non-flaky,5
162381,testcontainers_testcontainers-java,MountableFileTest.forClasspathResource,"    @Test
    public void forClasspathResource() throws Exception {
        final MountableFile mountableFile = MountableFile.forClasspathResource(""mappable-resource/test-resource.txt"");

        performChecks(mountableFile);
    }
",non-flaky,5
53191,cloudfoundry_uaa,OIDCIdentityProviderDefinitionTests.serialize_discovery_url,"    @Test
    public void serialize_discovery_url() throws MalformedURLException {
        OIDCIdentityProviderDefinition def = JsonUtils.readValue(defaultJson, OIDCIdentityProviderDefinition.class);
        assertNull(def.getDiscoveryUrl());
        def.setDiscoveryUrl(new URL(url));
        assertEquals(url, def.getDiscoveryUrl().toString());
        String json = JsonUtils.writeValueAsString(def);
        def = JsonUtils.readValue(json, OIDCIdentityProviderDefinition.class);
        assertEquals(url, def.getDiscoveryUrl().toString());
    }
",non-flaky,5
33702,alibaba_fastjson,JSONScannerTest.checkTime8,"  @Test
  public void checkTime8() throws Throwable {

    // Arrange
    JSONScanner objectUnderTest = ((JSONScanner)Reflector.getInstance(""com.alibaba.fastjson.parser.JSONScanner""));
    objectUnderTest.hasSpecial = false;
    objectUnderTest.token = 0;
    objectUnderTest.locale = null;
    objectUnderTest.np = 0;
    objectUnderTest.features = 0;
    Reflector.setField(objectUnderTest, ""text"", """");
    objectUnderTest.calendar = null;
    objectUnderTest.matchStat = 0;
    objectUnderTest.bp = 0;
    Reflector.setField(objectUnderTest, ""len"", 0);
    objectUnderTest.stringDefaultValue = """";
    objectUnderTest.pos = 0;
    objectUnderTest.sp = 0;
    objectUnderTest.sbuf = null;
    objectUnderTest.ch = '\u0000';
    objectUnderTest.timeZone = null;
    objectUnderTest.eofPos = 0;
    char h0 = '1';
    char h1 = '9';
    char m0 = '1';
    char m1 = '\u0000';
    char s0 = '\u0000';
    char s1 = '\u0000';

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkTime"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(objectUnderTest, h0, h1, m0, m1, s0, s1);

    // Assert result
    Assert.assertEquals(false, retval);

  }
",non-flaky,5
35,wildfly_wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993.testLookupContextLink,"@Test
public void testLookupContextLink() throws Exception {
    final Name name = new CompositeName(""test/value"");
    namingStore.bind(name, ""testValue"");
    final Name linkName = new CompositeName(""link"");
    namingStore.bind(linkName, new LinkRef(""./test""));
    Object result = namingContext.lookup(""link/value"");
    assertEquals(""testValue"", result);
    result = testActionPermission(JndiPermission.ACTION_LOOKUP, Arrays.asList(new JndiPermission(""test"", ""lookup""),
    new JndiPermission(""test/value"", ""lookup"")), namingContext, ""link/value"");
    assertEquals(""testValue"", result);
}",test order dependency,4
38246,palantir_atlasdb,AbstractAtlasDbKeyValueServiceTest.testDelete,"    @Test
    public void testDelete() {
        putTestDataForSingleTimestamp();
        assertEquals(3, Iterators.size(keyValueService.getRange(
                TEST_TABLE,
                RangeRequest.all(),
                TEST_TIMESTAMP + 1)));
        keyValueService.delete(
                TEST_TABLE,
                ImmutableMultimap.of(Cell.create(row0, column0), TEST_TIMESTAMP));
        assertEquals(3, Iterators.size(keyValueService.getRange(
                TEST_TABLE,
                RangeRequest.all(),
                TEST_TIMESTAMP + 1)));
        keyValueService.delete(
                TEST_TABLE,
                ImmutableMultimap.of(Cell.create(row0, column1), TEST_TIMESTAMP));
        assertEquals(2, Iterators.size(keyValueService.getRange(
                TEST_TABLE,
                RangeRequest.all(),
                TEST_TIMESTAMP + 1)));
        keyValueService.delete(
                TEST_TABLE,
                ImmutableMultimap.of(Cell.create(row1, column0), TEST_TIMESTAMP));
        assertEquals(2, Iterators.size(keyValueService.getRange(
                TEST_TABLE,
                RangeRequest.all(),
                TEST_TIMESTAMP + 1)));
        keyValueService.delete(
                TEST_TABLE,
                ImmutableMultimap.of(Cell.create(row1, column2), TEST_TIMESTAMP));
        assertEquals(1, Iterators.size(keyValueService.getRange(
                TEST_TABLE,
                RangeRequest.all(),
                TEST_TIMESTAMP + 1)));
    }
",non-flaky,5
78288,apache_beam,TimerInternalsTest.testCompareByNamespace,"  @Test
  public void testCompareByNamespace() {
    Instant timestamp = new Instant(100);
    IntervalWindow firstWindow = new IntervalWindow(new Instant(0), timestamp);
    IntervalWindow secondWindow = new IntervalWindow(timestamp, new Instant(200));
    Coder<IntervalWindow> windowCoder = IntervalWindow.getCoder();

    StateNamespace firstWindowNs = StateNamespaces.window(windowCoder, firstWindow);
    StateNamespace secondWindowNs = StateNamespaces.window(windowCoder, secondWindow);

    TimerData secondEventTime = TimerData.of(firstWindowNs, timestamp, TimeDomain.EVENT_TIME);
    TimerData thirdEventTime = TimerData.of(secondWindowNs, timestamp, TimeDomain.EVENT_TIME);

    assertThat(secondEventTime, lessThan(thirdEventTime));
  }
",non-flaky,5
98042,vert-x3_vertx-mongo-client,AggregateOptionsTest.testCopyOptions,"  @Test
  public void testCopyOptions() {
    AggregateOptions options = new AggregateOptions();
    options.setMaxTime(TestUtils.randomLong());

    AggregateOptions copy = new AggregateOptions(options);
    assertEquals(options.getMaxTime(), copy.getMaxTime());
  }
",non-flaky,5
133930,CorfuDB_CorfuDB,LayoutHandlerTest.testGetLayout,"    @Test
    public void testGetLayout() throws IOException {
        Layout defaultLayout = getDefaultLayout();

        ResponseMsg response = getResponseMsg(
                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.IGNORE),
                getLayoutResponseMsg(defaultLayout)
        );

        layoutHandler.handleMessage(response, mockChannelHandlerContext);
        // Verify that the correct request was completed (once) with the appropriate value,
        // and that we did not complete exceptionally.
        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));
        verify(mockClientRouter).completeRequest(response.getHeader().getRequestId(), defaultLayout);
    }
",non-flaky,5
112670,tbsalling_aismessages,NMEAMessageInputStreamReaderTest.catchesInvalidMessageExceptions,"    @Test
    public void catchesInvalidMessageExceptions() throws IOException {
        String nmeaStream =
            ""!AIVDM,1,1,,B,402=481uaUcf;OQ55JS9ITi025Jp,0*2B\n"" +
            ""!AIVDM,1,1,,B,58LAM242B9POUKWWW<0a>0<4E<58,0*6E\n"" +  // invalid
            ""!AIVDM,1,1,,A,33nr7t001f13KNTOahh2@QpF00vh,0*58\n"";

        InputStream inputStream = new ByteArrayInputStream(nmeaStream.getBytes(StandardCharsets.UTF_8));

        new NMEAMessageInputStreamReader(inputStream, nmeaMessageHandler).run();
    }
",non-flaky,5
19451,eclipse_xtext-core,ImportedNamespaceAwareLocalScopeProviderTest.iterator,"	@Test public void testReexports2() throws Exception {
			public Iterator<EObject> iterator() {
				return resource.getAllContents();
			}
",non-flaky,5
76946,Tencent_Firestorm,ShuffleReadClientImplTest.readTest7,"  @Test
  public void readTest7() throws Exception {
    String basePath = HDFS_URI + ""clientReadTest7"";
    HdfsShuffleWriteHandler writeHandler =
        new HdfsShuffleWriteHandler(""appId"", 0, 0, 1, basePath, ""test"", conf);

    Map<Long, byte[]> expectedData1 = Maps.newHashMap();
    Map<Long, byte[]> expectedData2 = Maps.newHashMap();
    Roaring64NavigableMap blockIdBitmap1 = Roaring64NavigableMap.bitmapOf();
    Roaring64NavigableMap taskIdBitmap = Roaring64NavigableMap.bitmapOf(0);
    writeTestData(writeHandler, 10, 30, 0, expectedData1, blockIdBitmap1);

    Roaring64NavigableMap blockIdBitmap2 = Roaring64NavigableMap.bitmapOf();
    writeTestData(writeHandler, 10, 30, 0, expectedData2, blockIdBitmap2);

    writeTestData(writeHandler, 10, 30, 0, expectedData1, blockIdBitmap1);

    ShuffleReadClientImpl readClient1 = new ShuffleReadClientImpl(StorageType.HDFS.name(),
        ""appId"", 0, 0, 100, 2, 10, 100,
        basePath, blockIdBitmap1, taskIdBitmap, Lists.newArrayList(), new Configuration());
    ShuffleReadClientImpl readClient2 = new ShuffleReadClientImpl(StorageType.HDFS.name(),
        ""appId"", 0, 1, 100, 2, 10, 100,
        basePath, blockIdBitmap2, taskIdBitmap, Lists.newArrayList(), new Configuration());
    TestUtils.validateResult(readClient1, expectedData1);
    readClient1.checkProcessedBlockIds();
    readClient1.close();

    TestUtils.validateResult(readClient2, expectedData2);
    readClient2.checkProcessedBlockIds();
    readClient2.close();
  }
",non-flaky,5
133908,cdancy_jenkins-rest,SystemApiLiveTest.testQuietDown,"    @Test
    public void testQuietDown() {
        RequestStatus success = api().quietDown();
        assertNotNull(success);
        assertTrue(success.value());
    }
",non-flaky,5
112082,apache_shardingsphere-elasticjob,JobShardingStrategyFactoryTest.assertGetDefaultStrategy,"    @Test
    public void assertGetDefaultStrategy() {
        assertThat(JobShardingStrategyFactory.getStrategy(null), instanceOf(AverageAllocationJobShardingStrategy.class));
    }
",non-flaky,5
91384,OpenLCB_OpenLCB_Java,MemoryConfigSpaceRetrieverTest.put,"    @Test
    public void testCTor() {
        NodeID nodeID = new NodeID(new byte[]{1,2,3,4,5,6});
        Connection testConnection = new AbstractConnection(){
            public void put(Message msg, Connection node) {
            }
",non-flaky,5
43094,trinodb_trino,AbstractTestIntegrationSmokeTest.testConcurrentScans,"    @Test
    public void testConcurrentScans()
    {
        String unionMultipleTimes = join("" UNION ALL "", nCopies(25, ""SELECT * FROM orders""));
        assertQuery(""SELECT sum(if(rand() >= 0, orderkey)) FROM ("" + unionMultipleTimes + "")"", ""VALUES 11246812500"");
    }
",non-flaky,5
156470,apache_commons-lang,DateUtilsFragmentTest.testMinutesOfMonthWithCalendar,"    @Test
    public void testMinutesOfMonthWithCalendar() {
        final long testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.MONTH);
        assertEquals( minutes  +((hours * DateUtils.MILLIS_PER_HOUR) + ((days - 1) * DateUtils.MILLIS_PER_DAY))
                        / DateUtils.MILLIS_PER_MINUTE,
                testResult);
    }
",non-flaky,5
114040,aws_aws-sdk-java-v2,UpdateItemWithResponseIntegrationTest.updateItem_returnItemCollectionMetrics_set_itemCollectionMetricsNull,"    @Test
    public void updateItem_returnItemCollectionMetrics_set_itemCollectionMetricsNull() {
        Record record = new Record().setId(1).setId2(10);
        UpdateItemEnhancedRequest<Record> request = UpdateItemEnhancedRequest.builder(Record.class)
                                                                          .item(record)
                                                                          .build();

        UpdateItemEnhancedResponse<Record> response = mappedTable.updateItemWithResponse(request);

        assertThat(response.itemCollectionMetrics()).isNull();
    }
",non-flaky,5
77531,dropwizard_dropwizard,DropwizardAppRuleReentrantTest.testReentrantRuleStartsApplicationOnlyOnce,"    @Test
    public void testReentrantRuleStartsApplicationOnlyOnce() throws Throwable {
        @SuppressWarnings(""deprecation"")
        DropwizardAppRule<TestConfiguration> dropwizardAppRule = new DropwizardAppRule<>(testSupport);

        RuleChain.outerRule(dropwizardAppRule)
            .around(dropwizardAppRule) // recursive
            .apply(statement, description)
            .evaluate();

        InOrder inOrder = inOrder(testSupport, statement, description);
        inOrder.verify(testSupport, times(1)).before();
        inOrder.verify(statement).evaluate();
        inOrder.verify(testSupport, times(1)).after();
        inOrder.verifyNoMoreInteractions();
    }
",non-flaky,5
112765,hwang-pku_ormlite-core,DeleteBuilderTest.testDeleteMethod,"	@Test
	public void testDeleteMethod() throws Exception {
		Dao<Foo, Integer> dao = createDao(Foo.class, true);
		Foo foo = new Foo();
		foo.val = 123123;
		assertEquals(1, dao.create(foo));

		assertNotNull(dao.queryForId(foo.id));
		DeleteBuilder<Foo, Integer> db = dao.deleteBuilder();
		// no match
		db.where().eq(Foo.VAL_COLUMN_NAME, foo.val + 1);
		assertEquals(0, db.delete());
		assertNotNull(dao.queryForId(foo.id));

		db.where().reset();
		db.where().eq(Foo.VAL_COLUMN_NAME, foo.val);
		assertEquals(1, db.delete());
		assertNull(dao.queryForId(foo.id));
	}
",non-flaky,5
33755,alibaba_fastjson,FastJsonpHttpMessageConverter4Case2Test.test5,"    @Test
    public void test5() throws Exception {

        String jsonStr = ""{\""packet\"":{\""smsType\"":\""USER_LOGIN\""}}"";

        mockMvc.perform(
                (post(""/fastjson/test5"").characterEncoding(""UTF-8"").content(jsonStr)
                        .contentType(MediaType.APPLICATION_JSON))).andDo(print());
    }
",non-flaky,5
94690,square_okhttp,ResponseCacheTest.gzip,"  @Test public void emptyResponseHeaderNameFromCacheIsLenient() throws Exception {
  public Buffer gzip(String data) throws IOException {
    Buffer result = new Buffer();
    BufferedSink sink = Okio.buffer(new GzipSink(result));
    sink.writeUtf8(data);
    sink.close();
    return result;
  }
",non-flaky,5
156147,soot-oss_soot,ClassRenamerTest.getOrAddNewName_cachingPackage,"  @Test
  public void getOrAddNewName_cachingPackage() {
    ClassRenamer.v().setRemovePackages(false);
    ClassRenamer.v().setRenamePackages(false);

    final String newName = ClassRenamer.v().getOrAddNewName(""pac.age"", ""ClassName"");
    assertThat(newName, allOf(startsWith(""pac.age.""), not(endsWith(""ClassName""))));
    assertThat(newName.split(""\\."").length, equalTo(3));

    assertThat(ClassRenamer.v().getOrAddNewName(""pac.age"", ""ClassName""), equalTo(newName));
  }
",non-flaky,5
21207,androidx_androidx,PreferenceDataStoreTest.testPutIntWithDataStoreOnPref,"    @Test
    public void testPutIntWithDataStoreOnPref() {
        mPreference.setPreferenceDataStore(mDataStore);
        mScreen.addPreference(mPreference);
        putIntTestCommon();
    }
",non-flaky,5
43075,trinodb_trino,BaseConnectorTest.testInsertIntoNotNullColumn,"    @Test
    public void testInsertIntoNotNullColumn()
    {
        skipTestUnless(hasBehavior(SUPPORTS_CREATE_TABLE));

        if (!hasBehavior(SUPPORTS_NOT_NULL_CONSTRAINT)) {
            assertQueryFails(
                    ""CREATE TABLE not_null_constraint (not_null_col INTEGER NOT NULL)"",
                    format(""line 1:35: Catalog '%s' does not support non-null column for column name 'not_null_col'"", getSession().getCatalog().orElseThrow()));
            return;
        }

        try (TestTable table = new TestTable(getQueryRunner()::execute, ""insert_not_null"", ""(nullable_col INTEGER, not_null_col INTEGER NOT NULL)"")) {
            assertUpdate(format(""INSERT INTO %s (not_null_col) VALUES (2)"", table.getName()), 1);
            assertQuery(""SELECT * FROM "" + table.getName(), ""VALUES (NULL, 2)"");
            // The error message comes from remote databases when ConnectorMetadata.supportsMissingColumnsOnInsert is true
            assertQueryFails(format(""INSERT INTO %s (nullable_col) VALUES (1)"", table.getName()), errorMessageForInsertIntoNotNullColumn(""not_null_col""));
        }

        try (TestTable table = new TestTable(getQueryRunner()::execute, ""commuted_not_null"", ""(nullable_col BIGINT, not_null_col BIGINT NOT NULL)"")) {
            assertUpdate(format(""INSERT INTO %s (not_null_col) VALUES (2)"", table.getName()), 1);
            assertQuery(""SELECT * FROM "" + table.getName(), ""VALUES (NULL, 2)"");
            // This is enforced by the engine and not the connector
            assertQueryFails(format(""INSERT INTO %s (not_null_col, nullable_col) VALUES (NULL, 3)"", table.getName()), ""NULL value not allowed for NOT NULL column: not_null_col"");
        }
    }
",non-flaky,5
160347,ConsenSys_teku,MetricsPublisherManagerTest.shouldRunPublisherEveryXSeconds,"  @Test
  public void shouldRunPublisherEveryXSeconds() throws InterruptedException, IOException {
    MetricsPublisherManager publisherManager =
        new MetricsPublisherManager(asyncRunnerFactory, timeProvider, metricsEndpoint);
    publisherManager.setMetricsPublisher(metricsPublisher);
    verify(metricsPublisher, times(0)).publishMetrics(anyString(), anyString());
    SafeFuture<?> safeFuture = publisherManager.doStart();
    assertThat(asyncRunnerFactory.getStubAsyncRunners().size()).isEqualTo(1);
    asyncRunnerFactory.getStubAsyncRunners().get(0).executeQueuedActions();
    verify(metricsPublisher, times(1)).publishMetrics(anyString(), anyString());
    asyncRunnerFactory.getStubAsyncRunners().get(0).executeQueuedActions();
    verify(metricsPublisher, times(2)).publishMetrics(anyString(), anyString());
    Assertions.assertThat(safeFuture).isEqualTo(SafeFuture.COMPLETE);
  }
",non-flaky,5
77468,opensearch-project_OpenSearch,LoggingListenerTests.invalidMethod,"        @TestIssueLogging(value = ""abc:INFO:WARN"", issueUrl = ""https://example.com"")
        public void invalidMethod() {

        }
",non-flaky,5
19499,eclipse_xtext-core,TraceRegionTest.testConstructorWithParent,"	@Test
	public void testConstructorWithParent() {
		TraceRegion parent = new TraceRegion(0, 1, 0, 0, true, 2, 3, 0, 0, null, newURI());
		TraceRegion region = new TraceRegion(0, 1, 0, 0, true, 2, 3, 0, 0, parent, null);
		assertEquals(newURI(), region.getAssociatedSrcRelativePath());
		assertEquals(parent, region.getParent());
	}
",non-flaky,5
114000,apache_struts,StrutsJUnit4TestCaseTest.testSessionInitialized,"    @Test
    public void testSessionInitialized() throws Exception {
        ActionProxy proxy = getActionProxy(""/test/testAction-2.action"");
        Assert.assertNotNull(""invocation session should being initialized"",
                proxy.getInvocation().getInvocationContext().getSession());
    }
",non-flaky,5
177255,line_armeria,DnsServiceEndpointGroupTest.srv,"    @Test
    public void srv() throws Exception {
        try (TestDnsServer server = new TestDnsServer(ImmutableMap.of(
                new DefaultDnsQuestion(""foo.com."", SRV),
                new DefaultDnsResponse(0).addRecord(ANSWER, newSrvRecord(""foo.com."", 1, 2, ""a.foo.com.""))
                                         .addRecord(ANSWER, newSrvRecord(""foo.com."", 3, 4, ""b.foo.com.""))
                                         .addRecord(ANSWER, newSrvRecord(""unrelated.com."", 0, 0, ""asdf.com.""))
                                         .addRecord(ANSWER, newTooShortSrvRecord(""foo.com.""))
                                         .addRecord(ANSWER, newBadNameSrvRecord(""foo.com.""))
        ))) {
            try (DnsServiceEndpointGroup group =
                         DnsServiceEndpointGroup.builder(""foo.com"")
                                                .serverAddresses(server.addr())
                                                .build()) {

                assertThat(group.whenReady().get()).containsExactly(
                        Endpoint.of(""a.foo.com"", 2).withWeight(1),
                        Endpoint.of(""b.foo.com"", 4).withWeight(3));
            }
        }
    }
",non-flaky,5
137080,spring-projects_spring-framework,AbstractAnnotationMetadataTests.isInterfaceWhenNotInterfaceReturnsFalse,"	@Test
	public void isInterfaceWhenNotInterfaceReturnsFalse() {
		assertThat(get(TestClass.class).isInterface()).isFalse();
	}
",non-flaky,5
162413,testcontainers_testcontainers-java,DockerNetworkModeTest.testNoNetworkContainer,"    @Test
    public void testNoNetworkContainer() throws TimeoutException {
        String output = getContainerOutput(noNetwork);

        assertTrue(""'none' network causes a network access error"", output.contains(""bad address""));
    }
",non-flaky,5
78248,apache_beam,StateInternalsTest.testMap,"  @Test
  public void testMap() throws Exception {

    MapState<String, Integer> value = underTest.state(NAMESPACE_1, STRING_MAP_ADDR);

    // State instances are cached, but depend on the namespace.
    assertThat(value, equalTo(underTest.state(NAMESPACE_1, STRING_MAP_ADDR)));
    assertThat(value, not(equalTo(underTest.state(NAMESPACE_2, STRING_MAP_ADDR))));

    // put
    assertThat(value.entries().read(), Matchers.emptyIterable());
    value.put(""A"", 1);
    value.put(""B"", 2);
    value.put(""A"", 11);
    assertThat(value.putIfAbsent(""B"", 22).read(), equalTo(2));
    assertThat(
        value.entries().read(), containsInAnyOrder(MapEntry.of(""A"", 11), MapEntry.of(""B"", 2)));

    // remove
    value.remove(""A"");
    assertThat(value.entries().read(), containsInAnyOrder(MapEntry.of(""B"", 2)));
    value.remove(""C"");
    assertThat(value.entries().read(), containsInAnyOrder(MapEntry.of(""B"", 2)));

    // get
    assertNull(value.get(""A"").read());
    assertThat(value.get(""B"").read(), equalTo(2));
    value.put(""C"", 3);
    value.put(""D"", 4);
    assertThat(value.get(""C"").read(), equalTo(3));

    // iterate
    value.put(""E"", 5);
    value.remove(""C"");
    assertThat(value.keys().read(), containsInAnyOrder(""B"", ""D"", ""E""));
    assertThat(value.values().read(), containsInAnyOrder(2, 4, 5));
    assertThat(
        value.entries().read(),
        containsInAnyOrder(MapEntry.of(""B"", 2), MapEntry.of(""D"", 4), MapEntry.of(""E"", 5)));

    // readLater
    assertThat(value.get(""B"").readLater().read(), equalTo(2));
    assertNull(value.get(""A"").readLater().read());
    assertThat(
        value.entries().readLater().read(),
        containsInAnyOrder(MapEntry.of(""B"", 2), MapEntry.of(""D"", 4), MapEntry.of(""E"", 5)));

    // clear
    value.clear();
    assertThat(value.entries().read(), Matchers.emptyIterable());
    assertThat(underTest.state(NAMESPACE_1, STRING_MAP_ADDR), equalTo(value));
  }
",non-flaky,5
31010,camunda-cloud_zeebe,ArrayValueTest.shouldIncreaseInternalBufferWhenAddingToEnd,"  @Test
  public void shouldIncreaseInternalBufferWhenAddingToEnd() {
    // given
    final int valueCount = 10_000;

    final Integer[] values =
        IntStream.iterate(0, (i) -> ++i)
            .limit(valueCount)
            .boxed()
            .collect(Collectors.toList())
            .toArray(new Integer[valueCount]);

    // when
    addIntValues(array, values);

    // then
    encodeAndDecode(array);
    assertIntValues(array, values);
  }
",non-flaky,5
26713,MundaneImmortal_pair-distribution-app,PairTest.testIsBuildPairFalse,"	@Test
	public void testIsBuildPairFalse()  {
		Pair subject = new Pair();
		
		subject.setBuildPair(false);
		
		assertThat(subject.isBuildPair(), is(false));
	}
",non-flaky,5
112700,hwang-pku_ormlite-core,TransactionManagerTest.testTransactionManagerSpringWiring,"	@Test
	public void testTransactionManagerSpringWiring() {
		TransactionManager tm = new TransactionManager();
		tm.setConnectionSource(connectionSource);
		tm.initialize();
	}
",non-flaky,5
95669,togglz_togglz,SpringProfileActivationStrategyTest.testGetName,"    @Test
    public void testGetName() {
        assertTrue(Strings.isNotBlank(strategy.getName()));
    }
",non-flaky,5
77565,dropwizard_dropwizard,OptionalCookieParamResourceTest.getMessage,"    @Test
        public String getMessage(@CookieParam(""message"") Optional<String> message) {
            return message.orElse(""Default Message"");
        }
",non-flaky,5
76694,quarkusio_quarkus,TaggedET.t3,"    @Test
    public void t3() {
        given()
                .when().get(""/hello/greeting/foo"")
                .then()
                .statusCode(200)
                .body(is(""hello foo""));
    }
",non-flaky,5
98310,spotify_docker-client,ImageRefTest.testImageWithDigestAndRegistry,"  @Test
  public void testImageWithDigestAndRegistry() {
    final ImageRef sut = new ImageRef(""registry:4711/foo/bar@sha256:12345"");
    assertThat(sut.getImage(), equalTo(""registry:4711/foo/bar@sha256:12345""));
  }
",non-flaky,5
33865,apache_camel,FhirCreateIT.testCreateStringResourceEncodeXml,"    @Test
    public void testCreateStringResourceEncodeXml() throws Exception {
        Patient patient = new Patient().addName(new HumanName().addGiven(""Vincent"").setFamily(""Freeman""));
        String patientString = this.fhirContext.newXmlParser().encodeResourceToString(patient);
        Map<String, Object> headers = new HashMap<>();
        headers.put(ExtraParameters.ENCODE_XML.getHeaderName(), Boolean.TRUE);
        MethodOutcome result = requestBodyAndHeaders(""direct://RESOURCE_STRING"", patientString, headers);

        LOG.debug(""resource: "" + result);
        assertNotNull(result, ""resource result"");
        assertTrue(result.getCreated());
    }
",non-flaky,5
162693,OpenAPITools_openapi-generator,OuterEnumTest.testOuterEnum,"    @Test
    public void testOuterEnum() {
        // TODO: test OuterEnum
    }
",non-flaky,5
89340,apache_samza,TestKafkaSystemAdminJava.testStartpointTimestampVisitorShouldResolveToCorrectOffset,"  @Test
  public void testStartpointTimestampVisitorShouldResolveToCorrectOffset() {
    // Define dummy variables for testing.
    final Long testTimeStamp = 10L;

    final KafkaConsumer consumer = Mockito.mock(KafkaConsumer.class);

    final KafkaStartpointToOffsetResolver kafkaStartpointToOffsetResolver = new KafkaStartpointToOffsetResolver(consumer);

    final StartpointTimestamp startpointTimestamp = new StartpointTimestamp(testTimeStamp);
    final Map<TopicPartition, OffsetAndTimestamp> offsetForTimesResult = ImmutableMap.of(
        TEST_TOPIC_PARTITION, new OffsetAndTimestamp(Long.valueOf(TEST_OFFSET), testTimeStamp));

    // Mock the consumer interactions.
    Mockito.when(consumer.offsetsForTimes(ImmutableMap.of(TEST_TOPIC_PARTITION, testTimeStamp))).thenReturn(offsetForTimesResult);
    Mockito.when(consumer.position(TEST_TOPIC_PARTITION)).thenReturn(Long.valueOf(TEST_OFFSET));

    String resolvedOffset = kafkaStartpointToOffsetResolver.visit(TEST_SYSTEM_STREAM_PARTITION, startpointTimestamp);
    Assert.assertEquals(TEST_OFFSET, resolvedOffset);
  }
",non-flaky,5
77491,dropwizard_dropwizard,ConfigurationMetadataTest.isCollectionOfStringsShouldWork,"    @ParameterizedTest
    public void isCollectionOfStringsShouldWork(String name, boolean isCollectionOfStrings) {
        final ConfigurationMetadata metadata = new ConfigurationMetadata(
                Jackson.newObjectMapper(), ExampleConfiguration.class);

        assertThat(metadata.isCollectionOfStrings(name)).isEqualTo(isCollectionOfStrings);
    }
",non-flaky,5
59606,looly_hutool,ExpressionUtilTest.evalTest,"	@Test
	public void evalTest(){
		final Dict dict = Dict.create()
				.set(""a"", 100.3)
				.set(""b"", 45)
				.set(""c"", -199.100);
		final Object eval = ExpressionUtil.eval(""a-(b-c)"", dict);
		Assert.assertEquals(-143.8, (double)eval, 2);
	}
",non-flaky,5
59601,looly_hutool,ArchiverTest.tarTest,"	@Test
	public void tarTest(){
		final File file = FileUtil.file(""d:/test/compress/test.tar"");
		StreamArchiver.create(CharsetUtil.CHARSET_UTF_8, ArchiveStreamFactory.TAR, file)
				.add(FileUtil.file(""d:/Java""), (f)->{
					Console.log(""Add: {}"", f.getPath());
					return true;
				})
				.finish().close();
	}
",non-flaky,5
78239,apache_beam,StateInternalsTest.testValue,"  @Test
  public void testValue() throws Exception {
    ValueState<String> value = underTest.state(NAMESPACE_1, STRING_VALUE_ADDR);

    // State instances are cached, but depend on the namespace.
    assertThat(underTest.state(NAMESPACE_1, STRING_VALUE_ADDR), equalTo(value));
    assertThat(underTest.state(NAMESPACE_2, STRING_VALUE_ADDR), not(equalTo(value)));

    assertThat(value.read(), Matchers.nullValue());
    value.write(""hello"");
    assertThat(value.read(), equalTo(""hello""));
    value.write(""world"");
    assertThat(value.read(), equalTo(""world""));

    value.clear();
    assertThat(value.read(), Matchers.nullValue());
    assertThat(underTest.state(NAMESPACE_1, STRING_VALUE_ADDR), equalTo(value));
  }
",non-flaky,5
110198,Wikidata_wikidata-toolkit,RdfConverterTest.testWriteSimpleStatements,"	@Test
	public void testWriteSimpleStatements() throws RDFHandlerException,
			RDFParseException, IOException {
		ItemDocument document = createTestItemDocument();
		this.rdfConverter.writeSimpleStatements(resource, document);
		this.rdfWriter.finish();
		Model model = RdfTestHelpers.parseRdf(this.out.toString());
		assertEquals(
				RdfTestHelpers
						.parseRdf(""\n<http://test.org/> <http://www.wikidata.org/prop/direct/P31> <http://www.wikidata.org/Q10> ;\n""
								+ ""<http://www.wikidata.org/prop/direct/P279> <http://www.wikidata.org/Q11> .\n""),
				model);
	}
",non-flaky,5
89316,apache_samza,TestKafkaSystemAdminWithMock.testGetSystemStreamPartitionCountsShouldTerminateAfterFiniteRetriesOnException,"  @Test(expected = SamzaException.class)
  public void testGetSystemStreamPartitionCountsShouldTerminateAfterFiniteRetriesOnException() throws Exception {
    final Set<String> streamNames = ImmutableSet.of(VALID_TOPIC);
    final long cacheTTL = 100L;

    when(mockKafkaConsumer.partitionsFor(VALID_TOPIC)).thenThrow(new RuntimeException())
        .thenThrow(new RuntimeException())
        .thenThrow(new RuntimeException())
        .thenThrow(new RuntimeException())
        .thenThrow(new RuntimeException());

    kafkaSystemAdmin.getSystemStreamPartitionCounts(streamNames, cacheTTL);
  }
",non-flaky,5
60894,apache_druid,KafkaEmitterConfigTest.testSerDeserKafkaEmitterConfigNullRequestTopic,"  @Test
  public void testSerDeserKafkaEmitterConfigNullRequestTopic() throws IOException
  {
    KafkaEmitterConfig kafkaEmitterConfig = new KafkaEmitterConfig(""hostname"", ""metricTest"",
        ""alertTest"", null,
        ""clusterNameTest"", ImmutableMap.<String, String>builder()
        .put(""testKey"", ""testValue"").build()
    );
    String kafkaEmitterConfigString = mapper.writeValueAsString(kafkaEmitterConfig);
    KafkaEmitterConfig kafkaEmitterConfigExpected = mapper.readerFor(KafkaEmitterConfig.class)
        .readValue(kafkaEmitterConfigString);
    Assert.assertEquals(kafkaEmitterConfigExpected, kafkaEmitterConfig);
  }
",non-flaky,5
98041,vert-x3_vertx-mongo-client,AggregateOptionsTest.testDefaultOptionsJson,"  @Test
  public void testDefaultOptionsJson() {
    AggregateOptions options = new AggregateOptions(new JsonObject());
    AggregateOptions def = new AggregateOptions();
    assertEquals(def.getMaxTime(), options.getMaxTime());
  }
",non-flaky,5
94645,square_okhttp,ConnectionSpecSelectorTest.nonRetryableIOException,"  @Test
  public void nonRetryableIOException() throws Exception {
    ConnectionSpecSelector connectionSpecSelector =
        createConnectionSpecSelector(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS);
    SSLSocket socket = createSocketWithEnabledProtocols(TlsVersion.TLS_1_1, TlsVersion.TLS_1_0);
    connectionSpecSelector.configureSecureSocket(socket);

    boolean retry = connectionSpecSelector.connectionFailed(
        new IOException(""Non-handshake exception""));
    assertFalse(retry);
    socket.close();
  }
",non-flaky,5
20952,NationalSecurityAgency_timely,MetricAgeOffIteratorTest.testDefaultMissing,"    @Test(expected = IllegalArgumentException.class)
    public void testDefaultMissing() throws Exception {
        SortedMap<Key, Value> table = new TreeMap<>();
        SortedKeyValueIterator<Key, Value> source = new SortedMapIterator(table);
        MetricAgeOffIterator iter = new MetricAgeOffIterator();
        HashMap<String, String> options = new HashMap<>();
        iter.init(source, options, null);
    }
",non-flaky,5
77504,dropwizard_dropwizard,OptionalAuthFilterOrderingTest.setUp,"    @BeforeEach
    public void setUp() throws Exception {
        super.setUp();
    }
",non-flaky,5
162403,testcontainers_testcontainers-java,DockerComposeContainerTest.testGetServicePort,"    @Test
    public void testGetServicePort() {
        int serviceWithInstancePort = environment.getServicePort(""redis_1"", REDIS_PORT);
        assertNotNull(""Port is set for service with instance number"", serviceWithInstancePort);
        int serviceWithoutInstancePort = environment.getServicePort(""redis"", REDIS_PORT);
        assertNotNull(""Port is set for service with instance number"", serviceWithoutInstancePort);
        assertEquals(""Service ports are the same"", serviceWithInstancePort, serviceWithoutInstancePort);
    }
",non-flaky,5
179427,abel533_Mapper,ColumnTypeTest.testJdbcTypeBlob,"    @Test
    public void testJdbcTypeBlob(){
        EntityHelper.initEntityNameMap(UserJdbcTypeBlob.class, config);
        EntityTable entityTable = EntityHelper.getEntityTable(UserJdbcTypeBlob.class);
        Assert.assertNotNull(entityTable);

        Set<EntityColumn> columns = entityTable.getEntityClassColumns();
        Assert.assertEquals(1, columns.size());

        for (EntityColumn column : columns) {
            Assert.assertEquals(""name"", column.getColumn());
            Assert.assertEquals(""name"", column.getProperty());

            Assert.assertEquals(""name = #{name, jdbcType=BLOB}"", column.getColumnEqualsHolder());
            Assert.assertEquals(""name = #{record.name, jdbcType=BLOB}"", column.getColumnEqualsHolder(""record""));
            Assert.assertEquals(""#{name, jdbcType=BLOB}"", column.getColumnHolder());
            Assert.assertEquals(""#{record.name, jdbcType=BLOB}"", column.getColumnHolder(""record""));
            Assert.assertEquals(""#{record.name, jdbcType=BLOB}"", column.getColumnHolder(""record"", ""suffix""));
            Assert.assertEquals(""#{record.namesuffix, jdbcType=BLOB},"", column.getColumnHolder(""record"", ""suffix"", "",""));
            Assert.assertNull(column.getTypeHandler());
        }

        ResultMap resultMap = entityTable.getResultMap(configuration);
        Assert.assertEquals(""[NAME]"", resultMap.getMappedColumns().toString());

        Assert.assertEquals(1, resultMap.getResultMappings().size());

        ResultMapping resultMapping = resultMap.getResultMappings().get(0);
        Assert.assertEquals(""name"", resultMapping.getColumn());
        Assert.assertEquals(""name"", resultMapping.getProperty());
        Assert.assertNotNull(resultMapping.getJdbcType());
        Assert.assertEquals(JdbcType.BLOB, resultMapping.getJdbcType());
        Assert.assertEquals(StringTypeHandler.class, resultMapping.getTypeHandler().getClass());
    }
",non-flaky,5
86060,graylog2_graylog2-server,AggregationEventProcessorConfigTest.testValidateWithInvalidTimeRange,"    @Test
    public void testValidateWithInvalidTimeRange() {
        final AggregationEventProcessorConfig invalidConfig1 = getConfig().toBuilder()
            .searchWithinMs(-1)
            .build();

        final ValidationResult validationResult1 = invalidConfig1.validate();
        assertThat(validationResult1.failed()).isTrue();
        assertThat(validationResult1.getErrors()).containsOnlyKeys(""search_within_ms"");

        final AggregationEventProcessorConfig invalidConfig2 = invalidConfig1.toBuilder()
            .searchWithinMs(0)
            .build();

        final ValidationResult validationResult2 = invalidConfig2.validate();
        assertThat(validationResult2.failed()).isTrue();
        assertThat(validationResult2.getErrors()).containsOnlyKeys(""search_within_ms"");
    }
",non-flaky,5
156131,soot-oss_soot,LambdaMetaFactoryAdaptTest.returnWidening,"  @Test
  public void returnWidening() {
    String testClass = ""soot.lambdaMetaFactory.Adapt"";

    final SootMethod target = prepareTarget(methodSigFromComponents(testClass, ""void"", ""returnWidening""), testClass);

    // TODO more fine-grained testing

    validateAllBodies(target.getDeclaringClass());
  }
",non-flaky,5
311,apache_cassandra,testTrackMetadata_rowTombstone,"@Test
public void testTrackMetadata_rowTombstone() throws Throwable
{
    createTable(""CREATE TABLE %s (a int, b int, c text, PRIMARY KEY (a, b))"");
    ColumnFamilyStore cfs = Keyspace.open(keyspace()).getColumnFamilyStore(currentTable());
    execute(""DELETE FROM %s USING TIMESTAMP 9999 WHERE a = 1"");
    cfs.forceBlockingFlush();
    assertEquals(1, cfs.getLiveSSTables().size());
    StatsMetadata metadata = cfs.getLiveSSTables().iterator().next().getSSTableMetadata();
    assertEquals(9999, metadata.minTimestamp);
    assertEquals(9999, metadata.maxTimestamp);
    assertEquals(System.currentTimeMillis()/1000, metadata.maxLocalDeletionTime, 5);
    assertEquals(nowInSec(), metadata.maxLocalDeletionTime, DELTA);
    cfs.forceMajorCompaction();
    StatsMetadata metadata2 = cfs.getLiveSSTables().iterator().next().getSSTableMetadata();
    assertEquals(metadata.maxLocalDeletionTime, metadata2.maxLocalDeletionTime);
    assertEquals(metadata.minTimestamp, metadata2.minTimestamp);
    assertEquals(metadata.maxTimestamp, metadata2.maxTimestamp);
}",time,2
176823,ctco_cukes,EntityFacadeTest.intArrayValueIsCheckedAsString,"    @Test
    public void intArrayValueIsCheckedAsString() throws Exception {
        BasicAttributes entity = new BasicAttributes(true);
        entity.put(""userPassword"", new int[]{1, 2, 3});

        Whitebox.setInternalState(entityFacade, ""entity"", entity);

        entityFacade.entityHasAttributeWithValue(""userpassword"", ""{1,2,3}"");
    }
",non-flaky,5
91370,OpenLCB_OpenLCB_Java,TractionControlReplyMessageTest.testCTor,"    @Test
    public void testCTor() {
        NodeID src = new NodeID(new byte[]{6,5,5,4,4,3});
        NodeID dst = new NodeID(new byte[]{2,2,2,4,4,4});
        byte[] payload = new byte[]{0x40,0x01,0x00}; // Traciton Management Reply message
        TractionControlReplyMessage t = new TractionControlReplyMessage(src,dst,payload);
        Assert.assertNotNull(""exists"",t);
    }
",non-flaky,5
156087,soot-oss_soot,AndroidCallGraphVirtualEdgesTest.TestAsyncTaskBasicCG,"    @Test
    public void TestAsyncTaskBasicCG() {
        prepareTarget(methodSigFromComponents(TARGET_CLASS, TARGET_METHOD), TARGET_CLASS);

        asyncFuncMaps.clear();
        asyncFuncMaps.put(""doInBackground"", DO_IN_BG);
        asyncFuncMaps.put(""onPreExecute"", ON_PRE_EXE);
        asyncFuncMaps.put(""onPostExecute"", ON_POS_EXE);
        asyncFuncMaps.put(""onProgressUpdate"", ON_PRO_UPD);

        int full = 0, ret = 0;
        for(String key: asyncFuncMaps.keySet())
        {
            full |= asyncFuncMaps.get(key);
        }

        for (Edge edge : Scene.v().getCallGraph()) {
            String sig = edge.getTgt().method().toString();
            for (String key : asyncFuncMaps.keySet()) {
                if (sig.contains(key))
                    ret |= asyncFuncMaps.get(key);
            }
        }

        //The four functions shall all appear in call graph
        Assert.assertEquals(ret, full);
    }
",non-flaky,5
178029,aosp-mirror_platform_frameworks_support,ListRowDataAdapterTest.customObjectAdapterTest,"    @Test
    public void customObjectAdapterTest() {
        int itemCount = 4;
        ArrayObjectAdapter adapter = new CustomAdapter(presenterSelector);
        adapter.add(new SectionRow(""section 1""));
        for (int i = 0; i < itemCount; i++) {
            HeaderItem headerItem = new HeaderItem(i, ""header ""+i);
            adapter.add(new ListRow(headerItem, createListRowAdapter()));
        }

        ListRowDataAdapter listRowDataAdapter = new ListRowDataAdapter(adapter);
        assertEquals(5, listRowDataAdapter.size());

        adapter.add(new DividerRow());
        assertEquals(5, listRowDataAdapter.size());

        listRowDataAdapter.registerObserver(dataObserver);
        adapter.removeItems(3, 3);
        verify(dataObserver, times(1)).onChanged();
        assertEquals(3, listRowDataAdapter.size());

        Mockito.reset(dataObserver);
        adapter.add(new DividerRow());
        verify(dataObserver, times(1)).onChanged();
        assertEquals(3, listRowDataAdapter.size());
    }
",non-flaky,5
98013,vert-x3_vertx-mongo-client,MongoClientWithObjectIdTest.testFindReturnsStringId,"  @Test
  public void testFindReturnsStringId() throws Exception {
    String collection = randomCollection();
    mongoClient.createCollection(collection, onSuccess(res -> {
      JsonObject orig = createDoc();
      JsonObject doc = orig.copy();
      mongoClient.insert(collection, doc, onSuccess(id -> {
        assertNotNull(id);
        mongoClient.find(collection, new JsonObject().put(""foo"", ""bar""), onSuccess(list -> {
          assertTrue(list.size() == 1);
          JsonObject obj = list.get(0);
          assertTrue(obj.containsKey(""_id""));
          assertTrue(obj.getValue(""_id"") instanceof String);
          obj.remove(""_id"");
          assertEquals(orig, obj);
          testComplete();
        }));
      }));
    }));
    await();
  }
",non-flaky,5
160390,ConsenSys_teku,ChainDataProviderTest.validatorParameterToIndex_shouldAcceptValidatorRoot,"  @Test
  public void validatorParameterToIndex_shouldAcceptValidatorRoot() {
    final ChainDataProvider provider =
        new ChainDataProvider(spec, recentChainData, combinedChainDataClient);

    Validator validator =
        new Validator(recentChainData.getBestState().get().getValidators().get(1));

    assertThat(provider.validatorParameterToIndex(validator.pubkey.toHexString()))
        .isEqualTo(Optional.of(1));
  }
",non-flaky,5
20979,NationalSecurityAgency_timely,WebSocketRequestDeserializationTest.testAddDeserializationWithStartAndDelayTimeAndTags,"    @Test
    public void testAddDeserializationWithStartAndDelayTimeAndTags() throws Exception {
        // @formatter:off
		String json = ""{"" +
						""\""operation\"" : \""add\"","" +
						""\""sessionId\"" : \""1234\"","" +
					    ""\""metric\"" : \""sys.cpu.user\"","" +
						""\""tags\"" : {"" +
					       ""\""tag2\"" : \""value2\"","" +
					       ""\""tag1\"" : \""value1\"""" +
					    ""},"" +
						""\""startTime\"" : \""1000\"","" +
					    ""\""delayTime\"" : \""500\"""" +
					  ""}"";
		// @formatter:on
        WebSocketRequest request = JsonUtil.getObjectMapper().readValue(json.getBytes(), WebSocketRequest.class);
        Assert.assertNotNull(request);
        Assert.assertEquals(AddSubscription.class, request.getClass());
        Assert.assertEquals(""1234"", ((AddSubscription) request).getSessionId());
        Assert.assertEquals(""sys.cpu.user"", ((AddSubscription) request).getMetric());
        Assert.assertEquals(true, ((AddSubscription) request).getTags().isPresent());
        Map<String, String> tags = ((AddSubscription) request).getTags().get();
        Assert.assertTrue(tags.containsKey(""tag1""));
        Assert.assertEquals(""value1"", tags.get(""tag1""));
        Assert.assertTrue(tags.containsKey(""tag2""));
        Assert.assertEquals(""value2"", tags.get(""tag2""));
        Assert.assertEquals(true, ((AddSubscription) request).getStartTime().isPresent());
        long time = ((AddSubscription) request).getStartTime().get();
        Assert.assertEquals(1000L, time);
        long delay = ((AddSubscription) request).getDelayTime().get();
        Assert.assertEquals(500L, delay);
    }
",non-flaky,5
133921,cdancy_jenkins-rest,QueueApiLiveTest.testCancelNonExistentQueueItem,"    @Test
    public void testCancelNonExistentQueueItem() throws InterruptedException {
        RequestStatus success = api().cancel(123456789);
        assertNotNull(success);
        assertTrue(success.value());
        assertTrue(success.errors().isEmpty());
    }
",non-flaky,5
86039,graylog2_graylog2-server,NotificationDtoTest.testValidateWithEmptyTitle,"    @Test
    public void testValidateWithEmptyTitle() {
        final NotificationDto invalidNotification = getHttpNotification().toBuilder().title("""").build();
        final ValidationResult validationResult = invalidNotification.validate();
        assertThat(validationResult.failed()).isTrue();
        assertThat(validationResult.getErrors()).containsOnlyKeys(""title"");
    }
",non-flaky,5
95700,togglz_togglz,CompositeFeatureProviderTest.oneProvider,"	@Test
	public void oneProvider() {
		@SuppressWarnings(""unchecked"")
		CompositeFeatureProvider provider = new CompositeFeatureProvider(new EnumBasedFeatureProvider(TestFeatures.class));
		assertThat(provider.getFeatures()).hasSize(2);
		assertThat(provider.getMetaData(new NamedFeature(""FOO""))).isNotNull();
	}
",non-flaky,5
162366,testcontainers_testcontainers-java,JarFileShadingTest.testMetaInf,"    @Test
    public void testMetaInf() throws Exception {
        assertThatFileList(root.resolve(""META-INF"")).containsOnly(
                ""MANIFEST.MF"",
                ""services"",
                ""native""
        );

        assertThatFileList(root.resolve(""META-INF"").resolve(""native"")).containsOnly(
                ""liborg-testcontainers-shaded-netty-transport-native-epoll.so"",
                ""liborg-testcontainers-shaded-netty-transport-native-kqueue.jnilib""
        );
    }
",non-flaky,5
114070,aws_aws-sdk-java-v2,EnhancedTypeTest.concurrentMapOf_ReturnsRawClassOfConcurrentMap_WhenSpecifyingClass,"    @Test
    public void concurrentMapOf_ReturnsRawClassOfConcurrentMap_WhenSpecifyingClass() {
        EnhancedType<ConcurrentMap<String, Integer>> type = EnhancedType.concurrentMapOf(String.class, Integer.class);

        assertThat(type.rawClass()).isEqualTo(ConcurrentMap.class);
        assertThat(type.rawClassParameters()).containsExactly(EnhancedType.of(String.class), EnhancedType.of(Integer.class));
    }
",non-flaky,5
156377,apache_commons-lang,ClassPathUtilsTest.testToFullyQualifiedNameClassNull,"    @Test
    public void testToFullyQualifiedNameClassNull() {
        assertThrows(NullPointerException.class, () -> ClassPathUtils.toFullyQualifiedName(ClassPathUtils.class, null));
    }
",non-flaky,5
95663,togglz_togglz,TogglzApplicationContextBinderApplicationListenerTest.contextClosed,"    @Test
    public void contextClosed() {
        // Bind application context before context closed event invoked
        ContextClassLoaderApplicationContextHolder.bind(applicationContext);
        ContextClosedEvent contextClosedEvent = mock(ContextClosedEvent.class);
        // Invoke context closed event
        applicationListener.onApplicationEvent(contextClosedEvent);
        // Assert application context released
        assertNull(ContextClassLoaderApplicationContextHolder.get());
    }
",non-flaky,5
98603,nutzam_nutz,El2Test.list,"    @Test
    public void list() {
        Context context = Lang.context();
        List<String> list = new ArrayList<String>();
        context.set(""b"", list);
        assertEquals(0, El.eval(context, ""b.size()""));
        list.add("""");
        assertEquals(1, El.eval(context, ""b.size()""));
        El.eval(context, ""b.add('Q\nQ')"");
        assertEquals(2, El.eval(context, ""b.size()""));
    }
",non-flaky,5
43082,trinodb_trino,BaseConnectorTest.testTruncateTable,"    @Test
    public void testTruncateTable()
    {
        if (!hasBehavior(SUPPORTS_TRUNCATE)) {
            assertQueryFails(""TRUNCATE TABLE nation"", ""This connector does not support truncating tables"");
            return;
        }

        skipTestUnless(hasBehavior(SUPPORTS_CREATE_TABLE));

        try (TestTable table = new TestTable(getQueryRunner()::execute, ""test_truncate"", ""AS SELECT * FROM region"")) {
            assertUpdate(""TRUNCATE TABLE "" + table.getName());
            assertQuery(""SELECT count(*) FROM "" + table.getName(), ""VALUES 0"");
        }
    }
",non-flaky,5
98250,apache_jackrabbit,UserManagerTest.testFindUserWithSpecialCharIdByPrincipalName,"    @Test
    public void testFindUserWithSpecialCharIdByPrincipalName() throws RepositoryException {
        List<String> ids = Arrays.asList(""'"", Text.escapeIllegalJcrChars(""']""), Text.escape(""']""));
        for (String id : ids) {
            User user = null;
            try {
                user = userMgr.createUser(id, ""pw"");
                superuser.save();

                boolean found = false;
                Iterator<Authorizable> it = userMgr.findAuthorizables(""rep:principalName"", id, UserManager.SEARCH_TYPE_USER);
                while (it.hasNext() && !found) {
                    Authorizable a = it.next();
                    found = id.equals(a.getID());
                }
                assertTrue(found);
            } finally {
                if (user != null) {
                    user.remove();
                    superuser.save();
                }
            }
        }
    }
",non-flaky,5
33746,alibaba_fastjson,FastJsonpHttpMessageConverter4Case2Test.isInjectComponent,"    @Test
    public void isInjectComponent() {
        wac.getBean(FastJsonpResponseBodyAdvice.class);
    }
",non-flaky,5
159644,liquibase_liquibase,AbstractIntegrationTest.testUpdateClearUpdate,"    @Test
    public void testUpdateClearUpdate() throws Exception {
        assumeNotNull(this.getDatabase());

        Liquibase liquibase = createLiquibase(completeChangeLog);
        clearDatabase();

        liquibase = createLiquibase(completeChangeLog);
        liquibase.setChangeLogParameter( ""loginuser"", getUsername());
        liquibase.update(this.contexts);
        clearDatabase();

        liquibase = createLiquibase(completeChangeLog);
        liquibase.setChangeLogParameter( ""loginuser"", getUsername());
        liquibase.update(this.contexts);
    }
",non-flaky,5
60927,apache_druid,LongMeanAveragerFactoryTest.testCreateAverager,"  @Test
  public void testCreateAverager()
  {
    AveragerFactory<?, ?> fac = new LongMeanAveragerFactory(""test"", 5, 1, ""field"");
    Assert.assertThat(fac.createAverager(), IsInstanceOf.instanceOf(LongMeanAverager.class));
  }
",non-flaky,5
91436,strapdata_elassandra,PreBuiltTransportClientTests.testPluginInstalled,"    @Test
    public void testPluginInstalled() {
        try (TransportClient client = new PreBuiltTransportClient(Settings.EMPTY)) {
            Settings settings = client.settings();
            assertEquals(Netty4Plugin.NETTY_TRANSPORT_NAME, NetworkModule.HTTP_DEFAULT_TYPE_SETTING.get(settings));
            assertEquals(Netty4Plugin.NETTY_TRANSPORT_NAME, NetworkModule.TRANSPORT_DEFAULT_TYPE_SETTING.get(settings));
        }
    }
",non-flaky,5
118688,netty_netty,SmtpCommandTest.getCommandFromCache,"    @Test
    public void getCommandFromCache() {
        assertSame(SmtpCommand.DATA, SmtpCommand.valueOf(""DATA""));
        assertSame(SmtpCommand.EHLO, SmtpCommand.valueOf(""EHLO""));
        assertNotSame(SmtpCommand.EHLO, SmtpCommand.valueOf(""ehlo""));
    }
",non-flaky,5
97711,vojtechhabarta_typescript-generator,SortedTypesTest.testOrder2,"    @Test
    public void testOrder2() {
        assertCorrectOrder(B.class, A.class);
    }
",non-flaky,5
179504,abel533_Mapper,StyleTest.testUppercase,"    @Test
    public void testUppercase() {
        for (String field : fields) {
            Assert.assertEquals(field.toUpperCase(), StringUtil.convertByStyle(field, Style.uppercase));
        }
    }
",non-flaky,5
60897,apache_druid,ThriftInputRowParserTest.testGetThriftClass,"  @Test
  public void testGetThriftClass() throws Exception
  {
    ThriftInputRowParser parser1 = new ThriftInputRowParser(
        parseSpec,
        ""example/book.jar"",
        ""org.apache.druid.data.input.thrift.Book""
    );
    Assert.assertEquals(""org.apache.druid.data.input.thrift.Book"", parser1.getThriftClass().getName());

    ThriftInputRowParser parser2 = new ThriftInputRowParser(parseSpec, null, ""org.apache.druid.data.input.thrift.Book"");
    Assert.assertEquals(""org.apache.druid.data.input.thrift.Book"", parser2.getThriftClass().getName());
  }
",non-flaky,5
99788,apache_cassandra,MessagingServiceTest.listenPlainConnection,"    @Test
    public void listenPlainConnection() throws InterruptedException
    {
        ServerEncryptionOptions serverEncryptionOptions = new ServerEncryptionOptions()
                                                          .withInternodeEncryption(ServerEncryptionOptions.InternodeEncryption.none);
        listen(serverEncryptionOptions, false);
    }
",non-flaky,5
112086,apache_shardingsphere-elasticjob,JobShardingStrategyFactoryTest.assertGetStrategySuccess,"    @Test
    public void assertGetStrategySuccess() {
        assertThat(JobShardingStrategyFactory.getStrategy(AverageAllocationJobShardingStrategy.class.getName()), instanceOf(AverageAllocationJobShardingStrategy.class));
    }
",non-flaky,5
33901,apache_camel,FhirReadIT.testResourceByUrlAndStringResource,"    @Test
    public void testResourceByUrlAndStringResource() throws Exception {
        final Map<String, Object> headers = new HashMap<>();
        // parameter type is String
        headers.put(""CamelFhir.resourceClass"", ""Patient"");
        // parameter type is String
        headers.put(""CamelFhir.url"", this.patient.getId());

        Patient result = requestBodyAndHeaders(""direct://RESOURCE_BY_URL_AND_STRING_RESOURCE"", null, headers);

        assertValidResponse(result);
    }
",non-flaky,5
118714,netty_netty,SocketTest.testKeepAlive,"    @Test
    public void testKeepAlive() throws Exception {
        assertFalse(socket.isKeepAlive());
        socket.setKeepAlive(true);
        assertTrue(socket.isKeepAlive());
    }
",non-flaky,5
170545,eclipse_jetty.project,TestServletAnnotations.testWebServletAnnotationNoMappings,"    @Test
    public void testWebServletAnnotationNoMappings() throws Exception
    {
        //an existing servlet OF THE SAME NAME has no mappings, therefore all mappings in the annotation
        //should be accepted
        WebAppContext wac = new WebAppContext();
        ServletHolder servlet = new ServletHolder();
        servlet.setName(""foo"");
        wac.getServletHandler().addServlet(servlet);

        WebServletAnnotation annotation = new WebServletAnnotation(wac, ""org.eclipse.jetty.annotations.ServletD"", null);
        annotation.apply();

        ServletMapping[] resultMappings = wac.getServletHandler().getServletMappings();
        assertEquals(1, resultMappings.length);
        assertEquals(2, resultMappings[0].getPathSpecs().length);
        for (String s : resultMappings[0].getPathSpecs())
        {
            assertThat(s, anyOf(is(""/""), is(""/bah/*"")));
        }
    }
",non-flaky,5
112637,tbsalling_aismessages,AddressedBinaryMessageTest.canDecodeAsmNumberOfPersonsOnboard,"    @Test
    public void canDecodeAsmNumberOfPersonsOnboard() {
        AISMessage aisMessage = AISMessage.create(NMEAMessage.fromString(""!AIVDM,1,1,,B,63bump80OEGr06P060,4*79""));
        System.out.println(aisMessage.toString());

        assertTrue(aisMessage instanceof AddressedBinaryMessage);
        AddressedBinaryMessage addressedBinaryMessage = (AddressedBinaryMessage) aisMessage;
        assertEquals(1, addressedBinaryMessage.getDesignatedAreaCode().intValue());
        assertEquals(40, addressedBinaryMessage.getFunctionalId().intValue());

        ApplicationSpecificMessage asm = addressedBinaryMessage.getApplicationSpecificMessage();
        assertEquals(1, asm.getDesignatedAreaCode());
        assertEquals(40, asm.getFunctionalId());

        assertTrue(asm instanceof NumberOfPersonsOnBoard);
        NumberOfPersonsOnBoard numberOfPersonsOnBoard = (NumberOfPersonsOnBoard) asm;
        assertEquals(""0000000000011000"", numberOfPersonsOnBoard.getBinaryData());
        assertEquals(Integer.valueOf(3), numberOfPersonsOnBoard.getNumberOfPersons());
   }
",non-flaky,5
86125,graylog2_graylog2-server,LegacyAlertConditionMigratorTest.runWithMigrationStatus,"    @Test
    public void runWithMigrationStatus() {
        final int migratedConditions = 9; // Only 8 because we pass one migrated condition in
        final int migratedCallbacks = 3;  // Only 2 because we pass one migrated callback in

        assertThat(migrator.run(Collections.singleton(""00000000-0000-0000-0000-000000000002""), Collections.singleton(""54e3deadbeefdeadbeef0001""))).satisfies(result -> {
            assertThat(result.completedAlertConditions()).containsOnly(
                    ""00000000-0000-0000-0000-000000000001"",
                    ""00000000-0000-0000-0000-000000000002"",
                    ""00000000-0000-0000-0000-000000000003"",
                    ""00000000-0000-0000-0000-000000000004"",
                    ""00000000-0000-0000-0000-000000000005"",
                    ""00000000-0000-0000-0000-000000000006"",
                    ""00000000-0000-0000-0000-000000000007"",
                    ""00000000-0000-0000-0000-000000000008"",
                    ""00000000-0000-0000-0000-000000000009"",
                    ""00000000-0000-0000-0000-000000000010""
            );
            assertThat(result.completedAlarmCallbacks()).containsOnly(
                    ""54e3deadbeefdeadbeef0001"",
                    ""54e3deadbeefdeadbeef0002"",
                    ""54e3deadbeefdeadbeef0003"",
                    ""54e3deadbeefdeadbeef0004""
            );
        });

        // Make sure we use the EventDefinitionHandler to create the event definitions
        verify(eventDefinitionHandler, times(migratedConditions)).create(any(EventDefinitionDto.class), any(Optional.class));

        // Make sure we use the NotificationResourceHandler to create the notifications
        verify(notificationResourceHandler, times(migratedCallbacks)).create(any(NotificationDto.class), any(Optional.class));

        assertThat(eventDefinitionService.streamAll().count()).isEqualTo(migratedConditions);
        assertThat(notificationService.streamAll().count()).isEqualTo(migratedCallbacks);
    }
",non-flaky,5
110830,opensource4you_astraea,ArgumentUtilTest.testParse,"  @Test
  public void testParse() {
    var param =
        ArgumentUtil.parseArgument(new FakeParameter(), new String[] {""--require"", ""require""});
    Assertions.assertEquals(""require"", param.require);
  }
",non-flaky,5
113699,salesforce_reactive-grpc,ExampleInstrumentedTest.useAppContext,"    @Test
    public void useAppContext() {
        // Context of the app under test.
        Context appContext = InstrumentationRegistry.getTargetContext();

        assertEquals(""demo.client.android"", appContext.getPackageName());
    }
",non-flaky,5
106593,Alluxio_alluxio,HdfsProxyUserValidationTaskTest.wildcardProxyGroups,"  @Test
  public void wildcardProxyGroups() {
    String userName = System.getProperty(""user.name"");

    // Proxy groups configured but not users
    prepareHdfsConfFiles(ImmutableMap.of(
            String.format(""hadoop.proxyuser.%s.groups"", userName), ""*""));

    HdfsProxyUserValidationTask task =
            new HdfsProxyUserValidationTask(""hdfs://namenode:9000/alluxio"", mConf);
    ValidationTaskResult result = task.validateImpl(ImmutableMap.of());
    assertEquals(ValidationUtils.State.OK, result.getState());
  }
",non-flaky,5
76720,quarkusio_quarkus,QuarkusCodestartBuildIT.testRunAloneCodestartsJava,"    @ParameterizedTest
    public void testRunAloneCodestartsJava(String codestart) throws Exception {
        generateProjectRunTests(""maven"", ""java"", singletonList(codestart));
    }
",non-flaky,5
95678,togglz_togglz,TogglzRuleWithAnnotationTest.shouldActivateMultipleFeatures,"    @Test
    public void shouldActivateMultipleFeatures()
    {
        assertTrue(MyFeatures.ONE.isActive());
        assertTrue(MyFeatures.TWO.isActive());
    }
",non-flaky,5
86052,graylog2_graylog2-server,NotificationGracePeriodServiceTest.insideThenInsideGracePeriod,"    @Test
    public void insideThenInsideGracePeriod() {
        final NotificationGracePeriodService notificationGracePeriodService = new NotificationGracePeriodService();

        when(settings.gracePeriodMs()).thenReturn(10L);
        when(definition.notificationSettings()).thenReturn(settings);
        when(definition.id()).thenReturn(""1234"");

        final Event event = new TestEvent(DateTime.now(UTC), ""testkey"");
        final Event event2 = new TestEvent(event.getEventTimestamp().plus(5L), ""testkey"");
        final Event event3 = new TestEvent(event2.getEventTimestamp().plus(4L), ""testkey"");

        assertThat(notificationGracePeriodService.inGracePeriod(definition, ""5678"", event)).isFalse();
        assertThat(notificationGracePeriodService.inGracePeriod(definition, ""5678"", event2)).isTrue();
        assertThat(notificationGracePeriodService.inGracePeriod(definition, ""5678"", event3)).isTrue();
    }
",non-flaky,5
77691,pholser_junit-quickcheck,PrimitivePropertyParameterTypesTest.shouldHold,"    @Test public void rangedPrimitiveCharacter() {
        @Property public void shouldHold(@InRange(minChar = 'a', maxChar = 'z') char ch) {
            assertThat(ch, allOf(greaterThanOrEqualTo('a'), lessThanOrEqualTo('z')));
        }
",non-flaky,5
160362,ConsenSys_teku,SlashingProtectionImporterTest.shouldFailWithParseError,"  @Test
  public void shouldFailWithParseError(@TempDir final Path tempDir)
      throws URISyntaxException, IOException {
    final String errorString = loadAndGetErrorText(""minimal_invalidKey.json"", tempDir);
    assertThat(errorString).startsWith(""Failed to load data"");
  }
",non-flaky,5
212,square_okhttp,HttpOverHttp2Test.recoverFromCancelReusesConnection,"@Test
public void recoverFromCancelReusesConnection() throws Exception {
    CountDownLatch responseDequeuedLatch = new CountDownLatch(1);
    CountDownLatch requestCanceledLatch = new CountDownLatch(1);
    QueueDispatcher dispatcher = new QueueDispatcher() {
        @Override
        public MockResponse dispatch(RecordedRequest request) throws InterruptedException {
            MockResponse response = super.dispatch(request);
            responseDequeuedLatch.countDown();
            requestCanceledLatch.await();
            return response;
        }
    };
    server.setDispatcher(dispatcher);
    dispatcher.enqueueResponse(new MockResponse().setBodyDelay(10, TimeUnit.SECONDS).setBody(""abc""));
    dispatcher.enqueueResponse(new MockResponse().setBody(""def""));
    client = client.newBuilder().dns(new DoubleInetAddressDns()).build();
    callAndCancel(0, responseDequeuedLatch, requestCanceledLatch);
    Call call = client.newCall(new Request.Builder().url(server.url(""/"")).build());
    Response response = call.execute();
    assertThat(response.body().string()).isEqualTo(""def"");
    assertThat(server.takeRequest().getSequenceNumber()).isEqualTo(1);
}",async wait,0
162426,testcontainers_testcontainers-java,GenericContainerRuleTest.environmentFromMapTest,"    @Test
    public void environmentFromMapTest() throws IOException {
        String line = getReaderForContainerPort80(alpineEnvVarFromMap).readLine();

        assertEquals(""Environment variables can be passed into a command from a map"", ""42 and 50"", line);
    }
",non-flaky,5
53176,cloudfoundry_uaa,JsonDateDeserializerTest.testParsing,"    @Test
    public void testParsing() throws IOException, ParseException {
        Date d = JsonDateDeserializer.getDate(testDateString, new JsonLocation(null, 22, 0, 0));
        Assert.assertEquals(new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"").parse(testDateString).getTime(), (long) d.getTime());
    }
",non-flaky,5
308,apache_camel,FtpReconnectAttemptServerStoppedIT.testFromFileToFtp,"@Test
public void testFromFileToFtp() throws Exception {
    service.suspend();
    template.sendBodyAndHeader(""file:{{ftp.root.dir}}/reconnect"", ""Hello World"", FILE_NAME, ""hello.txt"");
    MockEndpoint mock = getMockEndpoint(""mock:result"");
    mock.expectedMessageCount(0);
    Thread.sleep(3000);
    assertMockEndpointsSatisfied();
    mock.reset();
    mock.expectedMessageCount(1);
    service.resume();
    Thread.sleep(3000);
    assertMockEndpointsSatisfied();
}",async wait,0
31011,camunda-cloud_zeebe,ArrayValueTest.shouldIncreaseInternalBufferWhenAddingToBeginning,"  @Test
  public void shouldIncreaseInternalBufferWhenAddingToBeginning() {
    // given
    final int valueCount = 10_000;
    final List<Integer> generatedList =
        IntStream.iterate(0, (i) -> ++i).limit(valueCount).boxed().collect(Collectors.toList());
    final List<Integer> reverseList = new ArrayList<>(generatedList);
    Collections.reverse(generatedList);

    final Integer[] values = generatedList.toArray(new Integer[valueCount]);

    // when
    for (final Integer value : values) {
      // reset cursor to first position
      array.iterator();
      array.add().setValue(value);
    }

    // then
    encodeAndDecode(array);

    final Integer[] resultValues = reverseList.toArray(new Integer[valueCount]);
    assertIntValues(array, resultValues);
  }
",non-flaky,5
43065,trinodb_trino,BaseConnectorTest.testTableSampleWithFiltering,"    @Test
    public void testTableSampleWithFiltering()
    {
        MaterializedResult emptySample = computeActual(""SELECT DISTINCT orderkey, orderdate FROM orders TABLESAMPLE SYSTEM (99) WHERE orderkey BETWEEN 0 AND 0"");
        MaterializedResult halfSample = computeActual(""SELECT DISTINCT orderkey, orderdate FROM orders TABLESAMPLE SYSTEM (50) WHERE orderkey BETWEEN 0 AND 9999999999"");
        MaterializedResult all = computeActual(""SELECT orderkey, orderdate FROM orders"");

        assertEquals(emptySample.getMaterializedRows().size(), 0);
        // Assertions need to be loose here because SYSTEM sampling random selects data on split boundaries. In this case either all the data will be selected, or
        // none of it. Sampling with a 100% ratio is ignored, so that also cannot be used to guarantee results.
        assertTrue(all.getMaterializedRows().size() >= halfSample.getMaterializedRows().size());
    }
",non-flaky,5
19476,eclipse_xtext-core,AbstractReaderTest.matches,"	@Test public void testLoadMatchNone() throws Exception {
			public boolean matches(URI uri) {
				return false;
			}
",non-flaky,5
175799,GoogleCloudPlatform_google-cloud-eclipse,RelativeFileFieldSetterTest.testFileDialogFilterSet_absolutePathInField,"  @Test
  public void testFileDialogFilterSet_absolutePathInField() {
    when(field.getText()).thenReturn(basePath + ""/deploy/temp/app.yaml"");
    when(dialog.open()).thenReturn(null);

    new RelativeFileFieldSetter(field, basePath, dialog).widgetSelected(event);
    // ""basePath"" is the first physically existing directory.
    verify(dialog).setFilterPath(basePath.toString());

    basePath.append(""deploy"").toFile().mkdir();
    new RelativeFileFieldSetter(field, basePath, dialog).widgetSelected(event);
    verify(dialog).setFilterPath(basePath + ""/deploy"");
  }
",non-flaky,5
170462,eclipse_jetty.project,MBeanContainerLifeCycleTest.prepare,"    @BeforeEach
    public void prepare() throws Exception
    {
        container = new ContainerLifeCycle();
        mbeanServer = ManagementFactory.getPlatformMBeanServer();
        MBeanContainer mbeanContainer = new MBeanContainer(mbeanServer);
        container.addBean(mbeanContainer);
        container.start();
    }
",non-flaky,5
159615,liquibase_liquibase,IntXMLChangeLogSAXParserTest.sampleChangeLogs,"    @Test
    public void sampleChangeLogs() throws Exception {
        new XMLChangeLogSAXParser().parse(""changelogs/cache/complete/root.changelog.xml"", new ChangeLogParameters(), new JUnitResourceAccessor());
        new XMLChangeLogSAXParser().parse(""changelogs/db2/complete/root.changelog.xml"", new ChangeLogParameters(), new JUnitResourceAccessor());
        new XMLChangeLogSAXParser().parse(""changelogs/derby/complete/root.changelog.xml"", new ChangeLogParameters(), new JUnitResourceAccessor());
        new XMLChangeLogSAXParser().parse(""changelogs/firebird/complete/root.changelog.xml"", new ChangeLogParameters(), new JUnitResourceAccessor());
        new XMLChangeLogSAXParser().parse(""changelogs/h2/complete/root.changelog.xml"", new ChangeLogParameters(), new JUnitResourceAccessor());
        new XMLChangeLogSAXParser().parse(""changelogs/hsqldb/complete/root.changelog.xml"", new ChangeLogParameters(), new JUnitResourceAccessor());
        new XMLChangeLogSAXParser().parse(""changelogs/maxdb/complete/root.changelog.xml"", new ChangeLogParameters(), new JUnitResourceAccessor());
        new XMLChangeLogSAXParser().parse(""changelogs/mysql/complete/root.changelog.xml"", new ChangeLogParameters(), new JUnitResourceAccessor());
        new XMLChangeLogSAXParser().parse(""changelogs/oracle/complete/root.changelog.xml"", new ChangeLogParameters(), new JUnitResourceAccessor());
        new XMLChangeLogSAXParser().parse(""changelogs/pgsql/complete/root.changelog.xml"", new ChangeLogParameters(), new JUnitResourceAccessor());
        new XMLChangeLogSAXParser().parse(""changelogs/sybase/complete/root.changelog.xml"", new ChangeLogParameters(), new JUnitResourceAccessor());
        new XMLChangeLogSAXParser().parse(""changelogs/asany/complete/root.changelog.xml"", new ChangeLogParameters(), new JUnitResourceAccessor());
        new XMLChangeLogSAXParser().parse(""changelogs/unsupported/complete/root.changelog.xml"", new ChangeLogParameters(), new JUnitResourceAccessor());
    }
",non-flaky,5
133952,CorfuDB_CorfuDB,BaseHandlerTest.testHandleBootstrappedError,"    @Test
    public void testHandleBootstrappedError() {
        ResponseMsg response = getResponseMsg(
                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.IGNORE),
                getBootstrappedErrorMsg()
        );

        baseHandler.handleMessage(response, mockChannelHandlerContext);

        // Verify that the correct request was completed exceptionally (once)
        // with the expected exception
        verify(mockClientRouter, never()).completeRequest(anyLong(), any());
        verify(mockClientRouter).completeExceptionally(
                eq(response.getHeader().getRequestId()), any(AlreadyBootstrappedException.class));
    }
",non-flaky,5
170514,eclipse_jetty.project,TestAnnotationParser.testModuleInfoClassInJar,"    @Test
    public void testModuleInfoClassInJar() throws Exception
    {
        File badClassesJar = MavenTestingUtils.getTestResourceFile(""jdk9/slf4j-api-1.8.0-alpha2.jar"");
        AnnotationParser parser = new AnnotationParser();
        Set<Handler> emptySet = Collections.emptySet();
        parser.parse(emptySet, badClassesJar.toURI());
        // Should throw no exceptions, and happily skip the module-info.class files
    }
",non-flaky,5
160420,ConsenSys_teku,BlockSelectorFactoryTest.genesisSelector_shouldGetSlotZero,"  @Test
  public void genesisSelector_shouldGetSlotZero() throws ExecutionException, InterruptedException {
    when(client.getBlockAtSlotExact(UInt64.ZERO))
        .thenReturn(SafeFuture.completedFuture(Optional.of(block)));
    List<SignedBeaconBlock> blockList = blockSelectorFactory.genesisSelector().getBlock().get();
    verify(client).getBlockAtSlotExact(UInt64.ZERO);
    assertThat(blockList).containsExactly(block);
  }
",non-flaky,5
114101,aws_aws-sdk-java-v2,TableSchemaTest.fromClass_invalidClassThrowsException,"    @Test
    public void fromClass_invalidClassThrowsException() {
        exception.expect(IllegalArgumentException.class);
        exception.expectMessage(""InvalidBean"");
        TableSchema.fromClass(InvalidBean.class);
    }
",non-flaky,5
156180,soot-oss_soot,ConstantPoolTest.loadClass,"  @Test
  public void loadClass() {
    G.reset();
    // Location of the rt.jar
    String rtJar = System.getProperty(""java.home"") + File.separator + ""lib"" + File.separator + ""rt.jar"";

    // Run Soot and print output to .asm-files.
    Main.main(new String[] { ""-cp"", getClassPathFolder() + File.pathSeparator + rtJar, ""-process-dir"", getTargetFolder(),
        ""-src-prec"", ""only-class"", ""-output-format"", ""class"", ""-asm-backend"", ""-allow-phantom-refs"", ""-java-version"",
        getRequiredJavaVersion(), getTargetClass() });

    File file = new File(""./sootOutput/ConstantPool.class"");
    URL[] urls = null;
    try {
      URL url = file.toURI().toURL();
      urls = new URL[] { url };
      URLClassLoader cl = new URLClassLoader(urls);

      cl.loadClass(getTargetClass());

      // cl.close();
      // Java 6 backwards compatibility hack
      try {
        for (Method m : URLClassLoader.class.getDeclaredMethods()) {
          if (m.getName().equals(""close"")) {
            m.invoke(cl);
            break;
          }
        }
      } catch (Exception e) {
      }
      return;

    } catch (MalformedURLException e) {
      logger.error(e.getMessage(), e);
    } catch (ClassNotFoundException e) {
      logger.error(e.getMessage(), e);
    }

    fail();

  }
",non-flaky,5
31009,camunda-cloud_zeebe,ArrayValueTest.shouldUpdateWithBiggerValue,"  @Test
  public void shouldUpdateWithBiggerValue() {
    // given
    final ArrayValue<StringValue> array = new ArrayValue<>(new StringValue());
    addStringValues(array, ""foo"", ""bar"", ""baz"");

    // when
    final Iterator<StringValue> iterator = array.iterator();
    StringValue element = iterator.next();
    element.wrap(BufferUtil.wrapString(""hello""));
    element = iterator.next();
    element.wrap(BufferUtil.wrapString(""world""));
    element = iterator.next();
    element.wrap(BufferUtil.wrapString(""friend""));

    // then
    encodeAndDecode(array);
    assertStringValues(array, ""hello"", ""world"", ""friend"");
  }
",non-flaky,5
98668,nutzam_nutz,BaseTest.test_http_method_override,"    @Test
    public void test_http_method_override() {
        Response resp = post(""/common/httpmethods?_method=DELETE"", new NutMap(""_method"", ""DELETE""));
        assertEquals(200, resp.getStatus());
        assertEquals(""DELETE"", resp.getContent());
    }
",non-flaky,5
98606,nutzam_nutz,El2Test.testIssue168,"    @Test
    public void testIssue168() {
        assertEquals(El.eval(""0.1354*((70-8)%70)*100""), 0.1354 * ((70 - 8) % 70) * 100);
        assertEquals(El.eval(""0.1354*((70d-8)/70)*100""), 0.1354 * ((70d - 8) / 70) * 100);
        assertEquals(El.eval(""0.5006*(70/600*100)""), 0.5006 * (70 / 600 * 100));
    }
",non-flaky,5
162456,testcontainers_testcontainers-java,KeyValuesStatementTest.keyWithNewLinesTest,"    @Test
    public void keyWithNewLinesTest() throws Exception {
        assertStatement(new KeyValuesStatement(""TEST"", Collections.singletonMap(""key\nwith\nnewlines"", ""1"")));
    }
",non-flaky,5
77711,pholser_junit-quickcheck,PrimitivePropertyParameterTypesTest.shouldHold,"    @Test public void rangedPrimitiveFloat() {
        @Property public void shouldHold(@InRange(minFloat = -2.51234F, maxFloat = 9.23423F) float f) {
            assertThat(f, allOf(greaterThanOrEqualTo(-2.51234F), lessThan(9.23423F)));
        }
",non-flaky,5
98621,nutzam_nutz,El2Test.test_map_get,"    @Test
    public void test_map_get() {
        Map<String, Object> map = new HashMap<String, Object>();
        map.put(""wendal"", ""http://wendal.net"");
        List<String> list = new ArrayList<String>();
        list.add(""abc"");
        assertEquals(""http://wendal.net"", El.eval(Lang.context().set(""ctx"", map), ""ctx['wendal']""));
        assertEquals(""abc"", El.eval(Lang.context().set(""list"", list), ""list[0]""));
    }
",non-flaky,5
92619,FasterXML_jackson-databind,TestSubtypesExternalPropertyMissingProperty.testDeserializationPresent,"    @Test
    public void testDeserializationPresent() throws Exception {
        ObjectReader r = READER.without(DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY);
        checkOrangeBox(r);
        checkAppleBox(r);

        r = READER.with(DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY);
        checkOrangeBox(r);
        checkAppleBox(r);
    }
",non-flaky,5
59588,looly_hutool,QrCodeUtilTest.generateTest,"	@Test
	public void generateTest() {
		final BufferedImage image = QrCodeUtil.generate(""https://hutool.cn/"", 300, 300);
		Assert.assertNotNull(image);
	}
",non-flaky,5
206,apache_kafka,testGracefulClose,"@Test
public void testGracefulClose() throws Exception {
    int maxReceiveCountAfterClose = 0;
    for (int i = 6; i <= 100 && maxReceiveCountAfterClose < 5; i++) {
        int receiveCount = 0;
        KafkaChannel channel = createConnectionWithPendingReceives(i);
        selector.poll(1000);
        assertEquals(1, selector.completedReceives().size());
        server.closeConnections();
        while (selector.disconnected().isEmpty()) {
            selector.poll(1);
            receiveCount += selector.completedReceives().size();
            assertTrue(""Too many completed receives in one poll"", selector.completedReceives().size() <= 1);
        }
        assertEquals(channel.id(), selector.disconnected().keySet().iterator().next());
        maxReceiveCountAfterClose = Math.max(maxReceiveCountAfterClose, receiveCount);
    }
    assertTrue(""Too few receives after close: "" + maxReceiveCountAfterClose, maxReceiveCountAfterClose >= 5);
}",async wait,0
77663,pholser_junit-quickcheck,OffsetTimePropertyParameterTypesTest.shouldHold,"    @Test public void offsetTime() {
        @Property public void shouldHold(OffsetTime t) {
        }
",non-flaky,5
110132,Wikidata_wikidata-toolkit,ClientConfigurationTest.testUnknownArguments,"	@Test
	public void testUnknownArguments() {
		String[] args = new String[] { ""--unknown"", ""-foo"" };
		ClientConfiguration config = new ClientConfiguration(args);
		assertFalse(config.getOfflineMode());
		assertEquals(null, config.getDumpDirectoryLocation());
		assertFalse(config.isQuiet());
	}
",non-flaky,5
135024,undertow-io_undertow,Http2ClientTestCase.run,"    @Test
    public void testSimpleBasic() throws Exception {
        //
        final UndertowClient client = createClient();

        final List<ClientResponse> responses = new CopyOnWriteArrayList<>();
        final CountDownLatch latch = new CountDownLatch(10);
        final ClientConnection connection = client.connect(ADDRESS, worker, new UndertowXnioSsl(worker.getXnio(), OptionMap.EMPTY, DefaultServer.getClientSSLContext()), DefaultServer.getBufferPool(), OptionMap.create(UndertowOptions.ENABLE_HTTP2, true)).get();
        try {
            connection.getIoThread().execute(new Runnable() {
                @Override
                public void run() {
                    for (int i = 0; i < 10; i++) {
                        final ClientRequest request = new ClientRequest().setMethod(Methods.GET).setPath(MESSAGE);
                        request.getRequestHeaders().put(Headers.HOST, DefaultServer.getHostAddress());
                        connection.sendRequest(request, createClientCallback(responses, latch));
                    }
                }
",non-flaky,5
156378,apache_commons-lang,ClassPathUtilsTest.testToFullyQualifiedNameClassString,"    @Test
    public void testToFullyQualifiedNameClassString() {
        final String expected = ""org.apache.commons.lang3.Test.properties"";
        final String actual = ClassPathUtils.toFullyQualifiedName(ClassPathUtils.class, ""Test.properties"");

        assertEquals(expected, actual);
    }
",non-flaky,5
179442,abel533_Mapper,AggregationMapperTest.testAvg,"    @Test
    public void testAvg() {
        SqlSession sqlSession = getSqlSession();
        try {
            UserMapper mapper = sqlSession.getMapper(UserMapper.class);
            AggregateCondition aggregateCondition = AggregateCondition.builder().
                    aggregateBy(""id"").aggregateType(AggregateType.AVG);
            Example example = new Example(User.class);
            List<User> m = mapper.selectAggregationByExample(example, aggregateCondition);
            Assert.assertEquals(1, m.size());
            Assert.assertEquals(new Long(3), m.get(0).getId());
        } finally {
            sqlSession.close();
        }
    }
",non-flaky,5
112717,hwang-pku_ormlite-core,DatabaseConnectionProxyFactoryTest.testBasic,"	@Test
	public void testBasic() throws Exception {
		Dao<Foo, Object> dao = createDao(Foo.class, true);
		Foo foo = new Foo();
		foo.val = 100;

		ConnectionProxy.lastValue = 0;
		assertEquals(1, dao.create(foo));
		/*
		 * After we create an instance of foo, we check to see that our proxy was able to intercept the val argument.
		 */
		assertEquals(foo.val, ConnectionProxy.lastValue);
	}
",non-flaky,5
156108,soot-oss_soot,DefaultInterfaceTest.superClassInterfaceWithSameSignatureTest,"  @Test
  public void superClassInterfaceWithSameSignatureTest() {
    String testClass = ""soot.defaultInterfaceMethods.SuperClassInterfaceSameSignature"";
    String defaultClass = ""soot.defaultInterfaceMethods.PrintInterface"";
    String defaultSuperClass = ""soot.defaultInterfaceMethods.DefaultPrint"";
    String superClassImplementsInterface = ""soot.defaultInterfaceMethods.SuperClassImplementsInterface"";

    final SootMethod target =
        prepareTarget(
            methodSigFromComponents(testClass, voidType, mainClass),
            testClass,
            defaultClass,
            superClassImplementsInterface);

    SootMethod defaultSuperMainMethod =
        Scene.v()
            .getMethod(""<soot.defaultInterfaceMethods.SuperClassImplementsInterface: void main()>"");
    SootMethod mainMethod =
        Scene.v()
            .getMethod(
                ""<soot.defaultInterfaceMethods.SuperClassImplementsInterface: void print()>"");
    SootMethod defaultMethod =
        Scene.v().getMethod(""<soot.defaultInterfaceMethods.PrintInterface: void print()>"");
    SootMethod defaultSuperClassMethod =
        Scene.v().getMethod(""<soot.defaultInterfaceMethods.DefaultPrint: void print()>"");

    Body mainBody = target.retrieveActiveBody();
    SootMethod refMainMethod = resolveMethodRefInBody(mainBody.getUnits(), ""void print()"");

    SootMethod resolvedMethod =
        VirtualCalls.v()
            .resolveNonSpecial(Scene.v().getRefType(testClass), defaultMethod.makeRef(), false);
    SootMethod resolvedSuperClassDefaultMethod =
        VirtualCalls.v()
            .resolveNonSpecial(
                Scene.v().getRefType(testClass), defaultSuperClassMethod.makeRef(), false);

    SootMethod concreteImpl =
        Scene.v()
            .getFastHierarchy()
            .resolveConcreteDispatch(Scene.v().getSootClass(testClass), defaultMethod);

    Set<SootMethod> abstractImpl =
        Scene.v()
            .getFastHierarchy()
            .resolveAbstractDispatch(Scene.v().getSootClass(defaultClass), defaultMethod);
    Set<SootMethod> abstractImplSuperClass =
        Scene.v()
            .getFastHierarchy()
            .resolveAbstractDispatch(
                Scene.v().getSootClass(defaultSuperClass), defaultSuperClassMethod);

    boolean edgeMainToSuperClassPrint = checkInEdges(mainMethod, target);
    boolean edgeMainToDefaultPrint = checkInEdges(defaultMethod, target);
    boolean edgeMainToSuperDefaultPrint = checkInEdges(defaultSuperClassMethod, target);
    boolean edgeSuperMainToSuperPrint =
        checkInEdges(defaultSuperClassMethod, defaultSuperMainMethod);

    final ReachableMethods reachableMethods = Scene.v().getReachableMethods();

    List<SootMethod> targetMethods =
        new ArrayList<SootMethod>() {
          {
            add(mainMethod);
            add(defaultMethod);
            add(defaultSuperClassMethod);
          }
        };

    ArrayList<Boolean> edgeNotPresent =
        new ArrayList<Boolean>() {
          {
            add(edgeMainToDefaultPrint);
            add(edgeMainToSuperDefaultPrint);
            add(edgeSuperMainToSuperPrint);
          }
        };

    Map<SootMethod, SootMethod> resolvedMethods =
        new HashMap<SootMethod, SootMethod>() {
          {
            put(mainMethod, resolvedMethod);
            put(resolvedSuperClassDefaultMethod, resolvedMethod);
          }
        };

    for (SootMethod targetMethod : targetMethods) {
      assertNotNull(targetMethod);
    }
    assertEquals(targetMethods.get(0), refMainMethod);
    assertEquals(targetMethods.get(0).getName(), ""print"");
    assertTrue(edgeMainToSuperClassPrint);
    for (boolean notPresent : edgeNotPresent) {
      assertFalse(notPresent);
    }
    assertEquals(targetMethods.get(0), concreteImpl);
    assertNotEquals(targetMethods.get(1), concreteImpl);
    assertTrue(
        abstractImpl.contains(
            Scene.v()
                .getMethod(
                    ""<soot.defaultInterfaceMethods.SuperClassImplementsInterface: void print()>"")));
    assertTrue(
        abstractImplSuperClass.contains(
            Scene.v()
                .getMethod(
                    ""<soot.defaultInterfaceMethods.SuperClassImplementsInterface: void print()>"")));
  }
",non-flaky,5
350,apache_hadoop,TestNetworkTopology.testSortByDistance,"  @Test
  public void testSortByDistance() throws Exception {
    DatanodeDescriptor[] testNodes = new DatanodeDescriptor[3];
    
    // array contains both local node & local rack node
    testNodes[0] = dataNodes[1];
    testNodes[1] = dataNodes[2];
    testNodes[2] = dataNodes[0];
    cluster.setRandomSeed(0xDEADBEEF);
    cluster.sortByDistance(dataNodes[0], testNodes, testNodes.length);
    assertTrue(testNodes[0] == dataNodes[0]);
    assertTrue(testNodes[1] == dataNodes[1]);
    assertTrue(testNodes[2] == dataNodes[2]);

    // array contains both local node & local rack node & decommissioned node
    DatanodeDescriptor[] dtestNodes = new DatanodeDescriptor[5];
    dtestNodes[0] = dataNodes[8];
    dtestNodes[1] = dataNodes[12];
    dtestNodes[2] = dataNodes[11];
    dtestNodes[3] = dataNodes[9];
    dtestNodes[4] = dataNodes[10];
    cluster.setRandomSeed(0xDEADBEEF);
    cluster.sortByDistance(dataNodes[8], dtestNodes, dtestNodes.length - 2);
    assertTrue(dtestNodes[0] == dataNodes[8]);
    assertTrue(dtestNodes[1] == dataNodes[11]);
    assertTrue(dtestNodes[2] == dataNodes[12]);
    assertTrue(dtestNodes[3] == dataNodes[9]);
    assertTrue(dtestNodes[4] == dataNodes[10]);

    // array contains local node
    testNodes[0] = dataNodes[1];
    testNodes[1] = dataNodes[3];
    testNodes[2] = dataNodes[0];
    cluster.setRandomSeed(0xDEADBEEF);
    cluster.sortByDistance(dataNodes[0], testNodes, testNodes.length);
    assertTrue(testNodes[0] == dataNodes[0]);
    assertTrue(testNodes[1] == dataNodes[1]);
    assertTrue(testNodes[2] == dataNodes[3]);

    // array contains local rack node
    testNodes[0] = dataNodes[5];
    testNodes[1] = dataNodes[3];
    testNodes[2] = dataNodes[1];
    cluster.setRandomSeed(0xDEADBEEF);
    cluster.sortByDistance(dataNodes[0], testNodes, testNodes.length);
    assertTrue(testNodes[0] == dataNodes[1]);
    assertTrue(testNodes[1] == dataNodes[3]);
    assertTrue(testNodes[2] == dataNodes[5]);

    // array contains local rack node which happens to be in position 0
    testNodes[0] = dataNodes[1];
    testNodes[1] = dataNodes[5];
    testNodes[2] = dataNodes[3];
    cluster.setRandomSeed(0xDEADBEEF);
    cluster.sortByDistance(dataNodes[0], testNodes, testNodes.length);
    assertTrue(testNodes[0] == dataNodes[1]);
    assertTrue(testNodes[1] == dataNodes[3]);
    assertTrue(testNodes[2] == dataNodes[5]);

    // Same as previous, but with a different random seed to test randomization
    testNodes[0] = dataNodes[1];
    testNodes[1] = dataNodes[5];
    testNodes[2] = dataNodes[3];
    cluster.setRandomSeed(0xDEAD);
    cluster.sortByDistance(dataNodes[0], testNodes, testNodes.length);
    assertTrue(testNodes[0] == dataNodes[1]);
    assertTrue(testNodes[1] == dataNodes[3]);
    assertTrue(testNodes[2] == dataNodes[5]);

    // Array of just rack-local nodes
    // Expect a random first node
    DatanodeDescriptor first = null;
    boolean foundRandom = false;
    for (int i=5; i<=7; i++) {
      testNodes[0] = dataNodes[5];
      testNodes[1] = dataNodes[6];
      testNodes[2] = dataNodes[7];
      cluster.sortByDistance(dataNodes[i], testNodes, testNodes.length);
      if (first == null) {
        first = testNodes[0];
      } else {
        if (first != testNodes[0]) {
          foundRandom = true;
          break;
        }
      }
    }
    assertTrue(""Expected to find a different first location"", foundRandom);

    // Array of just remote nodes
    // Expect random first node
    first = null;
    for (int i = 1; i <= 4; i++) {
      testNodes[0] = dataNodes[13];
      testNodes[1] = dataNodes[14];
      testNodes[2] = dataNodes[15];
      cluster.sortByDistance(dataNodes[i], testNodes, testNodes.length);
      if (first == null) {
        first = testNodes[0];
      } else {
        if (first != testNodes[0]) {
          foundRandom = true;
          break;
        }
      }
    }
    assertTrue(""Expected to find a different first location"", foundRandom);

    //Reader is not a datanode, but is in one of the datanode's rack.
    testNodes[0] = dataNodes[0];
    testNodes[1] = dataNodes[5];
    testNodes[2] = dataNodes[8];
    Node rackClient = new NodeBase(""/d3/r1/25.25.25"");
    cluster.setRandomSeed(0xDEADBEEF);
    cluster.sortByDistance(rackClient, testNodes, testNodes.length);
    assertTrue(testNodes[0] == dataNodes[8]);
    assertTrue(testNodes[1] == dataNodes[5]);
    assertTrue(testNodes[2] == dataNodes[0]);

    //Reader is not a datanode , but is in one of the datanode's data center.
    testNodes[0] = dataNodes[8];
    testNodes[1] = dataNodes[5];
    testNodes[2] = dataNodes[0];
    Node dcClient = new NodeBase(""/d1/r2/25.25.25"");
    cluster.setRandomSeed(0xDEADBEEF);
    cluster.sortByDistance(dcClient, testNodes, testNodes.length);
    assertTrue(testNodes[0] == dataNodes[0]);
    assertTrue(testNodes[1] == dataNodes[5]);
    assertTrue(testNodes[2] == dataNodes[8]);

  }
",non-flaky,5
98004,ReactiveX_RxJava,ScanTests.call,"    @Test
    public void testUnsubscribeScan() {

        EventStream.getEventStream(""HTTP-ClusterB"", 20)
                .scan(new HashMap<String, String>(), new Func2<Map<String, String>, Event, Map<String, String>>() {

                    @Override
                    public Map<String, String> call(Map<String, String> accum, Event perInstanceEvent) {
                        accum.put(""instance"", perInstanceEvent.instanceId);
                        return accum;
                    }

                })
                .take(10)
                .toBlockingObservable().forEach(new Action1<Map<String, String>>() {

                    @Override
                    public void call(Map<String, String> v) {
                        System.out.println(v);
                    }
",non-flaky,5
43091,trinodb_trino,AbstractTestIntegrationSmokeTest.testLimit,"    @Test
    public void testLimit()
    {
        assertEquals(computeActual(""SELECT * FROM orders LIMIT 10"").getRowCount(), 10);
    }
",non-flaky,5
76701,quarkusio_quarkus,FooET.foo,"    @Test
    public void foo() {
        given()
                .when().get(""/hello/greeting/foo"")
                .then()
                .statusCode(200)
                .body(is(""hello foo""));
    }
",non-flaky,5
156140,soot-oss_soot,RefTypeTest.testMerge,"	@Test
	public void testMerge() {
		G.reset();
		
		Scene.v().loadNecessaryClasses();
		
		SootClass sc1 = new SootClass(""Class1"");
		SootClass sc2 = new SootClass(""Class2"");
		SootClass sc3 = new SootClass(""Class3"");
		SootClass sc4 = new SootClass(""Class4"");
		SootClass sc5 = new SootClass(""Class5"");
		
		Scene.v().addClass(sc1);
		Scene.v().addClass(sc2);
		Scene.v().addClass(sc3);
		Scene.v().addClass(sc4);
		Scene.v().addClass(sc5);
		
		sc1.setSuperclass(Scene.v().getObjectType().getSootClass());
		sc2.setSuperclass(sc1);
		sc3.setSuperclass(sc2);
		sc4.setSuperclass(sc2);
		sc5.setSuperclass(sc4);
		
		Type tpMerged = sc5.getType().merge(sc3.getType(), Scene.v());
		Assert.assertEquals(""Class2"", ((RefType) tpMerged).getClassName()); 
	}
",non-flaky,5
91406,OpenLCB_OpenLCB_Java,StreamInitiateReplyMessageTest.testCTor,"    @Test
    public void testCTor() {
        NodeID id1 = new NodeID(new byte[]{1, 1, 0, 0, 0, 4});
        NodeID id2 = new NodeID(new byte[]{1, 1, 0, 0, 4, 4});
        StreamInitiateReplyMessage t = new StreamInitiateReplyMessage(id1,id2,0,(byte)0x00,(byte)0x00);
        Assert.assertNotNull(""exists"",t);
    }
",non-flaky,5
162694,OpenAPITools_openapi-generator,ClassModelTest.testClassModel,"    @Test
    public void testClassModel() {
        // TODO: test ClassModel
    }
",non-flaky,5
98015,vert-x3_vertx-mongo-client,MongoClientWithObjectIdTest.testInsertPreexistingID,"  @Test
  public void testInsertPreexistingID() throws Exception {
    String collection = randomCollection();
    mongoClient.createCollection(collection, onSuccess(res -> {
      JsonObject doc = createDoc();
      //Changed to hex string as a random string will not be valid for useObjectId = true
      doc.put(""_id"", new ObjectId().toHexString());
      mongoClient.insert(collection, doc, onSuccess(id -> {
        assertNull(id);
        testComplete();
      }));
    }));
    await();
  }
",non-flaky,5
70831,apache_kafka,WorkerConfigTest.testAdminListenersNotAllowingBlankStrings,"    @Test(expected = ConfigException.class)
    public void testAdminListenersNotAllowingBlankStrings() {
        Map<String, String> props = baseProps();
        props.put(WorkerConfig.ADMIN_LISTENERS_CONFIG, ""http://a.b:9999, ,https://a.b:9999"");
        new WorkerConfig(WorkerConfig.baseConfigDef(), props);
    }
",non-flaky,5
20988,NationalSecurityAgency_timely,QueryResponseTest.testEmptyResponse,"    @Test
    public void testEmptyResponse() throws Exception {
        String r = JsonUtil.getObjectMapper().writeValueAsString(Collections.emptyList());
        Assert.assertEquals(""[]"", r);
    }
",non-flaky,5
110149,Wikidata_wikidata-toolkit,ClientConfigurationTest.testLocalDumpFileLong,"	@Test
	public void testLocalDumpFileLong() {
		DirectoryManagerFactory
				.setDirectoryManagerClass(MockDirectoryManager.class);
		String[] args = new String[] { ""--input"", ""dumptest.json"" };
		ClientConfiguration config = new ClientConfiguration(args);

		MwDumpFile df = config.getLocalDumpFile();

		assertEquals(""dumptest.json"", config.getInputDumpLocation());
		assertTrue(df instanceof MwLocalDumpFile);
		MwLocalDumpFile ldf = (MwLocalDumpFile) df;

		assertEquals(Paths.get(""dumptest.json"").toAbsolutePath(), ldf.getPath());
	}
",non-flaky,5
76695,quarkusio_quarkus,TaggedET.t4,"    @Test
    public void t4() {
        given()
                .when().get(""/hello/greeting/foo"")
                .then()
                .statusCode(200)
                .body(is(""hello foo""));
    }
",non-flaky,5
77704,pholser_junit-quickcheck,PrimitivePropertyParameterTypesTest.shouldHold,"    @Test public void rangedWrapperDouble() {
        @Property public void shouldHold(@InRange(min = ""2.71"", max = ""3.14"") Double d) {
            assertThat(d, allOf(greaterThanOrEqualTo(2.71), lessThan(3.14)));
        }
",non-flaky,5
70848,apache_kafka,WorkerSourceTaskTest.testMetricsGroup,"    @Test
    public void testMetricsGroup() {
        SourceTaskMetricsGroup group = new SourceTaskMetricsGroup(taskId, metrics);
        SourceTaskMetricsGroup group1 = new SourceTaskMetricsGroup(taskId1, metrics);
        for (int i = 0; i != 10; ++i) {
            group.recordPoll(100, 1000 + i * 100);
            group.recordWrite(10);
        }
        for (int i = 0; i != 20; ++i) {
            group1.recordPoll(100, 1000 + i * 100);
            group1.recordWrite(10);
        }
        assertEquals(1900.0, metrics.currentMetricValueAsDouble(group.metricGroup(), ""poll-batch-max-time-ms""), 0.001d);
        assertEquals(1450.0, metrics.currentMetricValueAsDouble(group.metricGroup(), ""poll-batch-avg-time-ms""), 0.001d);
        assertEquals(33.333, metrics.currentMetricValueAsDouble(group.metricGroup(), ""source-record-poll-rate""), 0.001d);
        assertEquals(1000, metrics.currentMetricValueAsDouble(group.metricGroup(), ""source-record-poll-total""), 0.001d);
        assertEquals(3.3333, metrics.currentMetricValueAsDouble(group.metricGroup(), ""source-record-write-rate""), 0.001d);
        assertEquals(100, metrics.currentMetricValueAsDouble(group.metricGroup(), ""source-record-write-total""), 0.001d);
        assertEquals(900.0, metrics.currentMetricValueAsDouble(group.metricGroup(), ""source-record-active-count""), 0.001d);

        // Close the group
        group.close();

        for (MetricName metricName : group.metricGroup().metrics().metrics().keySet()) {
            // Metrics for this group should no longer exist
            assertFalse(group.metricGroup().groupId().includes(metricName));
        }
        // Sensors for this group should no longer exist
        assertNull(group.metricGroup().metrics().getSensor(""sink-record-read""));
        assertNull(group.metricGroup().metrics().getSensor(""sink-record-send""));
        assertNull(group.metricGroup().metrics().getSensor(""sink-record-active-count""));
        assertNull(group.metricGroup().metrics().getSensor(""partition-count""));
        assertNull(group.metricGroup().metrics().getSensor(""offset-seq-number""));
        assertNull(group.metricGroup().metrics().getSensor(""offset-commit-completion""));
        assertNull(group.metricGroup().metrics().getSensor(""offset-commit-completion-skip""));
        assertNull(group.metricGroup().metrics().getSensor(""put-batch-time""));

        assertEquals(2900.0, metrics.currentMetricValueAsDouble(group1.metricGroup(), ""poll-batch-max-time-ms""), 0.001d);
        assertEquals(1950.0, metrics.currentMetricValueAsDouble(group1.metricGroup(), ""poll-batch-avg-time-ms""), 0.001d);
        assertEquals(66.667, metrics.currentMetricValueAsDouble(group1.metricGroup(), ""source-record-poll-rate""), 0.001d);
        assertEquals(2000, metrics.currentMetricValueAsDouble(group1.metricGroup(), ""source-record-poll-total""), 0.001d);
        assertEquals(6.667, metrics.currentMetricValueAsDouble(group1.metricGroup(), ""source-record-write-rate""), 0.001d);
        assertEquals(200, metrics.currentMetricValueAsDouble(group1.metricGroup(), ""source-record-write-total""), 0.001d);
        assertEquals(1800.0, metrics.currentMetricValueAsDouble(group1.metricGroup(), ""source-record-active-count""), 0.001d);
    }
",non-flaky,5
26700,MundaneImmortal_pair-distribution-app,PairTest.testAddDevWithNull,"	@Test
	public void testAddDevWithNull()  {
		Pair subject = new Pair();
		
		subject.addDev(null);
		
		assertThat(subject.getDevs().isEmpty(), is(true));
	}
",non-flaky,5
113792,salesforce_reactive-grpc,CancellationPropagationIntegrationTest.serverCanCancelClientStreamImplicitly,"    @Test
    public void serverCanCancelClientStreamImplicitly() {
        TestService svc = new TestService();
        serverRule.getServiceRegistry().addService(svc);

        RxNumbersGrpc.RxNumbersStub stub = RxNumbersGrpc.newRxStub(serverRule.getChannel());

        svc.setExplicitCancel(false);

        AtomicBoolean requestWasCanceled = new AtomicBoolean(false);
        AtomicBoolean requestDidProduce = new AtomicBoolean(false);

        Flowable<NumberProto.Number> request = Flowable
                .fromIterable(IntStream.range(0, NUMBER_OF_STREAM_ELEMENTS)::iterator)
                .delay(10, TimeUnit.MILLISECONDS)
                .map(CancellationPropagationIntegrationTest::protoNum)
                .doOnNext(x -> {
                    requestDidProduce.set(true);
                    System.out.println(""Produced: "" + x.getNumber(0));
                })
                .doOnCancel(() -> {
                    requestWasCanceled.set(true);
                    System.out.println(""Client canceled"");
                });

        TestObserver<NumberProto.Number> observer = request
                .as(stub::requestPressure)
                .doOnSuccess(number -> System.out.println(number.getNumber(0)))
                .doOnError(throwable -> System.out.println(throwable.getMessage()))
                .test();

        observer.awaitTerminalEvent(3, TimeUnit.SECONDS);
        observer.assertComplete();
        observer.assertTerminated();

        await().atMost(Duration.FIVE_HUNDRED_MILLISECONDS).untilTrue(requestWasCanceled);

        assertThat(requestWasCanceled.get()).isTrue();
        assertThat(requestDidProduce.get()).isTrue();

        errorRule.verifyNoError();
    }
",non-flaky,5
135733,Netflix_Hystrix,HystrixCommandTestWithCustomConcurrencyStrategy.testCommandRequiresContextConcurrencyStrategyProvidesItContextLeftUninitialized,"    @Test
    public void testCommandRequiresContextConcurrencyStrategyProvidesItContextLeftUninitialized() {
        HystrixConcurrencyStrategy strategy = new CustomConcurrencyStrategy(true);
        HystrixPlugins.getInstance().registerConcurrencyStrategy(strategy);

        //context is not set up
        HystrixRequestContext.setContextOnCurrentThread(null);
        HystrixCommand<Boolean> cmd = new TestCommand(true, true);
        assertTrue(cmd.execute()); //command execution not affected by missing context
        printRequestLog();
        assertNull(HystrixRequestLog.getCurrentRequest());
        assertNull(HystrixRequestLog.getCurrentRequest(strategy));
        assertNull(cmd.currentRequestLog);
    }
",non-flaky,5
170480,eclipse_jetty.project,ObjectMBeanUtilTest.testInvokeReflectionException,"    @Test
    public void testInvokeReflectionException()
    {
        MBeanException e = assertThrows(MBeanException.class, () -> objectMBean.invoke(""doodle1"", new Object[0], new String[0]));

        assertNotNull(e, ""MBeanException is null"");
    }
",non-flaky,5
175778,GoogleCloudPlatform_google-cloud-eclipse,AppYamlValidatorTest.testValidate_relativePathWithAppYaml,"  @Test
  public void testValidate_relativePathWithAppYaml() throws IOException {
    createAppYamlFile(basePath + ""/some/directory"", ""runtime: java"");

    when(appYamlPath.getValue()).thenReturn(""some/directory/app.yaml"");
    IStatus result = pathValidator.validate();
    assertTrue(result.isOK());
  }
",non-flaky,5
159641,liquibase_liquibase,AbstractIntegrationTest.testRunUpdateOnOldChangelogTableFormat,"    @Test
    public void testRunUpdateOnOldChangelogTableFormat() throws Exception {
        assumeNotNull(this.getDatabase());
        Liquibase liquibase = createLiquibase(completeChangeLog);
        clearDatabase();

        String nullableKeyword = database.requiresExplicitNullForColumns() ? "" NULL"" : """";

        String sql = ""CREATE TABLE "" +
                database.escapeTableName(
                        database.getDefaultCatalogName(), database.getDefaultSchemaName(), ""DATABASECHANGELOG""
                ) +
                "" (id varchar(150) NOT NULL, "" +
                ""author VARCHAR(150) NOT NULL, "" +
                ""filename VARCHAR(255) NOT NULL, "" +
                ""dateExecuted "" +
                DataTypeFactory.getInstance().fromDescription(
                        ""datetime"", database
                ).toDatabaseDataType(database) + "" NOT NULL, "" +
                ""md5sum VARCHAR(32)"" + nullableKeyword + "", "" +
                ""description VARCHAR(255)"" + nullableKeyword + "", "" +
                ""comments VARCHAR(255)"" + nullableKeyword + "", "" +
                ""tag VARCHAR(255)"" + nullableKeyword + "", "" +
                ""liquibase VARCHAR(10)"" + nullableKeyword + "", "" +
                ""PRIMARY KEY (id, author, filename))"";
        Scope.getCurrentScope().getLog(getClass()).info(LogType.WRITE_SQL, sql);

        Connection conn = ((JdbcConnection) database.getConnection()).getUnderlyingConnection();
        boolean savedAcSetting = conn.getAutoCommit();
        conn.setAutoCommit(false);
        conn.createStatement().execute(sql);
        conn.commit();
        conn.setAutoCommit(savedAcSetting);

        liquibase = createLiquibase(completeChangeLog);
        liquibase.setChangeLogParameter( ""loginuser"", getUsername());
        liquibase.update(this.contexts);

    }
",non-flaky,5
89337,apache_samza,TestKafkaSystemAdminJava.testClearStream,"  @Test
  public void testClearStream() {
    StreamSpec spec = new StreamSpec(""testId"", ""testStreamClear"", ""testSystem"", 8);

    KafkaSystemAdmin admin = systemAdmin();
    String topicName = spec.getPhysicalName();

    assertTrue(""createStream should return true if the stream does not exist and then is created."", admin.createStream(spec));
    // validate topic exists
    assertTrue(admin.clearStream(spec));

    // validate that topic was removed
    DescribeTopicsResult dtr = admin.adminClient.describeTopics(ImmutableSet.of(topicName));
    try {
      TopicDescription td = dtr.all().get().get(topicName);
      Assert.fail(""topic "" + topicName + "" should've been removed. td="" + td);
    } catch (Exception e) {
      if (!(e.getCause() instanceof org.apache.kafka.common.errors.UnknownTopicOrPartitionException)) {
        Assert.fail(""topic "" + topicName + "" should've been removed. Expected UnknownTopicOrPartitionException."");
      }
    }
  }
",non-flaky,5
170484,eclipse_jetty.project,ConnectorServerTest.tearDown,"    @AfterEach
    public void tearDown() throws Exception
    {
        if (connectorServer != null)
            connectorServer.stop();
    }
",non-flaky,5
86042,graylog2_graylog2-server,NotificationDtoTest.testValidateEmailWithEmptyConfigParameters,"    @Test
    public void testValidateEmailWithEmptyConfigParameters() {
        final EmailEventNotificationConfig emptyConfig = EmailEventNotificationConfig.Builder.create()
                .sender("""")
                .subject("""")
                .bodyTemplate("""")
                .build();
        final NotificationDto emptyNotification = getEmailNotification().toBuilder().config(emptyConfig).build();
        final ValidationResult validationResult = emptyNotification.validate();
        assertThat(validationResult.failed()).isTrue();
        assertThat(validationResult.getErrors().size()).isEqualTo(4);
        assertThat(validationResult.getErrors()).containsOnlyKeys(""subject"", ""sender"", ""body_template"", ""recipients"");
    }
",non-flaky,5
99748,apache_cassandra,AsyncStreamingInputPlusTest.append_normal,"    @Test
    public void append_normal()
    {
        inputPlus = new AsyncStreamingInputPlus(channel);
        int size = 4;
        buf = channel.alloc().buffer(size);
        buf.writerIndex(size);
        inputPlus.append(buf);
        Assert.assertEquals(buf.readableBytes(), inputPlus.unsafeAvailable());
    }
",non-flaky,5
99739,apache_cassandra,FQLReplayTest.testNoPass,"    @Test(expected = RuntimeException.class)
    public void testNoPass()
    {
        fromString(""blabla@abc.com:1234"");
    }
",non-flaky,5
98639,nutzam_nutz,SimpleAdaptorTest.test_inputstream_as_string,"    @Test
    public void test_inputstream_as_string() {
        resp = post(""/adaptor/ins"", ""I am abc"");
        if (resp.getStatus() != 200) {
            fail();
        }
        assertEquals(""I am abc"", resp.getContent());
    }
",non-flaky,5
84572,apache_zookeeper,LeaderElectionSupportTest.setUp,"    @BeforeEach
    public void setUp() throws Exception {
        super.setUp();

        zooKeeper = createClient();

        zooKeeper.create(
            TEST_ROOT_NODE + Thread.currentThread().getId(),
            new byte[0],
            ZooDefs.Ids.OPEN_ACL_UNSAFE,
            CreateMode.PERSISTENT);
    }
",non-flaky,5
156453,apache_commons-lang,DateUtilsFragmentTest.testSecondsofHourWithDate,"    @Test
    public void testSecondsofHourWithDate() {
        final long testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.HOUR_OF_DAY);
        assertEquals(
                seconds
                        + (minutes
                                * DateUtils.MILLIS_PER_MINUTE / DateUtils.MILLIS_PER_SECOND),
                testResult);
    }
",non-flaky,5
114053,aws_aws-sdk-java-v2,AsyncPutItemWithResponseIntegrationTest.putItem_returnItemCollectionMetrics_set_itemCollectionMetricsNotNull,"    @Test
    public void putItem_returnItemCollectionMetrics_set_itemCollectionMetricsNotNull() {
        Record record = new Record().setId(1).setId2(10);
        PutItemEnhancedRequest<Record> request = PutItemEnhancedRequest.builder(Record.class)
                                                                       .item(record)
                                                                       .returnItemCollectionMetrics(ReturnItemCollectionMetrics.SIZE)
                                                                       .build();

        PutItemEnhancedResponse<Record> response = mappedTable.putItemWithResponse(request).join();

        assertThat(response.itemCollectionMetrics()).isNotNull();
    }
",non-flaky,5
19469,eclipse_xtext-core,ParseErrorHandlingTest.apply,"	@Test public void testBug236425() throws Exception {
			public Iterator<INode> iterator() {
				return Iterators.filter(node.getAsTreeIterable().iterator(), new Predicate<INode>() {
					@Override
					public boolean apply(INode input) {
						return input.getSyntaxErrorMessage() != null;
					}
",non-flaky,5
358,apache_hadoop,TestPermission.testCreate,"  @Test
  public void testCreate() throws Exception {
    Configuration conf = new HdfsConfiguration();
    conf.setBoolean(DFSConfigKeys.DFS_PERMISSIONS_ENABLED_KEY, true);
    conf.set(FsPermission.UMASK_LABEL, ""000"");
    MiniDFSCluster cluster = null;
    FileSystem fs = null;

    try {
      cluster = new MiniDFSCluster.Builder(conf).numDataNodes(3).build();
      cluster.waitActive();
      fs = FileSystem.get(conf);
      FsPermission rootPerm = checkPermission(fs, ""/"", null);
      FsPermission inheritPerm = FsPermission.createImmutable(
          (short)(rootPerm.toShort() | 0300));

      FsPermission dirPerm = new FsPermission((short)0777);
      fs.mkdirs(new Path(""/a1/a2/a3""), dirPerm);
      checkPermission(fs, ""/a1"", dirPerm);
      checkPermission(fs, ""/a1/a2"", dirPerm);
      checkPermission(fs, ""/a1/a2/a3"", dirPerm);

      dirPerm = new FsPermission((short)0123);
      FsPermission permission = FsPermission.createImmutable(
        (short)(dirPerm.toShort() | 0300));
      fs.mkdirs(new Path(""/aa/1/aa/2/aa/3""), dirPerm);
      checkPermission(fs, ""/aa/1"", permission);
      checkPermission(fs, ""/aa/1/aa/2"", permission);
      checkPermission(fs, ""/aa/1/aa/2/aa/3"", dirPerm);

      FsPermission filePerm = new FsPermission((short)0444);
      Path p = new Path(""/b1/b2/b3.txt"");
      FSDataOutputStream out = fs.create(p, filePerm,
          true, conf.getInt(CommonConfigurationKeys.IO_FILE_BUFFER_SIZE_KEY, 4096),
          fs.getDefaultReplication(p), fs.getDefaultBlockSize(p), null);
      out.write(123);
      out.close();
      checkPermission(fs, ""/b1"", inheritPerm);
      checkPermission(fs, ""/b1/b2"", inheritPerm);
      checkPermission(fs, ""/b1/b2/b3.txt"", filePerm);
      
      conf.set(FsPermission.UMASK_LABEL, ""022"");
      permission = 
        FsPermission.createImmutable((short)0666);
      FileSystem.mkdirs(fs, new Path(""/c1""), new FsPermission(permission));
      FileSystem.create(fs, new Path(""/c1/c2.txt""),
          new FsPermission(permission));
      checkPermission(fs, ""/c1"", permission);
      checkPermission(fs, ""/c1/c2.txt"", permission);
    } finally {
      try {
        if(fs != null) fs.close();
      } catch(Exception e) {
        LOG.error(StringUtils.stringifyException(e));
      }
      try {
        if(cluster != null) cluster.shutdown();
      } catch(Exception e) {
        LOG.error(StringUtils.stringifyException(e));
      }
    }
  }
",non-flaky,5
113747,salesforce_reactive-grpc,ReactorGrpcPublisherOneToManyVerificationTest.createPublisher,"@Test(timeOut = 3000)
    public Publisher<Message> createPublisher(long elements) {
        ReactorTckGrpc.ReactorTckStub stub = ReactorTckGrpc.newReactorStub(channel);
        Mono<Message> request = Mono.just(toMessage((int) elements));
        Publisher<Message> publisher = stub.oneToMany(request).publishOn(Schedulers.immediate());

        return publisher;
    }
",non-flaky,5
77497,dropwizard_dropwizard,AuthBaseTest.tearDown,"    @AfterEach
    public void tearDown() throws Exception {
        super.tearDown();
    }
",non-flaky,5
97663,vojtechhabarta_typescript-generator,SpringTest.testAnnotationUtils,"    @Test
    public void testAnnotationUtils() {
        final Method greetingMethod = getMethod(SpringTestApplication.GreetingController.class, ""greeting"");
        final RequestMapping mapping = AnnotatedElementUtils.findMergedAnnotation(greetingMethod, RequestMapping.class);
        Assert.assertNotNull(mapping);
        Assert.assertEquals(0, mapping.method().length);
        Assert.assertEquals(1, mapping.path().length);
        Assert.assertEquals(""/greeting"", mapping.path()[0]);
    }
",non-flaky,5
159653,liquibase_liquibase,AbstractIntegrationTest.testTagEmptyDatabase,"    @Test
    public void testTagEmptyDatabase() throws Exception {
        assumeNotNull(this.getDatabase());

        Liquibase liquibase = createLiquibase(completeChangeLog);
        clearDatabase();

        liquibase = createLiquibase(completeChangeLog);
        liquibase.checkLiquibaseTables(false, null, new Contexts(), new LabelExpression());
        liquibase.tag(""empty"");

        liquibase = createLiquibase(rollbackChangeLog);
        liquibase.update(new Contexts());

        liquibase.rollback(""empty"", new Contexts());

    }
",non-flaky,5
98066,vert-x3_vertx-mongo-client,FindOptionsTest.testOptions,"  @Test
  public void testOptions() {
    FindOptions options = new FindOptions();

    JsonObject fields = randomJsonObject();
    assertEquals(options, options.setFields(fields));
    assertEquals(fields, options.getFields());

    JsonObject sort = randomJsonObject();
    assertEquals(options, options.setSort(sort));
    assertEquals(sort, options.getSort());

    int limit = TestUtils.randomInt();
    assertEquals(options, options.setLimit(limit));
    assertEquals(limit, options.getLimit());

    int skip = TestUtils.randomInt();
    assertEquals(options, options.setSkip(skip));
    assertEquals(skip, options.getSkip());
  }
",non-flaky,5
176811,ctco_cukes,EndsWithRegexpTest.matchesEndWith,"    @Test
    public void matchesEndWith() throws Exception {
        assertThat(""hello world"", EndsWithRegexp.endsWithRegexp(""world""));
    }
",non-flaky,5
99721,apache_cassandra,FQLReplayTest.testOrderedReplay,"    @Test
    public void testOrderedReplay() throws IOException
    {
        File f = generateQueries(100, true);
        int queryCount = 0;
        try (ChronicleQueue queue = ChronicleQueueBuilder.single(f).build();
             FQLQueryIterator iter = new FQLQueryIterator(queue.createTailer(), 101))
        {
            long last = -1;
            while (iter.hasNext())
            {
                FQLQuery q = iter.next();
                assertTrue(q.queryStartTime >= last);
                last = q.queryStartTime;
                queryCount++;
            }
        }
        assertEquals(100, queryCount);
    }
",non-flaky,5
53152,cloudfoundry_uaa,SamlConfigTest.can_clear_keys,"    @Test
    public void can_clear_keys() {
        read_json(oldJson);
        assertEquals(1, config.getKeys().size());
        assertNotNull(config.getActiveKeyId());
        config.setKeys(EMPTY_MAP);
        assertEquals(0, config.getKeys().size());
        assertNull(config.getActiveKeyId());
    }
",non-flaky,5
177981,aosp-mirror_platform_frameworks_support,BidiFormatterTest.testBuilderIsRtlContext,"    @Test
    public void testBuilderIsRtlContext() {
        assertEquals(false, new BidiFormatter.Builder(false).build().isRtlContext());
        assertEquals(true, new BidiFormatter.Builder(true).build().isRtlContext());
    }
",non-flaky,5
98585,nutzam_nutz,El2Test.bit,"    @Test
    public void bit() {
        assertEquals(-40, El.eval(""-5<<3""));
        assertEquals(-1, El.eval(""-5>>3""));
        assertEquals(5, El.eval(""5>>>32""));
        assertEquals(-5, El.eval(""-5>>>32""));
        assertEquals(1, El.eval(""5&3""));
        assertEquals(7, El.eval(""5|3""));
        assertEquals(-6, El.eval(""~5""));
        assertEquals(6, El.eval(""5^3""));
    }
",non-flaky,5
94800,ktuukkan_marine-api,AISMessage09ParserTest.getLatitudeInDegrees,"    @Test
    public void getLatitudeInDegrees() throws Exception {
        assertEquals(29.20575, msg.getLatitudeInDegrees(), 0.00001);
    }
",non-flaky,5
84620,apache_zookeeper,ServerConfigTest.testFewArguments,"    @Test
    public void testFewArguments() {
        assertThrows(IllegalArgumentException.class, () -> {
            String[] args = {""2181""};
            serverConfig.parse(args);
        });
    }
",non-flaky,5
78257,apache_beam,StateInternalsTest.testSetReadable,"  @Test
  public void testSetReadable() throws Exception {
    SetState<String> value = underTest.state(NAMESPACE_1, STRING_SET_ADDR);

    // test contains
    ReadableState<Boolean> readable = value.contains(""A"");
    value.add(""A"");
    assertFalse(readable.read());

    // test addIfAbsent
    value.addIfAbsent(""B"");
    assertTrue(value.contains(""B"").read());
  }
",non-flaky,5
179497,abel533_Mapper,TypeHandlerTest2.testUpdate,"    @Test
    public void testUpdate(){
        SqlSession sqlSession = getSqlSession();
        try {
            User2Mapper userMapper = sqlSession.getMapper(User2Mapper.class);
            User2 user = userMapper.selectByPrimaryKey(1);
            Assert.assertEquals(""abel533"", user.getName());
            Assert.assertEquals(""Hebei"", user.getAddress().getProvince());
            Assert.assertEquals(""Shijiazhuang"", user.getAddress().getCity());
            Assert.assertEquals(StateEnum.enabled, user.getState());

            user.setState(StateEnum.disabled);
            user.getAddress().setCity(""Handan"");
            Assert.assertEquals(1, userMapper.updateByPrimaryKey(user));

            user = userMapper.selectByPrimaryKey(1);
            Assert.assertEquals(""abel533"", user.getName());
            Assert.assertEquals(""Hebei"", user.getAddress().getProvince());
            Assert.assertEquals(""Handan"", user.getAddress().getCity());
            Assert.assertEquals(StateEnum.disabled, user.getState());
        } finally {
            sqlSession.close();
        }
    }
",non-flaky,5
176824,ctco_cukes,EntityFacadeTest.intValueIsCheckedAsString,"    @Test
    public void intValueIsCheckedAsString() throws Exception {
        BasicAttributes entity = new BasicAttributes(true);
        entity.put(""userPassword"", 3);

        Whitebox.setInternalState(entityFacade, ""entity"", entity);

        entityFacade.entityHasAttributeWithValue(""userpassword"", ""3"");
    }
",non-flaky,5
135798,Netflix_Hystrix,CumulativeCommandEventCounterStreamTest.testEmptyStreamProducesZeros,"    @Test
    public void testEmptyStreamProducesZeros() {
        HystrixCommandKey key = HystrixCommandKey.Factory.asKey(""CMD-CumulativeCounter-A"");
        stream = CumulativeCommandEventCounterStream.getInstance(key, 10, 500);
        stream.startCachingStreamValuesIfUnstarted();

        final CountDownLatch latch = new CountDownLatch(1);
        stream.observe().take(5).subscribe(getSubscriber(latch));

        //no writes

        try {
            assertTrue(latch.await(10000, TimeUnit.MILLISECONDS));
        } catch (InterruptedException ex) {
            fail(""Interrupted ex"");
        }
        assertEquals(HystrixEventType.values().length, stream.getLatest().length);
        assertFalse(hasData(stream.getLatest()));
    }
",non-flaky,5
99789,apache_cassandra,MessagingServiceTest.listenPlainConnectionWithBroadcastAddr,"    @Test
    public void listenPlainConnectionWithBroadcastAddr() throws InterruptedException
    {
        ServerEncryptionOptions serverEncryptionOptions = new ServerEncryptionOptions()
                                                          .withInternodeEncryption(ServerEncryptionOptions.InternodeEncryption.none);
        listen(serverEncryptionOptions, true);
    }
",non-flaky,5
156412,apache_commons-lang,FastDateFormatTest.format,"    @Test
    public void testParseSync() throws InterruptedException {
        final String pattern = ""yyyy-MM-dd'T'HH:mm:ss.SSS"";
        final SimpleDateFormat inner = new SimpleDateFormat(pattern);
        final Format sdf= new Format() {
            private static final long serialVersionUID = 1L;

            @Override
            public StringBuffer format(final Object obj,
                    final StringBuffer toAppendTo,
",non-flaky,5
134013,CorfuDB_CorfuDB,LoggingMeterRegistryTest.testWriteCounter,"    @Test
    public void testWriteCounter() {
        Meter.Id id = new Meter.Id(""metric"", Tags.of(""endpoint"", ""localhost:9000""),
                null, null,
                Meter.Type.COUNTER);
        LoggingMeterRegistryWithHistogramSupport registry = getInstance();
        Stream<String> stream = registry.writeCounter(id, 30);
        String line = stream.findFirst().orElseThrow(IllegalArgumentException::new);
        assertTrue(line.contains(""metric,endpoint=localhost:9000,metric_type=counter value=30""));
    }
",non-flaky,5
110835,opensource4you_astraea,ArgumentUtilTest.testSetConverter,"  @Test
  public void testSetConverter() {
    FakeParameter param =
        ArgumentUtil.parseArgument(
            new FakeParameter(),
            new String[] {""--require"", ""require"", ""--setConverter"", ""1"", ""1"", ""2""});

    Assertions.assertEquals(Set.of(""1"", ""2""), param.setConverter);
  }
",non-flaky,5
178039,aosp-mirror_platform_frameworks_support,GuidedDatePickerTest.testDateRangesWithYearEqual,"    @Test
    public void testDateRangesWithYearEqual() throws Throwable {

        long startTime = System.currentTimeMillis();

        GuidedDatePickerAction[] datePickerActions = setupDateActionsForMinAndMaxRangeTests();

        scrollToMinAndMaxDates(new int[] {0, 1, 2}, datePickerActions[2]);
        long executionTime = System.currentTimeMillis() - startTime;
        Log.d(TAG, ""testDateRangesWithYearEqual() Execution time: "" + executionTime);
        Thread.sleep(FINAL_WAIT);
    }
",non-flaky,5
198,apache_hadoop,TestPathData.testCwdContents,"@Test
public void testCwdContents() throws Exception {
    dirString = Path.CUR_DIR;
    item = new PathData(dirString, conf);
    PathData[] items = item.getDirectoryContents();
    assertEquals(sortedString(""d1"", ""d2""), sortedString(items));
}",test order dependency,4
59653,looly_hutool,BeetlUtilTest.renderStrTest,"	@Test
	public void renderStrTest() throws IOException {
		GroupTemplate groupTemplate = BeetlUtil.createGroupTemplate(new StringTemplateResourceLoader(), Configuration.defaultConfiguration());
		Template template = BeetlUtil.getTemplate(groupTemplate, ""hello,${name}"");
		String result = BeetlUtil.render(template, Dict.create().set(""name"", ""hutool""));

		Assert.assertEquals(""hello,hutool"", result);

		String renderFromStr = BeetlUtil.renderFromStr(""hello,${name}"", Dict.create().set(""name"", ""hutool""));
		Assert.assertEquals(""hello,hutool"", renderFromStr);

	}
",non-flaky,5
70767,apache_kafka,StartAndStopCounterTest.shouldExpectRestarts,"    @Test
    public void shouldExpectRestarts() throws Exception {
        waiters = Executors.newSingleThreadExecutor();

        latch = counter.expectedRestarts(1);
        Future<Boolean> future = asyncAwait(100, TimeUnit.MILLISECONDS);

        clock.sleep(1000);
        counter.recordStop();
        counter.recordStart();
        assertTrue(future.get(200, TimeUnit.MILLISECONDS));
        assertTrue(future.isDone());
    }
",non-flaky,5
179478,abel533_Mapper,SafeUpdateByFieldTest.testSafeUpdateNull2,"    @Test(expected = PersistenceException.class)
    public void testSafeUpdateNull2() {
        SqlSession sqlSession = getSqlSession();
        try {
            CountryMapper mapper = sqlSession.getMapper(CountryMapper.class);
            mapper.updateByExample(null, null);
        } finally {
            sqlSession.close();
        }
    }
",non-flaky,5
33710,alibaba_fastjson,JSONScannerTest.checkTime16,"  @Test
  public void checkTime16() throws Throwable {

    // Arrange
    JSONScanner objectUnderTest = ((JSONScanner)Reflector.getInstance(""com.alibaba.fastjson.parser.JSONScanner""));
    objectUnderTest.hasSpecial = false;
    objectUnderTest.token = 0;
    objectUnderTest.locale = null;
    objectUnderTest.np = 0;
    objectUnderTest.features = 0;
    Reflector.setField(objectUnderTest, ""text"", """");
    objectUnderTest.calendar = null;
    objectUnderTest.matchStat = 0;
    objectUnderTest.bp = 0;
    Reflector.setField(objectUnderTest, ""len"", 0);
    objectUnderTest.stringDefaultValue = """";
    objectUnderTest.pos = 0;
    objectUnderTest.sp = 0;
    objectUnderTest.sbuf = null;
    objectUnderTest.ch = '\u0000';
    objectUnderTest.timeZone = null;
    objectUnderTest.eofPos = 0;
    char h0 = '1';
    char h1 = '9';
    char m0 = '4';
    char m1 = ':';
    char s0 = '\u0000';
    char s1 = '\u0000';

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkTime"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(objectUnderTest, h0, h1, m0, m1, s0, s1);

    // Assert result
    Assert.assertEquals(false, retval);

  }
",non-flaky,5
76992,Tencent_Firestorm,CoordinatorGrpcTest.testGetPartitionToServers,"  @Test
  public void testGetPartitionToServers() {
    GetShuffleAssignmentsResponse testResponse = generateShuffleAssignmentsResponse();

    Map<Integer, List<ShuffleServerInfo>> partitionToServers =
        coordinatorClient.getPartitionToServers(testResponse);

    assertEquals(Arrays.asList(new ShuffleServerInfo(""id1"", ""0.0.0.1"", 100),
        new ShuffleServerInfo(""id2"", ""0.0.0.2"", 100)),
        partitionToServers.get(0));
    assertEquals(Arrays.asList(new ShuffleServerInfo(""id1"", ""0.0.0.1"", 100),
        new ShuffleServerInfo(""id2"", ""0.0.0.2"", 100)),
        partitionToServers.get(1));
    assertEquals(Arrays.asList(new ShuffleServerInfo(""id3"", ""0.0.0.3"", 100),
        new ShuffleServerInfo(""id4"", ""0.0.0.4"", 100)),
        partitionToServers.get(2));
    assertEquals(Arrays.asList(new ShuffleServerInfo(""id3"", ""0.0.0.3"", 100),
        new ShuffleServerInfo(""id4"", ""0.0.0.4"", 100)),
        partitionToServers.get(3));
    assertNull(partitionToServers.get(4));
  }
",non-flaky,5
19,apache_camel,KafkaConsumerTopicIsPatternIT.kafkaTopicIsPattern,"@Test
public void kafkaTopicIsPattern() throws Exception {
    to.expectedMessageCount(5);
    to.expectedBodiesReceivedInAnyOrder(""message-0"", ""message-1"", ""message-2"", ""message-3"", ""message-4"");
    to.allMessages().header(TOPIC).isEqualTo(""test"");
    to.expectedHeaderValuesReceivedInAnyOrder(LAST_RECORD_BEFORE_COMMIT, null, null, null, null, null);
    for (int k = 0; k < 5; k++) {
        String msg = ""message-"" + k;
        ProducerRecord<String, String> data = new ProducerRecord<>(TOPIC, ""1"", msg);
        producer.send(data);
    }
    to.assertIsSatisfied(3000);
    assertEquals(5, StreamSupport.stream(recordsCaptured.get(0).records(TOPIC).spliterator(), false).count());
}",test order dependency,4
38278,palantir_atlasdb,AbstractTransactionTest.testKeyValueEmptyRange,"    @Test
    public void testKeyValueEmptyRange() {
        putDirect(""row1"", ""col1"", ""v1"", 0);

        byte[] rowBytes = PtBytes.toBytes(""row1"");
        ImmutableList<RowResult<Value>> list = ImmutableList.copyOf(keyValueService.getRange(TEST_TABLE, RangeRequest.builder().startRowInclusive(rowBytes).endRowExclusive(rowBytes).build(), 1));
        assertTrue(list.isEmpty());
    }
",non-flaky,5
159621,liquibase_liquibase,MariaDBIntegrationTest.dateDefaultValue,"    @Test
    public void dateDefaultValue() throws Exception {
        if (getDatabase() == null) {
            return;
        }
        ExecutorService.getInstance().getExecutor(getDatabase()).execute(new RawSqlStatement(""DROP TABLE IF "" +
             ""EXISTS ad""));
    
        try {
            ExecutorService.getInstance().getExecutor(getDatabase()).execute(new RawSqlStatement(""CREATE TABLE ad (\n"" +
                    ""ad_id int(10) unsigned NOT NULL AUTO_INCREMENT,\n"" +
                    ""advertiser_id int(10) unsigned NOT NULL,\n"" +
                    ""ad_type_id int(10) unsigned NOT NULL,\n"" +
                    ""name varchar(155) NOT NULL DEFAULT '',\n"" +
                    ""label varchar(155)NOT NULL DEFAULT '',\n"" +
                    ""description text NOT NULL,\n"" +
                    ""active tinyint(1) NOT NULL DEFAULT '0',\n"" +
                    ""created datetime NOT NULL DEFAULT '0000-00-00 00:00:00',\n"" +
                    ""updated datetime DEFAULT '0000-00-00 00:00:00',\n"" +
                    ""PRIMARY KEY (ad_id),\n"" +
                    ""KEY active (active)\n"" +
                    "")""));
        } catch (DatabaseException e) {
            if (e.getCause() instanceof SQLSyntaxErrorException) {
                Scope.getCurrentScope().getLog(getClass()).warning(LogType.LOG, ""MariaDB returned DatabaseException"", e);
                assumeTrue(""MariaDB seems to run in strict mode (no datetime literals with 0000-00-00 allowed). "" + ""Cannot run this test"", false);
                
            } else {
                throw e;
            }
        }
    
        DatabaseSnapshot snapshot = SnapshotGeneratorFactory.getInstance().createSnapshot(CatalogAndSchema.DEFAULT, getDatabase(), new SnapshotControl(getDatabase()));
        Column createdColumn = snapshot.get(new Column().setRelation(new Table().setName(""ad"").setSchema(new Schema())).setName(""created""));

        Object defaultValue = createdColumn.getDefaultValue();
        assertNotNull(defaultValue);
        assertEquals(""0000-00-00 00:00:00"", defaultValue);
    }
",non-flaky,5
134998,undertow-io_undertow,AnnotatedEndpointTest.testImplicitIntegerConversion,"    @Test
    public void testImplicitIntegerConversion() throws Exception {
        final byte[] payload = ""12"".getBytes();
        final FutureResult latch = new FutureResult();

        WebSocketTestClient client = new WebSocketTestClient(WebSocketVersion.V13, new URI(""ws://"" + DefaultServer.getHostAddress(""default"") + "":"" + DefaultServer.getHostPort(""default"") + ""/ws/increment/2""));
        client.connect();
        client.send(new TextWebSocketFrame(Unpooled.wrappedBuffer(payload)), new FrameChecker(TextWebSocketFrame.class, ""14"".getBytes(), latch));
        latch.getIoFuture().get();
        client.destroy();
    }
",non-flaky,5
112635,tbsalling_aismessages,ShipAndVoyageDataTest.digest,"    @Test
    public void digest() throws NoSuchAlgorithmException {
        String expectedDigest = ""2ca6350a33d7b19f0ef49799aa96dd61da9e081e"";

        AISMessage aisMessage = AISMessage.create(
            NMEAMessage.fromString(""!AIVDM,2,1,0,B,539S:k40000000c3G04PPh63<00000000080000o1PVG2uGD:00000000000,0*34""),
            NMEAMessage.fromString(""!AIVDM,2,2,0,B,00000000000,2*27"")
        );
        byte[] digest = aisMessage.digest();
        String digestAsString = String.format(""%040x"", new java.math.BigInteger(1, digest));
        assertEquals(expectedDigest, digestAsString);

        // Change line 1
        aisMessage = AISMessage.create(
            NMEAMessage.fromString(""!AIVDM,2,1,0,B,539S:k40000000c3G04PPh63<00000000080000o1PVG2uGD:00000000001,0*34""),
            NMEAMessage.fromString(""!AIVDM,2,2,0,B,00000000000,2*27"")
        );
        digest = aisMessage.digest();
        digestAsString = String.format(""%040x"", new java.math.BigInteger(1, digest));
        assertNotEquals(expectedDigest, digestAsString);

        // Change line 2
        aisMessage = AISMessage.create(
            NMEAMessage.fromString(""!AIVDM,2,1,0,B,539S:k40000000c3G04PPh63<00000000080000o1PVG2uGD:00000000000,0*34""),
            NMEAMessage.fromString(""!AIVDM,2,2,0,B,00000000001,2*27"")
        );
        digest = aisMessage.digest();
        digestAsString = String.format(""%040x"", new java.math.BigInteger(1, digest));
        assertNotEquals(expectedDigest, digestAsString);


    }
",non-flaky,5
94692,square_okhttp,ResponseCacheTest.abort,"  @Test public void responseCacheReturnsNullOutputStream() throws Exception {
      @Override public CacheRequest put(URI uri, URLConnection connection) {
        return new CacheRequest() {
          @Override public void abort() {
            aborted.set(true);
          }
",non-flaky,5
179422,abel533_Mapper,NameStyleTest.testNormal,"    @Test
    public void testNormal(){
        EntityHelper.initEntityNameMap(UserNormal.class, config);
        EntityTable entityTable = EntityHelper.getEntityTable(UserNormal.class);
        Assert.assertNotNull(entityTable);
        Assert.assertEquals(""UserNormal"", entityTable.getName());

        Set<EntityColumn> columns = entityTable.getEntityClassColumns();
        Assert.assertEquals(1, columns.size());

        for (EntityColumn column : columns) {
            Assert.assertEquals(""userName"", column.getColumn());
            Assert.assertEquals(""userName"", column.getProperty());

            Assert.assertEquals(""userName = #{userName}"", column.getColumnEqualsHolder());
            Assert.assertEquals(""userName = #{record.userName}"", column.getColumnEqualsHolder(""record""));
            Assert.assertEquals(""#{userName}"", column.getColumnHolder());
            Assert.assertEquals(""#{record.userName}"", column.getColumnHolder(""record""));
            Assert.assertEquals(""#{record.userName}"", column.getColumnHolder(""record"", ""suffix""));
            Assert.assertEquals(""#{record.userNamesuffix},"", column.getColumnHolder(""record"", ""suffix"", "",""));
            Assert.assertNull(column.getTypeHandler());
        }

        ResultMap resultMap = entityTable.getResultMap(configuration);
        Assert.assertEquals(""[USERNAME]"", resultMap.getMappedColumns().toString());

        Assert.assertEquals(1, resultMap.getResultMappings().size());

        ResultMapping resultMapping = resultMap.getResultMappings().get(0);
        Assert.assertEquals(""userName"", resultMapping.getColumn());
        Assert.assertEquals(""userName"", resultMapping.getProperty());
        Assert.assertNull(resultMapping.getJdbcType());
        Assert.assertEquals(StringTypeHandler.class, resultMapping.getTypeHandler().getClass());
    }
",non-flaky,5
177234,line_armeria,PropertiesEndpointGroupTest.pathWithDefaultPort,"    @Test
    public void pathWithDefaultPort() throws Exception {
        final URL resourceUrl = getClass().getClassLoader().getResource(""server-list.properties"");
        assert resourceUrl != null;
        final Path resourcePath = new File(resourceUrl.getFile()).toPath();
        final PropertiesEndpointGroup endpointGroupA = PropertiesEndpointGroup.builder(
                resourcePath, ""serverA.hosts"").defaultPort(80).build();
        assertThat(endpointGroupA.endpoints()).containsExactlyInAnyOrder(Endpoint.parse(""127.0.0.1:8080""),
                                                                         Endpoint.parse(""127.0.0.1:8081""),
                                                                         Endpoint.parse(""127.0.0.1:80""));
        endpointGroupA.close();
    }
",non-flaky,5
76765,quarkusio_quarkus,PackageIT.testDependencyOnPomMutableJar,"    @Test
    public void testDependencyOnPomMutableJar()
            throws MavenInvocationException, IOException, InterruptedException {
        testDir = initProject(""projects/dependency-on-pom"");

        running = new RunningInvoker(testDir, false);
        // we do want to run the tests too
        final MavenProcessInvocationResult result = running.execute(Collections.singletonList(""package""),
                Collections.emptyMap());

        assertThat(result.getProcess().waitFor()).isEqualTo(0);

        File targetDir = getTargetDir();
        List<File> jars = getFilesEndingWith(targetDir, "".jar"");
        assertThat(jars).hasSize(1);
    }
",non-flaky,5
77517,dropwizard_dropwizard,DAOTestRuleTest.rollsBackTransaction,"    @Test
    public void rollsBackTransaction() {
        // given a successfully persisted entity
        final TestEntity testEntity = new TestEntity(""description"");
        daoTestRule.inTransaction(() -> persist(testEntity));

        // when we prepare an update of that entity
        testEntity.setDescription(""newDescription"");
        // ... but cause a constraint violation during the actual update
        assertThatExceptionOfType(ConstraintViolationException.class)
            .isThrownBy(() -> daoTestRule.inTransaction(() -> {
                persist(testEntity);
                persist(new TestEntity(null));
            }));
        // ... the entity has the original value
        assertThat(get(testEntity.getId()).getDescription()).isEqualTo(""description"");
    }
",non-flaky,5
113984,apache_struts,ConstantConfigTest.testEmptyClassesToString,"    @Test
    public void testEmptyClassesToString() throws Exception {
        ConstantConfig constantConfig = new ConstantConfig();

        constantConfig.setExcludedClasses(new HashSet<Class<?>>());

        Map<String, String> map = constantConfig.getAllAsStringsMap();
        Assert.assertEquals(null, map.get(StrutsConstants.STRUTS_EXCLUDED_CLASSES));
    }
",non-flaky,5
91470,strapdata_elassandra,MasterServiceTests.execute,"    @TestLogging(""org.elasticsearch.cluster.service:TRACE"") // To ensure that we log cluster state events on TRACE level
    public void testClusterStateUpdateLogging() throws Exception {
        MockLogAppender mockAppender = new MockLogAppender();
        mockAppender.start();
        mockAppender.addExpectation(
            new MockLogAppender.SeenEventExpectation(
                ""test1"",
                masterService.getClass().getCanonicalName(),
                Level.DEBUG,
                ""*processing [test1]: took [1s] no change in cluster state""));
        mockAppender.addExpectation(
            new MockLogAppender.SeenEventExpectation(
                ""test2"",
                masterService.getClass().getCanonicalName(),
                Level.TRACE,
                ""*failed to execute cluster state update in [2s]*""));
        mockAppender.addExpectation(
            new MockLogAppender.SeenEventExpectation(
                ""test3"",
                masterService.getClass().getCanonicalName(),
                Level.DEBUG,
                ""*processing [test3]: took [3s] done publishing updated cluster state (version: *, uuid: *)""));

        Logger clusterLogger = Loggers.getLogger(masterService.getClass().getPackage().getName());
        Loggers.addAppender(clusterLogger, mockAppender);
        try {
            final CountDownLatch latch = new CountDownLatch(4);
            masterService.currentTimeOverride = System.nanoTime();
            masterService.submitStateUpdateTask(""test1"", new ClusterStateUpdateTask() {
                @Override
                public ClusterState execute(ClusterState currentState) throws Exception {
                    masterService.currentTimeOverride += TimeValue.timeValueSeconds(1).nanos();
                    return currentState;
                }
",non-flaky,5
91481,strapdata_elassandra,SharedClusterSnapshotRestoreIT.testAbortedSnapshotDuringInitDoesNotStart,"    @TestLogging(""org.elasticsearch.snapshots:TRACE"")
    public void testAbortedSnapshotDuringInitDoesNotStart() throws Exception {
        final Client client = client();

        // Blocks on initialization
        assertAcked(client.admin().cluster().preparePutRepository(""repository"")
            .setType(""mock"").setSettings(Settings.builder()
                .put(""location"", randomRepoPath())
                .put(""block_on_init"", true)
            ));

        createIndex(""test-idx"");
        final int nbDocs = scaledRandomIntBetween(100, 500);
        for (int i = 0; i < nbDocs; i++) {
            index(""test-idx"", ""_doc"", Integer.toString(i), ""foo"", ""bar"" + i);
        }
        flushAndRefresh(""test-idx"");
        assertThat(client.prepareSearch(""test-idx"").setSize(0).get().getHits().getTotalHits(), equalTo((long) nbDocs));

        // Create a snapshot
        client.admin().cluster().prepareCreateSnapshot(""repository"", ""snap"").execute();
        waitForBlock(internalCluster().getMasterName(), ""repository"", TimeValue.timeValueMinutes(1));
        boolean blocked = true;

        // Snapshot is initializing (and is blocked at this stage)
        SnapshotsStatusResponse snapshotsStatus = client.admin().cluster().prepareSnapshotStatus(""repository"").setSnapshots(""snap"").get();
        assertThat(snapshotsStatus.getSnapshots().iterator().next().getState(), equalTo(State.INIT));

        final List<State> states = new CopyOnWriteArrayList<>();
        final ClusterStateListener listener = event -> {
            SnapshotsInProgress snapshotsInProgress = event.state().custom(SnapshotsInProgress.TYPE);
            for (SnapshotsInProgress.Entry entry : snapshotsInProgress.entries()) {
                if (""snap"".equals(entry.snapshot().getSnapshotId().getName())) {
                    states.add(entry.state());
                }
            }
        };

        try {
            // Record the upcoming states of the snapshot on all nodes
            internalCluster().getInstances(ClusterService.class).forEach(clusterService -> clusterService.addListener(listener));

            // Delete the snapshot while it is being initialized
            ActionFuture<AcknowledgedResponse> delete = client.admin().cluster().prepareDeleteSnapshot(""repository"", ""snap"").execute();

            // The deletion must set the snapshot in the ABORTED state
            assertBusy(() -> {
                SnapshotsStatusResponse status = client.admin().cluster().prepareSnapshotStatus(""repository"").setSnapshots(""snap"").get();
                assertThat(status.getSnapshots().iterator().next().getState(), equalTo(State.ABORTED));
            });

            // Now unblock the repository
            unblockNode(""repository"", internalCluster().getMasterName());
            blocked = false;

            assertAcked(delete.get());
            expectThrows(SnapshotMissingException.class, () ->
                client.admin().cluster().prepareGetSnapshots(""repository"").setSnapshots(""snap"").get());

            assertFalse(""Expecting snapshot state to be updated"", states.isEmpty());
            assertFalse(""Expecting snapshot to be aborted and not started at all"", states.contains(State.STARTED));
        } finally {
            internalCluster().getInstances(ClusterService.class).forEach(clusterService -> clusterService.removeListener(listener));
            if (blocked) {
                unblockNode(""repository"", internalCluster().getMasterName());
            }
        }
    }
",non-flaky,5
179485,abel533_Mapper,SafeUpdateByMethodTest.testSafeUpdateByExampleNull,"    @Test(expected = PersistenceException.class)
    public void testSafeUpdateByExampleNull() {
        SqlSession sqlSession = getSqlSession();
        try {
            CountryMapper mapper = sqlSession.getMapper(CountryMapper.class);
            mapper.updateByExampleSelective(new Country(), null);
        } finally {
            sqlSession.close();
        }
    }
",non-flaky,5
70802,apache_kafka,PluginUtilsTest.testEmptyStructurePluginUrls,"    @Test
    public void testEmptyStructurePluginUrls() throws Exception {
        createBasicDirectoryLayout();
        assertEquals(Collections.<Path>emptyList(), PluginUtils.pluginUrls(pluginPath));
    }
",non-flaky,5
97951,ReactiveX_RxJava,CovarianceTest.testCovarianceOfFrom,"    @Test
    public void testCovarianceOfFrom() {
        Observable.<Movie> from(new HorrorMovie());
        Observable.<Movie> from(new ArrayList<HorrorMovie>());
        // Observable.<HorrorMovie>from(new Movie()); // may not compile
    }
",non-flaky,5
137138,spring-projects_spring-framework,AnnotationMetadataReadingVisitorTests.verifyToString,"	@Test
	public void verifyToString() {
	}
",non-flaky,5
133965,CorfuDB_CorfuDB,LogUnitHandlerTest.testInspectAddresses,"    @Test
    public void testInspectAddresses() {
        List<Long> emptyAddresses = new ArrayList<>();
        ResponseMsg response = getResponseMsg(
                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.CHECK),
                getInspectAddressesResponseMsg(emptyAddresses)
        );

        ArgumentCaptor<InspectAddressesResponse> captor = ArgumentCaptor.forClass(InspectAddressesResponse.class);

        logUnitHandler.handleMessage(response, mockChannelHandlerContext);
        // Verify that the correct request was completed (once) with the appropriate value,
        // and that we did not complete exceptionally.
        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));
        verify(mockClientRouter).completeRequest(eq(response.getHeader().getRequestId()), captor.capture());
        assertEquals(emptyAddresses, captor.getValue().getEmptyAddresses());
    }
",non-flaky,5
53184,cloudfoundry_uaa,GoogleMfaProviderConfigTest.testDefaultConfig,"    @Test
    public void testDefaultConfig() {
        config = new GoogleMfaProviderConfig();
        assertThat(config.getProviderDescription(), is(nullValue()));
        assertThat(config.getIssuer(), is(nullValue()));
    }
",non-flaky,5
208,vespa-engine_vespa,testNodeMetricsDb,"@Test
public void testNodeMetricsDb() {
    ManualClock clock = new ManualClock();
    NodeMetricsDb db = new NodeMetricsDb();
    List<NodeMetrics.MetricValue> values = new ArrayList<>();
    for (int i = 0; i < 40; i++) {
        values.add(new NodeMetrics.MetricValue(""host0"", ""cpu.util"", clock.instant().getEpochSecond(), 0.9f));
        clock.advance(Duration.ofHours(1));
    }
    db.add(values);
    assertEquals(29, db.getWindow(clock.instant().minus(Duration.ofHours(30)), Resource.cpu,    List.of(""host0"")).measurementCount());
    assertEquals( 0, db.getWindow(clock.instant().minus(Duration.ofHours(30)), Resource.memory, List.of(""host0"")).measurementCount());
    db.gc(clock);
    assertEquals(23, db.getWindow(clock.instant().minus(Duration.ofHours(30)), Resource.cpu,    List.of(""host0"")).measurementCount());
    assertEquals( 0, db.getWindow(clock.instant().minus(Duration.ofHours(30)), Resource.memory, List.of(""host0"")).measurementCount());
}",time,2
159625,liquibase_liquibase,H2IntegrationTest.canSpecifyDbmsForIndividualChanges,"    @Test
    public void canSpecifyDbmsForIndividualChanges() throws Exception {
        runChangeLogFile(changeSpecifyDbmsChangeLog);
    }
",non-flaky,5
84640,apache_zookeeper,EnforceAuthenticationTest.testEnforceAuthenticationOldBehaviourWithNetty,"    @Test
    public void testEnforceAuthenticationOldBehaviourWithNetty() throws Exception {
        Map<String, String> prop = new HashMap<>();
        //setting property false should give the same behaviour as when property is not set
        prop.put(removeZooKeeper(AuthenticationHelper.ENFORCE_AUTH_ENABLED), ""false"");
        prop.put(""serverCnxnFactory"", ""org.apache.zookeeper.server.NettyServerCnxnFactory"");
        startServer(prop);
        testEnforceAuthOldBehaviour(true);
    }
",non-flaky,5
84646,apache_zookeeper,ZooKeeperTest.testDeleteRecursive,"    @Test
    public void testDeleteRecursive() throws IOException, InterruptedException, KeeperException {
        final ZooKeeper zk = createClient();
        setupDataTree(zk);

        assertTrue(ZKUtil.deleteRecursive(zk, ""/a/c"", 1000));
        List<String> children = zk.getChildren(""/a"", false);
        assertEquals(1, children.size(), ""1 children - c should be deleted "");
        assertTrue(children.contains(""b""));

        assertTrue(ZKUtil.deleteRecursive(zk, ""/a"", 1000));
        assertNull(zk.exists(""/a"", null));
    }
",non-flaky,5
179428,abel533_Mapper,ColumnTypeTest.testTypehandler,"    @Test
    public void testTypehandler(){
        EntityHelper.initEntityNameMap(UserTypehandler.class, config);
        EntityTable entityTable = EntityHelper.getEntityTable(UserTypehandler.class);
        Assert.assertNotNull(entityTable);

        Set<EntityColumn> columns = entityTable.getEntityClassColumns();
        Assert.assertEquals(1, columns.size());

        for (EntityColumn column : columns) {
            Assert.assertEquals(""name"", column.getColumn());
            Assert.assertEquals(""name"", column.getProperty());

            Assert.assertEquals(""name = #{name, typeHandler=org.apache.ibatis.type.BlobTypeHandler}"", column.getColumnEqualsHolder());
            Assert.assertEquals(""name = #{record.name, typeHandler=org.apache.ibatis.type.BlobTypeHandler}"", column.getColumnEqualsHolder(""record""));
            Assert.assertEquals(""#{name, typeHandler=org.apache.ibatis.type.BlobTypeHandler}"", column.getColumnHolder());
            Assert.assertEquals(""#{record.name, typeHandler=org.apache.ibatis.type.BlobTypeHandler}"", column.getColumnHolder(""record""));
            Assert.assertEquals(""#{record.name, typeHandler=org.apache.ibatis.type.BlobTypeHandler}"", column.getColumnHolder(""record"", ""suffix""));
            Assert.assertEquals(""#{record.namesuffix, typeHandler=org.apache.ibatis.type.BlobTypeHandler},"", column.getColumnHolder(""record"", ""suffix"", "",""));
            Assert.assertNotNull(column.getTypeHandler());
        }

        ResultMap resultMap = entityTable.getResultMap(configuration);
        Assert.assertEquals(""[NAME]"", resultMap.getMappedColumns().toString());

        Assert.assertEquals(1, resultMap.getResultMappings().size());

        ResultMapping resultMapping = resultMap.getResultMappings().get(0);
        Assert.assertEquals(""name"", resultMapping.getColumn());
        Assert.assertEquals(""name"", resultMapping.getProperty());
        Assert.assertNull(resultMapping.getJdbcType());
        Assert.assertEquals(BlobTypeHandler.class, resultMapping.getTypeHandler().getClass());
    }
",non-flaky,5
162364,testcontainers_testcontainers-java,PublicBinaryAPITest.testFields,"    @Test
    public void testFields() {
        assertThat(classNode.fields)
                .filteredOn(it -> (it.access & (Opcodes.ACC_PUBLIC | Opcodes.ACC_PROTECTED)) != 0)
                .allSatisfy(it -> assertThat(Type.getType(it.desc).getClassName())
                        .doesNotStartWith(SHADED_PACKAGE)
                );
    }
",non-flaky,5
91393,OpenLCB_OpenLCB_Java,JdomCdiReaderTest.testCTor,"    @Test
    public void testCTor() {
        Assume.assumeFalse(GraphicsEnvironment.isHeadless());
        JdomCdiReader t = new JdomCdiReader();
        Assert.assertNotNull(""exists"",t);
    }
",non-flaky,5
60893,apache_druid,KafkaEmitterConfigTest.testSerDeserKafkaEmitterConfig,"  @Test
  public void testSerDeserKafkaEmitterConfig() throws IOException
  {
    KafkaEmitterConfig kafkaEmitterConfig = new KafkaEmitterConfig(""hostname"", ""metricTest"",
        ""alertTest"", ""requestTest"",
        ""clusterNameTest"", ImmutableMap.<String, String>builder()
        .put(""testKey"", ""testValue"").build()
    );
    String kafkaEmitterConfigString = mapper.writeValueAsString(kafkaEmitterConfig);
    KafkaEmitterConfig kafkaEmitterConfigExpected = mapper.readerFor(KafkaEmitterConfig.class)
        .readValue(kafkaEmitterConfigString);
    Assert.assertEquals(kafkaEmitterConfigExpected, kafkaEmitterConfig);
  }
",non-flaky,5
135776,Netflix_Hystrix,HystrixPluginsTest.call,"    /*@Test
    public void testRequestContextViaPluginInTimeout() {
        HystrixPlugins.getInstance().registerConcurrencyStrategy(new HystrixConcurrencyStrategy() {
            @Override
            public <T> Callable<T> wrapCallable(final Callable<T> callable) {
                return new RequestIdCallable<T>(callable);
            }
        });

        HystrixRequestContext context = HystrixRequestContext.initializeContext();

        testRequestIdThreadLocal.set(""foobar"");
        final AtomicReference<String> valueInTimeout = new AtomicReference<String>();

        new DummyCommand().toObservable()
                .doOnError(new Action1<Throwable>() {
                    @Override
                    public void call(Throwable throwable) {
                        System.out.println(""initialized = "" + HystrixRequestContext.isCurrentThreadInitialized());
                        System.out.println(""requestId (timeout) = "" + testRequestIdThreadLocal.get());
                        valueInTimeout.set(testRequestIdThreadLocal.get());
                    }
",non-flaky,5
112747,hwang-pku_ormlite-core,DatabaseConnectionProxyTest.testClose,"	@Test
	public void testClose() throws Exception {
		DatabaseConnection conn = createMock(DatabaseConnection.class);
		conn.close();
		DatabaseConnectionProxy proxy = new DatabaseConnectionProxy(conn);
		replay(conn);
		proxy.close();
		verify(conn);
	}
",non-flaky,5
156074,jReddit_jReddit,RedditOAuthAgentTest.testRevoke,"    @Test
    public void testRevoke() throws RedditOAuthException, OAuthSystemException, OAuthProblemException {
        assertTrue(subject.revoke(null, false));
    }
",non-flaky,5
173,apache_hadoop,TestPathData.testQualifiedUriContents,"@Test
public void testQualifiedUriContents() throws Exception {
    dirString = fs.makeQualified(new Path(""d1"")).toString();
    item = new PathData(dirString, conf);
    PathData[] items = item.getDirectoryContents();
    assertEquals(sortedString(dirString + ""/f1"", dirString + ""/f1.1"", dirString + ""/f2""), sortedString(items));
}",test order dependency,4
104708,apache_pinot,JsonPathClusterIntegrationTest.testPqlQueries,"  @Test
  public void testPqlQueries()
      throws Exception {

    //Selection Query
    String pqlQuery = ""Select "" + MY_MAP_STR_FIELD_NAME + "" from "" + DEFAULT_TABLE_NAME;
    JsonNode pinotResponse = postQuery(pqlQuery);
    ArrayNode selectionResults = (ArrayNode) pinotResponse.get(""selectionResults"").get(""results"");
    Assert.assertNotNull(selectionResults);
    Assert.assertFalse(selectionResults.isEmpty());
    for (int i = 0; i < selectionResults.size(); i++) {
      String value = selectionResults.get(i).get(0).textValue();
      Assert.assertTrue(value.indexOf(""-k1-"") > 0);
    }

    //Filter Query
    pqlQuery = ""Select jsonExtractScalar(myMapStr,'$.k1','STRING') from "" + DEFAULT_TABLE_NAME
        + ""  where jsonExtractScalar(myMapStr,'$.k1','STRING') = 'value-k1-0'"";
    pinotResponse = postQuery(pqlQuery);
    selectionResults = (ArrayNode) pinotResponse.get(""selectionResults"").get(""results"");
    Assert.assertNotNull(selectionResults);
    Assert.assertFalse(selectionResults.isEmpty());
    for (int i = 0; i < selectionResults.size(); i++) {
      String value = selectionResults.get(i).get(0).textValue();
      Assert.assertEquals(value, ""value-k1-0"");
    }
    pqlQuery =
        ""Select "" + MY_MAP_STR_K1_FIELD_NAME + "" from "" + DEFAULT_TABLE_NAME + ""  where "" + MY_MAP_STR_K1_FIELD_NAME
            + "" = 'value-k1-0'"";
    pinotResponse = postQuery(pqlQuery);
    selectionResults = (ArrayNode) pinotResponse.get(""selectionResults"").get(""results"");
    Assert.assertNotNull(selectionResults);
    Assert.assertFalse(selectionResults.isEmpty());
    for (int i = 0; i < selectionResults.size(); i++) {
      String value = selectionResults.get(i).get(0).textValue();
      Assert.assertEquals(value, ""value-k1-0"");
    }

    //selection order by
    pqlQuery = ""Select jsonExtractScalar(myMapStr,'$.k1','STRING') from "" + DEFAULT_TABLE_NAME
        + "" order by jsonExtractScalar(myMapStr,'$.k1','STRING')"";
    pinotResponse = postQuery(pqlQuery);
    selectionResults = (ArrayNode) pinotResponse.get(""selectionResults"").get(""results"");
    Assert.assertNotNull(selectionResults);
    Assert.assertFalse(selectionResults.isEmpty());
    for (int i = 0; i < selectionResults.size(); i++) {
      String value = selectionResults.get(i).get(0).textValue();
      Assert.assertTrue(value.indexOf(""-k1-"") > 0);
    }
    pqlQuery =
        ""Select "" + MY_MAP_STR_K1_FIELD_NAME + "" from "" + DEFAULT_TABLE_NAME + "" order by "" + MY_MAP_STR_K1_FIELD_NAME;
    pinotResponse = postQuery(pqlQuery);
    selectionResults = (ArrayNode) pinotResponse.get(""selectionResults"").get(""results"");
    Assert.assertNotNull(selectionResults);
    Assert.assertFalse(selectionResults.isEmpty());
    for (int i = 0; i < selectionResults.size(); i++) {
      String value = selectionResults.get(i).get(0).textValue();
      Assert.assertTrue(value.indexOf(""-k1-"") > 0);
    }

    //Group By Query
    pqlQuery = ""Select count(*) from "" + DEFAULT_TABLE_NAME + "" group by jsonExtractScalar(myMapStr,'$.k1','STRING')"";
    pinotResponse = postQuery(pqlQuery);
    Assert.assertNotNull(pinotResponse.get(""aggregationResults""));
    JsonNode groupByResult = pinotResponse.get(""aggregationResults"").get(0).get(""groupByResult"");
    Assert.assertNotNull(groupByResult);
    Assert.assertTrue(groupByResult.isArray());
    Assert.assertFalse(groupByResult.isEmpty());

    pqlQuery = ""Select count(*) from "" + DEFAULT_TABLE_NAME + "" group by "" + MY_MAP_STR_K1_FIELD_NAME;
    pinotResponse = postQuery(pqlQuery);
    Assert.assertNotNull(pinotResponse.get(""aggregationResults""));
    groupByResult = pinotResponse.get(""aggregationResults"").get(0).get(""groupByResult"");
    Assert.assertNotNull(groupByResult);
    Assert.assertTrue(groupByResult.isArray());
    Assert.assertFalse(groupByResult.isEmpty());
  }
",non-flaky,5
179433,abel533_Mapper,TableTest.testColumn,"    @Test
    public void testColumn() {
        EntityHelper.initEntityNameMap(User.class, config);
        EntityTable entityTable = EntityHelper.getEntityTable(User.class);
        Assert.assertNotNull(entityTable);
        Assert.assertEquals(""sys_user"", entityTable.getName());
    }
",non-flaky,5
162408,testcontainers_testcontainers-java,OutputStreamTest.testToStringConsumer,"    @Test
    public void testToStringConsumer() throws TimeoutException {

        WaitingConsumer waitingConsumer = new WaitingConsumer();
        ToStringConsumer toStringConsumer = new ToStringConsumer();

        Consumer<OutputFrame> composedConsumer = toStringConsumer.andThen(waitingConsumer);
        container.followOutput(composedConsumer);

        waitingConsumer.waitUntilEnd(30, TimeUnit.SECONDS);

        String utf8String = toStringConsumer.toUtf8String();
        assertTrue(""the expected first value was found"", utf8String.contains(""seq=1""));
        assertTrue(""the expected last value was found"", utf8String.contains(""seq=4""));
        assertFalse(""a non-expected value was found"", utf8String.contains(""seq=42""));
    }
",non-flaky,5
156168,soot-oss_soot,TypingMinimizeTest.testInterfaceInterfaceTyping,"  @Test
  public void testInterfaceInterfaceTyping() {

    List<Typing> typingList = new ArrayList<>();

    Local x1 = new JimpleLocal(""$x1"", null);

    Typing typing1 = new Typing(Arrays.asList(x1));
    typing1.set(x1, interfaceType);
    typingList.add(typing1);

    Typing typing2 = new Typing(Arrays.asList(x1));
    typing2.set(x1, interfaceInterfaceType);
    typingList.add(typing2);

    Typing typing3 = new Typing(Arrays.asList(x1));
    typing3.set(x1, numberType);
    typingList.add(typing3);

    getTypingStrategy().minimize(typingList, new BytecodeHierarchy());

    assertEquals(2, typingList.size());
    assertThat(typingList, containsInAnyOrder(typing2, typing3));
  }
",non-flaky,5
91465,strapdata_elassandra,MasterDisruptionIT.testFailWithMinimumMasterNodesConfigured,"@TestLogging(""_root:DEBUG,org.elasticsearch.cluster.service:TRACE"")
    public void testFailWithMinimumMasterNodesConfigured() throws Exception {
        List<String> nodes = startCluster(3);

        // Figure out what is the elected master node
        final String masterNode = internalCluster().getMasterName();
        logger.info(""---> legit elected master node={}"", masterNode);

        // Pick a node that isn't the elected master.
        Set<String> nonMasters = new HashSet<>(nodes);
        nonMasters.remove(masterNode);
        final String unluckyNode = randomFrom(nonMasters.toArray(Strings.EMPTY_ARRAY));


        // Simulate a network issue between the unlucky node and elected master node in both directions.

        NetworkDisruption networkDisconnect = new NetworkDisruption(
                new NetworkDisruption.TwoPartitions(masterNode, unluckyNode),
                new NetworkDisruption.NetworkDisconnect());
        setDisruptionScheme(networkDisconnect);
        networkDisconnect.startDisrupting();

        // Wait until elected master has removed that the unlucky node...
        ensureStableCluster(2, masterNode);

        // The unlucky node must report *no* master node, since it can't connect to master and in fact it should
        // continuously ping until network failures have been resolved. However
        // It may a take a bit before the node detects it has been cut off from the elected master
        assertNoMaster(unluckyNode);

        networkDisconnect.stopDisrupting();

        // Wait until the master node sees all 3 nodes again.
        ensureStableCluster(3);

        // The elected master shouldn't have changed, since the unlucky node never could have elected himself as
        // master since m_m_n of 2 could never be satisfied.
        assertMaster(masterNode, nodes);
    }
",non-flaky,5
38229,palantir_atlasdb,TextUtilsTest.testHashString,"    @Test
    public void testHashString() throws Exception {
        String testStr = null;
        long hash = TextUtils.hashString(testStr);
        assertEquals(0, hash);

        testStr = ""Allen cheats at Race for the Galaxy."";
        hash = TextUtils.hashString(testStr);
        assertEquals(1133932183, hash);
    }
",non-flaky,5
160373,ConsenSys_teku,MetadataTest.shouldSerializeMinimalFormat,"  @Test
  public void shouldSerializeMinimalFormat() throws JsonProcessingException {
    final Metadata metadata = new Metadata(INTERCHANGE_VERSION, root);
    assertThat(jsonProvider.objectToPrettyJSON(metadata)).isEqualToNormalizingNewlines(jsonData);
  }
",non-flaky,5
114132,aws_aws-sdk-java-v2,LocalDateTimeAttributeConverterTest.localDateTimeAttributeConverterNotAcceptLocalTimeTest,"    @Test
    public void localDateTimeAttributeConverterNotAcceptLocalTimeTest() {
        assertFails(() -> transformTo(converter, EnhancedAttributeValue.fromString(""00:12:00.000000001"")
                                                                       .toAttributeValue()));
    }
",non-flaky,5
33728,alibaba_fastjson,FastJsonJsonViewTest.test1,"	@Test
	public void test1() throws Exception {
		
		JSONObject json = new JSONObject();
		
		json.put(""id"", 123);
		
		json.put(""name"", ""ååå"");
		
		mockMvc.perform(
				(post(""/fastjson/test1"").characterEncoding(""UTF-8"").content(json.toJSONString()).contentType(MediaType.APPLICATION_JSON)
						))
//		.andExpect(status().isOk())
				.andDo(print());
	}
",non-flaky,5
94680,square_okhttp,ThreadInterruptTest.run,"  @Test public void interruptReadingResponseBody() throws Exception {
      @Override public void run() {
        try {
          sleep(delayMillis);
          toInterrupt.interrupt();
        } catch (InterruptedException e) {
          throw new RuntimeException(e);
        }
      }
",non-flaky,5
175793,GoogleCloudPlatform_google-cloud-eclipse,AppEngineApplicationQueryJobTest.testRun_abandonStaleJob,"  @Test
  public void testRun_abandonStaleJob() throws InterruptedException, ProjectRepositoryException {
    when(projectRepository.getAppEngineApplication(credential, ""projectId""))
        .thenReturn(AppEngine.NO_APPENGINE_APPLICATION);

    // Prepare another concurrent query job.
    Credential staleCredential = mock(Credential.class);

    GcpProject staleProject = new GcpProject(""name"", ""staleProjectId"");
    ProjectRepository projectRepository2 = mock(ProjectRepository.class);
    when(projectRepository2.getAppEngineApplication(staleCredential, ""staleProjectId""))
        .thenThrow(new ProjectRepositoryException(""testException""));

    Predicate<Job> notLatest = mock(Predicate.class);
    Job staleJob = new AppEngineApplicationQueryJob(staleProject, staleCredential,
        projectRepository2, projectSelector, EXPECTED_LINK, notLatest);

    // This second job is stale, i.e., it was fired, but user has selected another credential.
    when(notLatest.apply(staleJob)).thenReturn(false);

    queryJob.schedule();
    queryJob.join();
    // Make the stale job complete even after ""queryJob"" finishes.
    staleJob.schedule();
    staleJob.join();

    verify(projectRepository).getAppEngineApplication(credential, ""projectId"");
    verify(projectRepository2).getAppEngineApplication(staleCredential, ""staleProjectId"");

    verify(projectSelector).setStatusLink(EXPECTED_MESSAGE_WHEN_NO_APPLICATION, EXPECTED_LINK);
    verify(projectSelector, never()).setStatusLink(EXPECTED_MESSAGE_WHEN_EXCEPTION, null);
  }
",non-flaky,5
156145,soot-oss_soot,ClassRenamerTest.getClassName,"  @Test
  public void getClassName() {
    assertNull(ClassRenamer.getClassName(""""));
    assertNull(ClassRenamer.getClassName(null));
    assertNull(ClassRenamer.getClassName("".""));
    assertEquals(""ClassName"", ClassRenamer.getClassName(""ClassName""));
    assertEquals(""Soot"", ClassRenamer.getClassName(""com.sable.Soot""));
    assertNull(ClassRenamer.getClassName(""com.sable.""));
  }
",non-flaky,5
94653,square_okhttp,JdkWithJettyBootPlatformTest.testBuildsWithJettyBoot,"  @Test
  public void testBuildsWithJettyBoot() {
    assumeTrue(getPlatform().equals(""jdk-with-jetty-boot""));

    assertNotNull(JdkWithJettyBootPlatform.buildIfSupported());
  }
",non-flaky,5
177209,line_armeria,HttpProxyIntegrationTest.onSubscribe,"    @Test
    public void proxyWithTrailers() throws Throwable {
        final WebClient client = WebClient.of(frontendServer.httpUri());

        final AtomicBoolean headersReceived = new AtomicBoolean();
        final AtomicBoolean complete = new AtomicBoolean();
        final AtomicReference<Throwable> error = new AtomicReference<>();

        client.get(""/trailers"").subscribe(new Subscriber<HttpObject>() {
            @Override
            public void onSubscribe(Subscription s) {
                s.request(Long.MAX_VALUE);
            }
",non-flaky,5
110147,Wikidata_wikidata-toolkit,ClientConfigurationTest.testPropertyFilterArguments,"	@Test
	public void testPropertyFilterArguments() {
		String[] args = new String[] { ""--fProp"", ""P100,P31"" };
		ClientConfiguration config = new ClientConfiguration(args);

		Set<PropertyIdValue> propFilters = new HashSet<>();
		propFilters.add(Datamodel.makeWikidataPropertyIdValue(""P31""));
		propFilters.add(Datamodel.makeWikidataPropertyIdValue(""P100""));

		assertEquals(propFilters, config.getFilterProperties());
	}
",non-flaky,5
104634,apache_pinot,OfflineClusterIntegrationTest.testInvertedIndexTriggering,"  @Test(dependsOnMethods = ""testRangeIndexTriggering"")
  public void testInvertedIndexTriggering()
      throws Exception {
    long numTotalDocs = getCountStarResult();

    // Without index on DivActualElapsedTime, all docs are scanned at filtering stage.
    assertEquals(postQuery(TEST_UPDATED_INVERTED_INDEX_QUERY).get(""numEntriesScannedInFilter"").asLong(), numTotalDocs);

    addInvertedIndex();
    long tableSizeWithNewIndex = getTableSize(getTableName());

    // Update table config to remove the new inverted index, and
    // reload table to clean the new inverted indices physically.
    TableConfig tableConfig = getOfflineTableConfig();
    tableConfig.getIndexingConfig().setInvertedIndexColumns(getInvertedIndexColumns());
    updateTableConfig(tableConfig);
    reloadOfflineTable(getTableName());
    TestUtils.waitForCondition(aVoid -> {
      try {
        JsonNode queryResponse = postQuery(TEST_UPDATED_INVERTED_INDEX_QUERY);
        // Total docs should not change during reload, but num entries scanned
        // gets back to total number of documents as the index is removed.
        assertEquals(queryResponse.get(""totalDocs"").asLong(), numTotalDocs);
        return queryResponse.get(""numEntriesScannedInFilter"").asLong() == numTotalDocs;
      } catch (Exception e) {
        throw new RuntimeException(e);
      }
    }, 600_000L, ""Failed to cleanup obsolete index"");
    assertEquals(getTableSize(getTableName()), _tableSizeAfterRemovingIndex);

    // Add the inverted index back to test index removal via force download.
    addInvertedIndex();
    long tableSizeAfterAddingIndexAgain = getTableSize(getTableName());
    assertEquals(tableSizeAfterAddingIndexAgain, tableSizeWithNewIndex);

    // Update table config to remove the new inverted index.
    tableConfig = getOfflineTableConfig();
    tableConfig.getIndexingConfig().setInvertedIndexColumns(getInvertedIndexColumns());
    updateTableConfig(tableConfig);

    // Force to download a single segment, and disk usage should drop a bit.
    SegmentZKMetadata segmentZKMetadata =
        _helixResourceManager.getSegmentsZKMetadata(TableNameBuilder.OFFLINE.tableNameWithType(getTableName())).get(0);
    String segmentName = segmentZKMetadata.getSegmentName();
    reloadOfflineSegment(getTableName(), segmentName, true);
    TestUtils.waitForCondition(aVoid -> {
      try {
        JsonNode queryResponse = postQuery(TEST_UPDATED_INVERTED_INDEX_QUERY);
        // Total docs should not change during reload
        assertEquals(queryResponse.get(""totalDocs"").asLong(), numTotalDocs);
        return getTableSize(getTableName()) < tableSizeAfterAddingIndexAgain;
      } catch (Exception e) {
        throw new RuntimeException(e);
      }
    }, 600_000L, ""Failed to clean up obsolete index in segment"");

    // Force to download the whole table and expect disk usage drops further.
    reloadOfflineTable(getTableName(), true);
    TestUtils.waitForCondition(aVoid -> {
      try {
        JsonNode queryResponse = postQuery(TEST_UPDATED_INVERTED_INDEX_QUERY);
        // Total docs should not change during reload, but num entries scanned
        // gets back to total number of documents as the index is removed.
        assertEquals(queryResponse.get(""totalDocs"").asLong(), numTotalDocs);
        return queryResponse.get(""numEntriesScannedInFilter"").asLong() == numTotalDocs;
      } catch (Exception e) {
        throw new RuntimeException(e);
      }
    }, 600_000L, ""Failed to cleanup obsolete index in table"");
    // With force download, the table size gets back to the initial value.
    assertEquals(getTableSize(getTableName()), DISK_SIZE_IN_BYTES);
  }
",non-flaky,5
104644,apache_pinot,OfflineClusterIntegrationTest.testAggregationUDF,"  @Test
  public void testAggregationUDF()
      throws Exception {

    String pqlQuery = ""SELECT MAX(timeConvert(DaysSinceEpoch,'DAYS','SECONDS')) FROM mytable"";
    JsonNode response = postQuery(pqlQuery);
    JsonNode aggregationResult = response.get(""aggregationResults"").get(0);
    assertEquals(aggregationResult.get(""function"").asText(), ""max_timeconvert(DaysSinceEpoch,'DAYS','SECONDS')"");
    assertEquals(aggregationResult.get(""value"").asDouble(), 16435.0 * 24 * 3600);

    pqlQuery = ""SELECT MIN(div(DaysSinceEpoch,2)) FROM mytable"";
    response = postQuery(pqlQuery);
    aggregationResult = response.get(""aggregationResults"").get(0);
    assertEquals(aggregationResult.get(""function"").asText(), ""min_div(DaysSinceEpoch,'2')"");
    assertEquals(aggregationResult.get(""value"").asDouble(), 16071.0 / 2);
  }
",non-flaky,5
118728,netty_netty,BigEndianHeapByteBufTest.shouldNotAllowNullInConstructor1,"    @Test(expected = NullPointerException.class)
    public void shouldNotAllowNullInConstructor1() {
        new UnpooledHeapByteBuf(null, new byte[1], 0);
    }
",non-flaky,5
19509,eclipse_xtext-core,TraceRegionTest.testLeafIterator_OneChild_LeftGap,"	@Test
	public void testLeafIterator_OneChild_LeftGap() {
		final TraceRegion parent = new TraceRegion(0, 2, 0, 2, true, 2, 3, 0, 0, null, newURI());
		AbstractTraceRegion first = new AbstractStatefulTraceRegion(new TextRegionWithLineInformation(0, 1, 0, 1), true, new LocationData(2, 3, 0, 0, null), parent) {};
		TraceRegion second = new TraceRegion(1, 1, 1, 2, true, 3, 4, 0, 0, parent, null);
		Iterator<AbstractTraceRegion> iter = parent.leafIterator();
		assertEquals(Arrays.asList(first, second).iterator(), iter);
	}
",non-flaky,5
110146,Wikidata_wikidata-toolkit,ClientConfigurationTest.testSiteLinkFilterArgumentsEmpty,"	@Test
	public void testSiteLinkFilterArgumentsEmpty() {
		String[] args = new String[] { ""--fSite"", ""-"" };
		ClientConfiguration config = new ClientConfiguration(args);

		Set<String> siteFilters = new HashSet<>();

		assertEquals(siteFilters, config.getFilterSiteKeys());
	}
",non-flaky,5
26853,wildfly_wildfly,ObjectFactoryTestCase.testBindAndRetrieveObjectFactoryFromNamingContext,"    @Test
    public void testBindAndRetrieveObjectFactoryFromNamingContext() throws Exception {
        final Reference reference = new Reference(""java.util.String"", TestObjectFactory.class.getName(), null);
        namingStore.bind(new CompositeName(""test""), reference);

        final Object result = namingContext.lookup(""test"");
        assertTrue(result instanceof String);
        assertEquals(""Test ParsedResult"", result);
    }
",non-flaky,5
114100,aws_aws-sdk-java-v2,TableSchemaTest.fromClass_constructsImmutableTableSchema,"    @Test
    public void fromClass_constructsImmutableTableSchema() {
        TableSchema<SimpleImmutable> tableSchema = TableSchema.fromClass(SimpleImmutable.class);
        assertThat(tableSchema).isInstanceOf(ImmutableTableSchema.class);
    }
",non-flaky,5
70836,apache_kafka,WorkerSourceTaskTest.testPollReturnsNoRecords,"    @Test
    public void testPollReturnsNoRecords() throws Exception {
        // Test that the task handles an empty list of records
        createWorkerTask();

        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));
        EasyMock.expectLastCall();
        sourceTask.start(TASK_PROPS);
        EasyMock.expectLastCall();
        statusListener.onStartup(taskId);
        EasyMock.expectLastCall();

        // We'll wait for some data, then trigger a flush
        final CountDownLatch pollLatch = expectEmptyPolls(1, new AtomicInteger());
        expectOffsetFlush(true);

        sourceTask.stop();
        EasyMock.expectLastCall();
        expectOffsetFlush(true);

        statusListener.onShutdown(taskId);
        EasyMock.expectLastCall();

        producer.close(EasyMock.anyObject(Duration.class));
        EasyMock.expectLastCall();

        transformationChain.close();
        EasyMock.expectLastCall();

        PowerMock.replayAll();

        workerTask.initialize(TASK_CONFIG);
        Future<?> taskFuture = executor.submit(workerTask);

        assertTrue(awaitLatch(pollLatch));
        assertTrue(workerTask.commitOffsets());
        workerTask.stop();
        assertTrue(workerTask.awaitStop(1000));

        taskFuture.get();
        assertPollMetrics(0);

        PowerMock.verifyAll();
    }
",non-flaky,5
97754,vojtechhabarta_typescript-generator,ModelCompilerTest.testIntermediateInterfacesWithTypeParams,"    @Test
    public void testIntermediateInterfacesWithTypeParams() throws Exception {
        final Settings settings = TestUtils.settings();

        final Jackson2Parser jacksonParser = new Jackson2Parser(settings, new DefaultTypeProcessor());
        final Model model = jacksonParser.parseModel(Implementation.class);
        final ModelCompiler modelCompiler = new TypeScriptGenerator(settings).getModelCompiler();

        final TsModel result = modelCompiler.javaToTypeScript(model);

        MatcherAssert.assertThat(
                result.getBean(WithTypeParam.class).getProperties().get(0).tsType,
                CoreMatchers.instanceOf(TsType.UnionType.class)
        );
    }
",non-flaky,5
92611,FasterXML_jackson-databind,ObjectReaderValueOfWithValueTypeTest.testValueOfInputStreamWithValueType,"    @Test
    public void testValueOfInputStreamWithValueType() throws IOException {
        when(objectReader.forType((Class<?>) any())).thenReturn(objectReader);
        when(objectReader.readValue((InputStream) any())).thenReturn(pojo);
        when(objectReader.readValue((InputStream) any(), (Class<?>) any())).thenCallRealMethod();

        InputStream source = new ByteArrayInputStream(""{}"".getBytes());
        POJO result = objectReader.readValue(source, POJO.class);

        assertEquals(result, pojo);
        verify(objectReader).forType(POJO.class);
        verify(objectReader).readValue(source);
    }
",non-flaky,5
137130,spring-projects_spring-framework,AbstractMethodMetadataTests.isAnnotatedWhenMatchesMetaAnnotationReturnsTrue,"	@Test
	public void isAnnotatedWhenMatchesMetaAnnotationReturnsTrue() {
		assertThat(getTagged(WithMetaAnnotation.class).isAnnotated(
				DirectAnnotation.class.getName())).isTrue();
	}
",non-flaky,5
59638,looly_hutool,TokenizerUtilTest.mmsegTest,"	@Test
	public void mmsegTest() {
		TokenizerEngine engine = new MmsegEngine();
		Result result = engine.parse(text);
		checkResult(result);
	}
",non-flaky,5
176807,ctco_cukes,HttpAssertionFacadeImplTest.shouldNotReturnBodyWhenDisabled,"    @Test
    public void shouldNotReturnBodyWhenDisabled() {
        String body = ""{\n"" +
            ""  \""error\"": \""not found\""\n"" +
            ""}"";

        HttpResponseFacade mock = mock(HttpResponseFacade.class);
        when(mock.response()).thenReturn(generateResponse(
            ""application/json"",
            404,
            body.getBytes()));

        ((HttpAssertionFacadeImpl) facade).facade = mock;
        world.put(ASSERTS_STATUS_CODE_DISPLAY_BODY, ""false"");
        world.put(ASSERTS_STATUS_CODE_MAX_SIZE, ""100"");

        validateException(
            200,
            ""1 expectation failed.\n"" +
                ""Expected status code \""200\"" but was \""404\"".\n"");
    }
",non-flaky,5
77442,opensearch-project_OpenSearch,DependencyLicensesTaskTests.givenProjectWithStrictDependencyButNoSourcesFileThenShouldReturnException,"    @Test
    public void givenProjectWithStrictDependencyButNoSourcesFileThenShouldReturnException() throws Exception {
        expectedException.expect(GradleException.class);
        expectedException.expectMessage(containsString(""Missing SOURCES for ""));

        project.getDependencies().add(""compile"", dependency);

        createFileIn(getLicensesDir(project), ""groovy-all-LICENSE.txt"", STRICT_LICENSE_TEXT);
        createFileIn(getLicensesDir(project), ""groovy-all-NOTICE.txt"", """");

        updateShas.updateShas();
        task.get().checkDependencies();
    }
",non-flaky,5
86053,graylog2_graylog2-server,NotificationGracePeriodServiceTest.insideOutsideInsideGracePeriod,"    @Test
    public void insideOutsideInsideGracePeriod() {
        final NotificationGracePeriodService notificationGracePeriodService = new NotificationGracePeriodService();

        when(settings.gracePeriodMs()).thenReturn(10L);
        when(definition.notificationSettings()).thenReturn(settings);
        when(definition.id()).thenReturn(""1234"");

        final Event event = new TestEvent(DateTime.now(UTC), ""testkey"");
        final Event event2 = new TestEvent(event.getEventTimestamp().plus(5L), ""testkey"");
        final Event event3 = new TestEvent(event2.getEventTimestamp().plus(6L), ""testkey"");
        final Event event4 = new TestEvent(event3.getEventTimestamp().plus(6L), ""testkey"");

        assertThat(notificationGracePeriodService.inGracePeriod(definition, ""5678"", event)).isFalse();
        assertThat(notificationGracePeriodService.inGracePeriod(definition, ""5678"", event2)).isTrue();
        assertThat(notificationGracePeriodService.inGracePeriod(definition, ""5678"", event3)).isFalse();
        assertThat(notificationGracePeriodService.inGracePeriod(definition, ""5678"", event4)).isTrue();
    }
",non-flaky,5
156162,soot-oss_soot,TypingMinimizeTest.testMostCommonTypingPairs_3,"  @Test
  public void testMostCommonTypingPairs_3() {

    List<Typing> typingList = new ArrayList<>();
    Type Type1 = randomAccessType;
    Type Type2 = listType;
    Type Type3 = abstractListType;
    Type Type4 = objectType;
    Local x1 = new JimpleLocal(""$x1"", null);

    Typing typing1 = new Typing(Arrays.asList(x1));
    typing1.set(x1, Type1);
    typingList.add(typing1);

    Typing typing2 = new Typing(Arrays.asList(x1));
    typing2.set(x1, Type2);
    typingList.add(typing2);

    Typing typing3 = new Typing(Arrays.asList(x1));
    typing3.set(x1, Type3);
    typingList.add(typing3);

    Typing typing4 = new Typing(Arrays.asList(x1));
    typing4.set(x1, Type4);
    typingList.add(typing4);

    getTypingStrategy().minimize(typingList, new BytecodeHierarchy());

    assertEquals(2, typingList.size());
    assertThat(typingList, containsInAnyOrder(typing1, typing3));
  }
",non-flaky,5
76728,quarkusio_quarkus,JarRunnerIT.testThatFastJarFormatWorks,"    @Test
    public void testThatFastJarFormatWorks() throws Exception {
        assertThatFastJarFormatWorks(null);
    }
",non-flaky,5
38219,palantir_atlasdb,TextUtilsTest.testStringForValue,"    @Test
    public void testStringForValue() throws Exception {
        assertEquals(""0"", TextUtils.getStringForValue(0.0));
        assertEquals(""5"", TextUtils.getStringForValue(5.0));
        assertEquals(""100"", TextUtils.getStringForValue(100.0));
        assertEquals(""9.2k"", TextUtils.getStringForValue(9204.0));
        assertEquals(""9.5k"", TextUtils.getStringForValue(9499.0));
        assertEquals(""10.0k"", TextUtils.getStringForValue(9999.0));
        assertEquals(""100k"", TextUtils.getStringForValue(99999.0));
        assertEquals(""100k"", TextUtils.getStringForValue(100000.0));
        assertEquals(""1.0M"", TextUtils.getStringForValue(1000000.0));
        assertEquals(""1.5M"", TextUtils.getStringForValue(1499999.0));
        assertEquals(""10M"", TextUtils.getStringForValue(10000000.0));
        assertEquals(""15M"", TextUtils.getStringForValue(14999999.0));
        assertEquals(""100M"", TextUtils.getStringForValue(100000000.0));
        assertEquals(""150M"", TextUtils.getStringForValue(149999990.0));
        assertEquals(""1.0B"", TextUtils.getStringForValue(1000000000.0));
        assertEquals(""1.5B"", TextUtils.getStringForValue(1499999900.0));
        assertEquals(""10B"", TextUtils.getStringForValue(10000000000.0));
        assertEquals(""15B"", TextUtils.getStringForValue(14999999000.0));
        assertEquals(""100B"", TextUtils.getStringForValue(100000000000.0));
        assertEquals(""150B"", TextUtils.getStringForValue(149999990000.0));
        assertEquals(""1.0T"", TextUtils.getStringForValue(1000000000000.0));
        assertEquals(""1.5T"", TextUtils.getStringForValue(1499999900000.0));
        assertEquals(""10T"", TextUtils.getStringForValue(10000000000000.0));
        assertEquals(""15T"", TextUtils.getStringForValue(14999999000000.0));
        assertEquals(""100T"", TextUtils.getStringForValue(100000000000000.0));
        assertEquals(""150T"", TextUtils.getStringForValue(149999990000000.0));
        assertEquals(""1.0e+15"", TextUtils.getStringForValue(1000000000000000.0));
        assertEquals(""1.5e+15"", TextUtils.getStringForValue(1499999900000000.0));

        assertEquals(""-5"", TextUtils.getStringForValue(-5.0));
        assertEquals(""-100"", TextUtils.getStringForValue(-100.0));
        assertEquals(""-9.2k"", TextUtils.getStringForValue(-9204.0));
        assertEquals(""-9.5k"", TextUtils.getStringForValue(-9499.0));
        assertEquals(""-10.0k"", TextUtils.getStringForValue(-9999.0));
        assertEquals(""-100k"", TextUtils.getStringForValue(-99999.0));
        assertEquals(""-100k"", TextUtils.getStringForValue(-100000.0));
        assertEquals(""-1.0M"", TextUtils.getStringForValue(-1000000.0));
        assertEquals(""-1.5M"", TextUtils.getStringForValue(-1499999.0));
        assertEquals(""-10M"", TextUtils.getStringForValue(-10000000.0));
        assertEquals(""-15M"", TextUtils.getStringForValue(-14999999.0));
        assertEquals(""-100M"", TextUtils.getStringForValue(-100000000.0));
        assertEquals(""-150M"", TextUtils.getStringForValue(-149999990.0));
        assertEquals(""-1.0B"", TextUtils.getStringForValue(-1000000000.0));
        assertEquals(""-1.5B"", TextUtils.getStringForValue(-1499999900.0));
        assertEquals(""-1.5B"", TextUtils.getStringForValue(-1500000001.0));
        assertEquals(""-10B"", TextUtils.getStringForValue(-10000000000.0));
        assertEquals(""-15B"", TextUtils.getStringForValue(-14999999000.0));
        assertEquals(""-100B"", TextUtils.getStringForValue(-100000000000.0));
        assertEquals(""-150B"", TextUtils.getStringForValue(-149999990000.0));
        assertEquals(""-1.0T"", TextUtils.getStringForValue(-1000000000000.0));
        assertEquals(""-1.5T"", TextUtils.getStringForValue(-1499999900000.0));
        assertEquals(""-10T"", TextUtils.getStringForValue(-10000000000000.0));
        assertEquals(""-15T"", TextUtils.getStringForValue(-14999999000000.0));
        assertEquals(""-100T"", TextUtils.getStringForValue(-100000000000000.0));
        assertEquals(""-150T"", TextUtils.getStringForValue(-149999990000000.0));
        assertEquals(""-1.0e+15"", TextUtils.getStringForValue(-1000000000000000.0));
        assertEquals(""-1.5e+15"", TextUtils.getStringForValue(-1499999900000000.0));
    }
",non-flaky,5
113717,salesforce_reactive-grpc,UnexpectedServerErrorIntegrationTest.oneToOne,"    @Test
    public void oneToOne() {
        ReactorGreeterGrpc.ReactorGreeterStub stub = ReactorGreeterGrpc.newReactorStub(channel);
        Mono<HelloResponse> resp = Mono.just(HelloRequest.getDefaultInstance()).compose(stub::sayHello);

        StepVerifier.create(resp)
                .verifyErrorMatches(t -> t instanceof StatusRuntimeException && ((StatusRuntimeException)t).getStatus().getCode() == Status.Code.INTERNAL);
    }
",non-flaky,5
176830,ctco_cukes,LDIFUtilsTest.readMultipleEntities,"    @Test
    public void readMultipleEntities() throws Exception {
        String ldif = ""dn: dc=example,dc=com\n"" +
            ""objectClass: domain\n"" +
            ""objectClass: top\n"" +
            ""dc: example\n"" +
            ""\n"" +
            ""dn: ou=Users,dc=example,dc=com\n"" +
            ""objectClass: organizationalUnit\n"" +
            ""objectClass: top\n"" +
            ""ou: Users\n"";

        Map<String, Attributes> entities = LDIFUtils.read(new ByteArrayInputStream(ldif.getBytes()));
        assertThat(entities.size(), is(2));
        assertThat(entities.containsKey(""dc=example,dc=com""), is(true));
        assertThat(entities.containsKey(""ou=Users,dc=example,dc=com""), is(true));
    }
",non-flaky,5
94694,square_okhttp,ResponseCacheTest.get,"  @Test public void responseCacheRequestHeaders() throws IOException, URISyntaxException {
      @Override public CacheResponse get(URI uri, String requestMethod,
          Map<String, List<String>> requestHeaders) throws IOException {
        requestHeadersRef.set(requestHeaders);
        return null;
      }
",non-flaky,5
221,commercetools-project-sync,InventoryEntrySyncerTest.syncWithError_ShouldCallErrorCallback,"@Test
void syncWithError_ShouldCallErrorCallback() {
    final TestLogger syncerTestLogger = TestLoggerFactory.getTestLogger(InventoryEntrySyncer.class);
    final SphereClient sourceClient = mock(SphereClient.class);
    final SphereClient targetClient = mock(SphereClient.class);
    when(sourceClient.getConfig()).thenReturn(SphereApiConfig.of(""source-project""));
    when(targetClient.getConfig()).thenReturn(SphereApiConfig.of(""target-project""));
    final List<InventoryEntry> inventoryEntries = Collections.singletonList(readObjectFromResource(""inventory-no-sku.json"", InventoryEntry.class));
    final PagedQueryResult<InventoryEntry> pagedQueryResult = mock(PagedQueryResult.class);
    when(pagedQueryResult.getResults()).thenReturn(inventoryEntries);
    when(sourceClient.execute(any(InventoryEntryQuery.class))).thenReturn(CompletableFuture.completedFuture(pagedQueryResult));
    final InventoryEntrySyncer inventoryEntrySyncer = InventoryEntrySyncer.of(sourceClient, targetClient, mock(Clock.class));
    inventoryEntrySyncer.sync(null, true).toCompletableFuture().join();
    final LoggingEvent errorLog = syncerTestLogger.getAllLoggingEvents().get(1);
    assertThat(errorLog.getMessage()).isEqualTo(""Error when trying to sync inventory entry. Existing key: <<not present>>. Update actions: []"");
    assertThat(errorLog.getThrowable().get().getMessage()).isEqualTo(""InventoryEntryDraft doesn't have a SKU. Please make sure all inventory entry drafts have SKUs."");
}",test order dependency,4
175790,GoogleCloudPlatform_google-cloud-eclipse,AppEngineApplicationQueryJobTest.testRun_abandonIfDisposed,"  @Test
  public void testRun_abandonIfDisposed() throws InterruptedException, ProjectRepositoryException {
    when(projectSelector.isDisposed()).thenReturn(true);
    when(projectRepository.getAppEngineApplication(credential, ""projectId""))
        .thenReturn(AppEngine.NO_APPENGINE_APPLICATION);

    queryJob.schedule();
    queryJob.join();

    verify(projectSelector).isDisposed();
    verify(projectSelector, never()).setStatusLink(anyString(), anyString());
  }
",non-flaky,5
160395,ConsenSys_teku,ChainDataProviderTest.getBlockHeaderByBlockId_shouldGetHeadBlock,"  @Test
  public void getBlockHeaderByBlockId_shouldGetHeadBlock()
      throws ExecutionException, InterruptedException {
    final ChainDataProvider provider =
        new ChainDataProvider(spec, recentChainData, combinedChainDataClient);
    final tech.pegasys.teku.spec.datastructures.blocks.SignedBeaconBlock block =
        combinedChainDataClient.getBestBlock().get();
    BlockHeader result = provider.getBlockHeader(""head"").get().get();
    final BeaconBlockHeader beaconBlockHeader =
        new BeaconBlockHeader(
            block.getSlot(),
            block.getMessage().getProposerIndex(),
            block.getParentRoot(),
            block.getStateRoot(),
            block.getRoot());
    final BlockHeader expected =
        new BlockHeader(
            block.getRoot(),
            true,
            new SignedBeaconBlockHeader(beaconBlockHeader, new BLSSignature(block.getSignature())));

    assertThat(result).isEqualTo(expected);
  }
",non-flaky,5
77672,pholser_junit-quickcheck,ReferenceArrayPropertyParameterTypesTest.shouldHold,"    @Test public void twoDLongArray() {
        @Property(trials = 5) public void shouldHold(Long[][] ell) {
        }
",non-flaky,5
95671,togglz_togglz,SpringProfileActivationStrategyTest.testGetParameters,"    @Test
    public void testGetParameters() {
        Parameter[] parameters = strategy.getParameters();

        assertEquals(1, parameters.length);

        Parameter parameter = parameters[0];

        assertNotNull(parameter);
        assertEquals(SpringProfileActivationStrategy.PARAM_PROFILES, parameter.getName());
        assertTrue(Strings.isNotBlank(parameter.getLabel()));
        assertTrue(Strings.isNotBlank(parameter.getDescription()));
    }
",non-flaky,5
114012,apache_struts,StrutsTilesAnnotationProcessorTest.findAnnotationMultipleActionNotFound,"    @Test
    public void findAnnotationMultipleActionNotFound() {
        StrutsTilesAnnotationProcessor annotationProcessor = new StrutsTilesAnnotationProcessor();
        TilesDefinition tilesDefinition = annotationProcessor.findAnnotation(new TilesTestActionMultipleAnnotations(), ""def3"");
        Assert.assertNull(tilesDefinition);
    }
",non-flaky,5
135784,Netflix_Hystrix,CollapsedRequestSubjectTest.testSetExceptionAfterUnsubscribe,"    @Test(expected = CancellationException.class)
    public void testSetExceptionAfterUnsubscribe() throws InterruptedException, ExecutionException {
        CollapsedRequestSubject<String, String> cr = new CollapsedRequestSubject<String, String>(""hello"");
        Observable<String> o = cr.toObservable();
        Future<String> f = o.toBlocking().toFuture();

        // cancel/unsubscribe
        f.cancel(true);

        try {
            cr.setException(new RuntimeException(""anException""));
        } catch (IllegalStateException e) {
            fail(""this should have done nothing as it was unsubscribed already"");
        }

        // expect CancellationException after cancelling
        f.get();
    }
",non-flaky,5
170507,eclipse_jetty.project,MBeanContainerTest.testDestroy,"    @Test
    public void testDestroy()
    {
        setUpDestroy();

        objectName = mbeanContainer.findMBean(managed);
        mbeanContainer.destroy();

        assertFalse(mbeanContainer.getMBeanServer().isRegistered(objectName), ""Unregistered bean - managed"");
    }
",non-flaky,5
33727,alibaba_fastjson,FastJsonJsonViewTest.test_jsonp_invalidParam,"    @Test
    public  void test_jsonp_invalidParam() throws Exception {
        FastJsonJsonView view = new FastJsonJsonView();

        Assert.assertNotNull(view.getFastJsonConfig());
        view.setFastJsonConfig(new FastJsonConfig());
        view.setExtractValueFromSingleKeyModel(true);
        view.setDisableCaching(true);

        MockHttpServletRequest request = new MockHttpServletRequest();
        request.addParameter(""callback"", ""-methodName"");
        MockHttpServletResponse response = new MockHttpServletResponse();


        Assert.assertEquals(true, view.isExtractValueFromSingleKeyModel());


        view.render(Collections.singletonMap(""doesn't matter"", Collections.singletonMap(""abc"", ""cdeä¸­æ"")), request, response);
        String contentAsString = response.getContentAsString();
        Assert.assertTrue(contentAsString.startsWith(""{\""abc\"":\""cdeä¸­æ\""}""));

    }
",non-flaky,5
98581,nutzam_nutz,Issue125Test.test,"    @Test
    public void test() throws InstantiationException, IllegalAccessException{
        String[] a = new String[]{""a"",""b""};
        Map<String, String[]> map = new HashMap<String, String[]>();
        map.put(""a"", a);
        El exp = new El(""util.test(map['a'])"");
        Context context = Lang.context();
        context.set(""util"",StringUtil.class.newInstance());
        context.set(""map"", map);
        assertEquals(""ab"", exp.eval(context));
    }
",non-flaky,5
84639,apache_zookeeper,EnforceAuthenticationTest.testEnforceAuthenticationOldBehaviour,"    @Test
    public void testEnforceAuthenticationOldBehaviour() throws Exception {
        Map<String, String> prop = new HashMap<>();
        startServer(prop);
        testEnforceAuthOldBehaviour(false);
    }
",non-flaky,5
59585,looly_hutool,MailTest.sendByAccountTest,"	@Test
	public void sendByAccountTest() {
		MailAccount account = new MailAccount();
		account.setHost(""smtp.yeah.net"");
		account.setPort(465);
		account.setSslEnable(true);
		account.setFrom(""hutool@yeah.net"");
		account.setUser(""hutool"");
		account.setPass(""q1w2e3"");
		MailUtil.send(account, ""914104645@qq.com"", ""æµè¯"", ""<h1>é®ä»¶æ¥èªHutoolæµè¯</h1>"", true);
	}
",non-flaky,5
77473,opensearch-project_OpenSearch,ClusterApplierServiceTests.onSuccess,"    @TestLogging(value = ""org.opensearch.cluster.service:WARN"", reason = ""to ensure that we log cluster state events on WARN level"")
    public void testLongClusterStateUpdateLogging() throws Exception {
        MockLogAppender mockAppender = new MockLogAppender();
        mockAppender.start();
        mockAppender.addExpectation(
                new MockLogAppender.UnseenEventExpectation(
                        ""test1 shouldn't see because setting is too low"",
                        ClusterApplierService.class.getCanonicalName(),
                        Level.WARN,
                        ""*cluster state applier task [test1] took [*] which is above the warn threshold of *""));
        mockAppender.addExpectation(
                new MockLogAppender.SeenEventExpectation(
                        ""test2"",
                        ClusterApplierService.class.getCanonicalName(),
                        Level.WARN,
                        ""*cluster state applier task [test2] took [32s] which is above the warn threshold of [*]: "" +
                            ""[running task [test2]] took [*""));
        mockAppender.addExpectation(
                new MockLogAppender.SeenEventExpectation(
                        ""test4"",
                        ClusterApplierService.class.getCanonicalName(),
                        Level.WARN,
                        ""*cluster state applier task [test3] took [34s] which is above the warn threshold of [*]: "" +
                            ""[running task [test3]] took [*""));

        Logger clusterLogger = LogManager.getLogger(ClusterApplierService.class);
        Loggers.addAppender(clusterLogger, mockAppender);
        try {
            final CountDownLatch latch = new CountDownLatch(4);
            final CountDownLatch processedFirstTask = new CountDownLatch(1);
            clusterApplierService.currentTimeOverride = threadPool.relativeTimeInMillis();
            clusterApplierService.runOnApplierThread(""test1"",
                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(1).millis(),
                new ClusterApplyListener() {
                    @Override
                    public void onSuccess(String source) {
                        latch.countDown();
                        processedFirstTask.countDown();
                    }
",non-flaky,5
53217,cloudfoundry_uaa,ScimGroupEndpointsIntegrationTests.testDeleteMemberUserUpdatesGroups,"    @Test
    public void testDeleteMemberUserUpdatesGroups() {
        ScimGroupMember toDelete = new ScimGroupMember(createUser(DELETE_ME, ""Passwo3d"").getId());
        ScimGroup g1 = createGroup(CFID, JOEL, DALE, toDelete);
        ScimGroup g2 = createGroup(CF_MGR, DALE, toDelete);
        deleteResource(userEndpoint, toDelete.getMemberId());

        // check that membership has been updated
        ScimGroup g3 = client.getForObject(serverRunning.getUrl(groupEndpoint + ""/{id}""), ScimGroup.class, g1.getId());
        assertEquals(2, g3.getMembers().size());
        assertFalse(g3.getMembers().contains(toDelete));

        g3 = client.getForObject(serverRunning.getUrl(groupEndpoint + ""/{id}""), ScimGroup.class, g2.getId());
        assertEquals(1, g3.getMembers().size());
        assertFalse(g3.getMembers().contains(toDelete));
    }
",non-flaky,5
98240,apache_jackrabbit,PerformanceTest.testPerformance,"    @Test
    public void testPerformance() throws Exception {
        testPerformance(""2.6"");

        System.setProperty(QueryEngine.NATIVE_SORT_SYSTEM_PROPERTY, ""true"");
        testPerformance(""2.6-expSort"", getDefaultConfig());
        System.setProperty(QueryEngine.NATIVE_SORT_SYSTEM_PROPERTY, ""false"");
    }
",non-flaky,5
113718,salesforce_reactive-grpc,UnexpectedServerErrorIntegrationTest.oneToMany,"    @Test
    public void oneToMany() {
        ReactorGreeterGrpc.ReactorGreeterStub stub = ReactorGreeterGrpc.newReactorStub(channel);
        Flux<HelloResponse> resp = Mono.just(HelloRequest.getDefaultInstance()).as(stub::sayHelloRespStream);
        Flux<HelloResponse> test = resp
                .doOnNext(System.out::println)
                .doOnError(throwable -> System.out.println(throwable.getMessage()))
                .doOnComplete(() -> System.out.println(""Completed""))
                .doOnCancel(() -> System.out.println(""Client canceled""));

        StepVerifier.create(resp)
                .verifyErrorMatches(t -> t instanceof StatusRuntimeException && ((StatusRuntimeException)t).getStatus().getCode() == Status.Code.INTERNAL);
    }
",non-flaky,5
177998,aosp-mirror_platform_frameworks_support,DetailsFragmentTest.canProceed,"    @Test
    public void parallaxTest() throws Throwable {
        final int mDefaultVerticalOffset = -300;
        Intent intent = new Intent();
        intent.putExtra(DetailsTestFragment.VERTICAL_OFFSET, mDefaultVerticalOffset);
        mActivity = activityTestRule.launchActivity(intent);

        final DetailsTestFragment detailsFragment = mActivity.getDetailsFragment();
        DetailsBackgroundParallaxHelper parallaxHelper = detailsFragment.getParallaxHelper();
        final CompositeDrawable drawable = (CompositeDrawable) parallaxHelper.getDrawable();
        final FitWidthBitmapDrawable bitmapDrawable = (FitWidthBitmapDrawable)
                (drawable.getChildAt(0).getDrawable());

        PollingCheck.waitFor(4000, new PollingCheck.PollingCheckCondition() {
            @Override
            public boolean canProceed() {
                return mActivity.getDetailsFragment().getRowsFragment().getAdapter().size() > 1;
            }
",non-flaky,5
19500,eclipse_xtext-core,TraceRegionTest.testConstructorInvalidArgs_01,"	@Test(expected = IllegalArgumentException.class)
	public void testConstructorInvalidArgs_01() {
		new TraceRegion(-1, 0, 0, 0, true, 0, 0, 0, 0, null, newURI());
	}
",non-flaky,5
89330,apache_samza,TestKafkaSystemAdminJava.testCreateCoordinatorStreamWithSpecialCharsInTopicName,"  @Test
  public void testCreateCoordinatorStreamWithSpecialCharsInTopicName() {
    final String stream = ""test.coordinator_test.Stream"";

    Map<String, String> map = new HashMap<>();
    map.put(""job.coordinator.segment.bytes"", ""123"");
    map.put(""job.coordinator.cleanup.policy"", ""compact"");
    int coordReplicatonFactor = 2;
    map.put(org.apache.samza.config.KafkaConfig.JOB_COORDINATOR_REPLICATION_FACTOR(),
        String.valueOf(coordReplicatonFactor));

    KafkaSystemAdmin admin = Mockito.spy(createSystemAdmin(SYSTEM, map));
    StreamSpec spec = StreamSpec.createCoordinatorStreamSpec(stream, SYSTEM);

    Mockito.doAnswer(invocationOnMock -> {
      StreamSpec internalSpec = (StreamSpec) invocationOnMock.callRealMethod();
      assertTrue(internalSpec instanceof KafkaStreamSpec);  // KafkaStreamSpec is used to carry replication factor
      assertTrue(internalSpec.isCoordinatorStream());
      assertEquals(SYSTEM, internalSpec.getSystemName());
      assertEquals(stream, internalSpec.getPhysicalName());
      assertEquals(1, internalSpec.getPartitionCount());
      Assert.assertEquals(coordReplicatonFactor, ((KafkaStreamSpec) internalSpec).getReplicationFactor());
      Assert.assertEquals(""123"", ((KafkaStreamSpec) internalSpec).getProperties().getProperty(""segment.bytes""));
      // cleanup policy is overridden in the KafkaAdmin
      Assert.assertEquals(""compact"", ((KafkaStreamSpec) internalSpec).getProperties().getProperty(""cleanup.policy""));

      return internalSpec;
    }).when(admin).toKafkaSpec(Mockito.any());

    admin.createStream(spec);
    admin.validateStream(spec);
  }
",non-flaky,5
33711,alibaba_fastjson,JSONScannerTest.checkTime17,"  @Test
  public void checkTime17() throws Throwable {

    // Arrange
    JSONScanner objectUnderTest = ((JSONScanner)Reflector.getInstance(""com.alibaba.fastjson.parser.JSONScanner""));
    objectUnderTest.hasSpecial = false;
    objectUnderTest.token = 0;
    objectUnderTest.locale = null;
    objectUnderTest.np = 0;
    objectUnderTest.features = 0;
    Reflector.setField(objectUnderTest, ""text"", """");
    objectUnderTest.calendar = null;
    objectUnderTest.matchStat = 0;
    objectUnderTest.bp = 0;
    Reflector.setField(objectUnderTest, ""len"", 0);
    objectUnderTest.stringDefaultValue = """";
    objectUnderTest.pos = 0;
    objectUnderTest.sp = 0;
    objectUnderTest.sbuf = null;
    objectUnderTest.ch = '\u0000';
    objectUnderTest.timeZone = null;
    objectUnderTest.eofPos = 0;
    char h0 = '1';
    char h1 = '9';
    char m0 = '6';
    char m1 = '1';
    char s0 = '1';
    char s1 = '\u0430';

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkTime"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(objectUnderTest, h0, h1, m0, m1, s0, s1);

    // Assert result
    Assert.assertEquals(false, retval);

  }
",non-flaky,5
43070,trinodb_trino,BaseConnectorTest.testShowCreateInformationSchemaTable,"    @Test
    public void testShowCreateInformationSchemaTable()
    {
        assertQueryFails(""SHOW CREATE VIEW information_schema.schemata"", ""line 1:1: Relation '\\w+.information_schema.schemata' is a table, not a view"");
        assertQueryFails(""SHOW CREATE MATERIALIZED VIEW information_schema.schemata"", ""line 1:1: Relation '\\w+.information_schema.schemata' is a table, not a materialized view"");

        assertThat((String) computeScalar(""SHOW CREATE TABLE information_schema.schemata""))
                .isEqualTo(""CREATE TABLE "" + getSession().getCatalog().orElseThrow() + "".information_schema.schemata (\n"" +
                        ""   catalog_name varchar,\n"" +
                        ""   schema_name varchar\n"" +
                        "")"");
    }
",non-flaky,5
94628,square_okhttp,InterceptorTest.intercept,"  @Test public void multipleNetworkInterceptors() throws Exception {
      @Override public Response intercept(Chain chain) throws IOException {
        Request originalRequest = chain.request();
        Response originalResponse = chain.proceed(originalRequest.newBuilder()
            .addHeader(""Request-Interceptor"", ""Android"") // 1. Added first.
            .build());
        return originalResponse.newBuilder()
            .addHeader(""Response-Interceptor"", ""Donut"") // 4. Added last.
            .build();
      }
",non-flaky,5
98043,vert-x3_vertx-mongo-client,AggregateOptionsTest.testToJson,"  @Test
  public void testToJson() {
    AggregateOptions options = new AggregateOptions();
    long maxTime = TestUtils.randomPositiveLong();
    options.setMaxTime(maxTime);

    assertEquals(options, new AggregateOptions(options.toJson()));
  }
",non-flaky,5
70825,apache_kafka,PluginDescTest.testPluginDescWithSystemClassLoader,"    @Test
    public void testPluginDescWithSystemClassLoader() {
        String location = ""classpath"";
        PluginDesc<SinkConnector> connectorDesc = new PluginDesc<>(
                SinkConnector.class,
                regularVersion,
                systemLoader
        );

        assertPluginDesc(connectorDesc, SinkConnector.class, regularVersion, location);

        PluginDesc<Converter> converterDesc = new PluginDesc<>(
                Converter.class,
                snaphotVersion,
                systemLoader
        );

        assertPluginDesc(converterDesc, Converter.class, snaphotVersion, location);

        PluginDesc<Transformation> transformDesc = new PluginDesc<>(
                Transformation.class,
                noVersion,
                systemLoader
        );

        assertPluginDesc(transformDesc, Transformation.class, noVersion, location);
    }
",non-flaky,5
30966,camunda-cloud_zeebe,POJOArrayTest.shouldDeserializePOJO,"  @Test
  public void shouldDeserializePOJO() {
    // given
    final POJOArray pojo = new POJOArray();

    final DirectBuffer buffer =
        encodeMsgPack(
            (w) -> {
              w.writeMapHeader(3);
              encodeSimpleArrayProp(w);

              w.writeString(wrapString(""emptyDefaultArray""));
              w.writeArrayHeader(1);

              w.writeMapHeader(1);
              w.writeString(wrapString(""longProp""));
              w.writeInteger(753L);

              w.writeString(wrapString(""notEmptyDefaultArray""));
              w.writeArrayHeader(0);
            });

    // when
    pojo.wrap(buffer);

    // then
    final Iterator<MinimalPOJO> iterator1 = pojo.simpleArray().iterator();
    assertThat(iterator1.hasNext()).isTrue();
    assertThat(iterator1.next().getLongProp()).isEqualTo(123L);
    assertThat(iterator1.hasNext()).isTrue();
    assertThat(iterator1.next().getLongProp()).isEqualTo(456L);
    assertThat(iterator1.hasNext()).isTrue();
    assertThat(iterator1.next().getLongProp()).isEqualTo(789L);
    assertThat(iterator1.hasNext()).isTrue();
    assertThat(iterator1.next().getLongProp()).isEqualTo(555L);
    assertThat(iterator1.hasNext()).isTrue();
    assertThat(iterator1.next().getLongProp()).isEqualTo(777L);
    assertThat(iterator1.hasNext()).isFalse();
  }
",non-flaky,5
175769,GoogleCloudPlatform_google-cloud-eclipse,FlexDeployPreferencesPanelTest.testAppYamlPathValidation_absolutePathWorks,"  @Test
  public void testAppYamlPathValidation_absolutePathWorks() {
    FlexDeployPreferencesPanel panel = createPanel(true /* requireValues */);
    Text appYamlField = findAppYamlField(panel);

    IPath absolutePath = project.getLocation().append(""src/main/appengine/app.yaml"");
    assertTrue(absolutePath.isAbsolute());

    appYamlField.setText(absolutePath.toString());
    assertTrue(getAppYamlPathValidationStatus(panel).isOK());
  }
",non-flaky,5
98636,nutzam_nutz,SimpleAdaptorTest.test_multi_err_ctxs,"    @Test
    public void test_multi_err_ctxs() {
        get(""/adaptor/multi/err/ctxs/a?id=ABC"");
        assertEquals(200, resp.getStatus());

        get(""/adaptor/multi/err/ctxs/a/ABC"");
        assertEquals(200, resp.getStatus());
    }
",non-flaky,5
177953,aosp-mirror_platform_frameworks_support,FileProviderTest.testStrategyUriJumpOutside,"    @Test
    public void testStrategyUriJumpOutside() throws Exception {
        final SimplePathStrategy strat = new SimplePathStrategy(""authority"");
        strat.addRoot(""tag"", mContext.getFilesDir());

        File file = buildPath(mContext.getFilesDir(), "".."", ""file.test"");
        try {
            strat.getUriForFile(file);
            fail(""file escaped!"");
        } catch (IllegalArgumentException e) {
        }
    }
",non-flaky,5
53205,cloudfoundry_uaa,TotpMfaEndpointIntegrationTests.testQRCodeScreen_ClickManualClickNextClickBack,"    @Test
    public void testQRCodeScreen_ClickManualClickNextClickBack() throws Exception{
        performLogin(username);
        assertEquals(zoneUrl + ""/login/mfa/register"", webDriver.getCurrentUrl());

        webDriver.findElement(By.linkText(""manual setup instructions"")).click();
        assertEquals(zoneUrl + ""/login/mfa/manual"", webDriver.getCurrentUrl());

        webDriver.findElement(By.id(""Next"")).click();
        assertEquals(zoneUrl + ""/login/mfa/verify"", webDriver.getCurrentUrl());

        webDriver.findElement(By.id(""Back"")).click();
        assertEquals(zoneUrl + ""/login/mfa/register"", webDriver.getCurrentUrl());

        String imageSrc = webDriver.findElement(By.id(""qr"")).getAttribute(""src"");

        String secretKey = getSecretFromQrImageString(imageSrc);

        assertFalse(""secret not found"", secretKey.isEmpty());

        webDriver.findElement(By.id(""Next"")).click();
        verifyCodeOnRegistration(secretKey, ""/"");
    }
",non-flaky,5
30920,camunda-cloud_zeebe,MsgPackWriterMiscTest.testEncodedBinaryValueLength,"  @Test
  public void testEncodedBinaryValueLength() {
    assertThat(MsgPackWriter.getEncodedBinaryValueLength(0xff)).isEqualTo(2 + 0xff);
    assertThat(MsgPackWriter.getEncodedBinaryValueLength(0xffff)).isEqualTo(3 + 0xffff);
    assertThat(MsgPackWriter.getEncodedBinaryValueLength(0x7fff_fffa)).isEqualTo(5 + 0x7fff_fffa);
  }
",non-flaky,5
118694,netty_netty,SmtpRequestEncoderTest.testEncodeMailNullSender,"    @Test
    public void testEncodeMailNullSender() {
        testEncode(SmtpRequests.mail(null), ""MAIL FROM:<>\r\n"");
    }
",non-flaky,5
114022,apache_struts,DefaultJSONWriterTest.testWriteExcludeNull,"    @Test
    public void testWriteExcludeNull() throws Exception {
        BeanWithMap bean1=new BeanWithMap();
        bean1.setStringField(""str"");
        bean1.setBooleanField(true);
        bean1.setCharField('s');
        bean1.setDoubleField(10.1);
        bean1.setFloatField(1.5f);
        bean1.setIntField(10);
        bean1.setLongField(100);
        bean1.setEnumField(AnEnum.ValueA);
        bean1.setEnumBean(AnEnumBean.Two);

        Map m = new LinkedHashMap();
        m.put(""a"", ""x"");
        m.put(""b"", null);
        m.put(""c"", ""z"");
        bean1.setMap(m);

        JSONWriter jsonWriter = new DefaultJSONWriter();
        jsonWriter.setEnumAsBean(false);
        jsonWriter.setIgnoreHierarchy(false);
        String json = jsonWriter.write(bean1, null, null, true);
        TestUtils.assertEquals(DefaultJSONWriter.class.getResource(""jsonwriter-write-bean-03.txt""), json);
    }
",non-flaky,5
134023,CorfuDB_CorfuDB,ServerHandshakeHandlerTest.testVersionMismatchHandshakeSucceed,"    @Test
    public void testVersionMismatchHandshakeSucceed() {
        // Get a HandshakeRequestMsg whose corfu_source_code_version set in the header is different
        // from that at server side.
        RequestMsg request = getRequestMsg(
            HeaderMsg.newBuilder()
                .setVersion(
                     ProtocolVersionMsg.newBuilder()
                    .setCorfuSourceCodeVersion(FAKE_CLIENT_VERSION)
                    .setCapabilityVector(CompatibilityVectorUtils.getCompatibilityVectors())
                    .build())
                .setRequestId(requestCounter.incrementAndGet())
                .setPriority(PriorityLevel.NORMAL)
                .setEpoch(0L)
                .setClusterId(getUuidMsg(DEFAULT_UUID))
                .setClientId(getUuidMsg(DEFAULT_UUID))
                .setIgnoreClusterId(false)
                .setIgnoreEpoch(true)
                .build(),
            getHandshakeRequestMsg(DEFAULT_UUID, SERVER_NODEID)
        );

        embeddedChannel.writeInbound(request);
        Object out = embeddedChannel.readOutbound();

        // Verify that the handshake could still complete even if the versions of client and server
        // are different.
        assertTrue(out instanceof ResponseMsg);
        assertEquals(SERVER_NODEID, getUUID(((ResponseMsg) out).getPayload().getHandshakeResponse()
                .getServerId()));
    }
",non-flaky,5
20966,NationalSecurityAgency_timely,TestDataStoreCacheIterator.testDownsampleIterator,"    @Test
    public void testDownsampleIterator() throws TimelyException {

        long BASETIME = System.currentTimeMillis();
        // align basetime to a downsample period
        BASETIME = BASETIME - (BASETIME % (1000 * 60));
        DataStoreCache mmStore = getMetricMemoryStore1(BASETIME);

        QueryRequest query = new QueryRequest();
        query.setStart(BASETIME);
        query.setEnd(BASETIME + 1440000);
        query.setMsResolution(true);
        QueryRequest.SubQuery subQuery = new QueryRequest.SubQuery();
        subQuery.setDownsample(Optional.of(""1m-avg""));
        subQuery.setMetric(""metric.number.1"");
        subQuery.addTag(""host"", "".*"");
        query.setQueries(Collections.singleton(subQuery));

        SortedKeyValueIterator<org.apache.accumulo.core.data.Key, org.apache.accumulo.core.data.Value> itr = null;
        try {
            long firstTimestamp = -1;
            long lastTimestamp = -1;
            int numSamples = 0;
            itr = mmStore.setupIterator(query, subQuery, new Authorizations(), Long.MAX_VALUE);
            while (itr.hasTop()) {
                itr.next();
                Map<Set<Tag>, Aggregation> aggregations = AggregationIterator.decodeValue(itr.getTopValue());
                for (Map.Entry<Set<Tag>, Aggregation> entry : aggregations.entrySet()) {
                    for (Sample s : entry.getValue()) {
                        numSamples++;
                        if (firstTimestamp == -1) {
                            firstTimestamp = s.timestamp;
                        }
                        lastTimestamp = s.timestamp;
                    }
                }
            }
            Assert.assertEquals(""First timestamp incorrect"", BASETIME, firstTimestamp);
            Assert.assertEquals(""Last timestamp incorrect"", BASETIME + 1440000, lastTimestamp);
            Assert.assertEquals(""Number of samples incorrect"", 50, numSamples);
        } catch (IOException | ClassNotFoundException e) {
            LOG.error(""exception in test"", e);
        }
    }
",non-flaky,5
177227,line_armeria,FileWatcherRegistryTest.runnableWithExceptionContinuesRun,"    @Test
    public void runnableWithExceptionContinuesRun() throws Exception {

        final File file = folder.newFile(""temp-file.properties"");
        final FileWatcherRegistry fileWatcherRegistry = new FileWatcherRegistry();

        final AtomicInteger val = new AtomicInteger(0);
        final FileWatchRegisterKey key = fileWatcherRegistry.register(file.toPath(), () -> {
            try {
                final BufferedReader bufferedReader = new BufferedReader(new FileReader(file));
                val.set(Integer.valueOf(bufferedReader.readLine()));
            } catch (IOException e) {
                // do nothing
            }
            throw new RuntimeException();
        });

        PrintWriter printWriter = new PrintWriter(file);
        printWriter.print(1);
        printWriter.close();

        await().untilAsserted(() -> assertThat(val.get()).isEqualTo(1));

        assertThat(fileWatcherRegistry.isRunning()).isTrue();

        printWriter = new PrintWriter(file);
        printWriter.print(2);
        printWriter.close();

        await().untilAsserted(() -> assertThat(val.get()).isEqualTo(2));

        assertThat(fileWatcherRegistry.isRunning()).isTrue();

        fileWatcherRegistry.unregister(key);

        assertThat(fileWatcherRegistry.isRunning()).isFalse();

        fileWatcherRegistry.close();
    }
",non-flaky,5
106599,Alluxio_alluxio,ContainerAllocatorTest.notEnoughHosts,"  @Test(timeout = 10000)
  public void notEnoughHosts() throws Exception {
    int numHosts = 10;
    int maxContainersPerHost = 5;
    int numContainers = numHosts * maxContainersPerHost + 1; // one container too many
    ContainerAllocator containerAllocator =
        setup(numHosts, maxContainersPerHost, numContainers);
    mThrown.expect(RuntimeException.class);
    mThrown.expectMessage(
        ExceptionMessage.YARN_NOT_ENOUGH_HOSTS.getMessage(numContainers, CONTAINER_NAME, numHosts));
    containerAllocator.allocateContainers();
  }
",non-flaky,5
77494,dropwizard_dropwizard,SelfValidatingValidatorTest.validateCorrect,"    @Test
        public void validateCorrect(ViolationCollector col) {
        }
",non-flaky,5
89353,apache_samza,TestKafkaCheckpointLogKeySerde.testBinaryCompatibility,"  @Test
  public void testBinaryCompatibility() {
    KafkaCheckpointLogKey logKey1 = new KafkaCheckpointLogKey(KafkaCheckpointLogKey.CHECKPOINT_V1_KEY_TYPE,
        new TaskName(""Partition 0""), GroupByPartitionFactory.class.getCanonicalName());
    KafkaCheckpointLogKeySerde checkpointSerde = new KafkaCheckpointLogKeySerde();

    byte[] bytes = (""{\""systemstreampartition-grouper-factory\"""" +
        "":\""org.apache.samza.container.grouper.stream.GroupByPartitionFactory\"",\""taskName\"":\""Partition 0\"","" +
        ""\""type\"":\""checkpoint\""}"").getBytes();

    // test that the checkpoints returned by the Serde are byte-wise identical to an actual checkpoint in Kafka
    Assert.assertEquals(true, Arrays.equals(bytes, checkpointSerde.toBytes(logKey1)));
  }
",non-flaky,5
59576,looly_hutool,CronPatternUtilTest.matchedDatesTest3,"	@Test
	public void matchedDatesTest3() {
		//æµè¯æåä¸å¤©
		List<Date> matchedDates = CronPatternUtil.matchedDates(""0 0 */1 L * *"", DateUtil.parse(""2018-10-30 23:33:22""), 5, true);
		Assert.assertEquals(5, matchedDates.size());
		Assert.assertEquals(""2018-10-31 00:00:00"", matchedDates.get(0).toString());
		Assert.assertEquals(""2018-10-31 01:00:00"", matchedDates.get(1).toString());
		Assert.assertEquals(""2018-10-31 02:00:00"", matchedDates.get(2).toString());
		Assert.assertEquals(""2018-10-31 03:00:00"", matchedDates.get(3).toString());
		Assert.assertEquals(""2018-10-31 04:00:00"", matchedDates.get(4).toString());
	}
",non-flaky,5
59594,looly_hutool,PinyinUtilTest.getPinyinByPinyin4jTest,"	@Test
	public void getPinyinByPinyin4jTest() {
		final Pinyin4jEngine engine = new Pinyin4jEngine();
		final String pinyin = engine.getPinyin(""ä½ å¥½h"", "" "");
		Assert.assertEquals(""ni hao h"", pinyin);
	}
",non-flaky,5
104654,apache_pinot,OfflineClusterIntegrationTest.testQueryWithAlias,"  @Test
  public void testQueryWithAlias()
      throws Exception {
    {
      //test same alias name with column name
      String query =
          ""SELECT ArrTime AS ArrTime, Carrier AS Carrier, DaysSinceEpoch AS DaysSinceEpoch FROM mytable ORDER BY ""
              + ""DaysSinceEpoch DESC"";
      testSqlQuery(query, Collections.singletonList(query));

      query =
          ""SELECT ArrTime AS ArrTime, DaysSinceEpoch AS DaysSinceEpoch, Carrier AS Carrier FROM mytable ORDER BY ""
              + ""Carrier DESC"";
      testSqlQuery(query, Collections.singletonList(query));

      query =
          ""SELECT ArrTime AS ArrTime, DaysSinceEpoch AS DaysSinceEpoch, Carrier AS Carrier FROM mytable ORDER BY ""
              + ""Carrier DESC, ArrTime DESC"";
      testSqlQuery(query, Collections.singletonList(query));
    }
    {
      //test single alias
      String query = ""SELECT ArrTime, Carrier AS CarrierName, DaysSinceEpoch FROM mytable ORDER BY DaysSinceEpoch DESC"";
      testSqlQuery(query, Collections.singletonList(query));

      query = ""SELECT count(*) AS cnt, max(ArrTime) as maxArrTime FROM mytable"";
      testSqlQuery(query, Collections.singletonList(query));

      query = ""SELECT count(*) AS cnt, Carrier AS CarrierName FROM mytable GROUP BY CarrierName ORDER BY cnt"";
      testSqlQuery(query, Collections.singletonList(query));
    }
    {
      //test multiple alias
      String query =
          ""SELECT ArrTime, Carrier, Carrier AS CarrierName1, Carrier AS CarrierName2, DaysSinceEpoch FROM mytable ""
              + ""ORDER BY DaysSinceEpoch DESC"";
      testSqlQuery(query, Collections.singletonList(query));

      query = ""SELECT count(*) AS cnt, max(ArrTime) as maxArrTime1, max(ArrTime) as maxArrTime2 FROM mytable"";
      testSqlQuery(query, Collections.singletonList(query));

      query =
          ""SELECT count(*), count(*) AS cnt1, count(*) AS cnt2, Carrier AS CarrierName FROM mytable GROUP BY ""
              + ""CarrierName ORDER BY cnt2"";
      testSqlQuery(query, Collections.singletonList(query));
    }
  }
",non-flaky,5
156095,soot-oss_soot,AsmInnerClassTest.InnerStatic,"  @Test
  public void InnerStatic() {
    SootMethod target2 =
        prepareTarget(
            methodSigFromComponents(TEST_TARGET_CLASS + ""$Inner"", ""void"", ""<init>""),
            TEST_TARGET_CLASS + ""$Inner"");
    assertEquals(2, Scene.v().getApplicationClasses().size());
    assertTrue(target2.getDeclaringClass().hasOuterClass());
    assertTrue(target2.getDeclaringClass().isInnerClass());
    InnerClassTag tag2 = (InnerClassTag) target2.getDeclaringClass().getTag(InnerClassTag.NAME);
    assertNotNull(tag2);
    assertEquals(""soot/asm/ScopeFinderTarget$Inner"", tag2.getInnerClass());
    assertEquals(""soot/asm/ScopeFinderTarget"", tag2.getOuterClass());
    assertTrue(Modifier.isStatic(tag2.getAccessFlags()));
  }
",non-flaky,5
98237,apache_jackrabbit,PerformanceTest.testPerformance,"    @Test
    public void testPerformance() throws Exception {
        testPerformance(""1.1"");
    }
",non-flaky,5
179413,abel533_Mapper,KeySqlTest.testSql,"    @Test
    public void testSql(){
        EntityHelper.initEntityNameMap(UserSql.class, config);
        EntityTable entityTable = EntityHelper.getEntityTable(UserSql.class);
        Assert.assertNotNull(entityTable);

        Set<EntityColumn> columns = entityTable.getEntityClassColumns();
        Assert.assertEquals(1, columns.size());

        for (EntityColumn column : columns) {
            Assert.assertEquals(""select seq.nextval from dual"", column.getGenerator());
            Assert.assertEquals(ORDER.BEFORE, column.getOrder());
            Assert.assertTrue(column.isIdentity());
        }
    }
",non-flaky,5
104676,apache_pinot,RealtimeToOfflineSegmentsMinionClusterIntegrationTest.testDictionaryBasedQueries,"  @Test(enabled = false)
  public void testDictionaryBasedQueries() {
  }
",non-flaky,5
59578,looly_hutool,CronTest.cronTest,"	@Test
	public void cronTest() {
		// æ¯æç§çº§å«å®æ¶ä»»å¡
		CronUtil.setMatchSecond(true);
		CronUtil.getScheduler().setDaemon(false);
		CronUtil.start();

		ThreadUtil.waitForDie();
		CronUtil.stop();
	}
",non-flaky,5
53225,cloudfoundry_uaa,SamlLoginIT.failureResponseFromSamlIDP_showErrorFromSaml,"    @Test
    public void failureResponseFromSamlIDP_showErrorFromSaml() throws Exception {
        String zoneId = ""testzone3"";
        String zoneUrl = baseUrl.replace(""localhost"",zoneId+"".localhost"");

        //identity client token
        RestTemplate identityClient = IntegrationTestUtils.getClientCredentialsTemplate(
            IntegrationTestUtils.getClientCredentialsResource(baseUrl, new String[]{""zones.write"", ""zones.read"", ""scim.zones""}, ""identity"", ""identitysecret"")
        );
        RestTemplate adminClient = IntegrationTestUtils.getClientCredentialsTemplate(
            IntegrationTestUtils.getClientCredentialsResource(baseUrl, new String[0], ""admin"", ""adminsecret"")
        );
        //create the zone

        IntegrationTestUtils.createZoneOrUpdateSubdomain(identityClient, baseUrl, zoneId, zoneId, null);

        //create a zone admin user
        String email = new RandomValueStringGenerator().generate() +""@samltesting.org"";
        ScimUser user = IntegrationTestUtils.createUser(adminClient, baseUrl,email ,""firstname"", ""lastname"", email, true);
        String groupId = IntegrationTestUtils.findGroupId(adminClient, baseUrl, ""zones."" + zoneId + "".admin"");
        IntegrationTestUtils.addMemberToGroup(adminClient, baseUrl, user.getId(), groupId);

        //get the zone admin token
        String zoneAdminToken =
            IntegrationTestUtils.getAccessTokenByAuthCode(serverRunning,
                UaaTestAccounts.standard(serverRunning),
                ""identity"",
                ""identitysecret"",
                email,
                ""secr3T"");

        SamlIdentityProviderDefinition samlIdentityProviderDefinition = createSimplePHPSamlIDP(SAML_ORIGIN, ""testzone3"");
        IdentityProvider provider = new IdentityProvider();
        provider.setIdentityZoneId(zoneId);
        provider.setType(OriginKeys.SAML);
        provider.setActive(true);
        provider.setConfig(samlIdentityProviderDefinition);
        provider.setOriginKey(samlIdentityProviderDefinition.getIdpEntityAlias());
        provider.setName(""simplesamlphp for testzone2"");

        IntegrationTestUtils.createOrUpdateProvider(zoneAdminToken, baseUrl, provider);

        webDriver.get(zoneUrl);
        webDriver.findElement(By.linkText(""Login with Simple SAML PHP(simplesamlphp)"")).click();
        webDriver.findElement(By.xpath(""//h2[contains(text(), 'Enter your username and password')]""));
        webDriver.findElement(By.name(""username"")).clear();
        webDriver.findElement(By.name(""username"")).sendKeys(testAccounts.getUserName());
        webDriver.findElement(By.name(""password"")).sendKeys(testAccounts.getPassword());
        webDriver.findElement(By.xpath(""//input[@value='Login']"")).click();

        assertEquals(""No local entity found for alias invalid, verify your configuration."", webDriver.findElement(By.cssSelector(""h2"")).getText());
    }
",non-flaky,5
162746,OpenAPITools_openapi-generator,NameTest.nameTest,"    @Test
    public void nameTest() {
        // TODO: test name
    }
",non-flaky,5
91439,strapdata_elassandra,RpmPreservationTestCase.onlyCompatibleDistributions,"@TestCaseOrdering(TestCaseOrdering.AlphabeticOrder.class)
    public void onlyCompatibleDistributions() {
        assumeTrue(""only rpm platforms"", isRPM());
        assumeTrue(""only compatible distributions"", distribution().packaging.compatible);
    }
",non-flaky,5
336,apache_hadoop,TestOpenFileCtxCache.testScan,"  @Test
  public void testScan() throws IOException, InterruptedException {
    NfsConfiguration conf = new NfsConfiguration();

    // Only two entries will be in the cache
    conf.setInt(NfsConfigKeys.DFS_NFS_MAX_OPEN_FILES_KEY, 2);

    DFSClient dfsClient = Mockito.mock(DFSClient.class);
    Nfs3FileAttributes attr = new Nfs3FileAttributes();
    HdfsDataOutputStream fos = Mockito.mock(HdfsDataOutputStream.class);
    Mockito.when(fos.getPos()).thenReturn((long) 0);

    OpenFileCtx context1 = new OpenFileCtx(fos, attr, ""/dumpFilePath"",
        dfsClient, new ShellBasedIdMapping(new NfsConfiguration()));
    OpenFileCtx context2 = new OpenFileCtx(fos, attr, ""/dumpFilePath"",
        dfsClient, new ShellBasedIdMapping(new NfsConfiguration()));
    OpenFileCtx context3 = new OpenFileCtx(fos, attr, ""/dumpFilePath"",
        dfsClient, new ShellBasedIdMapping(new NfsConfiguration()));
    OpenFileCtx context4 = new OpenFileCtx(fos, attr, ""/dumpFilePath"",
        dfsClient, new ShellBasedIdMapping(new NfsConfiguration()));

    OpenFileCtxCache cache = new OpenFileCtxCache(conf, 10 * 60 * 100);

    // Test cleaning expired entry
    boolean ret = cache.put(new FileHandle(1), context1);
    assertTrue(ret);
    ret = cache.put(new FileHandle(2), context2);
    assertTrue(ret);
    Thread.sleep(NfsConfigKeys.DFS_NFS_STREAM_TIMEOUT_MIN_DEFAULT + 1);
    cache.scan(NfsConfigKeys.DFS_NFS_STREAM_TIMEOUT_MIN_DEFAULT);
    assertTrue(cache.size() == 0);

    // Test cleaning inactive entry
    ret = cache.put(new FileHandle(3), context3);
    assertTrue(ret);
    ret = cache.put(new FileHandle(4), context4);
    assertTrue(ret);
    context3.setActiveStatusForTest(false);
    cache.scan(NfsConfigKeys.DFS_NFS_STREAM_TIMEOUT_DEFAULT);
    assertTrue(cache.size() == 1);
    assertTrue(cache.get(new FileHandle(3)) == null);
    assertTrue(cache.get(new FileHandle(4)) != null);
  }
",non-flaky,5
98367,Kong_unirest-java,CustomObjectMapperTest.setUp,"    @BeforeEach
    public void setUp() {
        super.setUp();
        customOm = Mockito.spy(JsonObjectMapper.class);
    }
",non-flaky,5
177173,line_armeria,SamlServiceProviderTest.shouldConsumeLogoutRequest_HttpRedirect,"    @Test
    public void shouldConsumeLogoutRequest_HttpRedirect() throws Exception {
        final LogoutRequest logoutRequest =
                getLogoutRequest(""http://"" + spHostname + ':' + rule.httpPort() + ""/saml/slo/redirect"",
                                 ""http://idp.example.com/redirect"");

        final AggregatedHttpResponse res =
                sendViaHttpRedirectBindingProtocol(""/saml/slo/redirect"", SAML_REQUEST, logoutRequest);

        assertThat(res.status()).isEqualTo(HttpStatus.FOUND);

        // Check the order of the parameters in the quest string.
        final String location = res.headers().get(HttpHeaderNames.LOCATION);
        final Pattern p = Pattern.compile(
                ""http://idp\\.example\\.com/saml/slo/redirect\\?"" +
                ""SAMLResponse=([^&]+)&SigAlg=([^&]+)&Signature=(.+)$"");
        assertThat(location).isNotNull();
        assertThat(p.matcher(location).matches()).isTrue();
    }
",non-flaky,5
39,quarkusio_quarkus,testTimedMethod,"@Test
void testTimedMethod() throws InterruptedException {
    assertTrue(Jobs.latch01.await(5, TimeUnit.SECONDS));
    assertTrue(Jobs.latch02.await(5, TimeUnit.SECONDS));
    Timer timer1 = registry.get(""scheduled.methods"")
    .tag(""method"", ""everySecond"")
    .tag(""class"", ""io.quarkus.scheduler.test.metrics.MicrometerTimedTest$Jobs"")
    .tag(""exception"", ""none"")
    .timer();
    assertNotNull(timer1);
    assertTrue(timer1.count() > 0);
    Timer timer2 = registry.get(""foo"")
    .tag(""method"", ""anotherEverySecond"")
    .tag(""class"", ""io.quarkus.scheduler.test.metrics.MicrometerTimedTest$Jobs"")
    .tag(""exception"", ""none"")
    .timer();
    assertNotNull(timer2);
    assertTrue(timer2.count() > 0);
}",time,2
170476,eclipse_jetty.project,ObjectMBeanUtilTest.testSetAttributesForArrayTypeAttribute,"    @Test
    public void testSetAttributesForArrayTypeAttribute() throws Exception
    {
        Derived[] deriveds = getArrayTypeAttribute();

        derivedManaged.setAddresses(deriveds);
        mBeanDerivedManaged.getMBeanInfo();

        assertNotNull(mBeanDerivedManaged.getAttribute(""addresses""), ""Address object shouldn't be null"");
    }
",non-flaky,5
26767,MundaneImmortal_pair-distribution-app,DayPairsTest.testGetPairByTrack,"	@Test
	public void testGetPairByTrack() {
		Pair pair1 = new Pair(Arrays.asList(new Developer(""dev1""), new Developer(""dev2"")));
		Pair pair2 = new Pair(Arrays.asList(new Developer(""dev3""), new Developer(""dev4"")));
		DayPairs pairs = new DayPairs();
		pairs.addPair(""track1"", pair1);
		pairs.addPair(""track2"", pair2);
		
		assertThat(pairs.getPairByTrack(""track1""), is(equalTo(pair1)));
		assertThat(pairs.getPairByTrack(""track2""), is(equalTo(pair2)));
	}
",non-flaky,5
89326,apache_samza,TestKafkaSystemAdminJava.testGetOffsetsAfter,"  @Test
  public void testGetOffsetsAfter() {
    SystemStreamPartition ssp1 = new SystemStreamPartition(SYSTEM, TOPIC, new Partition(0));
    SystemStreamPartition ssp2 = new SystemStreamPartition(SYSTEM, TOPIC, new Partition(1));
    Map<SystemStreamPartition, String> offsets = new HashMap<>();
    offsets.put(ssp1, ""1"");
    offsets.put(ssp2, ""2"");

    offsets = systemAdmin().getOffsetsAfter(offsets);

    Assert.assertEquals(""2"", offsets.get(ssp1));
    Assert.assertEquals(""3"", offsets.get(ssp2));
  }
",non-flaky,5
99761,apache_cassandra,RateBasedBackPressureTest.testAcceptsNoLessThanThreeArguments,"    @Test(expected = IllegalArgumentException.class)
    public void testAcceptsNoLessThanThreeArguments() throws Exception
    {
        new RateBasedBackPressure(ImmutableMap.of(HIGH_RATIO, ""1""), new TestTimeSource(), 10);
    }
",non-flaky,5
77714,pholser_junit-quickcheck,PrimitivePropertyParameterTypesTest.shouldHold,"    @Test public void wrapperFloat() {
        @Property public void shouldHold(Float f) {
            assertThat(f, greaterThanOrEqualTo(RangeAttributes.minFloat()));
            assertThat(f, lessThan(RangeAttributes.maxFloat()));
        }
",non-flaky,5
77625,pholser_junit-quickcheck,DurationPropertyParameterTypesTest.shouldHold,"    @Test public void malformedMax() {
        @Property public void shouldHold(
            @InRange(
",non-flaky,5
76741,quarkusio_quarkus,RemoteDevMojoIT.testThatTheApplicationIsReloadedOnConfigChange,"    @Test
    public void testThatTheApplicationIsReloadedOnConfigChange() throws MavenInvocationException, IOException {
        testDir = initProject(""projects/classic-remote-dev"", ""projects/project-classic-run-config-change-remote"");
        agentDir = initProject(""projects/classic-remote-dev"", ""projects/project-classic-run-config-change-local"");
        assertThat(testDir).isDirectory();
        runAndCheck();

        String resp = DevModeTestUtils.getHttpResponse();
        runningAgent = new RunningInvoker(agentDir, false);
        runningAgent.execute(Arrays.asList(""compile"", ""quarkus:remote-dev""), Collections.emptyMap());

        assertThat(resp).containsIgnoringCase(""ready"").containsIgnoringCase(""application"").containsIgnoringCase(""org.acme"")
                .containsIgnoringCase(""1.0-SNAPSHOT"");

        String greeting = DevModeTestUtils.getHttpResponse(""/app/hello/greeting"");
        assertThat(greeting).containsIgnoringCase(""bonjour"");

        File source = new File(agentDir, ""src/main/resources/application.properties"");
        await()
                .pollDelay(1, TimeUnit.SECONDS)
                .pollInterval(1, TimeUnit.SECONDS)
                .until(source::isFile);

        String uuid = UUID.randomUUID().toString();
        filter(source, Collections.singletonMap(""bonjour"", uuid));

        // Wait until we get ""uuid""
        await()
                .pollDelay(1, TimeUnit.SECONDS)
                .atMost(1, TimeUnit.MINUTES)
                .until(() -> DevModeTestUtils.getHttpResponse(""/app/hello/greeting"").contains(uuid));
    }
",non-flaky,5
21232,androidx_androidx,PreferencePersistTest.string_retrieveWhenEmpty_returnsDefault,"    @Test
    public void string_retrieveWhenEmpty_returnsDefault() {
        final String expected = ""Default"";

        String result = mPreference.getString(expected);

        assertEquals(expected, result);
    }
",non-flaky,5
378,apache_hadoop,TestFcHdfsSetUMask.testMkdirWithExistingDirOpen,"  @Test
  public void testMkdirWithExistingDirOpen() throws IOException {
    testMkdirWithExistingDir(WIDE_OPEN_TEST_UMASK, WIDE_OPEN_PERMISSIONS);
  }
",non-flaky,5
98604,nutzam_nutz,El2Test.complexOperation,"    @Test
    public void complexOperation() {
        assertEquals(1000
                     + 100.0
                     * 99
                     - (600 - 3 * 15)
                     % (((68 - 9) - 3) * 2 - 100)
                     + 10000
                     % 7
                     * 71, El.eval(""1000+100.0*99-(600-3*15)%(((68-9)-3)*2-100)+10000%7*71""));
        assertEquals(6.7 - 100 > 39.6 ? true ? 4 + 5 : 6 - 1 : !(100 % 3 - 39.0 < 27) ? 8 * 2 - 199
                                                                                     : 100 % 3,
                     El.eval(""6.7-100>39.6 ? 5==5? 4+5:6-1 : !(100%3-39.0<27) ? 8*2-199: 100%3""));

        Context vars = Lang.context();
        vars.set(""i"", 100);
        vars.set(""pi"", 3.14f);
        vars.set(""d"", -3.9);
        vars.set(""b"", (byte) 4);
        vars.set(""bool"", false);
        vars.set(""t"", """");
        String t = ""i * pi + (d * b - 199) / (1 - d * pi) - (2 + 100 - i / pi) % 99 ==i * pi + (d * b - 199) / (1 - d * pi) - (2 + 100 - i / pi) % 99"";
        // t =
        // ""i * pi + (d * b - 199) / (1 - d * pi) - (2 + 100 - i / pi) % 99"";
        assertEquals(true, El.eval(vars, t));

        // assertEquals('A' == ('A') || 'B' == 'B' && ""ABCD"" == """" && 'A' ==
        // 'A', el.eval(vars,
        // ""'A' == 'A' || 'B' == 'B' && 'ABCD' == t &&  'A' == 'A'""));
        assertEquals(true || true && false && true,
                     El.eval(vars, ""'A' == 'A' || 'B' == 'B' && 'ABCD' == t &&  'A' == 'A'""));
    }
",non-flaky,5
160413,ConsenSys_teku,ChainDataProviderTest.getStateSyncCommittees_shouldRejectFarFutureEpoch,"  @Test
  public void getStateSyncCommittees_shouldRejectFarFutureEpoch() {
    final ChainDataProvider provider = setupAltairState();
    final SafeFuture<Optional<StateSyncCommittees>> future =
        provider.getStateSyncCommittees(""head"", Optional.of(UInt64.valueOf(""1024000"")));
    SafeFutureAssert.assertThatSafeFuture(future)
        .isCompletedExceptionallyWith(IllegalArgumentException.class);
  }
",non-flaky,5
177977,aosp-mirror_platform_frameworks_support,ColorUtilsTest.testCircularInterpolationForwards,"    @Test
    public void testCircularInterpolationForwards() {
        assertEquals(0f, ColorUtils.circularInterpolate(0, 180, 0f), 0f);
        assertEquals(90f, ColorUtils.circularInterpolate(0, 180, 0.5f), 0f);
        assertEquals(180f, ColorUtils.circularInterpolate(0, 180, 1f), 0f);
    }
",non-flaky,5
78280,apache_beam,StateTagTest.testWatermarkBagEquality,"  @Test
  public void testWatermarkBagEquality() {
    StateTag<?> foo1 = StateTags.watermarkStateInternal(""foo"", TimestampCombiner.EARLIEST);
    StateTag<?> foo2 = StateTags.watermarkStateInternal(""foo"", TimestampCombiner.EARLIEST);
    StateTag<?> bar = StateTags.watermarkStateInternal(""bar"", TimestampCombiner.EARLIEST);

    StateTag<?> bar2 = StateTags.watermarkStateInternal(""bar"", TimestampCombiner.LATEST);

    // Same id, same fn.
    assertEquals(foo1, foo2);
    // Different id, same fn.
    assertNotEquals(foo1, bar);
    // Same id, different fn.
    assertEquals(bar, bar2);
  }
",non-flaky,5
26696,MundaneImmortal_pair-distribution-app,PairingBoardTest.testParseDevOpsCompany,"	@Test
	public void testParseDevOpsCompany() {
		PairingBoard pairingBoard = new PairingBoard(null, null, null);
		
		assertThat(pairingBoard.parseDevOpsCompanies(""devops:company""), is(new String[] {""company""}));
		assertThat(pairingBoard.parseDevOpsCompanies(""devops:company,companyb""), is(new String[] {""company"", ""companyb""}));
		assertThat(pairingBoard.parseDevOpsCompanies(""devops:""), is(new String[] {}));
	}
",non-flaky,5
77645,pholser_junit-quickcheck,Primitive3DArrayPropertyParameterTypesTest.shouldHold,"    @Test public void wrapperCharacterArray() {
        @Property(trials = 2) public void shouldHold(Character[][][] ch) {
        }
",non-flaky,5
95651,togglz_togglz,ShiroUsersTest.testShiroLoginAsNormalUser,"    @Test
    public void testShiroLoginAsNormalUser() throws Exception {

        WebClient client = new WebClient();

        TextPage beforeLogin = client.getPage(url + ""user"");
        assertTrue(beforeLogin.getContent().contains(""USER = null""));
        assertTrue(beforeLogin.getContent().contains(""ADMIN = null""));

        TextPage loginPage = client.getPage(url + ""login?user=somebody"");
        assertTrue(loginPage.getContent().contains(""SUCCESS""));

        TextPage afterLogin = client.getPage(url + ""user"");
        assertTrue(afterLogin.getContent().contains(""USER = somebody""));
        assertTrue(afterLogin.getContent().contains(""ADMIN = false""));

        TextPage logoutPage = client.getPage(url + ""logout"");
        assertTrue(logoutPage.getContent().contains(""SUCCESS""));

        TextPage afterLogout = client.getPage(url + ""user"");
        assertTrue(afterLogout.getContent().contains(""USER = null""));
        assertTrue(afterLogout.getContent().contains(""ADMIN = null""));

    }
",non-flaky,5
113974,apache_struts,TestNGXWorkTestCaseTest.testRun,"    @Test
        public void testRun() {
            ran = true;
            mgr = this.configurationManager;
        }
",non-flaky,5
60902,apache_druid,MovingAverageIterableTest.testCompleteData,"  @Test
  public void testCompleteData()
  {

    Map<String, Object> event1 = new HashMap<>();
    Map<String, Object> event2 = new HashMap<>();
    Map<String, Object> event3 = new HashMap<>();

    event1.put(""gender"", ""m"");
    event1.put(""pageViews"", 10L);
    event2.put(""gender"", ""f"");
    event2.put(""pageViews"", 20L);
    event3.put(""gender"", ""u"");
    event3.put(""pageViews"", 30L);

    List<DimensionSpec> ds = new ArrayList<>();
    ds.add(new DefaultDimensionSpec(""gender"", ""gender""));

    Row jan1Row1 = new MapBasedRow(JAN_1, event1);
    Row jan1Row2 = new MapBasedRow(JAN_1, event2);
    Row jan1Row3 = new MapBasedRow(JAN_1, event3);

    Row jan2Row1 = new MapBasedRow(JAN_2, event1);
    Row jan2Row2 = new MapBasedRow(JAN_2, event2);
    Row jan2Row3 = new MapBasedRow(JAN_2, event3);

    Sequence<RowBucket> seq = Sequences.simple(Arrays.asList(
        new RowBucket(JAN_1, Arrays.asList(jan1Row1, jan1Row2, jan1Row3)),
        new RowBucket(JAN_2, Arrays.asList(jan2Row1, jan2Row2, jan2Row3))
    ));

    Iterator<Row> iter = new MovingAverageIterable(
        seq,
        ds,
        Collections.singletonList(
            new LongMeanAveragerFactory(""movingAvgPageViews"", 2, 1, ""pageViews"")
        ),
        Collections.emptyList(),
        Collections.singletonList(new LongSumAggregatorFactory(""pageViews"", ""pageViews""))
    ).iterator();

    Assert.assertTrue(iter.hasNext());
    Row result = iter.next();
    Assert.assertEquals(""m"", (result.getDimension(""gender"")).get(0));
    Assert.assertEquals(JAN_1, (result.getTimestamp()));

    Assert.assertTrue(iter.hasNext());
    result = iter.next();
    Assert.assertEquals(""f"", (result.getDimension(""gender"")).get(0));
    Assert.assertEquals(JAN_1, (result.getTimestamp()));

    Assert.assertTrue(iter.hasNext());
    result = iter.next();
    Assert.assertEquals(""u"", (result.getDimension(""gender"")).get(0));
    Assert.assertEquals(JAN_1, (result.getTimestamp()));

    Assert.assertTrue(iter.hasNext());
    result = iter.next();
    Assert.assertEquals(""m"", (result.getDimension(""gender"")).get(0));
    Assert.assertEquals(JAN_2, (result.getTimestamp()));

    Assert.assertTrue(iter.hasNext());
    result = iter.next();
    Assert.assertEquals(""f"", (result.getDimension(""gender"")).get(0));
    Assert.assertEquals(JAN_2, (result.getTimestamp()));

    Assert.assertTrue(iter.hasNext());
    result = iter.next();
    Assert.assertEquals(""u"", (result.getDimension(""gender"")).get(0));
    Assert.assertEquals(JAN_2, (result.getTimestamp()));

    Assert.assertFalse(iter.hasNext());

  }
",non-flaky,5
176829,ctco_cukes,LDIFUtilsTest.readSingleEntity,"    @Test
    public void readSingleEntity() throws Exception {
        String ldif = ""dn: dc=example,dc=com\n"" +
            ""objectClass: domain\n"" +
            ""objectClass: top\n"" +
            ""dc: example\n"";
        Map<String, Attributes> entities = LDIFUtils.read(new ByteArrayInputStream(ldif.getBytes()));
        assertThat(entities.size(), is(1));
        String dn = ""dc=example,dc=com"";
        Attributes entity = entities.get(dn);
        assertThat(entity, notNullValue());

        assertThat(entity.get(""dn""), nullValue());
        assertThat(entity.get(""dc"").get(), is(""example""));
        assertThat(entity.get(""objectClass"").contains(""domain""), is(true));
        assertThat(entity.get(""objectClass"").contains(""top""), is(true));
    }
",non-flaky,5
113778,salesforce_reactive-grpc,ReactiveBackpressureChunkerTest.requestManyGetsAChunkFirst,"    @Test
    public void requestManyGetsAChunkFirst() {
        int chunkSize = 16;
        ReactiveBackpressureChunker<Object> chunker = new ReactiveBackpressureChunker<Object>(chunkSize);
        UpstreamSubscription upstreamSubscription = new UpstreamSubscription();
        DownstreamSubscriber downstreamSubscriber = new DownstreamSubscriber();

        Subscriber<Object> chunkSubscriber = chunker.apply(downstreamSubscriber);
        chunkSubscriber.onSubscribe(upstreamSubscription);

        downstreamSubscriber.upstreamSubscription.request(256);
        assertThat(upstreamSubscription.lastRequested).isEqualTo(chunkSize);
    }
",non-flaky,5
174,hwang-pku_ormlite-core,DatabaseFieldConfigTest.testFromDbField,"@Test
public void testFromDbField() throws Exception {
    Field[] fields = Foo.class.getDeclaredFields();
    assertTrue(fields.length >= 1);
    DatabaseFieldConfig config = DatabaseFieldConfig.fromField(databaseType, ""foo"", fields[0]);
    assertNotNull(config);
    assertTrue(config.isCanBeNull());
    assertEquals(fields[0].getName(), config.getFieldName());
}",unordered collections,3
135065,undertow-io_undertow,URLUtilsTestCase.testIsAbsoluteUrlRecognizingAppUrls,"    @Test
    public void testIsAbsoluteUrlRecognizingAppUrls() {
        assertTrue(URLUtils.isAbsoluteUrl(""com.example.app:/oauth2redirect/example-provider""));
        assertTrue(URLUtils.isAbsoluteUrl(""com.example.app:/oauth2redirect/example-provider?query=val""));
    }
",non-flaky,5
98297,spotify_docker-client,CompressedDirectoryTest.testFileWithIgnore,"  @Test
  public void testFileWithIgnore() throws Exception {
    // note: Paths.get(someURL.toUri()) is the platform-neutral way to convert a URL to a Path
    final URL dockerDirectory = Resources.getResource(""dockerDirectoryWithIgnore"");
    try (CompressedDirectory dir = CompressedDirectory.create(Paths.get(dockerDirectory.toURI()));
         BufferedInputStream fileIn = new BufferedInputStream(Files.newInputStream(dir.file()));
         GzipCompressorInputStream gzipIn = new GzipCompressorInputStream(fileIn);
         TarArchiveInputStream tarIn = new TarArchiveInputStream(gzipIn)) {

      final List<String> names = new ArrayList<>();
      TarArchiveEntry entry;
      while ((entry = tarIn.getNextTarEntry()) != null) {
        final String name = entry.getName();
        names.add(name);
      }
      assertThat(names, containsInAnyOrder(""Dockerfile"", ""bin/"", ""bin/date.sh"", ""subdir2/"",
                                           ""subdir2/keep.me"", ""subdir2/do-not.ignore"",
                                           ""subdir3/do.keep"", "".dockerignore""));
    }
  }
",non-flaky,5
106637,Alluxio_alluxio,AlluxioFuseFileSystemTest.chmod,"  @Test
  public void chmod() throws Exception {
    long mode = 123;
    mFuseFs.chmod(""/foo/bar"", mode);
    AlluxioURI expectedPath = BASE_EXPECTED_URI.join(""/foo/bar"");
    SetAttributePOptions options =
        SetAttributePOptions.newBuilder().setMode(new Mode((short) mode).toProto()).build();
    verify(mFileSystem).setAttribute(expectedPath, options);
  }
",non-flaky,5
162752,OpenAPITools_openapi-generator,CatAllOfTest.testCatAllOf,"    @Test
    public void testCatAllOf() {
        // TODO: test CatAllOf
    }
",non-flaky,5
110108,Wikidata_wikidata-toolkit,DumpProcessingOutputActionTest.testInsertDumpInformation,"	@Test
	public void testInsertDumpInformation() {
		DumpProcessingOutputAction action = new JsonSerializationAction();
		action.setDumpInformation(""wikidata"", ""20150131"");
		String result = action
				.insertDumpInformation(""{PROJECT}-{DATE}-dump.json"");
		assertEquals(result, ""wikidata-20150131-dump.json"");
	}
",non-flaky,5
70788,apache_kafka,ExampleConnectIntegrationTest.testSinkConnector,"    @Test
    public void testSinkConnector() throws Exception {
        // create test topic
        connect.kafka().createTopic(""test-topic"", NUM_TOPIC_PARTITIONS);

        // setup up props for the sink connector
        Map<String, String> props = new HashMap<>();
        props.put(CONNECTOR_CLASS_CONFIG, MonitorableSinkConnector.class.getSimpleName());
        props.put(TASKS_MAX_CONFIG, String.valueOf(NUM_TASKS));
        props.put(TOPICS_CONFIG, ""test-topic"");
        props.put(KEY_CONVERTER_CLASS_CONFIG, StringConverter.class.getName());
        props.put(VALUE_CONVERTER_CLASS_CONFIG, StringConverter.class.getName());

        // expect all records to be consumed by the connector
        connectorHandle.expectedRecords(NUM_RECORDS_PRODUCED);

        // expect all records to be consumed by the connector
        connectorHandle.expectedCommits(NUM_RECORDS_PRODUCED);

        // start a sink connector
        connect.configureConnector(CONNECTOR_NAME, props);

        waitForCondition(this::checkForPartitionAssignment,
                CONNECTOR_SETUP_DURATION_MS,
                ""Connector tasks were not assigned a partition each."");

        // produce some messages into source topic partitions
        for (int i = 0; i < NUM_RECORDS_PRODUCED; i++) {
            connect.kafka().produce(""test-topic"", i % NUM_TOPIC_PARTITIONS, ""key"", ""simple-message-value-"" + i);
        }

        // consume all records from the source topic or fail, to ensure that they were correctly produced.
        assertEquals(""Unexpected number of records consumed"", NUM_RECORDS_PRODUCED,
                connect.kafka().consume(NUM_RECORDS_PRODUCED, RECORD_TRANSFER_DURATION_MS, ""test-topic"").count());

        // wait for the connector tasks to consume all records.
        connectorHandle.awaitRecords(RECORD_TRANSFER_DURATION_MS);

        // wait for the connector tasks to commit all records.
        connectorHandle.awaitCommits(RECORD_TRANSFER_DURATION_MS);

        // delete connector
        connect.deleteConnector(CONNECTOR_NAME);
    }
",non-flaky,5
89335,apache_samza,TestKafkaSystemAdminJava.testValidateStreamWrongPartitionCount,"  @Test(expected = StreamValidationException.class)
  public void testValidateStreamWrongPartitionCount() {
    StreamSpec spec1 = new StreamSpec(""testId"", ""testStreamPartition"", ""testSystem"", 8);
    StreamSpec spec2 = new StreamSpec(""testId"", ""testStreamPartition"", ""testSystem"", 4);

    assertTrue(""createStream should return true if the stream does not exist and then is created."",
        systemAdmin().createStream(spec1));

    systemAdmin().validateStream(spec2);
  }
",non-flaky,5
110134,Wikidata_wikidata-toolkit,ClientConfigurationTest.testDumpLocationArgumentsLong,"	@Test
	public void testDumpLocationArgumentsLong() {
		String[] args = new String[] { ""--dumps"", ""dumps/wikidata/"" };
		ClientConfiguration config = new ClientConfiguration(args);
		assertEquals(""dumps/wikidata/"", config.getDumpDirectoryLocation());
	}
",non-flaky,5
97713,vojtechhabarta_typescript-generator,DateTest.testDateAsNumber_forJavaUtilDate,"    @Test
    public void testDateAsNumber_forJavaUtilDate() {
        final Settings settings = TestUtils.settings();
        settings.mapDate = DateMapping.asNumber;
        final String dts = new TypeScriptGenerator(settings).generateTypeScript(Input.from(Dates.class));
        Assert.assertTrue(dts.contains(""date: DateAsNumber;""));
        Assert.assertTrue(dts.contains(""dateList: DateAsNumber[];""));
        Assert.assertTrue(dts.contains(""datesMap: { [index: string]: DateAsNumber[] };""));
        Assert.assertTrue(dts.contains(""dates: DateAsNumber[];""));
        Assert.assertTrue(dts.contains(""calendar: DateAsNumber;""));
        Assert.assertTrue(dts.contains(""type DateAsNumber = number;""));
    }
",non-flaky,5
33681,alibaba_fastjson,JSONScannerTest.checkDate4,"  @Test
  public void checkDate4() throws Throwable {

    // Arrange
    char y0 = '2';
    char y1 = '1';
    char y2 = '1';
    char y3 = '1';
    char M0 = '1';
    char M1 = '0';
    int d0 = 50;
    int d1 = 32810;

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkDate"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""int""), Reflector.forName(""int""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, y0, y1, y2, y3, M0, M1, d0, d1);

    // Assert result
    Assert.assertEquals(false, retval);

  }
",non-flaky,5
112090,apache_shardingsphere-elasticjob,AverageAllocationJobShardingStrategyTest.shardingForServersLessThanShardingCountAliquot,"    @Test
    public void shardingForServersLessThanShardingCountAliquot() {
        Map<JobInstance, List<Integer>> expected = new LinkedHashMap<>(3, 1);
        expected.put(new JobInstance(""host0@-@0""), Arrays.asList(0, 1, 2));
        expected.put(new JobInstance(""host1@-@0""), Arrays.asList(3, 4, 5));
        expected.put(new JobInstance(""host2@-@0""), Arrays.asList(6, 7, 8));
        assertThat(jobShardingStrategy.sharding(Arrays.asList(new JobInstance(""host0@-@0""), new JobInstance(""host1@-@0""), new JobInstance(""host2@-@0"")), ""test_job"", 9), is(expected));
    }
",non-flaky,5
60939,apache_druid,LongMinAveragerTest.testComputeResult,"  @Test
  public void testComputeResult()
  {
    BaseAverager<Number, Long> avg = new LongMinAverager(3, ""test"", ""field"", 1);

    Assert.assertEquals(Long.MAX_VALUE, (long) avg.computeResult());

    avg.addElement(Collections.singletonMap(""field"", -10000L), new HashMap<>());
    Assert.assertEquals(-10000, (long) avg.computeResult());

    avg.addElement(Collections.singletonMap(""field"", 1L), new HashMap<>());
    Assert.assertEquals(-10000, (long) avg.computeResult());

    avg.addElement(Collections.singletonMap(""field"", 1000), new HashMap<>());
    Assert.assertEquals(-10000, (long) avg.computeResult());

    avg.addElement(Collections.singletonMap(""field"", 5L), new HashMap<>());
    avg.addElement(Collections.singletonMap(""field"", 2L), new HashMap<>());
    avg.addElement(Collections.singletonMap(""field"", 3L), new HashMap<>());
    Assert.assertEquals(2, (long) avg.computeResult());

    avg.skip();
    avg.skip();
    Assert.assertEquals(3, (long) avg.computeResult());
  }
",non-flaky,5
94664,square_okhttp,Http2Test.priority,"  @Test public void headersWithPriority() throws IOException {
      @Override public void priority(int streamId, int streamDependency, int weight,
          boolean exclusive) {
        assertEquals(0, streamDependency);
        assertEquals(256, weight);
        assertFalse(exclusive);
      }
",non-flaky,5
159706,liquibase_liquibase,LockServiceExecuteTest.performTest,"//    @Test
//    public void waitForLock_loggingThenExecute() throws Exception {
//        new DatabaseTestTemplate().testOnAvailableDatabases(
//                new DatabaseTest() {
//
//                    public void performTest(Database database) throws Exception {
//
//                        LockService.getInstance(database).resetAll();
//
//                        try {
//                            ExecutorService.getInstance().getExecutor(database).execute(new DropTableStatement(null, database.getDatabaseChangeLogTableName(), false), new ArrayList<SqlVisitor>());
//                        } catch (DatabaseException e) {
//                            ; //must not be there
//                        }
//                        try {
//                            ExecutorService.getInstance().getExecutor(database).execute(new DropTableStatement(null, database.getDatabaseChangeLogLockTableName(), false), new ArrayList<SqlVisitor>());
//                        } catch (DatabaseException e) {
//                            ; //must not be there
//                        }
//
//                        database.commit();
//
////                        Database clearDatabase = database.getClass().getConstructor().newInstance();
////                        clearDatabase.setConnection(database.getConnection());
//
//                        Executor originalTemplate = ExecutorService.getInstance().getExecutor(database);
//                        ExecutorService.getInstance().setExecutor(database, new LoggingExecutor(originalTemplate, new StringWriter(), database));
//
//                        LockService lockManager = LockService.getInstance(database);
//                        lockManager.waitForLock();
//
//                        ExecutorService.getInstance().setExecutor(database, originalTemplate);
//                        lockManager.waitForLock();
//
////                        database.getWriteExecutor().execute(database.getSelectChangeLogLockSQL());
//                    }
",non-flaky,5
98238,apache_jackrabbit,PerformanceTest.testPerformance,"    @Test
    public void testPerformance() throws Exception {
        testPerformance(""2.0"");
    }
",non-flaky,5
33673,alibaba_fastjson,IgnoreTypeDeserializer.parseObjectWithExistType,"    @Test
    public void parseObjectWithExistType() {
        String s = ""{\""@type\"":\""com.alibaba.fastjson.deserializer.ValueBean\"",\""val\"":1}"";
        ValueBean object = JSONObject.parseObject(s, ValueBean.class);
        Assert.assertNotNull(object);
        Assert.assertEquals(new Integer(1), object.getVal());
    }
",non-flaky,5
104699,apache_pinot,LLCRealtimeClusterIntegrationTest.testHardcodedServerPartitionedSqlQueries,"  @Test
  public void testHardcodedServerPartitionedSqlQueries()
      throws Exception {
    super.testHardcodedServerPartitionedSqlQueries();
  }
",non-flaky,5
98649,nutzam_nutz,SimpleAdaptorTest.issue_1277,"    @Test
    public void issue_1277() {
        resp = post(""/adaptor/issue1277"", new NutMap(""agex"", ""124""));
        assertEquals(200, resp.getStatus());
        String str = resp.getContent();
        Issue1277 issue = Json.fromJson(Issue1277.class, str);
        assertEquals(""abc"", issue.name);
        assertEquals(123, issue.age);
        //assertEquals(""1495667792000"", resp.getContent());
    }
",non-flaky,5
38193,palantir_atlasdb,SchemasTest.testGetFullTableNameEmptyNamespace,"    @Test
    public void testGetFullTableNameEmptyNamespace() {
        MatcherAssert.assertThat(
                Schemas.getFullTableName(TABLE_NAME, Namespace.EMPTY_NAMESPACE),
                Matchers.equalTo(TABLE_NAME)
        );
    }
",non-flaky,5
177988,aosp-mirror_platform_frameworks_support,GuidedStepSupportFragmentTest.answer,"    @Test
    public void nextAndBack() throws Throwable {
        final String firstFragmentName = generateMethodTestName(""first"");
        final String secondFragmentName = generateMethodTestName(""second"");
        GuidedStepTestSupportFragment.Provider first = mockProvider(firstFragmentName);
        doAnswer(new Answer<Void>() {
            public Void answer(InvocationOnMock invocation) {
                List actions = (List) invocation.getArguments()[0];
                actions.add(new GuidedAction.Builder().id(1000).title(""OK"").build());
                return null;
            }
",non-flaky,5
104660,apache_pinot,OfflineClusterIntegrationTest.testQuerySourceWithDatabaseName,"  @Test
  public void testQuerySourceWithDatabaseName()
      throws Exception {
    // by default 10 rows will be returned, so use high limit
    String pql = ""SELECT DISTINCT(Carrier) FROM mytable LIMIT 1000000"";
    String sql = ""SELECT DISTINCT Carrier FROM mytable"";
    testQuery(pql, Collections.singletonList(sql));
    pql = ""SELECT DISTINCT Carrier FROM db.mytable LIMIT 1000000"";
    testSqlQuery(pql, Collections.singletonList(sql));
  }
",non-flaky,5
89290,apache_samza,TestTasksResource.testGetTasksWithInvalidJobName,"  @Test
  public void testGetTasksWithInvalidJobName() throws IOException {
    String requestUrl = String.format(""v1/jobs/%s/%s/tasks"", ""BadJobName"", MockJobProxy.JOB_INSTANCE_4_ID);
    Response resp = target(requestUrl).request().get();
    assertEquals(400, resp.getStatus());
    final Map<String, String> errorMessage = objectMapper.readValue(resp.readEntity(String.class), new TypeReference<Map<String, String>>() { });
    assertTrue(errorMessage.get(""message""), errorMessage.get(""message"").contains(""Invalid arguments for getTasks. ""));
    resp.close();
  }
",non-flaky,5
19440,eclipse_xtext-core,TypeHierarchyHelperTest.testRecursiveUplift01,"	@Test
	public void testRecursiveUplift01() throws Exception {
		// no uplift for less than two children
		EClassInfo a = addClass(""a"");
		EClassInfo b = addClass(""b"");
		EClassInfo c = addClass(""c"");
		EClassInfo d = addClass(""d"");
		EClassInfo e = addClass(""e"");
		b.addSupertype(a);
		c.addSupertype(a);
		d.addSupertype(c);
		e.addSupertype(c);

		addAttribute(b, INT, ""f1"");
		addAttribute(d, INT, ""f1"");
		addAttribute(e, INT, ""f1"");

		assertEquals(0, a.getEClass().getEStructuralFeatures().size());
		assertEquals(1, b.getEClass().getEStructuralFeatures().size());
		assertEquals(0, c.getEClass().getEStructuralFeatures().size());
		assertEquals(1, d.getEClass().getEStructuralFeatures().size());
		assertEquals(1, e.getEClass().getEStructuralFeatures().size());

		liftUpFeatures();

		assertEquals(1, a.getEClass().getEStructuralFeatures().size());
		assertEquals(0, b.getEClass().getEStructuralFeatures().size());
		assertEquals(0, c.getEClass().getEStructuralFeatures().size());
		assertEquals(0, d.getEClass().getEStructuralFeatures().size());
		assertEquals(0, e.getEClass().getEStructuralFeatures().size());
	}
",non-flaky,5
156456,apache_commons-lang,DateUtilsFragmentTest.testMinutesOfHourWithCalendar,"    @Test
    public void testMinutesOfHourWithCalendar() {
        final long testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.HOUR_OF_DAY);
        assertEquals(minutes, testResult);
    }
",non-flaky,5
162755,OpenAPITools_openapi-generator,FileSchemaTestClassTest.fileTest,"    @Test
    public void fileTest() {
        // TODO: test file
    }
",non-flaky,5
135765,Netflix_Hystrix,HystrixPluginsTest.testEventNotifierViaRegisterMethod,"    @Test
    public void testEventNotifierViaRegisterMethod() {
        HystrixPlugins.getInstance().registerEventNotifier(new HystrixEventNotifierTestImpl());
        HystrixEventNotifier impl = HystrixPlugins.getInstance().getEventNotifier();
        assertTrue(impl instanceof HystrixEventNotifierTestImpl);
    }
",non-flaky,5
156164,soot-oss_soot,TypingMinimizeTest.testHugeCommonTypingPair,"  @Test
  public void testHugeCommonTypingPair() {

    List<Typing> typingList = new ArrayList<>();

    Type Type1 = serializableType;
    Type Type2 = comparableType;
    Local x1 = new JimpleLocal(""$x1"", null);
    Local x2 = new JimpleLocal(""$x2"", null);
    Local x3 = new JimpleLocal(""$x3"", null);

    Typing typing1 = new Typing(Arrays.asList(x1, x2, x3));
    typing1.set(x1, Type1);
    typing1.set(x2, Type1);
    typing1.set(x3, Type1);
    typingList.add(typing1);

    Typing typing2 = new Typing(Arrays.asList(x1, x2, x3));
    typing2.set(x1, Type2);
    typing2.set(x2, Type1);
    typing2.set(x3, Type1);
    typingList.add(typing2);

    Typing typing3 = new Typing(Arrays.asList(x1, x2, x3));
    typing3.set(x1, Type1);
    typing3.set(x2, Type2);
    typing3.set(x3, Type1);
    typingList.add(typing3);

    Typing typing4 = new Typing(Arrays.asList(x1, x2, x3));
    typing4.set(x1, Type1);
    typing4.set(x2, Type1);
    typing4.set(x3, Type2);
    typingList.add(typing4);

    Typing typing5 = new Typing(Arrays.asList(x1, x2, x3));
    typing5.set(x1, Type2);
    typing5.set(x2, Type2);
    typing5.set(x3, Type1);
    typingList.add(typing5);

    Typing typing6 = new Typing(Arrays.asList(x1, x2, x3));
    typing6.set(x1, Type2);
    typing6.set(x2, Type1);
    typing6.set(x3, Type2);
    typingList.add(typing6);

    Typing typing7 = new Typing(Arrays.asList(x1, x2, x3));
    typing7.set(x1, Type1);
    typing7.set(x2, Type2);
    typing7.set(x3, Type2);
    typingList.add(typing7);

    Typing typing8 = new Typing(Arrays.asList(x1, x2, x3));
    typing8.set(x1, Type2);
    typing8.set(x2, Type2);
    typing8.set(x3, Type2);
    typingList.add(typing8);

    getTypingStrategy().minimize(typingList, new BytecodeHierarchy());

    assertEquals(8, typingList.size());
    assertThat(typingList, containsInAnyOrder(typing1, typing2, typing3, typing4, typing5, typing6, typing7, typing8));
  }
",non-flaky,5
70815,apache_kafka,PluginsTest.shouldThrowIfPluginThrows,"    @Test(expected = ConnectException.class)
    public void shouldThrowIfPluginThrows() {
        TestPlugins.assertAvailable();

        plugins.newPlugin(
            TestPlugins.ALWAYS_THROW_EXCEPTION,
            new AbstractConfig(new ConfigDef(), Collections.emptyMap()),
            Converter.class
        );
    }
",non-flaky,5
97977,ReactiveX_RxJava,ObservableTests.testMaterializeDematerializeChaining,"    @Test
    public void testMaterializeDematerializeChaining() {
        Observable<Integer> obs = Observable.just(1);
        Observable<Integer> chained = obs.materialize().dematerialize();

        @SuppressWarnings(""unchecked"")
        Observer<Integer> observer = mock(Observer.class);
        chained.subscribe(observer);

        verify(observer, times(1)).onNext(1);
        verify(observer, times(1)).onCompleted();
        verify(observer, times(0)).onError(any(Throwable.class));
    }
",non-flaky,5
112738,hwang-pku_ormlite-core,DatabaseConnectionProxyTest.testUpdateNull,"	@Test
	public void testUpdateNull() throws Exception {
		DatabaseConnectionProxy proxy = new DatabaseConnectionProxy(null);
		assertEquals(0, proxy.update(""statment"", null, null));
		proxy.close();
	}
",non-flaky,5
19449,eclipse_xtext-core,ImportedNamespaceAwareLocalScopeProviderTest.iterator,"	@Test public void testRelativeContext() throws Exception {
			public Iterator<EObject> iterator() {
				return resource.getAllContents();
			}
",non-flaky,5
76722,quarkusio_quarkus,QuarkusCodestartBuildIT.testRunAloneCodestartsScala,"    @ParameterizedTest
    public void testRunAloneCodestartsScala(String codestart) throws Exception {
        generateProjectRunTests(""maven"", ""scala"", singletonList(codestart));
    }
",non-flaky,5
113991,apache_struts,URLDecoderUtilTest.testURLDecodeStringValidIso88591End,"    @Test
    public void testURLDecodeStringValidIso88591End() {

        String result = URLDecoderUtil.decode(""xxxx%41"", ""ISO-8859-1"");
        assertEquals(""xxxxA"", result);
    }
",non-flaky,5
43032,trinodb_trino,BaseDynamicPartitionPruningTest.testJoinWithMultipleDynamicFiltersOnProbe,"    @Test(timeOut = 30_000)
    public void testJoinWithMultipleDynamicFiltersOnProbe()
    {
        // supplier names Supplier#000000001 and Supplier#000000002 match suppkey 1 and 2
        @Language(""SQL"") String selectQuery = ""SELECT * FROM ("" +
                ""SELECT supplier.suppkey FROM "" +
                ""partitioned_lineitem JOIN tpch.tiny.supplier ON partitioned_lineitem.suppkey = supplier.suppkey AND supplier.name IN ('Supplier#000000001', 'Supplier#000000002')"" +
                "") t JOIN supplier ON t.suppkey = supplier.suppkey AND supplier.suppkey IN (2, 3)"";
        ResultWithQueryId<MaterializedResult> result = getDistributedQueryRunner().executeWithQueryId(
                getSession(),
                selectQuery);
        MaterializedResult expected = computeActual(withDynamicFilteringDisabled(), selectQuery);
        assertEqualsIgnoreOrder(result.getResult(), expected);

        OperatorStats probeStats = searchScanFilterAndProjectOperatorStats(result.getQueryId(), getQualifiedTableName(PARTITIONED_LINEITEM));
        // Probe-side is partially scanned
        assertEquals(probeStats.getInputPositions(), 558L);

        DynamicFiltersStats dynamicFiltersStats = getDynamicFilteringStats(result.getQueryId());
        assertEquals(dynamicFiltersStats.getTotalDynamicFilters(), 2L);
        assertEquals(dynamicFiltersStats.getLazyDynamicFilters(), 2L);
        assertEquals(dynamicFiltersStats.getReplicatedDynamicFilters(), 0L);
        assertEquals(dynamicFiltersStats.getDynamicFiltersCompleted(), 2);

        List<DynamicFilterDomainStats> domainStats = dynamicFiltersStats.getDynamicFilterDomainStats();
        assertThat(domainStats).map(DynamicFilterDomainStats::getSimplifiedDomain)
                .containsExactlyInAnyOrder(
                        getSimplifiedDomainString(2L, 3L, 2, BIGINT),
                        getSimplifiedDomainString(2L, 2L, 1, BIGINT));
    }
",non-flaky,5
135810,Netflix_Hystrix,CumulativeCommandEventCounterStreamTest.call,"    @Test
    public void testCancelled() {
        HystrixCommandKey key = HystrixCommandKey.Factory.asKey(""CMD-CumulativeCounter-M"");
        stream = CumulativeCommandEventCounterStream.getInstance(key, 10, 500);
        stream.startCachingStreamValuesIfUnstarted();

        final CountDownLatch latch = new CountDownLatch(1);
        stream.observe().take(5).subscribe(getSubscriber(latch));

        Command toCancel = Command.from(groupKey, key, HystrixEventType.SUCCESS, 500);

        System.out.println(System.currentTimeMillis() + "" : "" + Thread.currentThread().getName() + "" : about to observe and subscribe"");
        Subscription s = toCancel.observe().
                doOnUnsubscribe(new Action0() {
                    @Override
                    public void call() {
                        System.out.println(System.currentTimeMillis() + "" : "" + Thread.currentThread().getName() + "" : UnSubscribe from command.observe()"");
                    }
",non-flaky,5
104674,apache_pinot,RealtimeToOfflineSegmentsMinionClusterIntegrationTest.testBrokerDebugRoutingTableSQL,"  @Test(enabled = false)
  public void testBrokerDebugRoutingTableSQL() {
  }
",non-flaky,5
70786,apache_kafka,StartAndStopLatchTest.shouldReturnFalseWhenAwaitingForDependentLatchToComplete,"    @Test
    public void shouldReturnFalseWhenAwaitingForDependentLatchToComplete() throws Throwable {
        StartAndStopLatch depLatch = new StartAndStopLatch(1, 1, this::complete, null, clock);
        dependents = Collections.singletonList(depLatch);
        latch = new StartAndStopLatch(1, 1, this::complete, dependents, clock);

        future = asyncAwait(100);
        latch.recordStart();
        latch.recordStop();
        clock.sleep(10);
        assertFalse(future.get(200, TimeUnit.MILLISECONDS));
        assertTrue(future.isDone());
    }
",non-flaky,5
179481,abel533_Mapper,SafeUpdateByMethodTest.testSafeUpdate,"    @Test(expected = PersistenceException.class)
    public void testSafeUpdate() {
        SqlSession sqlSession = getSqlSession();
        try {
            CountryMapper mapper = sqlSession.getMapper(CountryMapper.class);
            mapper.updateByExample(new Country(), new Example(Country.class));
        } finally {
            sqlSession.close();
        }
    }
",non-flaky,5
112146,apache_shardingsphere-elasticjob,ShardingItemParametersTest.assertGetMap,"    @Test
    public void assertGetMap() {
        Map<Integer, String> expected = new HashMap<>(3);
        expected.put(0, ""A"");
        expected.put(1, ""B"");
        expected.put(2, ""C"");
        assertThat(new ShardingItemParameters(""0=A,1=B,2=C"").getMap(), is(expected));
    }
",non-flaky,5
104702,apache_pinot,ServerStarterIntegrationTest.testDefaultServerConf,"  @Test
  public void testDefaultServerConf()
      throws Exception {
    String expectedHost = NetUtils.getHostAddress();
    String expectedInstanceId = PREFIX_OF_SERVER_INSTANCE + expectedHost + ""_"" + DEFAULT_SERVER_NETTY_PORT;

    verifyInstanceConfig(new PinotConfiguration(), expectedInstanceId, expectedHost, DEFAULT_SERVER_NETTY_PORT);
  }
",non-flaky,5
118763,netty_netty,ByteBufUtilTest.testWriteUtf8InvalidEndOnTrailingSurrogate,"    @Test
    public void testWriteUtf8InvalidEndOnTrailingSurrogate() {
        String surrogateString = new StringBuilder(2)
                                .append('\uDC00')
                                .toString();
        ByteBuf buf = Unpooled.buffer(16);
        buf.writeBytes(surrogateString.getBytes(CharsetUtil.UTF_8));
        ByteBuf buf2 = Unpooled.buffer(16);
        ByteBufUtil.writeUtf8(buf2, surrogateString);

        assertEquals(buf, buf2);
        assertEquals(buf.readableBytes(), ByteBufUtil.utf8Bytes(surrogateString));

        buf.release();
        buf2.release();
    }
",non-flaky,5
76693,quarkusio_quarkus,TaggedET.t2,"    @Test
    public void t2() {
        given()
                .when().get(""/hello/greeting/foo"")
                .then()
                .statusCode(200)
                .body(is(""hello foo""));
    }
",non-flaky,5
98060,vert-x3_vertx-mongo-client,GridFsTest.testFileDownloadAs,"  @Test
  public void testFileDownloadAs() {
    String fileName = createTempFileWithContent(1024);
    String asFileName = createTempFile();

    AtomicReference<MongoGridFsClient> gridFsClient = new AtomicReference<>();

    Promise<MongoGridFsClient> gridFsClientPromise = Promise.promise();

    mongoClient.createGridFsBucketService(""fs"", gridFsClientPromise);

    gridFsClientPromise.future().compose(mongoGridFsClient -> {
      assertNotNull(mongoGridFsClient);
      gridFsClient.set(mongoGridFsClient);
      Promise<Void> dropPromise = Promise.promise();
      mongoGridFsClient.drop(dropPromise);
      return dropPromise.future();
    }).compose(dropped -> {
      Promise<String> uploadPromise = Promise.promise();
      gridFsClient.get().uploadFile(fileName, uploadPromise);
      return uploadPromise.future();
    }).compose(uploaded -> {
      Promise<Long> downloadPromise = Promise.promise();
      gridFsClient.get().downloadFileAs(fileName, asFileName, downloadPromise);
      return downloadPromise.future();
    }).compose(length -> {
      assertEquals(1024L, length.longValue());
      testComplete();
      return Future.succeededFuture();
    }).onComplete(event -> {
      if (event.failed()) {
        fail(event.cause());
      }
    });
    await();
  }
",non-flaky,5
160414,ConsenSys_teku,ChainDataProviderTest.getStateFork_shouldGetForkAtGenesis,"  @Test
  public void getStateFork_shouldGetForkAtGenesis()
      throws ExecutionException, InterruptedException {
    final ChainDataProvider provider =
        new ChainDataProvider(spec, recentChainData, combinedChainDataClient);

    final Bytes4 bytes4 = Bytes4.fromHexString(""0x00000001"");
    final Optional<Fork> response = provider.getStateFork(""genesis"").get();
    assertThat(response).isPresent();
    assertThat(response.get()).isEqualTo(new Fork(bytes4, bytes4, ZERO));
  }
",non-flaky,5
84633,apache_zookeeper,ZKClientConfigTest.testIntegerRetrievalFromHexadecimalProperty,"    @Test
    public void testIntegerRetrievalFromHexadecimalProperty() {
        int hexaValue = 0x3000000;
        String wrongValue = ""0xwel"";
        int defaultValue = 100;
        // property is set in hexadecimal value
        ZKClientConfig zkClientConfig = new ZKClientConfig();
        zkClientConfig.setProperty(ZKConfig.JUTE_MAXBUFFER,
                Integer.toString(hexaValue));
        int result = zkClientConfig.getInt(ZKConfig.JUTE_MAXBUFFER, defaultValue);
        assertEquals(result, hexaValue);
        zkClientConfig.setProperty(ZKConfig.JUTE_MAXBUFFER,
                wrongValue);
        try {
            result = zkClientConfig.getInt(ZKConfig.JUTE_MAXBUFFER, defaultValue);
            fail(""NumberFormatException is expected"");
        } catch (NumberFormatException exception) {
            // do nothing
        }
        zkClientConfig.setProperty(ZKConfig.JUTE_MAXBUFFER,
                "" "" + hexaValue + "" "");
        result = zkClientConfig.getInt(ZKConfig.JUTE_MAXBUFFER, defaultValue);
        assertEquals(result, hexaValue);
    }
",non-flaky,5
160350,ConsenSys_teku,SlashingProtectionExporterTest.shouldReadSlashingProtectionFile_withEmptyGenesisValidatorsRoot,"  @Test
  public void shouldReadSlashingProtectionFile_withEmptyGenesisValidatorsRoot(@TempDir Path tempDir)
      throws IOException, URISyntaxException {
    final SlashingProtectionExporter exporter = new SlashingProtectionExporter(tempDir);
    Optional<String> error =
        exporter.readSlashProtectionFile(
            usingResourceFile(""slashProtection.yml"", tempDir), log::add);
    assertThat(log).containsExactly(""Exporting "" + pubkey);
    assertThat(error).isEmpty();

    final SlashingProtectionInterchangeFormat parsedData =
        jsonProvider.jsonToObject(
            exporter.getPrettyJson(), SlashingProtectionInterchangeFormat.class);
    final SlashingProtectionInterchangeFormat expectedData = getExportData(null, 327, 51, 1741);
    assertThat(parsedData).isEqualTo(expectedData);
  }
",non-flaky,5
135069,undertow-io_undertow,CookiesTestCase.testParsingSetCookieHeaderV0,"    @Test
    public void testParsingSetCookieHeaderV0() {

        Cookie cookie = Cookies.parseSetCookieHeader(""CUSTOMER=WILE_E_COYOTE; path=/; expires=Wednesday, 09-Nov-99 23:12:40 GMT"");
        Assert.assertEquals(""CUSTOMER"", cookie.getName());
        Assert.assertEquals(""WILE_E_COYOTE"", cookie.getValue());
        Assert.assertEquals(""/"", cookie.getPath());
        Assert.assertEquals(date(1999, 11, 9, 23, 12, 40), cookie.getExpires());


        cookie = Cookies.parseSetCookieHeader(""SHIPPING=FEDEX; path=/foo; secure"");
        Assert.assertEquals(""SHIPPING"", cookie.getName());
        Assert.assertEquals(""FEDEX"", cookie.getValue());
        Assert.assertEquals(""/foo"", cookie.getPath());
        Assert.assertTrue(cookie.isSecure());

        cookie = Cookies.parseSetCookieHeader(""SHIPPING=FEDEX"");
        Assert.assertEquals(""SHIPPING"", cookie.getName());
        Assert.assertEquals(""FEDEX"", cookie.getValue());
    }
",non-flaky,5
137149,spring-projects_spring-framework,MultipleComposedAnnotationsOnSingleAnnotatedElementTests.getFor,"	@Test
		public String getFor(Class<String> cls) {
			return ""foo"";
		}
",non-flaky,5
176813,ctco_cukes,EndsWithRegexpTest.matchesNotEndWith,"    @Test
    public void matchesNotEndWith() throws Exception {
        assertThat(""hello world"", Matchers.not(EndsWithRegexp.endsWithRegexp(""hello"")));
    }
",non-flaky,5
77460,opensearch-project_OpenSearch,SuiteScopeClusterIT.testReproducible,"    @Test
    public void testReproducible() throws IOException {
        if (ITER++ == 0) {
            CLUSTER_SEED = cluster().seed();
            for (int i = 0; i < SEQUENCE.length; i++) {
                SEQUENCE[i] = randomLong();
            }
        } else {
            assertEquals(CLUSTER_SEED, Long.valueOf(cluster().seed()));
            for (int i = 0; i < SEQUENCE.length; i++) {
                assertThat(SEQUENCE[i], equalTo(randomLong()));
            }
        }
    }
",non-flaky,5
98073,vert-x3_vertx-mongo-client,WriteConcernParserTest.testNoWriteConcern,"  @Test
  public void testNoWriteConcern() {
    WriteConcern wc = new WriteConcernParser(null, new JsonObject()).writeConcern();
    assertNull(wc);
  }
",non-flaky,5
177987,aosp-mirror_platform_frameworks_support,CustomTabsIntentTest.testToolbarColorIsNotAResource,"    @Test
    public void testToolbarColorIsNotAResource() {
        @ColorRes int colorId = android.R.color.background_dark;
        int color = InstrumentationRegistry.getContext().getResources().getColor(colorId);
        Intent intent = new CustomTabsIntent.Builder().setToolbarColor(colorId).build().intent;
        assertFalse(""The color should not be a resource ID"",
                color == intent.getIntExtra(CustomTabsIntent.EXTRA_TOOLBAR_COLOR, 0));
        intent = new CustomTabsIntent.Builder().setToolbarColor(color).build().intent;
        assertEquals(color, intent.getIntExtra(CustomTabsIntent.EXTRA_TOOLBAR_COLOR, 0));
    }
",non-flaky,5
97952,ReactiveX_RxJava,CovarianceTest.call,"    @Test
    public void testSortedList() {
        Func2<Media, Media, Integer> SORT_FUNCTION = new Func2<Media, Media, Integer>() {

            @Override
            public Integer call(Media t1, Media t2) {
                return 1;
            }
",non-flaky,5
91444,strapdata_elassandra,ESIntegTestCase.randomIndexTemplate,"    @TestGroup(enabled = false, sysProperty = ESIntegTestCase.SYSPROP_THIRDPARTY)
    public void randomIndexTemplate() throws IOException {

        // TODO move settings for random directory etc here into the index based randomized settings.
        if (cluster().size() > 0) {
            Settings.Builder randomSettingsBuilder =
                setRandomIndexSettings(random(), Settings.builder());
            if (isInternalCluster()) {
                // this is only used by mock plugins and if the cluster is not internal we just can't set it
                randomSettingsBuilder.put(INDEX_TEST_SEED_SETTING.getKey(), random().nextLong());
            }

            randomSettingsBuilder.put(SETTING_NUMBER_OF_SHARDS, numberOfShards())
                .put(SETTING_NUMBER_OF_REPLICAS, numberOfReplicas());

            // if the test class is annotated with SuppressCodecs(""*""), it means don't use lucene's codec randomization
            // otherwise, use it, it has assertions and so on that can find bugs.
            SuppressCodecs annotation = getClass().getAnnotation(SuppressCodecs.class);
            if (annotation != null && annotation.value().length == 1 && ""*"".equals(annotation.value()[0])) {
                randomSettingsBuilder.put(""index.codec"", randomFrom(CodecService.DEFAULT_CODEC, CodecService.BEST_COMPRESSION_CODEC));
            } else {
                randomSettingsBuilder.put(""index.codec"", CodecService.LUCENE_DEFAULT_CODEC);
            }

            for (String setting : randomSettingsBuilder.keys()) {
                assertThat(""non index. prefix setting set on index template, its a node setting..."", setting, startsWith(""index.""));
            }
            // always default delayed allocation to 0 to make sure we have tests are not delayed
            randomSettingsBuilder.put(UnassignedInfo.INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING.getKey(), 0);
            if (randomBoolean()) {
                randomSettingsBuilder.put(IndexModule.INDEX_QUERY_CACHE_ENABLED_SETTING.getKey(), randomBoolean());
            }
            PutIndexTemplateRequestBuilder putTemplate = client().admin().indices()
                .preparePutTemplate(""random_index_template"")
                .setPatterns(Collections.singletonList(""*""))
                .setOrder(0)
                .setSettings(randomSettingsBuilder);
            assertAcked(putTemplate.execute().actionGet());
        }
    }
",non-flaky,5
77471,opensearch-project_OpenSearch,MasterServiceTests.execute,"    @TestLogging(value = ""org.opensearch.cluster.service:WARN"", reason = ""to ensure that we log cluster state events on WARN level"")
    public void testLongClusterStateUpdateLogging() throws Exception {
        MockLogAppender mockAppender = new MockLogAppender();
        mockAppender.start();
        mockAppender.addExpectation(
            new MockLogAppender.UnseenEventExpectation(
                ""test1 shouldn't log because it was fast enough"",
                MasterService.class.getCanonicalName(),
                Level.WARN,
                ""*took*test1*""));
        mockAppender.addExpectation(
            new MockLogAppender.SeenEventExpectation(
                ""test2"",
                MasterService.class.getCanonicalName(),
                Level.WARN,
                ""*took [*], which is over [10s], to compute cluster state update for [test2]""));
        mockAppender.addExpectation(
            new MockLogAppender.SeenEventExpectation(
                ""test3"",
                MasterService.class.getCanonicalName(),
                Level.WARN,
                ""*took [*], which is over [10s], to compute cluster state update for [test3]""));
        mockAppender.addExpectation(
            new MockLogAppender.SeenEventExpectation(
                ""test4"",
                MasterService.class.getCanonicalName(),
                Level.WARN,
                ""*took [*], which is over [10s], to compute cluster state update for [test4]""));
        mockAppender.addExpectation(
            new MockLogAppender.UnseenEventExpectation(
                ""test5 should not log despite publishing slowly"",
                MasterService.class.getCanonicalName(),
                Level.WARN,
                ""*took*test5*""));
        mockAppender.addExpectation(
            new MockLogAppender.SeenEventExpectation(
                ""test6 should log due to slow and failing publication"",
                MasterService.class.getCanonicalName(),
                Level.WARN,
                ""took [*] and then failed to publish updated cluster state (version: *, uuid: *) for [test6]:*""));

        Logger clusterLogger = LogManager.getLogger(MasterService.class);
        Loggers.addAppender(clusterLogger, mockAppender);
        try (MasterService masterService = new MasterService(Settings.builder()
            .put(ClusterName.CLUSTER_NAME_SETTING.getKey(), MasterServiceTests.class.getSimpleName())
            .put(Node.NODE_NAME_SETTING.getKey(), ""test_node"")
            .build(), new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS), threadPool)) {

            final DiscoveryNode localNode = new DiscoveryNode(""node1"", buildNewFakeTransportAddress(), emptyMap(),
                emptySet(), Version.CURRENT);
            final ClusterState initialClusterState = ClusterState.builder(new ClusterName(MasterServiceTests.class.getSimpleName()))
                .nodes(DiscoveryNodes.builder().add(localNode).localNodeId(localNode.getId()).masterNodeId(localNode.getId()))
                .blocks(ClusterBlocks.EMPTY_CLUSTER_BLOCK).build();
            final AtomicReference<ClusterState> clusterStateRef = new AtomicReference<>(initialClusterState);
            masterService.setClusterStatePublisher((event, publishListener, ackListener) -> {
                if (event.source().contains(""test5"")) {
                    relativeTimeInMillis += MasterService.MASTER_SERVICE_SLOW_TASK_LOGGING_THRESHOLD_SETTING.get(Settings.EMPTY).millis()
                        + randomLongBetween(1, 1000000);
                }
                if (event.source().contains(""test6"")) {
                    relativeTimeInMillis += MasterService.MASTER_SERVICE_SLOW_TASK_LOGGING_THRESHOLD_SETTING.get(Settings.EMPTY).millis()
                        + randomLongBetween(1, 1000000);
                    throw new OpenSearchException(""simulated error during slow publication which should trigger logging"");
                }
                clusterStateRef.set(event.state());
                publishListener.onResponse(null);
            });
            masterService.setClusterStateSupplier(clusterStateRef::get);
            masterService.start();

            final CountDownLatch latch = new CountDownLatch(6);
            final CountDownLatch processedFirstTask = new CountDownLatch(1);
            masterService.submitStateUpdateTask(""test1"", new ClusterStateUpdateTask() {
                @Override
                public ClusterState execute(ClusterState currentState) {
                    relativeTimeInMillis += randomLongBetween(0L,
                        MasterService.MASTER_SERVICE_SLOW_TASK_LOGGING_THRESHOLD_SETTING.get(Settings.EMPTY).millis());
                    return currentState;
                }
",non-flaky,5
91479,strapdata_elassandra,SearchWhileCreatingIndexIT.testIndexCausesIndexCreation,"@TestLogging(""_root:DEBUG"")
    public void testIndexCausesIndexCreation() throws Exception {
        searchWhileCreatingIndex(false, 1); // 1 replica in our default...
    }
",non-flaky,5
114025,apache_struts,DefaultJSONWriterTest.testCanSerializeADate,"    @Test
    public void testCanSerializeADate() throws Exception {
        SimpleDateFormat sdf = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss z"");

        SingleDateBean dateBean = new SingleDateBean();
        dateBean.setDate(sdf.parse(""2012-12-23 10:10:10 GMT""));

        JSONWriter jsonWriter = new DefaultJSONWriter();
        jsonWriter.setEnumAsBean(false);

        TimeZone.setDefault(TimeZone.getTimeZone(""GMT""));
        String json = jsonWriter.write(dateBean);
        assertEquals(""{\""date\"":\""2012-12-23T10:10:10\""}"", json);
    }
",non-flaky,5
70,OpenLCB_OpenLCB_Java,MemoryConfigurationServiceInterfaceTest.testReadWithTimeoutInterleaved,"@Test
public void testReadWithTimeoutInterleaved() {
    int space = 0xfd;
    long address = 0x12345678;
    int length = 4;
    MemoryConfigurationService.McsReadHandler hnd = mock(McsReadHandler.class);
    MemoryConfigurationService.McsReadHandler hnd2 = mock(McsReadHandler.class);
    iface.getDatagramMeteringBuffer().setTimeout(30);
    iface.getMemoryConfigurationService().setTimeoutMillis(30);
    {
        iface.getMemoryConfigurationService().requestRead(farID, space, address, length, hnd);
        expectMessageAndNoMore(new DatagramMessage(hereID, farID, new int[]{ 0x20, 0x41, 0x12, 0x34, 0x56, 0x78, 4 }));
        System.err.println(""Expect 'Never received reply' here -->"");
        delay(50);
        System.err.println(""<--"");
        verify(hnd).handleFailure(0x100);
        verifyNoMoreInteractions(hnd);
        iface.getMemoryConfigurationService().requestRead(farID, space, address + 1, length, hnd2);
        expectMessageAndNoMore(new DatagramMessage(hereID, farID, new int[]{ 0x20, 0x41, 0x12, 0x34, 0x56, 0x79, 4 }));
        sendMessage(new DatagramAcknowledgedMessage(farID, hereID, 0x80));
        consumeMessages();
        sendMessage(new DatagramRejectedMessage(farID, hereID, 0x2020));
        consumeMessages();
        System.err.println(""Expect 'unexpected response datagram' here -->"");
        sendMessageAndExpectResult(new DatagramMessage(farID, hereID, new int[]{ 0x20, 0x51, 0x12, 0x34, 0x56, 0x78, 0xaa }), new DatagramAcknowledgedMessage(hereID, farID));
        System.err.println(""<--"");
        expectNoMessages();
        delay(50);
        expectMessageAndNoMore(new DatagramMessage(hereID, farID, new int[]{ 0x20, 0x41, 0x12, 0x34, 0x56, 0x79, 4 }));
        sendMessage(new DatagramAcknowledgedMessage(farID, hereID, 0x80));
        consumeMessages();
        sendMessage(new DatagramAcknowledgedMessage(farID, hereID, 0x80));
        consumeMessages();
        sendMessageAndExpectResult(new DatagramMessage(farID, hereID, new int[]{ 0x20, 0x51, 0x12, 0x34, 0x56, 0x79, 0xaa }), new DatagramAcknowledgedMessage(hereID, farID));
        verify(hnd2).handleReadData(farID, space, address + 1, new byte[]{ ((byte) (0xaa)) });
        verifyNoMoreInteractions(hnd2);
    }
    System.err.println(""Sending another request..."");
    sendAnother(space, address + 5);
}",async wait,0
97966,ReactiveX_RxJava,ObservableTests.onSubscribe,"    @Test
    public void testCreate() {

        Observable<String> observable = Observable.create(new OnSubscribeFunc<String>() {

            @Override
            public Subscription onSubscribe(Observer<? super String> Observer) {
                Observer.onNext(""one"");
                Observer.onNext(""two"");
                Observer.onNext(""three"");
                Observer.onCompleted();
                return Subscriptions.empty();
            }
",non-flaky,5
91463,strapdata_elassandra,ZenDiscoveryIT.testNoShardRelocationsOccurWhenElectedMasterNodeFails,"@TestLogging(""_root:DEBUG"")
    public void testNoShardRelocationsOccurWhenElectedMasterNodeFails() throws Exception {
        Settings defaultSettings = Settings.builder()
                .put(FaultDetection.PING_TIMEOUT_SETTING.getKey(), ""1s"")
                .put(FaultDetection.PING_RETRIES_SETTING.getKey(), ""1"")
                .build();

        Settings masterNodeSettings = Settings.builder()
                .put(Node.NODE_DATA_SETTING.getKey(), false)
                .put(defaultSettings)
                .build();
        internalCluster().startNodes(2, masterNodeSettings);
        Settings dateNodeSettings = Settings.builder()
                .put(Node.NODE_MASTER_SETTING.getKey(), false)
                .put(defaultSettings)
                .build();
        internalCluster().startNodes(2, dateNodeSettings);
        ClusterHealthResponse clusterHealthResponse = client().admin().cluster().prepareHealth()
                .setWaitForEvents(Priority.LANGUID)
                .setWaitForNodes(""4"")
                .setWaitForNoRelocatingShards(true)
                .get();
        assertThat(clusterHealthResponse.isTimedOut(), is(false));

        createIndex(""test"");
        ensureSearchable(""test"");
        RecoveryResponse r = client().admin().indices().prepareRecoveries(""test"").get();
        int numRecoveriesBeforeNewMaster = r.shardRecoveryStates().get(""test"").size();

        final String oldMaster = internalCluster().getMasterName();
        internalCluster().stopCurrentMasterNode();
        assertBusy(() -> {
            String current = internalCluster().getMasterName();
            assertThat(current, notNullValue());
            assertThat(current, not(equalTo(oldMaster)));
        });
        ensureSearchable(""test"");

        r = client().admin().indices().prepareRecoveries(""test"").get();
        int numRecoveriesAfterNewMaster = r.shardRecoveryStates().get(""test"").size();
        assertThat(numRecoveriesAfterNewMaster, equalTo(numRecoveriesBeforeNewMaster));
    }
",non-flaky,5
77569,dropwizard_dropwizard,ConstraintViolationExceptionMapperTest.setUp,"    @BeforeEach
    public void setUp() throws Exception {
        assumeThat(Locale.getDefault().getLanguage()).isEqualTo(""en"");
        super.setUp();
    }
",non-flaky,5
97736,vojtechhabarta_typescript-generator,OptionalAnnotationTest.testOptionalAndRequiredProperty,"    @Test
    public void testOptionalAndRequiredProperty() {
        {
            final Settings settings = TestUtils.settings();
            settings.optionalAnnotations = Arrays.asList();
            settings.requiredAnnotations = Arrays.asList();
            final String output = new TypeScriptGenerator(settings).generateTypeScript(Input.from(ClassWithMarkedField.class));
            Assert.assertTrue(output.contains(""a: string;""));
            Assert.assertTrue(output.contains(""b: string;""));
        }
        {
            final Settings settings = TestUtils.settings();
            settings.optionalAnnotations = Arrays.asList(MarkerAnnotation.class);
            settings.requiredAnnotations = Arrays.asList();
            final String output = new TypeScriptGenerator(settings).generateTypeScript(Input.from(ClassWithMarkedField.class));
            Assert.assertTrue(output.contains(""a: string;""));
            Assert.assertTrue(output.contains(""b?: string;""));
        }
        {
            final Settings settings = TestUtils.settings();
            settings.optionalAnnotations = Arrays.asList();
            settings.requiredAnnotations = Arrays.asList(MarkerAnnotation.class);
            final String output = new TypeScriptGenerator(settings).generateTypeScript(Input.from(ClassWithMarkedField.class));
            Assert.assertTrue(output.contains(""a?: string;""));
            Assert.assertTrue(output.contains(""b: string;""));
        }
        try {
            final Settings settings = TestUtils.settings();
            settings.optionalAnnotations = Arrays.asList(MarkerAnnotation.class);
            settings.requiredAnnotations = Arrays.asList(MarkerAnnotation.class);
            new TypeScriptGenerator(settings).generateTypeScript(Input.from(ClassWithMarkedField.class));
            Assert.fail();
        } catch (Exception e) {
            // expected - optionalAnnotations and requiredAnnotations cannot be used together
        }
    }
",non-flaky,5
20929,NationalSecurityAgency_timely,MetricTest.testEquals,"    @Test
    public void testEquals() {
        Metric m1 = Metric.newBuilder().name(""m1"").tag(""t1"", ""v1"").tag(""t2"", ""v2"").value(1, 0.0).build();
        Metric m2 = Metric.newBuilder().name(""m1"").tag(""t2"", ""v2"").tag(""t1"", ""v1"").value(1, 0.0).build();

        assertTrue(m1.equals(m2));
        assertTrue(m2.equals(m1));

        Metric m3 = Metric.newBuilder().name(""m1"").tag(""t1"", ""v1"").value(1, 0.0).build();
        assertFalse(m1.equals(m3));

        Metric m4 = Metric.newBuilder().name(""m4"").tag(""t2"", ""v2"").tag(""t1"", ""v1"").value(1, 0.0).build();
        assertFalse(m1.equals(m4));

        Metric m5 = Metric.newBuilder().name(""m1"").tag(""t3"", ""v3"").tag(""t2"", ""v2"").tag(""t1"", ""v1"").value(1, 0.0)
                .build();
        assertFalse(m1.equals(m5));

        Metric m6 = Metric.newBuilder().name(""m1"").tag(""t2"", ""v2"").tag(""t1"", ""v1"").value(2, 0.0).build();
        assertFalse(m1.equals(m6));

        Metric m7 = Metric.newBuilder().name(""m1"").tag(""t2"", ""v2"").tag(""t1"", ""v1"").value(1, 1.0).build();
        assertFalse(m1.equals(m7));
    }
",non-flaky,5
135019,undertow-io_undertow,HttpClientTestCase.completed,"    @Test
    public void testPostRequest() throws Exception {
        //
        final UndertowClient client = createClient();
        final String postMessage = ""This is a post request"";

        final List<String> responses = new CopyOnWriteArrayList<>();
        final CountDownLatch latch = new CountDownLatch(10);
        final ClientConnection connection = client.connect(ADDRESS, worker, DefaultServer.getBufferPool(), OptionMap.EMPTY).get();
        try {
            connection.getIoThread().execute(new Runnable() {
                @Override
                public void run() {
                    for (int i = 0; i < 10; i++) {
                        final ClientRequest request = new ClientRequest().setMethod(Methods.POST).setPath(POST);
                        request.getRequestHeaders().put(Headers.HOST, DefaultServer.getHostAddress());
                        request.getRequestHeaders().put(Headers.TRANSFER_ENCODING, ""chunked"");
                        connection.sendRequest(request, new ClientCallback<ClientExchange>() {
                            @Override
                            public void completed(ClientExchange result) {
                                new StringWriteChannelListener(postMessage).setup(result.getRequestChannel());
                                result.setResponseListener(new ClientCallback<ClientExchange>() {
                                    @Override
                                    public void completed(ClientExchange result) {
                                        new StringReadChannelListener(DefaultServer.getBufferPool()) {

                                            @Override
                                            protected void stringDone(String string) {
                                                responses.add(string);
                                                latch.countDown();
                                            }

                                            @Override
                                            protected void error(IOException e) {
                                                e.printStackTrace();
                                                latch.countDown();
                                            }
                                        }.setup(result.getResponseChannel());
                                    }
",non-flaky,5
95723,togglz_togglz,FeatureManagerBuilderTest.shouldFailIfAddingStrategyWithCustomProvider,"    @Test(expected = IllegalStateException.class)
    public void shouldFailIfAddingStrategyWithCustomProvider() {

        CustomStrategyProvider provider = new CustomStrategyProvider();

        FeatureManagerBuilder.begin()
            .featureEnum(Features.class)
            .activationStrategyProvider(provider)
            .activationStrategy(new CustomActivationStrategy())
            .build();

    }
",non-flaky,5
122571,vespa-engine_vespa,MakeDirectoryTest.newDirectory,"    @Test
    public void newDirectory() {
        verifySystemModifications(
                ""Creating directory "" + path,
                ""Changing owner of /parent/dir from user to test-owner"",
                ""Changing group of /parent/dir from group to test-group"");

        owner = ""new-owner"";
        verifySystemModifications(""Changing owner of /parent/dir from test-owner to new-owner"");

        group = ""new-group"";
        verifySystemModifications(""Changing group of /parent/dir from test-group to new-group"");

        permissions = ""--x---r--"";
        verifySystemModifications(""Changing permissions of /parent/dir from rwxr----x to --x---r--"");
    }
",non-flaky,5
94750,ktuukkan_marine-api,Latitude27Test.defaultValueIsCorrect,"    @Test
    public void defaultValueIsCorrect() {
        assertTrue(Latitude27.isCorrect(91*60*10000));
    }
",non-flaky,5
284,apache_cassandra,testWithMismatchingPending,"@Test
public void testWithMismatchingPending() throws Throwable
{
    try(Cluster cluster = init(Cluster.build(2).withConfig(config -> config.with(GOSSIP).with(NETWORK)).start()))
    {
        cluster.schemaChange(""create table "" + KEYSPACE + "".tbl (id int primary key, t int)"");
        insert(cluster.coordinator(1), 0, 100);
        cluster.forEach((node) -> node.flush(KEYSPACE));
        cluster.get(1).callOnInstance(repair(options(false)));
        insert(cluster.coordinator(1), 100, 100);
        cluster.forEach((node) -> node.flush(KEYSPACE));
        cluster.forEach((node) -> node.runOnInstance(() -> {
            ColumnFamilyStore cfs = Keyspace.open(KEYSPACE).getColumnFamilyStore(""tbl"");
            FBUtilities.waitOnFutures(CompactionManager.instance.submitBackground(cfs));
            cfs.disableAutoCompaction();
        }));
        cluster.get(1).callOnInstance(repair(options(false)));
        cluster.get(1).runOnInstance(() -> {
            ColumnFamilyStore cfs = Keyspace.open(KEYSPACE).getColumnFamilyStore(""tbl"");
            cfs.enableAutoCompaction();
            FBUtilities.waitOnFutures(CompactionManager.instance.submitBackground(cfs));
        });
        RepairResult rs = cluster.get(1).callOnInstance(repair(options(true)));
        assertTrue(rs.success);
        assertFalse(rs.wasInconsistent);
    }
}",concurrency,1
114051,aws_aws-sdk-java-v2,AsyncDeleteItemWithResponseIntegrationTest.delete_returnItemCollectionMetrics_set_itemCollectionMetricsNotNull,"    @Test
    public void delete_returnItemCollectionMetrics_set_itemCollectionMetricsNotNull() {
        Key key = Key.builder().partitionValue(1).sortValue(10).build();

        DeleteItemEnhancedResponse<Record> response =
            mappedTable.deleteItemWithResponse(r -> r.key(key).returnItemCollectionMetrics(ReturnItemCollectionMetrics.SIZE))
                       .join();

        assertThat(response.itemCollectionMetrics()).isNotNull();
    }
",non-flaky,5
33659,alibaba_fastjson,SerializeWriterTest.testWriteLiteBasicStr,"    @Test
    public void testWriteLiteBasicStr() throws UnsupportedEncodingException {
        String targetStr = new String(IOUtils.DIGITS);
        this.doTestWrite(targetStr);
    }
",non-flaky,5
30943,camunda-cloud_zeebe,ElasticsearchExporterTest.shouldFlushAfterDelay,"  @Test
  public void shouldFlushAfterDelay() {
    // given
    config.index.event = true;
    config.index.processInstance = true;
    config.bulk.delay = 10;

    // scenario: bulk size is not reached still we want to flush
    config.bulk.size = Integer.MAX_VALUE;
    when(esClient.shouldFlush()).thenReturn(false);
    createAndOpenExporter();

    // when
    testHarness.export(
        r ->
            r.getMetadata()
                .setValueType(ValueType.PROCESS_INSTANCE)
                .setRecordType(RecordType.EVENT));

    // then
    assertThat(testHarness.getController().getScheduledTasks()).hasSize(1);
    assertThat(testHarness.getController().getScheduledTasks().get(0).getDelay())
        .isEqualTo(Duration.ofSeconds(config.bulk.delay));

    // and
    testHarness.getController().runScheduledTasks(Duration.ofSeconds(config.bulk.delay));
    verify(esClient).flush();
  }
",non-flaky,5
159701,liquibase_liquibase,LockServiceExecuteTest.nothing,"    @Test
    public void nothing() {

    }
",non-flaky,5
33668,alibaba_fastjson,TestISO8601Date.testBug376,"    @Test
    public void testBug376() {
        Calendar cale = Calendar.getInstance();
        cale.clear();
        cale.setTimeZone( TimeZone.getTimeZone( ""GMT"" ) );
        cale.set( 2018, Calendar.MAY, 31, 19, 13, 42 );
        Date date = cale.getTime();

        String s1 = ""{date: \""2018-05-31T19:13:42Z\""}"";
        String s2 = ""{date: \""2018-05-31T19:13:42.000Z\""}"";

        Date date1 = JSON.parseObject( s1, JSONObject.class ).getDate( ""date"" );
        Date date2 = JSON.parseObject( s2, JSONObject.class ).getDate( ""date"" );

        assertEquals( date1, date2 );
        assertEquals( date, date1 );
        assertEquals( date, date2 );
    }
",non-flaky,5
38236,palantir_atlasdb,AbstractAtlasDbKeyValueServiceTest.testGetRowsWhenMultipleVersions,"    @Test
    public void testGetRowsWhenMultipleVersions() {
        putTestDataForMultipleTimestamps();
        Map<Cell, Value> result = keyValueService.getRows(
                TEST_TABLE,
                ImmutableSet.of(row0),
                ColumnSelection.all(),
                TEST_TIMESTAMP + 1);
        assertEquals(1, result.size());
        assertTrue(result.containsKey(Cell.create(row0, column0)));
        assertTrue(result.containsValue(Value.create(value0_t0, TEST_TIMESTAMP)));

        result = keyValueService.getRows(
                TEST_TABLE,
                ImmutableSet.of(row0),
                ColumnSelection.all(),
                TEST_TIMESTAMP + 2);
        assertEquals(1, result.size());
        assertTrue(result.containsKey(Cell.create(row0, column0)));
        assertTrue(result.containsValue(Value.create(value0_t1, TEST_TIMESTAMP + 1)));
    }
",non-flaky,5
26754,MundaneImmortal_pair-distribution-app,DevPairsCombinationsTest.testGetPastPairByTrack,"	@Test
	public void testGetPastPairByTrack() {
		List<Developer> standardDevs = getStandardDevs();
		DevPairCombinations devPairCombinations = new DevPairCombinations(getPairsListFromDevs(standardDevs));
		
		
		assertThat(devPairCombinations.getPastPairByTrack(0, ""track1""), is(getPairsListFromDevs(standardDevs).get(0).getPairByTrack(""track1"")));
		assertThat(devPairCombinations.getPastPairByTrack(1, ""track2""), is(getPairsListFromDevs(standardDevs).get(1).getPairByTrack(""track2"")));
		assertThat(devPairCombinations.getPastPairByTrack(2, ""track1""), is(getPairsListFromDevs(standardDevs).get(2).getPairByTrack(""track1"")));
	}
",non-flaky,5
77016,Tencent_Firestorm,ShuffleHdfsStorageUtilsTest.testUploadFile,"  @Test
  public void testUploadFile() {
    FileOutputStream fileOut = null;
    DataOutputStream dataOut = null;
    try {
      TemporaryFolder tmpDir = new TemporaryFolder();
      tmpDir.create();
      File file = tmpDir.newFile(""test"");
      fileOut = new FileOutputStream(file);
      dataOut = new DataOutputStream(fileOut);
      byte[] buf = new byte[2096];
      new Random().nextBytes(buf);
      dataOut.write(buf);
      dataOut.close();
      fileOut.close();
      String path = HDFS_URI + ""test"";
      HdfsFileWriter writer = new HdfsFileWriter(new Path(path), conf);
      long size = ShuffleStorageUtils.uploadFile(file, writer, 1024);
      assertEquals(2096, size);
      size = ShuffleStorageUtils.uploadFile(file, writer, 100);
      assertEquals(2096, size);
      writer.close();
      tmpDir.delete();
    } catch (Exception e) {
      e.printStackTrace();
      fail();
    }
  }
",non-flaky,5
179412,abel533_Mapper,KeySqlTest.testDialect,"    @Test
    public void testDialect(){
        EntityHelper.initEntityNameMap(UserDialect.class, config);
        EntityTable entityTable = EntityHelper.getEntityTable(UserDialect.class);
        Assert.assertNotNull(entityTable);

        Set<EntityColumn> columns = entityTable.getEntityClassColumns();
        Assert.assertEquals(1, columns.size());

        for (EntityColumn column : columns) {
            Assert.assertEquals(""SELECT LAST_INSERT_ID()"", column.getGenerator());
            Assert.assertEquals(ORDER.AFTER, column.getOrder());
            Assert.assertTrue(column.isIdentity());
        }
    }
",non-flaky,5
59589,looly_hutool,QrCodeUtilTest.generateCustomTest,"	@Test
	public void generateCustomTest() {
		QrConfig config = new QrConfig();
		config.setMargin(0);
		config.setForeColor(Color.CYAN);
		// èæ¯è²éæ
		config.setBackColor(null);
		config.setErrorCorrection(ErrorCorrectionLevel.H);
		QrCodeUtil.generate(""https://hutool.cn/"", config, FileUtil.file(""d:/qrcodeCustom.png""));
	}
",non-flaky,5
26828,wildfly_wildfly,JndiPermissionTestCase.testActions,"    @Test
    public void testActions() {
        assertEquals(new JndiPermission(""foo"", ""*""), new JndiPermission(""foo"", ""all""));
        assertEquals(new JndiPermission(""foo"", ""*""), new JndiPermission(""foo"", ""lookup,bind,rebind,unbind,list,listBindings,createSubcontext,destroySubcontext,addNamingListener""));
        assertEquals(new JndiPermission(""foo"", ""*""), new JndiPermission(""foo"", ""unbind,list,listBindings,createSubcontext,destroySubcontext,addNamingListener,lookup,bind,rebind""));

        assertTrue(new JndiPermission(""foo"", ""*"").implies(new JndiPermission(""foo"", ""lookup"")));
        assertTrue(new JndiPermission(""foo"", """").implies(new JndiPermission(""foo"", """")));
        assertTrue(new JndiPermission(""foo"", ""*"").implies(new JndiPermission(""foo"", """")));
        assertFalse(new JndiPermission(""foo"", """").implies(new JndiPermission(""foo"", ""bind"")));
        assertTrue(new JndiPermission(""foo"", """").withActions(""bind"").implies(new JndiPermission(""foo"", ""bind"")));
        assertFalse(new JndiPermission(""foo"", ""unbind"").withoutActions(""unbind"").implies(new JndiPermission(""foo"", ""unbind"")));
    }
",non-flaky,5
19444,eclipse_xtext-core,TypeHierarchyHelperTest.testConfigurationOfLiftedReference,"	@Test
	public void testConfigurationOfLiftedReference() throws Exception {
		EClassInfo a = addClass(""a"");
		EClassInfo b = addClass(""b"");
		EClassInfo c = addClass(""c"");

		b.addSupertype(a);
		c.addSupertype(a);
		EReference refB = addReference(b, a, ""ref"");
		refB.setContainment(true);
		EReference refC = addReference(c, a, ""ref"");
		refC.setContainment(true);

		assertEquals(0, a.getEClass().getEStructuralFeatures().size());
		assertEquals(1, b.getEClass().getEStructuralFeatures().size());
		assertEquals(1, c.getEClass().getEStructuralFeatures().size());

		liftUpFeatures();

		assertEquals(1, a.getEClass().getEStructuralFeatures().size());
		assertEquals(0, b.getEClass().getEStructuralFeatures().size());
		assertEquals(0, c.getEClass().getEStructuralFeatures().size());

		EReference refA = (EReference) a.getEClass().getEStructuralFeatures().get(0);
		assertTrue(refA.isContainment());
	}
",non-flaky,5
91410,OpenLCB_OpenLCB_Java,CollapsiblePanelTest.testCTor,"    @Test
    public void testCTor() {
        Assume.assumeFalse(GraphicsEnvironment.isHeadless());
        CollapsiblePanel t = new CollapsiblePanel(""test"",new javax.swing.JPanel());
        Assert.assertNotNull(""exists"",t);
    }
",non-flaky,5
43104,trinodb_trino,AbstractTestIntegrationSmokeTest.testTableSampleWithFiltering,"    @Test
    public void testTableSampleWithFiltering()
    {
        MaterializedResult emptySample = computeActual(""SELECT DISTINCT orderkey, orderdate FROM orders TABLESAMPLE SYSTEM (99) WHERE orderkey BETWEEN 0 AND 0"");
        MaterializedResult halfSample = computeActual(""SELECT DISTINCT orderkey, orderdate FROM orders TABLESAMPLE SYSTEM (50) WHERE orderkey BETWEEN 0 AND 9999999999"");
        MaterializedResult all = computeActual(""SELECT orderkey, orderdate FROM orders"");

        assertEquals(emptySample.getMaterializedRows().size(), 0);
        // Assertions need to be loose here because SYSTEM sampling random selects data on split boundaries. In this case either all the data will be selected, or
        // none of it. Sampling with a 100% ratio is ignored, so that also cannot be used to guarantee results.
        assertTrue(all.getMaterializedRows().size() >= halfSample.getMaterializedRows().size());
    }
",non-flaky,5
133976,CorfuDB_CorfuDB,LogUnitHandlerTest.testTrimmedError,"    @Test
    public void testTrimmedError() {
        ResponseMsg response = getResponseMsg(
                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.IGNORE),
                getTrimmedErrorMsg()
        );

        logUnitHandler.handleMessage(response, mockChannelHandlerContext);
        // Verify that the correct request was completed exceptionally.
        verify(mockClientRouter, never()).completeRequest(anyLong(), any());
        verify(mockClientRouter).completeExceptionally(
                eq(response.getHeader().getRequestId()), any(TrimmedException.class));
    }
",non-flaky,5
43039,trinodb_trino,BaseDynamicPartitionPruningTest.testRightJoinWithSelectiveBuildSide,"    @Test(timeOut = 30_000)
    public void testRightJoinWithSelectiveBuildSide()
    {
        @Language(""SQL"") String selectQuery = ""SELECT * FROM partitioned_lineitem l RIGHT JOIN supplier s ON l.suppkey = s.suppkey WHERE name = 'Supplier#000000001'"";
        ResultWithQueryId<MaterializedResult> result = getDistributedQueryRunner().executeWithQueryId(
                getSession(),
                selectQuery);
        MaterializedResult expected = computeActual(withDynamicFilteringDisabled(), selectQuery);
        assertEqualsIgnoreOrder(result.getResult(), expected);

        OperatorStats probeStats = searchScanFilterAndProjectOperatorStats(result.getQueryId(), getQualifiedTableName(PARTITIONED_LINEITEM));
        // Probe-side is partially scanned
        assertEquals(probeStats.getInputPositions(), 615L);

        DynamicFiltersStats dynamicFiltersStats = getDynamicFilteringStats(result.getQueryId());
        assertEquals(dynamicFiltersStats.getTotalDynamicFilters(), 1L);
        assertEquals(dynamicFiltersStats.getLazyDynamicFilters(), 1L);
        assertEquals(dynamicFiltersStats.getReplicatedDynamicFilters(), 0L);
        assertEquals(dynamicFiltersStats.getDynamicFiltersCompleted(), 1L);

        DynamicFilterDomainStats domainStats = getOnlyElement(dynamicFiltersStats.getDynamicFilterDomainStats());
        assertEquals(domainStats.getSimplifiedDomain(), singleValue(BIGINT, 1L).toString(getSession().toConnectorSession()));
    }
",non-flaky,5
98608,nutzam_nutz,El2Test.testIssue277_2,"    @Test
    public void testIssue277_2() {
        Context context = Lang.context();
        context.set(""math"", Maths.class);
        assertEquals(2, El.eval(context, ""math.max(1, 2)""));
    }
",non-flaky,5
60899,apache_druid,ThriftInputRowParserTest.testDisableJavaScript,"  @Test
  public void testDisableJavaScript()
  {
    final JavaScriptParseSpec parseSpec = new JavaScriptParseSpec(
        new TimestampSpec(""timestamp"", ""auto"", null),
        new DimensionsSpec(
            DimensionsSpec.getDefaultSchemas(
                ImmutableList.of(
                    ""dim1"",
                    ""dim2""
                )
            ),
            null,
            null
        ),
        ""func"",
        new JavaScriptConfig(false)
    );
    ThriftInputRowParser parser = new ThriftInputRowParser(
        parseSpec,
        ""example/book.jar"",
        ""org.apache.druid.data.input.thrift.Book""
    );

    expectedException.expect(CoreMatchers.instanceOf(IllegalStateException.class));
    expectedException.expectMessage(""JavaScript is disabled"");

    //noinspection ResultOfMethodCallIgnored (this method call will trigger the expected exception)
    parser.parseBatch(ByteBuffer.allocate(1)).get(0);
  }
",non-flaky,5
26708,MundaneImmortal_pair-distribution-app,PairTest.testHashCodeNotEqual,"	@Test
	public void testHashCodeNotEqual()  {
		Pair subject = new Pair(Arrays.asList(new Developer(""dev1"")));
		Pair subject2 = new Pair(Arrays.asList(new Developer(""dev2"")));
		
		assertThat(subject.hashCode(), is(not(equalTo(subject2.hashCode()))));
	}
",non-flaky,5
26889,wildfly_wildfly,InMemoryNamingStoreTestCase.testBindEmptyName,"    @Test
    public void testBindEmptyName() throws Exception {
        try {
            nameStore.bind(new CompositeName(), new Object(), Object.class);
            fail(""Should have thrown and InvalidNameException"");
        } catch(InvalidNameException expected){}

        try {
            nameStore.bind(new CompositeName(""""), new Object(), Object.class);
            fail(""Should have thrown and InvalidNameException"");
        } catch(InvalidNameException expected){}
    }
",non-flaky,5
70807,apache_kafka,PluginUtilsTest.testPluginUrlsWithAbsoluteSymlink,"    @Test
    public void testPluginUrlsWithAbsoluteSymlink() throws Exception {
        createBasicDirectoryLayout();

        Path anotherPath = rootDir.newFolder(""moreplugins"").toPath().toRealPath();
        Files.createDirectories(anotherPath.resolve(""connectorB-deps""));
        Files.createSymbolicLink(
                pluginPath.resolve(""connectorB/deps/symlink""),
                anotherPath.resolve(""connectorB-deps"")
        );

        List<Path> expectedUrls = createBasicExpectedUrls();
        expectedUrls.add(Files.createFile(anotherPath.resolve(""connectorB-deps/converter.jar"")));

        assertUrls(expectedUrls, PluginUtils.pluginUrls(pluginPath));
    }
",non-flaky,5
89310,apache_samza,TestKafkaSystemAdminWithMock.testGetSSPMetadata,"  @Test
  public void testGetSSPMetadata() {
    SystemStreamPartition ssp = new SystemStreamPartition(TEST_SYSTEM, VALID_TOPIC, new Partition(0));
    SystemStreamPartition otherSSP = new SystemStreamPartition(TEST_SYSTEM, ""otherTopic"", new Partition(1));
    TopicPartition topicPartition = new TopicPartition(VALID_TOPIC, 0);
    TopicPartition otherTopicPartition = new TopicPartition(""otherTopic"", 1);
    when(mockKafkaConsumer.beginningOffsets(ImmutableList.of(topicPartition, otherTopicPartition))).thenReturn(
        ImmutableMap.of(topicPartition, 1L, otherTopicPartition, 2L));
    when(mockKafkaConsumer.endOffsets(ImmutableList.of(topicPartition, otherTopicPartition))).thenReturn(
        ImmutableMap.of(topicPartition, 11L, otherTopicPartition, 12L));
    Map<SystemStreamPartition, SystemStreamMetadata.SystemStreamPartitionMetadata> expected =
        ImmutableMap.of(ssp, new SystemStreamMetadata.SystemStreamPartitionMetadata(""1"", ""10"", ""11""), otherSSP,
            new SystemStreamMetadata.SystemStreamPartitionMetadata(""2"", ""11"", ""12""));
    assertEquals(kafkaSystemAdmin.getSSPMetadata(ImmutableSet.of(ssp, otherSSP)), expected);
  }
",non-flaky,5
30912,camunda-cloud_zeebe,RecordingExporterTest.shouldCollectToList,"  @Test
  public void shouldCollectToList() {
    // given
    final RecordingExporter exporter = new RecordingExporter();
    exporter.export(new TestRecord(1));
    exporter.export(new TestRecord(2));
    exporter.export(new TestRecord(3));

    // when
    final List<Record<TestValue>> list =
        records(VALUE_TYPE, TestValue.class).collect(Collectors.toList());

    // then
    assertThat(list).extracting(Record::getPosition).containsExactly(1L, 2L, 3L);
  }
",non-flaky,5
24,trinodb_trino,TestExchangeClient.testAddLocation,"@Test
public void testAddLocation() throws Exception {
    DataSize maxResponseSize = DataSize.of(10, MEGABYTE);
    MockExchangeRequestProcessor processor = new MockExchangeRequestProcessor(maxResponseSize);
    TaskId task1 = new TaskId(new StageId(""query"", 1), 0, 0);
    TaskId task2 = new TaskId(new StageId(""query"", 1), 1, 0);
    TaskId task3 = new TaskId(new StageId(""query"", 1), 2, 0);
    URI location1 = URI.create(""http:www.example1.com"");
    URI location2 = URI.create(""http:www.example2.com"");
    URI location3 = URI.create(""http:www.example3.com"");
    processor.addPage(location1, createSerializedPage(1));
    processor.addPage(location1, createSerializedPage(2));
    TestingExchangeClientBuffer buffer = new TestingExchangeClientBuffer(DataSize.of(1, MEGABYTE));
    @SuppressWarnings(""resource"")
    ExchangeClient exchangeClient = new ExchangeClient(""localhost"", DataIntegrityVerification.ABORT, buffer, maxResponseSize, 1, new Duration(1, TimeUnit.MINUTES), true, new TestingHttpClient(processor, scheduler), scheduler, new SimpleLocalMemoryContext(newSimpleAggregatedMemoryContext(), ""test""), pageBufferClientCallbackExecutor, ( taskId, failure) -> {
    });
    assertThat(buffer.getAllTasks()).isEmpty();
    assertThat(buffer.getPages().asMap()).isEmpty();
    assertThat(buffer.getFinishedTasks()).isEmpty();
    assertThat(buffer.getFailedTasks().asMap()).isEmpty();
    assertFalse(buffer.isNoMoreTasks());
    exchangeClient.addLocation(task1, location1);
    assertThat(buffer.getAllTasks()).containsExactly(task1);
    assertTaskIsNotFinished(buffer, task1);
    processor.setComplete(location1);
    buffer.whenTaskFinished(task1).get(10, SECONDS);
    assertThat(buffer.getPages().get(task1)).hasSize(2);
    assertThat(buffer.getFinishedTasks()).containsExactly(task1);
    exchangeClient.addLocation(task2, location2);
    assertThat(buffer.getAllTasks()).containsExactlyInAnyOrder(task1, task2);
    assertTaskIsNotFinished(buffer, task2);
    processor.setComplete(location2);
    buffer.whenTaskFinished(task2).get(10, SECONDS);
    assertThat(buffer.getFinishedTasks()).containsExactlyInAnyOrder(task1, task2);
    assertThat(buffer.getPages().get(task2)).hasSize(0);
    exchangeClient.addLocation(task3, location3);
    assertThat(buffer.getAllTasks()).containsExactlyInAnyOrder(task1, task2, task3);
    assertTaskIsNotFinished(buffer, task3);
    exchangeClient.noMoreLocations();
    assertTrue(buffer.isNoMoreTasks());
    assertThat(buffer.getAllTasks()).containsExactlyInAnyOrder(task1, task2, task3);
    assertTaskIsNotFinished(buffer, task3);
    exchangeClient.close();
    assertEventually(() -> assertEquals(exchangeClient.getStatus().getPageBufferClientStatuses().get(0).getHttpRequestState(), ""not scheduled"", ""httpRequestState""));
    assertEventually(() -> assertEquals(exchangeClient.getStatus().getPageBufferClientStatuses().get(1).getHttpRequestState(), ""not scheduled"", ""httpRequestState""));
    assertEventually(() -> assertEquals(exchangeClient.getStatus().getPageBufferClientStatuses().get(2).getHttpRequestState(), ""not scheduled"", ""httpRequestState""));
    assertThat(buffer.getFinishedTasks()).containsExactlyInAnyOrder(task1, task2, task3);
    assertThat(buffer.getFailedTasks().asMap()).isEmpty();
    assertTrue(exchangeClient.isFinished());
}",async wait,0
134010,CorfuDB_CorfuDB,TwoLinksFailureIT.twoLinksFailureTest,"    @Test(timeout = 300000)
    public void twoLinksFailureTest() {
        workflow(wf -> {
            wf.deploy();

            CorfuCluster corfuCluster = wf.getUniverse()
                    .getGroup(wf.getFixture().data().getGroupParamByIndex(0).getName());

            CorfuClient corfuClient = corfuCluster.getLocalCorfuClient();

            CorfuTable<String, String> table = corfuClient
                    .createDefaultCorfuTable(DEFAULT_STREAM_NAME);
            for (int i = 0; i < DEFAULT_TABLE_ITER; i++) {
                table.put(String.valueOf(i), String.valueOf(i));
            }

            //Should fail two links and then heal
            CorfuServer server0 = corfuCluster.getServerByIndex(0);
            CorfuServer server1 = corfuCluster.getServerByIndex(1);
            CorfuServer server2 = corfuCluster.getServerByIndex(2);

            // Disconnect server0 with server1 and server2
            server0.disconnect(Arrays.asList(server1, server2));
            waitForLayoutChange(layout -> layout.getUnresponsiveServers()
                    .equals(Collections.singletonList(server0.getEndpoint())), corfuClient);

            // Cluster status should be DEGRADED after one node is marked unresponsive
            ClusterStatusReport clusterStatusReport = corfuClient
                    .getManagementView()
                    .getClusterStatus();
            assertThat(clusterStatusReport.getClusterStatus()).isEqualTo(ClusterStatus.DEGRADED);

            // Verify data path working fine
            for (int i = 0; i < DEFAULT_TABLE_ITER; i++) {
                assertThat(table.get(String.valueOf(i))).isEqualTo(String.valueOf(i));
            }

            // Repair the link failure between server0 and others
            server0.reconnect(Arrays.asList(server1, server2));
            waitForUnresponsiveServersChange(size -> size == 0, corfuClient);

            final Duration sleepDuration = Duration.ofSeconds(1);
            // Verify cluster status is STABLE
            clusterStatusReport = corfuClient.getManagementView().getClusterStatus();
            while (!clusterStatusReport.getClusterStatus().equals(ClusterStatus.STABLE)) {
                clusterStatusReport = corfuClient.getManagementView().getClusterStatus();
                Sleep.sleepUninterruptibly(sleepDuration);
            }
            assertThat(clusterStatusReport.getClusterStatus()).isEqualTo(ClusterStatus.STABLE);

            // Verify data path working fine
            for (int i = 0; i < DEFAULT_TABLE_ITER; i++) {
                assertThat(table.get(String.valueOf(i))).isEqualTo(String.valueOf(i));
            }

            corfuClient.shutdown();
        });
    }
",non-flaky,5
98360,Kong_unirest-java,PostRequestHandlersTest.tearDown,"    @AfterEach
    public void tearDown() {
        super.tearDown();
        captured = null;
    }
",non-flaky,5
26914,wildfly_wildfly,JSFModuleIdFactoryTestCase.modIdsTest,"    @Test
    public void modIdsTest() {
        Assert.assertEquals(API_MODULE, factory.getApiModId(""main"").getName());
        Assert.assertEquals(""main"", factory.getApiModId(""main"").getSlot());
        Assert.assertEquals(IMPL_MODULE, factory.getImplModId(""main"").getName());
        Assert.assertEquals(""main"", factory.getImplModId(""main"").getSlot());
        Assert.assertEquals(INJECTION_MODULE, factory.getInjectionModId(""main"").getName());
        Assert.assertEquals(""main"", factory.getInjectionModId(""main"").getSlot());

        Assert.assertEquals(API_MODULE, factory.getApiModId(""myfaces"").getName());
        Assert.assertEquals(""myfaces"", factory.getApiModId(""myfaces"").getSlot());
        Assert.assertEquals(IMPL_MODULE, factory.getImplModId(""myfaces"").getName());
        Assert.assertEquals(""myfaces"", factory.getImplModId(""myfaces"").getSlot());
        Assert.assertEquals(INJECTION_MODULE, factory.getInjectionModId(""myfaces"").getName());
        Assert.assertEquals(""myfaces"", factory.getInjectionModId(""myfaces"").getSlot());

        Assert.assertEquals(API_MODULE, factory.getApiModId(""myfaces2"").getName());
        Assert.assertEquals(""myfaces2"", factory.getApiModId(""myfaces2"").getSlot());
        Assert.assertEquals(IMPL_MODULE, factory.getImplModId(""myfaces2"").getName());
        Assert.assertEquals(""myfaces2"", factory.getImplModId(""myfaces2"").getSlot());
        Assert.assertEquals(INJECTION_MODULE, factory.getInjectionModId(""myfaces2"").getName());
        Assert.assertEquals(""myfaces2"", factory.getInjectionModId(""myfaces2"").getSlot());
    }
",non-flaky,5
97968,ReactiveX_RxJava,ObservableTests.testCountZeroItems,"    @Test
    public void testCountZeroItems() {
        Observable<String> observable = Observable.empty();
        observable.count().subscribe(w);
        // we should be called only once
        verify(w, times(1)).onNext(anyInt());
        verify(w).onNext(0);
        verify(w, never()).onError(any(Throwable.class));
        verify(w, times(1)).onCompleted();
    }
",non-flaky,5
77620,pholser_junit-quickcheck,SizeConstrainedSetPropertyParameterTypesTest.shouldHold,"    @Test public void shrinkingSizeConstrainedSets() {
        @Property public void shouldHold(@Size(min = 2, max = 5) Set<Integer> items) {
            failed = items;

            fail();
        }
",non-flaky,5
159691,liquibase_liquibase,AddAutoIncrementExecuteTest.execute_stringDefault,"//    @Test
//    public void execute_stringDefault() throws Exception {
//        new DatabaseTestTemplate().testOnAvailableDatabases(
//                new SqlStatementDatabaseTest(null, new AddColumnStatement(null, TABLE_NAME, NEW_COLUMN_NAME, ""varchar(50)"", ""new default"")) {
//                    protected void preExecuteAssert(DatabaseSnapshotGenerator snapshot) {
//                        assertNull(snapshot.getTable(TABLE_NAME).getColumn(NEW_COLUMN_NAME));
//                    }
//
//                    protected void postExecuteAssert(DatabaseSnapshotGenerator snapshot) {
//                        Column columnSnapshot = snapshot.getTable(TABLE_NAME).getColumn(NEW_COLUMN_NAME);
//                        assertNotNull(columnSnapshot);
//                        assertEquals(NEW_COLUMN_NAME.toUpperCase(), columnSnapshot.getName().toUpperCase());
//                        assertEquals(""varchar"".toUpperCase(), columnSnapshot.getShortName().toUpperCase().replaceAll(""VARCHAR2"", ""VARCHAR""));
//                        assertEquals(50, columnSnapshot.getColumnSize());
//                        assertEquals(""new default"", columnSnapshot.getDefaultValue());
//
//                        assertEquals(true, columnSnapshot.isNullable());
//                    }
//                });
//    }
",non-flaky,5
95649,togglz_togglz,ShiroUsersTest.testShiroAsAnonymousUser,"    @Test
    public void testShiroAsAnonymousUser() throws Exception {

        WebClient client = new WebClient();
        TextPage page = client.getPage(url + ""features"");
        assertTrue(page.getContent().contains(""DISABLED = false""));
        assertTrue(page.getContent().contains(""ENABLED_FOR_ALL = true""));
        assertTrue(page.getContent().contains(""ENABLED_FOR_CK = false""));

        TextPage userPage = client.getPage(url + ""user"");
        assertTrue(userPage.getContent().contains(""USER = null""));
        assertTrue(userPage.getContent().contains(""ADMIN = null""));

    }
",non-flaky,5
177159,line_armeria,TokenBucketThrottlingStrategyTest.throttle3,"    @Test
    public void throttle3() throws Exception {
        final WebClient client = WebClient.of(serverRule.httpUri());
        final AggregatedHttpResponse response1 = client.get(""/http-throttle3"").aggregate().get();
        assertThat(response1.status()).isEqualTo(HttpStatus.OK);

        assertThat(response1.headers().contains(HttpHeaderNames.RETRY_AFTER)).isFalse();
        assertThat(response1.headers().contains(""RateLimit-Remaining"")).isFalse();
        assertThat(response1.headers().contains(""X-Rate-Limit-Remaining"")).isFalse();
        assertThat(response1.headers().contains(""X-RateLimit-Remaining"")).isFalse();
        assertThat(response1.headers().contains(""X-RateLimit-Reset"")).isFalse();

        final AggregatedHttpResponse response2 = client.get(""/http-throttle3"").aggregate().get();
        assertThat(response2.status()).isEqualTo(HttpStatus.TOO_MANY_REQUESTS);

        assertThat(response2.headers().contains(HttpHeaderNames.RETRY_AFTER)).isTrue();
        final long retryAfter2 = Long.parseLong(response2.headers().get(HttpHeaderNames.RETRY_AFTER));
        assertThat(retryAfter2).isBetween(0L, 10L);
        assertThat(response2.headers().contains(""RateLimit-Remaining"")).isFalse();
        assertThat(response2.headers().contains(""X-Rate-Limit-Remaining"")).isFalse();
        assertThat(response2.headers().contains(""X-RateLimit-Remaining"")).isFalse();
        assertThat(response2.headers().contains(""X-RateLimit-Reset"")).isFalse();
    }
",non-flaky,5
91485,strapdata_elassandra,IndicesShardStoreRequestIT.testEmpty,"@TestLogging(""_root:DEBUG,org.elasticsearch.action.admin.indices.shards:TRACE,org.elasticsearch.cluster.service:TRACE"")
    public void testEmpty() {
        ensureGreen();
        IndicesShardStoresResponse rsp = client().admin().indices().prepareShardStores().get();
        assertThat(rsp.getStoreStatuses().size(), equalTo(0));
    }
",non-flaky,5
112702,hwang-pku_ormlite-core,TransactionManagerTest.testDaoTransactionManagerCommitted,"	@Test
	public void testDaoTransactionManagerCommitted() throws Exception {
		if (connectionSource == null) {
			return;
		}
		TransactionManager mgr = new TransactionManager(connectionSource);
		final Dao<Foo, Integer> fooDao = createDao(Foo.class, true);
		testTransactionManager(mgr, null, fooDao);
	}
",non-flaky,5
98218,apache_jackrabbit,CreateRepositoryTest.createRepositories,"    @Test
    public void createRepositories() throws Exception {
        doCreateRepositories(""jackrabbit-1.2"");
    }
",non-flaky,5
77701,pholser_junit-quickcheck,PrimitivePropertyParameterTypesTest.shouldHold,"    @Test public void leftOpenEndedRangedPrimitiveDouble() {
        @Property public void shouldHold(@InRange(maxDouble = 3.14) double d) {
            assertThat(d, greaterThanOrEqualTo(RangeAttributes.minDouble()));
            assertThat(d, lessThan(3.14));
        }
",non-flaky,5
112662,tbsalling_aismessages,LongRangeBroadcastMessageTest.canDecode1,"    @Test
    public void canDecode1() {
        AISMessage aisMessage = AISMessage.create(NMEAMessage.fromString(""!AIVDM,1,1,,B,KC5E2b@U19PFdLbMuc5=ROv62<7m,0*16""));

        System.out.println(aisMessage.toString());

        assertEquals(AISMessageType.LongRangeBroadcastMessage, aisMessage.getMessageType());
        assertEquals((Integer) 1, aisMessage.getRepeatIndicator());
        assertEquals(MMSI.valueOf(206914217), aisMessage.getSourceMmsi());

        LongRangeBroadcastMessage message = (LongRangeBroadcastMessage) aisMessage;
        assertFalse(message.getPositionAccuracy());
        assertFalse(message.getRaim());
        assertEquals(NavigationStatus.NotUnderCommand, message.getNavigationalStatus());
        assertEquals(Float.valueOf(137.02333f), message.getLongitude());
        assertEquals(Float.valueOf(4.84f), message.getLatitude());
        assertEquals(Float.valueOf(57f), message.getSpeedOverGround(), 1e-5);
        assertEquals((Integer)57, message.getRawSpeedOverGround());
        assertEquals(Float.valueOf(167f), message.getCourseOverGround(), 1e-5);
        assertEquals((Integer)167, message.getRawCourseOverGround());
    }
",non-flaky,5
156467,apache_commons-lang,DateUtilsFragmentTest.testSecondsOfMonthWithDate,"    @Test
    public void testSecondsOfMonthWithDate() {
        final long testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.MONTH);
        assertEquals(
                seconds
                        + ((minutes * DateUtils.MILLIS_PER_MINUTE)
                                + (hours * DateUtils.MILLIS_PER_HOUR) + ((days - 1) * DateUtils.MILLIS_PER_DAY))
                        / DateUtils.MILLIS_PER_SECOND,
                testResult);
    }
",non-flaky,5
360,apache_hadoop,TestPeerCache.testExpiry,"@Test
public void testExpiry() throws Exception {
    final int CAPACITY = 3;
    final int EXPIRY_PERIOD = 10;
    PeerCache cache = PeerCache.getInstance(CAPACITY, EXPIRY_PERIOD);
    DatanodeID dnIds[] = new DatanodeID[CAPACITY];
    FakePeer peers[] = new FakePeer[CAPACITY];
    for (int i = 0; i < CAPACITY; ++i) {
        dnIds[i] = new DatanodeID(""192.168.0.1"",
        ""fakehostname_"" + i, ""fake_storage_id"",
        100, 101, 102);
        peers[i] = new FakePeer(dnIds[i], false);
    }
    for (int i = 0; i < CAPACITY; ++i) {
        cache.put(dnIds[i], peers[i]);
    }
    Thread.sleep(EXPIRY_PERIOD * 50);
    assertEquals(0, cache.size());
    for (int i = 0; i < CAPACITY; ++i) {
        assertTrue(peers[i].isClosed());
    }
    Thread.sleep(EXPIRY_PERIOD * 50);
    cache.close();
}",test order dependency,4
122541,vespa-engine_vespa,SystemCtlTest.enable,"    @Test
    public void enable() {
        terminal.expectCommand(""systemctl --quiet is-enabled docker 2>&1"", 1, """")
                .expectCommand(""systemctl enable docker 2>&1"")
                .expectCommand(""systemctl --quiet is-enabled docker 2>&1"");

        SystemCtl.SystemCtlEnable enableDockerService = new SystemCtl(terminal).enable(""docker"");
        assertTrue(enableDockerService.converge(taskContext));
        assertFalse(""Already converged"", enableDockerService.converge(taskContext));
    }
",non-flaky,5
30996,camunda-cloud_zeebe,ObjectMappingTest.shouldDeserializeWithReusedPOJO,"  @Test
  public void shouldDeserializeWithReusedPOJO() {
    // given
    final POJO pojo = new POJO();

    final DirectBuffer buf1 =
        encodeMsgPack(
            (w) -> {
              w.writeMapHeader(7);

              w.writeString(wrapString(""enumProp""));
              w.writeString(wrapString(POJOEnum.BAR.toString()));

              w.writeString(wrapString(""binaryProp""));
              w.writeBinary(BUF1);

              w.writeString(wrapString(""stringProp""));
              w.writeString(BUF2);

              w.writeString(wrapString(""packedProp""));
              w.writeRaw(MSGPACK_BUF1);

              w.writeString(wrapString(""longProp""));
              w.writeInteger(88888L);

              w.writeString(wrapString(""intProp""));
              w.writeInteger(123);

              w.writeString(wrapString(""objectProp""));
              w.writeRaw(MSGPACK_BUF1);
            });
    pojo.wrap(buf1);

    final DirectBuffer buf2 =
        encodeMsgPack(
            (w) -> {
              w.writeMapHeader(7);

              w.writeString(wrapString(""enumProp""));
              w.writeString(wrapString(POJOEnum.FOO.toString()));

              w.writeString(wrapString(""binaryProp""));
              w.writeBinary(BUF2);

              w.writeString(wrapString(""stringProp""));
              w.writeString(BUF1);

              w.writeString(wrapString(""packedProp""));
              w.writeRaw(MSGPACK_BUF2);

              w.writeString(wrapString(""longProp""));
              w.writeInteger(7777L);

              w.writeString(wrapString(""intProp""));
              w.writeInteger(456);

              w.writeString(wrapString(""objectProp""));
              w.writeRaw(MSGPACK_BUF3);
            });

    // when
    pojo.reset();
    pojo.wrap(buf2);

    // then
    assertThat(pojo.getEnum()).isEqualByComparingTo(POJOEnum.FOO);
    assertThat(pojo.getLong()).isEqualTo(7777L);
    assertThat(pojo.getInt()).isEqualTo(456);
    assertThatBuffer(pojo.getPacked()).hasBytes(MSGPACK_BUF2);
    assertThatBuffer(pojo.getBinary()).hasBytes(BUF2);
    assertThatBuffer(pojo.getString()).hasBytes(BUF1);
    assertThat(pojo.nestedObject().getLong()).isEqualTo(24L);
  }
",non-flaky,5
106621,Alluxio_alluxio,AlluxioJniFuseFileSystemTest.getattrWhenWriting,"  @Test
  public void getattrWhenWriting() throws Exception {
    String path = ""/foo/bar"";
    AlluxioURI expectedPath = BASE_EXPECTED_URI.join(path);

    FileOutStream fos = mock(FileOutStream.class);
    when(mFileSystem.createFile(expectedPath)).thenReturn(fos);

    mFuseFs.create(path, 0, mFileInfo);

    // Prepare file status
    FileInfo info = new FileInfo();
    info.setLength(0);
    info.setCompleted(false);
    URIStatus status = new URIStatus(info);

    when(mFileSystem.exists(any(AlluxioURI.class))).thenReturn(true);
    when(mFileSystem.getStatus(any(AlluxioURI.class))).thenReturn(status);

    FileStat stat = FileStat.of(ByteBuffer.allocateDirect(256));

    // getattr() will not be blocked when writing
    mFuseFs.getattr(path, stat);
    // If getattr() is blocking, it will continuously get status of the file
    verify(mFileSystem, atMost(300)).getStatus(expectedPath);
    assertEquals(0, stat.st_size.longValue());

    mFuseFs.release(path, mFileInfo);

    // getattr() will be blocked waiting for the file to be completed
    // If release() is called (returned) but does not finished
    Thread t = new Thread(() -> mFuseFs.getattr(path, stat));
    t.start();
    Thread.sleep(1000);
    verify(mFileSystem, atLeast(10)).getStatus(expectedPath);
    assertEquals(0, stat.st_size.longValue());

    info.setCompleted(true);
    info.setLength(1000);

    t.join();

    // getattr() completed and set the file size
    assertEquals(1000, stat.st_size.longValue());
  }
",non-flaky,5
216,julianghionoiu_dpnt-coverage,CoverageDatapointAcceptanceTest.create_repo_and_uploads_commits,"@Test
public void create_repo_and_uploads_commits() throws Exception {
    String challengeId = ""TCH"";
    String participantId = generateId();
    String s3destination = String.format(""%s/%s/file.srcs"", challengeId, participantId);
    TestSrcsFile srcsForTestChallenge = new TestSrcsFile(""HmmmLang_R1Cov33_R2Cov44.srcs"");
    S3Event s3Event = localS3Bucket.putObject(srcsForTestChallenge.asFile(), s3destination);
    coverageUploadHandler.handleRequest(convertToMap(wrapAsSNSEvent(s3Event)),NO_CONTEXT);
    waitForQueueToReceiveEvents();
    assertThat(languageDetectedEvents.size(), equalTo(1));
    System.out.println(""Received language detected events: ""+languageDetectedEvents);
    ProgrammingLanguageDetectedEvent languageEvent = languageDetectedEvents.get(0);
    assertThat(languageEvent.getParticipant(), equalTo(participantId));
    assertThat(languageEvent.getChallengeId(), equalTo(challengeId));
    assertThat(languageEvent.getProgrammingLanguage(), equalTo(""HmmmLang""));
    assertThat(coverageComputedEvents.size(), equalTo(2));
    System.out.println(""Received coverage events: ""+coverageComputedEvents);
    coverageComputedEvents.sort(Comparator.comparing(CoverageComputedEvent::getRoundId));
    CoverageComputedEvent coverageRound1 = coverageComputedEvents.get(0);
    assertThat(coverageRound1.getParticipant(), equalTo(participantId));
    assertThat(coverageRound1.getRoundId(), equalTo(challengeId+""_R1""));
    assertThat(coverageRound1.getCoverage(), equalTo(33));
    CoverageComputedEvent coverageRound2 = coverageComputedEvents.get(1);
    assertThat(coverageRound2.getParticipant(), equalTo(participantId));
    assertThat(coverageRound2.getRoundId(), equalTo(challengeId+""_R2""));
    assertThat(coverageRound2.getCoverage(), equalTo(44));
}",async wait,0
160415,ConsenSys_teku,ChainDataProviderTest.getValidatorBalancesFromState_shouldGetBalances,"  @Test
  public void getValidatorBalancesFromState_shouldGetBalances() {
    final ChainDataProvider provider =
        new ChainDataProvider(spec, recentChainData, combinedChainDataClient);
    final tech.pegasys.teku.spec.datastructures.state.beaconstate.BeaconState internalState =
        data.randomBeaconState(1024);
    assertThat(provider.getValidatorBalancesFromState(internalState, emptyList())).hasSize(1024);

    assertThat(
            provider.getValidatorBalancesFromState(
                internalState, List.of(""0"", ""100"", ""1023"", ""1024"", ""1024000"")))
        .hasSize(3);
  }
",non-flaky,5
91458,strapdata_elassandra,RelocationIT.indexShardStateChanged,"    @TestLogging(""org.elasticsearch.action.bulk:TRACE,org.elasticsearch.action.search:TRACE"")
    public void testRelocationWhileRefreshing() throws Exception {
        int numberOfRelocations = scaledRandomIntBetween(1, rarely() ? 10 : 4);
        int numberOfReplicas = randomBoolean() ? 0 : 1;
        int numberOfNodes = numberOfReplicas == 0 ? 2 : 3;

        logger.info(""testRelocationWhileIndexingRandom(numRelocations={}, numberOfReplicas={}, numberOfNodes={})"", numberOfRelocations, numberOfReplicas, numberOfNodes);

        String[] nodes = new String[numberOfNodes];
        logger.info(""--> starting [node_0] ..."");
        nodes[0] = internalCluster().startNode();

        logger.info(""--> creating test index ..."");
        prepareCreate(
                ""test"",
                Settings.builder()
                        .put(""index.number_of_shards"", 1)
                        .put(""index.number_of_replicas"", numberOfReplicas)
                        .put(""index.refresh_interval"", -1) // we want to control refreshes
                        .put(IndexService.GLOBAL_CHECKPOINT_SYNC_INTERVAL_SETTING.getKey(), ""100ms""))
                .get();

        for (int i = 1; i < numberOfNodes; i++) {
            logger.info(""--> starting [node_{}] ..."", i);
            nodes[i] = internalCluster().startNode();
            if (i != numberOfNodes - 1) {
                ClusterHealthResponse healthResponse = client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID)
                        .setWaitForNodes(Integer.toString(i + 1)).setWaitForGreenStatus().execute().actionGet();
                assertThat(healthResponse.isTimedOut(), equalTo(false));
            }
        }

        final Semaphore postRecoveryShards = new Semaphore(0);
        final IndexEventListener listener = new IndexEventListener() {
            @Override
            public void indexShardStateChanged(IndexShard indexShard, @Nullable IndexShardState previousState, IndexShardState currentState, @Nullable String reason) {
                if (currentState == IndexShardState.POST_RECOVERY) {
                    postRecoveryShards.release();
                }
            }
",non-flaky,5
135772,Netflix_Hystrix,HystrixPluginsTest.testMetricsPublisherViaProperty,"    @Test
    public void testMetricsPublisherViaProperty() {
        try {
            String fullClass = HystrixMetricsPublisherTestImpl.class.getName();
            System.setProperty(""hystrix.plugin.HystrixMetricsPublisher.implementation"", fullClass);
            HystrixMetricsPublisher impl = HystrixPlugins.getInstance().getMetricsPublisher();
            assertTrue(impl instanceof HystrixMetricsPublisherTestImpl);
        } finally {
            System.clearProperty(""hystrix.plugin.HystrixMetricsPublisher.implementation"");
        }
	}*/
",non-flaky,5
94763,ktuukkan_marine-api,AbstractAISMessageListenerTest.testBasicListenerWithUnexpectedMessage,"    @Test
    public void testBasicListenerWithUnexpectedMessage() {

        BasicListener bl = new BasicListener();
        bl.sentenceRead(AIS_05_1);
        bl.sentenceRead(AIS_05_2);

        assertNull(bl.received);
    }
",non-flaky,5
77549,dropwizard_dropwizard,GzipDefaultVaryBehaviourTest.testDefaultVaryHeader,"    @Test
    public void testDefaultVaryHeader() {
        final Response clientResponse = RULE.client().target(
            ""http://localhost:"" + RULE.getLocalPort() + ""/test"").request().header(ACCEPT_ENCODING, ""gzip"").get();

        assertThat(clientResponse.getHeaders().get(VARY)).isEqualTo(Collections.singletonList((Object) ACCEPT_ENCODING));
        assertThat(clientResponse.getHeaders().get(CONTENT_ENCODING)).isEqualTo(Collections.singletonList((Object) ""gzip""));
    }
",non-flaky,5
99742,apache_cassandra,FQLReplayTest.writeMarshallablePayload,"    @Test (expected = IORuntimeException.class)
    public void testUnknownRecord() throws Exception
    {
        FQLQueryReader reader = new FQLQueryReader();
        File dir = Files.createTempDirectory(""chronicle"").toFile();
        try (ChronicleQueue queue = ChronicleQueueBuilder.single(dir).build())
        {
            ExcerptAppender appender = queue.acquireAppender();
            appender.writeDocument(new BinLog.ReleaseableWriteMarshallable() {
                protected long version()
                {
                    return FullQueryLogger.CURRENT_VERSION;
                }

                protected String type()
                {
                    return ""unknown-type"";
                }

                public void writeMarshallablePayload(WireOut wire)
                {
                    wire.write(""unknown-field"").text(""unknown_value"");
                }
",non-flaky,5
112064,apache_shardingsphere-elasticjob,StreamingDataflowElasticJobForNotMonitorTest.assertJobInit,"    @Test
    public void assertJobInit() {
        while (!StreamingDataflowElasticJob.isCompleted()) {
            WaitingUtils.waitingShortTime();
        }
        assertTrue(getRegCenter().isExisted(""/"" + getJobName() + ""/sharding""));
    }
",non-flaky,5
114114,aws_aws-sdk-java-v2,InstantAsStringAttributeConvertersTest.InstantAsStringAttributeConverterInvalidFormatTest,"    @Test
    public void InstantAsStringAttributeConverterInvalidFormatTest() {
        assertFails(() -> transformTo(CONVERTER, EnhancedAttributeValue.fromString(""X"")
                                                                       .toAttributeValue()));
    }
",non-flaky,5
135753,Netflix_Hystrix,HystrixConcurrencyStrategyTest.call,"    @Test
    public void testRequestContextPropagatesAcrossObserveOnPool() {
        new SimpleCommand().execute();
        new SimpleCommand().observe().map(new Func1<String, String>() {

            @Override
            public String call(String s) {
                System.out.println(""Map => Commands: "" + HystrixRequestLog.getCurrentRequest().getAllExecutedCommands());
                return s;
            }
",non-flaky,5
77462,opensearch-project_OpenSearch,LoggingListenerTests.annotatedTestMethod2,"        @TestLogging(value = ""abc:TRACE,xyz:DEBUG"", reason = ""testing TestLogging method annotations"")
        public void annotatedTestMethod2() {

        }
",non-flaky,5
176775,ctco_cukes,RunCukesRabbmitMQTest.name,"    @Test
    public void name() throws Exception {
        System.out.println(""aaaa"");
    }
",non-flaky,5
77668,pholser_junit-quickcheck,OffsetTimePropertyParameterTypesTest.shouldHold,"    @Test public void missingMin() {
        @Property public void shouldHold(
            @InRange(
",non-flaky,5
30933,camunda-cloud_zeebe,ElasticsearchExporterJobRecordIT.shouldExportJobBatchRecordWithOverlappingCustomHeaders,"  @Test
  public void shouldExportJobBatchRecordWithOverlappingCustomHeaders() {
    // when
    exporterBrokerRule.deployProcess(
        Bpmn.createExecutableProcess(""process"")
            .startEvent()
            .serviceTask(
                ""task"",
                t -> t.zeebeJobType(""test"").zeebeTaskHeader(""x"", ""1"").zeebeTaskHeader(""x.y"", ""2""))
            .endEvent()
            .done(),
        ""process.bpmn"");

    final var processInstanceKey = exporterBrokerRule.createProcessInstance(""process"", Map.of());

    await(""index templates need to be created"").untilAsserted(this::assertIndexSettings);
    final var jobCreated =
        RecordingExporter.jobRecords(JobIntent.CREATED)
            .withProcessInstanceKey(processInstanceKey)
            .getFirst();

    jobWorker =
        exporterBrokerRule.createJobWorker(
            ""test"", ((client, job) -> client.newCompleteCommand(job.getKey()).send()));

    // then
    final var jobBatchActivated =
        RecordingExporter.jobBatchRecords(JobBatchIntent.ACTIVATED).withType(""test"").getFirst();

    assertThat(jobBatchActivated.getValue().getJobKeys()).contains(jobCreated.getKey());
    assertRecordExported(jobBatchActivated);
  }
",non-flaky,5
112737,hwang-pku_ormlite-core,DatabaseConnectionProxyTest.testUpdate,"	@Test
	public void testUpdate() throws Exception {
		DatabaseConnection conn = createMock(DatabaseConnection.class);
		String statement = ""insert bar"";
		int result = 13212321;
		expect(conn.update(statement, null, null)).andReturn(result);
		conn.close();
		DatabaseConnectionProxy proxy = new DatabaseConnectionProxy(conn);
		replay(conn);
		assertEquals(result, proxy.update(statement, null, null));
		proxy.close();
		verify(conn);
	}
",non-flaky,5
321,apache_hadoop,TestNfs3Utils.testGetAccessRightsForUserGroup,"  @Test
  public void testGetAccessRightsForUserGroup() throws IOException {
    Nfs3FileAttributes attr = Mockito.mock(Nfs3FileAttributes.class);
    Mockito.when(attr.getUid()).thenReturn(2);
    Mockito.when(attr.getGid()).thenReturn(3);
    Mockito.when(attr.getMode()).thenReturn(448); // 700
    Mockito.when(attr.getType()).thenReturn(NfsFileType.NFSREG.toValue());
    assertEquals(""No access should be allowed as UID does not match attribute over mode 700"",
      0, Nfs3Utils.getAccessRightsForUserGroup(3, 3, null, attr));
    Mockito.when(attr.getUid()).thenReturn(2);
    Mockito.when(attr.getGid()).thenReturn(3);
    Mockito.when(attr.getMode()).thenReturn(56); // 070
    Mockito.when(attr.getType()).thenReturn(NfsFileType.NFSREG.toValue());
    assertEquals(""No access should be allowed as GID does not match attribute over mode 070"",
      0, Nfs3Utils.getAccessRightsForUserGroup(2, 4, null, attr));
    Mockito.when(attr.getUid()).thenReturn(2);
    Mockito.when(attr.getGid()).thenReturn(3);
    Mockito.when(attr.getMode()).thenReturn(7); // 007
    Mockito.when(attr.getType()).thenReturn(NfsFileType.NFSREG.toValue());
    assertEquals(""Access should be allowed as mode is 007 and UID/GID do not match"",
      61 /* RWX */, Nfs3Utils.getAccessRightsForUserGroup(1, 4, new int[] {5, 6}, attr));
    Mockito.when(attr.getUid()).thenReturn(2);
    Mockito.when(attr.getGid()).thenReturn(10);
    Mockito.when(attr.getMode()).thenReturn(288); // 440
    Mockito.when(attr.getType()).thenReturn(NfsFileType.NFSREG.toValue());
    assertEquals(""Access should be allowed as mode is 440 and Aux GID does match"",
      1 /* R */, Nfs3Utils.getAccessRightsForUserGroup(3, 4, new int[] {5, 16, 10}, attr));
    Mockito.when(attr.getUid()).thenReturn(2);
    Mockito.when(attr.getGid()).thenReturn(10);
    Mockito.when(attr.getMode()).thenReturn(448); // 700
    Mockito.when(attr.getType()).thenReturn(NfsFileType.NFSDIR.toValue());
    assertEquals(""Access should be allowed for dir as mode is 700 and UID does match"",
      31 /* Lookup */, Nfs3Utils.getAccessRightsForUserGroup(2, 4, new int[] {5, 16, 10}, attr));
    assertEquals(""No access should be allowed for dir as mode is 700 even though GID does match"",
      0, Nfs3Utils.getAccessRightsForUserGroup(3, 10, new int[] {5, 16, 4}, attr));
    assertEquals(""No access should be allowed for dir as mode is 700 even though AuxGID does match"",
      0, Nfs3Utils.getAccessRightsForUserGroup(3, 20, new int[] {5, 10}, attr));
    
    Mockito.when(attr.getUid()).thenReturn(2);
    Mockito.when(attr.getGid()).thenReturn(10);
    Mockito.when(attr.getMode()).thenReturn(457); // 711
    Mockito.when(attr.getType()).thenReturn(NfsFileType.NFSDIR.toValue());
    assertEquals(""Access should be allowed for dir as mode is 711 and GID matches"",
        2 /* Lookup */, Nfs3Utils.getAccessRightsForUserGroup(3, 10, new int[] {5, 16, 11}, attr));
  }
",non-flaky,5
177229,line_armeria,HealthCheckedEndpointGroupTest.updateCandidates,"    @Test
        public void updateCandidates(List<Endpoint> candidates) {
            this.candidates = candidates;
            selectedCandidates = ImmutableList.copyOf(candidates);
        }
",non-flaky,5
70850,apache_kafka,WorkerSourceTaskTest.testHeadersWithCustomConverter,"    @Test
    public void testHeadersWithCustomConverter() throws Exception {
        StringConverter stringConverter = new StringConverter();
        TestConverterWithHeaders testConverter = new TestConverterWithHeaders();

        createWorkerTask(TargetState.STARTED, stringConverter, testConverter, stringConverter);

        List<SourceRecord> records = new ArrayList<>();

        String stringA = ""ÃrvÃ­ztÅ±rÅ tÃ¼kÃ¶rfÃºrÃ³gÃ©p"";
        org.apache.kafka.connect.header.Headers headersA = new ConnectHeaders();
        String encodingA = ""latin2"";
        headersA.addString(""encoding"", encodingA);

        records.add(new SourceRecord(PARTITION, OFFSET, ""topic"", null, Schema.STRING_SCHEMA, ""a"", Schema.STRING_SCHEMA, stringA, null, headersA));

        String stringB = ""Ð¢ÐµÑÑÐ¾Ð²Ð¾Ðµ ÑÐ¾Ð¾Ð±ÑÐµÐ½Ð¸Ðµ"";
        org.apache.kafka.connect.header.Headers headersB = new ConnectHeaders();
        String encodingB = ""koi8_r"";
        headersB.addString(""encoding"", encodingB);

        records.add(new SourceRecord(PARTITION, OFFSET, ""topic"", null, Schema.STRING_SCHEMA, ""b"", Schema.STRING_SCHEMA, stringB, null, headersB));

        Capture<ProducerRecord<byte[], byte[]>> sentRecordA = expectSendRecord(false, false, true, true, false, null);
        Capture<ProducerRecord<byte[], byte[]>> sentRecordB = expectSendRecord(false, false, true, true, false, null);

        PowerMock.replayAll();

        Whitebox.setInternalState(workerTask, ""toSend"", records);
        Whitebox.invokeMethod(workerTask, ""sendRecords"");

        assertEquals(ByteBuffer.wrap(""a"".getBytes()), ByteBuffer.wrap(sentRecordA.getValue().key()));
        assertEquals(
            ByteBuffer.wrap(stringA.getBytes(encodingA)),
            ByteBuffer.wrap(sentRecordA.getValue().value())
        );
        assertEquals(encodingA, new String(sentRecordA.getValue().headers().lastHeader(""encoding"").value()));

        assertEquals(ByteBuffer.wrap(""b"".getBytes()), ByteBuffer.wrap(sentRecordB.getValue().key()));
        assertEquals(
            ByteBuffer.wrap(stringB.getBytes(encodingB)),
            ByteBuffer.wrap(sentRecordB.getValue().value())
        );
        assertEquals(encodingB, new String(sentRecordB.getValue().headers().lastHeader(""encoding"").value()));

        PowerMock.verifyAll();
    }
",non-flaky,5
156118,soot-oss_soot,AbstractLambdaMetaFactoryCGTest.staticMethodRef,"  @Test
  public void staticMethodRef() {
    String testClass = ""soot.lambdaMetaFactory.StaticMethodRef"";

    final SootMethod target
        = prepareTarget(methodSigFromComponents(testClass, TEST_METHOD_RET, TEST_METHOD_NAME), testClass);

    final CallGraph cg = Scene.v().getCallGraph();

    final String referencedMethodName = ""staticMethod"";

    final String metaFactoryClass = getMetaFactoryNameMethodRef(testClass, referencedMethodName);

    final SootMethod bootstrap
        = Scene.v().getMethod(methodSigFromComponents(metaFactoryClass, ""java.util.function.Supplier"", ""bootstrap$""));
    final SootMethod metaFactoryConstructor
        = Scene.v().getMethod(methodSigFromComponents(metaFactoryClass, ""void"", ""<init>""));
    final SootMethod get = Scene.v().getMethod(methodSigFromComponents(metaFactoryClass, ""java.lang.Object"", ""get""));
    final SootMethod referencedMethod = Scene.v().getMethod(methodSigFromComponents(testClass, ""int"", referencedMethodName));

    final List<Edge> edgesFromTarget = newArrayList(cg.edgesOutOf(target));

    assertTrue(""There should be an edge from main to the bootstrap method of the synthetic LambdaMetaFactory"",
        edgesFromTarget.stream().anyMatch(e -> e.tgt().equals(bootstrap) && e.isStatic()));
    assertTrue(""There should be an edge to the constructor of the LambdaMetaFactory in the bootstrap method"",
        newArrayList(cg.edgesOutOf(bootstrap)).stream()
            .anyMatch(e -> e.tgt().equals(metaFactoryConstructor) && e.isSpecial()));
    assertTrue(
        ""There should be an interface invocation on the synthetic LambdaMetaFactory's implementation of the functional interface in the main method"",
        edgesFromTarget.stream().anyMatch(e -> e.getTgt().equals(get) && e.kind() == Kind.INTERFACE));
    assertTrue(""There should be a static call to the referenced method"",
        newArrayList(cg.edgesOutOf(get)).stream().anyMatch(e -> e.getTgt().equals(referencedMethod) && e.isStatic()));

    validateAllBodies(target.getDeclaringClass(), bootstrap.getDeclaringClass());
  }
",non-flaky,5
137075,spring-projects_spring-framework,AbstractAnnotationMetadataTests.verifyEquals,"	@Test
	public void verifyEquals() throws Exception {
		AnnotationMetadata testClass1 = get(TestClass.class);
		AnnotationMetadata testClass2 = get(TestClass.class);
		AnnotationMetadata testMemberClass1 = get(TestMemberClass.class);
		AnnotationMetadata testMemberClass2 = get(TestMemberClass.class);

		assertThat(testClass1.equals(null)).isFalse();

		assertThat(testClass1.equals(testClass1)).isTrue();
		assertThat(testClass2.equals(testClass2)).isTrue();
		assertThat(testClass1.equals(testClass2)).isTrue();
		assertThat(testClass2.equals(testClass1)).isTrue();

		assertThat(testMemberClass1.equals(testMemberClass1)).isTrue();
		assertThat(testMemberClass2.equals(testMemberClass2)).isTrue();
		assertThat(testMemberClass1.equals(testMemberClass2)).isTrue();
		assertThat(testMemberClass2.equals(testMemberClass1)).isTrue();

		assertThat(testClass1.equals(testMemberClass1)).isFalse();
		assertThat(testMemberClass1.equals(testClass1)).isFalse();
	}
",non-flaky,5
175754,GoogleCloudPlatform_google-cloud-eclipse,AppEngineDeployPreferencesPanelTest.testRefreshProjectsForSelectedCredential_switchAccounts,"  @Test
  public void testRefreshProjectsForSelectedCredential_switchAccounts()
      throws ProjectRepositoryException, InterruptedException {
    when(loginService.getAccounts()).thenReturn(twoAccountSet);
    initializeProjectRepository();

    deployPanel = createPanel(false /* requireValues */);
    Table projectTable = getProjectSelector().getViewer().getTable();
    assertNull(deployPanel.latestGcpProjectQueryJob);
    assertThat(projectTable.getItemCount(), is(0));

    selectAccount(account1);
    Job jobForAccount1 = deployPanel.latestGcpProjectQueryJob;
    jobForAccount1.join();
    assertThat(projectTable.getItemCount(), is(2));

    selectAccount(account2);
    assertNotEquals(jobForAccount1, deployPanel.latestGcpProjectQueryJob);
    deployPanel.latestGcpProjectQueryJob.join();
    assertThat(projectTable.getItemCount(), is(1));
    assertThat(((GcpProject) projectTable.getItem(0).getData()).getId(), is(""projectId2""));
  }
",non-flaky,5
113752,salesforce_reactive-grpc,ReactorConsumerStreamObserverTest.onNextDelegates,"    @Test
    public void onNextDelegates() {
        ClientCallStreamObserver<Object> obs = mock(ClientCallStreamObserver.class);
        ReactorConsumerStreamObserver rxObs = new ReactorConsumerStreamObserver();
        Subscriber<Object> sub = mock(Subscriber.class);

        rxObs.beforeStart(obs);
        rxObs.getRxConsumer().subscribe(sub);

        Object obj = new Object();
        StepVerifier.create(rxObs.getRxConsumer())
                .then(() -> rxObs.onNext(obj))
                .expectNext(obj)
                .then(rxObs::onCompleted)
                .expectComplete()
                .verify(Duration.ofSeconds(3));
    }
",non-flaky,5
113782,salesforce_reactive-grpc,ReactiveBackpressureChunkerTest.cancelPropagatesUp,"    @Test
    public void cancelPropagatesUp() {
        int chunkSize = 3;
        ReactiveBackpressureChunker<Object> chunker = new ReactiveBackpressureChunker<Object>(chunkSize);
        UpstreamSubscription upstreamSubscription = new UpstreamSubscription();
        DownstreamSubscriber downstreamSubscriber = new DownstreamSubscriber();

        Subscriber<Object> chunkSubscriber = chunker.apply(downstreamSubscriber);
        chunkSubscriber.onSubscribe(upstreamSubscription);

        downstreamSubscriber.upstreamSubscription.cancel();
        assertThat(upstreamSubscription.isCancelled).isTrue();
    }
",non-flaky,5
76705,quarkusio_quarkus,MongoDbRestDataPanacheIT.testDevServicesProperties,"    @Test
    public void testDevServicesProperties() {
        assertThat(context.devServicesProperties()).hasSize(1).containsKey(""quarkus.mongodb.connection-string"");
    }
",non-flaky,5
76706,quarkusio_quarkus,CoreReflectionInGraalITCase.testFieldAndGetterReflectionOnEntityFromServlet,"    @Test
    public void testFieldAndGetterReflectionOnEntityFromServlet() throws Exception {
        RestAssured.when().get(""/core/reflection"").then()
                .body(is(""OK""));
    }
",non-flaky,5
99744,apache_cassandra,FQLCompareTest.endToEndQueryFailures,"    @Test
    public void endToEndQueryFailures() throws IOException
    {
        List<String> targetHosts = Lists.newArrayList(""hosta"", ""hostb"");
        File tmpDir = Files.createTempDirectory(""testresulthandler"").toFile();
        File queryDir = Files.createTempDirectory(""queries"").toFile();
        List<File> resultPaths = generateResultSets(targetHosts, tmpDir, queryDir, true,true);
        Compare.compare(queryDir.toString(), resultPaths.stream().map(File::toString).collect(Collectors.toList()));
    }
",non-flaky,5
106596,Alluxio_alluxio,ContainerAllocatorTest.oneContainerPerHostFullAllocation,"  @Test(timeout = 10000)
  public void oneContainerPerHostFullAllocation() throws Exception {
    int numHosts = 10;
    int maxContainersPerHost = 1;
    testFullAllocation(numHosts, maxContainersPerHost);
  }
",non-flaky,5
97983,ReactiveX_RxJava,ObservableTests.run,"    @Test
    public void testCache() throws InterruptedException {
        final AtomicInteger counter = new AtomicInteger();
        Observable<String> o = Observable.create(new OnSubscribeFunc<String>() {

            @Override
            public Subscription onSubscribe(final Observer<? super String> observer) {
                final BooleanSubscription subscription = new BooleanSubscription();
                new Thread(new Runnable() {

                    @Override
                    public void run() {
                        counter.incrementAndGet();
                        observer.onNext(""one"");
                        observer.onCompleted();
                    }
",non-flaky,5
94774,ktuukkan_marine-api,AISMessage24ParserTest.getStern,"    @Test
    public void getStern() throws Exception {
        assertEquals(4, partB.getStern());
    }
",non-flaky,5
156063,jReddit_jReddit,RedditOAuthAgentTest.testToken,"    @Test
    public void testToken() throws RedditOAuthException, OAuthSystemException, OAuthProblemException {
        
        // Captor for the request that is executed
        ArgumentCaptor<OAuthClientRequest> clientCaptor = ArgumentCaptor.forClass(OAuthClientRequest.class);
        
        when(mockOAuthClient.accessToken(any(OAuthClientRequest.class))).thenReturn(jsonToken);
        
        // Run subject
        RedditToken token = subject.token(code);
        
        // Verify and capture
        verify(mockOAuthClient).accessToken(clientCaptor.capture());
        
        OAuthClientRequest request = clientCaptor.getValue();
        
        assertNotNull(request.getHeader(""Authorization"")); // This is Base64 encoded
        assertEquals(request.getHeader(""User-Agent""), userAgent);
        
        assertEquals(accessToken, token.getAccessToken());
        assertEquals(refreshToken, token.getRefreshToken());
        assertEquals(tokenType, token.getTokenType());
        assertEquals(expiresIn, token.getExpirationSpan());
        assertTrue(token.hasScope(RedditScope.EDIT));
        assertTrue(token.hasScope(RedditScope.FLAIR));
        assertFalse(token.hasScope(RedditScope.PRIVATEMESSAGE));

    }
",non-flaky,5
162372,testcontainers_testcontainers-java,LazyFutureTest.testLazyness,"    @Test
    public void testLazyness() throws Exception {
        AtomicInteger counter = new AtomicInteger();

        Future<Integer> lazyFuture = new LazyFuture<Integer>() {
            @Override
            protected Integer resolve() {
                return counter.incrementAndGet();
            }
        };

        assertEquals(""No resolve() invocations before get()"", 0, counter.get());
        assertEquals(""get() call returns proper result"", 1, lazyFuture.get());
        assertEquals(""resolve() was called only once after single get() call"", 1, counter.get());

        counter.incrementAndGet();
        assertEquals(""result of resolve() must be cached"", 1, lazyFuture.get());
    }
",non-flaky,5
135021,undertow-io_undertow,HttpClientTestCase.testConnectionClose,"    @Test
    public void testConnectionClose() throws Exception {
        //
        final UndertowClient client = createClient();

        final CountDownLatch latch = new CountDownLatch(1);
        final ClientConnection connection = client.connect(ADDRESS, worker, DefaultServer.getBufferPool(), OptionMap.EMPTY).get();
        try {
            ClientRequest request = new ClientRequest().setPath(MESSAGE).setMethod(Methods.GET);
            request.getRequestHeaders().put(Headers.HOST, DefaultServer.getHostAddress());
            final List<ClientResponse> responses = new CopyOnWriteArrayList<>();
            request.getRequestHeaders().add(Headers.CONNECTION, Headers.CLOSE.toString());
            connection.sendRequest(request, createClientCallback(responses, latch));
            latch.await();
            final ClientResponse response = responses.iterator().next();
            Assert.assertEquals(message, response.getAttachment(RESPONSE_BODY));
            Assert.assertEquals(false, connection.isOpen());
        } finally {
            IoUtils.safeClose(connection);
        }

    }
",non-flaky,5
97708,vojtechhabarta_typescript-generator,CustomTypeAliasesTest.testGeneric,"    @Test
    public void testGeneric() {
        final Settings settings = TestUtils.settings();
        settings.outputKind = TypeScriptOutputKind.module;
        settings.customTypeAliases = Collections.singletonMap(""Id<T>"", ""string"");
        settings.customTypeMappings = Collections.singletonMap(""cz.habarta.typescript.generator.CustomTypeAliasesTest$IdRepresentation<T>"", ""Id<T>"");
        final String output = new TypeScriptGenerator(settings).generateTypeScript(Input.from(MyEntityRepresentation.class));
        Assert.assertTrue(output.contains(""id: Id<MyEntityRepresentation>""));
        Assert.assertTrue(output.contains(""export type Id<T> = string""));
    }
",non-flaky,5
177964,aosp-mirror_platform_frameworks_support,FileProviderTest.testWriteFile,"    @Test
    public void testWriteFile() throws Exception {
        final File file = new File(mContext.getFilesDir(), TEST_FILE);
        final Uri uri = stageFileAndGetUri(file, TEST_DATA);

        assertContentsEquals(TEST_DATA, uri);

        final OutputStream out = mResolver.openOutputStream(uri);
        try {
            out.write(TEST_DATA_ALT);
        } finally {
            closeQuietly(out);
        }

        assertContentsEquals(TEST_DATA_ALT, uri);
    }
",non-flaky,5
100,androidx_androidx,playbackRate,"@Test
public void playbackRate() throws Exception {
    final int toleranceMs = 1000;
    Future<PlayerResult> setSurfaceFuture = mPlayer.setSurface(
    mActivity.getSurfaceHolder().getSurface());
    Future<PlayerResult> prepareFuture = mPlayer.prepare();
    assertFutureSuccess(setSurfaceFuture);
    assertFutureSuccess(prepareFuture);
    float[] rates = {0.25f, 0.5f, 1.0f, 2.0f};
    for (float playbackRate : rates) {
        Future<PlayerResult> seekFuture = mPlayer.seekTo(0, MediaPlayer.SEEK_PREVIOUS_SYNC);
        Thread.sleep(1000);
        int playTime = 4000;
        int privState = mPlayer.getPlayerState();
        Future<PlayerResult> setParamsFuture = mPlayer.setPlaybackParams(
        new PlaybackParams.Builder().setSpeed(playbackRate).build());
        assertFutureSuccess(seekFuture);
        assertFutureSuccess(setParamsFuture);
        assertEquals(""setPlaybackParams() should not change player state. ""
        + mPlayer.getPlayerState(), privState, mPlayer.getPlayerState());
        Future<PlayerResult> playFuture = mPlayer.play();
        Thread.sleep(playTime);
        PlaybackParams pbp = mPlayer.getPlaybackParams();
        assertEquals(playbackRate, pbp.getSpeed(), FLOAT_TOLERANCE);
        assertEquals(""The player should still be playing"",
        MediaPlayer.PLAYER_STATE_PLAYING, mPlayer.getPlayerState());
        long playedMediaDurationMs = mPlayer.getCurrentPosition();
        long expectedPosition = (long) (playTime * playbackRate);
        int diff = (int) Math.abs(playedMediaDurationMs - expectedPosition);
        if (diff > toleranceMs) {
            fail(""Media player had error in playback rate "" + playbackRate
            + "". expected position after playing "" + playTime
            + "" was "" + expectedPosition + "", but actually "" + playedMediaDurationMs);
        }
        assertFutureSuccess(playFuture);
        assertFutureSuccess(mPlayer.pause());
        pbp = mPlayer.getPlaybackParams();
        assertEquals(""pause() should not change the playback rate property."",
        playbackRate, pbp.getSpeed(), FLOAT_TOLERANCE);
    }
    mPlayer.reset();
}",async wait,0
112155,apache_shardingsphere-elasticjob,HostExceptionTest.assertGetCause,"    @Test
    public void assertGetCause() {
        IOException cause = new IOException();
        assertThat(new HostException(cause).getCause(), Is.<Throwable>is(cause));
    }
",non-flaky,5
94734,ktuukkan_marine-api,Longitude28Test.maxValueIsCorrect,"    @Test
    public void maxValueIsCorrect() {
        assertTrue(Longitude28.isCorrect(180*60*10000));
    }
",non-flaky,5
106578,Alluxio_alluxio,HdfsVersionValidationTaskTest.minorVersionConflict,"  @Test
  public void minorVersionConflict() throws Exception {
    PowerMockito.mockStatic(ShellUtils.class);
    String[] cmd = new String[]{""hadoop"", ""version""};
    // Alluxio defines a different minor version, which should not work
    BDDMockito.given(ShellUtils.execCommand(cmd)).willReturn(""Hadoop 2.6.2"");
    sConf.set(PropertyKey.UNDERFS_VERSION, ""2.6.3"");

    HdfsVersionValidationTask task = new HdfsVersionValidationTask(sConf);
    ValidationTaskResult result = task.validateImpl(ImmutableMap.of());
    assertEquals(ValidationUtils.State.FAILED, result.getState());
    assertThat(result.getResult(), containsString(
            ""Hadoop version 2.6.2 does not match alluxio.underfs.version=2.6.3""));
  }
",non-flaky,5
113740,salesforce_reactive-grpc,ContextPropagationIntegrationTest.ClientGetsContext,"    @Test
    public void ClientGetsContext() {
        ReactorGreeterGrpc.ReactorGreeterStub stub = ReactorGreeterGrpc.newReactorStub(channel);

        Mono<HelloResponse> test = worldReq.compose(stub::sayHello)
                .doOnSuccess(resp -> {
                    Context ctx = Context.current();
                    assertThat(ctxKey.get(ctx)).isEqualTo(""ClientGetsContext"");
                });

        StepVerifier.create(test.map(HelloResponse::getMessage))
                .expectNext(""Hello World"")
                .verifyComplete();
    }
",non-flaky,5
95657,togglz_togglz,TestFeatureManagerTest.shouldToggleIndividualFeature,"    @Test
    public void shouldToggleIndividualFeature() {

        // enable
        manager.enable(MyFeatures.ONE);
        assertTrue(manager.isActive(MyFeatures.ONE));

        // disable
        manager.disable(MyFeatures.ONE);
        assertFalse(manager.isActive(MyFeatures.ONE));

    }
",non-flaky,5
135036,undertow-io_undertow,CanonicalPathUtilsTestCase.testCanonicalization,"    @Test
    public void testCanonicalization() {

        //these strings should not be touched
        Assert.assertSame(""a/b/c"", CanonicalPathUtils.canonicalize(""a/b/c""));
        Assert.assertSame(""a/b/c/"", CanonicalPathUtils.canonicalize(""a/b/c/""));
        Assert.assertSame(""aaaaa"", CanonicalPathUtils.canonicalize(""aaaaa""));

        //these strings should result in the same string being output
        Assert.assertEquals(""a./b"", CanonicalPathUtils.canonicalize(""a./b""));
        Assert.assertEquals(""a./.b"", CanonicalPathUtils.canonicalize(""a./.b""));

        //removing double slash

        Assert.assertEquals(""a/b"", CanonicalPathUtils.canonicalize(""a//b""));
        Assert.assertEquals(""a/b"", CanonicalPathUtils.canonicalize(""a///b""));
        Assert.assertEquals(""a/b"", CanonicalPathUtils.canonicalize(""a////b""));

        //removing /./
        Assert.assertEquals(""a/b"", CanonicalPathUtils.canonicalize(""a/./b""));
        Assert.assertEquals(""a/b"", CanonicalPathUtils.canonicalize(""a/././b""));
        Assert.assertEquals(""a/b/c"", CanonicalPathUtils.canonicalize(""a/./b/./c""));
        Assert.assertEquals(""a/b"", CanonicalPathUtils.canonicalize(""a/./././b""));
        Assert.assertEquals(""a/b/"", CanonicalPathUtils.canonicalize(""a/./././b/./""));
        Assert.assertEquals(""a/b"", CanonicalPathUtils.canonicalize(""a/./././b/.""));

        //dealing with /../
        Assert.assertEquals(""/b"", CanonicalPathUtils.canonicalize(""/a/../b""));
        Assert.assertEquals(""/b"", CanonicalPathUtils.canonicalize(""/a/../c/../e/../b""));
        Assert.assertEquals(""/b"", CanonicalPathUtils.canonicalize(""/a/c/../../b""));
        Assert.assertEquals(""/"", CanonicalPathUtils.canonicalize(""/a/../..""));
        Assert.assertEquals(""/foo"", CanonicalPathUtils.canonicalize(""/a/../../foo""));

        //preserve (single) trailing /
        Assert.assertEquals(""/a/"", CanonicalPathUtils.canonicalize(""/a/""));
        Assert.assertEquals(""/"", CanonicalPathUtils.canonicalize(""/""));
        Assert.assertEquals(""/bbb/a"", CanonicalPathUtils.canonicalize(""/cc/../bbb/a/.""));
        Assert.assertEquals(""/aaa/bbb/"", CanonicalPathUtils.canonicalize(""/aaa/bbb//////""));
    }
",non-flaky,5
134983,undertow-io_undertow,SuspendResumeTestCase.testConnectionWaitsForMessageEnd,"    @Test
    public void testConnectionWaitsForMessageEnd() throws Exception {
        final CountDownLatch done = new CountDownLatch(1);
        final AtomicReference<String> message = new AtomicReference<>();
        WebSocketChannel channel = WebSocketClient.connectionBuilder(DefaultServer.getWorker(), DefaultServer.getBufferPool(), new URI(DefaultServer.getDefaultServerURL() + ""/""))
                .connect().get();
        channel.getReceiveSetter().set(new AbstractReceiveListener() {
            @Override
            protected void onFullTextMessage(WebSocketChannel channel, BufferedTextMessage msg) throws IOException {
                message.set(msg.getData());
                done.countDown();
            }

            @Override
            protected void onError(WebSocketChannel channel, Throwable error) {
                error.printStackTrace();
                message.set(""error"");
                done.countDown();
            }

            @Override
            protected void onFullCloseMessage(WebSocketChannel channel, BufferedBinaryMessage message) throws IOException {
                message.getData().free();
                done.countDown();
            }
        });
        channel.resumeReceives();
        Assert.assertTrue(channel.isOpen());
        WebSockets.sendText(""Hello World"", channel, null);
        Thread.sleep(500);
        serverContainer.pause(null);
        try {
            Assert.assertTrue(done.await(10, TimeUnit.SECONDS));
            Assert.assertEquals(""Hello World"", message.get());
        } finally {
            serverContainer.resume();
        }
    }
",non-flaky,5
175749,GoogleCloudPlatform_google-cloud-eclipse,AppEngineDeployPreferencesPanelTest.testProjectSavedInPreferencesSelected,"  @Test
  public void testProjectSavedInPreferencesSelected()
      throws ProjectRepositoryException, InterruptedException, BackingStoreException {
    IEclipsePreferences node =
        new ProjectScope(project).getNode(DeployPreferences.PREFERENCE_STORE_QUALIFIER);
    try {
      node.put(""project.id"", ""projectId1"");
      node.put(""account.email"", EMAIL_1);
      initializeProjectRepository();
      when(loginService.getAccounts()).thenReturn(twoAccountSet);
      deployPanel = createPanel(true /* requireValues */);
      deployPanel.latestGcpProjectQueryJob.join();

      ProjectSelector projectSelector = getProjectSelector();
      IStructuredSelection selection = projectSelector.getViewer().getStructuredSelection();
      assertThat(selection.size(), is(1));
      assertThat(((GcpProject) selection.getFirstElement()).getId(), is(""projectId1""));
    } finally {
      node.clear();
    }
  }
",non-flaky,5
156444,apache_commons-lang,DateUtilsFragmentTest.testDateFragmentInLargerUnitWithCalendar,"    @Test
    public void testDateFragmentInLargerUnitWithCalendar() {
        assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.DATE));
    }
",non-flaky,5
113999,apache_struts,StrutsJUnit4TestCaseTest.testExecuteActionAgainstCustomStrutsConfigFile,"    @Test
    public void testExecuteActionAgainstCustomStrutsConfigFile() throws Exception {
        String output = executeAction(""/test/testAction-2.action"");
        Assert.assertEquals(""Test-2"", output);
    }
",non-flaky,5
60941,apache_druid,RowBucketIterableTest.testCompleteData,"  @Test
  public void testCompleteData()
  {
    intervals = new ArrayList<>();
    intervals.add(INTERVAL_JAN_1_4);

    rows = new ArrayList<>();
    rows.add(JAN_1_M_10);
    rows.add(JAN_2_M_10);
    rows.add(JAN_3_M_10);
    rows.add(JAN_4_M_10);

    List<Row> expectedDay1 = Collections.singletonList(JAN_1_M_10);
    List<Row> expectedDay2 = Collections.singletonList(JAN_2_M_10);
    List<Row> expectedDay3 = Collections.singletonList(JAN_3_M_10);
    List<Row> expectedDay4 = Collections.singletonList(JAN_4_M_10);

    Sequence<Row> seq = Sequences.simple(rows);
    RowBucketIterable rbi = new RowBucketIterable(seq, intervals, ONE_DAY);
    Iterator<RowBucket> iter = rbi.iterator();

    RowBucket actual = iter.next();
    Assert.assertEquals(JAN_1, actual.getDateTime());
    Assert.assertEquals(expectedDay1, actual.getRows());

    actual = iter.next();
    Assert.assertEquals(JAN_2, actual.getDateTime());
    Assert.assertEquals(expectedDay2, actual.getRows());

    actual = iter.next();
    Assert.assertEquals(JAN_3, actual.getDateTime());
    Assert.assertEquals(expectedDay3, actual.getRows());

    actual = iter.next();
    Assert.assertEquals(JAN_4, actual.getDateTime());
    Assert.assertEquals(expectedDay4, actual.getRows());
  }
",non-flaky,5
91464,strapdata_elassandra,PublishClusterStateActionTests.setAsMaster,"@TestLogging(""org.elasticsearch.discovery.zen.publish:TRACE"")
        public MockNode setAsMaster() {
            this.clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())
                .masterNodeId(discoveryNode.getId())).build();
            return this;
        }
",non-flaky,5
133986,CorfuDB_CorfuDB,ClusterHealthTest.testLayoutServersHealth,"    @Test
    public void testLayoutServersHealth(){
        Layout layout = layoutUtil.getLayout(servers);
        ClusterStatus status = clusterHealth.getLayoutServersClusterHealth(
                layout, layout.getAllActiveServers()
        );
        assertThat(status).isEqualTo(ClusterStatus.STABLE);

        layout.setUnresponsiveServers(Collections.singletonList(server3));
        status = clusterHealth.getLayoutServersClusterHealth(
                layout, layout.getAllActiveServers()
        );
        assertThat(status).isEqualTo(ClusterStatus.DEGRADED);

        layout.setUnresponsiveServers(Arrays.asList(server2, server3));
        status = clusterHealth.getLayoutServersClusterHealth(
                layout, layout.getAllActiveServers()
        );
        assertThat(status).isEqualTo(ClusterStatus.UNAVAILABLE);
    }
",non-flaky,5
77634,pholser_junit-quickcheck,PeriodPropertyParameterTypesTest.shouldHold,"    @Test public void malformedMax() {
        @Property public void shouldHold(
            @InRange(min = ""P1Y2M3D"", max = ""*&@^#%$"") Period p) {
        }
",non-flaky,5
76767,quarkusio_quarkus,PackageIT.testCustomPackaging,"    @Test
    public void testCustomPackaging()
            throws Exception {
        testDir = getTargetDir(""projects/custom-packaging-plugin"");

        running = new RunningInvoker(testDir, false);
        MavenProcessInvocationResult result = running.execute(Collections.singletonList(""install""),
                Collections.emptyMap());
        assertThat(result.getProcess().waitFor()).isEqualTo(0);

        testDir = getTargetDir(""projects/custom-packaging-app"");

        running = new RunningInvoker(testDir, false);
        result = running.execute(Collections.singletonList(""package""),
                Collections.emptyMap());
        assertThat(result.getProcess().waitFor()).isEqualTo(0);

        final File targetDir = getTargetDir();
        final File[] files = targetDir.listFiles(f -> f.getName().endsWith("".jar""));
        Set<String> jarNames = new HashSet<>(files.length);
        for (File f : files) {
            jarNames.add(f.getName());
        }

        final Path runnerJar = getTargetDir().toPath().resolve(""quarkus-app"").resolve(""quarkus-run.jar"");
        Assertions.assertTrue(Files.exists(runnerJar), ""Runner jar "" + runnerJar + "" is missing"");
        assertZipEntriesCanBeOpenedAndClosed(runnerJar);
    }
",non-flaky,5
19495,eclipse_xtext-core,JavaIoFileSystemAccessTest.testURI,"	@Test
	public void testURI() throws Exception {
		JavaIoFileSystemAccess fileSystemAccess = new JavaIoFileSystemAccess();
		fileSystemAccess.setOutputPath(""testOutput"", ""/testDir"");
		URI uri = fileSystemAccess.getURI(""testFile"", ""testOutput"");
		String expectedUri = new File(new File(File.separator + ""testDir""), ""testFile"").toURI().toString();
		assertEquals(expectedUri, uri.toString());
	}
",non-flaky,5
122588,vespa-engine_vespa,FileFinderTest.all_files_recursive_with_prune_absolute,"        @Test
        public void all_files_recursive_with_prune_absolute() {
            assertFileHelper(FileFinder.files(testRoot()).prune(testRoot().resolve(""test/subdir-1"")),

                    of(""file-1.json"", ""test.json"", ""test.txt"", ""test/file.txt"", ""test/data.json""),
                    of(""test"", ""test/subdir-1"", ""test/subdir-1/test"", ""test/subdir-2""));
        }
",non-flaky,5
86055,graylog2_graylog2-server,NotificationGracePeriodServiceTest.differentNotification,"    @Test
    public void differentNotification() {
        final NotificationGracePeriodService notificationGracePeriodService = new NotificationGracePeriodService();

        when(settings.gracePeriodMs()).thenReturn(10L);
        when(definition.notificationSettings()).thenReturn(settings);
        when(definition.id()).thenReturn(""1234"");

        final Event event = new TestEvent();
        event.setKeyTuple(ImmutableList.of(""testkey""));
        final Event event2 = new TestEvent();
        event2.setKeyTuple(ImmutableList.of(""testkey""));
        event2.setEventTimestamp(event.getEventTimestamp().plus(1L));
        assertThat(notificationGracePeriodService.inGracePeriod(definition, ""5678"", event)).isFalse();
        assertThat(notificationGracePeriodService.inGracePeriod(definition, ""4242"", event2)).isFalse();
    }
",non-flaky,5
106640,Alluxio_alluxio,AlluxioFuseFileSystemTest.chownWithoutValidUid,"  @Test
  public void chownWithoutValidUid() throws Exception {
    String userName = System.getProperty(""user.name"");
    long uid = AlluxioFuseFileSystem.ID_NOT_SET_VALUE;
    long gid = AlluxioFuseUtils.getGid(userName);
    mFuseFs.chown(""/foo/bar"", uid, gid);

    String groupName = AlluxioFuseUtils.getGroupName(userName);
    AlluxioURI expectedPath = BASE_EXPECTED_URI.join(""/foo/bar"");
    SetAttributePOptions options = SetAttributePOptions.newBuilder().setGroup(groupName).build();
    verify(mFileSystem).setAttribute(expectedPath, options);

    uid = AlluxioFuseFileSystem.ID_NOT_SET_VALUE_UNSIGNED;
    mFuseFs.chown(""/foo/bar"", uid, gid);
    verify(mFileSystem, times(2)).setAttribute(expectedPath, options);
  }
",non-flaky,5
86078,graylog2_graylog2-server,PivotAggregationSearchTest.testDateRangeBucketWithCatchUpTumblingWindows,"    @Test
    public void testDateRangeBucketWithCatchUpTumblingWindows() {
        final long processingWindowSize = Duration.standardSeconds(60).getMillis();
        final long processingHopSize = Duration.standardSeconds(60).getMillis();
        final DateTime now = DateTime.now(DateTimeZone.UTC);
        final DateTime from = now;
        // We are 3 full processingWindows behind
        final DateTime to = now.plusMillis((int) processingWindowSize * 3);
        TimeRange timeRange = AbsoluteRange.create(from, to);
        final DateRangeBucket rangeBucket = PivotAggregationSearch.buildDateRangeBuckets(timeRange, processingWindowSize, processingHopSize);

        assertThat(rangeBucket.ranges()).containsExactly(
                DateRange.create(from.plusMillis((int) (processingWindowSize * 0)), from.plusMillis((int) (processingWindowSize * 1))),
                DateRange.create(from.plusMillis((int) (processingWindowSize * 1)), from.plusMillis((int) (processingWindowSize * 2))),
                DateRange.create(from.plusMillis((int) (processingWindowSize * 2)), from.plusMillis((int) (processingWindowSize * 3)))
        );
    }
",non-flaky,5
77662,pholser_junit-quickcheck,InstantPropertyParameterTypesTest.shouldHold,"    @Test public void backwardsRange() {
        @Property public void shouldHold(
            @InRange(
",non-flaky,5
175747,GoogleCloudPlatform_google-cloud-eclipse,AppEngineDeployPreferencesPanelTest.testValidationMessageWhenSignedIn,"  @Test
  public void testValidationMessageWhenSignedIn() {
    // Return two accounts because the account selector will auto-select if there exists only one.
    when(loginService.getAccounts()).thenReturn(twoAccountSet);

    deployPanel = createPanel(true /* requireValues */);
    IStatus status = getAccountSelectorValidationStatus();
    assertThat(status.getMessage(), is(""Select an account.""));
  }
",non-flaky,5
98096,vert-x3_vertx-mongo-client,ParsingSSLOptionsTest.testValidCaPemCertificate,"  @Test
  public void testValidCaPemCertificate() throws IOException {
    // given
    final File tmpFile = tmpFolder.newFile(""validCa.pem"");
    try (final FileWriter tmpWriter = new FileWriter(tmpFile)) {
      tmpWriter.write(""-----BEGIN CERTIFICATE-----\n"" +
        ""MIICljCCAfigAwIBAgIJAK0oe+f4DaojMAoGCCqGSM49BAMEMFkxCzAJBgNVBAYT\n"" +
        ""AkFUMQ8wDQYDVQQIDAZWaWVubmExDjAMBgNVBAoMBU5vRW52MSkwJwYDVQQLDCBO\n"" +
        ""b0VudiBSb290IENlcnRpZmljYXRlIEF1dGhvcml0eTAeFw0xNjEwMjcxNTAwNTFa\n"" +
        ""Fw00NjEwMjAxNTAwNTFaMFkxCzAJBgNVBAYTAkFUMQ8wDQYDVQQIDAZWaWVubmEx\n"" +
        ""DjAMBgNVBAoMBU5vRW52MSkwJwYDVQQLDCBOb0VudiBSb290IENlcnRpZmljYXRl\n"" +
        ""IEF1dGhvcml0eTCBmzAQBgcqhkjOPQIBBgUrgQQAIwOBhgAEAHpsMQth12N0d+aE\n"" +
        ""FIFRd8in4MTYZNSQEyQ4fuPDNq0Zb+4TXpUmedLZQJKkAQxorak8ESC/tXuQJDUL\n"" +
        ""OoKa+R6NAT4EKR1aaVVd7clC9rfGqVwGYslppycy9zsN6O4XLUiripamQF78FzRF\n"" +
        ""8wRZvkwYhzud+jpV6shgEMw3zmcwDSYKo2YwZDAdBgNVHQ4EFgQUD96n//91CReu\n"" +
        ""Cz1K0qics6aNFV0wHwYDVR0jBBgwFoAUD96n//91CReuCz1K0qics6aNFV0wEgYD\n"" +
        ""VR0TAQH/BAgwBgEB/wIBATAOBgNVHQ8BAf8EBAMCAYYwCgYIKoZIzj0EAwQDgYsA\n"" +
        ""MIGHAkFOxsApSB7fn8ZnYG/EUscn/uAkjxHsvdEkPKCC+XYCKMssW4YP2kR6gZjo\n"" +
        ""J8vaOAJZwNevBe/R9J8zMvsAWRJmWgJCAKLedGLnBuJOK9jjnKBwbVm5OIQfApMA\n"" +
        ""I2mJVnNXvS12w4DTZlP0K1t63WxsykBBTOIVXnYdPkdZvvnoAIcfA7iM\n"" +
        ""-----END CERTIFICATE-----"");
    }
    final JsonObject withSSLAndCaPath = new JsonObject()
      .put(""ssl"", true)
      .put(""caPath"", tmpFile.getAbsolutePath());

    // when
    final SslSettings sslSettings = new MongoClientOptionsParser(vertx, withSSLAndCaPath)
      .settings()
      .getSslSettings();

    // then
    assertNotNull(sslSettings.getContext());
  }
",non-flaky,5
70796,apache_kafka,PluginUtilsTest.testThirdPartyClasses,"    @Test
    public void testThirdPartyClasses() {
        assertFalse(PluginUtils.shouldLoadInIsolation(""org.slf4j.""));
        assertFalse(PluginUtils.shouldLoadInIsolation(""org.slf4j.LoggerFactory""));
    }
",non-flaky,5
91486,strapdata_elassandra,RemoteClusterConnectionTests.run,"    @TestLogging(""_root:DEBUG, org.elasticsearch.transport:TRACE"")
    public void testCloseWhileConcurrentlyConnecting() throws IOException, InterruptedException, BrokenBarrierException {
        List<DiscoveryNode> knownNodes = new CopyOnWriteArrayList<>();
        try (MockTransportService seedTransport = startTransport(""seed_node"", knownNodes, Version.CURRENT);
             MockTransportService seedTransport1 = startTransport(""seed_node_1"", knownNodes, Version.CURRENT);
             MockTransportService discoverableTransport = startTransport(""discoverable_node"", knownNodes, Version.CURRENT)) {
            DiscoveryNode seedNode = seedTransport.getLocalDiscoNode();
            DiscoveryNode seedNode1 = seedTransport1.getLocalDiscoNode();
            knownNodes.add(seedTransport.getLocalDiscoNode());
            knownNodes.add(discoverableTransport.getLocalDiscoNode());
            knownNodes.add(seedTransport1.getLocalDiscoNode());
            Collections.shuffle(knownNodes, random());
            List<Supplier<DiscoveryNode>> seedNodes = Arrays.asList(() -> seedNode1, () -> seedNode);
            Collections.shuffle(seedNodes, random());

            try (MockTransportService service = MockTransportService.createNewService(Settings.EMPTY, Version.CURRENT, threadPool, null)) {
                service.start();
                service.acceptIncomingRequests();
                try (RemoteClusterConnection connection = new RemoteClusterConnection(Settings.EMPTY, ""test-cluster"",
                    seedNodes, service, service.getConnectionManager(), Integer.MAX_VALUE, n -> true)) {
                    int numThreads = randomIntBetween(4, 10);
                    Thread[] threads = new Thread[numThreads];
                    CyclicBarrier barrier = new CyclicBarrier(numThreads + 1);
                    for (int i = 0; i < threads.length; i++) {
                        final int numConnectionAttempts = randomIntBetween(10, 100);
                        threads[i] = new Thread() {
                            @Override
                            public void run() {
                                try {
                                    barrier.await();
                                    CountDownLatch latch = new CountDownLatch(numConnectionAttempts);
                                    for (int i = 0; i < numConnectionAttempts; i++) {
                                        AtomicReference<Exception> executed = new AtomicReference<>();
                                        ActionListener<Void> listener = ActionListener.wrap(
                                            x -> {
                                                if (executed.compareAndSet(null, new RuntimeException())) {
                                                    latch.countDown();
                                                } else {
                                                    throw new AssertionError(""shit's been called twice"", executed.get());
                                                }
                                            },
                                            x -> {
                                                if (executed.compareAndSet(null, x)) {
                                                    latch.countDown();
                                                } else {
                                                    final String message = x.getMessage();
                                                    if ((executed.get().getClass() == x.getClass()
                                                        && ""operation was cancelled reason [connect handler is closed]"".equals(message)
                                                        && message.equals(executed.get().getMessage())) == false) {
                                                        // we do cancel the operation and that means that if timing allows it, the caller
                                                        // of a blocking call as well as the handler will get the exception from the
                                                        // ExecutionCancelledException concurrently. unless that is the case we fail
                                                        // if we get called more than once!
                                                        AssertionError assertionError = new AssertionError(""shit's been called twice"", x);
                                                        assertionError.addSuppressed(executed.get());
                                                        throw assertionError;
                                                    }
                                                }
                                                if (x instanceof RejectedExecutionException || x instanceof AlreadyClosedException
                                                    || x instanceof CancellableThreads.ExecutionCancelledException) {
                                                    // that's fine
                                                } else {
                                                    throw new AssertionError(x);
                                                }
                                            });
                                        try {
                                            connection.updateSeedNodes(null, seedNodes, listener);
                                        } catch (Exception e) {
                                            // it's ok if we're shutting down
                                            assertThat(e.getMessage(), containsString(""threadcontext is already closed""));
                                            latch.countDown();
                                        }
                                    }
                                    latch.await();
                                } catch (Exception ex) {
                                    throw new AssertionError(ex);
                                }
                            }
",non-flaky,5
113780,salesforce_reactive-grpc,ReactiveBackpressureChunkerTest.completePropagatesDown,"    @Test
    public void completePropagatesDown() {
        int chunkSize = 3;
        ReactiveBackpressureChunker<Object> chunker = new ReactiveBackpressureChunker<Object>(chunkSize);
        UpstreamSubscription upstreamSubscription = new UpstreamSubscription();
        DownstreamSubscriber downstreamSubscriber = new DownstreamSubscriber();

        Subscriber<Object> chunkSubscriber = chunker.apply(downstreamSubscriber);
        chunkSubscriber.onSubscribe(upstreamSubscription);

        chunkSubscriber.onComplete();
        assertThat(downstreamSubscriber.isComplete).isTrue();
    }
",non-flaky,5
137121,spring-projects_spring-framework,AbstractMethodMetadataTests.isAbstractWhenNotAbstractReturnsFalse,"	@Test
	public void isAbstractWhenNotAbstractReturnsFalse() {
		assertThat(getTagged(WithMethod.class).isAbstract()).isFalse();
	}
",non-flaky,5
94720,ktuukkan_marine-api,SpeedOverGroundTest.maxValueIsCorrect,"    @Test
    public void maxValueIsCorrect() {
        assertTrue(SpeedOverGround.isCorrect(1022));
    }
",non-flaky,5
70800,apache_kafka,PluginUtilsTest.testConnectorClientConfigOverridePolicy,"    @Test
    public void testConnectorClientConfigOverridePolicy() {
        assertFalse(PluginUtils.shouldLoadInIsolation(
                ""org.apache.kafka.connect.connector.policy.ConnectorClientConfigOverridePolicy"")
        );
        assertTrue(PluginUtils.shouldLoadInIsolation(
                ""org.apache.kafka.connect.connector.policy.AbstractConnectorClientConfigOverridePolicy"")
        );
        assertTrue(PluginUtils.shouldLoadInIsolation(
                ""org.apache.kafka.connect.connector.policy.AllConnectorClientConfigOverridePolicy"")
        );
        assertTrue(PluginUtils.shouldLoadInIsolation(
                ""org.apache.kafka.connect.connector.policy.NoneConnectorClientConfigOverridePolicy"")
        );
        assertTrue(PluginUtils.shouldLoadInIsolation(
                ""org.apache.kafka.connect.connector.policy.PrincipalConnectorClientConfigOverridePolicy"")
        );
    }
",non-flaky,5
26924,wildfly_wildfly,MailSubsystem30TestCase.testSchemaOfSubsystemTemplates,"    @Test
    public void testSchemaOfSubsystemTemplates() throws Exception {
        super.testSchemaOfSubsystemTemplates();
    }
",non-flaky,5
98062,vert-x3_vertx-mongo-client,MongoClientAggregateUpdateTest.testAggregateUpdateCollection,"  @Test
  public void testAggregateUpdateCollection() {
    String collection = randomCollection();
    mongoClient.insert(collection, new JsonObject().put(""price"", 10).put(""quantity"", 1), onSuccess(id -> {
      mongoClient.insert(collection, new JsonObject().put(""price"", 20).put(""quantity"", 2), onSuccess(id2 -> {
        mongoClient.insert(collection, new JsonObject().put(""price"", 30).put(""quantity"", 10), onSuccess(id3 -> {
          mongoClient.updateCollection(collection,
            // reduce price of low quantity items
            new JsonObject().put(""quantity"", new JsonObject().put(""$lte"", 2)),
            new JsonArray().add(new JsonObject().put(""$set"", new JsonObject().put(""price"", new JsonObject().put(""$subtract"", new JsonArray().add(""$price"").add(2))))),
            onSuccess(res -> {
              assertEquals(2, res.getDocModified());
              assertEquals(2, res.getDocMatched());
              testComplete();
            }));
        }));
      }));
    }));
    await();
  }
",non-flaky,5
179494,abel533_Mapper,DeleteByPrimaryKeyMapperTest.testDeleteByPrimaryKey,"    @Test
    public void testDeleteByPrimaryKey(){
        SqlSession sqlSession = getSqlSession();
        try {
            CountryMapper mapper = sqlSession.getMapper(CountryMapper.class);
            Assert.assertEquals(183, mapper.selectAll().size());
            Assert.assertEquals(1, mapper.deleteByPrimaryKey(1L));
            Assert.assertEquals(182, mapper.selectAll().size());

            Assert.assertEquals(1, mapper.deleteByPrimaryKey(2));
            Assert.assertEquals(181, mapper.selectAll().size());

            Assert.assertEquals(1, mapper.deleteByPrimaryKey(""3""));
            Assert.assertEquals(180, mapper.selectAll().size());

            Assert.assertEquals(0, mapper.deleteByPrimaryKey(1));
            Assert.assertEquals(180, mapper.selectAll().size());
        } finally {
            sqlSession.close();
        }
    }
",non-flaky,5
77456,opensearch-project_OpenSearch,PackagingTestCase.setup,"    @TestGroup(enabled = false, sysProperty = ""tests.awaitsfix"")
    public void setup() throws Exception {
        assumeFalse(failed); // skip rest of tests once one fails

        sh.reset();
        if (distribution().hasJdk == false) {
            Platforms.onLinux(() -> sh.getEnv().put(""JAVA_HOME"", systemJavaHome));
            Platforms.onWindows(() -> sh.getEnv().put(""JAVA_HOME"", systemJavaHome));
        }
    }
",non-flaky,5
135020,undertow-io_undertow,HttpClientTestCase.run,"    @Test
    public void testSsl() throws Exception {
        //
        final UndertowClient client = createClient();

        final List<ClientResponse> responses = new CopyOnWriteArrayList<>();
        final CountDownLatch latch = new CountDownLatch(10);
        DefaultServer.startSSLServer();
        SSLContext context = DefaultServer.getClientSSLContext();
        XnioSsl ssl = new UndertowXnioSsl(DefaultServer.getWorker().getXnio(), OptionMap.EMPTY, DefaultServer.SSL_BUFFER_POOL, context);

        final ClientConnection connection = client.connect(new URI(DefaultServer.getDefaultServerSSLAddress()), worker, ssl, DefaultServer.getBufferPool(), OptionMap.EMPTY).get();
        try {
            connection.getIoThread().execute(new Runnable() {
                @Override
                public void run() {
                    for (int i = 0; i < 10; i++) {
                        final ClientRequest request = new ClientRequest().setMethod(Methods.GET).setPath(MESSAGE);
                        request.getRequestHeaders().put(Headers.HOST, DefaultServer.getHostAddress());
                        connection.sendRequest(request, createClientCallback(responses, latch));
                    }
                }
",non-flaky,5
160439,ConsenSys_teku,StateSelectorFactoryTest.defaultBlockSelector_shouldThrowBadRequestForBadHexState,"  @Test
  public void defaultBlockSelector_shouldThrowBadRequestForBadHexState() {
    assertThrows(BadRequestException.class, () -> factory.defaultStateSelector(""0xzz""));
  }
",non-flaky,5
53148,cloudfoundry_uaa,SamlConfigTest.testSetKeyAndCert,"    @Test
    public void testSetKeyAndCert() throws CertificateException {
        config.setPrivateKey(privateKey);
        config.setPrivateKeyPassword(passphrase);
        config.setCertificate(certificate);
        assertEquals(privateKey, config.getPrivateKey());
        assertEquals(passphrase, config.getPrivateKeyPassword());
    }
",non-flaky,5
114055,aws_aws-sdk-java-v2,EnhancedTypeTest.customTypesWork,"    @Test
    public void customTypesWork() {
        EnhancedType<EnhancedTypeTest> enhancedType = new EnhancedType<EnhancedTypeTest>(){};
        assertThat(enhancedType.rawClass()).isEqualTo(EnhancedTypeTest.class);
    }
",non-flaky,5
78272,apache_beam,StateNamespacesTest.testGlobalWindowPrefixing,"  @Test
  public void testGlobalWindowPrefixing() {
    StateNamespace window =
        StateNamespaces.window(GlobalWindow.Coder.INSTANCE, GlobalWindow.INSTANCE);
    StateNamespace windowAndTrigger =
        StateNamespaces.windowAndTrigger(GlobalWindow.Coder.INSTANCE, GlobalWindow.INSTANCE, 57);
    assertThat(windowAndTrigger.stringKey(), Matchers.startsWith(window.stringKey()));
    assertThat(
        StateNamespaces.global().stringKey(),
        Matchers.not(Matchers.startsWith(window.stringKey())));
  }
",non-flaky,5
98029,vert-x3_vertx-mongo-client,MongoClientUpdateResultTest.testJsonMongoClientUpdateResult,"  @Test
  public void testJsonMongoClientUpdateResult() {
    properJson();

    jsonWithoutRequiredFields();
  }
",non-flaky,5
77478,opensearch-project_OpenSearch,SettingTests.innerMatch,"    @TestLogging(value=""org.opensearch.common.settings.IndexScopedSettings:INFO"",
    public void testLogSettingUpdate() throws Exception {
        final IndexMetadata metadata = newIndexMeta(""index1"",
            Settings.builder().put(IndexSettings.INDEX_REFRESH_INTERVAL_SETTING.getKey(), ""20s"").build());
        final IndexSettings settings = new IndexSettings(metadata, Settings.EMPTY);

        final MockLogAppender mockLogAppender = new MockLogAppender();
        mockLogAppender.addExpectation(new MockLogAppender.SeenEventExpectation(
            ""message"",
            ""org.opensearch.common.settings.IndexScopedSettings"",
            Level.INFO,
            ""updating [index.refresh_interval] from [20s] to [10s]"") {
            @Override
            public boolean innerMatch(LogEvent event) {
                return event.getMarker().getName().equals("" [index1]"");
            }
",non-flaky,5
373,apache_hadoop,TestPermissionSymlinks.testAclRenameSrcNotWritableFS,"  @Test
  public void testAclRenameSrcNotWritableFS() throws Exception {
    fs.setAcl(linkParent, Arrays.asList(
      aclEntry(ACCESS, USER, ALL),
      aclEntry(ACCESS, USER, user.getUserName(), READ_EXECUTE),
      aclEntry(ACCESS, GROUP, ALL),
      aclEntry(ACCESS, OTHER, ALL)));
    doRenameSrcNotWritableFS();
  }
",non-flaky,5
118778,netty_netty,AbstractReferenceCountedByteBufTest.testRetainOverflow,"    @Test(expected = IllegalReferenceCountException.class)
    public void testRetainOverflow() {
        AbstractReferenceCountedByteBuf referenceCounted = newReferenceCounted();
        referenceCounted.setRefCnt(Integer.MAX_VALUE);
        assertEquals(Integer.MAX_VALUE, referenceCounted.refCnt());
        referenceCounted.retain();
    }
",non-flaky,5
159667,liquibase_liquibase,MssqlIntegrationTest.dataTypeParamsTest,"    @Test
    public void dataTypeParamsTest() throws Exception {
        assumeNotNull(this.getDatabase());
        clearDatabase();

        Liquibase liquibase = createLiquibase(""changelogs/mssql/issues/data.type.params.xml"");
        liquibase.update((String) null);

        DatabaseSnapshot snapshot = SnapshotGeneratorFactory.getInstance().createSnapshot(CatalogAndSchema.DEFAULT, this.getDatabase(), new SnapshotControl(getDatabase()));

        for (Table table : snapshot.get(Table.class)) {
            if (getDatabase().isLiquibaseObject(table)) {
                continue;
            }
            for (Column column : table.getColumns()) {
                String expectedType = column.getName().split(""_"")[0];

                String foundTypeDefinition = DataTypeFactory.getInstance().from(column.getType(), new MSSQLDatabase()).toDatabaseDataType(getDatabase()).toString();
                assertFalse(""Parameter found in "" + table.getName() + ""."" + column.getName(), foundTypeDefinition.contains(""(""));
            }
        }
    }
",non-flaky,5
113742,salesforce_reactive-grpc,UnaryZeroMessageResponseIntegrationTest.zeroMessageResponseOneToOne,"    @Test
    public void zeroMessageResponseOneToOne() {
        serverRule.getServiceRegistry().addService(new MissingUnaryResponseService());

        ReactorGreeterGrpc.ReactorGreeterStub stub = ReactorGreeterGrpc.newReactorStub(serverRule.getChannel());
        Mono<HelloRequest> req = Mono.just(HelloRequest.newBuilder().setName(""reactor"").build());
        Mono<HelloResponse> resp = req.compose(stub::sayHello);

        StepVerifier.create(resp).verifyErrorMatches(t ->
                t instanceof StatusRuntimeException &&
                ((StatusRuntimeException) t).getStatus().getCode() == Status.Code.CANCELLED);
    }
",non-flaky,5
177979,aosp-mirror_platform_frameworks_support,ColorUtilsTest.testCircularInterpolationCrossZero,"    @Test
    public void testCircularInterpolationCrossZero() {
        assertEquals(270f, ColorUtils.circularInterpolate(270, 90, 0f), 0f);
        assertEquals(180f, ColorUtils.circularInterpolate(270, 90, 0.5f), 0f);
        assertEquals(90f, ColorUtils.circularInterpolate(270, 90, 1f), 0f);
    }
",non-flaky,5
160406,ConsenSys_teku,ChainDataProviderTest.getStateCommittees_shouldReturnEmptyIfStateNotFound,"  @Test
  public void getStateCommittees_shouldReturnEmptyIfStateNotFound()
      throws ExecutionException, InterruptedException {
    final ChainDataProvider provider =
        new ChainDataProvider(spec, recentChainData, combinedChainDataClient);
    assertThat(
            provider
                .getStateCommittees(
                    data.randomBytes32().toHexString(),
                    Optional.empty(),
                    Optional.empty(),
                    Optional.empty())
                .get())
        .isEmpty();
  }
",non-flaky,5
76976,Tencent_Firestorm,SparkClientWithLocalTest.readTest4,"  @Test
  public void readTest4() {
    String testAppId = ""localReadTest4"";
    registerApp(testAppId, Lists.newArrayList(new PartitionRange(0, 1)));

    Map<Long, byte[]> expectedData1 = Maps.newHashMap();
    Map<Long, byte[]> expectedData2 = Maps.newHashMap();
    Roaring64NavigableMap blockIdBitmap1 = Roaring64NavigableMap.bitmapOf();
    Roaring64NavigableMap taskIdBitmap = Roaring64NavigableMap.bitmapOf(0);
    List<ShuffleBlockInfo> blocks = createShuffleBlockList(
        0, 0, 0, 10, 30, blockIdBitmap1, expectedData1, mockSSI);
    sendTestData(testAppId, blocks);

    Roaring64NavigableMap blockIdBitmap2 = Roaring64NavigableMap.bitmapOf();
    blocks = createShuffleBlockList(
        0, 1, 0, 10, 30, blockIdBitmap2, expectedData2, mockSSI);
    sendTestData(testAppId, blocks);

    blocks = createShuffleBlockList(
        0, 0, 0, 10, 30, blockIdBitmap1, expectedData1, mockSSI);
    sendTestData(testAppId, blocks);

    ShuffleReadClientImpl readClient1 = new ShuffleReadClientImpl(StorageType.LOCALFILE.name(),
        testAppId, 0, 0, 100, 2, 10, 100,
        """", blockIdBitmap1, taskIdBitmap, shuffleServerInfo, null);
    ShuffleReadClientImpl readClient2 = new ShuffleReadClientImpl(StorageType.LOCALFILE.name(),
        testAppId, 0, 1, 100, 2, 10, 100,
        """", blockIdBitmap2, taskIdBitmap, shuffleServerInfo, null);
    validateResult(readClient1, expectedData1);
    readClient1.checkProcessedBlockIds();
    readClient1.close();

    validateResult(readClient2, expectedData2);
    readClient2.checkProcessedBlockIds();
    readClient2.close();
  }
",non-flaky,5
112073,apache_shardingsphere-elasticjob,JobConfigurationExceptionTest.assertGetMessage,"    @Test
    public void assertGetMessage() {
        assertThat(new JobConfigurationException(""message is: '%s'"", ""test"").getMessage(), is(""message is: 'test'""));
    }
",non-flaky,5
160419,ConsenSys_teku,BlockSelectorFactoryTest.finalizedSelector_shouldGetFinalizedBlock,"  @Test
  public void finalizedSelector_shouldGetFinalizedBlock()
      throws ExecutionException, InterruptedException {
    when(client.getFinalizedBlock()).thenReturn(Optional.of(block));
    List<SignedBeaconBlock> blockList = blockSelectorFactory.finalizedSelector().getBlock().get();
    verify(client).getFinalizedBlock();
    assertThat(blockList).containsExactly(block);
  }
",non-flaky,5
135726,Netflix_Hystrix,CommonHystrixCommandTests.call,"    @Test
    public void testExecutionHookSemaphoreShortCircuitNoFallback() {
        assertHooksOnFailFast(
                new Func0<C>() {
                    @Override
                    public C call() {
                        return getCircuitOpenCommand(ExecutionIsolationStrategy.SEMAPHORE, FallbackResult.UNIMPLEMENTED);
                    }
",non-flaky,5
176779,ctco_cukes,RandomGeneratorFacadeImplTest.byPattern1,"    @Test
    public void byPattern1() throws Exception {
        assertThat(generator.byPattern(""A""), ContainsPattern.matchesPattern(""[A-Z]""));
        assertThat(generator.byPattern(""a""), ContainsPattern.matchesPattern(""[a-z]""));
        assertThat(generator.byPattern(""0""), ContainsPattern.matchesPattern(""[0-9]""));

        assertThat(generator.byPattern(""0Aa""), ContainsPattern.matchesPattern(Pattern.compile(""[0-9][A-Z][a-z]"")));
    }
",non-flaky,5
178045,aosp-mirror_platform_frameworks_support,GuidedStepAttributesTest.testCheckedActions,"    @Test
    public void testCheckedActions() throws Throwable {

        Intent intent = new Intent();
        Resources res = mContext.getResources();

        final int NUM_RADIO_ACTIONS = 3;
        final int NUM_CHECK_BOX_ACTIONS = 3;
        final int INITIALLY_CHECKED_RADIO_ACTION = 0;
        final List<Integer> INITIALLY_CHECKED_CHECKBOX_ACTIONS = new ArrayList<>(
                Arrays.asList(1, 2)
        );

        List<Integer> CLICK_SEQUENCE = new ArrayList<>();
        for(int i = 0; i < NUM_RADIO_ACTIONS + NUM_CHECK_BOX_ACTIONS; i++) {
            CLICK_SEQUENCE.add(i);
        }

        List<Boolean> EXPECTED_ACTIONS_STATE_AFTER_EACH_CLICK = new ArrayList<>(
                Arrays.asList(new Boolean[CLICK_SEQUENCE.size()])
        );
        Collections.fill(EXPECTED_ACTIONS_STATE_AFTER_EACH_CLICK, Boolean.FALSE);

        // initial state of actions before any clicks happen
        EXPECTED_ACTIONS_STATE_AFTER_EACH_CLICK.set(INITIALLY_CHECKED_RADIO_ACTION, true);
        for(int checkedCheckBox : INITIALLY_CHECKED_CHECKBOX_ACTIONS) {
            EXPECTED_ACTIONS_STATE_AFTER_EACH_CLICK.set(NUM_RADIO_ACTIONS + checkedCheckBox, true);
        }

        String title = ""Guided Actions Checked Test"";
        String breadcrumb = ""Checked Test Demo"";
        String description = """";
        GuidanceStylist.Guidance guidance = new GuidanceStylist.Guidance(title, description,
                breadcrumb, null);

        List<GuidedAction> actionList = new ArrayList<>();
        actionList.add(new GuidedAction.Builder(mContext)
                .title(res.getString(R.string.radio_actions_info_title))
                .description(res.getString(R.string.radio_actions_info_desc))
                .infoOnly(true)
                .enabled(true)
                .focusable(false)
                .build()
        );

        int firstRadioActionIndex = actionList.size();
        for(int i = 0; i < NUM_RADIO_ACTIONS; i++) {
            actionList.add(new GuidedAction.Builder(mContext)
                    .title(res.getString(R.string.checkbox_title) + i)
                    .description(res.getString(R.string.checkbox_desc) + i)
                    .checkSetId(GuidedAction.DEFAULT_CHECK_SET_ID)
                    .build()
            );
            if (i == INITIALLY_CHECKED_RADIO_ACTION)
                actionList.get(firstRadioActionIndex + i).setChecked(true);
        }

        actionList.add(new GuidedAction.Builder(mContext)
                .title(res.getString(R.string.checkbox_actions_info_title))
                .description(res.getString(R.string.checkbox_actions_info_desc))
                .infoOnly(true)
                .enabled(true)
                .focusable(false)
                .build()
        );
        int firstCheckBoxActionIndex = actionList.size();
        for(int i = 0; i < NUM_CHECK_BOX_ACTIONS; i++) {
            actionList.add(new GuidedAction.Builder(mContext)
                    .title(res.getString(R.string.checkbox_title) + i)
                    .description(res.getString(R.string.checkbox_desc) + i)
                    .checkSetId(GuidedAction.CHECKBOX_CHECK_SET_ID)
                    .build()
            );
        }
        for(int i = 0; i < INITIALLY_CHECKED_CHECKBOX_ACTIONS.size(); i++ ) {
            actionList.get(firstCheckBoxActionIndex + INITIALLY_CHECKED_CHECKBOX_ACTIONS.get(i))
                    .setChecked(true);
        }

        GuidedStepAttributesTestFragment.GUIDANCE = guidance;
        GuidedStepAttributesTestFragment.ACTION_LIST = actionList;
        initActivity(intent);

        examineCheckedAndUncheckedActions(actionList, EXPECTED_ACTIONS_STATE_AFTER_EACH_CLICK,
                NUM_RADIO_ACTIONS, NUM_CHECK_BOX_ACTIONS);
    }
",non-flaky,5
91390,OpenLCB_OpenLCB_Java,UtilTest.testCTor,"    @Test
    public void testCTor() {
        Assume.assumeFalse(GraphicsEnvironment.isHeadless());
        Util t = new Util();
        Assert.assertNotNull(""exists"",t);
    }
",non-flaky,5
110137,Wikidata_wikidata-toolkit,ClientConfigurationTest.testStdOutOutputArgumentsShort,"	@Test
	public void testStdOutOutputArgumentsShort() {
		String[] args = new String[] { ""-a"", ""json"", ""-s"" };
		ClientConfiguration config = new ClientConfiguration(args);
		assertTrue(config.isQuiet());
	}
",non-flaky,5
159658,liquibase_liquibase,AbstractIntegrationTest.testEncodingUpdating2SQL,"    @Test
    public void testEncodingUpdating2SQL() throws Exception {
        assumeNotNull(this.getDatabase());

        Liquibase liquibase = createLiquibase(encodingChangeLog);

        StringWriter writer=new StringWriter();
        liquibase.update(this.contexts,writer);
        assertTrue(""Update to SQL preserves encoding"",
            new RegexMatcher(writer.toString(), new String[] {
                //For the UTF-8 encoded cvs
                ""^.*INSERT.*VALUES.*Ã Ã¨Ã¬Ã²Ã¹Ã¡Ã©Ã­Ã³ÃºÃÃÃÃÃÃÃÃÃÃÃ¢ÃªÃ®Ã´Ã»Ã¤Ã«Ã¯Ã¶Ã¼.*?\\)"",
                ""Ã§Ã±Â®"",
                //For the latin1 one
                ""^.*INSERT.*VALUES.*Ã Ã¨Ã¬Ã²Ã¹Ã¡Ã©Ã­Ã³ÃºÃÃÃÃÃÃÃÃÃÃÃ¢ÃªÃ®Ã´Ã»Ã¤Ã«Ã¯Ã¶Ã¼.*?\\)"",
                ""Ã§Ã±Â®""
            }).allMatchedInSequentialOrder());
    }
",non-flaky,5
26858,wildfly_wildfly,ServiceBasedNamingStoreTestCase.lookup,"    @Test
    public void testStoredContext() throws Exception {
        final ServiceName bindingName = ServiceName.JBOSS.append(""foo-stored"").append(""again"");
        bindObject(bindingName, new Context() {
            @Override
            public Object lookup(Name name) throws NamingException {
                if (""blah/blah2"".equals(name.toString())) {
                    return new Integer(5);
                }

                return null;
            }
",non-flaky,5
159614,liquibase_liquibase,MavenIntegrationTest.testRollbackTag,"//    @Test
//    public void testRollbackTag() throws Exception {
//        Verifier verifier= createVerifier();
//
//
//        verifier.executeGoal(""clean"");
//        verifier.executeGoal(""liquibase:tag"");
//        verifier.executeGoal(""package""); //runs update that is bound to test phase
//        verifier.executeGoal(""liquibase:rollback"");
//        //If we can reupdate rollback has succeded
//        verifier.executeGoal(""liquibase:update"");
//
//        //Verify everithing has gone well.
//        verifier.verifyErrorFreeLog();
//
//        //Reset the streams before executing the verifier
//        verifier.resetStreams();
//    }
",non-flaky,5
86066,graylog2_graylog2-server,AggregationEventProcessorConfigTest.requiredPermissions,"    @Test
    public void requiredPermissions() {
        assertThat(dbService.get(""54e3deadbeefdeadbeefaffe"")).get().satisfies(definition -> {
            assertThat(definition.config().requiredPermissions()).containsOnly(""streams:read:stream-a"", ""streams:read:stream-b"");
        });
    }
",non-flaky,5
76686,quarkusio_quarkus,CustomAuthEmbeddedBase.testJaxrsGetDenyAllWithoutAuth,"    @Test
    public void testJaxrsGetDenyAllWithoutAuth() {
        RestAssured.when().get(""/jaxrs-secured/subject/denied"").then()
                .statusCode(401);
    }
",non-flaky,5
98309,spotify_docker-client,ImageRefTest.testImageWithDigest,"  @Test
  public void testImageWithDigest() {
    final ImageRef sut = new ImageRef(""bar@sha256:12345"");
    assertThat(sut.getImage(), equalTo(""bar@sha256:12345""));
  }
",non-flaky,5
77678,pholser_junit-quickcheck,PrimitivePropertyParameterTypesTest.shouldHold,"    @Test public void shrinkingBooleanFromFalse() {
        @Property public void shouldHold(boolean b) {
            values.add(b);

            assumeFalse(b);
            fail();
        }
",non-flaky,5
91441,strapdata_elassandra,PackageTestCase.onlyCompatibleDistributions,"@TestCaseOrdering(TestCaseOrdering.AlphabeticOrder.class)
    public void onlyCompatibleDistributions() {
        assumeTrue(""only compatible distributions"", distribution().packaging.compatible);
    }
",non-flaky,5
26921,wildfly_wildfly,MailSubsystem20TestCase.test11,"    @Test
    public void test11() throws Exception {
        standardSubsystemTest(""subsystem_1_1.xml"", false);
    }
",non-flaky,5
98651,nutzam_nutz,SimpleAdaptorTest.re_view_with_NutMap,"    @Test
    public void re_view_with_NutMap() {
        resp = post(""/adaptor/issue13xx"", new NutMap(""age"", ""123""));
        assertEquals(200, resp.getStatus());
        String str = resp.getContent();
        assertEquals(Json.toJson(new NutMap(""id"", 1), JsonFormat.compact()), str);
    }
",non-flaky,5
77431,opensearch-project_OpenSearch,BwcVersionsTests.testExceptionOnTooManyMajors,"    @Test(expected = IllegalStateException.class)
    public void testExceptionOnTooManyMajors() {
        new BwcVersions(
            asList(formatVersionToLine(""5.6.12""), formatVersionToLine(""6.5.0""), formatVersionToLine(""7.0.0"")),
            Version.fromString(""6.5.0"")
        );
    }
",non-flaky,5
33660,alibaba_fastjson,SerializeWriterTest.testWriteLiteSpecilaStr,"    @Test
    public void testWriteLiteSpecilaStr() throws UnsupportedEncodingException {
        this.doTestWrite(this.makeSpecialChars());
    }
",non-flaky,5
106626,Alluxio_alluxio,AlluxioJniFuseFileSystemTest.openWithDelay,"  @Test
  public void openWithDelay() throws Exception {
    AlluxioURI expectedPath = BASE_EXPECTED_URI.join(""/foo/bar"");
    FileInfo fi = setUpOpenMock(expectedPath);
    fi.setCompleted(false);
    when(mFileSystem.openFile(expectedPath)).thenThrow(new FileIncompleteException(expectedPath));

    // Use another thread to open file so that
    // we could change the file status when opening it
    Thread t = new Thread(() -> mFuseFs.open(""/foo/bar"", mFileInfo));
    t.start();
    Thread.sleep(1000);
    // If the file exists but is not completed, we will wait for the file to complete
    verify(mFileSystem, atLeast(10)).getStatus(expectedPath);

    fi.setCompleted(true);
    t.join();
    verify(mFileSystem, times(2)).openFile(expectedPath);
  }
",non-flaky,5
94770,ktuukkan_marine-api,AISMessage24ParserTest.getUnitModelCode,"    @Test
    public void getUnitModelCode() throws Exception {
        // TODO correct?
        assertEquals(13, partB.getUnitModelCode());
    }
",non-flaky,5
38197,palantir_atlasdb,SchemasTest.testDeleteTablesForSweepSchema,"    @Test
    public void testDeleteTablesForSweepSchema() {
        Set<TableReference> allTableNames = Sets.newHashSet();
        allTableNames.add(TableReference.createFromFullyQualifiedName(""sweep.progress""));
        allTableNames.add(TableReference.createFromFullyQualifiedName(""sweep.priority""));

        mockery.checking(new Expectations(){{
            oneOf(kvs).getAllTableNames(); will(returnValue(allTableNames));
            oneOf(kvs).dropTables(allTableNames);
            oneOf(kvs).getAllTableNames();
        }});
        Schemas.deleteTablesAndIndexes(SweepSchema.INSTANCE.getLatestSchema(), kvs);
    }
",non-flaky,5
122627,vespa-engine_vespa,YumTesterTest.generic_yum_methods,"    @Test
    public void generic_yum_methods() {
        assertYumMethod(yum -> yum.expectInstall(packages).withEnableRepo(repos),
                yum -> yum.install(List.of(packages)).enableRepo(repos).converge(context));

        assertYumMethod(yum -> yum.expectUpdate(packages).withEnableRepo(repos),
                yum -> yum.upgrade(List.of(packages)).enableRepo(repos).converge(context));

        assertYumMethod(yum -> yum.expectRemove(packages).withEnableRepo(repos),
                yum -> yum.remove(List.of(packages)).enableRepo(repos).converge(context));

        assertYumMethod(yum -> yum.expectInstallFixedVersion(minimalPackage.toName()).withEnableRepo(repos),
                yum -> yum.installFixedVersion(minimalPackage).enableRepo(repos).converge(context));
    }
",non-flaky,5
21005,NationalSecurityAgency_timely,DownsampleIteratorTest.testDownsampleCombining,"    @Test
    public void testDownsampleCombining() throws Exception {

        int numTagVariations = 2;
        int sampleInterval = 50;
        int elapsedTime = 100;
        int skipInterval = 10;
        SortedMap<Key, Value> testData3 = createTestData3(elapsedTime, skipInterval, numTagVariations);
        DownsampleIterator iter = new DownsampleIterator();
        Map<Set<Tag>, Downsample> samples = runQuery(iter, testData3, sampleInterval, 1000);
        assertEquals(numTagVariations, samples.size());
        long totalBuckets = 0;
        for (Entry<Set<Tag>, Downsample> entry : samples.entrySet()) {
            totalBuckets = totalBuckets + entry.getValue().getNumBuckets();
        }
        assertEquals((elapsedTime / sampleInterval) * numTagVariations, totalBuckets);
    }
",non-flaky,5
114041,aws_aws-sdk-java-v2,UpdateItemWithResponseIntegrationTest.putItem_returnItemCollectionMetrics_set_itemCollectionMetricsNotNull,"    @Test
    public void putItem_returnItemCollectionMetrics_set_itemCollectionMetricsNotNull() {
        Record record = new Record().setId(1).setId2(10);
        UpdateItemEnhancedRequest<Record> request = UpdateItemEnhancedRequest.builder(Record.class)
                                                                             .item(record)
                                                                             .returnItemCollectionMetrics(ReturnItemCollectionMetrics.SIZE)
                                                                             .build();

        UpdateItemEnhancedResponse<Record> response = mappedTable.updateItemWithResponse(request);

        assertThat(response.itemCollectionMetrics()).isNotNull();
    }
",non-flaky,5
162668,OpenAPITools_openapi-generator,StoreApiTest.getInventoryTest,"    @Test
    public void getInventoryTest() {
        //Map<String, Integer> response = api.getInventory();
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
",non-flaky,5
169,wildfly_wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993.testBindNested,"@Test
public void testBindNested() throws Exception {
    final Name name = new CompositeName(""nested/test"");
    final Object value = new Object();
    WritableServiceBasedNamingStore.pushOwner(OWNER_FOO);
    try {
        store.bind(name, value);
    } finally {
        WritableServiceBasedNamingStore.popOwner();
    }
    assertEquals(value, store.lookup(name));
}",test order dependency,4
156090,soot-oss_soot,AsmMethodSourceTest.iterator,"  @Test
  public void iterator() {
    // statements at the beginning of a for loop should have the line number as for the branching
    // statement and not the last line number after the branch that leads outside the loop
    SootMethod target = prepareTarget(methodSigFromComponents(TEST_TARGET_CLASS, ""void"", ""iterator""), TEST_TARGET_CLASS);

    Body body = target.retrieveActiveBody();

    Optional<Unit> unit = body.getUnits().stream()
        .filter(u -> u.toString().contains(""<java.util.Iterator: java.lang.Object next()>()"")).findFirst();

    Assert.assertTrue(unit.isPresent());

    Assert.assertEquals(31, unit.get().getJavaSourceStartLineNumber());
  }
",non-flaky,5
95665,togglz_togglz,SpringEnvironmentPropertyActivationStrategyTest.testGetName,"    @Test
    public void testGetName() {
        assertTrue(Strings.isNotBlank(strategy.getName()));
    }
",non-flaky,5
156173,soot-oss_soot,ModuleUtilTest.simpleExport,"    @Test
    public void simpleExport() {
        G.reset();
        ModuleScene moduleScene = ModuleScene.v();

        SootModuleInfo moduleA = new SootModuleInfo(SootModuleInfo.MODULE_INFO, ""moduleA"");
        moduleA.addExportedPackage(""de.upb"");
        moduleScene.addClassSilent(moduleA);

        SootModuleInfo moduleB = new SootModuleInfo(SootModuleInfo.MODULE_INFO, ""moduleB"");
        moduleB.getRequiredModules().put(moduleA, Modifier.REQUIRES_STATIC);
        moduleScene.addClassSilent(moduleB);

        ModuleUtil moduleUtil = ModuleUtil.v();
        String foundModule = moduleUtil.declaringModule(""de.upb.A"", ""moduleB"");
        Assert.assertEquals(""moduleA"", foundModule);

    }
",non-flaky,5
162370,testcontainers_testcontainers-java,DockerImageNameTest.validNames,"    @Test
    public void validNames() {
        testValid(""myname:latest"");
        testValid(""myname:latest"");
        testValid(""repo/my-name:1.0"");
        testValid(""repo.foo.com:1234/my-name:1.0"");
        testValid(""repo.foo.com/my-name:1.0"");
        testValid(""repo.foo.com:1234/repo_here/my-name:1.0"");
        testValid(""repo.foo.com:1234/repo-here/my-name@sha256:1234abcd1234abcd1234abcd1234abcd"");
        testValid(""repo.foo.com:1234/my-name@sha256:1234abcd1234abcd1234abcd1234abcd"");
        testValid(""1.2.3.4/my-name:1.0"");
        testValid(""1.2.3.4:1234/my-name:1.0"");
        testValid(""1.2.3.4/repo-here/my-name:1.0"");
        testValid(""1.2.3.4:1234/repo-here/my-name:1.0"");
    }
",non-flaky,5
97684,vojtechhabarta_typescript-generator,ReadOnlyWriteOnlyTest.testJacksonDeserialization,"    @Test
    public void testJacksonDeserialization() throws JsonProcessingException {
        final String json = ""{'name':'name','id1':'id1','id2':'id2','password1':'password1','password2':'password2'}""
                .replace(""'"", ""\"""");
        final ReadOnlyWriteOnlyUser user = new ObjectMapper().readValue(json, ReadOnlyWriteOnlyUser.class);
        Assert.assertNull(user.id1);
        Assert.assertNull(user._id2);
        Assert.assertNotNull(user.password1);
        Assert.assertNotNull(user.password2);
    }
",non-flaky,5
110163,Wikidata_wikidata-toolkit,DirectoryManagerTest.OutputStreamReadOnly,"	@Test(expected = IOException.class)
	public void OutputStreamReadOnly() throws IOException {
		dm.getOutputStreamForFile(""file.txt"");
	}
",non-flaky,5
162453,testcontainers_testcontainers-java,HostPortWaitStrategyTest.testWaiting,"    @Test
    public void testWaiting() {
        pass(""Container starts after waiting"");
    }
",non-flaky,5
98302,spotify_docker-client,DefaultLogStreamTest.testAttach,"  @Test
  public void testAttach() throws Exception {
    when(reader.nextMessage()).thenReturn(
        logMessage(LogMessage.Stream.STDOUT, ""hello\n""),
        logMessage(LogMessage.Stream.STDERR, ""oops\n""),
        logMessage(LogMessage.Stream.STDOUT, ""world!\n""),
        // need to return null to signal end of stream
        null
    );

    final ByteArrayOutputStream stdout = new ByteArrayOutputStream();
    final ByteArrayOutputStream stderr = new ByteArrayOutputStream();
    logStream.attach(stdout, stderr);

    assertThat(stdout.toString(), is(""hello\nworld!\n""));
    assertThat(stderr.toString(), is(""oops\n""));
  }
",non-flaky,5
38208,palantir_atlasdb,RocksDbKeyValueServiceTest.testGetRange2,"    @Test
    public void testGetRange2() {
        final Cell cell = Cell.create("",r,1"".getBytes(), "",c,1,"".getBytes());
        db.put(TABLE, ImmutableMap.of(cell, ""v1"".getBytes()), 2);
        final RangeRequest range = RangeRequest.builder().build();
        final ClosableIterator<RowResult<Value>> it = db.getRange(TABLE, range, 10);
        try {
            final List<RowResult<Value>> list = Lists.newArrayList();
            Iterators.addAll(list, it);
            assertEquals(1, list.size());
            final RowResult<Value> row = list.iterator().next();
            final Map<Cell, Value> cellsFromRow = putAll(Maps.<Cell, Value>newHashMap(), row.getCells());
            final Map<Cell, Value> rows = db.getRows(TABLE, ImmutableList.of("",r,1"".getBytes()), ColumnSelection.all(), 3);
            assertEquals(rows, cellsFromRow);
        } finally {
            it.close();
        }
    }
",non-flaky,5
363,apache_hadoop,TestPermissionSymlinks.testAclReadTargetNotReadable,"  @Test
  public void testAclReadTargetNotReadable() throws Exception {
    fs.setAcl(target, Arrays.asList(
      aclEntry(ACCESS, USER, READ_WRITE),
      aclEntry(ACCESS, USER, user.getUserName(), NONE),
      aclEntry(ACCESS, GROUP, READ),
      aclEntry(ACCESS, OTHER, READ)));
    doReadTargetNotReadable();
  }
",non-flaky,5
20960,NationalSecurityAgency_timely,MetricAgeOffFilterTest.testAgeoffMixed,"    @Test
    public void testAgeoffMixed() throws Exception {
        MetricAgeOffFilter filter = new MetricAgeOffFilter();
        HashMap<String, String> options = new HashMap<>();
        options.put(MetricAgeOffFilter.AGE_OFF_PREFIX + ""default"", Integer.toString(1 * ONE_DAY));
        options.put(MetricAgeOffFilter.AGE_OFF_PREFIX + ""sys.cpu.user"", Integer.toString(2 * ONE_DAY));
        filter.init(null, options, null);
        assertFalse(filter.accept(new Key(MetricAdapter.encodeRowKey(""sys.cpu.idle"", TEST_TIME - (3 * ONE_DAY)),
                new byte[0], new byte[0], new byte[0], TEST_TIME - (3 * ONE_DAY)), null));
        assertFalse(filter.accept(new Key(MetricAdapter.encodeRowKey(""sys.cpu.idle"", TEST_TIME - (2 * ONE_DAY)),
                new byte[0], new byte[0], new byte[0], TEST_TIME - (2 * ONE_DAY)), null));
        assertFalse(filter.accept(new Key(MetricAdapter.encodeRowKey(""sys.cpu.idle"", TEST_TIME - (1 * ONE_DAY)),
                new byte[0], new byte[0], new byte[0], TEST_TIME - (1 * ONE_DAY)), null));
        assertTrue(filter.accept(new Key(MetricAdapter.encodeRowKey(""sys.cpu.idle"", TEST_TIME), new byte[0],
                new byte[0], new byte[0], TEST_TIME), null));
        assertTrue(filter.accept(new Key(MetricAdapter.encodeRowKey(""sys.cpu.idle"", TEST_TIME + ONE_DAY), new byte[0],
                new byte[0], new byte[0], TEST_TIME + ONE_DAY), null));
        assertTrue(filter.accept(new Key(MetricAdapter.encodeRowKey(""sys.cpu.idle"", TEST_TIME + (2 * ONE_DAY)),
                new byte[0], new byte[0], new byte[0], TEST_TIME + (2 * ONE_DAY)), null));
        assertFalse(filter.accept(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME - (3 * ONE_DAY)),
                new byte[0], new byte[0], new byte[0], TEST_TIME - (3 * ONE_DAY)), null));
        assertFalse(filter.accept(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME - (2 * ONE_DAY)),
                new byte[0], new byte[0], new byte[0], TEST_TIME - (2 * ONE_DAY)), null));
        assertTrue(filter.accept(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME - (1 * ONE_DAY)),
                new byte[0], new byte[0], new byte[0], TEST_TIME - (1 * ONE_DAY)), null));
        assertTrue(filter.accept(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME), new byte[0],
                new byte[0], new byte[0], TEST_TIME), null));
        assertTrue(filter.accept(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME + ONE_DAY), new byte[0],
                new byte[0], new byte[0], TEST_TIME + ONE_DAY), null));
        assertTrue(filter.accept(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME + (2 * ONE_DAY)),
                new byte[0], new byte[0], new byte[0], TEST_TIME + (2 * ONE_DAY)), null));
    }
",non-flaky,5
53153,cloudfoundry_uaa,TokenPolicyTest.json_has_expected_properties,"    @Test
    public void json_has_expected_properties() throws Exception {
        TokenPolicy tokenPolicy = new TokenPolicy();
        tokenPolicy.setAccessTokenValidity(1234);
        tokenPolicy.setRefreshTokenValidity(9876);
        tokenPolicy.setKeys(Collections.singletonMap(""aKeyId"", ""KeyKeyKey""));

        String json = JsonUtils.writeValueAsString(tokenPolicy);
        Map properties = JsonUtils.readValue(json, Map.class);

        assertNotNull(properties);
        assertEquals(1234, properties.get(""accessTokenValidity""));
        assertEquals(9876, properties.get(""refreshTokenValidity""));
        assertNotNull(properties.get(""keys""));
        Map keys = (Map) properties.get(""keys"");
        assertNotNull(keys);
        assertEquals(keys.size(), 1);
        assertEquals(""KeyKeyKey"", ((Map) keys.get(""aKeyId"")).get(""signingKey""));
    }
",non-flaky,5
135782,Netflix_Hystrix,CollapsedRequestSubjectTest.testSetResponseDuplicate,"    @Test
    public void testSetResponseDuplicate() throws InterruptedException, ExecutionException {
        CollapsedRequestSubject<String, String> cr = new CollapsedRequestSubject<String, String>(""hello"");
        Observable<String> o = cr.toObservable();
        Future<String> v = o.toBlocking().toFuture();

        cr.setResponse(""theResponse"");

        try {
            cr.setResponse(""theResponse2"");
            fail(""expected IllegalState"");
        } catch (IllegalStateException e) {

        }

        assertEquals(""theResponse"", v.get());
    }
",non-flaky,5
91413,strapdata_elassandra,MonitoringWithWatcherRestIT.cleanExporters,"@TestLogging(""org.elasticsearch.client:TRACE,tracer:TRACE"")
    public void cleanExporters() throws Exception {
        Request request = new Request(""PUT"", ""/_cluster/settings"");
        request.setJsonEntity(Strings.toString(jsonBuilder().startObject()
                .startObject(""transient"")
                    .nullField(""xpack.monitoring.exporters.*"")
                .endObject().endObject()));
        adminClient().performRequest(request);
        adminClient().performRequest(new Request(""DELETE"", ""/.watch*""));
    }
",non-flaky,5
30993,camunda-cloud_zeebe,ObjectMappingTest.shouldFailDeserializationWithUndersizedIntegerValue,"  @Test
  public void shouldFailDeserializationWithUndersizedIntegerValue() {
    // given
    final POJO pojo = new POJO();

    final DirectBuffer buffer =
        encodeMsgPack(
            (w) -> {
              w.writeMapHeader(6);

              w.writeString(wrapString(""enumProp""));
              w.writeString(wrapString(POJOEnum.BAR.toString()));

              w.writeString(wrapString(""binaryProp""));
              w.writeBinary(BUF1);

              w.writeString(wrapString(""stringProp""));
              w.writeString(BUF2);

              w.writeString(wrapString(""packedProp""));
              w.writeRaw(MSGPACK_BUF1);

              w.writeString(wrapString(""longProp""));
              w.writeInteger(88888L);

              w.writeString(wrapString(""intProp""));
              w.writeInteger(Integer.MIN_VALUE - 1L);
            });

    // then
    exception.expect(RuntimeException.class);
    exception.expectMessage(""Could not deserialize object"");

    // when
    pojo.wrap(buffer);
  }
",non-flaky,5
26703,MundaneImmortal_pair-distribution-app,PairTest.testOtherDevWithOneDev,"	@Test
	public void testOtherDevWithOneDev()  {
		Pair subject = new Pair(Arrays.asList(new Developer(""dev1"")));
		
		assertThat(subject.getOtherDev(new Developer(""dev1"")), nullValue());
	}
",non-flaky,5
135038,undertow-io_undertow,NetworkUtilsAddressParsingTestCase.testIpV4Address,"    @Test
    public void testIpV4Address() throws IOException {
        InetAddress res = NetworkUtils.parseIpv4Address(""1.123.255.2"");
        Assert.assertTrue(res instanceof Inet4Address);
        Assert.assertEquals(1, res.getAddress()[0]);
        Assert.assertEquals(123, res.getAddress()[1]);
        Assert.assertEquals((byte)255, res.getAddress()[2]);
        Assert.assertEquals(2, res.getAddress()[3]);
        Assert.assertEquals(""/1.123.255.2"", res.toString());

        res = NetworkUtils.parseIpv4Address(""127.0.0.1"");
        Assert.assertTrue(res instanceof Inet4Address);
        Assert.assertEquals(127, res.getAddress()[0]);
        Assert.assertEquals(0, res.getAddress()[1]);
        Assert.assertEquals((byte)0, res.getAddress()[2]);
        Assert.assertEquals(1, res.getAddress()[3]);
        Assert.assertEquals(""/127.0.0.1"", res.toString());
    }
",non-flaky,5
76989,Tencent_Firestorm,ShuffleWithRssClientTest.reportMultipleServerTest,"  @Test
  public void reportMultipleServerTest() throws Exception {
    String testAppId = ""reportMultipleServerTest"";

    shuffleWriteClientImpl.registerShuffle(shuffleServerInfo1,
        testAppId, 1, Lists.newArrayList(new PartitionRange(1, 1)));

    shuffleWriteClientImpl.registerShuffle(shuffleServerInfo2,
        testAppId, 1, Lists.newArrayList(new PartitionRange(2, 2)));

    Map<Integer, List<ShuffleServerInfo>> partitionToServers = Maps.newHashMap();
    partitionToServers.putIfAbsent(1, Lists.newArrayList(shuffleServerInfo1));
    partitionToServers.putIfAbsent(2, Lists.newArrayList(shuffleServerInfo2));
    Map<Integer, List<Long>> partitionToBlocks = Maps.newHashMap();
    List<Long> blockIds = Lists.newArrayList();
    for (int i = 0; i < 5; i++ ) {
      blockIds.add(ClientUtils.getBlockId(1, 0, i));
    }
    partitionToBlocks.put(1, blockIds);
    blockIds = Lists.newArrayList();
    for (int i = 0; i < 7; i++ ) {
      blockIds.add(ClientUtils.getBlockId(2, 0, i));
    }
    partitionToBlocks.put(2, blockIds);
    shuffleWriteClientImpl
        .reportShuffleResult(partitionToServers, testAppId, 1, 0, partitionToBlocks, 1);

    Roaring64NavigableMap bitmap = shuffleWriteClientImpl
        .getShuffleResult(""GRPC"", Sets.newHashSet(shuffleServerInfo1), testAppId,
        1, 0);
    assertTrue(bitmap.isEmpty());

    bitmap = shuffleWriteClientImpl
        .getShuffleResult(""GRPC"", Sets.newHashSet(shuffleServerInfo1), testAppId,
        1, 1);
    assertEquals(5, bitmap.getLongCardinality());
    for (int i = 0; i < 5; i++) {
      assertTrue(bitmap.contains(partitionToBlocks.get(1).get(i)));
    }

    bitmap = shuffleWriteClientImpl
        .getShuffleResult(""GRPC"", Sets.newHashSet(shuffleServerInfo1), testAppId,
        1, 2);
    assertTrue(bitmap.isEmpty());

    bitmap = shuffleWriteClientImpl
        .getShuffleResult(""GRPC"", Sets.newHashSet(shuffleServerInfo2), testAppId,
        1, 0);
    assertTrue(bitmap.isEmpty());

    bitmap = shuffleWriteClientImpl
        .getShuffleResult(""GRPC"", Sets.newHashSet(shuffleServerInfo2), testAppId,
        1, 1);
    assertTrue(bitmap.isEmpty());

    bitmap = shuffleWriteClientImpl
        .getShuffleResult(""GRPC"", Sets.newHashSet(shuffleServerInfo2), testAppId,
        1, 2);
    assertEquals(7, bitmap.getLongCardinality());
    for (int i = 0; i < 7; i++) {
      assertTrue(bitmap.contains(partitionToBlocks.get(2).get(i)));
    }
  }
",non-flaky,5
160376,ConsenSys_teku,MetadataTest.shouldDeserialize,"  @Test
  public void shouldDeserialize() throws JsonProcessingException {
    final Metadata metadata = jsonProvider.jsonToObject(jsonData, Metadata.class);
    assertThat(metadata.interchangeFormatVersion).isEqualTo(INTERCHANGE_VERSION);
    assertThat(metadata.genesisValidatorsRoot).isEqualTo(root);
  }
",non-flaky,5
53142,cloudfoundry_uaa,SamlConfigTest.testIsRequestSigned,"    @Test
    public void testIsRequestSigned() throws Exception {
        assertTrue(config.isRequestSigned());
    }
",non-flaky,5
94637,square_okhttp,InterceptorTest.intercept,"  @Test public void networkInterceptorReturnsNull() throws Exception {
      @Override public Response intercept(Chain chain) throws IOException {
        chain.proceed(chain.request());
        return null;
      }
",non-flaky,5
156460,apache_commons-lang,DateUtilsFragmentTest.testSecondsOfDayWithCalendar,"    @Test
    public void testSecondsOfDayWithCalendar() {
        long testresult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.DATE);
        final long expectedValue = seconds + ((minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR))/ DateUtils.MILLIS_PER_SECOND;
        assertEquals(expectedValue, testresult);
        testresult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.DAY_OF_YEAR);
        assertEquals(expectedValue, testresult);
    }
",non-flaky,5
95730,togglz_togglz,JDBCStateRepositoryTest.testShouldSaveStateWithoutStrategyOrParameters,"    @Test
    public void testShouldSaveStateWithoutStrategyOrParameters() throws SQLException {

        /*
         * WHEN a feature without strategy is persisted
         */
        FeatureState state = new FeatureState(TestFeature.F1).disable();
        repository.setFeatureState(state);

        /*
         * THEN there should be a corresponding entry in the database
         */
        assertEquals(1l, query(dataSource, ""SELECT COUNT(*) FROM TOGGLZ WHERE FEATURE_NAME = 'F1'""));
        assertEquals(0, query(dataSource, ""SELECT FEATURE_ENABLED FROM TOGGLZ WHERE FEATURE_NAME = 'F1'""));
        assertEquals(null, query(dataSource, ""SELECT STRATEGY_ID FROM TOGGLZ WHERE FEATURE_NAME = 'F1'""));
        assertEquals(null, query(dataSource, ""SELECT STRATEGY_PARAMS FROM TOGGLZ WHERE FEATURE_NAME = 'F1'""));

    }
",non-flaky,5
156099,soot-oss_soot,AsmMethodSourceOrigNamesTest.testElemApplyTemplates,"  @Test
  public void testElemApplyTemplates() {
    final String clazz = ""org.apache.xalan.templates.ElemApplyTemplates"";
    final String[] params = { ""org.apache.xalan.transformer.TransformerImpl"" };
    runXalanTest(prepareTarget(methodSigFromComponents(clazz, ""void"", ""transformSelectedNodes"", params), clazz));
  }
",non-flaky,5
60867,apache_druid,RedisCacheConfigTest.testClusterLackOfPort,"  @Test
  public void testClusterLackOfPort() throws IOException
  {
    ObjectMapper mapper = new ObjectMapper();
    RedisCacheConfig fromJson = mapper.readValue(
        ""{\""expiration\"":1000,""
        + ""\""cluster\"": {""
        + ""\""nodes\"": \""127.0.0.1:\""""
        + ""}""
        + ""}"",
        RedisCacheConfig.class
    );

    expectedException.expect(new ExceptionMatcher(
        IAE.class,
        new StartWithMatcher(""Invalid port"")
    ));
    RedisCacheFactory.create(fromJson);
  }
",non-flaky,5
98359,Kong_unirest-java,DownloadProgressTest.setUp,"    @BeforeEach
    public void setUp() {
        super.setUp();
        this.monitor = new TestMonitor();
    }
",non-flaky,5
134981,undertow-io_undertow,WebsocketBasicAuthTestCase.beforeRequest,"    @Test
    public void testAuthenticatedWebsocket() throws Exception {
        ProgramaticClientEndpoint endpoint = new ProgramaticClientEndpoint();
        ClientEndpointConfig clientEndpointConfig = ClientEndpointConfig.Builder.create().configurator(new ClientConfigurator(){
            @Override
            public void beforeRequest(Map<String, List<String>> headers) {
                headers.put(AUTHORIZATION.toString(), Collections.singletonList(BASIC + "" "" + FlexBase64.encodeString(""user1:password1"".getBytes(), false)));
            }
",non-flaky,5
33884,apache_camel,FhirMetaIT.testDelete,"    @Test
    public void testDelete() throws Exception {
        //assert no meta
        Meta meta = fhirClient.meta().get(Meta.class).fromResource(this.patient.getIdElement()).execute();
        assertEquals(0, meta.getTag().size());
        Meta inMeta = new Meta();
        inMeta.addTag().setSystem(""urn:system1"").setCode(""urn:code1"");
        // add meta
        meta = fhirClient.meta().add().onResource(this.patient.getIdElement()).meta(inMeta).execute();
        assertEquals(1, meta.getTag().size());

        //delete meta
        final Map<String, Object> headers = new HashMap<>();
        // parameter type is org.hl7.fhir.instance.model.api.IBaseMetaType
        headers.put(""CamelFhir.meta"", meta);
        // parameter type is org.hl7.fhir.instance.model.api.IIdType
        headers.put(""CamelFhir.id"", this.patient.getIdElement());

        IBaseMetaType result = requestBodyAndHeaders(""direct://DELETE"", null, headers);

        LOG.debug(""delete: "" + result);
        assertNotNull(result, ""delete result"");
        assertEquals(0, result.getTag().size());
    }
",non-flaky,5
33885,apache_camel,FhirMetaIT.testGetFromResource,"    @Test
    public void testGetFromResource() throws Exception {
        final Map<String, Object> headers = new HashMap<>();
        // parameter type is Class
        headers.put(""CamelFhir.metaType"", Meta.class);
        // parameter type is org.hl7.fhir.instance.model.api.IIdType
        headers.put(""CamelFhir.id"", this.patient.getIdElement());

        IBaseMetaType result = requestBodyAndHeaders(""direct://GET_FROM_RESOURCE"", null, headers);

        LOG.debug(""getFromResource: "" + result);
        assertNotNull(result, ""getFromResource result"");
        assertEquals(0, result.getTag().size());
    }
",non-flaky,5
112755,hwang-pku_ormlite-core,ThreadLocalSelectArgTest.testStuff,"	@Test
	public void testStuff() {
		ThreadLocalSelectArg arg = new ThreadLocalSelectArg();
		assertNull(arg.getValue());
		assertFalse(arg.isValueSet());
		arg.setValue(null);
		assertNull(arg.getValue());
		assertTrue(arg.isValueSet());
	}
",non-flaky,5
118725,netty_netty,BigEndianCompositeByteBufTest.testInternalNioBufferAfterRelease,"    @Test(expected = UnsupportedOperationException.class)
    public void testInternalNioBufferAfterRelease() {
        super.testInternalNioBufferAfterRelease();
    }
",non-flaky,5
110144,Wikidata_wikidata-toolkit,ClientConfigurationTest.testLanguageFilterArgumentsEmpty,"	@Test
	public void testLanguageFilterArgumentsEmpty() {
		String[] args = new String[] { ""--fLang"", ""-"" };
		ClientConfiguration config = new ClientConfiguration(args);

		Set<String> langFilters = new HashSet<>();

		assertEquals(langFilters, config.getFilterLanguages());
	}
",non-flaky,5
77523,dropwizard_dropwizard,DropwizardAppRuleTest.canPerformAdminTaskWithPostBody,"    @Test
    public void canPerformAdminTaskWithPostBody() {
        final String response
            = RULE.client().target(""http://localhost:""
            + RULE.getAdminPort() + ""/tasks/echo"")
            .request()
            .post(Entity.entity(""Custom message"", MediaType.TEXT_PLAIN), String.class);

        assertThat(response).isEqualTo(""Custom message"");
    }
",non-flaky,5
135745,Netflix_Hystrix,HystrixPropertyTest.testSeries1,"    @Test
    public void testSeries1() {
        HystrixProperty<String> nullValue = Factory.nullProperty();
        HystrixProperty<String> a = Factory.asProperty(nullValue, null);

        @SuppressWarnings(""unchecked"")
        HystrixProperty<String> withDefault = Factory.asProperty(a, nullValue, nullValue, Factory.asProperty(""b""));
        assertEquals(""b"", withDefault.get());
    }
",non-flaky,5
91394,OpenLCB_OpenLCB_Java,XmlHelperTest.testCTor,"    @Test
    public void testCTor() {
        Assume.assumeFalse(GraphicsEnvironment.isHeadless());
        XmlHelper t = new XmlHelper();
        Assert.assertNotNull(""exists"",t);
    }
",non-flaky,5
89306,apache_samza,TestKafkaSystemAdminWithMock.testGetSystemStreamMetaDataWithValidTopic,"  @Test
  public void testGetSystemStreamMetaDataWithValidTopic() {
    System.out.println(""STARTING"");
    Map<String, SystemStreamMetadata> metadataMap =
        kafkaSystemAdmin.getSystemStreamMetadata(ImmutableSet.of(VALID_TOPIC));

    // verify metadata size
    assertEquals(""metadata should return for 1 topic"", metadataMap.size(), 1);
    System.out.println(""STARTING1"");
    // verify the metadata streamName
    assertEquals(""the stream name should be "" + VALID_TOPIC, metadataMap.get(VALID_TOPIC).getStreamName(), VALID_TOPIC);
    System.out.println(""STARTING2"");
    // verify the offset for each partition
    Map<Partition, SystemStreamMetadata.SystemStreamPartitionMetadata> systemStreamPartitionMetadata =
        metadataMap.get(VALID_TOPIC).getSystemStreamPartitionMetadata();
    assertEquals(""there are 2 partitions"", systemStreamPartitionMetadata.size(), 2);
    System.out.println(""STARTING3"");
    SystemStreamMetadata.SystemStreamPartitionMetadata partition0Metadata =
        systemStreamPartitionMetadata.get(new Partition(0));
    assertEquals(""oldest offset for partition 0"", partition0Metadata.getOldestOffset(),
        KAFKA_BEGINNING_OFFSET_FOR_PARTITION0.toString());
    assertEquals(""upcoming offset for partition 0"", partition0Metadata.getUpcomingOffset(),
        KAFKA_END_OFFSET_FOR_PARTITION0.toString());
    assertEquals(""newest offset for partition 0"", partition0Metadata.getNewestOffset(),
        Long.toString(KAFKA_END_OFFSET_FOR_PARTITION0 - 1));
    System.out.println(""STARTING4"");
    SystemStreamMetadata.SystemStreamPartitionMetadata partition1Metadata =
        systemStreamPartitionMetadata.get(new Partition(1));
    assertEquals(""oldest offset for partition 1"", partition1Metadata.getOldestOffset(),
        KAFKA_BEGINNING_OFFSET_FOR_PARTITION1.toString());
    assertEquals(""upcoming offset for partition 1"", partition1Metadata.getUpcomingOffset(),
        KAFKA_END_OFFSET_FOR_PARTITION1.toString());
    assertEquals(""newest offset for partition 1"", partition1Metadata.getNewestOffset(),
        Long.toString(KAFKA_END_OFFSET_FOR_PARTITION1 - 1));
  }
",non-flaky,5
70766,apache_kafka,StartAndStopCounterTest.shouldRecordStops,"    @Test
    public void shouldRecordStops() {
        assertEquals(0, counter.stops());
        counter.recordStop();
        assertEquals(1, counter.stops());
        counter.recordStop();
        assertEquals(2, counter.stops());
        assertEquals(2, counter.stops());
    }
",non-flaky,5
30929,camunda-cloud_zeebe,MsgPackReadingBoundaryCheckingExceptionTest.shouldNotReadNegativeValue,"  @Test
  public void shouldNotReadNegativeValue() {
    // given
    final DirectBuffer negativeTestingBuf = new UnsafeBuffer(testingBuf);
    reader.wrap(negativeTestingBuf, 0, negativeTestingBuf.capacity());

    // then
    exception.expect(MsgpackReaderException.class);
    exception.expectMessage(exceptionMessage);

    // when
    codeUnderTest.accept(reader);
  }
",non-flaky,5
114031,apache_struts,FileDownloadActionTest.testSanitizeInputPathShouldReturnNullForLeadingWebInf,"	@Test
	public void testSanitizeInputPathShouldReturnNullForLeadingWebInf() throws Exception {
		assertNull(fileDownloadAction.sanitizeInputPath(""WEB-INF/foo""));
	}
",non-flaky,5
30923,camunda-cloud_zeebe,MsgPackWriterMiscTest.testEncodedStringHeaderLength,"  @Test
  public void testEncodedStringHeaderLength() {
    assertThat(MsgPackWriter.getEncodedStringHeaderLength(0x1f)).isEqualTo(1);
    assertThat(MsgPackWriter.getEncodedStringHeaderLength(0xff)).isEqualTo(2);
    assertThat(MsgPackWriter.getEncodedStringHeaderLength(0xffff)).isEqualTo(3);
    assertThat(MsgPackWriter.getEncodedStringHeaderLength(0x7fff_ffff)).isEqualTo(5);
  }
",non-flaky,5
77465,opensearch-project_OpenSearch,LoggingListenerTests.annotatedTestMethod,"        @TestIssueLogging(value =""foo.bar:ERROR"", issueUrl = ""https://example.com"")
        public void annotatedTestMethod() {

        }
",non-flaky,5
354,apache_hadoop,TestNetworkTopology.testChooseRandomExcludedNodeList,"  @Test
  public void testChooseRandomExcludedNodeList() {
    String scope = ""~"" + NodeBase.getPath(dataNodes[0]);
    Set<Node> excludedNodes = new HashSet<>();
    excludedNodes.add(dataNodes[3]);
    excludedNodes.add(dataNodes[5]);
    excludedNodes.add(dataNodes[7]);
    excludedNodes.add(dataNodes[9]);
    excludedNodes.add(dataNodes[13]);
    excludedNodes.add(dataNodes[18]);
    Map<Node, Integer> frequency = pickNodesAtRandom(100, scope, excludedNodes);

    assertEquals(""dn[3] should be excluded"", 0,
        frequency.get(dataNodes[3]).intValue());
    assertEquals(""dn[5] should be exclude18d"", 0,
        frequency.get(dataNodes[5]).intValue());
    assertEquals(""dn[7] should be excluded"", 0,
        frequency.get(dataNodes[7]).intValue());
    assertEquals(""dn[9] should be excluded"", 0,
        frequency.get(dataNodes[9]).intValue());
    assertEquals(""dn[13] should be excluded"", 0,
        frequency.get(dataNodes[13]).intValue());
    assertEquals(""dn[18] should be excluded"", 0,
        frequency.get(dataNodes[18]).intValue());
    for (Node key : dataNodes) {
      if (excludedNodes.contains(key)) {
        continue;
      }
      // all nodes except the first should be more than zero
      assertTrue(frequency.get(key) > 0 || key == dataNodes[0]);
    }
  }
",non-flaky,5
160357,ConsenSys_teku,SlashingProtectionExporterTest.shouldExportSlashProtection,"  @Test
  public void shouldExportSlashProtection(@TempDir Path tempDir)
      throws IOException, URISyntaxException {
    final Path exportedFile = tempDir.resolve(""exportedFile.json"").toAbsolutePath();
    final SlashingProtectionExporter exporter = new SlashingProtectionExporter(tempDir);

    final Optional<String> error =
        exporter.readSlashProtectionFile(
            usingResourceFile(""slashProtection.yml"", tempDir), LOG::debug);
    assertThat(error).isEmpty();
    assertThat(Files.exists(exportedFile)).isFalse();
    exporter.saveToFile(exportedFile.toString(), LOG::debug);
    assertThat(Files.exists(exportedFile)).isTrue();
  }
",non-flaky,5
98641,nutzam_nutz,SimpleAdaptorTest.test_default_value,"    @Test
    public void test_default_value() {
    	resp = get(""/adaptor/default_value?abc=123"");
    	assertEquals(200, resp.getStatus());
    	assertEquals(""123"", resp.getContent());
    	

    	resp = get(""/adaptor/default_value"");
    	assertEquals(200, resp.getStatus());
    	assertEquals(""123456"", resp.getContent());
    }
",non-flaky,5
91379,OpenLCB_OpenLCB_Java,TrainNodeCacheTest.put,"    @Test
    public void testCTor() {
        NodeID nodeID = new NodeID(new byte[]{1,2,3,4,5,6});
        Connection testConnection = new AbstractConnection(){
            public void put(Message msg, Connection node) {
            }
",non-flaky,5
160396,ConsenSys_teku,ChainDataProviderTest.getStateRoot_shouldGetRootAtGenesis,"  @Test
  public void getStateRoot_shouldGetRootAtGenesis()
      throws ExecutionException, InterruptedException {
    final ChainDataProvider provider =
        new ChainDataProvider(spec, recentChainData, combinedChainDataClient);

    final Optional<tech.pegasys.teku.spec.datastructures.state.beaconstate.BeaconState> state =
        combinedChainDataClient.getStateAtSlotExact(ZERO).get();
    final Optional<Root> maybeStateRoot = provider.getStateRoot(""genesis"").get();
    assertThat(maybeStateRoot).isPresent();
    assertThat(maybeStateRoot.orElseThrow().root).isEqualTo(state.orElseThrow().hashTreeRoot());
  }
",non-flaky,5
59659,looly_hutool,ScriptUtilTest.invokeTest,"	@Test
	public void invokeTest() {
		final Object result = ScriptUtil.invoke(ResourceUtil.readUtf8Str(""filter1.js""), ""filter1"", 2, 1);
		Assert.assertTrue((Boolean) result);
	}
",non-flaky,5
137122,spring-projects_spring-framework,AbstractMethodMetadataTests.isStatusWhenStaticReturnsTrue,"	@Test
	public void isStatusWhenStaticReturnsTrue() {
		assertThat(getTagged(WithStaticMethod.class).isStatic()).isTrue();
	}
",non-flaky,5
134022,CorfuDB_CorfuDB,ServerHandshakeHandlerTest.testHandshakeSucceed,"    @Test
    public void testHandshakeSucceed() {
        // Get a HandshakeRequestMsg with specified server node id.
        RequestMsg request = getRequestMsg(
                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.IGNORE),
                getHandshakeRequestMsg(DEFAULT_UUID, SERVER_NODEID)
        );

        embeddedChannel.writeInbound(request);
        Object out = embeddedChannel.readOutbound();

        // Verify that the handshake is complete and HandshakeResponse is sent back.
        assertTrue(out instanceof ResponseMsg);
        assertEquals(SERVER_NODEID, getUUID(((ResponseMsg) out).getPayload().getHandshakeResponse()
                .getServerId()));
    }
",non-flaky,5
60911,apache_druid,PostAveragerAggregatorCalculatorTest.testApplyMissingColumn,"  @Test
  public void testApplyMissingColumn()
  {
    event.put(""count"", 10.0);

    Row result = pac.apply(row);

    Assert.assertEquals(0.0, result.getMetric(""avgCountRatio"").floatValue(), 0.0);
    Assert.assertNull(result.getRaw(""avgCountRatio""));
  }
",non-flaky,5
99749,apache_cassandra,AsyncStreamingInputPlusTest.read,"    @Test
    public void read() throws IOException
    {
        inputPlus = new AsyncStreamingInputPlus(channel);
        // put two buffers of 8 bytes each into the queue.
        // then read an int, then a long. the latter tests offset into the inputPlus, as well as spanning across queued buffers.
        // the values of those int/long will both be '42', but spread across both queue buffers.
        ByteBuf buf = channel.alloc().buffer(8);
        buf.writeInt(42);
        buf.writerIndex(8);
        inputPlus.append(buf);
        buf = channel.alloc().buffer(8);
        buf.writeInt(42);
        buf.writerIndex(8);
        inputPlus.append(buf);
        Assert.assertEquals(16, inputPlus.unsafeAvailable());

//        ByteBuffer out = ByteBuffer.allocate(4);
//        int readCount = inputPlus.read(out);
//        Assert.assertEquals(4, readCount);
//        out.flip();
//        Assert.assertEquals(42, out.getInt());
//        Assert.assertEquals(12, inputPlus.unsafeAvailable());

//        out = ByteBuffer.allocate(8);
//        readCount = inputPlus.read(out);
//        Assert.assertEquals(8, readCount);
//        out.flip();
//        Assert.assertEquals(42, out.getLong());
//        Assert.assertEquals(4, inputPlus.unsafeAvailable());
    }
",non-flaky,5
99741,apache_cassandra,FQLReplayTest.writeMarshallablePayload,"    @Test (expected = IORuntimeException.class)
    public void testFutureVersion() throws Exception
    {
        FQLQueryReader reader = new FQLQueryReader();
        File dir = Files.createTempDirectory(""chronicle"").toFile();
        try (ChronicleQueue queue = ChronicleQueueBuilder.single(dir).build())
        {
            ExcerptAppender appender = queue.acquireAppender();
            appender.writeDocument(new BinLog.ReleaseableWriteMarshallable() {
                protected long version()
                {
                    return 999;
                }

                protected String type()
                {
                    return FullQueryLogger.SINGLE_QUERY;
                }

                public void writeMarshallablePayload(WireOut wire)
                {
                    wire.write(""future-field"").text(""future_value"");
                }
",non-flaky,5
33722,alibaba_fastjson,JSONPathTest.isEOF2,"  @Test
  public void isEOF2() throws Throwable {
    // Arrange
    Object objectUnderTest = Reflector.getInstance(""com.alibaba.fastjson.JSONPath$JSONPathParser"");
    Reflector.setField(objectUnderTest, ""path"", ""!"");
    Reflector.setField(objectUnderTest, ""pos"", 1);
    Reflector.setField(objectUnderTest, ""level"", 0);
    Reflector.setField(objectUnderTest, ""ch"", '\u0000');
    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.JSONPath$JSONPathParser"");
    Method m = c.getDeclaredMethod(""isEOF"");
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(objectUnderTest);
    // Assert result
    Assert.assertEquals(true, retval);
  }
",non-flaky,5
77579,dropwizard_dropwizard,HttpClientBuilderTest.setCredentials,"    @Test
            public void setCredentials(AuthScope authscope, Credentials credentials) {
            }
",non-flaky,5
177249,line_armeria,DnsAddressEndpointGroupTest.ipV4MappedOrCompatibleAddresses,"    @Test
    public void ipV4MappedOrCompatibleAddresses() throws Exception {
        try (TestDnsServer server = new TestDnsServer(ImmutableMap.of(
                new DefaultDnsQuestion(""bar.com."", AAAA),
                new DefaultDnsResponse(0).addRecord(ANSWER, newCompatibleAddressRecord(""bar.com."", ""1.1.1.1""))
                                         .addRecord(ANSWER, newCompatibleAddressRecord(""bar.com."", ""1.1.1.2""))
                                         .addRecord(ANSWER, newMappedAddressRecord(""bar.com."", ""1.1.1.1""))
                                         .addRecord(ANSWER, newMappedAddressRecord(""bar.com."", ""1.1.1.3""))
        ))) {
            try (DnsAddressEndpointGroup group =
                         DnsAddressEndpointGroup.builder(""bar.com"")
                                                .port(8080)
                                                .serverAddresses(server.addr())
                                                .resolvedAddressTypes(ResolvedAddressTypes.IPV6_ONLY)
                                                .build()) {

                assertThat(group.whenReady().get()).containsExactly(
                        Endpoint.of(""bar.com"", 8080).withIpAddr(""1.1.1.1""),
                        Endpoint.of(""bar.com"", 8080).withIpAddr(""1.1.1.2""),
                        Endpoint.of(""bar.com"", 8080).withIpAddr(""1.1.1.3""));
            }
        }
    }
",non-flaky,5
114103,aws_aws-sdk-java-v2,EnhancedTypeDocumentationConfigurationTest.equalsHashCode,"    @Test
    public void equalsHashCode() {
        EnhancedTypeDocumentConfiguration configuration =
            EnhancedTypeDocumentConfiguration.builder()
                                             .preserveEmptyObject(true)
                                             .ignoreNulls(false)
                                             .build();

        EnhancedTypeDocumentConfiguration another =
            EnhancedTypeDocumentConfiguration.builder()
                                             .preserveEmptyObject(true)
                                             .ignoreNulls(false)
                                             .build();

        EnhancedTypeDocumentConfiguration different =
            EnhancedTypeDocumentConfiguration.builder()
                                             .preserveEmptyObject(false)
                                             .ignoreNulls(true)
                                             .build();

        assertThat(configuration).isEqualTo(another);
        assertThat(configuration.hashCode()).isEqualTo(another.hashCode());
        assertThat(configuration).isNotEqualTo(different);
        assertThat(configuration.hashCode()).isNotEqualTo(different.hashCode());
    }
",non-flaky,5
98217,apache_jackrabbit,CreateRepositoryTest.createRepositories,"    @Test
    public void createRepositories() throws Exception {
        doCreateRepositories(""jackrabbit-2.6"");
    }
",non-flaky,5
38199,palantir_atlasdb,RocksDbKeyValueServiceTest.testCreate,"    @Test
    public void testCreate() {
        TableReference otherTable = TableReference.createWithEmptyNamespace(""yodog"");
        db.createTable(TABLE, AtlasDbConstants.EMPTY_TABLE_METADATA);
        db.createTable(otherTable, AtlasDbConstants.EMPTY_TABLE_METADATA);
        db.createTable(TRANSACTION_TABLE, AtlasDbConstants.EMPTY_TABLE_METADATA);
        assertEquals(ImmutableSet.of(TABLE, otherTable, TRANSACTION_TABLE),
                db.getAllTableNames());
    }
",non-flaky,5
94809,ktuukkan_marine-api,AISMessage04Test.getUtcYear,"    @Test
    public void getUtcYear() throws Exception {
        assertEquals(2012, msg.getUtcYear());
    }
",non-flaky,5
95698,togglz_togglz,EnumFeatureMetaDataTest.constructorWillPopulateDefaultActivationStrategyFromAnnotations,"    @Test
    public void constructorWillPopulateDefaultActivationStrategyFromAnnotations() throws Exception {
        // act
        EnumFeatureMetaData metaData = new EnumFeatureMetaData(TestFeatures.FEATURE_WITH_DEFAULT_STATE);

        FeatureState featureState = metaData.getDefaultFeatureState();

        assertThat(featureState, notNullValue());
        assertThat(featureState.isEnabled(), is(true));
        assertThat(featureState.getStrategyId(), is(""SomeActivationId""));
        assertThat(featureState.getParameter(""SomeParameterName""), is(""someValue1,someValue2""));
        assertThat(featureState.getParameter(""SomeParameterName2""), is(""someValue3,someValue4""));
    }
",non-flaky,5
60868,apache_druid,RedisCacheConfigTest.testInvalidClusterNodePort0,"  @Test
  public void testInvalidClusterNodePort0() throws IOException
  {
    ObjectMapper mapper = new ObjectMapper();
    RedisCacheConfig fromJson = mapper.readValue(
        ""{\""expiration\"": 1000,""
        + ""\""cluster\"": {""
        + ""\""nodes\"": \""127.0.0.1:0\"""" //<===Invalid Port
        + ""}""
        + ""}"",
        RedisCacheConfig.class
    );

    expectedException.expect(new ExceptionMatcher(
        IAE.class,
        new ContainsMatcher(""Invalid port"")
    ));
    RedisCacheFactory.create(fromJson);
  }
",non-flaky,5
98291,spotify_docker-client,ContainerTest.testLoadFromFixtureMissingPorts,"  @Test
  public void testLoadFromFixtureMissingPorts() throws Exception {
    final Container container = objectMapper
            .readValue(fixture(""fixtures/container-no-ports-or-names.json""), Container.class);
    assertThat(container.id(), is(""1009""));
  }
",non-flaky,5
84636,apache_zookeeper,GetAllChildrenNumberTest.testGetAllChildrenNumberSync,"    @Test
    public void testGetAllChildrenNumberSync() throws KeeperException, InterruptedException {
        //a bad case
        try {
            zk.getAllChildrenNumber(null);
            fail(""the path for getAllChildrenNumber must not be null."");
        } catch (IllegalArgumentException e) {
            //expected
        }

        assertEquals(EPHEMERAL_CNT, zk.getAllChildrenNumber(BASE + ""/0""));
        assertEquals(0, zk.getAllChildrenNumber(BASE + ""/0/ephem0""));
        assertEquals(0, zk.getAllChildrenNumber(BASE_EXT));
        assertEquals(PERSISTENT_CNT + PERSISTENT_CNT * EPHEMERAL_CNT, zk.getAllChildrenNumber(BASE));
        // 6(EPHEMERAL) + 2(PERSISTENT) + 3(""/zookeeper,/zookeeper/quota,/zookeeper/config"") + 1(BASE_EXT) + 1(BASE) = 13
        assertEquals(13, zk.getAllChildrenNumber(""/""));
    }
",non-flaky,5
133907,cdancy_jenkins-rest,SystemApiLiveTest.testGetSystemInfo,"    @Test
    public void testGetSystemInfo() {
        final SystemInfo version = api().systemInfo();
        assertNotNull(version);
        assertTrue(version.jenkinsVersion() != null);
    }
",non-flaky,5
160345,ConsenSys_teku,MetricsPublisherTest.beforeEach,"  @BeforeEach
  public void beforeEach() throws Exception {
    mockWebServer.start();
  }
",non-flaky,5
86103,graylog2_graylog2-server,DBEventProcessorStateServiceTest.loading,"    @Test
    public void loading() {
        final Optional<EventProcessorStateDto> stateDto = stateService.findByEventDefinitionId(""54e3deadbeefdeadbeefaff3"");

        assertThat(stateDto).isPresent().get().satisfies(dto -> {
            assertThat(dto.id()).isEqualTo(""54e3deadbeefdeadbeefaffe"");
            assertThat(dto.eventDefinitionId()).isEqualTo(""54e3deadbeefdeadbeefaff3"");
            assertThat(dto.minProcessedTimestamp()).isEqualTo(DateTime.parse(""2019-01-01T00:00:00.000Z""));
            assertThat(dto.maxProcessedTimestamp()).isEqualTo(DateTime.parse(""2019-01-01T01:00:00.000Z""));
        });
    }
",non-flaky,5
33926,apache_camel,CordaConsumerVaultTrackIT.vaultTrackTest,"    @Test
    public void vaultTrackTest() throws Exception {
        mockResult.expectedMinimumMessageCount(1);
        mockError.expectedMessageCount(0);
        MockEndpoint.assertIsSatisfied(context);
    }
",non-flaky,5
113758,salesforce_reactive-grpc,GrpcRetryTest.oneToManyRetryAfter,"    @Test
    public void oneToManyRetryAfter() {
        Flux<Integer> test = newThreeErrorMono()
                .<Flux<Integer>>as(GrpcRetry.OneToMany.retryAfter(Mono::flux, Duration.ofMillis(10)));

        StepVerifier.create(test)
                .expectNext(0)
                .expectComplete()
                .verify(Duration.ofSeconds(1));
    }
",non-flaky,5
175792,GoogleCloudPlatform_google-cloud-eclipse,AppEngineApplicationQueryJobTest.testRun_abandonIfProjectSelectorHasNoSelection,"  @Test
  public void testRun_abandonIfProjectSelectorHasNoSelection()
      throws ProjectRepositoryException, InterruptedException {
    when(projectRepository.getAppEngineApplication(credential, ""projectId""))
        .thenReturn(AppEngine.NO_APPENGINE_APPLICATION);
    when(projectSelection.isEmpty()).thenReturn(true);

    queryJob.schedule();
    queryJob.join();

    verify(isLatestQueryJob).apply(queryJob);
    verify(projectSelector, never()).setStatusLink(anyString(), anyString());
  }
",non-flaky,5
156082,soot-oss_soot,PolymorphicDispatchTest.findsTarget,"  @Test
  public void findsTarget() {
    String methodSignature = methodSigFromComponents(TEST_TARGET_CLASS, ""void"", ""unambiguousMethod"", """");
    final SootMethod sootMethod = prepareTarget(methodSignature, TEST_TARGET_CLASS);
    Assert.assertTrue(sootMethod.isConcrete());

    Body body = sootMethod.retrieveActiveBody();
    Assert.assertNotNull(body);
    // validate individual method
    body.validate();

    for (Unit u : body.getUnits()) {
      if (u instanceof AssignStmt) {
        Value right = ((AssignStmt) u).getRightOp();
        if (right instanceof InvokeExpr) {
          SootMethod m = ((InvokeExpr) right).getMethodRef().resolve();
          Assert.assertFalse(m.isPhantom());
          Assert.assertTrue(m.isDeclared());
          if (m.getName().equals(""invoke"")) {
            Assert.assertTrue(m.isNative());
          }
        }
      }
    }
  }
",non-flaky,5
176828,ctco_cukes,LDIFUtilsTest.read,"    @Test
    public void read() throws Exception {
        Map<String, Attributes> entities = LDIFUtils.read(getClass().getResourceAsStream(""/example.ldif""));
        assertThat(entities.size(), is(4));
    }
",non-flaky,5
43037,trinodb_trino,BaseDynamicPartitionPruningTest.testSemiJoinLargeBuildSideRangeDynamicFiltering,"    @Test(timeOut = 30_000)
    public void testSemiJoinLargeBuildSideRangeDynamicFiltering()
    {
        @Language(""SQL"") String selectQuery = ""SELECT * FROM partitioned_lineitem WHERE orderkey IN (SELECT orderkey FROM orders)"";
        ResultWithQueryId<MaterializedResult> result = getDistributedQueryRunner().executeWithQueryId(
                getSession(),
                selectQuery);
        MaterializedResult expected = computeActual(withDynamicFilteringDisabled(), selectQuery);
        assertEqualsIgnoreOrder(result.getResult(), expected);

        OperatorStats probeStats = searchScanFilterAndProjectOperatorStats(result.getQueryId(), getQualifiedTableName(PARTITIONED_LINEITEM));
        // Probe-side is fully scanned because the build-side is too large for dynamic filtering
        assertEquals(probeStats.getInputPositions(), LINEITEM_COUNT);

        DynamicFiltersStats dynamicFiltersStats = getDynamicFilteringStats(result.getQueryId());
        assertEquals(dynamicFiltersStats.getTotalDynamicFilters(), 1L);
        assertEquals(dynamicFiltersStats.getLazyDynamicFilters(), 1L);
        assertEquals(dynamicFiltersStats.getReplicatedDynamicFilters(), 0L);
        assertEquals(dynamicFiltersStats.getDynamicFiltersCompleted(), 1L);

        DynamicFilterDomainStats domainStats = getOnlyElement(dynamicFiltersStats.getDynamicFilterDomainStats());
        assertEquals(
                domainStats.getSimplifiedDomain(),
                Domain.create(ValueSet.ofRanges(range(BIGINT, 1L, true, 60000L, true)), false)
                        .toString(getSession().toConnectorSession()));
    }
",non-flaky,5
112690,hwang-pku_ormlite-core,SqlExceptionUtilTest.testExceptionWithSQLException,"	@Test
	public void testExceptionWithSQLException() {
		String sqlReason = ""sql exception message"";
		String sqlState = ""sql exception state"";
		Throwable cause = new SQLException(sqlReason, sqlState);
		String msg = ""hello"";
		SQLException e = SqlExceptionUtil.create(msg, cause);
		assertEquals(msg, e.getMessage());
		assertEquals(sqlState, e.getSQLState());
		assertEquals(cause, e.getCause());
	}
",non-flaky,5
77556,dropwizard_dropwizard,ResourceExtensionRandomPortsTest.eachTestShouldUseANewPort,"    @Test
    public void eachTestShouldUseANewPort() throws Throwable {
        final ResourceExtension resources = ResourceExtension.builder()
                .setTestContainerFactory(new GrizzlyTestContainerFactory())
                .build();
        Set<Integer> usedPorts = new HashSet<>();

        for (int i = 0; i < 10; i++) {
            resources.before();
            final int port = resources.target(""/"").getUri().getPort();
            usedPorts.add(port);
        }
        assertThat(usedPorts).hasSizeGreaterThanOrEqualTo(2);
    }
",non-flaky,5
175740,GoogleCloudPlatform_google-cloud-eclipse,MultipleConnectionsTest.testTwoConnectionsBehaviour,"	@Test
	public void testTwoConnectionsBehaviour() throws CoreException, InterruptedException {
		connector = new SocketListenMultiConnector();
		Map<String, String> arguments = new HashMap<>();
		arguments.put(""port"", Integer.toString(port));
		arguments.put(""connectionLimit"", ""2"");
		connector.connect(arguments, new NullProgressMonitor(), launch);
		Thread.sleep(200);

		assertTrue(""first connect should succeed"", connect());
		assertTrue(""second connect should succeed"", connect());
	}
",non-flaky,5
94641,square_okhttp,DispatcherTest.intercept,"  @Test public void synchronousCallAccessors() throws Exception {
              @Override public Response intercept(Chain chain) throws IOException {
                try {
                  ready.countDown();
                  waiting.await();
                } catch (InterruptedException e) {
                  throw new AssertionError();
                }
                throw new IOException();
              }
",non-flaky,5
97985,ReactiveX_RxJava,ObservableTests.run,"    @Test
    public void testErrorThrownWithoutErrorHandlerAsynchronous() throws InterruptedException {
        final CountDownLatch latch = new CountDownLatch(1);
        final AtomicReference<Throwable> exception = new AtomicReference<Throwable>();
        Observable.create(new OnSubscribeFunc<String>() {

            @Override
            public Subscription onSubscribe(final Observer<? super String> observer) {
                new Thread(new Runnable() {

                    @Override
                    public void run() {
                        try {
                            observer.onError(new Error(""failure""));
                        } catch (Throwable e) {
                            // without an onError handler it has to just throw on whatever thread invokes it
                            exception.set(e);
                        }
                        latch.countDown();
                    }
",non-flaky,5
70838,apache_kafka,WorkerSourceTaskTest.testCommitFailure,"    @Test
    public void testCommitFailure() throws Exception {
        // Test that the task commits properly when prompted
        createWorkerTask();

        sourceTask.initialize(EasyMock.anyObject(SourceTaskContext.class));
        EasyMock.expectLastCall();
        sourceTask.start(TASK_PROPS);
        EasyMock.expectLastCall();
        statusListener.onStartup(taskId);
        EasyMock.expectLastCall();

        // We'll wait for some data, then trigger a flush
        final CountDownLatch pollLatch = expectPolls(1);
        expectOffsetFlush(true);

        sourceTask.stop();
        EasyMock.expectLastCall();
        expectOffsetFlush(false);

        statusListener.onShutdown(taskId);
        EasyMock.expectLastCall();

        producer.close(EasyMock.anyObject(Duration.class));
        EasyMock.expectLastCall();

        transformationChain.close();
        EasyMock.expectLastCall();

        PowerMock.replayAll();

        workerTask.initialize(TASK_CONFIG);
        Future<?> taskFuture = executor.submit(workerTask);

        assertTrue(awaitLatch(pollLatch));
        assertTrue(workerTask.commitOffsets());
        workerTask.stop();
        assertTrue(workerTask.awaitStop(1000));

        taskFuture.get();
        assertPollMetrics(1);

        PowerMock.verifyAll();
    }
",non-flaky,5
95734,togglz_togglz,JDBCStateRepositoryTest.testShouldUpdateExistingDatabaseEntry,"    @Test
    public void testShouldUpdateExistingDatabaseEntry() throws SQLException {

        /*
         * GIVEN a database row containing a simple feature state
         */
        update(dataSource, ""INSERT INTO TOGGLZ VALUES ('F1', 1, 'myStrategy', 'param23=foobar')"");

        /*
         * AND the database entries are like expected
         */
        assertEquals(1l, query(dataSource, ""SELECT COUNT(*) FROM TOGGLZ WHERE FEATURE_NAME = 'F1'""));
        assertEquals(1, query(dataSource, ""SELECT FEATURE_ENABLED FROM TOGGLZ WHERE FEATURE_NAME = 'F1'""));
        assertEquals(""myStrategy"", query(dataSource, ""SELECT STRATEGY_ID FROM TOGGLZ WHERE FEATURE_NAME = 'F1'""));
        assertEquals(""param23=foobar"", query(dataSource, ""SELECT STRATEGY_PARAMS FROM TOGGLZ WHERE FEATURE_NAME = 'F1'""));

        /*
         * WHEN the repository writes new state
         */
        FeatureState state = new FeatureState(TestFeature.F1)
            .disable()
            .setStrategyId(""someId"")
            .setParameter(""param"", ""foo"");
        repository.setFeatureState(state);

        /*
         * THEN the properties should be set like expected
         */
        assertEquals(1l, query(dataSource, ""SELECT COUNT(*) FROM TOGGLZ WHERE FEATURE_NAME = 'F1'""));
        assertEquals(0, query(dataSource, ""SELECT FEATURE_ENABLED FROM TOGGLZ WHERE FEATURE_NAME = 'F1'""));
        assertEquals(""someId"", query(dataSource, ""SELECT STRATEGY_ID FROM TOGGLZ WHERE FEATURE_NAME = 'F1'""));
        assertEquals(""param=foo"", query(dataSource, ""SELECT STRATEGY_PARAMS FROM TOGGLZ WHERE FEATURE_NAME = 'F1'""));

	}
",non-flaky,5
98659,nutzam_nutz,Issue1212MappingTest.test_issue_1212,"    @Test
    public void test_issue_1212() {
        get(""/mapping/issue1212/sayhi"");
        assertEquals(200, resp.getStatus());
    }
",non-flaky,5
38270,palantir_atlasdb,AbstractSerializableTransactionTest.testColumnSelection,"    @Test
    public void testColumnSelection() {
        String initialValue = ""100"";
        Transaction t0 = startTransaction();
        put(t0, ""row1"", ""col1"", initialValue);
        put(t0, ""row1"", ""col2"", initialValue);
        put(t0, ""row2"", ""col1"", initialValue);
        t0.commit();

        Transaction t1 = startTransaction();
        BatchingVisitables.copyToList(t1.getRange(TEST_TABLE, RangeRequest.builder().retainColumns(ImmutableList.of(PtBytes.toBytes(""col1""))).build()));
        get(t1, ""row1"", ""col2"");

        // We need to do at least one put so we don't get caught by the read only code path
        put(t1, ""row22"", ""col2"", initialValue);

        t1.commit();
    }
",non-flaky,5
59618,looly_hutool,BeanValidatorUtilTest.propertyValidatorTest,"	@Test
	public void propertyValidatorTest() {
		BeanValidationResult result = ValidationUtil.warpValidateProperty(new TestClass(), ""name"");
		Assert.assertFalse(result.isSuccess());
		Assert.assertEquals(1, result.getErrorMessages().size());
	}
",non-flaky,5
21266,androidx_androidx,PreferenceSingleLineTitleTest.bindViewHolder_singleLineTitleSetToTrue_shouldSetSingleLineToTrue,"    @Test
    public void bindViewHolder_singleLineTitleSetToTrue_shouldSetSingleLineToTrue() {
        PreferenceViewHolder holder = PreferenceViewHolder.createInstanceForTests(mViewGroup);
        mPreference.setSingleLineTitle(true);
        mPreference.onBindViewHolder(holder);

        verify(mTitleView).setSingleLine(true);
    }
",non-flaky,5
77449,opensearch-project_OpenSearch,DependencyLicensesTaskTests.givenProjectWithADependencyMappingThenShouldReturnSilently,"    @Test
    public void givenProjectWithADependencyMappingThenShouldReturnSilently() throws Exception {
        project.getDependencies().add(""compile"", dependency);

        File licensesDir = getLicensesDir(project);
        createAllDefaultDependencyFiles(licensesDir, ""groovy"");

        Map<String, String> mappings = new HashMap<>();
        mappings.put(""from"", ""groovy-all"");
        mappings.put(""to"", ""groovy"");

        task.get().mapping(mappings);
        task.get().checkDependencies();
    }
",non-flaky,5
156054,jReddit_jReddit,JsonUtilsTest.testSafeJsonToBoolean,"    @Test
    public void testSafeJsonToBoolean() {
        Assert.assertNull(JsonUtils.safeJsonToBoolean(null));
        Assert.assertFalse(JsonUtils.safeJsonToBoolean(""abcd""));
        Assert.assertFalse(JsonUtils.safeJsonToBoolean(""""));
        Assert.assertFalse(JsonUtils.safeJsonToBoolean(""3522""));
        Assert.assertFalse(JsonUtils.safeJsonToBoolean(""25275738927589278572891""));
        Assert.assertFalse(JsonUtils.safeJsonToBoolean(""-25275738927589278572891""));
        Assert.assertTrue(JsonUtils.safeJsonToBoolean(""true""));
        Assert.assertFalse(JsonUtils.safeJsonToBoolean(""false""));
        Assert.assertFalse(JsonUtils.safeJsonToBoolean(""0""));
        Assert.assertFalse(JsonUtils.safeJsonToBoolean(""1""));
        Assert.assertFalse(JsonUtils.safeJsonToBoolean(""yes""));
        Assert.assertFalse(JsonUtils.safeJsonToBoolean(""no""));
    }
",non-flaky,5
53147,cloudfoundry_uaa,SamlConfigTest.testIsWantAssertionSigned,"    @Test
    public void testIsWantAssertionSigned() throws Exception {
        assertTrue(config.isWantAssertionSigned());
    }
",non-flaky,5
135026,undertow-io_undertow,HttpStringTestCase.testOrderShorterFirst,"    @Test
    public void testOrderShorterFirst() {
        HttpString a =  new HttpString(""a"");
        HttpString aa =  new HttpString(""aa"");
        Assert.assertEquals(-1, a.compareTo(aa));
    }
",non-flaky,5
156064,jReddit_jReddit,RedditOAuthAgentTest.testTokenOAuthSystemException,"    @Test(expected=RedditOAuthException.class)
    public void testTokenOAuthSystemException() throws OAuthSystemException, OAuthProblemException, RedditOAuthException {
        when(mockOAuthClient.accessToken(any(OAuthClientRequest.class))).thenThrow(new OAuthSystemException());
        subject.token(code);
    }
",non-flaky,5
156142,soot-oss_soot,ClassRenamerTest.getName,"  @Test
  public void getName() {
    assertThat(ClassRenamer.v().getName(), equalTo(ClassRenamer.name));
  }
",non-flaky,5
33867,apache_camel,FhirHistoryIT.testOnServer,"    @Test
    public void testOnServer() throws Exception {
        Map<String, Object> headers = new HashMap<>();
        headers.put(""CamelFhir.returnType"", Bundle.class);
        headers.put(""CamelFhir.count"", 1);
        Bundle result = requestBodyAndHeaders(""direct://ON_SERVER"", null, headers);

        LOG.debug(""onServer: "" + result);
        assertNotNull(result, ""onServer result"");
        assertEquals(1, result.getEntry().size());
    }
",non-flaky,5
114073,aws_aws-sdk-java-v2,EnhancedTypeTest.navigableMapOf_ReturnsRawClassOfNavigableMap_WhenSpecifyingEnhancedType,"    @Test
    public void navigableMapOf_ReturnsRawClassOfNavigableMap_WhenSpecifyingEnhancedType() {
        EnhancedType<NavigableMap<String, Integer>> type =
            EnhancedType.navigableMapOf(EnhancedType.of(String.class), EnhancedType.of(Integer.class));

        assertThat(type.rawClass()).isEqualTo(NavigableMap.class);
        assertThat(type.rawClassParameters()).containsExactly(EnhancedType.of(String.class), EnhancedType.of(Integer.class));
    }
",non-flaky,5
84588,apache_zookeeper,ZNodeNameTest.testMissingSequenceNumber,"    @Test
    public void testMissingSequenceNumber() throws Exception {
        String[] names = {""c"", ""b-1"", ""a""};
        ZNodeName zname;

        final Collection<ZNodeName> nodeNames = Arrays.asList(names).stream()
            .map(name -> new ZNodeName(name)).sorted().collect(Collectors.toList());

        final Iterator<ZNodeName> it = nodeNames.iterator();

        zname = it.next();
        assertEquals(""b-1"", zname.getName());
        assertEquals(""b"", zname.getPrefix());
        assertEquals(Integer.valueOf(1), zname.getSequence().get());

        zname = it.next();
        assertEquals(""a"", zname.getName());
        assertEquals(""a"", zname.getPrefix());
        assertFalse(zname.getSequence().isPresent());

        zname = it.next();
        assertEquals(""c"", zname.getName());
        assertEquals(""c"", zname.getPrefix());
        assertFalse(zname.getSequence().isPresent());
    }
",non-flaky,5
175834,GoogleCloudPlatform_google-cloud-eclipse,BucketNameValidatorTest.testValidation_validNameWithDot,"  @Test
  public void testValidation_validNameWithDot() {
    assertThat(validator.validate(LENGTH_64_WITH_DOT).getSeverity(), is(IStatus.OK));
  }
",non-flaky,5
99705,apache_cassandra,DistributionSequenceTest.setSeed,"    @Test
    public void setSeed() throws Exception
    {
        Distribution dist = OptionDistribution.get(""seq(1..10)"").get();
        assertTrue(dist instanceof DistributionSequence);

        for (int seed=1; seed<500; seed+=seed)
        {
            dist.setSeed(seed);
            assertEquals(1, dist.minValue());
            assertEquals(10, dist.maxValue());
            assertEquals(5, dist.average());

            assertEquals(1, dist.inverseCumProb(0d));
            assertEquals(10, dist.inverseCumProb(1d));

            long last = dist.next();
            for (int i = 0; i < 9; i++)
            {
                long next = dist.next();
                if (next>1)
                {
                    assertEquals(next, last + 1); //increase by one each step
                }else{
                    assertEquals(last, 10); //wrap after the end
                }
                last = next;
            }
        }
    }
",non-flaky,5
177206,line_armeria,SpringApplicationItTest.contextLoads,"    @Test
    public void contextLoads() {
        assertThat(applicationContext.getBean(ArmeriaReactiveWebServerFactory.class)).isNotNull();
        assertThatThrownBy(() -> {
            applicationContext.getBean(ArmeriaAutoConfiguration.class);
        }).isInstanceOf(BeansException.class);
    }
",non-flaky,5
59625,looly_hutool,JschUtilTest.reconnectIfTimeoutTest,"	@Test
	public void reconnectIfTimeoutTest() throws InterruptedException {
		Session session = JschUtil.getSession(""sunnyserver"", 22,""mysftp"",""liuyang1234"");
		Sftp sftp = JschUtil.createSftp(session);

		Console.log(""æå°pwd: "" + sftp.pwd());
		Console.log(""cd / : "" + sftp.cd(""/""));
		Console.log(""ä¼ç ä¸æ®µæ¶é´ï¼æ¥çæ¯å¦è¶æ¶"");
		Thread.sleep(30 * 1000);

		try{
			// å½è¿æ¥è¶æ¶æ¶ï¼isConnected()ä»ç¶è¿åtrueï¼pwdå½ä»¤ä¹è½æ­£å¸¸è¿åï¼å æ­¤ï¼å©ç¨åécdå½ä»¤çè¿åç»æï¼æ¥å¤æ­æ¯å¦è¿æ¥è¶æ¶
			Console.log(""isConnected "" + sftp.getClient().isConnected());
			Console.log(""æå°pwd: "" + sftp.pwd());
			Console.log(""cd / : "" + sftp.cd(""/""));
		}catch (JschRuntimeException e) {
			e.printStackTrace();
		}

		Console.log(""è°ç¨reconnectIfTimeoutæ¹æ³ï¼å¤æ­æ¯å¦è¶æ¶å¹¶éè¿"");
		sftp.reconnectIfTimeout();

		Console.log(""æå°pwd: "" + sftp.pwd());

		IoUtil.close(sftp);
	}
",non-flaky,5
89329,apache_samza,TestKafkaSystemAdminJava.testCreateCoordinatorStream,"  @Test
  public void testCreateCoordinatorStream() {
    SystemAdmin admin = Mockito.spy(systemAdmin());
    StreamSpec spec = StreamSpec.createCoordinatorStreamSpec(""testCoordinatorStream"", ""testSystem"");

    admin.createStream(spec);
    admin.validateStream(spec);
    Mockito.verify(admin).createStream(Mockito.any());
  }
",non-flaky,5
60936,apache_druid,DoubleMinAveragerTest.testComputeResult,"  @Test
  public void testComputeResult()
  {
    BaseAverager<Number, Double> avg = new DoubleMinAverager(3, ""test"", ""field"", 1);

    Assert.assertEquals(Double.POSITIVE_INFINITY, avg.computeResult(), 0.0);

    avg.addElement(Collections.singletonMap(""field"", -1.1e100), new HashMap<>());
    Assert.assertEquals(-1.1e100, avg.computeResult(), 0.0);

    avg.addElement(Collections.singletonMap(""field"", 1.0), new HashMap<>());
    Assert.assertEquals(-1.1e100, avg.computeResult(), 0.0);

    avg.addElement(Collections.singletonMap(""field"", new Integer(1)), new HashMap<>());
    Assert.assertEquals(-1.1e100, avg.computeResult(), 0.0);

    avg.addElement(Collections.singletonMap(""field"", 5.0), new HashMap<>());
    avg.addElement(Collections.singletonMap(""field"", 2.0), new HashMap<>());
    avg.addElement(Collections.singletonMap(""field"", 3.0), new HashMap<>());
    Assert.assertEquals(2.0, avg.computeResult(), 0.0);

    avg.skip();
    avg.skip();
    Assert.assertEquals(3.0, avg.computeResult(), 0.0);
  }
",non-flaky,5
94745,ktuukkan_marine-api,Latitude27Test.minValueIsAvailable,"    @Test
    public void minValueIsAvailable() {
        assertTrue(Latitude27.isAvailable(-90*60*10000));
    }
",non-flaky,5
133936,CorfuDB_CorfuDB,ManagementHandlerTest.testHandleReportFailure0,"    @Test
    public void testHandleReportFailure0() {
        testHandleReportFailure(false);
    }
",non-flaky,5
70794,apache_kafka,DelegatingClassLoaderTest.testLoadingPluginClass,"    @Test
    public void testLoadingPluginClass() throws ClassNotFoundException {
        TestPlugins.assertAvailable();
        DelegatingClassLoader classLoader = new DelegatingClassLoader(TestPlugins.pluginPath());
        classLoader.initLoaders();
        for (String pluginClassName : TestPlugins.pluginClasses()) {
            assertNotNull(classLoader.loadClass(pluginClassName));
            assertNotNull(classLoader.pluginClassLoader(pluginClassName));
        }
    }
",non-flaky,5
156097,soot-oss_soot,AsmMethodSourceOrigNamesTest.testWriterToUTF8Buffered1,"  @Test
  public void testWriterToUTF8Buffered1() {
    final String clazz = ""org.apache.xml.serializer.WriterToUTF8Buffered"";
    final String[] params = { ""char[]"", ""int"", ""int"" };
    runXalanTest(prepareTarget(methodSigFromComponents(clazz, ""void"", ""write"", params), clazz));
  }
",non-flaky,5
160359,ConsenSys_teku,SlashingProtectionRepairerTest.shouldNotUpdateFilesWithInvalidPubkeys,"  @Test
  public void shouldNotUpdateFilesWithInvalidPubkeys(@TempDir Path tempDir) throws IOException {
    setupPathForTest(tempDir, Map.of(""a.yml"", Optional.of(validatorSigningRecord)));
    SlashingProtectionRepairer repairer =
        SlashingProtectionRepairer.create(subCommandLogger, tempDir, true);
    assertThat(repairer.hasUpdates()).isFalse();
    verify(subCommandLogger).display("" --- a.yml - invalid public key - ignoring file"");

    repairer.updateRecords(UInt64.MAX_VALUE, UInt64.MAX_VALUE);
    verifyNoMoreInteractions(subCommandLogger);

    assertThat(fileContents(tempDir.resolve(""a.yml"")))
        .isEqualTo(Optional.of(validatorSigningRecord));
  }
",non-flaky,5
113744,salesforce_reactive-grpc,ReactorGrpcPublisherManyToManyVerificationTest.createPublisher,"@Test(timeOut = 3000)
    public Publisher<Message> createPublisher(long elements) {
        ReactorTckGrpc.ReactorTckStub stub = ReactorTckGrpc.newReactorStub(channel);
        Flux<Message> request = Flux.range(0, (int)elements).map(this::toMessage);
        Publisher<Message> publisher = stub.manyToMany(request).publishOn(Schedulers.immediate());

        return publisher;
    }
",non-flaky,5
135773,Netflix_Hystrix,HystrixPluginsTest.testPropertiesStrategyDefaultImpl,"    /*@Test
    public void testPropertiesStrategyDefaultImpl() {
        HystrixPropertiesStrategy impl = HystrixPlugins.getInstance().getPropertiesStrategy();
        assertTrue(impl instanceof HystrixPropertiesStrategyDefault);
    }
",non-flaky,5
175780,GoogleCloudPlatform_google-cloud-eclipse,AppYamlValidatorTest.testValidateRuntime_javaRuntime,"  @Test
  public void testValidateRuntime_javaRuntime() throws IOException {
    File appYaml = createAppYamlFile(tempFolder.getRoot().toString(), ""runtime: java"");
    IStatus result = AppYamlValidator.validateRuntime(appYaml);
    assertTrue(result.isOK());
  }
",non-flaky,5
135009,undertow-io_undertow,WebsocketStressTestCase.onOpen,"    @Test
    public void webSocketStringStressTestCase() throws Exception {
        List<CountDownLatch> latches = new ArrayList<>();
        for (int i = 0; i < NUM_THREADS; ++i) {
            final CountDownLatch latch = new CountDownLatch(1);
            latches.add(latch);
            final Session session = deployment.connectToServer(new Endpoint() {
                @Override
                public void onOpen(Session session, EndpointConfig config) {
                }
",non-flaky,5
60949,apache_druid,RowBucketIterableTest.testMultipleMissingDays,"  @Test
  public void testMultipleMissingDays()
  {
    List<Row> expectedDay1 = Collections.emptyList();
    List<Row> expectedDay2 = Collections.singletonList(JAN_2_M_10);
    List<Row> expectedDay3 = Collections.emptyList();
    List<Row> expectedDay4 = Collections.singletonList(JAN_4_M_10);

    intervals = new ArrayList<>();
    intervals.add(INTERVAL_JAN_1_4);

    rows = new ArrayList<>();
    rows.add(JAN_2_M_10);
    rows.add(JAN_4_M_10);

    Sequence<Row> seq = Sequences.simple(rows);
    RowBucketIterable rbi = new RowBucketIterable(seq, intervals, ONE_DAY);
    Iterator<RowBucket> iter = rbi.iterator();

    RowBucket actual = iter.next();
    Assert.assertEquals(JAN_1, actual.getDateTime());
    Assert.assertEquals(expectedDay1, actual.getRows());

    actual = iter.next();
    Assert.assertEquals(JAN_2, actual.getDateTime());
    Assert.assertEquals(expectedDay2, actual.getRows());

    actual = iter.next();
    Assert.assertEquals(JAN_3, actual.getDateTime());
    Assert.assertEquals(expectedDay3, actual.getRows());

    actual = iter.next();
    Assert.assertEquals(JAN_4, actual.getDateTime());
    Assert.assertEquals(expectedDay4, actual.getRows());
  }
",non-flaky,5
162404,testcontainers_testcontainers-java,OutputStreamTest.testFetchStdout,"    @Test
    public void testFetchStdout() throws TimeoutException {

        WaitingConsumer consumer = new WaitingConsumer();

        container.followOutput(consumer, STDOUT);

        consumer.waitUntil(frame -> frame.getType() == STDOUT && frame.getUtf8String().contains(""seq=2""),
                30, TimeUnit.SECONDS);
    }
",non-flaky,5
91438,strapdata_elassandra,PackagingTestCase.logTestNameBefore,"@TestMethodProviders({
    public void logTestNameBefore() {
        logger.info(""["" + testNameRule.getMethodName() + ""]: before test"");
    }
",non-flaky,5
135740,Netflix_Hystrix,HystrixPropertyTest.testNested1,"    @Test
    public void testNested1() {
        HystrixProperty<String> a = Factory.asProperty(""a"");
        assertEquals(""a"", a.get());

        HystrixProperty<String> aWithDefault = Factory.asProperty(a, ""b"");
        assertEquals(""a"", aWithDefault.get());
    }
",non-flaky,5
113725,salesforce_reactive-grpc,AbstractStubTest.settingCallOptionsWorks,"    @Test
    public void settingCallOptionsWorks() {
        ManagedChannel channel = serverRule.getChannel();
        Deadline deadline = Deadline.after(42, TimeUnit.SECONDS);

        ReactorGreeterGrpc.ReactorGreeterStub stub = ReactorGreeterGrpc.newReactorStub(channel).withDeadline(deadline);

        assertThat(stub.getCallOptions().getDeadline()).isEqualTo(deadline);
    }
",non-flaky,5
92599,FasterXML_jackson-databind,TestTypeFactoryWithClassLoader.testThreadContextClassLoaderIsUsedIfNotUsingWithClassLoader,"@Test
public void testThreadContextClassLoaderIsUsedIfNotUsingWithClassLoader() throws ClassNotFoundException {
	TypeFactory spySut = spy(mapper.getTypeFactory());
	Assert.assertNull(spySut.getClassLoader());
	Class<?> clazz = spySut.findClass(aClassName);
	Assert.assertNotNull(clazz);
	verify(spySut).classForName(any(String.class), any(Boolean.class), eq(threadClassLoader));
}
",non-flaky,5
78310,apache_beam,SimpleDoFnRunnerTest.testStartBundleExceptionsWrappedAsUserCodeException,"  @Test
  public void testStartBundleExceptionsWrappedAsUserCodeException() {
    ThrowingDoFn fn = new ThrowingDoFn();
    DoFnRunner<String, String> runner =
        new SimpleDoFnRunner<>(
            null,
            fn,
            NullSideInputReader.empty(),
            null,
            null,
            Collections.emptyList(),
            mockStepContext,
            null,
            Collections.emptyMap(),
            WindowingStrategy.of(new GlobalWindows()));

    thrown.expect(UserCodeException.class);
    thrown.expectCause(is(fn.exceptionToThrow));

    runner.startBundle();
  }
",non-flaky,5
179505,abel533_Mapper,StyleTest.testLowercase,"    @Test
    public void testLowercase() {
        for (String field : fields) {
            Assert.assertEquals(field.toLowerCase(), StringUtil.convertByStyle(field, Style.lowercase));
        }
    }
",non-flaky,5
33831,apache_camel,TwoTimerWithJMXIssue.testFromWithNoOutputs,"    @Test
    public void testFromWithNoOutputs() throws Exception {
        MockEndpoint mock = getMockEndpoint(""mock:result"");
        mock.expectedMinimumMessageCount(2);

        assertMockEndpointsSatisfied();

        assertTrue(counter >= 2, ""Counter should be 2 or higher"");
    }
",non-flaky,5
148,Wikidata_wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d.createDefaultDirectoryManagerPath,"@Test
public void createDefaultDirectoryManagerPath() throws IOException {
    Path path = Paths.get(System.getProperty(""user.dir""));
    DirectoryManager dm = DirectoryManagerFactory.createDirectoryManager(
    path, true);
    assertTrue(dm instanceof DirectoryManagerImpl);
    DirectoryManagerImpl dmi = (DirectoryManagerImpl) dm;
    assertTrue(dmi.readOnly);
    assertEquals(path, dmi.directory);
}",test order dependency,4
179426,abel533_Mapper,ColumnTypeTest.testJdbcTypeVarchar,"    @Test
    public void testJdbcTypeVarchar(){
        EntityHelper.initEntityNameMap(UserJdbcTypeVarchar.class, config);
        EntityTable entityTable = EntityHelper.getEntityTable(UserJdbcTypeVarchar.class);
        Assert.assertNotNull(entityTable);

        Set<EntityColumn> columns = entityTable.getEntityClassColumns();
        Assert.assertEquals(1, columns.size());

        for (EntityColumn column : columns) {
            Assert.assertEquals(""name"", column.getColumn());
            Assert.assertEquals(""name"", column.getProperty());

            Assert.assertEquals(""name = #{name, jdbcType=VARCHAR}"", column.getColumnEqualsHolder());
            Assert.assertEquals(""name = #{record.name, jdbcType=VARCHAR}"", column.getColumnEqualsHolder(""record""));
            Assert.assertEquals(""#{name, jdbcType=VARCHAR}"", column.getColumnHolder());
            Assert.assertEquals(""#{record.name, jdbcType=VARCHAR}"", column.getColumnHolder(""record""));
            Assert.assertEquals(""#{record.name, jdbcType=VARCHAR}"", column.getColumnHolder(""record"", ""suffix""));
            Assert.assertEquals(""#{record.namesuffix, jdbcType=VARCHAR},"", column.getColumnHolder(""record"", ""suffix"", "",""));
            Assert.assertNull(column.getTypeHandler());
        }

        ResultMap resultMap = entityTable.getResultMap(configuration);
        Assert.assertEquals(""[NAME]"", resultMap.getMappedColumns().toString());

        Assert.assertEquals(1, resultMap.getResultMappings().size());

        ResultMapping resultMapping = resultMap.getResultMappings().get(0);
        Assert.assertEquals(""name"", resultMapping.getColumn());
        Assert.assertEquals(""name"", resultMapping.getProperty());
        Assert.assertNotNull(resultMapping.getJdbcType());
        Assert.assertEquals(JdbcType.VARCHAR, resultMapping.getJdbcType());
        Assert.assertEquals(StringTypeHandler.class, resultMapping.getTypeHandler().getClass());
    }
",non-flaky,5
110112,Wikidata_wikidata-toolkit,JsonSerializationActionTest.testJsonBz2Output,"	@Test
	public void testJsonBz2Output() throws IOException {
		String[] args = new String[] { ""-a"", ""json"", ""-o"", ""output.json"", ""-z"",
				""bz2"" };

		DirectoryManagerFactory
				.setDirectoryManagerClass(MockDirectoryManager.class);

		ClientConfiguration config = new ClientConfiguration(args);
		JsonSerializationAction jsa = (JsonSerializationAction) config
				.getActions().get(0);

		ItemIdValue subject1 = Datamodel.makeWikidataItemIdValue(""Q42"");
		MonolingualTextValue mtv1 = Datamodel.makeMonolingualTextValue(""Test1"",
				""en"");
		MonolingualTextValue mtv2 = Datamodel.makeMonolingualTextValue(""Test2"",
				""fr"");

		ItemDocument id1 = Datamodel.makeItemDocument(subject1,
				Arrays.asList(mtv1, mtv2), Arrays.asList(mtv1),
				Collections.<MonolingualTextValue> emptyList(),
				Collections.<StatementGroup> emptyList(),
				Collections.<String, SiteLink> emptyMap());

		jsa.open();
		jsa.processItemDocument(id1);
		jsa.close();

		MockDirectoryManager mdm = new MockDirectoryManager(Paths.get("".""),
				false);

		ObjectMapper mapper = new DatamodelMapper(Datamodel.SITE_WIKIDATA);
		ObjectReader documentReader = mapper.readerFor(EntityDocumentImpl.class);
		MappingIterator<EntityDocument> documentIterator = documentReader
				.readValues(mdm.getInputStreamForFile(""output.json.bz2"",
						CompressionType.BZ2));

		List<EntityDocument> results = new ArrayList<>();
		while (documentIterator.hasNextValue()) {
			EntityDocument document = documentIterator.nextValue();
			results.add(document);
		}
		documentIterator.close();

		assertEquals(1, results.size());
		assertEquals(id1, results.get(0));
	}
",non-flaky,5
110107,Wikidata_wikidata-toolkit,DumpProcessingOutputActionTest.testStdOutOutputArgumentsLong,"	@Test
	public void testStdOutOutputArgumentsLong() {
		String[] args = new String[] { ""-a"", ""json"", ""--stdout"" };
		DumpProcessingOutputAction action = getActionFromArgs(args);

		assertTrue(action.useStdOut);
	}
",non-flaky,5
177168,line_armeria,SamlServiceProviderTest.shouldBeAlreadyAuthenticated,"    @Test
    public void shouldBeAlreadyAuthenticated() throws Exception {
        final RequestHeaders req = RequestHeaders.of(HttpMethod.GET, ""/redirect"",
                                                     HttpHeaderNames.COOKIE, ""test=test"");
        final AggregatedHttpResponse resp = client.execute(req).aggregate().join();
        assertThat(resp.status()).isEqualTo(HttpStatus.OK);
        assertThat(resp.contentUtf8()).isEqualTo(""authenticated"");
    }
",non-flaky,5
177179,line_armeria,BraveClientIntegrationTest.addsStatusCodeWhenNotOk_async,"    @Test
    public void addsStatusCodeWhenNotOk_async() {
        try (SafeCloseable ignored = serverContext().push()) {
            super.addsStatusCodeWhenNotOk_async();
        }
    }
",non-flaky,5
159693,liquibase_liquibase,AddAutoIncrementExecuteTest.execute_floatDefault,"//    @Test
//    public void execute_floatDefault() throws Exception {
//        new DatabaseTestTemplate().testOnAvailableDatabases(
//                new SqlStatementDatabaseTest(null, new AddColumnStatement(null, TABLE_NAME, NEW_COLUMN_NAME, ""float"", 42.5)) {
//                    protected void preExecuteAssert(DatabaseSnapshotGenerator snapshot) {
//                        assertNull(snapshot.getTable(TABLE_NAME).getColumn(NEW_COLUMN_NAME));
//                    }
//
//                    protected void postExecuteAssert(DatabaseSnapshotGenerator snapshot) {
//                        Column columnSnapshot = snapshot.getTable(TABLE_NAME).getColumn(NEW_COLUMN_NAME);
//                        assertNotNull(columnSnapshot);
//                        assertEquals(NEW_COLUMN_NAME.toUpperCase(), columnSnapshot.getName().toUpperCase());
//                        assertEquals(new Double(42.5), new Double(((Number) columnSnapshot.getDefaultValue()).doubleValue()));
//
//                        assertEquals(true, columnSnapshot.isNullable());
//                    }
//                });
//    }
",non-flaky,5
59664,looly_hutool,SystemUtilTest.getCurrentPidTest,"	@Test
	public void getCurrentPidTest() {
		long pid = SystemUtil.getCurrentPID();
		Assert.assertTrue(pid > 0);
	}
",non-flaky,5
19426,eclipse_xtext-core,GenericModuleTest.get,"	@Test public void testProviderClassDeactivation() throws Exception {
		public String get() {
			 return ""foo"";
		}
",non-flaky,5
134005,CorfuDB_CorfuDB,ConcurrentClusterResizeIT.concurrentClusterResizeTest,"    @Test(timeout = 600000)
    public void concurrentClusterResizeTest() {
        // Deploy a five nodes cluster
        final int numNodes = 5;

        workflow(wf -> {
            wf.setupDocker(fixture -> fixture.getCluster().numNodes(numNodes));
            wf.setupProcess(fixture -> fixture.getCluster().numNodes(numNodes));
            wf.setupVm(fixture -> fixture.getCluster().numNodes(numNodes));

            wf.deploy();

            ClientParams clientFixture = ClientParams.builder().build();
            CorfuCluster corfuCluster = wf.getUniverse()
                    .getGroup(wf.getFixture().data().getGroupParamByIndex(0).getName());

            assertThat(corfuCluster.nodes().size()).isEqualTo(numNodes);

            CorfuClient corfuClient = corfuCluster.getLocalCorfuClient();

            CorfuTable<String, String> table =
                    corfuClient.createDefaultCorfuTable(TestFixtureConst.DEFAULT_STREAM_NAME);
            for (int i = 0; i < TestFixtureConst.DEFAULT_TABLE_ITER; i++) {
                table.put(String.valueOf(i), String.valueOf(i));
            }

            CorfuServer server0 = corfuCluster.getFirstServer();

            // Get the servers list to be added/removed -all servers in the cluster exclude server0
            List<CorfuServer> servers = IntStream.range(1, numNodes)
                    .mapToObj(corfuCluster::getServerByIndex)
                    .collect(Collectors.toList());

            //should concurrently remove four nodes from cluster

            // Concurrently remove four nodes from cluster
            ExecutorService executor = Executors.newFixedThreadPool(numNodes - 1);

            servers.forEach(node -> {
                Runnable removeNodeAction = () -> corfuClient.getManagementView().removeNode(
                        node.getEndpoint(),
                        clientFixture.getNumRetry(),
                        clientFixture.getTimeout(),
                        clientFixture.getPollPeriod()
                );
                executor.submit(removeNodeAction);
            });

            // Wait for layout servers to change and wait for cluster to be up
            waitForLayoutServersChange(size -> size == 1, corfuClient);
            executor.shutdownNow();

            // Verify layout contains only one node
            corfuClient.invalidateLayout();
            assertThat(corfuClient.getLayout().getAllServers()).containsExactly(server0.getEndpoint());

            waitForClusterUp(table, ""0"");
            // Verify data path working fine
            for (int x = 0; x < TestFixtureConst.DEFAULT_TABLE_ITER; x++) {
                assertThat(table.get(String.valueOf(x))).isEqualTo(String.valueOf(x));
            }

            //should concurrently add four nodes back into cluster""

            // Concurrently add four nodes back into cluster and wait for cluster to stabilize
            ExecutorService executor2 = Executors.newFixedThreadPool(numNodes - 1);
            servers.forEach(node -> executor2.submit(() -> corfuClient.getManagementView().addNode(
                    node.getEndpoint(),
                    clientFixture.getNumRetry(),
                    clientFixture.getTimeout(),
                    clientFixture.getPollPeriod())
            ));


            // Check that the segments are merged and all the servers are equal to numNodes
            waitForLayoutChange(layout -> layout.getAllServers().size() == numNodes, corfuClient);
            waitForLayoutChange(layout -> layout.getSegments().size() == 1, corfuClient);
            // wait for the cluster to be up
            waitForClusterUp(table, ""0"");
            executor2.shutdownNow();

            // Verify data path working fine
            for (int x = 0; x < TestFixtureConst.DEFAULT_TABLE_ITER; x++) {
                assertThat(table.get(String.valueOf(x))).isEqualTo(String.valueOf(x));
            }

            corfuClient.shutdown();
        });
    }
",non-flaky,5
78302,apache_beam,OutputAndTimeBoundedSplittableProcessElementInvokerTest.testInvokeProcessElementVoluntaryReturnResume,"  @Test
  public void testInvokeProcessElementVoluntaryReturnResume() throws Exception {
    SplittableProcessElementInvoker<Void, String, OffsetRange, OffsetRangeTracker>.Result res =
        runTest(10, Duration.ZERO, 5, Duration.millis(100));
    assertTrue(res.getContinuation().shouldResume());
    assertEquals(new OffsetRange(5, 10), res.getResidualRestriction());
  }
",non-flaky,5
79,wildfly_wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993.testRejectionEAP6,"@Test
public void testRejectionsEAP6() throws Exception {
    testTransformer(""subsystem.xml"", ModelTestControllerVersion.EAP_6_4_0, ModelVersion.create(1, 3),""jboss-as-naming"");
}",test order dependency,4
112079,apache_shardingsphere-elasticjob,ExceptionUtilTest.assertTransformWithNull,"    @Test
    public void assertTransformWithNull() {
        assertThat(ExceptionUtil.transform(null), is(""""));
    }
",non-flaky,5
113979,apache_struts,ParameterTest.shouldConvertRequestValuesToStringArrays,"    @Test(dataProvider = ""paramValues"")
    public void shouldConvertRequestValuesToStringArrays(Object input, String[] expected) {
        Parameter.Request request = new Parameter.Request(PARAM_NAME, input);

        String[] result = request.getMultipleValues();

        assertEquals(result, expected);
        assertNotSame(result, input);
    }
",non-flaky,5
156143,soot-oss_soot,ClassRenamerTest.getDependencies,"  @Test
  public void getDependencies() {
    assertThat(ClassRenamer.v().getDependencies(), equalTo(new String[] { ClassRenamer.name }));
  }
",non-flaky,5
114074,aws_aws-sdk-java-v2,EnhancedTypeTest.documentOf_toString_doesNotRaiseNPE,"    @Test
    public void documentOf_toString_doesNotRaiseNPE() {
        TableSchema<String> tableSchema = StaticTableSchema.builder(String.class).build();
        EnhancedType<String> type = EnhancedType.documentOf(String.class, tableSchema);
        assertThatCode(() -> type.toString()).doesNotThrowAnyException();
    }
",non-flaky,5
179500,abel533_Mapper,TypeHandlerTest.testInsert,"    @Test
    public void testInsert(){
        SqlSession sqlSession = getSqlSession();
        try {
            UserMapper userMapper = sqlSession.getMapper(UserMapper.class);

            User user = new User();
            user.setId(3);
            user.setName(""liuzh"");
            Address address = new Address();
            address.setProvince(""Hebei"");
            address.setCity(""Qinhuangdao"");
            user.setAddress(address);
            user.setState(StateEnum.enabled);

            Assert.assertEquals(1, userMapper.insert(user));

            user = userMapper.selectByPrimaryKey(3);
            Assert.assertEquals(""liuzh"", user.getName());
            Assert.assertEquals(""Hebei"", user.getAddress().getProvince());
            Assert.assertEquals(""Qinhuangdao"", user.getAddress().getCity());
            Assert.assertEquals(StateEnum.enabled, user.getState());
        } finally {
            sqlSession.close();
        }
    }
",non-flaky,5
177224,line_armeria,RestartableThreadTest.testRestartableThreadRestartBehavior,"    @Test
    public void testRestartableThreadRestartBehavior() {
        final RestartableThread restartableThread =
                new RestartableThread(testName.getMethodName(), () -> () -> {
                    while (!Thread.currentThread().isInterrupted()) {
                        Thread.yield();
                    }
                });

        restartableThread.start();
        assertThat(restartableThread.isRunning()).isTrue();
        restartableThread.stop();
        assertThat(restartableThread.isRunning()).isFalse();
        restartableThread.start();
        assertThat(restartableThread.isRunning()).isTrue();
        restartableThread.stop();
        assertThat(restartableThread.isRunning()).isFalse();
    }
",non-flaky,5
43125,trinodb_trino,BaseConnectorSmokeTest.testCreateSchema,"    @Test
    public void testCreateSchema()
    {
        String schemaName = ""test_schema_create_"" + randomTableSuffix();
        if (!hasBehavior(SUPPORTS_CREATE_SCHEMA)) {
            assertQueryFails(""CREATE SCHEMA "" + schemaName, ""This connector does not support creating schemas"");
            return;
        }

        assertUpdate(""CREATE SCHEMA "" + schemaName);
        assertThat(query(""SHOW SCHEMAS""))
                .skippingTypesCheck()
                .containsAll(format(""VALUES '%s', '%s'"", getSession().getSchema().orElseThrow(), schemaName));
        assertUpdate(""DROP SCHEMA "" + schemaName);
    }
",non-flaky,5
159690,liquibase_liquibase,AddAutoIncrementExecuteTest.noSchema,"    @Test
    public void noSchema() throws Exception {
        this.statementUnderTest = new AddAutoIncrementStatement(null, null, TABLE_NAME, COLUMN_NAME, ""int"", null, null, null, null);

        assertCorrect(""alter table [table_name] modify column_name serial"", PostgresDatabase.class);
        assertCorrect(""alter table table_name modify column_name int auto_increment"", MySQLDatabase.class);
        assertCorrect(""ALTER TABLE [table_name] ALTER COLUMN [column_name] SET GENERATED BY DEFAULT AS IDENTITY"", DB2Database.class);
        assertCorrect(""alter table table_name alter column column_name int generated by default as identity"", HsqlDatabase.class);
        assertCorrect(""alter table table_name alter column column_name int auto_increment"", H2Database.class);

        assertCorrect(""ALTER TABLE [table_name] MODIFY [column_name] serial"", InformixDatabase.class);
        assertCorrect(""ALTER TABLE [table_name] ALTER [column_name] SET DEFAULT AUTOINCREMENT"", SybaseASADatabase.class);
        assertCorrect(""ALTER TABLE [table_name] MODIFY [column_name] int identity"", SybaseDatabase.class);
        assertCorrect(""ALTER TABLE [table_name] ALTER column [column_name] SET GENERATED BY DEFAULT AS IDENTITY"", Db2zDatabase.class);

        assertCorrectOnRest(""ALTER TABLE [table_name] MODIFY [column_name] int AUTO_INCREMENT"");
    }
",non-flaky,5
104618,apache_pinot,ChaosMonkeyIntegrationTest.testLongZookeeperFreeze,"  @Test(enabled = false)
  public void testLongZookeeperFreeze()
      throws Exception {
    testFreezeZookeeper(60000L);
  }
",non-flaky,5
113982,apache_struts,ConstantConfigTest.testBeanConfToString,"    @Test
    public void testBeanConfToString() throws Exception {
        ConstantConfig constantConfig = new ConstantConfig();

        String actual = constantConfig.beanConfToString(null);
        Assert.assertEquals(null, actual);

        actual = constantConfig.beanConfToString(new BeanConfig(TestBean.class));
        Assert.assertEquals(Container.DEFAULT_NAME, actual);

        String expectedName = ""expectedTestBeanName"";
        actual = constantConfig.beanConfToString(new BeanConfig(TestBean.class, expectedName));
        Assert.assertEquals(expectedName, actual);
    }
",non-flaky,5
133969,CorfuDB_CorfuDB,LogUnitHandlerTest.testGetLogAddressSpace,"    @Test
    public void testGetLogAddressSpace() {
        StreamsAddressResponse addressResponse = new StreamsAddressResponse(0L, new HashMap<>());
        ResponseMsg response = getResponseMsg(
                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.CHECK),
                getLogAddressSpaceResponseMsg(addressResponse.getLogTail(), addressResponse.getEpoch(),
                        addressResponse.getAddressMap())
        );

        logUnitHandler.handleMessage(response, mockChannelHandlerContext);
        // Verify that the correct request was completed (once) with the appropriate value,
        // and that we did not complete exceptionally.
        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));
        verify(mockClientRouter).completeRequest(response.getHeader().getRequestId(), addressResponse);
    }
",non-flaky,5
94678,square_okhttp,Http2ConnectionTest.onRequest,"  @Test public void blockedStreamDoesntStarveNewStream() throws Exception {
    @Override public boolean onRequest(int streamId, List<Header> requestHeaders) {
      return false;
    }
",non-flaky,5
134994,undertow-io_undertow,AnnotatedEndpointTest.testAnnotatedClientEndpointWithConfigurator,"    @Test
    public void testAnnotatedClientEndpointWithConfigurator() throws Exception {


        Session session = deployment.connectToServer(AnnotatedClientEndpointWithConfigurator.class, new URI(""ws://"" + DefaultServer.getHostAddress(""default"") + "":"" + DefaultServer.getHostPort(""default"") + ""/ws/chat/Bob""));

        Assert.assertEquals(""hi Bob (protocol=configured-proto)"", AnnotatedClientEndpointWithConfigurator.message());
        Assert.assertEquals(""foo, bar, configured-proto"", ClientConfigurator.sentSubProtocol);
        Assert.assertEquals(""configured-proto"", ClientConfigurator.receivedSubProtocol());

        session.close();
        Assert.assertEquals(""CLOSED"", AnnotatedClientEndpointWithConfigurator.message());
    }
",non-flaky,5
122606,vespa-engine_vespa,UnixPathTest.utf8File,"    @Test
    public void utf8File() {
        String original = ""foo\nbar\n"";
        UnixPath path = new UnixPath(fs.getPath(""example.txt""));
        path.writeUtf8File(original);
        String fromFile = path.readUtf8File();
        assertEquals(original, fromFile);
    }
",non-flaky,5
134997,undertow-io_undertow,AnnotatedEndpointTest.testGenericMessageHandling,"    @Test
    public void testGenericMessageHandling() throws Exception {
        //make a sub class
        AnnotatedGenericClientEndpoint c = new AnnotatedGenericClientEndpoint() {

        };

        Session session = deployment.connectToServer(c, new URI(""ws://"" + DefaultServer.getHostAddress(""default"") + "":"" + DefaultServer.getHostPort(""default"") + ""/ws/error""));
        Assert.assertEquals(""hi"", ErrorEndpoint.getMessage());
        session.getAsyncRemote().sendText(""app-error"");
        Assert.assertEquals(""app-error"", ErrorEndpoint.getMessage());
        Assert.assertEquals(""ERROR: java.lang.RuntimeException"", ErrorEndpoint.getMessage());
        Assert.assertTrue(c.isOpen());

        session.getBasicRemote().sendText(""io-error"");
        Assert.assertEquals(""io-error"", ErrorEndpoint.getMessage());
        Assert.assertEquals(""ERROR: java.io.IOException"", ErrorEndpoint.getMessage());
        Assert.assertTrue(c.isOpen());
        ((UndertowSession)session).forceClose();
        Assert.assertEquals(""CLOSED"", ErrorEndpoint.getMessage());

    }
",non-flaky,5
122585,vespa-engine_vespa,FileFinderTest.all_files_non_recursive,"        @Test
        public void all_files_non_recursive() {
            assertFileHelper(FileFinder.files(testRoot())
                            .maxDepth(1),

                    of(""file-1.json"", ""test.json"", ""test.txt""),
                    of(""test"", ""test/file.txt"", ""test/data.json"", ""test/subdir-1"", ""test/subdir-1/test"", ""test/subdir-2""));
        }
",non-flaky,5
110180,Wikidata_wikidata-toolkit,PropertyRegisterTest.testGetWikidataPropertyRegister,"	@Test
	public void testGetWikidataPropertyRegister() {
		assertEquals(""P1921"", this.propertyRegister.uriPatternPropertyId);
	}
",non-flaky,5
94667,square_okhttp,Http2Test.pushPromise,"  @Test public void pushPromiseThenContinuation() throws IOException {
      public void pushPromise(int streamId, int promisedStreamId, List<Header> headerBlock) {
        assertEquals(expectedStreamId, streamId);
        assertEquals(expectedPromisedStreamId, promisedStreamId);
        assertEquals(pushPromise, headerBlock);
      }
",non-flaky,5
135079,undertow-io_undertow,CookiesTestCase.testCommaSeparatedCookies,"    @Test
    public void testCommaSeparatedCookies() {
        Map<String, Cookie> cookies = Cookies.parseRequestCookies(2, false, Arrays.asList(""CUSTOMER=\""WILE_E_COYOTE\"", SHIPPING=FEDEX"" ), true);
        Assert.assertEquals(2, cookies.size());
        Cookie cookie = cookies.get(""CUSTOMER"");
        Assert.assertNotNull(cookie);
        Assert.assertEquals(""WILE_E_COYOTE"", cookie.getValue());
        cookie = cookies.get(""SHIPPING"");
        Assert.assertNotNull(cookie);
        Assert.assertEquals(""FEDEX"", cookie.getValue());

        //also make sure semi colon works as normal
        cookies = Cookies.parseRequestCookies(2, false, Arrays.asList(""CUSTOMER=\""WILE_E_COYOTE\""; SHIPPING=FEDEX"" ), true);
        Assert.assertEquals(2, cookies.size());
        cookie = cookies.get(""CUSTOMER"");
        Assert.assertNotNull(cookie);
        Assert.assertEquals(""WILE_E_COYOTE"", cookie.getValue());
        cookie = cookies.get(""SHIPPING"");
        Assert.assertNotNull(cookie);
        Assert.assertEquals(""FEDEX"", cookie.getValue());
    }
",non-flaky,5
33671,alibaba_fastjson,IgnoreTypeDeserializer.parseWithNotExistType,"    @Test
    public void parseWithNotExistType() {
        String s = ""{\""@type\"":\""com.alibaba.fastjson.ValueBean\"",\""val\"":1}"";
        Object object = JSONObject.parse(s);
        Assert.assertNotNull(object);
        Assert.assertTrue(object instanceof JSONObject);
        Assert.assertEquals(new Integer(1), JSONObject.class.cast(object).getInteger(""val""));
    }
",non-flaky,5
84607,apache_zookeeper,PrometheusMetricsProviderTest.testAdvancedSummary,"    @Test
    public void testAdvancedSummary() throws Exception {
        Summary summary = provider.getRootContext()
                .getSummary(""cc"", MetricsContext.DetailLevel.ADVANCED);
        summary.add(10);
        summary.add(10);
        int[] count = {0};
        provider.dump((k, v) -> {
            count[0]++;
            int value = ((Number) v).intValue();

            switch (k) {
                case ""cc{quantile=\""0.5\""}"":
                    assertEquals(10, value);
                    break;
                case ""cc{quantile=\""0.9\""}"":
                    assertEquals(10, value);
                    break;
                case ""cc{quantile=\""0.99\""}"":
                    assertEquals(10, value);
                    break;
                case ""cc_count"":
                    assertEquals(2, value);
                    break;
                case ""cc_sum"":
                    assertEquals(20, value);
                    break;
                default:
                    fail(""unespected key "" + k);
                    break;
            }
        }
        );
        assertEquals(5, count[0]);
        count[0] = 0;

        // we always must get the same object
        assertSame(summary, provider.getRootContext()
                .getSummary(""cc"", MetricsContext.DetailLevel.ADVANCED));

        try {
            provider.getRootContext()
                    .getSummary(""cc"", MetricsContext.DetailLevel.BASIC);
            fail(""Can't get the same summary with a different DetailLevel"");
        } catch (IllegalArgumentException err) {
            assertThat(err.getMessage(), containsString(""Already registered""));
        }

        String res = callServlet();
        assertThat(res, containsString(""# TYPE cc summary""));
        assertThat(res, CoreMatchers.containsString(""cc_sum 20.0""));
        assertThat(res, CoreMatchers.containsString(""cc_count 2.0""));
        assertThat(res, CoreMatchers.containsString(""cc{quantile=\""0.5\"",} 10.0""));
        assertThat(res, CoreMatchers.containsString(""cc{quantile=\""0.9\"",} 10.0""));
        assertThat(res, CoreMatchers.containsString(""cc{quantile=\""0.99\"",} 10.0""));
    }
",non-flaky,5
162383,testcontainers_testcontainers-java,MountableFileTest.forClasspathResourceFromJar,"    @Test
    public void forClasspathResourceFromJar() throws Exception {
        final MountableFile mountableFile = MountableFile.forClasspathResource(""META-INF/dummy_unique_name.txt"");

        performChecks(mountableFile);
    }
",non-flaky,5
112127,apache_shardingsphere-elasticjob,StatisticRdbRepositoryTest.assertFindJobRegisterStatisticsWhenTableIsEmpty,"    @Test
    public void assertFindJobRegisterStatisticsWhenTableIsEmpty() {
        assertThat(repository.findJobRegisterStatistics(new Date()).size(), is(0));
    }
",non-flaky,5
60906,apache_druid,MovingAverageIterableTest.testMissingDaysAtBegining,"  @Test
  public void testMissingDaysAtBegining()
  {

    Map<String, Object> event1 = new HashMap<>();
    Map<String, Object> event2 = new HashMap<>();

    List<DimensionSpec> ds = new ArrayList<>();
    ds.add(new DefaultDimensionSpec(""gender"", ""gender""));

    event1.put(""gender"", ""m"");
    event1.put(""pageViews"", 10L);
    Row row1 = new MapBasedRow(JAN_3, event1);

    event2.put(""gender"", ""m"");
    event2.put(""pageViews"", 20L);
    Row row2 = new MapBasedRow(JAN_4, event2);

    Sequence<RowBucket> seq = Sequences.simple(Arrays.asList(
        new RowBucket(JAN_1, Collections.emptyList()),
        new RowBucket(JAN_2, Collections.emptyList()),
        new RowBucket(JAN_3, Collections.singletonList(row1)),
        new RowBucket(JAN_4, Collections.singletonList(row2))
    ));

    Iterator<Row> iter = new MovingAverageIterable(
        seq,
        ds,
        Collections.singletonList(
            new LongMeanAveragerFactory(""movingAvgPageViews"", 4, 1, ""pageViews"")
        ),
        Collections.emptyList(),
        Collections.singletonList(new LongSumAggregatorFactory(""pageViews"", ""pageViews""))
    ).iterator();

    Assert.assertTrue(iter.hasNext());
    Row result = iter.next();
    Assert.assertEquals(""m"", (result.getDimension(""gender"")).get(0));
    Assert.assertEquals(2.5f, result.getMetric(""movingAvgPageViews"").floatValue(), 0.0f);

    Assert.assertTrue(iter.hasNext());
    result = iter.next();
    Assert.assertEquals(""m"", (result.getDimension(""gender"")).get(0));
    Assert.assertEquals(7.5f, result.getMetric(""movingAvgPageViews"").floatValue(), 0.0f);

    Assert.assertFalse(iter.hasNext());
  }
",non-flaky,5
179462,abel533_Mapper,KeySqlTest.testUserAutoIncrement,"    @Test
    public void testUserAutoIncrement() {
        SqlSession sqlSession = getSqlSession();
        try {
            UserAutoIncrementMapper mapper = sqlSession.getMapper(UserAutoIncrementMapper.class);

            UserAutoIncrement user = new UserAutoIncrement();
            user.setName(""liuzh"");
            Assert.assertEquals(1, mapper.insert(user));
            Assert.assertNotNull(user.getId());

            user = mapper.selectByPrimaryKey(user.getId());
            Assert.assertEquals(""liuzh"", user.getName());
        } finally {
            sqlSession.close();
        }
    }
",non-flaky,5
84645,apache_zookeeper,EnforceAuthenticationTest.testEnforceAuthenticationWithMultipleAuthSchemes,"    @Test
    public void testEnforceAuthenticationWithMultipleAuthSchemes() throws Exception {
        Map<String, String> prop = new HashMap<>();
        prop.put(removeZooKeeper(AuthenticationHelper.ENFORCE_AUTH_ENABLED), ""true"");
        prop.put(removeZooKeeper(AuthenticationHelper.ENFORCE_AUTH_SCHEMES), ""digest,ip"");
        startServer(prop);
        ZKClientConfig config = new ZKClientConfig();
        CountDownLatch countDownLatch = new CountDownLatch(1);
        ZooKeeper client =
            new ZooKeeper(""127.0.0.1:"" + clientPort, CONNECTION_TIMEOUT, getWatcher(countDownLatch),
                config);
        countDownLatch.await();
        // try operation without adding auth info, it should be success as ip auth info is
        // added automatically by server
        String path = ""/newAuth"" + System.currentTimeMillis();
        String data = ""someData"";
        client.create(path, data.getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);
        byte[] data1 = client.getData(path, false, null);
        assertEquals(data, new String(data1));
        client.close();
    }
",non-flaky,5
53163,cloudfoundry_uaa,ScimGroupTests.testSerializeWithDescription,"    @Test
    public void testSerializeWithDescription() {
        group.setDescription(""description"");
        String json = JsonUtils.writeValueAsString(group);
        group = JsonUtils.readValue(json, ScimGroup.class);
        assertEquals(""id"", group.getId());
        assertEquals(""name"", group.getDisplayName());
        assertEquals(""zoneId"", group.getZoneId());
        assertEquals(""description"", group.getDescription());
    }
",non-flaky,5
137106,spring-projects_spring-framework,AbstractAnnotationMetadataTests.hasMetaAnnotationWhenMatchesDirectReturnsFalse,"	@Test
	public void hasMetaAnnotationWhenMatchesDirectReturnsFalse() {
		assertThat(get(WithDirectAnnotations.class).hasMetaAnnotation(DirectAnnotation1.class.getName())).isFalse();
	}
",non-flaky,5
112668,tbsalling_aismessages,NMEAMessageHandlerTest.canFlushEmpty,"    @Test
    public void canFlushEmpty() {
        NMEAMessage unfragmentedNMEAMessage = NMEAMessage.fromString(""!AIVDM,1,1,,B,15MqdBP000G@qoLEi69PVGaN0D0=,0*3A"");
        NMEAMessage fragmentedNMEAMessage1 = NMEAMessage.fromString(""!AIVDM,2,1,3,B,55DA><02=6wpPuID000qTf059@DlU<00000000171lMDD4q20LmDp3hB,0*27"");
        NMEAMessage fragmentedNMEAMessage2 = NMEAMessage.fromString(""!AIVDM,2,2,3,B,p=Mh00000000000,2*4C"");

        final ArgumentCaptor<AISMessage> aisMessage = new ArgumentCaptor<>();

        context.checking(new Expectations() {{
            exactly(3).of(aisMessageHandler).accept(with(aisMessage.getMatcher()));
        }});

        aisMessageReceiver.accept(unfragmentedNMEAMessage);
        aisMessageReceiver.accept(fragmentedNMEAMessage1);
        aisMessageReceiver.accept(fragmentedNMEAMessage2);

        ArrayList<NMEAMessage> flush = aisMessageReceiver.flush();

        assertNotNull(flush);
        assertEquals(0, flush.size());
    }
",non-flaky,5
33881,apache_camel,FhirLoadPageIT.testPreviousWithEncodingEnum,"    @Test
    public void testPreviousWithEncodingEnum() throws Exception {
        String url = ""Patient?_count=2"";
        Bundle bundle = this.fhirClient.search()
                .byUrl(url)
                .returnBundle(Bundle.class).execute();
        assertNotNull(bundle.getLink(IBaseBundle.LINK_NEXT));

        String nextPageLink = bundle.getLink(""next"").getUrl();
        bundle = this.fhirClient.loadPage().byUrl(nextPageLink).andReturnBundle(Bundle.class).execute();
        assertNotNull(bundle.getLink(IBaseBundle.LINK_PREV));
        Map<String, Object> headers = new HashMap<>();
        headers.put(ExtraParameters.ENCODING_ENUM.getHeaderName(), EncodingEnum.XML);

        // using org.hl7.fhir.instance.model.api.IBaseBundle message body for single parameter ""bundle""
        Bundle result = requestBodyAndHeaders(""direct://PREVIOUS"", bundle, headers);

        LOG.debug(""previous: "" + result);
        assertNotNull(result, ""previous result"");
    }
",non-flaky,5
112757,hwang-pku_ormlite-core,ThreadLocalSelectArgTest.testSqlTypeValueConst,"	@Test
	public void testSqlTypeValueConst() {
		int val = 12;
		SqlType type = SqlType.INTEGER;
		ThreadLocalSelectArg arg = new ThreadLocalSelectArg(type, val);
		assertTrue(arg.isValueSet());
		assertEquals(val, arg.getValue());
		assertEquals(type, arg.getSqlType());
	}
",non-flaky,5
77489,dropwizard_dropwizard,SubstitutingSourceProviderTest.open,"    @Test
        public InputStream open(String s) throws IOException {
            // used to test that the stream is properly closed
            lastStream = new BufferedInputStream(new ByteArrayInputStream(s.getBytes(StandardCharsets.UTF_8)));
            return lastStream;
        }
",non-flaky,5
112681,hwang-pku_ormlite-core,BaseDaoEnabledTest.testUpdate,"	@Test
	public void testUpdate() throws Exception {
		Dao<One, Integer> dao = createDao(One.class, true);
		One one = new One();
		String stuff1 = ""fewpfjewfew"";
		one.stuff = stuff1;
		assertEquals(1, dao.create(one));
		String stuff2 = ""fjpfejpwewpfjewfew"";
		one.stuff = stuff2;
		assertEquals(1, one.update());
		One one2 = dao.queryForId(one.id);
		assertEquals(stuff2, one2.stuff);
	}
",non-flaky,5
134009,CorfuDB_CorfuDB,AllNodesPartitionedIT.allNodesPartitionedTest,"    @Test(timeout = 300000)
    public void allNodesPartitionedTest() {
        workflow(wf -> {
            wf.deploy();

            UniverseParams params = wf.getFixture().data();

            CorfuCluster<CorfuServer, CorfuClusterParams> corfuCluster = wf.getUniverse()
                    .getGroup(params.getGroupParamByIndex(0).getName());

            CorfuClusterParams corfuClusterParams = corfuCluster.getParams();

            assertThat(corfuCluster.nodes().size()).isEqualTo(3);
            assertThat(corfuCluster.nodes().size()).isEqualTo(corfuClusterParams.size());

            assertThat(corfuCluster.getParams().getNodesParams().size())
                    .as(""Invalid cluster: %s, but expected 3 nodes"",
                            corfuClusterParams.getClusterNodes()
                    )
                    .isEqualTo(3);

            CorfuClient corfuClient = corfuCluster.getLocalCorfuClient();

            CorfuTable<String, String> table =
                    corfuClient.createDefaultCorfuTable(TestFixtureConst.DEFAULT_STREAM_NAME);
            for (int i = 0; i < TestFixtureConst.DEFAULT_TABLE_ITER; i++) {
                table.put(String.valueOf(i), String.valueOf(i));
            }


            // Symmetrically partition all nodes and wait for failure
            // detector to work and cluster to stabilize
            List<CorfuServer> allServers = corfuCluster.<CorfuServer>nodes().values().asList();
            allServers.forEach(server -> {
                List<CorfuServer> otherServers = new ArrayList<>(allServers);
                otherServers.remove(server);
                server.disconnect(otherServers);
            });

            waitUninterruptibly(Duration.ofSeconds(20));

            // Verify cluster and node status
            ClusterStatusReport clusterStatusReport = corfuClient
                    .getManagementView()
                    .getClusterStatus();
            assertThat(clusterStatusReport.getClusterStatus()).isEqualTo(ClusterStatus.STABLE);

            Map<String, NodeStatus> statusMap = clusterStatusReport.getClusterNodeStatusMap();
            corfuCluster.nodes()
                    .values()
                    .forEach(node ->
                            assertThat(statusMap.get(node.getEndpoint())).isEqualTo(NodeStatus.UP)
                    );

            Map<String, ConnectivityStatus> connectivityMap = clusterStatusReport
                    .getClientServerConnectivityStatusMap();

            corfuCluster.nodes().values().forEach(node -> {
                assertThat(connectivityMap.get(node.getEndpoint()))
                        .isEqualTo(ConnectivityStatus.RESPONSIVE);
            });

            // Remove partitions and wait for layout's unresponsive servers to change
            waitUninterruptibly(Duration.ofSeconds(10));
            corfuCluster.nodes().values().forEach(CorfuServer::reconnect);

            waitForUnresponsiveServersChange(size -> size == 0, corfuClient);

            // Verify cluster status is STABLE
            clusterStatusReport = corfuClient.getManagementView().getClusterStatus();
            assertThat(clusterStatusReport.getClusterStatus()).isEqualTo(ClusterStatus.STABLE);

            waitForClusterUp(table, ""0"");

            // Verify data path working fine
            for (int i = 0; i < TestFixtureConst.DEFAULT_TABLE_ITER; i++) {
                assertThat(table.get(String.valueOf(i))).isEqualTo(String.valueOf(i));
            }


            corfuClient.shutdown();

        });
    }
",non-flaky,5
345,apache_hadoop,TestNetworkTopology.testContains,"  @Test
  public void testContains() throws Exception {
    DatanodeDescriptor nodeNotInMap = 
      DFSTestUtil.getDatanodeDescriptor(""8.8.8.8"", ""/d2/r4"");
    for (int i=0; i < dataNodes.length; i++) {
      assertTrue(cluster.contains(dataNodes[i]));
    }
    assertFalse(cluster.contains(nodeNotInMap));
  }
",non-flaky,5
77459,opensearch-project_OpenSearch,AbstractSimpleTransportTestCase.read,"    @TestLogging(
    public void testTracerLog() throws Exception {
        TransportRequestHandler<TransportRequest> handler = (request, channel, task) -> channel.sendResponse(new StringMessageResponse(""""));
        TransportRequestHandler<StringMessageRequest> handlerWithError = (request, channel, task) -> {
            if (request.timeout() > 0) {
                Thread.sleep(request.timeout);
            }
            channel.sendResponse(new RuntimeException(""""));

        };

        TransportResponseHandler<StringMessageResponse> noopResponseHandler = new TransportResponseHandler<StringMessageResponse>() {

            @Override
            public StringMessageResponse read(StreamInput in) throws IOException {
                return new StringMessageResponse(in);
            }
",non-flaky,5
89294,apache_samza,TestLocalStoreMonitor.shouldDeleteInActiveLocalStoresOfTheJob,"  @Test
  public void shouldDeleteInActiveLocalStoresOfTheJob() throws Exception {
    File inActiveStoreDir = new File(jobDir, ""inActiveStore"");
    FileUtils.forceMkdir(inActiveStoreDir);
    File inActiveTaskDir = new File(inActiveStoreDir, ""test-task"");
    FileUtils.forceMkdir(inActiveTaskDir);
    long inActiveTaskDirSize = inActiveTaskDir.getTotalSpace();
    localStoreMonitor.monitor();
    assertTrue(""Inactive task store directory should not exist."", !inActiveTaskDir.exists());
    assertEquals(taskStoreSize + inActiveTaskDirSize, localStoreMonitorMetrics.diskSpaceFreedInBytes.getCount());
    assertEquals(2, localStoreMonitorMetrics.noOfDeletedTaskPartitionStores.getCount());
    FileUtils.deleteDirectory(inActiveStoreDir);
  }
",non-flaky,5
33835,apache_camel,Queue2QueueExample.testSendMessagesBetweenQueues,"    @Test
    public void testSendMessagesBetweenQueues() throws Exception {
        getMockEndpoint(""mock:result"").expectedMessageCount(100);
        for (int i = 1; i <= 100; i++) {
            String payloadToSend = PAYLOAD.replace(""#"", """" + i);
            template.sendBody(""direct:start"", payloadToSend);
        }
        assertMockEndpointsSatisfied(2, TimeUnit.MINUTES);
    }
",non-flaky,5
177975,aosp-mirror_platform_frameworks_support,ColorUtilsTest.testLABToColor,"    @Test
    public void testLABToColor() {
        for (TestEntry entry : sEntryList) {
            verifyLABToColor(entry.lab, entry.rgb);
        }
    }
",non-flaky,5
91415,strapdata_elassandra,OpenLdapUserSearchSessionFactoryTests.init,"@TestLogging(""org.elasticsearch.xpack.core.ssl.SSLService:TRACE"")
    public void init() throws Exception {
        Path caPath = getDataPath(LDAPCACERT_PATH);
        /*
         * Prior to each test we reinitialize the socket factory with a new SSLService so that we get a new SSLContext.
         * If we re-use a SSLContext, previously connected sessions can get re-established which breaks hostname
         * verification tests since a re-established connection does not perform hostname verification.
         */
        globalSettings = Settings.builder()
            .put(""path.home"", createTempDir())
            .put(""xpack.ssl.certificate_authorities"", caPath)
            .build();
        threadPool = new TestThreadPool(""LdapUserSearchSessionFactoryTests"");
    }
",non-flaky,5
53223,cloudfoundry_uaa,SamlLoginIT.testSimpleSamlPhpPasscodeRedirect,"    @Test
    public void testSimpleSamlPhpPasscodeRedirect() throws Exception {
        testSimpleSamlLogin(""/passcode"", ""Temporary Authentication Code"");
    }
",non-flaky,5
106592,Alluxio_alluxio,HdfsProxyUserValidationTaskTest.wildcardProxyUsers,"  @Test
  public void wildcardProxyUsers() {
    String userName = System.getProperty(""user.name"");

    // Proxy users configured but not groups
    prepareHdfsConfFiles(ImmutableMap.of(
            String.format(""hadoop.proxyuser.%s.users"", userName), ""*""));

    HdfsProxyUserValidationTask task =
            new HdfsProxyUserValidationTask(""hdfs://namenode:9000/alluxio"", mConf);
    ValidationTaskResult result = task.validateImpl(ImmutableMap.of());
    assertEquals(ValidationUtils.State.OK, result.getState());
  }
",non-flaky,5
98353,Kong_unirest-java,ConsumerTest.tearDown,"    @AfterEach
    public void tearDown() {
        super.tearDown();
        asyncDone = false;
        status = 0;
        File file = test.toFile();
        if(file.exists()){
            file.delete();
        }
    }
",non-flaky,5
97715,vojtechhabarta_typescript-generator,DateTest.testDateAsString_forJava8DateTime,"    @Test
    public void testDateAsString_forJava8DateTime() {
        final Settings settings = TestUtils.settings();
        settings.mapDate = DateMapping.asString;
        final String dts = new TypeScriptGenerator(settings).generateTypeScript(Input.from(Java8Dates.class));
        Assert.assertTrue(dts.contains(""date: DateAsString;""));
        Assert.assertTrue(dts.contains(""dateList: DateAsString[];""));
        Assert.assertTrue(dts.contains(""datesMap: { [index: string]: DateAsString[] };""));
        Assert.assertTrue(dts.contains(""dates: DateAsString[];""));
        Assert.assertTrue(dts.contains(""type DateAsString = string;""));
    }
",non-flaky,5
59579,looly_hutool,CronTest.onStart,"	@Test
	public void cronWithListenerTest() {
		CronUtil.getScheduler().addListener(new TaskListener() {
			@Override
			public void onStart(TaskExecutor executor) {
				Console.log(""Found task:[{}] start!"", executor.getCronTask().getId());
			}
",non-flaky,5
98590,nutzam_nutz,El2Test.threeTernary,"    @Test
    public void threeTernary() {
        assertEquals(2, El.eval(""1>0?2:3""));
        assertEquals(2, El.eval(""1>0&&1<2?2:3""));
    }
",non-flaky,5
112152,apache_shardingsphere-elasticjob,ShardingItemsTest.assertToItemsString,"    @Test
    public void assertToItemsString() {
        assertThat(ShardingItems.toItemsString(Arrays.asList(0, 1, 2)), is(""0,1,2""));
    }
",non-flaky,5
159663,liquibase_liquibase,AbstractIntegrationTest.testOutputChangeLogIgnoringSchema,"    @Test
    public void testOutputChangeLogIgnoringSchema() throws Exception {
        assumeNotNull(this.getDatabase());

        String schemaName = getDatabase().getDefaultSchemaName();
        if (schemaName == null) {
            return;
        }

        getDatabase().setOutputDefaultSchema(false);
        getDatabase().setOutputDefaultCatalog(false);

        StringWriter output = new StringWriter();
        Liquibase liquibase = createLiquibase(includedChangeLog);
        clearDatabase();

        liquibase = createLiquibase(includedChangeLog);
        liquibase.update(contexts, output);

        String outputResult = output.getBuffer().toString();
        assertNotNull(""generated SQL may not be empty"", outputResult);
        assertTrue(""Expect at least 100 bytes of output in generated SQL"", outputResult.length() > 100);
        CharSequence expected = ""CREATE TABLE ""+getDatabase().escapeTableName(getDatabase().getLiquibaseCatalogName(), getDatabase().getLiquibaseSchemaName(), getDatabase().getDatabaseChangeLogTableName());
        assertTrue(""create databasechangelog command not found in: \n"" + outputResult, outputResult.contains(expected));
        assertTrue(""create databasechangeloglock command not found in: \n"" + outputResult, outputResult.contains(expected));
        assertFalse(""the schema name '"" + schemaName + ""' should be ignored\n\n"" + outputResult, outputResult.contains
                (schemaName+"".""));
    }
",non-flaky,5
118742,netty_netty,ByteBufUtilTest.notEqualsBufferSubsections,"    @Test
    public void notEqualsBufferSubsections() {
        byte[] b1 = new byte[50];
        byte[] b2 = new byte[256];
        Random rand = new Random();
        rand.nextBytes(b1);
        rand.nextBytes(b2);
        final int iB1 = b1.length / 2;
        final int iB2 = iB1 + b1.length;
        final int length = b1.length - iB1;
        System.arraycopy(b1, iB1, b2, iB2, length);
        // Randomly pick an index in the range that will be compared and make the value at that index differ between
        // the 2 arrays.
        int diffIndex = random(rand, iB1, iB1 + length - 1);
        ++b1[diffIndex];
        assertFalse(ByteBufUtil.equals(Unpooled.wrappedBuffer(b1), iB1, Unpooled.wrappedBuffer(b2), iB2, length));
    }
",non-flaky,5
98319,spotify_docker-client,DockerHostTest.testDefaultDockerEndpoint,"  @Test
  public void testDefaultDockerEndpoint() throws Exception {
    when(systemDelegate.getProperty(""os.name"")).thenReturn(""linux"", ""mac"", ""other"");
    DockerHost.setSystemDelegate(systemDelegate);

    assertThat(DockerHost.defaultDockerEndpoint(), equalTo(""unix:///var/run/docker.sock""));
    assertThat(DockerHost.defaultDockerEndpoint(), equalTo(""unix:///var/run/docker.sock""));
    assertThat(DockerHost.defaultDockerEndpoint(), equalTo(""localhost:2375""));
  }
",non-flaky,5
175768,GoogleCloudPlatform_google-cloud-eclipse,FlexDeployPreferencesPanelTest.testAppYamlPathValidation_noValidationIfRequireValuesIsFalse,"  @Test
  public void testAppYamlPathValidation_noValidationIfRequireValuesIsFalse() {
    FlexDeployPreferencesPanel panel = createPanel(false /* requireValues */);

    Text appYamlField = findAppYamlField(panel);
    appYamlField.setText(""non/existing/app.yaml"");
    assertNull(getAppYamlPathValidationStatus(panel));
  }
",non-flaky,5
113769,salesforce_reactive-grpc,ReactiveStreamObserverPublisherClientTest.onNextDelegates,"    @Test
    public void onNextDelegates() {
        ClientCallStreamObserver<Object> obs = mock(ClientCallStreamObserver.class);
        Subscriber<Object> sub = mock(Subscriber.class);

        ReactiveStreamObserverPublisherClient<Object> pub = new ReactiveStreamObserverPublisherClient<Object>(obs);
        pub.subscribe(sub);

        Object obj = new Object();

        pub.onNext(obj);
        verify(sub).onNext(obj);
    }
",non-flaky,5
60862,apache_druid,DistinctCountTopNQueryTest.testTopNWithDistinctCountAgg,"  @Test
  public void testTopNWithDistinctCountAgg() throws Exception
  {
    TopNQueryEngine engine = new TopNQueryEngine(pool);

    IncrementalIndex index = new OnheapIncrementalIndex.Builder()
        .setIndexSchema(
            new IncrementalIndexSchema.Builder()
                .withQueryGranularity(Granularities.SECOND)
                .withMetrics(new CountAggregatorFactory(""cnt""))
                .build()
        )
        .setMaxRowCount(1000)
        .build();

    String visitor_id = ""visitor_id"";
    String client_type = ""client_type"";
    DateTime time = DateTimes.of(""2016-03-04T00:00:00.000Z"");
    long timestamp = time.getMillis();
    index.add(
        new MapBasedInputRow(
            timestamp,
            Lists.newArrayList(visitor_id, client_type),
            ImmutableMap.of(visitor_id, ""0"", client_type, ""iphone"")
        )
    );
    index.add(
        new MapBasedInputRow(
            timestamp,
            Lists.newArrayList(visitor_id, client_type),
            ImmutableMap.of(visitor_id, ""1"", client_type, ""iphone"")
        )
    );
    index.add(
        new MapBasedInputRow(
            timestamp,
            Lists.newArrayList(visitor_id, client_type),
            ImmutableMap.of(visitor_id, ""2"", client_type, ""android"")
        )
    );

    TopNQuery query = new TopNQueryBuilder().dataSource(QueryRunnerTestHelper.DATA_SOURCE)
                          .granularity(QueryRunnerTestHelper.ALL_GRAN)
                          .intervals(QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC)
                          .dimension(client_type)
                          .metric(""UV"")
                          .threshold(10)
                          .aggregators(
                              QueryRunnerTestHelper.ROWS_COUNT,
                              new DistinctCountAggregatorFactory(""UV"", visitor_id, null)
                          )
                          .build();

    final Iterable<Result<TopNResultValue>> results =
        engine.query(query, new IncrementalIndexStorageAdapter(index), null).toList();

    List<Result<TopNResultValue>> expectedResults = Collections.singletonList(
        new Result<>(
            time,
            new TopNResultValue(
                Arrays.<Map<String, Object>>asList(
                    ImmutableMap.of(
                        client_type, ""iphone"",
                        ""UV"", 2L,
                        ""rows"", 2L
                    ),
                    ImmutableMap.of(
                        client_type, ""android"",
                        ""UV"", 1L,
                        ""rows"", 1L
                    )
                )
            )
        )
    );
    TestHelper.assertExpectedResults(expectedResults, results);
  }
",non-flaky,5
38280,palantir_atlasdb,AbstractTransactionTest.testKeyValueRangeWithDeletes,"    @Test
    public void testKeyValueRangeWithDeletes() {
        putDirect(""row1"", ""col1"", """", 0);

        ImmutableList<RowResult<Value>> list = ImmutableList.copyOf(keyValueService.getRange(TEST_TABLE, RangeRequest.builder().build(), 1));
        assertEquals(1, list.size());
        RowResult<Value> row = list.iterator().next();
        assertEquals(1, row.getColumns().size());
    }
",non-flaky,5
26894,wildfly_wildfly,InMemoryNamingStoreTestCase.testUnbindNotFound,"    @Test
    public void testUnbindNotFound() throws Exception {
        try {
            nameStore.unbind(new CompositeName(""test""));
            fail(""Should have thrown and NameNotFoundException"");
        } catch(NameNotFoundException expected) {}
    }
",non-flaky,5
137114,spring-projects_spring-framework,AbstractMethodMetadataTests.verifyEquals,"	@Test
	public void verifyEquals() throws Exception {
		MethodMetadata withMethod1 = getTagged(WithMethod.class);
		MethodMetadata withMethod2 = getTagged(WithMethod.class);
		MethodMetadata withMethodWithTwoArguments1 = getTagged(WithMethodWithTwoArguments.class);
		MethodMetadata withMethodWithTwoArguments2 = getTagged(WithMethodWithTwoArguments.class);

		assertThat(withMethod1.equals(null)).isFalse();

		assertThat(withMethod1.equals(withMethod1)).isTrue();
		assertThat(withMethod2.equals(withMethod2)).isTrue();
		assertThat(withMethod1.equals(withMethod2)).isTrue();
		assertThat(withMethod2.equals(withMethod1)).isTrue();

		assertThat(withMethodWithTwoArguments1.equals(withMethodWithTwoArguments1)).isTrue();
		assertThat(withMethodWithTwoArguments2.equals(withMethodWithTwoArguments2)).isTrue();
		assertThat(withMethodWithTwoArguments1.equals(withMethodWithTwoArguments2)).isTrue();
		assertThat(withMethodWithTwoArguments2.equals(withMethodWithTwoArguments1)).isTrue();

		assertThat(withMethod1.equals(withMethodWithTwoArguments1)).isFalse();
		assertThat(withMethodWithTwoArguments1.equals(withMethod1)).isFalse();
	}
",non-flaky,5
122579,vespa-engine_vespa,FileSnapshotTest.fileRemoval,"    @Test
    public void fileRemoval() {
        path.createParents().writeUtf8File(""file content"");
        fileSnapshot = fileSnapshot.snapshot();
        assertTrue(fileSnapshot.exists());
        path.deleteIfExists();
        fileSnapshot = fileSnapshot.snapshot();
        assertFalse(fileSnapshot.exists());
    }
",non-flaky,5
179424,abel533_Mapper,NameStyleTest.testLowercase,"    @Test
    public void testLowercase(){
        EntityHelper.initEntityNameMap(UserLowercase.class, config);
        EntityTable entityTable = EntityHelper.getEntityTable(UserLowercase.class);
        Assert.assertNotNull(entityTable);
        Assert.assertEquals(""userlowercase"", entityTable.getName());

        Set<EntityColumn> columns = entityTable.getEntityClassColumns();
        Assert.assertEquals(1, columns.size());

        for (EntityColumn column : columns) {
            Assert.assertEquals(""username"", column.getColumn());
            Assert.assertEquals(""userName"", column.getProperty());

            Assert.assertEquals(""username = #{userName}"", column.getColumnEqualsHolder());
            Assert.assertEquals(""username = #{record.userName}"", column.getColumnEqualsHolder(""record""));
            Assert.assertEquals(""#{userName}"", column.getColumnHolder());
            Assert.assertEquals(""#{record.userName}"", column.getColumnHolder(""record""));
            Assert.assertEquals(""#{record.userName}"", column.getColumnHolder(""record"", ""suffix""));
            Assert.assertEquals(""#{record.userNamesuffix},"", column.getColumnHolder(""record"", ""suffix"", "",""));
            Assert.assertNull(column.getTypeHandler());
        }

        ResultMap resultMap = entityTable.getResultMap(configuration);
        Assert.assertEquals(""[USERNAME]"", resultMap.getMappedColumns().toString());

        Assert.assertEquals(1, resultMap.getResultMappings().size());

        ResultMapping resultMapping = resultMap.getResultMappings().get(0);
        Assert.assertEquals(""username"", resultMapping.getColumn());
        Assert.assertEquals(""userName"", resultMapping.getProperty());
        Assert.assertNull(resultMapping.getJdbcType());
        Assert.assertEquals(StringTypeHandler.class, resultMapping.getTypeHandler().getClass());
    }
",non-flaky,5
162443,testcontainers_testcontainers-java,HttpWaitStrategyTest.testWaitUntilReadyWithSuccess,"    @Test
    public void testWaitUntilReadyWithSuccess() {
        waitUntilReadyAndSucceed(createShellCommand(""200 OK"", GOOD_RESPONSE_BODY));
    }
",non-flaky,5
59623,looly_hutool,JschUtilTest.bindRemotePort,"	@Test
	public void bindRemotePort() throws InterruptedException {
		// å»ºç«ä¼è¯
		Session session = JschUtil.getSession(""looly.centos"", 22, ""test"", ""123456"");
		// ç»å®sshæå¡ç«¯8089ç«¯å£å°æ¬æºç8000ç«¯å£ä¸
		boolean b = JschUtil.bindRemotePort(session, 8089, ""localhost"", 8000);
		Assert.assertTrue(b);
		// ä¿è¯ä¸ç´è¿è¡
//		while (true){
//			Thread.sleep(3000);
//		}
	}
",non-flaky,5
106579,Alluxio_alluxio,HdfsVersionValidationTaskTest.versionParsing,"  @Test
  public void versionParsing() {
    String versionStr = ""Hadoop 2.7.2\n""
            + ""Subversion https://git-wip-us.apache.org/repos/asf/hadoop.git ""
            + ""-r b165c4fe8a74265c792ce23f546c64604acf0e41\n""
            + ""Compiled by jenkins on 2016-01-26T00:08Z\n""
            + ""Compiled with protoc 2.5.0\n""
            + ""From source with checksum d0fda26633fa762bff87ec759ebe689c\n""
            + ""This command was run using ""
            + ""/tmp/hadoop/share/hadoop/common/hadoop-common-2.7.2.jar"";

    HdfsVersionValidationTask task = new HdfsVersionValidationTask(sConf);
    String version = task.parseVersion(versionStr);
    assertEquals(""2.7.2"", version);
  }
",non-flaky,5
70816,apache_kafka,PluginsTest.shouldShareStaticValuesBetweenSamePlugin,"    @Test
    public void shouldShareStaticValuesBetweenSamePlugin() {
        // Plugins are not isolated from other instances of their own class.
        TestPlugins.assertAvailable();
        Converter firstPlugin = plugins.newPlugin(
            TestPlugins.ALIASED_STATIC_FIELD,
            new AbstractConfig(new ConfigDef(), Collections.emptyMap()),
            Converter.class
        );

        assertInstanceOf(SamplingTestPlugin.class, firstPlugin, ""Cannot collect samples"");

        Converter secondPlugin = plugins.newPlugin(
            TestPlugins.ALIASED_STATIC_FIELD,
            new AbstractConfig(new ConfigDef(), Collections.emptyMap()),
            Converter.class
        );

        assertInstanceOf(SamplingTestPlugin.class, secondPlugin, ""Cannot collect samples"");
        assertSame(
            ((SamplingTestPlugin) firstPlugin).otherSamples(),
            ((SamplingTestPlugin) secondPlugin).otherSamples()
        );
    }
",non-flaky,5
162761,OpenAPITools_openapi-generator,ReadOnlyFirstTest.testReadOnlyFirst,"    @Test
    public void testReadOnlyFirst() {
        // TODO: test ReadOnlyFirst
    }
",non-flaky,5
98325,spotify_docker-client,DockerHostTest.testDefaultCertPath,"  @Test
  public void testDefaultCertPath() throws Exception {
    when(systemDelegate.getProperty(""user.home"")).thenReturn(""foobar"");
    DockerHost.setSystemDelegate(systemDelegate);

    assertThat(DockerHost.defaultCertPath(), equalTo(""foobar/.docker""));
  }
",non-flaky,5
30978,camunda-cloud_zeebe,UnpackedObjectTest.shouldResetObjectBeforeReadingValue,"    @Test
    public void shouldResetObjectBeforeReadingValue() {
      // given
      final var property = new StringProperty(""property"", ""default"");
      final var unpackedObject = new UnpackedObject();

      unpackedObject.declareProperty(property);

      final var buffer = new UnsafeBuffer(ByteBuffer.allocate(100));

      unpackedObject.write(buffer, 0);

      final var spyUnpackedObject = spy(unpackedObject);

      // when
      spyUnpackedObject.wrap(buffer);

      // then
      final var orderOfInvocations = Mockito.inOrder(spyUnpackedObject);
      orderOfInvocations.verify(spyUnpackedObject).reset();
      orderOfInvocations.verify(spyUnpackedObject).read(Mockito.any());
    }
",non-flaky,5
38264,palantir_atlasdb,AbstractSerializableTransactionTest.testLargerCycleWithReadOnly,"    @Test
    public void testLargerCycleWithReadOnly() {
        String initialValue = ""100"";
        String newValue = ""101"";
        String newValue2 = ""102"";
        Transaction t0 = startTransaction();
        put(t0, ""row1"", ""col1"", initialValue);
        put(t0, ""row2"", ""col1"", initialValue);
        t0.commit();

        Transaction t1 = startTransaction();
        put(t1, ""row1"", ""col1"", newValue);
        Transaction t2 = startTransaction();
        String row1Get = get(t2, ""row1"", ""col1"");
        assertEquals(initialValue, row1Get);
        put(t2, ""row2"", ""col1"", row1Get);

        t1.commit();
        Transaction t3 = startTransaction();
        put(t3, ""row1"", ""col1"", newValue2);
        t3.commit();
        Transaction readOnly = startTransaction();
        assertEquals(newValue2, get(readOnly, ""row1"", ""col1""));
        assertEquals(initialValue, get(readOnly, ""row2"", ""col1""));

        try {
            t2.commit();
            fail();
        } catch (TransactionSerializableConflictException e) {
            // this is expectecd to throw because it is a write skew
        }
    }
",non-flaky,5
133895,julianghionoiu_dpnt-coverage,LanguageTest.should_identify_language_based_on_key,"    @Test
    public void should_identify_language_based_on_key() throws IllegalLanguageException {
        assertThat(Language.of(""java""), is(JAVA));
    }
",non-flaky,5
156167,soot-oss_soot,TypingMinimizeTest.testJavaInterfaceTyping,"  @Test
  public void testJavaInterfaceTyping() {

    List<Typing> typingList = new ArrayList<>();

    Local x1 = new JimpleLocal(""$x1"", null);

    Typing typing1 = new Typing(Arrays.asList(x1));
    typing1.set(x1, interfaceType);
    typingList.add(typing1);

    Typing typing2 = new Typing(Arrays.asList(x1));
    typing2.set(x1, integerType);
    typingList.add(typing2);

    Typing typing3 = new Typing(Arrays.asList(x1));
    typing3.set(x1, numberType);
    typingList.add(typing3);

    getTypingStrategy().minimize(typingList, new BytecodeHierarchy());

    assertEquals(2, typingList.size());
    assertThat(typingList, containsInAnyOrder(typing2, typing1));
  }
",non-flaky,5
99722,apache_cassandra,FQLReplayTest.testQueryIterator,"    @Test
    public void testQueryIterator() throws IOException
    {
        File f = generateQueries(100, false);
        int queryCount = 0;
        try (ChronicleQueue queue = ChronicleQueueBuilder.single(f).build();
             FQLQueryIterator iter = new FQLQueryIterator(queue.createTailer(), 1))
        {
            long last = -1;
            while (iter.hasNext())
            {
                FQLQuery q = iter.next();
                assertTrue(q.queryStartTime >= last);
                last = q.queryStartTime;
                queryCount++;
            }
        }
        assertEquals(100, queryCount);
    }
",non-flaky,5
91487,strapdata_elassandra,IndexPrimaryRelocationIT.run,"    @TestLogging(""_root:DEBUG,org.elasticsearch.action.bulk:TRACE,org.elasticsearch.index.shard:TRACE,org.elasticsearch.cluster.service:TRACE"")
    public void testPrimaryRelocationWhileIndexing() throws Exception {
        internalCluster().ensureAtLeastNumDataNodes(randomIntBetween(2, 3));
        client().admin().indices().prepareCreate(""test"")
            .setSettings(Settings.builder().put(""index.number_of_shards"", 1).put(""index.number_of_replicas"", 0))
            .addMapping(""type"", ""field"", ""type=text"")
            .get();
        ensureGreen(""test"");
        AtomicInteger numAutoGenDocs = new AtomicInteger();
        final AtomicBoolean finished = new AtomicBoolean(false);
        Thread indexingThread = new Thread() {
            @Override
            public void run() {
                while (finished.get() == false) {
                    IndexResponse indexResponse = client().prepareIndex(""test"", ""type"", ""id"").setSource(""field"", ""value"").get();
                    assertEquals(DocWriteResponse.Result.CREATED, indexResponse.getResult());
                    DeleteResponse deleteResponse = client().prepareDelete(""test"", ""type"", ""id"").get();
                    assertEquals(DocWriteResponse.Result.DELETED, deleteResponse.getResult());
                    client().prepareIndex(""test"", ""type"").setSource(""auto"", true).get();
                    numAutoGenDocs.incrementAndGet();
                }
            }
",non-flaky,5
176810,ctco_cukes,EndsWithRegexpTest.matchesDirectMatch,"    @Test
    public void matchesDirectMatch() throws Exception {
        assertThat(""hello"", EndsWithRegexp.endsWithRegexp(""hello""));
    }
",non-flaky,5
135770,Netflix_Hystrix,HystrixPluginsTest.testMetricsPublisherDefaultImpl,"    /*@Test
    public void testMetricsPublisherDefaultImpl() {
        HystrixMetricsPublisher impl = HystrixPlugins.getInstance().getMetricsPublisher();
        assertTrue(impl instanceof HystrixMetricsPublisherDefault);
    }
",non-flaky,5
98300,spotify_docker-client,UnixTimestampDeserializerTest.testFromNumber,"  @Test
  public void testFromNumber() throws Exception {
    final String json = toJson(""{\""date\"": %s}"");

    final TestClass value = OBJECT_MAPPER.readValue(json, TestClass.class);
    assertThat(value.getDate(), equalTo(referenceDateTime.toDate()));
  }
",non-flaky,5
98363,Kong_unirest-java,CachingAlternativeTest.invalidate,"    @Test
        public void invalidate() {
            regular.invalidateAll();
            async.invalidateAll();
        }
",non-flaky,5
156058,jReddit_jReddit,RedditTokenTest.testTimeSensitiveExpiration,"    @Test
    public void testTimeSensitiveExpiration() {
        
        RedditToken subject = new RedditToken(jsonToken);
        RedditToken subjectUserProvided = new RedditToken(accessToken, tokenType, expiresIn2, scope);
        
        assertFalse(subjectUserProvided.willExpireIn(expiresIn2 - 60));
        assertTrue(subjectUserProvided.willExpireIn(expiresIn2 + 60));
        assertFalse(subjectUserProvided.isExpired());
        
        try {
            Thread.sleep(2000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        
        assertTrue(subject.isExpired());
        assertTrue(subject.getExpiration() < (System.currentTimeMillis() / 1000));
        
    }
",non-flaky,5
175773,GoogleCloudPlatform_google-cloud-eclipse,AppYamlValidatorTest.testValidate_absolutePathAndNoAppYaml,"  @Test
  public void testValidate_absolutePathAndNoAppYaml() {
    String absolutePath = basePath + ""/sub/directory/app.yaml"";
    when(appYamlPath.getValue()).thenReturn(absolutePath);

    IStatus result = pathValidator.validate();
    assertEquals(IStatus.ERROR, result.getSeverity());
    assertEquals(""app.yaml does not exist."", result.getMessage());
  }
",non-flaky,5
19516,eclipse_xtext-core,TraceRegionTest.testAnnotate_01,"	@Test
	public void testAnnotate_01() {
		TraceRegion region = new TraceRegion(0, 1, 0, 0, true, 2, 3, 0, 0, null, newURI());
		assertEquals(""<2:3[a]"", region.getAnnotatedString(""a""));
	}
",non-flaky,5
156400,apache_commons-lang,FastDateFormatTest.test_getInstance,"    @Test
    public void test_getInstance() {
        final FastDateFormat format1 = FastDateFormat.getInstance();
        final FastDateFormat format2 = FastDateFormat.getInstance();
        assertSame(format1, format2);
    }
",non-flaky,5
33895,apache_camel,FhirReadIT.testResourceByStringIdAndStringResource,"    @Test
    public void testResourceByStringIdAndStringResource() throws Exception {
        final Map<String, Object> headers = new HashMap<>();
        // parameter type is Class
        headers.put(""CamelFhir.resource"", Patient.class);
        // parameter type is Long
        headers.put(""CamelFhir.stringId"", patient.getIdElement().getIdPart());

        Patient result = requestBodyAndHeaders(""direct://RESOURCE_BY_STRING_ID_AND_STRING_RESOURCE"", null, headers);

        assertValidResponse(result);
    }
",non-flaky,5
20977,NationalSecurityAgency_timely,WebSocketRequestDeserializationTest.testAddDeserializationWithTime,"    @Test
    public void testAddDeserializationWithTime() throws Exception {
        // @formatter:off
		String json = ""{"" +
						""\""operation\"" : \""add\"","" +
						""\""sessionId\"" : \""1234\"","" +
					    ""\""metric\"" : \""sys.cpu.user\"","" +
						""\""startTime\"" : \""1000\"""" +
					  ""}"";
		// @formatter:on
        WebSocketRequest request = JsonUtil.getObjectMapper().readValue(json.getBytes(), WebSocketRequest.class);
        Assert.assertNotNull(request);
        Assert.assertEquals(AddSubscription.class, request.getClass());
        Assert.assertEquals(""1234"", ((AddSubscription) request).getSessionId());
        Assert.assertEquals(""sys.cpu.user"", ((AddSubscription) request).getMetric());
        Assert.assertEquals(false, ((AddSubscription) request).getTags().isPresent());
        Assert.assertEquals(true, ((AddSubscription) request).getStartTime().isPresent());
        long time = ((AddSubscription) request).getStartTime().get();
        Assert.assertEquals(1000L, time);
    }
",non-flaky,5
26764,MundaneImmortal_pair-distribution-app,DayPairsTest.testSetDate,"	@Test
	public void testSetDate() throws ParseException {
		DayPairs pairs = new DayPairs();
		Date expectedDate = new Date();
		pairs.setDate(expectedDate);
		
		assertThat(pairs.getDate(), is(equalTo(getDateWithoutTime(expectedDate))));
	}
",non-flaky,5
21241,androidx_androidx,PreferencePersistTest.stringSet_persistTwiceAndRetrieve_returnsSecondValue,"    @Test
    public void stringSet_persistTwiceAndRetrieve_returnsSecondValue() {
        final Set<String> expected = TEST_STR_SET2;

        mPreference.putStringSet(TEST_STR_SET);
        mPreference.putStringSet(expected);
        Set<String> result = mPreference.getStringSet(TEST_DEFAULT_STR_SET);

        assertThat(result, containsInAnyOrder(expected.toArray()));
    }
",non-flaky,5
97679,vojtechhabarta_typescript-generator,SpringTest.testDoubleGenericController,"    @Test
    public void testDoubleGenericController() {
        final Settings settings = TestUtils.settings();
        settings.outputFileType = TypeScriptFileType.implementationFile;
        settings.generateSpringApplicationClient = true;
        final String output = new TypeScriptGenerator(settings).generateTypeScript(Input.from(DoubleGenericController.class));
        Assert.assertTrue(output.contains("" get(): RestResponse<string[]>""));
    }
",non-flaky,5
98345,Kong_unirest-java,UriFormatterTest.testMangler_encoding,"    @Test
    public void testMangler_encoding() {
        assertLinkSurvives(""http://localhost/test%2Fthis"");
    }
",non-flaky,5
76943,Tencent_Firestorm,ShuffleReadClientImplTest.readTest3,"  @Test
  public void readTest3() throws Exception {
    String basePath = HDFS_URI + ""clientReadTest3"";
    HdfsShuffleWriteHandler writeHandler1 =
        new HdfsShuffleWriteHandler(""appId"", 0, 0, 1, basePath, ""test3_1"", conf);
    HdfsShuffleWriteHandler writeHandler2 =
        new HdfsShuffleWriteHandler(""appId"", 0, 0, 1, basePath, ""test3_2"", conf);

    Map<Long, byte[]> expectedData = Maps.newHashMap();
    Roaring64NavigableMap blockIdBitmap = Roaring64NavigableMap.bitmapOf();
    Roaring64NavigableMap taskIdBitmap = Roaring64NavigableMap.bitmapOf(0);
    writeTestData(writeHandler1, 2, 30, 0, expectedData, blockIdBitmap);
    writeTestData(writeHandler2, 2, 30, 0, expectedData, blockIdBitmap);

    // duplicate file created, it should be used in product environment
    String shuffleFolder = basePath + ""/appId/0/0-1"";
    FileUtil.copy(fs, new Path(shuffleFolder + ""/test3_1_0.data""), fs,
        new Path(basePath + ""/test3_1.cp.data""), false, conf);
    FileUtil.copy(fs, new Path(shuffleFolder + ""/test3_1_0.index""), fs,
        new Path(basePath + ""/test3_1.cp.index""), false, conf);
    FileUtil.copy(fs, new Path(shuffleFolder + ""/test3_2_0.data""), fs,
        new Path(basePath + ""/test3_2.cp.data""), false, conf);
    FileUtil.copy(fs, new Path(shuffleFolder + ""/test3_2_0.index""), fs,
        new Path(basePath + ""/test3_2.cp.index""), false, conf);

    ShuffleReadClientImpl readClient = new ShuffleReadClientImpl(StorageType.HDFS.name(),
        ""appId"", 0, 1, 100, 2, 10, 1000,
        basePath, blockIdBitmap, taskIdBitmap, Lists.newArrayList(), new Configuration());

    TestUtils.validateResult(readClient, expectedData);
    readClient.checkProcessedBlockIds();
    readClient.close();
  }
",non-flaky,5
26906,wildfly_wildfly,InitialContextFactoryTestCase.testJavaContext,"    @Test
    public void testJavaContext() throws Exception {
        System.setProperty(Context.INITIAL_CONTEXT_FACTORY, InitialContextFactory.class.getName());
        System.setProperty(Context.URL_PKG_PREFIXES, ""org.jboss.as.naming.interfaces"");
        InitialContext initialContext = new InitialContext();
        Context context = (Context) initialContext.lookup(""java:"");
        assertTrue(context instanceof NamingContext);
    }
",non-flaky,5
77695,pholser_junit-quickcheck,PrimitivePropertyParameterTypesTest.shouldHold,"    @Test public void wrapperCharacter() {
        @Property public void shouldHold(Character ch) {
        }
",non-flaky,5
134989,undertow-io_undertow,AnnotatedEndpointTest.testRedirectHandling,"    @Test
    public void testRedirectHandling() throws Exception {
        AnnotatedClientEndpoint.reset();
        Session session = deployment.connectToServer(AnnotatedClientEndpoint.class, new URI(""ws://"" + DefaultServer.getHostAddress(""default"") + "":"" + DefaultServer.getHostPort(""default"") + ""/ws/redirect""));

        Assert.assertEquals(""hi Stuart (protocol=foo)"", AnnotatedClientEndpoint.message());

        session.close();
        Assert.assertEquals(""CLOSED"", AnnotatedClientEndpoint.message());
    }
",non-flaky,5
113993,apache_struts,URLDecoderUtilTest.testURLDecodeStringValidUtf8Middle,"    @Test
    public void testURLDecodeStringValidUtf8Middle() {

        String result = URLDecoderUtil.decode(""xx%c3%aaxx"", ""UTF-8"");
        assertEquals(""xx\u00eaxx"", result);
    }
",non-flaky,5
98308,spotify_docker-client,ImageRefTest.testImageWithTagAndRegistry,"  @Test
  public void testImageWithTagAndRegistry() {
    final ImageRef sut = new ImageRef(""registry:4711/foo/bar:12345"");
    assertThat(sut.getImage(), equalTo(""registry:4711/foo/bar""));
    assertThat(sut.getTag(), is(""12345""));
  }
",non-flaky,5
70849,apache_kafka,WorkerSourceTaskTest.testHeaders,"    @Test
    public void testHeaders() throws Exception {
        Headers headers = new RecordHeaders();
        headers.add(""header_key"", ""header_value"".getBytes());

        org.apache.kafka.connect.header.Headers connectHeaders = new ConnectHeaders();
        connectHeaders.add(""header_key"", new SchemaAndValue(Schema.STRING_SCHEMA, ""header_value""));

        createWorkerTask();

        List<SourceRecord> records = new ArrayList<>();
        records.add(new SourceRecord(PARTITION, OFFSET, ""topic"", null, KEY_SCHEMA, KEY, RECORD_SCHEMA, RECORD, null, connectHeaders));

        Capture<ProducerRecord<byte[], byte[]>> sent = expectSendRecord(true, false, true, true, true, headers);

        PowerMock.replayAll();

        Whitebox.setInternalState(workerTask, ""toSend"", records);
        Whitebox.invokeMethod(workerTask, ""sendRecords"");
        assertEquals(SERIALIZED_KEY, sent.getValue().key());
        assertEquals(SERIALIZED_RECORD, sent.getValue().value());
        assertEquals(headers, sent.getValue().headers());

        PowerMock.verifyAll();
    }
",non-flaky,5
156133,soot-oss_soot,DexByteCodeInstrutionsTest.InvokePolymorphic1,"  @Test
  public void InvokePolymorphic1() {
    final SootMethod testTarget = prepareTarget(
        methodSigFromComponents(TARGET_CLASS, ""void invokePolymorphicTarget(java.lang.invoke.MethodHandle)""), TARGET_CLASS);

    // We model invokePolymorphic as invokeVirtual
    final List<InvokeExpr> invokes = invokesFromMethod(testTarget);
    Assert.assertEquals(1, invokes.size());
    final InvokeExpr invokePoly = invokes.get(0);
    Assert.assertTrue(invokePoly instanceof VirtualInvokeExpr);
    final SootMethodRef targetMethodRef = invokePoly.getMethodRef();
    Assert.assertEquals(methodSigFromComponents(METHOD_HANDLE_CLASS, METHOD_HANDLE_INVOKE_SUBSIG),
        targetMethodRef.getSignature());
  }
",non-flaky,5
177199,line_armeria,SpringTomcatApplicationItTest.contextLoads,"    @Test
    public void contextLoads() {
        assertThat(greetingController).isNotNull();
    }
",non-flaky,5
95733,togglz_togglz,JDBCStateRepositoryTest.testShouldReadStateWithStrategyAndParameters,"    @Test
    public void testShouldReadStateWithStrategyAndParameters() throws SQLException {

        /*
         * GIVEN a database row containing a simple feature state
         */
        update(dataSource, ""INSERT INTO TOGGLZ VALUES ('F1', 1, 'myStrategy', 'param23=foobar')"");

        /*
         * WHEN the repository reads the state
         */
        FeatureState state = repository.getFeatureState(TestFeature.F1);

        /*
         * THEN the properties should be set like expected
         */
        assertNotNull(state);
        assertEquals(TestFeature.F1, state.getFeature());
        assertEquals(true, state.isEnabled());
        assertEquals(""myStrategy"", state.getStrategyId());
        assertEquals(1, state.getParameterNames().size());
        assertEquals(""foobar"", state.getParameter(""param23""));

    }
",non-flaky,5
179443,abel533_Mapper,AggregationMapperTest.testSum,"    @Test
    public void testSum() {
        SqlSession sqlSession = getSqlSession();
        try {
            UserMapper mapper = sqlSession.getMapper(UserMapper.class);
            AggregateCondition aggregateCondition = AggregateCondition.builder().
                    aggregateBy(""id"").aliasName(""aggregation"").aggregateType(AggregateType.SUM);
            Example example = new Example(User.class);
            List<User> m = mapper.selectAggregationByExample(example, aggregateCondition);
            Assert.assertEquals(1, m.size());
            Assert.assertEquals(new Long(21), m.get(0).getAggregation());
        } finally {
            sqlSession.close();
        }
    }
",non-flaky,5
33744,alibaba_fastjson,FastJsonHttpMessageConverterTest.test5,"    @Test
    public void test5() throws Exception {

        String jsonStr = ""{\""packet\"":{\""smsType\"":\""USER_LOGIN\""}}"";

        mockMvc.perform(
                (post(""/fastjson/test5"").characterEncoding(""UTF-8"").content(
                        jsonStr).contentType(MediaType.APPLICATION_JSON)))
                .andDo(print());
    }
",non-flaky,5
104678,apache_pinot,RealtimeToOfflineSegmentsMinionClusterIntegrationTest.testGeneratedQueriesWithoutMultiValues,"  @Test(enabled = false)
  public void testGeneratedQueriesWithoutMultiValues() {
  }
",non-flaky,5
98071,vert-x3_vertx-mongo-client,FindOptionsTest.testToJson,"  @Test
  public void testToJson() {
    FindOptions options = new FindOptions();
    JsonObject fields = randomJsonObject();
    JsonObject sort = randomJsonObject();
    int limit = TestUtils.randomPositiveInt();
    int skip = TestUtils.randomPositiveInt();
    options.setFields(fields);
    options.setSort(sort);
    options.setLimit(limit);
    options.setSkip(skip);

    assertEquals(options, new FindOptions(options.toJson()));
  }
",non-flaky,5
135774,Netflix_Hystrix,HystrixPluginsTest.testPropertiesStrategyViaRegisterMethod,"    @Test
    public void testPropertiesStrategyViaRegisterMethod() {
        HystrixPlugins.getInstance().registerPropertiesStrategy(new HystrixPropertiesStrategyTestImpl());
        HystrixPropertiesStrategy impl = HystrixPlugins.getInstance().getPropertiesStrategy();
        assertTrue(impl instanceof HystrixPropertiesStrategyTestImpl);
    }
",non-flaky,5
21182,androidx_androidx,SimplePreferenceComparisonCallbackTest.testSummaryComparison,"    @Test
    public void testSummaryComparison() throws Exception {
        mPref1.setSummary(""value 1"");

        assertFalse(""Compare non-null to null"",
                mComparisonCallback.arePreferenceContentsTheSame(mPref1, mPref2));
        assertFalse(""Compare null to non-null"",
                mComparisonCallback.arePreferenceContentsTheSame(mPref2, mPref1));

        mPref2.setSummary(""value 1"");

        assertTrue(""Compare identical"",
                mComparisonCallback.arePreferenceContentsTheSame(mPref1, mPref2));

        mPref2.setSummary(""value 2"");

        assertFalse(""Compare different"",
                mComparisonCallback.arePreferenceContentsTheSame(mPref1, mPref2));
    }
",non-flaky,5
26763,MundaneImmortal_pair-distribution-app,DayPairsTest.testAddPairAndGetTracks,"	@Test
	public void testAddPairAndGetTracks(){
		HashMap<String, Pair> expectedPairs = new HashMap<String, Pair>();
		expectedPairs.put(""testTrack"", new Pair(Arrays.asList(new Developer(""dev1""), new Developer(""dev2""))));
		DayPairs pairs = new DayPairs();
		pairs.addPair(""testTrack"", expectedPairs.get(""testTrack""));
		
		assertThat(pairs.getPairs(), is(equalTo(expectedPairs)));
		assertThat(pairs.getTracks(), is(equalTo(new HashSet<>(Arrays.asList(""testTrack"")))));
	}
",non-flaky,5
19464,eclipse_xtext-core,DelegatingScopeProviderTest.getScope,"	@Test
	public void testOneSuitableDelegate_02() {
		final int[] invocationCount = new int[] { 0 };
		AbstractGlobalScopeDelegatingScopeProvider root = new AbstractGlobalScopeDelegatingScopeProvider() {
			
			@Override
			public IScope getScope(EObject context, EReference reference) {
				return IScope.NULLSCOPE;
			}
",non-flaky,5
135041,undertow-io_undertow,NetworkUtilsAddressParsingTestCase.testIpV4AddressToLarge,"    @Test(expected = IOException.class)
    public void testIpV4AddressToLarge() throws IOException {
        NetworkUtils.parseIpv4Address(""01.123.255.1.1"");
    }
",non-flaky,5
26742,MundaneImmortal_pair-distribution-app,DeveloperTest.testHashCodeOfDifferentInstances,"	@Test
	public void testHashCodeOfDifferentInstances() {
		Developer developer = new Developer(""developerId"");
		Developer differentDeveloper = new Developer(""developerId2"");
		
		assertThat(developer.hashCode(), is(not(differentDeveloper.hashCode())));
	}
",non-flaky,5
112735,hwang-pku_ormlite-core,DatabaseConnectionProxyTest.testInsert,"	@Test
	public void testInsert() throws Exception {
		DatabaseConnection conn = createMock(DatabaseConnection.class);
		String statement = ""insert bar"";
		int result = 13712321;
		expect(conn.insert(statement, null, null, null)).andReturn(result);
		conn.close();
		DatabaseConnectionProxy proxy = new DatabaseConnectionProxy(conn);
		replay(conn);
		assertEquals(result, proxy.insert(statement, null, null, null));
		proxy.close();
		verify(conn);
	}
",non-flaky,5
136453,kiwiproject_dropwizard-service-utilities,StandardExceptionMappersTest.build,"        @Test
                public Server build(Environment environment) {
                    return null;
                }
",non-flaky,5
112141,apache_shardingsphere-elasticjob,LiteJobConfigurationTest.assertIsFailover,"    @Test
    public void assertIsFailover() {
        assertTrue(LiteJobConfiguration.newBuilder(new SimpleJobConfiguration(JobCoreConfiguration.newBuilder(""test_job"", ""0/1 * * * * ?"", 3).failover(true).build(), 
                TestSimpleJob.class.getCanonicalName())).monitorExecution(true).build().isFailover());
    }
",non-flaky,5
94669,square_okhttp,Http2Test.settings,"  @Test public void readSettingsFrame() throws IOException {
      @Override public void settings(boolean clearPrevious, Settings settings) {
        assertFalse(clearPrevious); // No clearPrevious in HTTP/2.
        assertEquals(reducedTableSizeBytes, settings.getHeaderTableSize());
        assertEquals(false, settings.getEnablePush(true));
      }
",non-flaky,5
114099,aws_aws-sdk-java-v2,TableSchemaTest.fromClass_constructsBeanTableSchema,"    @Test
    public void fromClass_constructsBeanTableSchema() {
        TableSchema<SimpleBean> tableSchema = TableSchema.fromClass(SimpleBean.class);
        assertThat(tableSchema).isInstanceOf(BeanTableSchema.class);
    }
",non-flaky,5
114126,aws_aws-sdk-java-v2,LocalDateTimeAttributeConverterTest.localDateTimeAttributeConverterHigherBoundTest,"    @Test
    public void localDateTimeAttributeConverterHigherBoundTest() {
        assertFails(() -> transformTo(converter, EnhancedAttributeValue.fromString(""9999999999-12-31T00:00:00"")
                                                                       .toAttributeValue()));
    }
",non-flaky,5
112732,hwang-pku_ormlite-core,DatabaseConnectionProxyTest.testExecuteStatementNull,"	@Test
	public void testExecuteStatementNull() throws Exception {
		DatabaseConnectionProxy proxy = new DatabaseConnectionProxy(null);
		assertEquals(0, proxy.executeStatement(""statment"", 0));
		proxy.close();
	}
",non-flaky,5
170547,eclipse_jetty.project,TestResourceAnnotations.init,"    @BeforeEach
    public void init() throws Exception
    {
        server = new Server();
        wac = new WebAppContext();
        wac.setServer(server);
        injections = new InjectionCollection();
        wac.setAttribute(InjectionCollection.INJECTION_COLLECTION, injections);
        InitialContext ic = new InitialContext();
        comp = (Context)ic.lookup(""java:comp"");
        env = comp.createSubcontext(""env"");
    }
",non-flaky,5
134984,undertow-io_undertow,SuspendResumeTestCase.handleEvent,"    @Test
    public void testConnectionClosedOnPause() throws Exception {
        final CountDownLatch done = new CountDownLatch(1);
        final AtomicReference<String> message = new AtomicReference<>();
        WebSocketChannel channel = WebSocketClient.connectionBuilder(DefaultServer.getWorker(), DefaultServer.getBufferPool(), new URI(DefaultServer.getDefaultServerURL() + ""/""))
                .connect().get();
        channel.getReceiveSetter().set(new ChannelListener<WebSocketChannel>() {
            @Override
            public void handleEvent(WebSocketChannel channel) {
                try {
                    StreamSourceFrameChannel res = channel.receive();
                    if(res == null) {
                        return;
                    }
                    if (res.getType() == WebSocketFrameType.CLOSE) {
                        message.set(""closed"");
                        done.countDown();
                    }
                    Channels.drain(res, Long.MAX_VALUE);
                } catch (IOException e) {
                    if(message.get() == null) {
                        e.printStackTrace();
                        message.set(""error"");
                        done.countDown();
                    }
                }
            }
",non-flaky,5
106647,Alluxio_alluxio,AlluxioFuseFileSystemTest.getattrWhenWriting,"  @Test
  public void getattrWhenWriting() throws Exception {
    String path = ""/foo/bar"";
    AlluxioURI expectedPath = BASE_EXPECTED_URI.join(path);

    FileOutStream fos = mock(FileOutStream.class);
    when(mFileSystem.createFile(expectedPath)).thenReturn(fos);

    mFuseFs.create(path, 0, mFileInfo);

    // Prepare file status
    FileInfo info = new FileInfo();
    info.setLength(0);
    info.setCompleted(false);
    URIStatus status = new URIStatus(info);

    when(mFileSystem.exists(any(AlluxioURI.class))).thenReturn(true);
    when(mFileSystem.getStatus(any(AlluxioURI.class))).thenReturn(status);

    FileStat stat = new FileStat(Runtime.getSystemRuntime());

    // getattr() will not be blocked when writing
    mFuseFs.getattr(path, stat);
    // If getattr() is blocking, it will continuously get status of the file
    verify(mFileSystem, atMost(300)).getStatus(expectedPath);
    assertEquals(0, stat.st_size.longValue());

    mFuseFs.release(path, mFileInfo);

    // getattr() will be blocked waiting for the file to be completed
    // If release() is called (returned) but does not finished
    Thread t = new Thread(() -> mFuseFs.getattr(path, stat));
    t.start();
    Thread.sleep(1000);
    verify(mFileSystem, atLeast(10)).getStatus(expectedPath);
    assertEquals(0, stat.st_size.longValue());

    info.setCompleted(true);
    info.setLength(1000);

    t.join();

    // getattr() completed and set the file size
    assertEquals(1000, stat.st_size.longValue());
  }
",non-flaky,5
112102,apache_shardingsphere-elasticjob,DistributeOnceElasticJobListenerTest.assertBeforeJobExecutedWhenIsNotAllStartedAndTimeout,"    @Test(expected = JobSystemException.class)
    public void assertBeforeJobExecutedWhenIsNotAllStartedAndTimeout() {
        when(guaranteeService.isAllStarted()).thenReturn(false);
        when(timeService.getCurrentMillis()).thenReturn(0L, 2L);
        distributeOnceElasticJobListener.beforeJobExecuted(shardingContexts);
        verify(guaranteeService).registerStart(Arrays.asList(0, 1));
        verify(guaranteeService, times(0)).clearAllStartedInfo();
    }
",non-flaky,5
98362,Kong_unirest-java,AsFileTest.tearDown,"    @Override @AfterEach
    public void tearDown() {
        try {
            Files.delete(test);
        } catch (Exception ignored) { }
    }
",non-flaky,5
59648,looly_hutool,TemplateUtilTest.freemarkerEngineTest,"	@Test
	public void freemarkerEngineTest() {
		// å­ç¬¦ä¸²æ¨¡æ¿
		TemplateEngine engine = TemplateUtil.createEngine(
				new TemplateConfig(""templates"", ResourceMode.STRING).setCustomEngine(FreemarkerEngine.class));
		Template template = engine.getTemplate(""hello,${name}"");
		String result = template.render(Dict.create().set(""name"", ""hutool""));
		Assert.assertEquals(""hello,hutool"", result);
		
		//ClassPathæ¨¡æ¿
		engine = TemplateUtil.createEngine(
				new TemplateConfig(""templates"", ResourceMode.CLASSPATH).setCustomEngine(FreemarkerEngine.class));
		template = engine.getTemplate(""freemarker_test.ftl"");
		result = template.render(Dict.create().set(""name"", ""hutool""));
		Assert.assertEquals(""hello,hutool"", result);
	}
",non-flaky,5
160424,ConsenSys_teku,ValidatorDataProviderTest.setup,"  @TestTemplate
  public void setup(SpecContext specContext) {
    spec = specContext.getSpec();
    dataStructureUtil = specContext.getDataStructureUtil();
    schemaProvider = new SchemaObjectProvider(spec);
    provider = new ValidatorDataProvider(spec, validatorApiChannel, combinedChainDataClient);
    blockInternal = dataStructureUtil.randomBeaconBlock(123);
    block = schemaProvider.getBeaconBlock(blockInternal);
  }
",non-flaky,5
94657,square_okhttp,OptionalMethodTest.invokeWithException,"  @Test
  public void invokeWithException() throws Exception {
    SubClass2 subClass2 = new SubClass2();
    try {
      THROWS_EXCEPTION.invoke(subClass2);
    } catch (InvocationTargetException expected) {
      assertTrue(expected.getTargetException() instanceof IOException);
    }

    try {
      THROWS_RUNTIME_EXCEPTION.invoke(subClass2);
    } catch (InvocationTargetException expected) {
      assertTrue(expected.getTargetException() instanceof NumberFormatException);
    }
  }
",non-flaky,5
43044,trinodb_trino,BaseConnectorTest.testVarcharCharComparison,"    @Test
    public void testVarcharCharComparison()
    {
        skipTestUnless(hasBehavior(SUPPORTS_CREATE_TABLE));

        try (TestTable table = new TestTable(
                getQueryRunner()::execute,
                ""test_varchar_char"",
                ""(k, v) AS VALUES"" +
                        ""   (-1, CAST(NULL AS varchar(3))), "" +
                        ""   (0, CAST('' AS varchar(3))),"" +
                        ""   (1, CAST(' ' AS varchar(3))), "" +
                        ""   (2, CAST('  ' AS varchar(3))), "" +
                        ""   (3, CAST('   ' AS varchar(3))),"" +
                        ""   (4, CAST('x' AS varchar(3))),"" +
                        ""   (5, CAST('x ' AS varchar(3))),"" +
                        ""   (6, CAST('x  ' AS varchar(3)))"")) {
            assertQuery(
                    ""SELECT k, v FROM "" + table.getName() + "" WHERE v = CAST('  ' AS char(2))"",
                    // The 3-spaces value is included because both sides of the comparison are coerced to char(3)
                    ""VALUES (0, ''), (1, ' '), (2, '  '), (3, '   ')"");

            // value that's not all-spaces
            assertQuery(
                    ""SELECT k, v FROM "" + table.getName() + "" WHERE v = CAST('x ' AS char(2))"",
                    // The 3-spaces value is included because both sides of the comparison are coerced to char(3)
                    ""VALUES (4, 'x'), (5, 'x '), (6, 'x  ')"");
        }
    }
",non-flaky,5
97691,vojtechhabarta_typescript-generator,TaggedUnionsTest.testTaggedUnionsWithOverlappingInterfaces,"    @Test
    public void testTaggedUnionsWithOverlappingInterfaces() {
        final Settings settings = TestUtils.settings();
        final String output = new TypeScriptGenerator(settings).generateTypeScript(Input.from(IShape3.class));
        final String expected = (
                ""\n"" +
                ""interface IShape3 {\n"" +
                ""    kind: 'circle' | 'rectangle';\n"" +
                ""}\n"" +
                ""\n"" +
                ""interface IRectangle3 extends INamedQuadrilateral3 {\n"" +
                ""    kind: 'rectangle';\n"" +
                ""}\n"" +
                ""\n"" +
                ""interface ICircle3 extends INamedShape3 {\n"" +
                ""    kind: 'circle';\n"" +
                ""}\n"" +
                ""\n"" +
                ""interface INamedQuadrilateral3 extends INamedShape3, IQuadrilateral3 {\n"" +
                ""    kind: 'rectangle';\n"" +
                ""}\n"" +
                ""\n"" +
                ""interface INamedShape3 extends IShape3 {\n"" +
                ""    kind: 'circle' | 'rectangle';\n"" +
                ""    name: string;\n"" +
                ""}\n"" +
                ""\n"" +
                ""interface IQuadrilateral3 extends IShape3 {\n"" +
                ""    kind: 'rectangle';\n"" +
                ""}\n"" +
                ""\n"" +
                ""type IShape3Union = IRectangle3 | ICircle3;\n""
                ).replace('\'', '""');
        Assert.assertEquals(expected, output);
    }
",non-flaky,5
112751,hwang-pku_ormlite-core,DatabaseConnectionProxyTest.testIsClosed,"	@Test
	public void testIsClosed() throws Exception {
		DatabaseConnection conn = createMock(DatabaseConnection.class);
		boolean closed = true;
		expect(conn.isClosed()).andReturn(closed);
		conn.close();
		DatabaseConnectionProxy proxy = new DatabaseConnectionProxy(conn);
		replay(conn);
		assertEquals(closed, proxy.isClosed());
		proxy.close();
		verify(conn);
	}
",non-flaky,5
98234,apache_jackrabbit,PerformanceTest.testPerformance,"    @Test
    public void testPerformance() throws Exception {
        testPerformance(""2.4"");

        System.setProperty(QueryEngine.NATIVE_SORT_SYSTEM_PROPERTY, ""true"");
        testPerformance(""2.4-expSort"", getDefaultConfig());
        System.setProperty(QueryEngine.NATIVE_SORT_SYSTEM_PROPERTY, ""false"");
    }
",non-flaky,5
76689,quarkusio_quarkus,SimpleET.testHelloEndpoint,"    @Test
    public void testHelloEndpoint() {
        given()
                .when().get(""/hello"")
                .then()
                .statusCode(200)
                .body(is(""hello""));
    }
",non-flaky,5
33882,apache_camel,FhirLoadPageIT.populateServer,"    @BeforeEach
    public void populateServer() {
        List<IBaseResource> input = new ArrayList<>();

        Patient p1 = new Patient();
        p1.addName().setFamily(""PATIENT1"");
        input.add(p1);

        Patient p2 = new Patient();
        p2.addName().setFamily(""PATIENT2"");
        input.add(p2);

        input.add(new Patient().addName(new HumanName().setFamily(""PATIENT3"")));

        List<IBaseResource> response = fhirClient.transaction()
                .withResources(input)
                .encodedJson()
                .execute();
        assertEquals(3, response.size());
    }
",non-flaky,5
162429,testcontainers_testcontainers-java,GenericContainerRuleTest.customClasspathResourceMappingTest,"    @Test
    public void customClasspathResourceMappingTest() throws IOException {
        // Note: This functionality doesn't work if you are running your build inside a Docker container;
        // in that case this test will fail.
        String line = getReaderForContainerPort80(alpineClasspathResource).readLine();

        assertEquals(""Resource on the classpath can be mapped using calls to withClasspathResourceMapping"", ""FOOBAR"", line);
    }
",non-flaky,5
94668,square_okhttp,Http2Test.rstStream,"  @Test public void readRstStreamFrame() throws IOException {
      @Override public void rstStream(int streamId, ErrorCode errorCode) {
        assertEquals(expectedStreamId, streamId);
        assertEquals(ErrorCode.PROTOCOL_ERROR, errorCode);
      }
",non-flaky,5
78256,apache_beam,StateInternalsTest.testWatermarkStateIsEmpty,"  @Test
  public void testWatermarkStateIsEmpty() throws Exception {
    WatermarkHoldState value = underTest.state(NAMESPACE_1, WATERMARK_EARLIEST_ADDR);

    assertThat(value.isEmpty().read(), Matchers.is(true));
    ReadableState<Boolean> readFuture = value.isEmpty();
    value.add(new Instant(1000));
    assertThat(readFuture.read(), Matchers.is(false));

    value.clear();
    assertThat(readFuture.read(), Matchers.is(true));
  }
",non-flaky,5
135801,Netflix_Hystrix,CumulativeCommandEventCounterStreamTest.testSingleTimeout,"    @Test
    public void testSingleTimeout() {
        HystrixCommandKey key = HystrixCommandKey.Factory.asKey(""CMD-CumulativeCounter-D"");
        stream = CumulativeCommandEventCounterStream.getInstance(key, 10, 500);
        stream.startCachingStreamValuesIfUnstarted();

        final CountDownLatch latch = new CountDownLatch(1);
        stream.observe().take(5).subscribe(getSubscriber(latch));

        Command cmd = Command.from(groupKey, key, HystrixEventType.TIMEOUT);

        cmd.observe();

        try {
            assertTrue(latch.await(10000, TimeUnit.MILLISECONDS));
        } catch (InterruptedException ex) {
            fail(""Interrupted ex"");
        }
        assertEquals(HystrixEventType.values().length, stream.getLatest().length);
        long[] expected = new long[HystrixEventType.values().length];
        expected[HystrixEventType.TIMEOUT.ordinal()] = 1;
        expected[HystrixEventType.FALLBACK_SUCCESS.ordinal()] = 1;
        assertArrayEquals(expected, stream.getLatest());
    }
",non-flaky,5
133909,cdancy_jenkins-rest,SystemApiLiveTest.testAlreadyQuietDown,"    @Test(dependsOnMethods = ""testQuietDown"")
    public void testAlreadyQuietDown() {
        RequestStatus success = api().quietDown();
        assertNotNull(success);
        assertTrue(success.value());
    }
",non-flaky,5
122592,vespa-engine_vespa,FileFinderTest.directory_with_filter,"        @Test
        public void directory_with_filter() {
            assertFileHelper(FileFinder.directories(testRoot())
                            .match(FileFinder.nameStartsWith(""subdir""))
                            .maxDepth(2),

                    of(""test/subdir-1"", ""test/subdir-2""),
                    of(""file-1.json"", ""test.json"", ""test.txt"", ""test"", ""test/file.txt"", ""test/data.json""));
        }
",non-flaky,5
112666,tbsalling_aismessages,NMEAMessageHandlerTest.canHandleUnfragmentedMessageReceived,"    @Test
    public void canHandleUnfragmentedMessageReceived() {
        NMEAMessage unfragmentedNMEAMessage = NMEAMessage.fromString(""!AIVDM,1,1,,B,15MqdBP000G@qoLEi69PVGaN0D0=,0*3A"");

        final ArgumentCaptor<AISMessage> aisMessage = new ArgumentCaptor<>();

        context.checking(new Expectations() {{
            oneOf(aisMessageHandler).accept(with(aisMessage.getMatcher()));
        }});

        aisMessageReceiver.accept(unfragmentedNMEAMessage);

        assertEquals(AISMessageType.PositionReportClassAScheduled, aisMessage.getCapturedObject().getMessageType());
    }
",non-flaky,5
162407,testcontainers_testcontainers-java,OutputStreamTest.testLogConsumer,"    @Test
    public void testLogConsumer() throws TimeoutException {

        WaitingConsumer waitingConsumer = new WaitingConsumer();
        Slf4jLogConsumer logConsumer = new Slf4jLogConsumer(LOGGER);

        Consumer<OutputFrame> composedConsumer = logConsumer.andThen(waitingConsumer);
        container.followOutput(composedConsumer);

        waitingConsumer.waitUntil(frame -> frame.getType() == STDOUT && frame.getUtf8String().contains(""seq=2""));
    }
",non-flaky,5
114102,aws_aws-sdk-java-v2,EnhancedTypeDocumentationConfigurationTest.defaultBuilder_defaultToFalse,"    @Test
    public void defaultBuilder_defaultToFalse() {
        EnhancedTypeDocumentConfiguration configuration =
            EnhancedTypeDocumentConfiguration.builder().build();
        assertThat(configuration.ignoreNulls()).isFalse();
        assertThat(configuration.preserveEmptyObject()).isFalse();
    }
",non-flaky,5
135046,undertow-io_undertow,NetworkUtilsAddressParsingTestCase.testIpV4AddressStartsWithDot,"    @Test(expected = IOException.class)
    public void testIpV4AddressStartsWithDot() throws IOException {
        NetworkUtils.parseIpv4Address("".1.123.255.2"");
    }
",non-flaky,5
84599,apache_zookeeper,BinaryInputArchiveTest.testReadStringForRecordsHavingLengthMoreThanMaxAllowedSize,"  @Test
  public void testReadStringForRecordsHavingLengthMoreThanMaxAllowedSize() {
    int maxBufferSize = 2000;
    int extraMaxBufferSize = 1025;
    //this record size is more than the max allowed size
    int recordSize = maxBufferSize + extraMaxBufferSize + 100;
    BinaryInputArchive ia =
        getBinaryInputArchive(recordSize, maxBufferSize, extraMaxBufferSize);
    try {
      ia.readString("""");
      fail(""Should have thrown an IOException"");
    } catch (IOException e) {
      assertTrue(e.getMessage().startsWith(BinaryInputArchive.UNREASONBLE_LENGTH),
              () -> ""Not 'Unreasonable length' exception: "" + e);
    }
  }
",non-flaky,5
13,androidx_androidx,testTimer_withListenerAndCleanUp,"@Test
@LargeTest
public void testTimer_withListenerAndCleanUp() throws InterruptedException {
    TestTimeLimitExceededListener listenerSpy = spy(mListener);
    mWorkTimer.startTimer(WORKSPEC_ID_1, 0, listenerSpy);
    Thread.sleep(10);
    verify(listenerSpy, times(1)).onTimeLimitExceeded(WORKSPEC_ID_1);
    assertThat(mWorkTimer.getTimerMap().size(), is(0));
    assertThat(mWorkTimer.getListeners().size(), is(0));
}",async wait,0
70773,apache_kafka,RebalanceSourceConnectorsIntegrationTest.testReconfigConnector,"    @Test
    public void testReconfigConnector() throws Exception {
        ConnectorHandle connectorHandle = RuntimeHandles.get().connectorHandle(CONNECTOR_NAME);

        // create test topic
        String anotherTopic = ""another-topic"";
        connect.kafka().createTopic(TOPIC_NAME, NUM_TOPIC_PARTITIONS);
        connect.kafka().createTopic(anotherTopic, NUM_TOPIC_PARTITIONS);

        // setup up props for the source connector
        Map<String, String> props = new HashMap<>();
        props.put(CONNECTOR_CLASS_CONFIG, MonitorableSourceConnector.class.getSimpleName());
        props.put(TASKS_MAX_CONFIG, String.valueOf(NUM_TASKS));
        props.put(""throughput"", String.valueOf(1));
        props.put(""messages.per.poll"", String.valueOf(10));
        props.put(TOPIC_CONFIG, TOPIC_NAME);
        props.put(KEY_CONVERTER_CLASS_CONFIG, StringConverter.class.getName());
        props.put(VALUE_CONVERTER_CLASS_CONFIG, StringConverter.class.getName());

        // start a source connector
        connect.configureConnector(CONNECTOR_NAME, props);

        waitForCondition(() -> this.assertConnectorAndTasksRunning(CONNECTOR_NAME, NUM_TASKS).orElse(false),
                CONNECTOR_SETUP_DURATION_MS, ""Connector tasks did not start in time."");

        int numRecordsProduced = 100;
        long recordTransferDurationMs = TimeUnit.SECONDS.toMillis(30);

        // consume all records from the source topic or fail, to ensure that they were correctly produced
        int recordNum = connect.kafka().consume(numRecordsProduced, recordTransferDurationMs, TOPIC_NAME).count();
        assertTrue(""Not enough records produced by source connector. Expected at least: "" + numRecordsProduced + "" + but got "" + recordNum,
                recordNum >= numRecordsProduced);

        // expect that we're going to restart the connector and its tasks
        StartAndStopLatch restartLatch = connectorHandle.expectedStarts(1);

        // Reconfigure the source connector by changing the Kafka topic used as output
        props.put(TOPIC_CONFIG, anotherTopic);
        connect.configureConnector(CONNECTOR_NAME, props);

        // Wait for the connector *and tasks* to be restarted
        assertTrue(""Failed to alter connector configuration and see connector and tasks restart ""
                   + ""within "" + CONNECTOR_SETUP_DURATION_MS + ""ms"",
                restartLatch.await(CONNECTOR_SETUP_DURATION_MS, TimeUnit.MILLISECONDS));

        // And wait for the Connect to show the connectors and tasks are running
        waitForCondition(() -> this.assertConnectorAndTasksRunning(CONNECTOR_NAME, NUM_TASKS).orElse(false),
                CONNECTOR_SETUP_DURATION_MS, ""Connector tasks did not start in time."");

        // consume all records from the source topic or fail, to ensure that they were correctly produced
        recordNum = connect.kafka().consume(numRecordsProduced, recordTransferDurationMs, anotherTopic).count();
        assertTrue(""Not enough records produced by source connector. Expected at least: "" + numRecordsProduced + "" + but got "" + recordNum,
                recordNum >= numRecordsProduced);
    }
",non-flaky,5
94764,ktuukkan_marine-api,AbstractAISMessageListenerTest.testGenericsListener,"    @Test
    public void testGenericsListener() {

        GenericsListener<Integer, AISMessage01> gl = new GenericsListener<>(AISMessage01.class);
        gl.sentenceRead(AIS_01);

        assertEquals(gl.received.toString(), MSG_01.toString());
        assertEquals(""1"", gl.dummy(1));
    }
",non-flaky,5
53196,cloudfoundry_uaa,TotpMfaEndpointIntegrationTests.testMfaRegisterPageWithoutLoggingIn,"    @Test
    public void testMfaRegisterPageWithoutLoggingIn() {
        webDriver.get(zoneUrl + ""/logout.do"");
        webDriver.get(zoneUrl + ""/login/mfa/register"");
        assertEquals(zoneUrl + ""/login"", webDriver.getCurrentUrl());
    }
",non-flaky,5
33735,alibaba_fastjson,FastJsonViewTest.test2,"    @Test
    public void test2() throws Exception {
        mockMvc.perform(
                (post(""/fastjsonview/test2"").characterEncoding(""UTF-8"")
                        .contentType(MediaType.APPLICATION_JSON))).andExpect(status
                ().isOk()).andDo(print()
        ).andExpect(content().string(""{\""description\"":\""fastjsonviewæ³¨è§£æµè¯\"",\""stock\"":\""haha\""}""));
    }
",non-flaky,5
159643,liquibase_liquibase,AbstractIntegrationTest.testUpdateTwice,"    @Test
    public void testUpdateTwice() throws Exception {
        assumeNotNull(this.getDatabase());

        Liquibase liquibase = createLiquibase(completeChangeLog);
        clearDatabase();

        liquibase = createLiquibase(completeChangeLog);
        liquibase.setChangeLogParameter( ""loginuser"", getUsername());
        liquibase.update(this.contexts);
        liquibase.update(this.contexts);
    }
",non-flaky,5
135805,Netflix_Hystrix,CumulativeCommandEventCounterStreamTest.run,"    @Test
    public void testSemaphoreRejected() {
        HystrixCommandKey key = HystrixCommandKey.Factory.asKey(""CMD-CumulativeCounter-H"");
        stream = CumulativeCommandEventCounterStream.getInstance(key, 10, 500);
        stream.startCachingStreamValuesIfUnstarted();

        final CountDownLatch latch = new CountDownLatch(1);
        stream.observe().take(5).subscribe(getSubscriber(latch));

        //10 commands will saturate semaphore when called from different threads.
        //submit 2 more requests and they should be SEMAPHORE_REJECTED
        //should see 10 SUCCESSes, 2 SEMAPHORE_REJECTED and 2 FALLBACK_SUCCESSes

        List<Command> saturators = new ArrayList<Command>();

        for (int i = 0; i < 10; i++) {
            saturators.add(Command.from(groupKey, key, HystrixEventType.SUCCESS, 500, HystrixCommandProperties.ExecutionIsolationStrategy.SEMAPHORE));
        }

        Command rejected1 = Command.from(groupKey, key, HystrixEventType.SUCCESS, 0, HystrixCommandProperties.ExecutionIsolationStrategy.SEMAPHORE);
        Command rejected2 = Command.from(groupKey, key, HystrixEventType.SUCCESS, 0, HystrixCommandProperties.ExecutionIsolationStrategy.SEMAPHORE);

        for (final Command saturator : saturators) {
            new Thread(new HystrixContextRunnable(new Runnable() {
                @Override
                public void run() {
                    saturator.observe();
                }
",non-flaky,5
60895,apache_druid,KafkaEmitterConfigTest.testSerDeNotRequiredKafkaProducerConfig,"  @Test
  public void testSerDeNotRequiredKafkaProducerConfig()
  {
    KafkaEmitterConfig kafkaEmitterConfig = new KafkaEmitterConfig(""localhost:9092"", ""metricTest"",
        ""alertTest"", null,
        ""clusterNameTest"", null
    );
    try {
      @SuppressWarnings(""unused"")
      KafkaEmitter emitter = new KafkaEmitter(kafkaEmitterConfig, mapper);
    }
    catch (NullPointerException e) {
      Assert.fail();
    }
  }
",non-flaky,5
106623,Alluxio_alluxio,AlluxioJniFuseFileSystemTest.mkDirWithLengthLimit,"  @Test
  public void mkDirWithLengthLimit() throws Exception {
    long mode = 0755L;
    String c256 = String.join("""", Collections.nCopies(16, ""0123456789ABCDEF""));
    assertEquals(-ErrorCodes.ENAMETOOLONG(),
        mFuseFs.mkdir(""/foo/"" + c256, mode));
  }
",non-flaky,5
77619,pholser_junit-quickcheck,SizeConstrainedSetPropertyParameterTypesTest.shouldHold,"    @Test public void sizeConstrainedSets() {
        @Property public void shouldHold(@Size(min = 2, max = 5) Set<String> items) {
            assertThat(items.size(), lessThanOrEqualTo(5));
        }
",non-flaky,5
162382,testcontainers_testcontainers-java,MountableFileTest.forClasspathResourceWithAbsolutePath,"    @Test
    public void forClasspathResourceWithAbsolutePath() throws Exception {
        final MountableFile mountableFile = MountableFile.forClasspathResource(""/mappable-resource/test-resource.txt"");

        performChecks(mountableFile);
    }
",non-flaky,5
162763,OpenAPITools_openapi-generator,ReadOnlyFirstTest.bazTest,"    @Test
    public void bazTest() {
        // TODO: test baz
    }
",non-flaky,5
21171,androidx_androidx,PreferenceGroupInitialExpandedChildrenCountTest.clickExpandButton_shouldShowAllPreferences,"    @Test
    public void clickExpandButton_shouldShowAllPreferences() {
        mScreen.setInitialExpandedChildrenCount(INITIAL_EXPANDED_COUNT);

        // First showing 5 preference with expand button
        PreferenceGroupAdapter preferenceGroupAdapter =
                PreferenceGroupAdapter.createInstanceWithCustomHandler(mScreen, mHandler);
        assertPreferencesAreCollapsed(preferenceGroupAdapter);

        // Click the expand button, should review all preferences
        final Preference expandButton = preferenceGroupAdapter.getItem(INITIAL_EXPANDED_COUNT);
        expandButton.performClick();
        assertPreferencesAreExpanded(preferenceGroupAdapter);
    }
",non-flaky,5
133903,cdancy_jenkins-rest,ConfigurationAsCodeApiLiveTest.testCascCheck,"    @Test
    public void testCascCheck() {
        String config = payloadFromResource(""/casc.yml"");
        RequestStatus success = api().check(config);
        assertTrue(success.value());
    }
",non-flaky,5
60919,apache_druid,LongMeanNoNullAveragerTest.testComputeResult,"  @Test
  public void testComputeResult()
  {
    BaseAverager<Number, Double> avg = new LongMeanNoNullAverager(3, ""test"", ""field"", 1);

    Assert.assertEquals(Double.NaN, avg.computeResult(), 0.0);

    avg.addElement(Collections.singletonMap(""field"", 3L), new HashMap<>());
    Assert.assertEquals(3.0, avg.computeResult(), 0.0);

    avg.addElement(Collections.singletonMap(""field"", 3L), new HashMap<>());
    Assert.assertEquals(3.0, avg.computeResult(), 0.0);

    avg.addElement(Collections.singletonMap(""field"", 0), new HashMap<>());
    Assert.assertEquals(2.0, avg.computeResult(), 0.0);

    avg.addElement(Collections.singletonMap(""field"", 2L), new HashMap<>());
    avg.addElement(Collections.singletonMap(""field"", 2L), new HashMap<>());
    avg.addElement(Collections.singletonMap(""field"", 2L), new HashMap<>());
    Assert.assertEquals(2.0, avg.computeResult(), 0.0);

    avg.skip();
    Assert.assertEquals(2.0, avg.computeResult(), 0.0);
  }
",non-flaky,5
21176,androidx_androidx,PreferenceGroupInitialExpandedChildrenCountTest.restoreHierarchyState_previouslyExpanded_shouldRestoreToExpandedState,"    @Test
    public void restoreHierarchyState_previouslyExpanded_shouldRestoreToExpandedState() {
        PreferenceGroup.SavedState state =
                new PreferenceGroup.SavedState(
                        Preference.BaseSavedState.EMPTY_STATE, Integer.MAX_VALUE);
        // Initialized as collapsed, restore as expanded, should expand
        state.mInitialExpandedChildrenCount = Integer.MAX_VALUE;
        mScreen.setInitialExpandedChildrenCount(INITIAL_EXPANDED_COUNT);
        PreferenceGroupAdapter preferenceGroupAdapter =
                PreferenceGroupAdapter.createInstanceWithCustomHandler(mScreen, mHandler);
        mScreen.onRestoreInstanceState(state);
        verify(mHandler).sendMessageDelayed(any(Message.class), anyLong());
        assertPreferencesAreExpanded(preferenceGroupAdapter);
    }
",non-flaky,5
99731,apache_cassandra,FQLReplayTest.testResultHandler,"    @Test
    public void testResultHandler() throws IOException
    {
        List<String> targetHosts = Lists.newArrayList(""hosta"", ""hostb"", ""hostc"");
        File tmpDir = Files.createTempDirectory(""testresulthandler"").toFile();
        File queryDir = Files.createTempDirectory(""queries"").toFile();
        List<File> resultPaths = new ArrayList<>();
        targetHosts.forEach(host -> { File f = new File(tmpDir, host); f.mkdir(); resultPaths.add(f);});

        ResultHandler.ComparableResultSet res = createResultSet(10, 10, false);
        ResultHandler.ComparableResultSet res2 = createResultSet(10, 10, false);
        ResultHandler.ComparableResultSet res3 = createResultSet(10, 10, false);
        List<ResultHandler.ComparableResultSet> toCompare = Lists.newArrayList(res, res2, res3);
        FQLQuery query = new FQLQuery.Single(""abcabc"", QueryOptions.DEFAULT.getProtocolVersion().asInt(), QueryOptions.DEFAULT, 1111, 2222, 3333, ""select * from xyz"", Collections.emptyList());
        try (ResultHandler rh = new ResultHandler(targetHosts, resultPaths, queryDir))
        {
            rh.handleResults(query, toCompare);
        }
        List<Pair<FQLQuery, ResultHandler.ComparableResultSet>> results1 = readResultFile(resultPaths.get(0), queryDir);
        List<Pair<FQLQuery, ResultHandler.ComparableResultSet>> results2 = readResultFile(resultPaths.get(1), queryDir);
        List<Pair<FQLQuery, ResultHandler.ComparableResultSet>> results3 = readResultFile(resultPaths.get(2), queryDir);
        compareResults(results1, results2);
        compareResults(results1, results3);
        compareResults(results3, Collections.singletonList(Pair.create(query, res)));
    }
",non-flaky,5
38213,palantir_atlasdb,RocksDbKeyValueServiceTest.testMetadata,"    @Test
    public void testMetadata() {
        db.putMetadataForTable(TABLE, ""yoyo"".getBytes());
        final byte[] meta = db.getMetadataForTable(TABLE);
        assertEquals(""yoyo"", new String(meta));
    }
",non-flaky,5
179471,abel533_Mapper,DateTimeTest.testInsert3,"    @Test
    public void testInsert3() {
        SqlSession sqlSession = getSqlSession();
        try {
            TimeModel3Mapper mapper = sqlSession.getMapper(TimeModel3Mapper.class);
            TimeModel3 timeModel = new TimeModel3();
            timeModel.setId(3);
            Date now = new Date();
            timeModel.setTestDate(now);
            timeModel.setTestTime(now);
            timeModel.setTestDatetime(now);
            /*
                insert æ¥å¿è½ææ¾çå°å¶å® jdbcType åçåºå«

                DEBUG [main] - ==>  Preparing: INSERT INTO test_timestamp ( id,test_date,test_time,test_datetime ) VALUES( ?,?,?,? )
                DEBUG [main] - ==> Parameters: 3(Integer), 2018-02-25(Date), 11:50:18(Time), 2018-02-25 11:50:18.263(Timestamp)
             */
            Assert.assertEquals(1, mapper.insert(timeModel));

            timeModel = mapper.selectByPrimaryKey(3);

            //ä¿å­åæ°æ®åºä¸­ä¸å­å¨æ¶é´é¨å
            Assert.assertEquals(toDate(now), toDate(timeModel.getTestDate()));
            Assert.assertEquals(toDate(now) + "" 00:00:00"", toDatetime(timeModel.getTestDate()));

            //æ¶é´
            Assert.assertEquals(toTime(now), toTime(timeModel.getTestTime()));
            //ç±äºæå¥æ°æ®åºæ¶æå®ç jdbcType=TIMEï¼æä»¥ä¸é¢æ¯æ²¡ææ¥æé¨åç
            Assert.assertEquals(""1970-01-01 "" + toTime(now), toDatetime(timeModel.getTestTime()));

            Assert.assertEquals(toDatetime(now), toDatetime(timeModel.getTestDatetime()));
        } finally {
            sqlSession.close();
        }
    }
",non-flaky,5
76709,quarkusio_quarkus,RegisterForReflectionITCase.testSelfWithoutNested,"    @Test
    public void testSelfWithoutNested() {
        final String resourceA = BASE_PKG + "".ResourceA"";

        assertRegistration(""ResourceA"", resourceA);
        assertRegistration(""FAILED"", resourceA + ""$InnerClassOfA"");
        assertRegistration(""FAILED"", resourceA + ""$StaticClassOfA"");
        assertRegistration(""FAILED"", resourceA + ""$InterfaceOfA"");
    }
",non-flaky,5
170452,eclipse_jetty.project,ObjectMBeanTest.before,"    @BeforeEach
    public void before()
    {
        container = new MBeanContainer(ManagementFactory.getPlatformMBeanServer());
    }
",non-flaky,5
135722,Netflix_Hystrix,CommonHystrixCommandTests.call,"    @Test
    public void testExecutionHookSemaphoreExceptionUnsuccessfulFallback() {
        assertHooksOnFailure(
                new Func0<C>() {
                    @Override
                    public C call() {
                        return getCommand(ExecutionIsolationStrategy.SEMAPHORE, ExecutionResult.FAILURE, FallbackResult.FAILURE);
                    }
",non-flaky,5
98046,vert-x3_vertx-mongo-client,RefCountTest.testSharedNamed,"  @Test
  public void testSharedNamed() throws Exception {
    LocalMap<String, Object> map = getLocalMap();
    JsonObject config = getConfig();
    MongoClient client1 = MongoClient.createShared(vertx, config, ""ds1"");
    assertEquals(1, map.size());
    MongoClient client2 = MongoClient.createShared(vertx, config, ""ds1"");
    assertEquals(1, map.size());
    MongoClient client3 = MongoClient.createShared(vertx, config, ""ds1"");
    assertEquals(1, map.size());

    MongoClient client4 = MongoClient.createShared(vertx, config, ""ds2"");
    assertEquals(2, map.size());
    MongoClient client5 = MongoClient.createShared(vertx, config, ""ds2"");
    assertEquals(2, map.size());
    MongoClient client6 = MongoClient.createShared(vertx, config, ""ds2"");
    assertEquals(2, map.size());

    client1.close();
    assertEquals(2, map.size());
    client2.close();
    assertEquals(2, map.size());
    client3.close();
    assertEquals(1, map.size());

    client4.close();
    assertEquals(1, map.size());
    client5.close();
    assertEquals(1, map.size());
    client6.close();
    assertEquals(0, map.size());
    assertNotSame(map, getLocalMap());
  }
",non-flaky,5
89358,apache_samza,TestKafkaCheckpointManager.testCreateResourcesTopicValidationError,"  @Test(expected = StreamValidationException.class)
  public void testCreateResourcesTopicValidationError() {
    setupSystemFactory(config());
    // throw an exception during validateStream
    doThrow(new StreamValidationException(""invalid stream"")).when(this.createResourcesSystemAdmin)
        .validateStream(CHECKPOINT_SPEC);
    KafkaCheckpointManager checkpointManager = buildKafkaCheckpointManager(true, config());
    // expect an exception during startup
    checkpointManager.createResources();
  }
",non-flaky,5
78325,apache_beam,ReduceFnRunnerTest.testCombiningAccumulatingProcessingTime,"  @Test
  public void testCombiningAccumulatingProcessingTime() throws Exception {
    WindowingStrategy<?, IntervalWindow> strategy =
        WindowingStrategy.of((WindowFn<?, IntervalWindow>) FixedWindows.of(Duration.millis(100)))
            .withTimestampCombiner(TimestampCombiner.EARLIEST)
            .withMode(AccumulationMode.ACCUMULATING_FIRED_PANES)
            .withAllowedLateness(Duration.ZERO)
            .withTrigger(
                Repeatedly.forever(
                    AfterProcessingTime.pastFirstElementInPane().plusDelayOf(Duration.millis(10))));

    ReduceFnTester<Integer, Integer, IntervalWindow> tester =
        ReduceFnTester.combining(strategy, Sum.ofIntegers(), VarIntCoder.of());

    tester.advanceProcessingTime(new Instant(5000));
    injectElement(tester, 2); // processing timer @ 5000 + 10; EOW timer @ 100
    injectElement(tester, 5);

    tester.advanceInputWatermarkNoTimers(new Instant(100));
    tester.advanceProcessingTimeNoTimers(new Instant(5010));

    // Fires the GC/EOW timer at the same time as the processing time timer.
    tester.fireTimers(
        new IntervalWindow(new Instant(0), new Instant(100)),
        TimestampedValue.of(TimeDomain.EVENT_TIME, new Instant(100)),
        TimestampedValue.of(TimeDomain.PROCESSING_TIME, new Instant(5010)));

    assertThat(
        tester.extractOutput(),
        contains(
            isSingleWindowedValue(
                equalTo(7), 2, 0, 100, PaneInfo.createPane(true, true, Timing.ON_TIME, 0, 0))));
  }
",non-flaky,5
159672,liquibase_liquibase,AddColumnExecutorTest.generateSql_notNull,"    @Test
    public void generateSql_notNull() throws Exception {
        this.statementUnderTest = new AddColumnStatement(null, null, ""table_name"", ""column_name"", ""int"", 42, new NotNullConstraint());
        assertCorrect(""alter table [table_name] add [column_name] int default 42 not null"", SybaseASADatabase.class, SybaseDatabase.class);
        assertCorrect(""alter table table_name add column_name int default 42 not null"", PostgresDatabase.class);
        assertCorrect(""alter table [table_name] add [column_name] [int] constraint df_table_name_column_name default 42 not null"", MSSQLDatabase.class);
        assertCorrect(""alter table table_name add column_name int default 42 not null"", MySQLDatabase.class);
        assertCorrect(""not supported. fixme!!"", SQLiteDatabase.class);
        assertCorrect(""ALTER TABLE [table_name] ADD [column_name] int DEFAULT 42 NOT NULL"");
    }
",non-flaky,5
60935,apache_druid,DoubleMeanAveragerFactoryTest.testCreateAverager,"  @Test
  public void testCreateAverager()
  {
    AveragerFactory<?, ?> fac = new DoubleMeanAveragerFactory(""test"", 5, 1, ""field"");
    Assert.assertThat(fac.createAverager(), IsInstanceOf.instanceOf(DoubleMeanAverager.class));
  }
",non-flaky,5
114107,aws_aws-sdk-java-v2,OptionalAttributeConvertersTest.optionalLongConverterWorksCorrectly,"    @Test
    public void optionalLongConverterWorksCorrectly() {
        OptionalLongAttributeConverter converter = OptionalLongAttributeConverter.create();

        assertThat(transformFrom(converter, OptionalLong.empty())).isEqualTo(nullValue().toAttributeValue());
        assertThat(transformFrom(converter, OptionalLong.of(Long.MIN_VALUE))).isEqualTo(fromNumber(""-9223372036854775808"").toAttributeValue());
        assertThat(transformFrom(converter, OptionalLong.of(0))).isEqualTo(fromNumber(""0"").toAttributeValue());
        assertThat(transformFrom(converter, OptionalLong.of(Long.MAX_VALUE))).isEqualTo(fromNumber(""9223372036854775807"").toAttributeValue());

        assertThat(transformTo(converter, nullValue().toAttributeValue())).isEmpty();
        assertThat(transformTo(converter, fromNumber(""-9223372036854775808""))).hasValue(Long.MIN_VALUE);
        assertThat(transformTo(converter, fromNumber(""0""))).hasValue(0);
        assertThat(transformTo(converter, fromNumber(""9223372036854775807""))).hasValue(Long.MAX_VALUE);
    }
",non-flaky,5
21224,androidx_androidx,PreferenceDataStoreTest.testSharedPrefNotNullIfNoDSMgr,"    @Test
    public void testSharedPrefNotNullIfNoDSMgr() {
        assertNotNull(mManager.getSharedPreferences());
    }
",non-flaky,5
97699,vojtechhabarta_typescript-generator,TaggedUnionsTest.testTaggedUnionsWithExistingProperty,"    @Test
    public void testTaggedUnionsWithExistingProperty() {
        final Settings settings = TestUtils.settings();
        final String output = new TypeScriptGenerator(settings).generateTypeScript(Input.from(Geometry2.class));
        final String expected = (
                ""\n"" +
                ""interface Geometry2 {\n"" +
                ""    shapes: Shape2Union[];\n"" +
                ""}\n"" +
                ""\n"" +
                ""interface Shape2 {\n"" +
                ""    kind: 'square' | 'rectangle' | 'circle';\n"" +
                ""}\n"" +
                ""\n"" +
                ""interface Square2 extends Shape2 {\n"" +
                ""    kind: 'square';\n"" +
                ""    size: number;\n"" +
                ""}\n"" +
                ""\n"" +
                ""interface Rectangle2 extends Shape2 {\n"" +
                ""    kind: 'rectangle';\n"" +
                ""    width: number;\n"" +
                ""    height: number;\n"" +
                ""}\n"" +
                ""\n"" +
                ""interface Circle2 extends Shape2 {\n"" +
                ""    kind: 'circle';\n"" +
                ""    radius: number;\n"" +
                ""}\n"" +
                ""\n"" +
                ""type Shape2Union = Square2 | Rectangle2 | Circle2;\n"" +
                """"
                ).replace('\'', '""');
        Assert.assertEquals(expected, output);
    }
",non-flaky,5
369,apache_hadoop,TestPermissionSymlinks.testAclRenameSrcNotWritableFC,"  @Test
  public void testAclRenameSrcNotWritableFC() throws Exception {
    fs.setAcl(linkParent, Arrays.asList(
      aclEntry(ACCESS, USER, ALL),
      aclEntry(ACCESS, USER, user.getUserName(), READ_EXECUTE),
      aclEntry(ACCESS, GROUP, ALL),
      aclEntry(ACCESS, OTHER, ALL)));
    doRenameSrcNotWritableFC();
  }
",non-flaky,5
77469,opensearch-project_OpenSearch,HandshakingTransportAddressConnectorTests.testLogsFullConnectionFailureAfterSuccessfulHandshake,"    @TestLogging(reason=""ensure logging happens"", value=""org.opensearch.discovery.HandshakingTransportAddressConnector:INFO"")
    public void testLogsFullConnectionFailureAfterSuccessfulHandshake() throws Exception {

        remoteNode = new DiscoveryNode(""remote-node"", buildNewFakeTransportAddress(), Version.CURRENT);
        remoteClusterName = ""local-cluster"";
        discoveryAddress = buildNewFakeTransportAddress();

        fullConnectionFailure = new ConnectTransportException(remoteNode, ""simulated"", new OpenSearchException(""root cause""));

        FailureListener failureListener = new FailureListener();

        MockLogAppender mockAppender = new MockLogAppender();
        mockAppender.start();
        mockAppender.addExpectation(
            new MockLogAppender.SeenEventExpectation(
                ""message"",
                HandshakingTransportAddressConnector.class.getCanonicalName(),
                Level.WARN,
                ""*completed handshake with [*] but followup connection failed*""));
        Logger targetLogger = LogManager.getLogger(HandshakingTransportAddressConnector.class);
        Loggers.addAppender(targetLogger, mockAppender);

        try {
            handshakingTransportAddressConnector.connectToRemoteMasterNode(discoveryAddress, failureListener);
            failureListener.assertFailure();
            mockAppender.assertAllExpectationsMatched();
        } finally {
            Loggers.removeAppender(targetLogger, mockAppender);
            mockAppender.stop();
        }
    }
",non-flaky,5
26845,wildfly_wildfly,WritableServiceBasedNamingStoreTestCase.testOwnerBindingReferences,"    @Test
    public void testOwnerBindingReferences() throws Exception {
        final Name name = new CompositeName(""test"");
        final ServiceName serviceName = store.buildServiceName(name);
        final Object value = new Object();

        // ensure bind does not exists
        try {
            store.lookup(name);
            fail(""Should have thrown name not found"");
        } catch (NameNotFoundException expect) {
        }
        final RuntimeBindReleaseService.References duBindingReferences = (RuntimeBindReleaseService.References) container.getService(JndiNamingDependencyProcessor.serviceName(OWNER_FOO)).getValue();
        WritableServiceBasedNamingStore.pushOwner(OWNER_FOO);
        try {
            store.bind(name, value);
            // Foo's RuntimeBindReleaseService should now have a reference to the new bind
            assertTrue(duBindingReferences.contains(serviceName));

            store.rebind(name, value);
            // after rebind, Foo's RuntimeBindReleaseService should continue to have a reference to the bind
            assertTrue(duBindingReferences.contains(serviceName));

            store.unbind(name);
        } finally {
            WritableServiceBasedNamingStore.popOwner();
        }
    }
",non-flaky,5
30977,camunda-cloud_zeebe,ObjectMappingUndeclaredPropertiesTest.shouldFailReadingInvalidUndeclaredProperty,"  @Test
  public void shouldFailReadingInvalidUndeclaredProperty() {
    // given
    final MinimalPOJO pojo = new MinimalPOJO();

    final MutableDirectBuffer msgPack =
        encodeMsgPack(
            (w) -> {
              w.writeMapHeader(2);
              w.writeString(wrapString(""longProp""));
              w.writeInteger(123L);
              w.writeInteger(789L);
              w.writeInteger(123L);
            });

    // then
    exception.expect(RuntimeException.class);
    exception.expectMessage(""Could not deserialize object"");

    // when
    pojo.wrap(msgPack);
  }
",non-flaky,5
112724,hwang-pku_ormlite-core,DatabaseConnectionProxyTest.testSetAutoCommitNull,"	@Test
	public void testSetAutoCommitNull() throws Exception {
		DatabaseConnectionProxy proxy = new DatabaseConnectionProxy(null);
		proxy.setAutoCommit(false);
		proxy.close();
	}
",non-flaky,5
160377,ConsenSys_teku,MetadataTest.shouldReadMetadataFromCompleteJson,"  @Test
  public void shouldReadMetadataFromCompleteJson() throws IOException {
    final String completeJson =
        Resources.toString(Resources.getResource(""format1_complete.json""), StandardCharsets.UTF_8);

    JsonNode metadataJson = mapper.readTree(completeJson).get(""metadata"");
    Metadata metadata = mapper.treeToValue(metadataJson, Metadata.class);

    assertThat(metadata).isEqualTo(expectedMetadata);
  }
",non-flaky,5
170510,eclipse_jetty.project,MBeanContainerTest.testNonManagedPojoNotUnregistered,"    @Test
    public void testNonManagedPojoNotUnregistered() throws Exception
    {
        testNonManagedObjectNotUnregistered(new Object());
    }
",non-flaky,5
98337,Kong_unirest-java,MockClientInterceptorIssueTest.setup,"    @BeforeEach
    public void setup() {
        this.unirestInstance = Unirest.spawnInstance();
        this.unirestInstance.config().interceptor(interceptor);
    }
",non-flaky,5
137156,spring-projects_spring-framework,AnnotationsScannerTests.doWithAggregate,"	@Test
					public String doWithAggregate(Object context, int aggregateIndex) {
						return """";
					}
",non-flaky,5
21239,androidx_androidx,PreferencePersistTest.stringSet_persistWhileDisabled_notPersisted,"    @Test
    public void stringSet_persistWhileDisabled_notPersisted() {
        mPreference.setPersistent(false);

        boolean wasPersisted = mPreference.putStringSet(TEST_STR_SET);

        assertFalse(wasPersisted);
        assertNull(mSharedPref.getString(KEY, null));
    }
",non-flaky,5
112745,hwang-pku_ormlite-core,DatabaseConnectionProxyTest.testQueryForLongStringObjectArrayFieldTypeArray,"	@Test
	public void testQueryForLongStringObjectArrayFieldTypeArray() throws Exception {
		DatabaseConnection conn = createMock(DatabaseConnection.class);
		String statement = ""select stuff from foo"";
		long result = 3123123124141413L;
		expect(conn.queryForLong(statement, null, null)).andReturn(result);
		conn.close();
		DatabaseConnectionProxy proxy = new DatabaseConnectionProxy(conn);
		replay(conn);
		assertEquals(result, proxy.queryForLong(statement, null, null));
		proxy.close();
		verify(conn);
	}
",non-flaky,5
133973,CorfuDB_CorfuDB,LogUnitHandlerTest.testCompact,"    @Test
    public void testCompact() {
        ResponseMsg response = getResponseMsg(
                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.CHECK),
                getCompactResponseMsg()
        );

        logUnitHandler.handleMessage(response, mockChannelHandlerContext);
        // Verify that the correct request was completed (once) with the appropriate value,
        // and that we did not complete exceptionally.
        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));
        verify(mockClientRouter).completeRequest(response.getHeader().getRequestId(), true);
    }
",non-flaky,5
113767,salesforce_reactive-grpc,ReactiveStreamObserverPublisherServerTest.onCompletedDelegates,"    @Test
    public void onCompletedDelegates() {
        ServerCallStreamObserver<Object> obs = mock(ServerCallStreamObserver.class);
        Subscriber<Object> sub = mock(Subscriber.class);

        ReactiveStreamObserverPublisherServer<Object> pub = new ReactiveStreamObserverPublisherServer<Object>(obs);
        pub.subscribe(sub);

        pub.onCompleted();
        verify(sub).onComplete();
    }
",non-flaky,5
122580,vespa-engine_vespa,EditorTest.testEdit,"    @Test
    public void testEdit() {
        path.writeUtf8File(joinLines(""first"", ""second"", ""third""));

        LineEditor lineEditor = mock(LineEditor.class);
        when(lineEditor.edit(any())).thenReturn(
                LineEdit.none(), // don't edit the first line
                LineEdit.remove(), // remove the second
                LineEdit.replaceWith(""replacement"")); // replace the third

        Editor editor = new Editor(path.toPath(), lineEditor);
        TaskContext context = mock(TaskContext.class);

        assertTrue(editor.converge(context));

        verify(lineEditor, times(3)).edit(any());

        // Verify the system modification message
        ArgumentCaptor<String> modificationMessage = ArgumentCaptor.forClass(String.class);
        verify(context).recordSystemModification(any(), modificationMessage.capture());
        assertEquals(
                ""Patching file /file:\n-second\n-third\n+replacement\n"",
                modificationMessage.getValue());

        // Verify the new contents of the file:
        assertEquals(joinLines(""first"", ""replacement""), path.readUtf8File());
    }
",non-flaky,5
99716,apache_cassandra,SettingsMiscTest.noSpecialOptions,"    @Test
    public void noSpecialOptions() throws Exception
    {
        assertFalse(SettingsMisc.maybeDoSpecial(Collections.emptyMap()));
    }
",non-flaky,5
98674,nutzam_nutz,UploadingUnitTest.test_limit_file_size_fail,"    @Test(expected = UploadOutOfSizeException.class)
    public void test_limit_file_size_fail() throws UploadException {
        MockHttpServletRequest req = Mock.servlet.request();
        req.setPathInfo(""/nutz/junit/uploading"");
        File blue = Files.findFile(""org/nutz/mvc/upload/files/quick/blue.png"");

        MultipartInputStream ins = Mock.servlet.insmulti(charset);
        ins.append(""blue"", blue);
        req.setInputStream(ins);
        req.init();

        /*
         * æä»¶è¶å¤§ï¼ä¼éå¶
         */
        Uploading up = UploadUnit.TYPE.born();
        // å½è®¾ç½®ä¸º170,pass
        // è®¾ç½®ä¸º171,fail åå æªæ
        // zzh: FastUploading çéå¶ä¸æ¯ç¹å«ç²¾ç¡®
        // å ä¸ºæ¯æåè¯»åç, æ¯æ¬¡å¾ªç¯ï¼è¦è¯»1-3ä¸ªåï¼æä»¥å°ºå¯¸çéå¶å ç¼å²å¤§å°ï¼ä¹ä¼æå³ç³»
        // å¦æç¼å²æ¯ 171, å¯è½æ­£å¥½è¯»å®
        up.parse(req, UploadingContext.create(tmps)
                                      .setBufferSize(171)
                                      .setMaxFileSize(18620));
    }
",non-flaky,5
43105,trinodb_trino,AbstractTestIntegrationSmokeTest.testShowCreateTable,"    @Test
    public void testShowCreateTable()
    {
        assertThat((String) computeScalar(""SHOW CREATE TABLE orders""))
                // If the connector reports additional column properties, the expected value needs to be adjusted in the test subclass
                .matches(""CREATE TABLE \\w+\\.\\w+\\.orders \\Q(\n"" +
                        ""   orderkey bigint,\n"" +
                        ""   custkey bigint,\n"" +
                        ""   orderstatus varchar(1),\n"" +
                        ""   totalprice double,\n"" +
                        ""   orderdate date,\n"" +
                        ""   orderpriority varchar(15),\n"" +
                        ""   clerk varchar(15),\n"" +
                        ""   shippriority integer,\n"" +
                        ""   comment varchar(79)\n"" +
                        "")"");
    }
",non-flaky,5
21256,androidx_androidx,PreferencePersistTest.float_persistTwiceAndRetrieve_returnsSecondValue,"    @Test
    public void float_persistTwiceAndRetrieve_returnsSecondValue() {
        final float expected = 2;

        mPreference.putFloat(1);
        mPreference.putFloat(expected);
        float result = mPreference.getFloat(-1);

        assertEquals(expected, result, FLOAT_PRECISION);
    }
",non-flaky,5
21216,androidx_androidx,PreferenceDataStoreTest.testPutFloatWithDataStoreOnMgr,"    @Test
    public void testPutFloatWithDataStoreOnMgr() {
        mManager.setPreferenceDataStore(mDataStore);
        mScreen.addPreference(mPreference);
        putFloatTestCommon();
    }
",non-flaky,5
118727,netty_netty,ByteProcessorTest.testBackward,"    @Test
    public void testBackward() {
        final ByteBuf buf =
                Unpooled.copiedBuffer(""abc\r\n\ndef\r\rghi\n\njkl\0\0mno  \t\tx"", CharsetUtil.ISO_8859_1);
        final int length = buf.readableBytes();

        assertEquals(27, buf.forEachByteDesc(0, length, ByteProcessor.FIND_LINEAR_WHITESPACE));
        assertEquals(25, buf.forEachByteDesc(0, length, ByteProcessor.FIND_ASCII_SPACE));
        assertEquals(23, buf.forEachByteDesc(0, 28, ByteProcessor.FIND_NON_LINEAR_WHITESPACE));
        assertEquals(20, buf.forEachByteDesc(0, 24, ByteProcessor.FIND_NUL));
        assertEquals(18, buf.forEachByteDesc(0, 21, ByteProcessor.FIND_NON_NUL));
        assertEquals(15, buf.forEachByteDesc(0, 19, ByteProcessor.FIND_LF));
        assertEquals(13, buf.forEachByteDesc(0, 16, ByteProcessor.FIND_NON_LF));
        assertEquals(10, buf.forEachByteDesc(0, 14, ByteProcessor.FIND_CR));
        assertEquals(8,  buf.forEachByteDesc(0, 11, ByteProcessor.FIND_NON_CR));
        assertEquals(5,  buf.forEachByteDesc(0, 9, ByteProcessor.FIND_CRLF));
        assertEquals(2,  buf.forEachByteDesc(0, 6, ByteProcessor.FIND_NON_CRLF));
        assertEquals(-1, buf.forEachByteDesc(0, 3, ByteProcessor.FIND_CRLF));

        buf.release();
    }
",non-flaky,5
30956,camunda-cloud_zeebe,BrokerInfoTest.shouldEncodeDecodeBrokerInfoWithEmptyMaps,"  @Test
  public void shouldEncodeDecodeBrokerInfoWithEmptyMaps() {
    // given
    final int nodeId = 123;
    final int partitionsCount = 345;
    final int clusterSize = 567;
    final int replicationFactor = 789;

    final BrokerInfo brokerInfo =
        new BrokerInfo()
            .setNodeId(nodeId)
            .setPartitionsCount(partitionsCount)
            .setClusterSize(clusterSize)
            .setReplicationFactor(replicationFactor);

    // when
    encodeDecode(brokerInfo);

    // then
    assertThat(brokerInfo.getNodeId()).isEqualTo(nodeId);
    assertThat(brokerInfo.getPartitionsCount()).isEqualTo(partitionsCount);
    assertThat(brokerInfo.getClusterSize()).isEqualTo(clusterSize);
    assertThat(brokerInfo.getReplicationFactor()).isEqualTo(replicationFactor);
    assertThat(brokerInfo.getAddresses()).isEmpty();
    assertThat(brokerInfo.getPartitionRoles()).isEmpty();
    assertThat(brokerInfo.getPartitionHealthStatuses()).isEmpty();
  }
",non-flaky,5
379,apache_hadoop,TestFcHdfsSetUMask.testMkdirWithExistingDirMiddle,"  @Test
  public void testMkdirWithExistingDirMiddle() throws IOException {
    testMkdirWithExistingDir(USER_GROUP_OPEN_TEST_UMASK,
        USER_GROUP_OPEN_PERMISSIONS);
  }
",non-flaky,5
99746,apache_cassandra,AsyncStreamingInputPlusTest.isOpen,"//    @Test
//    public void isOpen()
//    {
//        Assert.assertTrue(inputPlus.isOpen());
//        inputPlus.requestClosure();
//        Assert.assertFalse(inputPlus.isOpen());
//    }
",non-flaky,5
303,graylog2_graylog2-server,ContentPackTest.shouldDeserializeSerializedContentPack,"@Test
public void shouldDeserializeSerializedContentPack() throws Exception {
    final ContentPack contentPack = createTestContentPack();
    final URL contentPackURL = ContentPackTest.class.getResource(""expected_content_pack.json"");
    Path path = Paths.get(contentPackURL.toURI());
    String expectedJSON = String.join("""", Files.readAllLines(path)).replace(""\n"", """").replace(""\r"", """");
    final String jsonTxt = objectMapper.writeValueAsString(contentPack);
    assertThat(jsonTxt).isEqualTo(expectedJSON);
    final ContentPack readContentPack = objectMapper.readValue(jsonTxt, ContentPack.class);
    assertThat(readContentPack.id()).isEqualTo(contentPack.id());
    assertThat(readContentPack.version()).isEqualTo(contentPack.version());
    assertThat(readContentPack.revision()).isEqualTo(contentPack.revision());
}",unordered collections,3
133939,CorfuDB_CorfuDB,ManagementHandlerTest.testHandleHealFailure1,"    @Test
    public void testHandleHealFailure1() {
        testHandleHealFailure(true);
    }
",non-flaky,5
76726,quarkusio_quarkus,JarRunnerIT.testPlatformPropertiesOverridenInApplicationProperties,"    @Test
    public void testPlatformPropertiesOverridenInApplicationProperties() throws Exception {
        final File testDir = initProject(""projects/platform-properties-overrides"",
                ""projects/platform-props-overriden-in-app-props"");
        final RunningInvoker running = new RunningInvoker(testDir, false);

        final MavenProcessInvocationResult result = running.execute(Arrays.asList(""install""),
                Collections.emptyMap());
        await().atMost(1, TimeUnit.MINUTES).until(() -> result.getProcess() != null && !result.getProcess().isAlive());
        assertThat(running.log()).containsIgnoringCase(""BUILD SUCCESS"");
        running.stop();

        File output = new File(testDir, ""app/target/output.log"");
        output.createNewFile();

        Process process = doLaunch(new File(testDir, ""app/target/quarkus-app""), Paths.get(""quarkus-run.jar""), output,
                Collections.emptyList()).start();
        try {
            Assertions.assertEquals(""builder-image is customized"", DevModeTestUtils.getHttpResponse(""/hello""));
        } finally {
            process.destroy();
        }
    }
",non-flaky,5
98596,nutzam_nutz,El2Test.context,"    @Test
    public void context() {
        Context context = Lang.context();
        List<String> list = new ArrayList<String>();
        list.add(""jk"");
        context.set(""a"", list);
        assertEquals(""jk"", El.eval(context, ""a.get((1-1))""));
        assertEquals(""jk"", El.eval(context, ""a.get(1-1)""));
        assertEquals(""jk"", El.eval(context, ""a.get(0)""));

        assertTrue((Boolean) El.eval(Lang.context(), ""a==null""));
        try {
            assertTrue((Boolean) El.eval(Lang.context(), ""a.a""));
            fail();
        }
        catch (Exception e) {}
    }
",non-flaky,5
97681,vojtechhabarta_typescript-generator,SpringTest.testUrlTrailingSlash,"    @Test
    public void testUrlTrailingSlash() {
        final Settings settings = TestUtils.settings();
        settings.outputFileType = TypeScriptFileType.implementationFile;
        settings.generateSpringApplicationClient = true;
        final String output = new TypeScriptGenerator(settings).generateTypeScript(Input.from(TestUrlTrailingSlashController.class));
        Assert.assertTrue(Pattern.compile(""response\\(\\):.*\\n.*uriEncoding`controller/`"").matcher(output).find());
        Assert.assertTrue(Pattern.compile(""response2\\(\\):.*\\n.*uriEncoding`controller`"").matcher(output).find());
    }
",non-flaky,5
135003,undertow-io_undertow,AnnotatedEndpointTest.testTimeoutCloseReason,"    @Test
    public void testTimeoutCloseReason() throws Exception {
        TimeoutEndpoint.reset();

        Session session = deployment.connectToServer(DoNothingEndpoint.class, new URI(""ws://"" + DefaultServer.getHostAddress(""default"") + "":"" + DefaultServer.getHostPort(""default"") + ""/ws/timeout""));

        Assert.assertEquals(CloseReason.CloseCodes.CLOSED_ABNORMALLY, TimeoutEndpoint.getReason().getCloseCode());
    }
",non-flaky,5
95704,togglz_togglz,PropertyFeatureProviderTest.shouldSupportDefinitionWithLabelAndDefaultAndTrailingSemicolon,"    @Test
    public void shouldSupportDefinitionWithLabelAndDefaultAndTrailingSemicolon() {

        Properties properties = new Properties();
        properties.setProperty(""F1"", ""My Feature;true;"");

        PropertyFeatureProvider provider = new PropertyFeatureProvider(properties);

        Set<Feature> features = provider.getFeatures();
        assertThat(features)
            .hasSize(1)
            .areExactly(1, featureNamed(""F1""));

        FeatureMetaData metadata = provider.getMetaData(new NamedFeature(""F1""));
        assertThat(metadata).isNotNull();
        assertThat(metadata.getLabel()).isEqualTo(""My Feature"");
        FeatureState defaultFeatureState = metadata.getDefaultFeatureState();
        assertThat(defaultFeatureState.isEnabled()).isTrue();
        assertThat(metadata.getGroups()).isEmpty();

    }
",non-flaky,5
179461,abel533_Mapper,FieldTest.test2,"    @Test
    public void test2() {
        List<EntityField> fields = _getProperties(Country.class);
        for (EntityField field : fields) {
            System.out.println(field.getName() + ""  -  @Id:"" + field.isAnnotationPresent(Id.class) + ""  -  javaType:"" + field.getJavaType());
        }
        System.out.println(""======================================"");
    }
",non-flaky,5
301,apache_hadoop,TestFairScheduler.testContinuousScheduling,"@Test
public void testContinuousScheduling() throws Exception {
    FairScheduler fs = new FairScheduler();
    Configuration conf = createConfiguration();
    conf.setBoolean(CONTINUOUS_SCHEDULING_ENABLED, true);
    fs.reinitialize(conf, resourceManager.getRMContext());
    Assert.assertTrue(""Continuous scheduling should be enabled."", fs.isContinuousSchedulingEnabled());
    RMNode node1 = MockNodes.newNodeInfo(1, Resources.createResource(8 * 1024, 8), 1, ""127.0.0.1"");
    NodeAddedSchedulerEvent nodeEvent1 = new NodeAddedSchedulerEvent(node1);
    fs.handle(nodeEvent1);
    Assert.assertEquals(fs.getClusterCapacity().getMemory(), 8 * 1024);
    Assert.assertEquals(fs.getClusterCapacity().getVirtualCores(), 8);
    ApplicationAttemptId appAttemptId = createAppAttemptId(this.APP_ID++, this.ATTEMPT_ID++);
    fs.addApplication(appAttemptId, ""queue11"", ""user11"");
    List<ResourceRequest> ask = new ArrayList<ResourceRequest>();
    ResourceRequest request = createResourceRequest(1024, 1, ANY, 1, 1, true);
    ask.add(request);
    fs.allocate(appAttemptId, ask, new ArrayList<ContainerId>(), null, null);
    Thread.sleep(fs.getConf().getContinuousSchedulingSleepMs() + 500);
    Resource consumption = fs.applications.get(appAttemptId).getCurrentConsumption();
    Assert.assertEquals(1024, consumption.getMemory());
    Assert.assertEquals(1, consumption.getVirtualCores());
}",async wait,0
375,apache_hadoop,TestRefreshUserMappings.testGroupMappingRefresh,"  @Test
  public void testGroupMappingRefresh() throws Exception {
    DFSAdmin admin = new DFSAdmin(config);
    String [] args =  new String[]{""-refreshUserToGroupsMappings""};
    Groups groups = Groups.getUserToGroupsMappingService(config);
    String user = UserGroupInformation.getCurrentUser().getUserName();
    System.out.println(""first attempt:"");
    List<String> g1 = groups.getGroups(user);
    String [] str_groups = new String [g1.size()];
    g1.toArray(str_groups);
    System.out.println(Arrays.toString(str_groups));
    
    System.out.println(""second attempt, should be same:"");
    List<String> g2 = groups.getGroups(user);
    g2.toArray(str_groups);
    System.out.println(Arrays.toString(str_groups));
    for(int i=0; i<g2.size(); i++) {
      assertEquals(""Should be same group "", g1.get(i), g2.get(i));
    }
    admin.run(args);
    System.out.println(""third attempt(after refresh command), should be different:"");
    List<String> g3 = groups.getGroups(user);
    g3.toArray(str_groups);
    System.out.println(Arrays.toString(str_groups));
    for(int i=0; i<g3.size(); i++) {
      assertFalse(""Should be different group: "" + g1.get(i) + "" and "" + g3.get(i), 
          g1.get(i).equals(g3.get(i)));
    }
    
    // test time out
    Thread.sleep(groupRefreshTimeoutSec*1100);
    System.out.println(""fourth attempt(after timeout), should be different:"");
    List<String> g4 = groups.getGroups(user);
    g4.toArray(str_groups);
    System.out.println(Arrays.toString(str_groups));
    for(int i=0; i<g4.size(); i++) {
      assertFalse(""Should be different group "", g3.get(i).equals(g4.get(i)));
    }
  }
",non-flaky,5
175819,GoogleCloudPlatform_google-cloud-eclipse,OpenUriSelectionListenerTest.testWidgetDefaultSelected_errorInvokingBrowser,"  @Test
  public void testWidgetDefaultSelected_errorInvokingBrowser() throws PartInitException {
    SelectionEvent selectionEvent = getEvent(VALID_URI);
    doThrow(new PartInitException(""fake exception"")).when(browser).openURL(any(URL.class));

    new OpenUriSelectionListener(queryParameterProvider, errorHandler, browserSupport)
      .widgetDefaultSelected(selectionEvent);
    verify(errorHandler).handle(captor.capture(), any(URI.class));
    assertThat(captor.getValue(), instanceOf(PartInitException.class));
  }
",non-flaky,5
99726,apache_cassandra,FQLReplayTest.testCompareColumnDefinitions,"    @Test
    public void testCompareColumnDefinitions()
    {
        ResultHandler.ComparableResultSet res = createResultSet(10, 10, false);
        ResultComparator rc = new ResultComparator();

        List<ResultHandler.ComparableColumnDefinitions> colDefs = new ArrayList<>(100);
        List<String> targetHosts = new ArrayList<>(100);
        for (int i = 0; i < 100; i++)
        {
            targetHosts.add(""host""+i);
            colDefs.add(res.getColumnDefinitions());
        }
        assertTrue(rc.compareColumnDefinitions(targetHosts, null, colDefs));
        colDefs.set(50, createResultSet(9, 9, false).getColumnDefinitions());
        assertFalse(rc.compareColumnDefinitions(targetHosts, null, colDefs));
    }
",non-flaky,5
156448,apache_commons-lang,DateUtilsFragmentTest.testMillisecondsOfMinuteWithCalender,"    @Test
    public void testMillisecondsOfMinuteWithCalender() {
        final long testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.MINUTE);
        assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND), testResult);
    }
",non-flaky,5
77667,pholser_junit-quickcheck,OffsetTimePropertyParameterTypesTest.shouldHold,"    @Test public void malformedFormat() {
        @Property public void shouldHold(
            @InRange(
",non-flaky,5
78326,apache_beam,ReduceFnRunnerTest.element,"  @Test
  public void testFixedWindowEndOfTimeGarbageCollection() throws Exception {
    Duration allowedLateness = Duration.standardDays(365);
    Duration windowSize = Duration.millis(10);
    WindowFn<Object, IntervalWindow> windowFn = FixedWindows.of(windowSize);

    // This timestamp falls into a window where the end of the window is before the end of the
    // global window - the ""end of time"" - yet its expiration time is after.
    final Instant elementTimestamp =
        GlobalWindow.INSTANCE.maxTimestamp().minus(allowedLateness).plus(1);

    IntervalWindow window =
        Iterables.getOnlyElement(
            windowFn.assignWindows(
                windowFn.new AssignContext() {
                  @Override
                  public Object element() {
                    throw new UnsupportedOperationException();
                  }
",non-flaky,5
159681,liquibase_liquibase,AddUniqueConstraintExecutorTest.execute_noSchema,"    @Test
    public void execute_noSchema() throws Exception {
        this.statementUnderTest = new AddUniqueConstraintStatement(null, null, TABLE_NAME, new ColumnConfig[] { new ColumnConfig().setName(COLUMN_NAME)}, CONSTRAINT_NAME);
        assertCorrect(""alter table [adduqtest] add constraint [uq_test] unique ([coltomakeuq])"", SybaseDatabase.class);
        assertCorrect(""alter table [adduqtest] add constraint [uq_test] unique ([coltomakeuq])"", MSSQLDatabase.class);
        assertCorrect(""alter table [adduqtest] add constraint [uq_test] unique ([coltomakeuq])"", SybaseASADatabase.class);
        assertCorrect(""alter table adduqtest add constraint uq_test unique (coltomakeuq)"", MySQLDatabase.class);
        assertCorrect(""alter table adduqtest add constraint unique (coltomakeuq) constraint uq_test"", InformixDatabase.class);
        assertCorrect(""alter table adduqtest add constraint uq_test unique (coltomakeuq)"", OracleDatabase.class);
        assertCorrect(""alter table \""adduqtest\"" add constraint uq_test unique (\""coltomakeuq\"")"", PostgresDatabase.class);
        assertCorrect(""alter table adduqtest add constraint uq_test unique (coltomakeuq)"", DerbyDatabase.class);
        assertCorrect(""alter table [adduqtest] add constraint [uq_test] unique ([coltomakeuq])"");
    }
",non-flaky,5
86083,graylog2_graylog2-server,EventDefinitionHandlerTest.update,"    @Test
    public void update() {
        final String newTitle = ""A NEW TITLE "" + DateTime.now(DateTimeZone.UTC).toString();
        final String newDescription = ""A NEW DESCRIPTION "" + DateTime.now(DateTimeZone.UTC).toString();

        final EventDefinitionDto existingDto = eventDefinitionService.get(""54e3deadbeefdeadbeef0000"").orElse(null);
        final JobDefinitionDto existingJobDefinition = jobDefinitionService.get(""54e3deadbeefdeadbeef0001"").orElse(null);
        final JobTriggerDto existingTrigger = jobTriggerService.get(""54e3deadbeefdeadbeef0002"").orElse(null);
        final TestEventProcessorConfig existingConfig = (TestEventProcessorConfig) existingDto.config();
        final TestEventProcessorConfig newConfig = existingConfig.toBuilder()
                .executeEveryMs(550000)
                .searchWithinMs(800000)
                .build();
        final EventProcessorExecutionJob.Data existingTriggerData = (EventProcessorExecutionJob.Data) existingTrigger.data().orElseThrow(AssertionError::new);

        assertThat(existingDto).isNotNull();
        assertThat(existingJobDefinition).isNotNull();
        assertThat(existingTrigger).isNotNull();

        final EventDefinitionDto updatedDto = existingDto.toBuilder()
                .title(newTitle)
                .description(newDescription)
                .config(newConfig)
                .build();

        assertThat(handler.update(updatedDto, true)).isNotEqualTo(existingDto);

        assertThat(eventDefinitionService.get(existingDto.id())).isPresent().get().satisfies(dto -> {
            assertThat(dto.id()).isEqualTo(existingDto.id());
            assertThat(dto.title()).isEqualTo(newTitle);
            assertThat(dto.description()).isEqualTo(newDescription);
        });

        // Test that the schedule is updated to the new config
        final JobDefinitionDto newJobDefinition = jobDefinitionService.get(""54e3deadbeefdeadbeef0001"").orElseThrow(AssertionError::new);
        assertThat(newJobDefinition.title()).isEqualTo(newTitle);
        assertThat(newJobDefinition.description()).isEqualTo(newDescription);
        assertThat(((EventProcessorExecutionJob.Config) newJobDefinition.config()).processingHopSize()).isEqualTo(550000);
        assertThat(((EventProcessorExecutionJob.Config) newJobDefinition.config()).processingWindowSize()).isEqualTo(800000);

        // Test if the EventDefinition update removed the old trigger data
        // and reset the job definition timerange to the new parameters
        final EventProcessorExecutionJob.Config newJobConfig = (EventProcessorExecutionJob.Config) newJobDefinition.config();
        final TimeRange newTimeRange = newJobConfig.parameters().timerange();
        assertThat(newTimeRange.getFrom()).isEqualTo(clock.nowUTC().minus(newConfig.searchWithinMs()));
        assertThat(newTimeRange.getTo()).isEqualTo(clock.nowUTC());

        assertThat(jobTriggerService.get(""54e3deadbeefdeadbeef0002"")).isPresent().get().satisfies(trigger -> {
            assertThat(trigger.data()).isEmpty();
            assertThat(trigger.nextTime()).isEqualTo(clock.nowUTC());
        });
    }
",non-flaky,5
185,apache_struts,13d9053050c9e4fb2ef049db6a37d3f6eebf48fa.testProcessAction_ok.2,"@Test
public void testProcessAction_ok() {
    final Mock mockResponse = mock(ActionResponse.class);
    PortletMode mode = PortletMode.VIEW;
    Map<String, String> initParams = new HashMap<String, String>();
    initParams.put(""viewNamespace"", ""/view"");
    Map<String, String[]> requestParams = new HashMap<String, String[]>();
    requestParams.put(ACTION_PARAM, new String[] { ""/view/testAction"" });
    requestParams.put(MODE_PARAM, new String[] { mode.toString() });
    initParams.put(StrutsConstants.STRUTS_ALWAYS_SELECT_FULL_NAMESPACE,
    ""true"");
    initPortletConfig(initParams, new HashMap<String, Object>());
    initRequest(requestParams, new HashMap<String, Object>(),
    new HashMap<String, Object>(), PortletMode.VIEW,
    WindowState.NORMAL, true, null);
    setupActionFactory(""/view"", ""testAction"", ""success"",
    EasyMock.createNiceMock(ValueStack.class));
    try {
        dispatcher
        .setActionProxyFactory((ActionProxyFactory) mockActionFactory
        .proxy());
        dispatcher.init((PortletConfig) mockConfig.proxy());
        dispatcher.processAction((ActionRequest) mockRequest.proxy(),
        (ActionResponse) mockResponse.proxy());
    } catch (Exception e) {
        e.printStackTrace();
        fail(""Error occured"");
    }
}",test order dependency,4
26922,wildfly_wildfly,MailSubsystem20TestCase.test12,"    @Test
    public void test12() throws Exception {
        standardSubsystemTest(""subsystem_1_2.xml"", false);
    }
",non-flaky,5
112699,hwang-pku_ormlite-core,TransactionManagerTest.call,"	@Test
	public void testTransactionManagerAutoCommitOn() throws Exception {
		ConnectionSource connectionSource = createMock(ConnectionSource.class);
		DatabaseConnection conn = createMock(DatabaseConnection.class);
		expect(conn.isAutoCommitSupported()).andReturn(true);
		expect(conn.isAutoCommit()).andReturn(true);
		conn.setAutoCommit(false);
		Savepoint savePoint = createMock(Savepoint.class);
		expect(savePoint.getSavepointName()).andReturn(""name"").anyTimes();
		expect(conn.setSavePoint(isA(String.class))).andReturn(savePoint);
		conn.commit(savePoint);
		conn.setAutoCommit(true);
		expect(connectionSource.getDatabaseType()).andReturn(databaseType);
		expect(connectionSource.getReadWriteConnection(null)).andReturn(conn);
		expect(connectionSource.saveSpecialConnection(conn)).andReturn(true);
		connectionSource.clearSpecialConnection(conn);
		connectionSource.releaseConnection(conn);
		replay(connectionSource, conn, savePoint);
		TransactionManager tm = new TransactionManager(connectionSource);
		tm.callInTransaction(new Callable<Void>() {
			@Override
			public Void call() {
				return null;
			}
",non-flaky,5
110190,Wikidata_wikidata-toolkit,RdfConverterTest.testWritePropertyDocument,"    @Test
	public void testWritePropertyDocument() throws RDFHandlerException,
			RDFParseException, IOException {
		PropertyDocument document = this.objectFactory
				.createEmptyPropertyDocument();
		this.rdfConverter.writePropertyDocument(document);
		this.rdfWriter.finish();
		Model model = RdfTestHelpers.parseRdf(this.out.toString());
		assertEquals(model, RdfTestHelpers.parseRdf(RdfTestHelpers
				.getResourceFromFile(""EmptyPropertyDocument.rdf"")));
	}
",non-flaky,5
134987,undertow-io_undertow,JsrWebsocketExtensionTestCase.testExtensionsHeaders,"    @Test
    public void testExtensionsHeaders() throws Exception {


        final String SEC_WEBSOCKET_EXTENSIONS = ""permessage-deflate; client_no_context_takeover; client_max_window_bits"";
        final String SEC_WEBSOCKET_EXTENSIONS_EXPECTED = ""[permessage-deflate; client_no_context_takeover]"";  // List format
        List<WebSocketExtension> extensions = WebSocketExtension.parse(SEC_WEBSOCKET_EXTENSIONS);

        final WebSocketClientNegotiation negotiation = new WebSocketClientNegotiation(null, extensions);

        Set<ExtensionHandshake> extensionHandshakes = new HashSet<>();
        extensionHandshakes.add(new PerMessageDeflateHandshake(true));

        final WebSocketChannel clientChannel = WebSocketClient.connect(DefaultServer.getWorker(), null, DefaultServer.getBufferPool(), OptionMap.EMPTY, new URI(DefaultServer.getDefaultServerURL()), WebSocketVersion.V13, negotiation, extensionHandshakes).get();

        final CountDownLatch latch = new CountDownLatch(1);
        final AtomicReference<String> result = new AtomicReference<>();

        clientChannel.getReceiveSetter().set(new AbstractReceiveListener() {
            @Override
            protected void onFullTextMessage(WebSocketChannel channel, BufferedTextMessage message) throws IOException {
                String data = message.getData();
                WebSocketLogger.ROOT_LOGGER.info(""onFullTextMessage - Client - Received: "" + data.getBytes().length + "" bytes . Data: "" + data);
                result.set(data);
                latch.countDown();
            }

            @Override
            protected void onFullCloseMessage(WebSocketChannel channel, BufferedBinaryMessage message) throws IOException {
                message.getData().close();
                WebSocketLogger.ROOT_LOGGER.info(""onFullCloseMessage"");
            }

            @Override
            protected void onError(WebSocketChannel channel, Throwable error) {
                WebSocketLogger.ROOT_LOGGER.info(""onError"");
                super.onError(channel, error);
                error.printStackTrace();
                latch.countDown();
            }

        });
        clientChannel.resumeReceives();

        StreamSinkFrameChannel sendChannel = clientChannel.send(WebSocketFrameType.TEXT);
        new StringWriteChannelListener(""Hello, World!"").setup(sendChannel);

        latch.await(10, TimeUnit.SECONDS);
        Assert.assertEquals(""Hello, World!"", result.get());
        clientChannel.sendClose();

        Assert.assertEquals(SEC_WEBSOCKET_EXTENSIONS_EXPECTED, debug.getResponseExtensions().toString());
    }
",non-flaky,5
77514,dropwizard_dropwizard,DAOTestRuleTest.ruleCanOpenTransaction,"    @Test
    public void ruleCanOpenTransaction() {
        final Long id = daoTestRule.inTransaction(() -> persist(new TestEntity(""description"")).getId());

        assertThat(id).isNotNull();
    }
",non-flaky,5
177995,aosp-mirror_platform_frameworks_support,GuidedStepFragmentTest.answer,"    @Test
    public void finishGuidedStepFragment_finishes_activity() throws Throwable {
        final String firstFragmentName = generateMethodTestName(""first"");
        GuidedStepTestFragment.Provider first = mockProvider(firstFragmentName);
        doAnswer(new Answer<Void>() {
            public Void answer(InvocationOnMock invocation) {
                List actions = (List) invocation.getArguments()[0];
                actions.add(new GuidedAction.Builder().id(1001).title(""Finish activity"").build());
                return null;
            }
",non-flaky,5
33721,alibaba_fastjson,JSONPathTest.isEOF1,"  @Test
  public void isEOF1() throws Throwable {
    // Arrange
    Object objectUnderTest = Reflector.getInstance(""com.alibaba.fastjson.JSONPath$JSONPathParser"");
    Reflector.setField(objectUnderTest, ""path"", """");
    Reflector.setField(objectUnderTest, ""pos"", -2147483647);
    Reflector.setField(objectUnderTest, ""level"", 0);
    Reflector.setField(objectUnderTest, ""ch"", '\u0000');
    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.JSONPath$JSONPathParser"");
    Method m = c.getDeclaredMethod(""isEOF"");
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(objectUnderTest);
    // Assert result
    Assert.assertEquals(false, retval);
  }
",non-flaky,5
20986,NationalSecurityAgency_timely,AggregatorsResponseTest.testAggregatorsResponseEmpty,"    @Test
    public void testAggregatorsResponseEmpty() throws Exception {
        AggregatorsResponse response = new AggregatorsResponse();
        String r = JsonUtil.getObjectMapper().writeValueAsString(response);
        Assert.assertEquals(""[]"", r);
    }
",non-flaky,5
97762,vojtechhabarta_typescript-generator,JaxrsApplicationTest.testWithParsingWithDefaultApplication,"    @Test
    public void testWithParsingWithDefaultApplication() {
        final List<SourceType<Type>> sourceTypes = JaxrsApplicationScanner.scanAutomaticJaxrsApplication(new ClassGraph().enableAllInfo().scan(), null);
        testWithParsing(sourceTypes, false);
    }
",non-flaky,5
156461,apache_commons-lang,DateUtilsFragmentTest.testMinutesOfDayWithDate,"    @Test
    public void testMinutesOfDayWithDate() {
        long testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.DATE);
        final long expectedValue = minutes + ((hours * DateUtils.MILLIS_PER_HOUR))/ DateUtils.MILLIS_PER_MINUTE;
        assertEquals(expectedValue, testResult);
        testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.DAY_OF_YEAR);
        assertEquals(expectedValue, testResult);
    }
",non-flaky,5
26886,wildfly_wildfly,NamingContextTestCase.testListBindingsNameNotFound,"    @Test
    public void testListBindingsNameNotFound() throws Exception {
        try {
            namingContext.listBindings(new CompositeName(""test""));
            fail(""Should have thrown and NameNotFoundException"");
        } catch (NameNotFoundException expected) {
        }

        //the same with security permissions
        try {
            testActionPermission(JndiPermission.ACTION_LIST_BINDINGS, namingContext, ""test"");
            fail(""Should have thrown and NameNotFoundException with appropriate permissions"");
        } catch (NameNotFoundException expected) {
        }
    }
",non-flaky,5
160356,ConsenSys_teku,SlashingProtectionExporterTest.shouldPrintIfFileCannotBeRead,"  @Test
  public void shouldPrintIfFileCannotBeRead(@TempDir Path tempDir)
      throws URISyntaxException, IOException {
    final SlashingProtectionExporter exporter = new SlashingProtectionExporter(tempDir);
    final File file = usingResourceFile(""slashProtection.yml"", tempDir);
    OSUtils.makeNonReadable(file.toPath());
    // It's not always possible to remove read permissions from a file
    assumeThat(file.canRead()).describedAs(""Can read file %s"", file).isFalse();
    final Optional<String> error = exporter.readSlashProtectionFile(file, LOG::debug);
    assertThat(error.orElse("""")).startsWith(""Failed to read from file"");
  }
",non-flaky,5
26786,MundaneImmortal_pair-distribution-app,CompanyTest.testIsDevOpsRotationWeeklyFalse,"	@Test
	public void testIsDevOpsRotationWeeklyFalse() {
		Company company = new Company(""Company"");

		company.setDevOpsRotationStrategy("""");
		assertThat(company.isDevOpsRotationWeekly(), is(false));

		company.setDevOpsRotationStrategy(""foo"");
		assertThat(company.isDevOpsRotationWeekly(), is(false));
	}
",non-flaky,5
160361,ConsenSys_teku,SlashingProtectionRepairerTest.shouldUpdateInvalidFiles,"  @Test
  public void shouldUpdateInvalidFiles(@TempDir Path tempDir) throws IOException {
    setupPathForTest(tempDir, testData);
    SlashingProtectionRepairer repairer =
        SlashingProtectionRepairer.create(subCommandLogger, tempDir, false);
    assertThat(repairer.hasUpdates()).isTrue();

    final UInt64 blockSlot = UInt64.valueOf(1023999);
    final UInt64 attestationEpoch = UInt64.valueOf(2344);
    repairer.updateRecords(blockSlot, attestationEpoch);

    final Optional<ValidatorSigningRecord> defaultRecord =
        Optional.of(
            new ValidatorSigningRecord(null, blockSlot, attestationEpoch, attestationEpoch));

    assertThat(fileContents(tempDir.resolve(keys.get(0)))).isEqualTo(defaultRecord);
    assertThat(fileContents(tempDir.resolve(keys.get(1)))).isEqualTo(testData.get(keys.get(1)));
    assertThat(fileContents(tempDir.resolve(keys.get(2)))).isEqualTo(testData.get(keys.get(2)));
    assertThat(fileContents(tempDir.resolve(keys.get(3)))).isEqualTo(testData.get(keys.get(3)));
  }
",non-flaky,5
159652,liquibase_liquibase,AbstractIntegrationTest.testClearChecksums,"    @Test
    public void testClearChecksums() throws Exception {
        assumeNotNull(this.getDatabase());

        Liquibase liquibase = createLiquibase(completeChangeLog);
        clearDatabase();

        liquibase = createLiquibase(completeChangeLog);
        clearDatabase();

        liquibase = createLiquibase(completeChangeLog);
        liquibase.setChangeLogParameter( ""loginuser"", getUsername());
        liquibase.update(this.contexts);

        liquibase.clearCheckSums();
    }
",non-flaky,5
118708,netty_netty,SmtpResponseDecoderTest.testDecodeTwoLineResponseChunked,"    @Test
    public void testDecodeTwoLineResponseChunked() {
        EmbeddedChannel channel = newChannel();
        assertFalse(channel.writeInbound(newBuffer(""200-"")));
        assertFalse(channel.writeInbound(newBuffer(""Hello\r\n2"")));
        assertFalse(channel.writeInbound(newBuffer(""00 Ok"")));
        assertTrue(channel.writeInbound(newBuffer(""\r\n"")));
        assertTrue(channel.finish());

        SmtpResponse response = channel.readInbound();
        assertEquals(200, response.code());
        List<CharSequence> sequences = response.details();
        assertEquals(2, sequences.size());

        assertEquals(""Hello"", sequences.get(0).toString());
        assertEquals(""Ok"", sequences.get(1).toString());
        assertNull(channel.readInbound());
    }
",non-flaky,5
300,apache_hadoop,TestRpcProgramNfs3.testSetattr,"  @Test(timeout = 60000)
  public void testSetattr() throws Exception {
    HdfsFileStatus status = nn.getRpcServer().getFileInfo(testdir);
    long dirId = status.getFileId();
    int namenodeId = Nfs3Utils.getNamenodeId(config);
    XDR xdr_req = new XDR();
    FileHandle handle = new FileHandle(dirId, namenodeId);
    SetAttr3 symAttr = new SetAttr3(0, 1, 0, 0, null, null,
        EnumSet.of(SetAttrField.UID));
    SETATTR3Request req = new SETATTR3Request(handle, symAttr, false, null);
    req.serialize(xdr_req);

    // Attempt by an unprivileged user should fail.
    SETATTR3Response response1 = nfsd.setattr(xdr_req.asReadOnlyWrap(),
        securityHandlerUnpriviledged,
        new InetSocketAddress(""localhost"", 1234));
    assertEquals(""Incorrect return code"", Nfs3Status.NFS3ERR_ACCES,
        response1.getStatus());

    // Attempt by a priviledged user should pass.
    SETATTR3Response response2 = nfsd.setattr(xdr_req.asReadOnlyWrap(),
        securityHandler, new InetSocketAddress(""localhost"", 1234));
    assertEquals(""Incorrect return code"", Nfs3Status.NFS3_OK,
        response2.getStatus());
  }
",non-flaky,5
162452,testcontainers_testcontainers-java,LogMessageWaitStrategyTest.testWaitUntilReady_Timeout,"    @Test
    public void testWaitUntilReady_Timeout() {
        waitUntilReadyAndTimeout(""echo -e \"""" + READY_MESSAGE + ""\"";"" +
                ""echo -e \""foobar\"";"" +
                ""sleep 300"");
    }
",non-flaky,5
78247,apache_beam,StateInternalsTest.testMergeSetIntoNewNamespace,"  @Test
  public void testMergeSetIntoNewNamespace() throws Exception {

    SetState<String> set1 = underTest.state(NAMESPACE_1, STRING_SET_ADDR);
    SetState<String> set2 = underTest.state(NAMESPACE_2, STRING_SET_ADDR);
    SetState<String> set3 = underTest.state(NAMESPACE_3, STRING_SET_ADDR);

    set1.add(""Hello"");
    set2.add(""Hello"");
    set2.add(""World"");
    set1.add(""!"");

    StateMerging.mergeSets(Arrays.asList(set1, set2, set3), set3);

    // Reading the merged set gets both the contents
    assertThat(set3.read(), containsInAnyOrder(""Hello"", ""World"", ""!""));
    assertThat(set1.read(), Matchers.emptyIterable());
    assertThat(set2.read(), Matchers.emptyIterable());
  }
",non-flaky,5
26697,MundaneImmortal_pair-distribution-app,PairTest.testGetAndSetDevs,"	@Test
	public void testGetAndSetDevs()  {
		Pair subject = new Pair();
		subject.setDevs(Arrays.asList(new Developer(""dev1""), new Developer(""dev2"")));
		
		assertThat(subject.getDevs(), is(equalTo(Arrays.asList(new Developer(""dev1""), new Developer(""dev2"")))));
	}
",non-flaky,5
112118,apache_shardingsphere-elasticjob,StatisticRdbRepositoryTest.assertFindLatestTaskResultStatistics,"    @Test
    public void assertFindLatestTaskResultStatistics() {
        for (StatisticInterval each : StatisticInterval.values()) {
            repository.add(new TaskResultStatistics(100, 2, each, new Date()));
            repository.add(new TaskResultStatistics(200, 5, each, new Date()));
            Optional<TaskResultStatistics> po = repository.findLatestTaskResultStatistics(each);
            assertThat(po.get().getSuccessCount(), is(200));
            assertThat(po.get().getFailedCount(), is(5));
        }
    }
",non-flaky,5
77487,dropwizard_dropwizard,TaskServletTest.isFinished,"    @Test
        public boolean isFinished() {
            return false;
        }
",non-flaky,5
126,pholser_junit-quickcheck,ExhaustingAGivenSetButIncludingAnotherTest.manyParametersWithBooleanAndEnum,"@Test
public void manyParametersWithBooleanAndEnum() throws Exception {
    assertThat(testResult(ManyParametersWithBooleanAndEnum.class), isSuccessful());
    int expectedCount = ((4 * 4) * 2) * RoundingMode.values().length;
    assertEquals(expectedCount, ManyParametersWithBooleanAndEnum.iterations);
    for (int i = 0; i < (expectedCount / 4); ++i) {
        assertEquals(String.valueOf(i), asList(3, 7), ManyParametersWithBooleanAndEnum.firstTestCases.subList(i * 4, (i * 4) + 2));
    }
    for (int i = 0; i < (expectedCount / 16); ++i) {
        assertEquals(String.valueOf(i), asList('a', 'a', 'a', 'a', 'b', 'b', 'b', 'b', 'c', 'c', 'c', 'c'), ManyParametersWithBooleanAndEnum.secondTestCases.subList(i * 16, (i * 16) + 12));
    }
    for (int i = 0; i < (expectedCount / 32); ++i) {
        assertEquals(asList(false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false), ManyParametersWithBooleanAndEnum.thirdTestCases.subList(i * 32, (i * 32) + 16));
        assertEquals(asList(true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true), ManyParametersWithBooleanAndEnum.thirdTestCases.subList((i * 32) + 16, (i * 32) + 32));
    }
}",unordered collections,3
77707,pholser_junit-quickcheck,PrimitivePropertyParameterTypesTest.shouldHold,"    @Test public void shrinkingPrimitivePositiveDouble() {
        @Property public void shouldHold(
            @InRange(minDouble = 555.123123123123, maxDouble = 11111.222222222) double d) {

            values.add(d);

            fail();
        }
",non-flaky,5
86131,graylog2_graylog2-server,TemplateFieldValueProviderTest.templateWithError,"    @Test
    public void templateWithError() {
        final TestEvent event = new TestEvent();
        final EventWithContext eventWithContext = EventWithContext.create(event, newMessage(ImmutableMap.of(""hello"", ""world"")));

        final FieldValue fieldValue = newTemplate(""hello: ${source.yolo}"", true).doGet(""test"", eventWithContext);

        assertThat(fieldValue.dataType()).isEqualTo(FieldValueType.ERROR);
    }
",non-flaky,5
77476,opensearch-project_OpenSearch,IncrementalClusterStateWriterTests.testSlowLogging,"    @TestLogging(value = ""org.opensearch.gateway:WARN"", reason = ""to ensure that we log gateway events on WARN level"")
    public void testSlowLogging() throws WriteStateException, IllegalAccessException {
        final long slowWriteLoggingThresholdMillis;
        final Settings settings;
        if (randomBoolean()) {
            slowWriteLoggingThresholdMillis = PersistedClusterStateService.SLOW_WRITE_LOGGING_THRESHOLD.get(Settings.EMPTY).millis();
            settings = Settings.EMPTY;
        } else {
            slowWriteLoggingThresholdMillis = randomLongBetween(2, 100000);
            settings = Settings.builder()
                .put(PersistedClusterStateService.SLOW_WRITE_LOGGING_THRESHOLD.getKey(), slowWriteLoggingThresholdMillis + ""ms"")
                .build();
        }

        final DiscoveryNode localNode = newNode(""node"");
        final ClusterState clusterState = ClusterState.builder(ClusterName.DEFAULT)
            .nodes(DiscoveryNodes.builder().add(localNode).localNodeId(localNode.getId())).build();

        final long startTimeMillis = randomLongBetween(0L, Long.MAX_VALUE - slowWriteLoggingThresholdMillis * 10);
        final AtomicLong currentTime = new AtomicLong(startTimeMillis);
        final AtomicLong writeDurationMillis = new AtomicLong(slowWriteLoggingThresholdMillis);

        final ClusterSettings clusterSettings = new ClusterSettings(settings, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS);
        final IncrementalClusterStateWriter incrementalClusterStateWriter
            = new IncrementalClusterStateWriter(settings, clusterSettings, mock(MetaStateService.class),
            new Manifest(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), Collections.emptyMap()),
            clusterState, () -> currentTime.getAndAdd(writeDurationMillis.get()));

        assertExpectedLogs(clusterState, incrementalClusterStateWriter, new MockLogAppender.SeenEventExpectation(
            ""should see warning at threshold"",
            IncrementalClusterStateWriter.class.getCanonicalName(),
            Level.WARN,
            ""writing cluster state took [*] which is above the warn threshold of [*]; "" +
                ""wrote metadata for [0] indices and skipped [0] unchanged indices""));

        writeDurationMillis.set(randomLongBetween(slowWriteLoggingThresholdMillis, slowWriteLoggingThresholdMillis * 2));
        assertExpectedLogs(clusterState, incrementalClusterStateWriter, new MockLogAppender.SeenEventExpectation(
            ""should see warning above threshold"",
            IncrementalClusterStateWriter.class.getCanonicalName(),
            Level.WARN,
            ""writing cluster state took [*] which is above the warn threshold of [*]; "" +
                ""wrote metadata for [0] indices and skipped [0] unchanged indices""));

        writeDurationMillis.set(randomLongBetween(1, slowWriteLoggingThresholdMillis - 1));
        assertExpectedLogs(clusterState, incrementalClusterStateWriter, new MockLogAppender.UnseenEventExpectation(
            ""should not see warning below threshold"",
            IncrementalClusterStateWriter.class.getCanonicalName(),
            Level.WARN,
            ""*""));

        clusterSettings.applySettings(Settings.builder()
            .put(PersistedClusterStateService.SLOW_WRITE_LOGGING_THRESHOLD.getKey(), writeDurationMillis.get() + ""ms"")
            .build());
        assertExpectedLogs(clusterState, incrementalClusterStateWriter, new MockLogAppender.SeenEventExpectation(
            ""should see warning at reduced threshold"",
            IncrementalClusterStateWriter.class.getCanonicalName(),
            Level.WARN,
            ""writing cluster state took [*] which is above the warn threshold of [*]; "" +
                ""wrote metadata for [0] indices and skipped [0] unchanged indices""));

        assertThat(currentTime.get(), lessThan(startTimeMillis + 10 * slowWriteLoggingThresholdMillis)); // ensure no overflow
    }
",non-flaky,5
78242,apache_beam,StateInternalsTest.testMergeBagIntoSource,"  @Test
  public void testMergeBagIntoSource() throws Exception {
    BagState<String> bag1 = underTest.state(NAMESPACE_1, STRING_BAG_ADDR);
    BagState<String> bag2 = underTest.state(NAMESPACE_2, STRING_BAG_ADDR);

    bag1.add(""Hello"");
    bag2.add(""World"");
    bag1.add(""!"");

    StateMerging.mergeBags(Arrays.asList(bag1, bag2), bag1);

    // Reading the merged bag gets both the contents
    assertThat(bag1.read(), containsInAnyOrder(""Hello"", ""World"", ""!""));
    assertThat(bag2.read(), Matchers.emptyIterable());
  }
",non-flaky,5
94797,ktuukkan_marine-api,AISMessage09ParserTest.getSpeedOverGround,"    @Test
    public void getSpeedOverGround() throws Exception {
        assertEquals(100.0, msg.getSpeedOverGround(), 0.1);
    }
",non-flaky,5
118696,netty_netty,SmtpRequestEncoderTest.testEncodeNoop,"    @Test
    public void testEncodeNoop() {
        testEncode(SmtpRequests.noop(), ""NOOP\r\n"");
    }
",non-flaky,5
94700,square_okhttp,RealWebSocketTest.contentType,"  @Test public void streamingMessageCanInterleavePing() throws IOException, InterruptedException {
      @Override public MediaType contentType() {
        return TEXT;
      }
",non-flaky,5
98233,apache_jackrabbit,PerformanceTest.testPerformance,"    @Test
    public void testPerformance() throws Exception {
        testPerformance(""2.2"");
    }
",non-flaky,5
160367,ConsenSys_teku,SlashingProtectionImporterTest.shouldExportAndImportFile,"  @Test
  public void shouldExportAndImportFile(@TempDir Path tempDir)
      throws IOException, URISyntaxException {
    final Path exportedFile = tempDir.resolve(""exportedFile.json"").toAbsolutePath();

    final SlashingProtectionExporter exporter = new SlashingProtectionExporter(tempDir);
    final File ruleFile = usingResourceFile(""slashProtection.yml"", tempDir);
    final Optional<String> exportError = exporter.readSlashProtectionFile(ruleFile, LOG::debug);
    final String originalFileContent = Files.readString(ruleFile.toPath());
    assertThat(exportError).isEmpty();

    assertThat(Files.exists(ruleFile.toPath())).isTrue();
    assertThat(Files.exists(exportedFile)).isFalse();
    exporter.saveToFile(exportedFile.toString(), LOG::debug);
    ruleFile.delete();
    assertThat(Files.exists(exportedFile)).isTrue();
    assertThat(Files.exists(ruleFile.toPath())).isFalse();

    SlashingProtectionImporter importer = new SlashingProtectionImporter(tempDir);
    importer.initialise(new File(exportedFile.toString()));
    final Map<BLSPublicKey, String> errors = importer.updateLocalRecords((__) -> {});
    assertThat(errors).isEmpty();
    assertThat(Files.exists(ruleFile.toPath())).isTrue();

    assertThat(originalFileContent).isEqualTo(Files.readString(ruleFile.toPath()));
  }
",non-flaky,5
119,vert-x3_vertx-mongo-client,MongoClientTest.testWatch,"@Test
public void testWatch() throws Exception {
    final JsonArray operationTypes = new JsonArray(Arrays.asList(""insert"", ""update"", ""replace"", ""delete""));
    final JsonObject match = new JsonObject().put(""operationType"", new JsonObject().put(""$in"", operationTypes));
    final JsonArray pipeline = new JsonArray().add(new JsonObject().put(""$match"", match));
    final JsonObject fields = new JsonObject().put(""operationType"", true).put(""namespaceDocument"", true).put(""destinationNamespaceDocument"", true).put(""documentKey"", true).put(""updateDescription"", true).put(""fullDocument"", true);
    pipeline.add(new JsonObject().put(""$project"", fields));
    final String collection = randomCollection();
    final JsonObject doc = createDoc();
    final CountDownLatch latch = new CountDownLatch(4);
    final AtomicReference<ReadStream<ChangeStreamDocument<JsonObject>>> streamReference = new AtomicReference<>();
    mongoClient.createCollection(collection, onSuccess(( res) -> {
        ReadStream<ChangeStreamDocument<JsonObject>> stream = mongoClient.watch(collection, pipeline, true, 1).handler(( changeStreamDocument) -> {
            OperationType operationType = changeStreamDocument.getOperationType();
            assertNotNull(operationType);
            JsonObject fullDocument = changeStreamDocument.getFullDocument();
            switch (operationType.getValue()) {
                case ""insert"" :
                assertNotNull(fullDocument);
                assertNotNull(fullDocument.getString(MongoClientUpdateResult.ID_FIELD));
                assertEquals(""bar"", fullDocument.getString(""foo""));
                break;
                case ""update"" :
                assertNotNull(fullDocument);
                assertEquals(""updatedValue"", fullDocument.getString(""fieldToUpdate""));
                break;
                case ""replace"" :
                assertNotNull(fullDocument);
                assertEquals(""replacedValue"", fullDocument.getString(""fieldToReplace""));
                break;
                case ""delete"" :
                assertNull(fullDocument);
                break;
                default :
            }
            latch.countDown();
            if (latch.getCount() == 1) {
                mongoClient.removeDocuments(collection, new JsonObject());
            }
        }).endHandler(( v) -> assertEquals(0, latch.getCount())).exceptionHandler(this::fail).fetch(1);
        streamReference.set(stream);
        vertx.setTimer(50, ( v) -> {
            mongoClient.insert(collection, doc).compose(( idString) -> {
                doc.put(MongoClientUpdateResult.ID_FIELD, idString);
                doc.put(""fieldToUpdate"", ""updatedValue"");
                final JsonObject query = new JsonObject().put(MongoClientUpdateResult.ID_FIELD, idString);
                final JsonObject updateField = new JsonObject().put(""fieldToUpdate"", ""updatedValue"");
                return CompositeFuture.all(mongoClient.updateCollection(collection, query, new JsonObject().put(""$set"", updateField)), mongoClient.save(collection, doc.put(""fieldToReplace"", ""replacedValue"")));
            });
        });
    }));
    awaitLatch(latch);
    streamReference.get().handler(null);
}",time,2
43092,trinodb_trino,AbstractTestIntegrationSmokeTest.testMultipleRangesPredicate,"    @Test
    public void testMultipleRangesPredicate()
    {
        // List columns explicitly. Some connectors do not maintain column ordering.
        assertQuery("""" +
                ""SELECT orderkey, custkey, orderstatus, totalprice, orderdate, orderpriority, clerk, shippriority, comment "" +
                ""FROM orders "" +
                ""WHERE orderkey BETWEEN 10 AND 50"");
    }
",non-flaky,5
133905,cdancy_jenkins-rest,ConfigurationAsCodeApiLiveTest.testBadCascCheck,"    @Test
    public void testBadCascCheck() {
        String config = payloadFromResource(""/casc-bad.yml"");
        RequestStatus success = api().check(config);
        assertFalse(success.value());
    }
",non-flaky,5
112627,tbsalling_aismessages,AISMessageTest.testEquals,"    @Test
    public void testEquals() {
          assertEquals(AISMessage.create(NMEAMessage.fromString(""!AIVDM,1,1,,B,13AkSB0000PhAmJPoTMoiQFT0D1:,0*5E"")), AISMessage.create(NMEAMessage.fromString(""!AIVDM,1,1,,B,13AkSB0000PhAmJPoTMoiQFT0D1:,0*5E"")));
          assertNotEquals(AISMessage.create(NMEAMessage.fromString(""!AIVDM,1,1,,B,13AkSB0000PhAmJPoTMoiQFT0D1:,0*5E"")), AISMessage.create(NMEAMessage.fromString(""!AIVDM,1,1,,A,13AkSB0000PhAmHPoTNcp1Fp0D17,0*00"")));
    }
",non-flaky,5
104671,apache_pinot,RealtimeToOfflineSegmentsMinionClusterIntegrationTest.testRealtimeToOfflineSegmentsTask,"  @Test
  public void testRealtimeToOfflineSegmentsTask()
      throws IOException {
    List<SegmentZKMetadata> segmentsZKMetadata = _pinotHelixResourceManager.getSegmentsZKMetadata(_offlineTableName);
    Assert.assertTrue(segmentsZKMetadata.isEmpty());

    long expectedWatermark = _dataSmallestTimeMs + 86400000;
    int numOfflineSegments = 0;
    for (int i = 0; i < 3; i++) {
      // Schedule task
      Assert.assertNotNull(_taskManager.scheduleTasks().get(MinionConstants.RealtimeToOfflineSegmentsTask.TASK_TYPE));
      Assert.assertTrue(_helixTaskResourceManager.getTaskQueues().contains(
          PinotHelixTaskResourceManager.getHelixJobQueueName(MinionConstants.RealtimeToOfflineSegmentsTask.TASK_TYPE)));
      // Should not generate more tasks
      Assert.assertNull(_taskManager.scheduleTasks().get(MinionConstants.RealtimeToOfflineSegmentsTask.TASK_TYPE));

      // Wait at most 600 seconds for all tasks COMPLETED
      waitForTaskToComplete(expectedWatermark);
      // check segment is in offline
      segmentsZKMetadata = _pinotHelixResourceManager.getSegmentsZKMetadata(_offlineTableName);
      numOfflineSegments++;
      Assert.assertEquals(segmentsZKMetadata.size(), numOfflineSegments);
      long expectedOfflineSegmentTimeMs = expectedWatermark - 86400000;
      Assert.assertEquals(segmentsZKMetadata.get(i).getStartTimeMs(), expectedOfflineSegmentTimeMs);
      Assert.assertEquals(segmentsZKMetadata.get(i).getEndTimeMs(), expectedOfflineSegmentTimeMs);

      expectedWatermark += 86400000;
    }
    testHardcodedSqlQueries();

    // Delete the table
    dropRealtimeTable(_realtimeTableName);

    // Check if the metadata is cleaned up on table deletion
    verifyTableDelete(_realtimeTableName);
  }
",non-flaky,5
177240,line_armeria,PropertiesEndpointGroupTest.duplicateResourceUrl,"    @Test
    public void duplicateResourceUrl() throws IOException {
        final File file = folder.newFile(""temp-file.properties"");
        final PropertiesEndpointGroup propertiesEndpointGroupA =
                PropertiesEndpointGroup.of(file.toPath(), ""serverA.hosts"");
        final PropertiesEndpointGroup propertiesEndpointGroupB =
                PropertiesEndpointGroup.of(file.toPath(), ""serverA.hosts"");
        propertiesEndpointGroupA.close();
        propertiesEndpointGroupB.close();
    }
",non-flaky,5
86080,graylog2_graylog2-server,PivotAggregationSearchTest.testDateRangeBucketWithCatchUpSlidingWindows,"    @Test
    public void testDateRangeBucketWithCatchUpSlidingWindows() {
        final int processingWindowSizeSec = 120;
        final int processingHopSizeSec = 60;
        final DateTime now = DateTime.now(DateTimeZone.UTC);
        final DateTime from = now;
        // We are 3 full processingWindows behind
        final DateTime to = now.plusSeconds(processingWindowSizeSec * 3);
        TimeRange timeRange = AbsoluteRange.create(from, to);
        final DateRangeBucket rangeBucket = PivotAggregationSearch.buildDateRangeBuckets(timeRange, processingWindowSizeSec * 1000, processingHopSizeSec * 1000);

        assertThat(rangeBucket.ranges()).containsExactly(
                DateRange.create(from.plusSeconds(processingHopSizeSec * 0), from.plusSeconds(processingWindowSizeSec)),
                DateRange.create(from.plusSeconds(processingHopSizeSec * 1), from.plusSeconds(processingHopSizeSec * 1).plusSeconds(processingWindowSizeSec)),
                DateRange.create(from.plusSeconds(processingHopSizeSec * 2), from.plusSeconds(processingHopSizeSec * 2).plusSeconds(processingWindowSizeSec)),
                DateRange.create(from.plusSeconds(processingHopSizeSec * 3), from.plusSeconds(processingHopSizeSec * 3).plusSeconds(processingWindowSizeSec)),
                DateRange.create(from.plusSeconds(processingHopSizeSec * 4), to)
        );
    }
",non-flaky,5
133918,cdancy_jenkins-rest,QueueApiLiveTest.testQueueItemMultipleParameters,"    @Test
    public void testQueueItemMultipleParameters() throws InterruptedException {
        Map<String, List<String>> params = new HashMap<>();
        params.put(""SomeKey1"", Lists.newArrayList(""SomeVeryNewValue1""));
        IntegerResponse job1 = api.jobsApi().buildWithParameters(null, ""QueueTestMultipleParams"",params);
        assertNotNull(job1);
        assertTrue(job1.value() > 0);
        assertTrue(job1.errors().size() == 0);

        // Jenkins will reject two consecutive build requests when the build parameter values are the same
        // So we must set some different parameter values
        params = new HashMap<>();
        params.put(""SomeKey1"", Lists.newArrayList(""SomeVeryNewValue2""));
        IntegerResponse job2 = api.jobsApi().buildWithParameters(null, ""QueueTestMultipleParams"", params);
        assertNotNull(job2);
        assertTrue(job2.value() > 0);
        assertTrue(job2.errors().size() == 0);

        QueueItem queueItem = getRunningQueueItem(job1.value());
        assertNotNull(queueItem);
        assertFalse(queueItem.cancelled());

        Map <String, String> map = Maps.newHashMap();
        map.put(""SomeKey1"", ""SomeVeryNewValue1"");
        map.put(""SomeKey2"", ""SomeValue2"");
        map.put(""SomeKey3"", ""SomeValue3"");
        assertEquals(queueItem.params(), map);
    }
",non-flaky,5
175831,GoogleCloudPlatform_google-cloud-eclipse,BucketNameValidatorTest.testValidation_endWithUnderscore,"  @Test
  public void testValidation_endWithUnderscore() {
    assertThat(validator.validate(""bucket_"").getSeverity(), is(IStatus.ERROR));
  }
",non-flaky,5
60959,apache_druid,TDigestSketchToQuantilePostAggregatorTest.testToString,"  @Test
  public void testToString()
  {
    PostAggregator postAgg =
        new TDigestSketchToQuantilePostAggregator(""post"", new ConstantPostAggregator("""", 100), 0.5);

    Assert.assertEquals(
        ""TDigestSketchToQuantilePostAggregator{name='post', field=ConstantPostAggregator{name='', constantValue=100}, fraction=0.5}"",
        postAgg.toString()
    );
  }
",non-flaky,5
162401,testcontainers_testcontainers-java,BaseDockerComposeTest.secondTest,"    @Test
    public void secondTest() {
        // used in manual checking for cleanup in between tests
        Jedis jedis = new Jedis(getEnvironment().getServiceHost(""redis_1"", REDIS_PORT), getEnvironment().getServicePort(""redis_1"", REDIS_PORT));

        jedis.incr(""test"");
        jedis.incr(""test"");
        jedis.incr(""test"");

        assertEquals(""Tests use fresh container instances"", ""3"", jedis.get(""test""));
        // if these end up using the same container one of the test methods will fail.
        // However, @Rule creates a separate DockerComposeContainer instance per test, so this just shouldn't happen
    }
",non-flaky,5
334,apache_hadoop,TestViewfsWithNfs3.testNfsRenameSingleNN,"  @Test (timeout = 60000)
  public void testNfsRenameSingleNN() throws Exception {
    HdfsFileStatus fromFileStatus = nn1.getRpcServer().getFileInfo(""/user1"");
    int fromNNId = Nfs3Utils.getNamenodeId(config, hdfs1.getUri());
    FileHandle fromHandle =
        new FileHandle(fromFileStatus.getFileId(), fromNNId);

    HdfsFileStatus statusBeforeRename =
        nn1.getRpcServer().getFileInfo(""/user1/renameSingleNN"");
    Assert.assertEquals(statusBeforeRename.isDirectory(), false);

    testNfsRename(fromHandle, ""renameSingleNN"",
        fromHandle, ""renameSingleNNSucess"", Nfs3Status.NFS3_OK);

    HdfsFileStatus statusAfterRename =
        nn1.getRpcServer().getFileInfo(""/user1/renameSingleNNSucess"");
    Assert.assertEquals(statusAfterRename.isDirectory(), false);

    statusAfterRename =
        nn1.getRpcServer().getFileInfo(""/user1/renameSingleNN"");
    Assert.assertEquals(statusAfterRename, null);
  }
",non-flaky,5
89275,apache_samza,TestSamzaRestService.testStopShouldStopTheMetricsReportersAndStopTheServer,"  @Test
  public void testStopShouldStopTheMetricsReportersAndStopTheServer() throws Exception {
    samzaRestService.stop();
    Mockito.verify(metricsReporter).stop();
    Mockito.verify(server).stop();
  }
",non-flaky,5
137117,spring-projects_spring-framework,AbstractMethodMetadataTests.getMethodNameReturnsMethodName,"	@Test
	public void getMethodNameReturnsMethodName() {
		assertThat(getTagged(WithMethod.class).getMethodName()).isEqualTo(""test"");
	}
",non-flaky,5
33847,apache_camel,FhirTransactionIT.testWithResourcesSummaryEnum,"    @Test
    public void testWithResourcesSummaryEnum() throws Exception {
        Patient oscar = new Patient().addName(new HumanName().addGiven(""Oscar"").setFamily(""Peterson""));
        Patient bobbyHebb = new Patient().addName(new HumanName().addGiven(""Bobby"").setFamily(""Hebb""));
        List<IBaseResource> patients = new ArrayList<>(2);
        patients.add(oscar);
        patients.add(bobbyHebb);
        final Map<String, Object> headers = new HashMap<>();
        headers.put(ExtraParameters.SUMMARY_ENUM.getHeaderName(), SummaryEnum.DATA);

        // using java.util.List message body for single parameter ""resources""
        List<IBaseResource> result = requestBodyAndHeaders(""direct://WITH_RESOURCES"", patients, headers);

        assertNotNull(result, ""withResources result"");
        LOG.debug(""withResources: "" + result);
        assertEquals(2, result.size());
    }
",non-flaky,5
94650,square_okhttp,RelayTest.call,"  @Test public void racingReaders() throws Exception {
      @Override public ByteString call() throws Exception {
        Buffer buffer = new Buffer();
        while (source.read(buffer, 16384) != -1) {
        }
        source.close();
        return buffer.readByteString();
      }
",non-flaky,5
104659,apache_pinot,OfflineClusterIntegrationTest.testCaseInsensitivityWithColumnNameContainsTableName,"  @Test
  public void testCaseInsensitivityWithColumnNameContainsTableName() {
    int daysSinceEpoch = 16138;
    int hoursSinceEpoch = 16138 * 24;
    int secondsSinceEpoch = 16138 * 24 * 60 * 60;
    List<String> baseQueries = Arrays.asList(""SELECT * FROM mytable"",
        ""SELECT DaysSinceEpoch, timeConvert(DaysSinceEpoch,'DAYS','SECONDS') FROM mytable"",
        ""SELECT DaysSinceEpoch, timeConvert(DaysSinceEpoch,'DAYS','SECONDS') FROM mytable order by DaysSinceEpoch ""
            + ""limit 10000"",
        ""SELECT DaysSinceEpoch, timeConvert(DaysSinceEpoch,'DAYS','SECONDS') FROM mytable order by timeConvert""
            + ""(DaysSinceEpoch,'DAYS','SECONDS') DESC limit 10000"",
        ""SELECT count(*) FROM mytable WHERE DaysSinceEpoch = "" + daysSinceEpoch,
        ""SELECT count(*) FROM mytable WHERE timeConvert(DaysSinceEpoch,'DAYS','HOURS') = "" + hoursSinceEpoch,
        ""SELECT count(*) FROM mytable WHERE timeConvert(DaysSinceEpoch,'DAYS','SECONDS') = "" + secondsSinceEpoch,
        ""SELECT MAX(timeConvert(DaysSinceEpoch,'DAYS','SECONDS')) FROM mytable"",
        ""SELECT COUNT(*) FROM mytable GROUP BY dateTimeConvert(DaysSinceEpoch,'1:DAYS:EPOCH','1:HOURS:EPOCH',""
            + ""'1:HOURS')"");
    List<String> queries = new ArrayList<>();
    baseQueries
        .forEach(q -> queries.add(q.replace(""mytable"", ""MYTABLE"").replace(""DaysSinceEpoch"", ""MYTABLE.DAYSSinceEpOch"")));
    baseQueries.forEach(
        q -> queries.add(q.replace(""mytable"", ""MYDB.MYTABLE"").replace(""DaysSinceEpoch"", ""MYTABLE.DAYSSinceEpOch"")));

    for (String query : queries) {
      try {
        JsonNode response = postQuery(query);
        assertTrue(response.get(""numSegmentsProcessed"").asLong() >= 1L, ""PQL: "" + query + "" failed"");

        response = postSqlQuery(query);
        assertTrue(response.get(""numSegmentsProcessed"").asLong() >= 1L, ""SQL: "" + query + "" failed"");
      } catch (Exception e) {
        // Fail the test when exception caught
        throw new RuntimeException(""Got Exceptions from query - "" + query);
      }
    }
  }
",non-flaky,5
114072,aws_aws-sdk-java-v2,EnhancedTypeTest.navigableMapOf_ReturnsRawClassOfNavigableMap_WhenSpecifyingClass,"    @Test
    public void navigableMapOf_ReturnsRawClassOfNavigableMap_WhenSpecifyingClass() {
        EnhancedType<NavigableMap<String, Integer>> type = EnhancedType.navigableMapOf(String.class, Integer.class);

        assertThat(type.rawClass()).isEqualTo(NavigableMap.class);
        assertThat(type.rawClassParameters()).containsExactly(EnhancedType.of(String.class), EnhancedType.of(Integer.class));
    }
",non-flaky,5
113723,salesforce_reactive-grpc,UnimplementedMethodIntegrationTest.unimplementedMethodShouldFail,"    @Test
    public void unimplementedMethodShouldFail() {
        GreeterGrpc.GreeterBlockingStub stub = GreeterGrpc.newBlockingStub(channel);

        assertThatThrownBy(() -> stub.sayHello(HelloRequest.newBuilder().setName(""World"").build()))
                .isInstanceOf(StatusRuntimeException.class)
                .hasMessageContaining(""UNIMPLEMENTED"");
    }
",non-flaky,5
33923,apache_camel,LdifRouteIT.modDn,"    @Test
    public void modDn() throws Exception {
        setupData(""/org/apache/camel/component/ldif/ModDnSetup.ldif"");

        camel.addRoutes(createRouteBuilder(ENDPOINT_LDIF));
        camel.start();

        Endpoint endpoint = camel.getEndpoint(ENDPOINT_START);
        Exchange exchange = endpoint.createExchange();

        // then we set the LDAP filter on the in body
        URL loc = this.getClass().getResource(""/org/apache/camel/component/ldif/ModDn.ldif"");
        exchange.getIn().setBody(loc.toString());

        // now we send the exchange to the endpoint, and receives the response
        // from Camel
        Exchange out = template.send(endpoint, exchange);

        // Check the results
        List<String> ldifResults = defaultLdapModuleOutAssertions(out);
        assertThat(ldifResults, notNullValue());
        assertThat(ldifResults.size(), equalTo(1));
        assertThat(ldifResults.get(0), equalTo(""success""));

        // Check LDAP
        NamingEnumeration<SearchResult> searchResults = ldapContext.search(""dc=example,dc=org"", ""(uid=test*)"", SEARCH_CONTROLS);
        assertNotNull(searchResults);

        checkDN(""uid=test7"", searchResults);
    }
",non-flaky,5
97996,ReactiveX_RxJava,MergeTests.testMergeCovariance3,"    @Test
    public void testMergeCovariance3() {
        Observable<Movie> o1 = Observable.from(new HorrorMovie(), new Movie());
        Observable<Media> o2 = Observable.from(new Media(), new HorrorMovie());

        List<Media> values = Observable.merge(o1, o2).toList().toBlockingObservable().single();
        
        assertTrue(values.get(0) instanceof HorrorMovie);
        assertTrue(values.get(1) instanceof Movie);
        assertTrue(values.get(2) instanceof Media);
        assertTrue(values.get(3) instanceof HorrorMovie);
    }
",non-flaky,5
122636,vespa-engine_vespa,YumTest.testQueryInstalledPartial,"    @Test
    public void testQueryInstalledPartial() {
        terminal.expectCommand(
                ""rpm -q vespa-node-admin --queryformat \""%{NAME}\\\\n%{EPOCH}\\\\n%{VERSION}\\\\n%{RELEASE}\\\\n%{ARCH}\"" 2>&1"",
                0,
                ""vespa-node-admin\n(none)\n6.283.62\n1.el7\nnoarch"");

        Optional<YumPackageName> installed = yum.queryInstalled(taskContext, ""vespa-node-admin"");

        assertTrue(installed.isPresent());
        assertEquals(""vespa-node-admin"", installed.get().getName());
        assertFalse(installed.get().getEpoch().isPresent());
        assertEquals(""6.283.62"", installed.get().getVersion().get());
        assertEquals(""1.el7"", installed.get().getRelease().get());
        assertEquals(""noarch"", installed.get().getArchitecture().get());
    }
",non-flaky,5
177180,line_armeria,BraveClientIntegrationTest.usesParentFromInvocationTime,"    @Test
    public void usesParentFromInvocationTime() {
        try (SafeCloseable ignored = serverContext().push()) {
            super.usesParentFromInvocationTime();
        }
    }
",non-flaky,5
110104,Wikidata_wikidata-toolkit,DumpProcessingOutputActionTest.testCompressionOutputArgumentsShort,"	@Test
	public void testCompressionOutputArgumentsShort() {
		String[] args = new String[] { ""-a"", ""json"", ""-z"", ""bz2"" };
		DumpProcessingOutputAction action = getActionFromArgs(args);

		assertEquals(action.compressionType,
				DumpProcessingOutputAction.COMPRESS_BZ2);
	}
",non-flaky,5
76961,Tencent_Firestorm,ChecksumUtilsTest.crc32TestWithByte,"  @Test
  public void crc32TestWithByte() {
    byte[] data = new byte[32 * 1024 * 1024];
    new Random().nextBytes(data);
    CRC32 crc32 = new CRC32();
    crc32.update(data);
    long expected = crc32.getValue();
    assertEquals(expected, ChecksumUtils.getCrc32(data));

    data = new byte[32 * 1024];
    new Random().nextBytes(data);
    crc32 = new CRC32();
    crc32.update(data);
    expected = crc32.getValue();
    assertEquals(expected, ChecksumUtils.getCrc32(data));
  }
",non-flaky,5
53177,cloudfoundry_uaa,JsonDateDeserializerTest.testParsingParallel,"    @Test
    public void testParsingParallel() throws IOException, InterruptedException {
        Thread[] threadArray = new Thread[1000];
        for (int i = 0; i < 1000; i++) {

            threadArray[i] = new Thread(() -> {
                try {
                    Date d = JsonDateDeserializer.getDate(testDateString, new JsonLocation(null, 22, 0, 0));
                    if(new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"").parse(testDateString).getTime() != d.getTime())
                    {
                        throw new Exception(""Unexpected date"");
                    }
                } catch (Exception e) {
                    exceptionOccured = e;
                }
            });
        }
        for (int i = 0; i < 1000; i++) {
            threadArray[i].start();
        }
        for (int i = 0; i < 1000; i++) {
            threadArray[i].join();
        }
        Assert.assertNull(exceptionOccured);
    }
",non-flaky,5
26712,MundaneImmortal_pair-distribution-app,PairTest.testIsSolo,"	@Test
	public void testIsSolo()  {
		Pair subject = new Pair(Arrays.asList(new Developer(""dev1"")));
		Pair subject2 = new Pair(Arrays.asList(new Developer(""dev1""), new Developer(""dev2"")));
		
		assertThat(subject.equals(subject2), is(false));
	}
",non-flaky,5
160417,ConsenSys_teku,ChainDataProviderTest.getBlockAttestations_shouldReturnAttestationsOfBlock,"  @Test
  public void getBlockAttestations_shouldReturnAttestationsOfBlock() throws Exception {
    final ChainDataProvider provider =
        new ChainDataProvider(spec, recentChainData, combinedChainDataClient);
    ChainBuilder chainBuilder = storageSystem.chainBuilder();

    ChainBuilder.BlockOptions blockOptions = ChainBuilder.BlockOptions.create();
    AttestationGenerator attestationGenerator =
        new AttestationGenerator(spec, chainBuilder.getValidatorKeys());
    tech.pegasys.teku.spec.datastructures.operations.Attestation attestation1 =
        attestationGenerator.validAttestation(bestBlock.toUnsigned(), bestBlock.getSlot());
    tech.pegasys.teku.spec.datastructures.operations.Attestation attestation2 =
        attestationGenerator.validAttestation(
            bestBlock.toUnsigned(), bestBlock.getSlot().increment());
    blockOptions.addAttestation(attestation1);
    blockOptions.addAttestation(attestation2);
    SignedBlockAndState newHead =
        storageSystem
            .chainBuilder()
            .generateBlockAtSlot(bestBlock.getSlot().plus(10), blockOptions);
    storageSystem.chainUpdater().saveBlock(newHead);
    storageSystem.chainUpdater().updateBestBlock(newHead);

    final Optional<List<Attestation>> response = provider.getBlockAttestations(""head"").get();
    assertThat(response).isPresent();
    assertThat(response.get())
        .containsExactly(new Attestation(attestation1), new Attestation(attestation2));
  }
",non-flaky,5
84611,apache_zookeeper,GetEphemeralsTest.setUp,"    @BeforeEach
    public void setUp() throws Exception {
        super.setUp();

        zk = createClient();
        expected = generatePaths(PERSISTENT_CNT, EPHEMERAL_CNT);
    }
",non-flaky,5
89314,apache_samza,TestKafkaSystemAdminWithMock.testGetSystemStreamMetaDataWithRetry,"  @Test
  public void testGetSystemStreamMetaDataWithRetry() {
    final List<PartitionInfo> partitionInfosForTopic = ImmutableList.of(mockPartitionInfo0, mockPartitionInfo1);
    when(mockKafkaConsumer.partitionsFor(VALID_TOPIC)).thenThrow(new RuntimeException())
        .thenReturn(partitionInfosForTopic);

    Map<String, SystemStreamMetadata> metadataMap =
        kafkaSystemAdmin.getSystemStreamMetadata(ImmutableSet.of(VALID_TOPIC));
    assertEquals(""metadata should return for 1 topic"", metadataMap.size(), 1);

    // retried twice because the first fails and the second succeeds
    Mockito.verify(mockKafkaConsumer, Mockito.times(2)).partitionsFor(VALID_TOPIC);

    final List<TopicPartition> topicPartitions =
        Arrays.asList(new TopicPartition(mockPartitionInfo0.topic(), mockPartitionInfo0.partition()),
            new TopicPartition(mockPartitionInfo1.topic(), mockPartitionInfo1.partition()));
    // the following methods thereafter are only called once
    Mockito.verify(mockKafkaConsumer, Mockito.times(1)).beginningOffsets(topicPartitions);
    Mockito.verify(mockKafkaConsumer, Mockito.times(1)).endOffsets(topicPartitions);
  }
",non-flaky,5
59609,looly_hutool,ExpressionUtilTest.jfireELTest,"	@Test
	public void jfireELTest(){
		ExpressionEngine engine = new JfireELEngine();

		final Dict dict = Dict.create()
				.set(""a"", 100.3)
				.set(""b"", 45)
				.set(""c"", -199.100);
		final Object eval = engine.eval(""a-(b-c)"", dict);
		Assert.assertEquals(-143.8, (double)eval, 2);
	}
",non-flaky,5
137071,spring-projects_spring-framework,PropertiesMarshallerTests.readWrite,"	@Test
	public void readWrite() throws IOException {
		CandidateComponentsMetadata metadata = new CandidateComponentsMetadata();
		metadata.add(createItem(""com.foo"", ""first"", ""second""));
		metadata.add(createItem(""com.bar"", ""first""));

		ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
		PropertiesMarshaller.write(metadata, outputStream);
		CandidateComponentsMetadata readMetadata = PropertiesMarshaller.read(
				new ByteArrayInputStream(outputStream.toByteArray()));
		assertThat(readMetadata).has(Metadata.of(""com.foo"", ""first"", ""second""));
		assertThat(readMetadata).has(Metadata.of(""com.bar"", ""first""));
		assertThat(readMetadata.getItems()).hasSize(2);
	}
",non-flaky,5
95726,togglz_togglz,DefaultFeatureManagerTest.testIsActiveUsingDefaultFeatureState,"    @Test
    public void testIsActiveUsingDefaultFeatureState() {
        FeatureProvider featureProvider = mock(FeatureProvider.class);
        FeatureMetaData featureMetaData = mock(FeatureMetaData.class);
        when(featureMetaData.getDefaultFeatureState()).thenReturn(new FeatureState(MyFeatures.NOT_STORED_FEATURE, true));
        when(featureProvider.getMetaData(MyFeatures.NOT_STORED_FEATURE)).thenReturn(featureMetaData);

        FeatureManager manager = new FeatureManagerBuilder()
            .featureEnum(MyFeatures.class)
            .stateRepository(repository)
            .featureProvider(featureProvider)
            .userProvider(featureUserProvider)
            .build();

        assertEquals(true, manager.isActive(MyFeatures.NOT_STORED_FEATURE));

    }
",non-flaky,5
137127,spring-projects_spring-framework,AbstractMethodMetadataTests.isOverridableWhenNonOverridableReturnsFalse,"	@Test
	public void isOverridableWhenNonOverridableReturnsFalse() {
		assertThat(getTagged(WithStaticMethod.class).isOverridable()).isFalse();
		assertThat(getTagged(WithFinalMethod.class).isOverridable()).isFalse();
		assertThat(getTagged(WithPrivateMethod.class).isOverridable()).isFalse();
	}
",non-flaky,5
91445,strapdata_elassandra,SuiteScopeClusterIT.testReproducible,"    @Test
    public void testReproducible() throws IOException {
        if (ITER++ == 0) {
            CLUSTER_SEED = cluster().seed();
            for (int i = 0; i < SEQUENCE.length; i++) {
                SEQUENCE[i] = randomLong();
            }
        } else {
            assertEquals(CLUSTER_SEED, Long.valueOf(cluster().seed()));
            for (int i = 0; i < SEQUENCE.length; i++) {
                assertThat(SEQUENCE[i], equalTo(randomLong()));
            }
        }
    }
",non-flaky,5
112654,tbsalling_aismessages,PositionReportClassAScheduledTest.canDecode,"    @Test
    public void canDecode() {
        AISMessage aisMessage = AISMessage.create(NMEAMessage.fromString(""!AIVDM,1,1,,A,13@nePh01>PjcO4PGReoJEmL0HJg,0*67""));

        System.out.println(aisMessage.toString());

        assertEquals(AISMessageType.PositionReportClassAScheduled, aisMessage.getMessageType());
        assertEquals((Integer) 0, aisMessage.getRepeatIndicator());
        PositionReportClassAScheduled message = (PositionReportClassAScheduled) aisMessage;
        assertEquals(MMSI.valueOf(219000195), message.getSourceMmsi());
        assertEquals(NavigationStatus.UnderwayUsingEngine, message.getNavigationStatus());
        assertEquals((Integer) 0, message.getRateOfTurn());
        assertEquals((Float) 7.8f, message.getSpeedOverGround());
        assertTrue(message.getPositionAccuracy());
        assertEquals(Float.valueOf(56.56692f), message.getLatitude());
        assertEquals((Integer) 33940151, message.getRawLatitude());
        assertEquals(Float.valueOf(11.071096f), message.getLongitude());
        assertEquals((Integer) 6642658, message.getRawLongitude());
        assertEquals(Float.valueOf(189.7f), message.getCourseOverGround());
        assertEquals((Integer) 1897, message.getRawCourseOverGround());
        assertEquals((Integer) 46, message.getSecond());
        assertEquals((Integer) 186, message.getTrueHeading());
        assertEquals(ManeuverIndicator.NotAvailable, message.getSpecialManeuverIndicator());
        assertFalse(message.getRaimFlag());
    }
",non-flaky,5
86120,graylog2_graylog2-server,EventDefinitionFacadeTest.listExcerpts,"    @Test
    public void listExcerpts() {
        final Set<EntityExcerpt> excerpts = facade.listEntityExcerpts();
        final EntityExcerpt excerpt = excerpts.iterator().next();
        assertThat(excerpt.title()).isEqualTo(""title"");
        assertThat(excerpt.id()).isEqualTo(ModelId.of(""5d4032513d2746703d1467f6""));
        assertThat(excerpt.type()).isEqualTo(ModelTypes.EVENT_DEFINITION_V1);
    }
",non-flaky,5
89321,apache_samza,TestKafkaSystemConsumer.testConsumerRegisterOlderOffsetOfTheSamzaSSP,"  @Test
  public void testConsumerRegisterOlderOffsetOfTheSamzaSSP() {

    KafkaSystemConsumer consumer = createConsumer(FETCH_THRESHOLD_MSGS, FETCH_THRESHOLD_BYTES);

    SystemStreamPartition ssp0 = new SystemStreamPartition(TEST_SYSTEM, TEST_STREAM, new Partition(0));
    SystemStreamPartition ssp1 = new SystemStreamPartition(TEST_SYSTEM, TEST_STREAM, new Partition(1));
    SystemStreamPartition ssp2 = new SystemStreamPartition(TEST_SYSTEM, TEST_STREAM, new Partition(2));

    consumer.register(ssp0, ""0"");
    consumer.register(ssp0, ""5"");
    consumer.register(ssp1, ""2"");
    consumer.register(ssp1, ""3"");
    consumer.register(ssp2, ""0"");

    assertEquals(""0"", consumer.topicPartitionsToOffset.get(KafkaSystemConsumer.toTopicPartition(ssp0)));
    assertEquals(""2"", consumer.topicPartitionsToOffset.get(KafkaSystemConsumer.toTopicPartition(ssp1)));
    assertEquals(""0"", consumer.topicPartitionsToOffset.get(KafkaSystemConsumer.toTopicPartition(ssp2)));
  }
",non-flaky,5
95687,togglz_togglz,ArchaiusStateRepositoryTest.shouldReturnNullWhenStateDoesntExist,"    @Test
    public void shouldReturnNullWhenStateDoesntExist() {

        final FeatureState state = repository.getFeatureState(TestFeature.F1);

        assertNull(state);
    }
",non-flaky,5
98031,vert-x3_vertx-mongo-client,MongoClientUpdateResultTest.testMongoUpdateResultEquality,"  @Test
  public void testMongoUpdateResultEquality() {
    logicallyUnequal();

    logicallyEqual();
  }
",non-flaky,5
156122,soot-oss_soot,AbstractLambdaMetaFactoryCGTest.inheritedMethodRef,"  @Test
  public void inheritedMethodRef() {
    String testClass = ""soot.lambdaMetaFactory.InheritedMethodRef"";

    final SootMethod target
        = prepareTarget(methodSigFromComponents(testClass, TEST_METHOD_RET, TEST_METHOD_NAME), testClass);

    final CallGraph cg = Scene.v().getCallGraph();

    final String referencedMethodName = ""superMethod"";

    final String metaFactoryClass = getMetaFactoryNameLambda(testClass, TEST_METHOD_NAME);

    final SootMethod bootstrap = Scene.v()
        .getMethod(methodSigFromComponents(metaFactoryClass, ""java.util.function.Supplier"", ""bootstrap$"", testClass));
    final SootMethod metaFactoryConstructor
        = Scene.v().getMethod(methodSigFromComponents(metaFactoryClass, ""void"", ""<init>"", testClass));
    final SootMethod get = Scene.v().getMethod(methodSigFromComponents(metaFactoryClass, ""java.lang.Object"", ""get""));
    final SootMethod referencedMethod
        = Scene.v().getMethod(methodSigFromComponents(""soot.lambdaMetaFactory.Super"", ""int"", referencedMethodName));
    final SootMethod lambdaBody
        = Scene.v().getMethod(methodSigFromComponents(testClass, ""java.lang.Integer"", ""lambda$main$0""));

    final List<Edge> edgesFromTarget = newArrayList(cg.edgesOutOf(target));

    assertTrue(""There should be an edge from main to the bootstrap method of the synthetic LambdaMetaFactory"",
        edgesFromTarget.stream().anyMatch(e -> e.tgt().equals(bootstrap) && e.isStatic()));
    assertTrue(""There should be an edge to the constructor of the LambdaMetaFactory in the bootstrap method"",
        newArrayList(cg.edgesOutOf(bootstrap)).stream()
            .anyMatch(e -> e.tgt().equals(metaFactoryConstructor) && e.isSpecial()));
    assertTrue(
        ""There should be an interface invocation on the synthetic LambdaMetaFactory's implementation of the functional interface in the main method"",
        edgesFromTarget.stream().anyMatch(e -> e.getTgt().equals(get) && e.kind() == Kind.INTERFACE));
    //Call is from <soot.lambdaMetaFactory.InheritedMethodRef$lambda_main_0__1
    //to           <soot.lambdaMetaFactory.InheritedMethodRef: java.lang.Integer lambda$main$0()>
    //As such, it needs to be a virtual call.
    assertTrue(
        ""There should be a virtual call to the lambda body implementation in the generated functional interface implementation of the synthetic LambdaMetaFactory"",
        newArrayList(cg.edgesOutOf(get)).stream().anyMatch(e -> e.getTgt().equals(lambdaBody) && e.isVirtual()));
    assertTrue(""There should be a special call to the referenced method"", newArrayList(cg.edgesOutOf(lambdaBody)).stream()
        .anyMatch(e -> e.getTgt().equals(referencedMethod) && e.isSpecial()));

    validateAllBodies(target.getDeclaringClass(), bootstrap.getDeclaringClass());
  }
",non-flaky,5
30930,camunda-cloud_zeebe,MsgPackReadingExceptionTest.shouldNotReadInvalidSequence,"  @Test
  public void shouldNotReadInvalidSequence() {
    // given
    reader.wrap(NEVER_USED_BUF, 0, NEVER_USED_BUF.capacity());

    // then
    exception.expect(MsgpackReaderException.class);
    exception.expectMessage(expectedExceptionMessage);

    // when
    codeUnderTest.accept(reader);
  }
",non-flaky,5
135025,undertow-io_undertow,Http2ClientTestCase.completed,"    @Test
    public void testPostRequest() throws Exception {
        //
        final UndertowClient client = createClient();
        final String postMessage = ""This is a post request"";

        final List<String> responses = new CopyOnWriteArrayList<>();
        final CountDownLatch latch = new CountDownLatch(10);
        final ClientConnection connection = client.connect(ADDRESS, worker, new UndertowXnioSsl(worker.getXnio(), OptionMap.EMPTY, DefaultServer.getClientSSLContext()), DefaultServer.getBufferPool(), OptionMap.create(UndertowOptions.ENABLE_HTTP2, true)).get();
        try {
            connection.getIoThread().execute(new Runnable() {
                @Override
                public void run() {
                    for (int i = 0; i < 10; i++) {
                        final ClientRequest request = new ClientRequest().setMethod(Methods.POST).setPath(POST);
                        request.getRequestHeaders().put(Headers.HOST, DefaultServer.getHostAddress());
                        request.getRequestHeaders().put(Headers.TRANSFER_ENCODING, ""chunked"");
                        connection.sendRequest(request, new ClientCallback<ClientExchange>() {
                            @Override
                            public void completed(ClientExchange result) {
                                new StringWriteChannelListener(postMessage).setup(result.getRequestChannel());
                                result.setResponseListener(new ClientCallback<ClientExchange>() {
                                    @Override
                                    public void completed(ClientExchange result) {
                                        new StringReadChannelListener(DefaultServer.getBufferPool()) {

                                            @Override
                                            protected void stringDone(String string) {
                                                responses.add(string);
                                                latch.countDown();
                                            }

                                            @Override
                                            protected void error(IOException e) {
                                                e.printStackTrace();
                                                latch.countDown();
                                            }
                                        }.setup(result.getResponseChannel());
                                    }
",non-flaky,5
137072,spring-projects_spring-framework,PropertiesMarshallerTests.metadataIsWrittenDeterministically,"	@Test
	public void metadataIsWrittenDeterministically() throws IOException {
		CandidateComponentsMetadata metadata = new CandidateComponentsMetadata();
		metadata.add(createItem(""com.b"", ""type""));
		metadata.add(createItem(""com.c"", ""type""));
		metadata.add(createItem(""com.a"", ""type""));

		ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
		PropertiesMarshaller.write(metadata, outputStream);
		String contents = new String(outputStream.toByteArray(), StandardCharsets.ISO_8859_1);
		assertThat(contents.split(System.lineSeparator())).containsExactly(""com.a=type"", ""com.b=type"", ""com.c=type"");
	}
",non-flaky,5
60865,apache_druid,RedisCacheConfigTest.testClusterPriority,"  @Test
  public void testClusterPriority() throws IOException
  {
    ObjectMapper mapper = new ObjectMapper();
    RedisCacheConfig fromJson = mapper.readValue(""{\""expiration\"": 1000,""
                                                 + ""\""cluster\"": {""
                                                 + ""\""nodes\"": \""127.0.0.1:6379\""""
                                                 + ""},""
                                                 + ""\""host\"": \""127.0.0.1\"",""
                                                 + ""\""port\"": 6379""
                                                 + ""}"", RedisCacheConfig.class);

    try (Cache cache = RedisCacheFactory.create(fromJson)) {
      Assert.assertTrue(cache instanceof RedisClusterCache);
    }
  }
",non-flaky,5
135762,Netflix_Hystrix,HystrixPluginsTest.testCommandExecutionHookDefaultImpl,"    /*    @Test
    public void testCommandExecutionHookDefaultImpl() {
        HystrixCommandExecutionHook impl = HystrixPlugins.getInstance().getCommandExecutionHook();
        assertTrue(impl instanceof HystrixCommandExecutionHookDefault);
    }
",non-flaky,5
43110,trinodb_trino,BaseConnectorSmokeTest.testSelect,"    @Test
    public void testSelect()
    {
        assertQuery(""SELECT name FROM region"");
    }
",non-flaky,5
160402,ConsenSys_teku,ChainDataProviderTest.validatorParameterToIndex_shouldThrowBadRequestExceptionWhenIndexInvalid,"  @Test
  public void validatorParameterToIndex_shouldThrowBadRequestExceptionWhenIndexInvalid() {
    final ChainDataProvider provider =
        new ChainDataProvider(spec, recentChainData, combinedChainDataClient);
    assertThrows(BadRequestException.class, () -> provider.validatorParameterToIndex(""a""));
  }
",non-flaky,5
60931,apache_druid,BaseAveragerTest.testAddElement,"  @Test
  public void testAddElement()
  {
    BaseAverager<Integer, Integer> avg = new TestAverager(Integer.class, 3, ""test"", ""field"", 1);
    Object[] buckets = avg.getBuckets();

    avg.addElement(Collections.singletonMap(""field"", 1), Collections.emptyMap());
    Assert.assertEquals(1, buckets[0]);
    Assert.assertNull(buckets[1]);
    Assert.assertNull(buckets[2]);

    avg.addElement(Collections.singletonMap(""field"", 2), Collections.emptyMap());
    Assert.assertEquals(1, buckets[0]);
    Assert.assertEquals(2, buckets[1]);
    Assert.assertNull(buckets[2]);

    avg.addElement(Collections.singletonMap(""field"", 3), Collections.emptyMap());
    Assert.assertEquals(1, buckets[0]);
    Assert.assertEquals(2, buckets[1]);
    Assert.assertEquals(3, buckets[2]);

    avg.addElement(Collections.singletonMap(""field"", 4), Collections.emptyMap());
    Assert.assertEquals(4, buckets[0]);
    Assert.assertEquals(2, buckets[1]);
    Assert.assertEquals(3, buckets[2]);
  }
",non-flaky,5
258,apache_hadoop,TestMetricsSystemImpl.testInitFirstVerifyCallBacks,"@Test
public void testInitFirstVerifyCallBacks() throws Exception {
    DefaultMetricsSystem.shutdown();
    new ConfigBuilder().add(""*.period"", 8).add(""test.sink.test.class"", TestSink.class.getName()).add(""test.*.source.filter.exclude"", ""s0"").add(""test.source.s1.metric.filter.exclude"", ""X*"").add(""test.sink.sink1.metric.filter.exclude"", ""Y*"").add(""test.sink.sink2.metric.filter.exclude"", ""Y*"").save(TestMetricsConfig.getTestFilename(""hadoop-metrics2-test""));
    MetricsSystemImpl ms = new MetricsSystemImpl(""Test"");
    ms.start();
    ms.register(""s0"", ""s0 desc"", new TestSource(""s0rec""));
    TestSource s1 = ms.register(""s1"", ""s1 desc"", new TestSource(""s1rec""));
    s1.c1.incr();
    s1.xxx.incr();
    s1.g1.set(2);
    s1.yyy.incr(2);
    s1.s1.add(0);
    MetricsSink sink1 = mock(MetricsSink.class);
    MetricsSink sink2 = mock(MetricsSink.class);
    ms.registerSink(""sink1"", ""sink1 desc"", sink1);
    ms.registerSink(""sink2"", ""sink2 desc"", sink2);
    ms.publishMetricsNow();
    try {
        verify(sink1, timeout(200).times(2)).putMetrics(r1.capture());
        verify(sink2, timeout(200).times(2)).putMetrics(r2.capture());
    } finally {
        ms.stop();
        ms.shutdown();
    }
    List<MetricsRecord> mr1 = r1.getAllValues();
    List<MetricsRecord> mr2 = r2.getAllValues();
    checkMetricsRecords(mr1);
    assertEquals(""output"", mr1, mr2);
}",unordered collections,3
175757,GoogleCloudPlatform_google-cloud-eclipse,GcpProjectQueryJobTest.testNullCredential,"  @Test(expected = NullPointerException.class)
  public void testNullCredential() {
    new GcpProjectQueryJob(null /* credential */, projectRepository, projectSelector,
        dataBindingContext, isLatestQueryJob);
  }
",non-flaky,5
43036,trinodb_trino,BaseDynamicPartitionPruningTest.testSemiJoinWithNonSelectiveBuildSide,"    @Test(timeOut = 30_000)
    public void testSemiJoinWithNonSelectiveBuildSide()
    {
        @Language(""SQL"") String selectQuery = ""SELECT * FROM partitioned_lineitem WHERE suppkey IN (SELECT suppkey FROM supplier)"";
        ResultWithQueryId<MaterializedResult> result = getDistributedQueryRunner().executeWithQueryId(
                getSession(),
                selectQuery);
        MaterializedResult expected = computeActual(withDynamicFilteringDisabled(), selectQuery);
        assertEqualsIgnoreOrder(result.getResult(), expected);

        OperatorStats probeStats = searchScanFilterAndProjectOperatorStats(result.getQueryId(), getQualifiedTableName(PARTITIONED_LINEITEM));
        // Probe-side is fully scanned
        assertEquals(probeStats.getInputPositions(), LINEITEM_COUNT);

        DynamicFiltersStats dynamicFiltersStats = getDynamicFilteringStats(result.getQueryId());
        assertEquals(dynamicFiltersStats.getTotalDynamicFilters(), 1L);
        assertEquals(dynamicFiltersStats.getLazyDynamicFilters(), 1L);
        assertEquals(dynamicFiltersStats.getReplicatedDynamicFilters(), 0L);
        assertEquals(dynamicFiltersStats.getDynamicFiltersCompleted(), 1L);

        DynamicFilterDomainStats domainStats = getOnlyElement(dynamicFiltersStats.getDynamicFilterDomainStats());
        assertThat(domainStats.getSimplifiedDomain())
                .isEqualTo(getSimplifiedDomainString(1L, 100L, 100, BIGINT));
    }
",non-flaky,5
28,apache_hadoop,TestDFSIO.testReadSkip,"@Test
public void testReadSkip() throws Exception {
    FileSystem fs = cluster.getFileSystem();
    long tStart = System.currentTimeMillis();
    bench.getConf().setLong(""test.io.skip.size"", 1);
    bench.randomReadTest(fs);
    long execTime = System.currentTimeMillis() - tStart;
    bench.analyzeResult(fs, TestType.TEST_TYPE_READ_SKIP, execTime);
}",test order dependency,4
156048,jReddit_jReddit,KindTest.testMatchSuccess,"    @Test
    public void testMatchSuccess() {
        Assert.assertEquals(Kind.COMMENT, Kind.match(Kind.COMMENT.value()));
    }
",non-flaky,5
104621,apache_pinot,RealtimeClusterIntegrationTest.testDictionaryBasedQueries,"  @Test
  public void testDictionaryBasedQueries()
      throws Exception {

    // Dictionary columns
    // int
    testDictionaryBasedFunctions(""NASDelay"");

    // long
    testDictionaryBasedFunctions(""AirlineID"");

    // double
    testDictionaryBasedFunctions(""ArrDelayMinutes"");

    // float
    testDictionaryBasedFunctions(""DepDelayMinutes"");

    // Non Dictionary columns
    // int
    testDictionaryBasedFunctions(""ActualElapsedTime"");

    // double
    testDictionaryBasedFunctions(""DepDelay"");

    // float
    testDictionaryBasedFunctions(""ArrDelay"");
  }
",non-flaky,5
113786,salesforce_reactive-grpc,ReactivePublisherBackpressureOnReadyHandlerTest.exceptionInOnNextCancelsUpstreamSubscription,"    @Test
    public void exceptionInOnNextCancelsUpstreamSubscription() {
        ClientCallStreamObserver<Object> obs = mock(ClientCallStreamObserver.class);
        doThrow(new IllegalStateException(""won't be propagated to handler caller"")).when(obs).onNext(any());
        ReactivePublisherBackpressureOnReadyHandlerClient<Object> handler = new ReactivePublisherBackpressureOnReadyHandlerClient<Object>(obs);
        Subscription sub = mock(Subscription.class);
        handler.onSubscribe(sub);
        
        handler.onNext(new Object());
        verify(obs).cancel(anyString(), any(Throwable.class));
        verify(obs).onError(any(Throwable.class));
    }
",non-flaky,5
94726,ktuukkan_marine-api,SpeedOverGroundTest.largeValueIsNotCorrect,"    @Test
    public void largeValueIsNotCorrect() {
        assertFalse(SpeedOverGround.isCorrect(1100));
    }
",non-flaky,5
156407,apache_commons-lang,FastDateFormatTest.testCheckDefaults,"    @Test
    public void testCheckDefaults() {
        final FastDateFormat format = FastDateFormat.getInstance();
        final FastDateFormat medium = FastDateFormat.getDateTimeInstance(FastDateFormat.SHORT, FastDateFormat.SHORT);
        assertEquals(medium, format);

        final SimpleDateFormat sdf = new SimpleDateFormat();
        assertEquals(sdf.toPattern(), format.getPattern());

        assertEquals(Locale.getDefault(), format.getLocale());
        assertEquals(TimeZone.getDefault(), format.getTimeZone());
    }
",non-flaky,5
94647,square_okhttp,ConnectionSpecSelectorTest.retryableSSLHandshakeException,"  @Test
  public void retryableSSLHandshakeException() throws Exception {
    ConnectionSpecSelector connectionSpecSelector =
        createConnectionSpecSelector(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS);
    SSLSocket socket = createSocketWithEnabledProtocols(TlsVersion.TLS_1_1, TlsVersion.TLS_1_0);
    connectionSpecSelector.configureSecureSocket(socket);

    boolean retry = connectionSpecSelector.connectionFailed(RETRYABLE_EXCEPTION);
    assertTrue(retry);
    socket.close();
  }
",non-flaky,5
133995,CorfuDB_CorfuDB,CorfuServerParamsTest.testEquals,"    @Test
    public void testEquals() {
        final int port = 9000;

        CorfuServerParams p1 = CorfuServerParams.serverParamsBuilder()
                .clusterName(""test-cluster"")
                .port(port)
                .logLevel(Level.TRACE)
                .mode(CorfuServer.Mode.CLUSTER)
                .persistence(CorfuServer.Persistence.DISK)
                .stopTimeout(Duration.ofSeconds(123))
                .serverVersion(""1.0.0"")
                .build();

        CorfuServerParams p2 = CorfuServerParams.serverParamsBuilder()
                .clusterName(""test-cluster"")
                .port(port)
                .logLevel(Level.WARN)
                .mode(CorfuServer.Mode.CLUSTER)
                .persistence(CorfuServer.Persistence.DISK)
                .stopTimeout(Duration.ofSeconds(555))
                .serverVersion(""1.0.0"")
                .build();

        assertThat(p1).isEqualTo(p2);
    }
",non-flaky,5
21192,androidx_androidx,PreferenceDataStoreTest.testSetGetOnPreference,"    @Test
    public void testSetGetOnPreference() {
        Preference preference = new Preference(mContext);

        preference.setPreferenceDataStore(mDataStore);

        assertEquals(mDataStore, preference.getPreferenceDataStore());
    }
",non-flaky,5
318,apache_hadoop,TestRpcProgramNfs3.testCommit,"  @Test(timeout = 60000)
  public void testCommit() throws Exception {
    HdfsFileStatus status = nn.getRpcServer().getFileInfo(""/tmp/bar"");
    long dirId = status.getFileId();
    int namenodeId = Nfs3Utils.getNamenodeId(config);
    FileHandle handle = new FileHandle(dirId, namenodeId);
    XDR xdr_req = new XDR();
    COMMIT3Request req = new COMMIT3Request(handle, 0, 5);
    req.serialize(xdr_req);

    Channel ch = Mockito.mock(Channel.class);

    // Attempt by an unpriviledged user should fail.
    COMMIT3Response response1 = nfsd.commit(xdr_req.asReadOnlyWrap(),
        ch, 1, securityHandlerUnpriviledged,
        new InetSocketAddress(""localhost"", 1234));
    assertEquals(""Incorrect return code:"", Nfs3Status.NFS3ERR_ACCES,
        response1.getStatus());

    // Attempt by a priviledged user should pass.
    COMMIT3Response response2 = nfsd.commit(xdr_req.asReadOnlyWrap(),
        ch, 1, securityHandler,
        new InetSocketAddress(""localhost"", 1234));
    assertEquals(""Incorrect COMMIT3Response:"", null, response2);
  }
",non-flaky,5
175804,GoogleCloudPlatform_google-cloud-eclipse,ProjectSelectorSelectionChangedListenerTest.testSelectionChanged_doNotRunQueryJobIfCached,"  @Test
  public void testSelectionChanged_doNotRunQueryJobIfCached() throws ProjectRepositoryException {
    GcpProject gcpProject = new GcpProject(""projectName"", ""projectId"");
    initSelectionAndAccountSelector(gcpProject);
    gcpProject.setAppEngine(AppEngine.withId(""id""));

    listener.selectionChanged(event);
    assertNull(listener.latestQueryJob);
    verify(projectRepository, never()).getAppEngineApplication(any(Credential.class), anyString());
    verify(projectSelector).clearStatusLink();
  }
",non-flaky,5
114065,aws_aws-sdk-java-v2,EnhancedTypeTest.navigableSetOf_ReturnsRawClassOfNavigableSet_WhenSpecifyingEnhancedType,"    @Test
    public void navigableSetOf_ReturnsRawClassOfNavigableSet_WhenSpecifyingEnhancedType() {
        EnhancedType<NavigableSet<String>> type = EnhancedType.navigableSetOf(EnhancedType.of(String.class));

        assertThat(type.rawClass()).isEqualTo(NavigableSet.class);
        assertThat(type.rawClassParameters()).containsExactly(EnhancedType.of(String.class));
    }
",non-flaky,5
98600,nutzam_nutz,El2Test.speed,"    @Test
    public void speed() {
        SimpleSpeedTest z = new SimpleSpeedTest();
        int num = 4988;
        String elstr = ""num + (i - 1 + 2 - 3 + 4 - 5 + 6 - 7)-z.abc(i)"";
        int i = 5000;
        Context con = Lang.context();
        con.set(""num"", num);
        con.set(""i"", i);
        con.set(""z"", z);
        assertEquals(num + (i - 1 + 2 - 3 + 4 - 5 + 6 - 7) - z.abc(i), El.eval(con, elstr));
    }
",non-flaky,5
137098,spring-projects_spring-framework,AbstractAnnotationMetadataTests.isAnnotatedWhenDoesNotMatchDirectOrMetaAnnotationReturnsFalse,"	@Test
	public void isAnnotatedWhenDoesNotMatchDirectOrMetaAnnotationReturnsFalse() {
		assertThat(get(TestClass.class).isAnnotated(DirectAnnotation1.class.getName())).isFalse();
	}
",non-flaky,5
95668,togglz_togglz,SpringProfileActivationStrategyTest.testGetId,"    @Test
    public void testGetId() {
        assertEquals(SpringProfileActivationStrategy.ID, strategy.getId());
    }
",non-flaky,5
26699,MundaneImmortal_pair-distribution-app,PairTest.testAddDev,"	@Test
	public void testAddDev()  {
		Pair subject = new Pair(Arrays.asList(new Developer(""dev1"")));
		
		assertThat(subject.getDevs(), is(equalTo(Arrays.asList(new Developer(""dev1"")))));
	}
",non-flaky,5
98257,spotify_docker-client,PushPullIT.testPushImageToPrivateAuthedRegistryWithAuth,"  @Test
  public void testPushImageToPrivateAuthedRegistryWithAuth() throws Exception {
    registryContainerId = startAuthedRegistry(client);

    // Push an image to the private registry and check it succeeds
    final String dockerDirectory = Resources.getResource(""dockerDirectory"").getPath();
    client.build(Paths.get(dockerDirectory), LOCAL_IMAGE);
    client.tag(LOCAL_IMAGE, LOCAL_IMAGE_2);
    client.push(LOCAL_IMAGE);

    // Push the same image again under a different user
    final RegistryAuth registryAuth = RegistryAuth.builder()
        .username(LOCAL_AUTH_USERNAME_2)
        .password(LOCAL_AUTH_PASSWORD_2)
        .build();
    client.push(LOCAL_IMAGE_2, registryAuth);

    // We should be able to pull it again
    client.pull(LOCAL_IMAGE);
    client.pull(LOCAL_IMAGE_2);
  }
",non-flaky,5
160366,ConsenSys_teku,SlashingProtectionImporterTest.shouldImportSingleRecord,"  @Test
  public void shouldImportSingleRecord(@TempDir Path tempDir)
      throws URISyntaxException, IOException {
    final File ruleFile = usingResourceFile(""slashProtection.yml"", tempDir);
    final SlashingProtectionImporter importer = new SlashingProtectionImporter(tempDir);
    importer.initialise(ruleFile);
    final Optional<String> maybeError = importer.updateSigningRecord(publicKey, (__) -> {});
    assertThat(maybeError).isEmpty();
    assertThat(tempDir.resolve(pubkey + "".yml"").toFile()).exists();
  }
",non-flaky,5
135746,Netflix_Hystrix,HystrixPropertyTest.testSeries2,"    @Test
    public void testSeries2() {
        HystrixProperty<String> nullValue = Factory.nullProperty();
        HystrixProperty<String> a = Factory.asProperty(nullValue, null);

        @SuppressWarnings(""unchecked"")
        HystrixProperty<String> withDefault = Factory.asProperty(a, nullValue, Factory.asProperty(""b""), nullValue, Factory.asProperty(""c""));
        assertEquals(""b"", withDefault.get());
    }
",non-flaky,5
76760,quarkusio_quarkus,CreateProjectMojoIT.cleanup,"    @AfterEach
    public void cleanup() {
        if (running != null) {
            running.stop();
        }
    }
",non-flaky,5
156103,soot-oss_soot,ResolveFieldInitializersTest.initializedInConstructor,"  @Test
  public void initializedInConstructor() {
    prepareTarget(methodSigFromComponents(TEST_TARGET_CLASS, ""void"", ""<init>""), TEST_TARGET_CLASS);
    SootClass sootClass = Scene.v().getSootClass(""java.util.LinkedList"");
    assertEquals(SootClass.SIGNATURES, sootClass.resolvingLevel());
  }
",non-flaky,5
159674,liquibase_liquibase,AddColumnExecutorTest.autoIncrement,"    @Test
    public void autoIncrement() throws Exception {
        this.statementUnderTest = new AddColumnStatement(null, TABLE_NAME, ""column_name"", ""int"", null, new AutoIncrementConstraint());

        assertCorrect(""ALTER TABLE [dbo].[table_name] ADD [column_name] int auto_increment_clause"", MSSQLDatabase.class);
        assertCorrect(""alter table [table_name] add [column_name] int default autoincrement null"", SybaseASADatabase.class);
        assertCorrect(""alter table [table_name] add [column_name] int identity null"", SybaseDatabase.class);
        assertCorrect(""alter table [table_name] add [column_name] serial"", PostgresDatabase.class, InformixDatabase.class);
        assertCorrect(""not supported. fixme!!"", SQLiteDatabase.class);
        assertCorrectOnRest(""ALTER TABLE [table_name] ADD [column_name] int auto_increment_clause"");
    }
",non-flaky,5
290,apache_hadoop,TestWrites.testCheckCommitLargeFileUpload,"  @Test
  public void testCheckCommitLargeFileUpload() throws IOException {
    DFSClient dfsClient = Mockito.mock(DFSClient.class);
    Nfs3FileAttributes attr = new Nfs3FileAttributes();
    HdfsDataOutputStream fos = Mockito.mock(HdfsDataOutputStream.class);
    Mockito.when(fos.getPos()).thenReturn((long) 0);

    NfsConfiguration conf = new NfsConfiguration();
    conf.setBoolean(NfsConfigKeys.LARGE_FILE_UPLOAD, true);
    OpenFileCtx ctx = new OpenFileCtx(fos, attr, ""/dumpFilePath"", dfsClient,
        new ShellBasedIdMapping(conf), false, conf);

    COMMIT_STATUS ret;

    // Test inactive open file context
    ctx.setActiveStatusForTest(false);
    Channel ch = Mockito.mock(Channel.class);
    ret = ctx.checkCommit(dfsClient, 0, ch, 1, attr, false);
    Assert.assertTrue(ret == COMMIT_STATUS.COMMIT_INACTIVE_CTX);

    ctx.getPendingWritesForTest().put(new OffsetRange(10, 15),
        new WriteCtx(null, 0, 0, 0, null, null, null, 0, false, null));
    ret = ctx.checkCommit(dfsClient, 0, ch, 1, attr, false);
    Assert.assertTrue(ret == COMMIT_STATUS.COMMIT_INACTIVE_WITH_PENDING_WRITE);

    // Test request with non zero commit offset
    ctx.setActiveStatusForTest(true);
    Mockito.when(fos.getPos()).thenReturn((long) 8);
    ctx.setNextOffsetForTest(10);
    COMMIT_STATUS status = ctx.checkCommitInternal(5, null, 1, attr, false);
    Assert.assertTrue(status == COMMIT_STATUS.COMMIT_DO_SYNC);
    // Do_SYNC state will be updated to FINISHED after data sync
    ret = ctx.checkCommit(dfsClient, 5, ch, 1, attr, false);
    Assert.assertTrue(ret == COMMIT_STATUS.COMMIT_FINISHED);
    
    // Test commit sequential writes
    status = ctx.checkCommitInternal(10, ch, 1, attr, false);
    Assert.assertTrue(status == COMMIT_STATUS.COMMIT_SPECIAL_WAIT);
    ret = ctx.checkCommit(dfsClient, 10, ch, 1, attr, false);
    Assert.assertTrue(ret == COMMIT_STATUS.COMMIT_SPECIAL_WAIT);

    // Test commit non-sequential writes
    ConcurrentNavigableMap<Long, CommitCtx> commits = ctx
        .getPendingCommitsForTest();
    Assert.assertTrue(commits.size() == 1);
    ret = ctx.checkCommit(dfsClient, 16, ch, 1, attr, false);
    Assert.assertTrue(ret == COMMIT_STATUS.COMMIT_SPECIAL_SUCCESS);
    Assert.assertTrue(commits.size() == 1);
    
    // Test request with zero commit offset
    commits.remove(new Long(10));
    // There is one pending write [10,15]
    ret = ctx.checkCommitInternal(0, ch, 1, attr, false);
    Assert.assertTrue(ret == COMMIT_STATUS.COMMIT_SPECIAL_WAIT);
    
    ret = ctx.checkCommitInternal(9, ch, 1, attr, false);
    Assert.assertTrue(ret == COMMIT_STATUS.COMMIT_SPECIAL_WAIT);
    Assert.assertTrue(commits.size() == 2);

    // Empty pending writes. nextOffset=10, flushed pos=8
    ctx.getPendingWritesForTest().remove(new OffsetRange(10, 15));
    ret = ctx.checkCommit(dfsClient, 0, ch, 1, attr, false);
    Assert.assertTrue(ret == COMMIT_STATUS.COMMIT_SPECIAL_WAIT);
    
    // Empty pending writes
    ctx.setNextOffsetForTest((long) 8); // flushed pos = 8
    ret = ctx.checkCommit(dfsClient, 0, ch, 1, attr, false);
    Assert.assertTrue(ret == COMMIT_STATUS.COMMIT_FINISHED);
    
  }
",non-flaky,5
97953,ReactiveX_RxJava,ObservableWindowTests.call,"    @Test
    public void testWindow() {
        final ArrayList<List<Integer>> lists = new ArrayList<List<Integer>>();
        Observable.from(1, 2, 3, 4, 5, 6)
                .window(3).map(new Func1<Observable<Integer>, List<Integer>>() {

                    @Override
                    public List<Integer> call(Observable<Integer> o) {
                        return o.toList().toBlockingObservable().single();
                    }
",non-flaky,5
177156,line_armeria,TokenBucketThrottlingStrategyTest.serve1,"    @Test
    public void serve1() throws Exception {
        final WebClient client = WebClient.of(serverRule.httpUri());
        final AggregatedHttpResponse response = client.get(""/http-serve"").aggregate().get();
        assertThat(response.status()).isEqualTo(HttpStatus.OK);

        assertThat(response.headers().contains(HttpHeaderNames.RETRY_AFTER)).isFalse();
        assertThat(response.headers().contains(""RateLimit-Remaining"")).isFalse();
        assertThat(response.headers().contains(""X-RateLimit-Remaining"")).isFalse();
        assertThat(response.headers().contains(""X-Rate-Limit-Remaining"")).isFalse();
        assertThat(response.headers().contains(""RateLimit-Reset"")).isFalse();
        assertThat(response.headers().contains(""X-RateLimit-Reset"")).isFalse();
        assertThat(response.headers().contains(""X-Rate-Limit-Reset"")).isFalse();
        assertThat(response.headers().contains(""RateLimit-Limit"")).isFalse();
        assertThat(response.headers().contains(""X-RateLimit-Limit"")).isFalse();
        assertThat(response.headers().contains(""X-Rate-Limit-Limit"")).isFalse();
    }
",non-flaky,5
160405,ConsenSys_teku,ChainDataProviderTest.filteredValidatorsList_shouldFilterByValidatorStatus,"  @Test
  public void filteredValidatorsList_shouldFilterByValidatorStatus() {
    final tech.pegasys.teku.spec.datastructures.state.beaconstate.BeaconState internalState =
        data.randomBeaconState(11);
    final ChainDataProvider provider =
        new ChainDataProvider(spec, recentChainData, combinedChainDataClient);

    assertThat(
            provider.getFilteredValidatorList(
                internalState, emptyList(), Set.of(ValidatorStatus.pending_initialized)))
        .hasSize(11);
    assertThat(
            provider.getFilteredValidatorList(
                internalState, emptyList(), Set.of(ValidatorStatus.active_ongoing)))
        .hasSize(0);
  }
",non-flaky,5
156165,soot-oss_soot,TypingMinimizeTest.testAbstractInterfaceTyping,"  @Test
  public void testAbstractInterfaceTyping() {

    List<Typing> typingList = new ArrayList<>();

    Local x1 = new JimpleLocal(""$x1"", null);

    Typing typing1 = new Typing(Arrays.asList(x1));
    typing1.set(x1, interfaceType);
    typingList.add(typing1);

    Typing typing2 = new Typing(Arrays.asList(x1));
    typing2.set(x1, abstractClass_Interface2Type);
    typingList.add(typing2);

    Typing typing3 = new Typing(Arrays.asList(x1));
    typing3.set(x1, class_AbstractInterfaceClassType);
    typingList.add(typing3);

    getTypingStrategy().minimize(typingList, new BytecodeHierarchy());

    assertEquals(1, typingList.size());
    assertThat(typingList, containsInAnyOrder(typing3));
  }
",non-flaky,5
60926,apache_druid,LongSumAveragerTest.testComputeResult,"  @Test
  public void testComputeResult()
  {
    BaseAverager<Number, Long> avg = new LongSumAverager(3, ""test"", ""field"", 1);

    Assert.assertEquals(0.0, avg.computeResult(), 0.0);

    avg.addElement(Collections.singletonMap(""field"", 3L), new HashMap<>());
    Assert.assertEquals(3.0, avg.computeResult(), 0.0);

    avg.addElement(Collections.singletonMap(""field"", 3L), new HashMap<>());
    Assert.assertEquals(6.0, avg.computeResult(), 0.0);

    avg.addElement(Collections.singletonMap(""field"", 3), new HashMap<>());
    Assert.assertEquals(9.0, avg.computeResult(), 0.0);

    avg.addElement(Collections.singletonMap(""field"", 2L), new HashMap<>());
    avg.addElement(Collections.singletonMap(""field"", 2L), new HashMap<>());
    avg.addElement(Collections.singletonMap(""field"", 2L), new HashMap<>());
    Assert.assertEquals(6.0, avg.computeResult(), 0.0);

    avg.skip();
    Assert.assertEquals(4.0, avg.computeResult(), 0.0);
  }
",non-flaky,5
137089,spring-projects_spring-framework,AbstractAnnotationMetadataTests.getSuperClassNameWhenHasSuperClassReturnsName,"	@Test
	public void getSuperClassNameWhenHasSuperClassReturnsName() {
		assertThat(get(TestSubclass.class).getSuperClassName()).isEqualTo(TestClass.class.getName());
		assertThat(get(TestClass.class).getSuperClassName()).isEqualTo(Object.class.getName());
	}
",non-flaky,5
156392,apache_commons-lang,StringUtilsEmptyBlankTest.testIsAllEmpty,"    @Test
    public void testIsAllEmpty() {
        assertTrue(StringUtils.isAllEmpty());
        assertTrue(StringUtils.isAllEmpty(new String[]{}));
        assertTrue(StringUtils.isAllEmpty((String) null));
        assertTrue(StringUtils.isAllEmpty((String[]) null));
        assertFalse(StringUtils.isAllEmpty(null, ""foo""));
        assertFalse(StringUtils.isAllEmpty("""", ""bar""));
        assertFalse(StringUtils.isAllEmpty(""bob"", """"));
        assertFalse(StringUtils.isAllEmpty(""  bob  "", null));
        assertFalse(StringUtils.isAllEmpty("" "", ""bar""));
        assertFalse(StringUtils.isAllEmpty(""foo"", ""bar""));
        assertTrue(StringUtils.isAllEmpty("""", null));
    }
",non-flaky,5
98047,vert-x3_vertx-mongo-client,GridFsTest.testDelete,"  @Test
  public void testDelete() {
    String fileName = createTempFileWithContent((1024 * 3) + 70);

    AtomicReference<MongoGridFsClient> gridFsClient = new AtomicReference<>();

    Promise<MongoGridFsClient> mongoGridFsPromise = Promise.promise();

    mongoClient.createGridFsBucketService(""fs"", mongoGridFsPromise);

    mongoGridFsPromise.future().compose(mongoGridFsClient -> {
      assertNotNull(mongoGridFsClient);
      gridFsClient.set(mongoGridFsClient);
      Promise<Void> dropPromise = Promise.promise();
      mongoGridFsClient.drop(dropPromise);
      return dropPromise.future();
    }).compose(dropped -> {
      Promise<String> uploadPromise = Promise.promise();
      gridFsClient.get().uploadFile(fileName, uploadPromise);
      return uploadPromise.future();
    }).compose(id -> {
      assertNotNull(id);
      Promise<Void> deletePromise = Promise.promise();
      gridFsClient.get().delete(id, deletePromise);
      return deletePromise.future();
    }).onComplete(event -> {
      if (event.succeeded()) {
        testComplete();
      } else {
        fail(event.cause());
      }
    });
    await();
  }
",non-flaky,5
21228,androidx_androidx,ExpandablePreferenceTest.expandablePreference_inCategory_collapsesCorrectly,"    @Test
    public void expandablePreference_inCategory_collapsesCorrectly() {
        PreferenceCategory category = new PreferenceCategory(mContext);

        mScreen.addPreference(category);

        category.setKey(""category"");
        category.setInitialExpandedChildrenCount(1);

        category.addPreference(mPreference1);
        category.addPreference(mPreference2);
        category.addPreference(mPreference3);

        PreferenceGroupAdapter preferenceGroupAdapter = new PreferenceGroupAdapter(mScreen);

        assertEquals(3, preferenceGroupAdapter.getItemCount());

        assertEquals(category, preferenceGroupAdapter.getItem(0));
        assertEquals(mPreference1, preferenceGroupAdapter.getItem(1));
        assertEquals(""Advanced"", preferenceGroupAdapter.getItem(2).getTitle());
        assertEquals(""Preference 2, Preference 3"", preferenceGroupAdapter.getItem(2).getSummary());
    }
",non-flaky,5
94733,ktuukkan_marine-api,Longitude28Test.maxValueIsAvailable,"    @Test
    public void maxValueIsAvailable() {
        assertTrue(Longitude28.isAvailable(180*60*10000));
    }
",non-flaky,5
118720,netty_netty,SocketTest.testTrafficClass,"    @Test
    public void testTrafficClass() throws IOException {
        // IPTOS_THROUGHPUT
        final int value = 0x08;
        socket.setTrafficClass(value);
        assertEquals(value, socket.getTrafficClass());
    }
",non-flaky,5
43113,trinodb_trino,BaseConnectorSmokeTest.testTopN,"    @Test
    public void testTopN()
    {
        assertQuery(""SELECT regionkey FROM nation ORDER BY name LIMIT 3"");
    }
",non-flaky,5
175763,GoogleCloudPlatform_google-cloud-eclipse,DeployPropertyPageTest.testCorrectPanelIsShownForFacetedProject,"  @Test
  public void testCorrectPanelIsShownForFacetedProject() {
    DeployPropertyPage page = new DeployPropertyPage(loginService, googleApiFactory);
    Shell parent = shellTestResource.getShell();
    page.setElement(getProject());
    page.createControl(parent);
    page.setVisible(true);
    Composite preferencePageComposite = (Composite) parent.getChildren()[0];
    for (Control control : preferencePageComposite.getChildren()) {
      if (control instanceof Composite) {
        Composite maybeDeployPageComposite = (Composite) control;
        Layout layout = maybeDeployPageComposite.getLayout();
        if (layout instanceof StackLayout) {
          StackLayout stackLayout = (StackLayout) layout;
          assertThat(stackLayout.topControl, instanceOf(getPanelClass()));
          return;
        }
      }
    }
    fail(""Did not find the deploy preferences panel"");
  }
",non-flaky,5
26698,MundaneImmortal_pair-distribution-app,PairTest.testGetAndSetDevsWithNullValues,"	@Test
	public void testGetAndSetDevsWithNullValues()  {
		Pair subject = new Pair();
		subject.setDevs(Arrays.asList(null, new Developer(""dev2"")));
		
		assertThat(subject.getDevs(), is(equalTo(Arrays.asList(new Developer(""dev2"")))));
	}
",non-flaky,5
104697,apache_pinot,LLCRealtimeClusterIntegrationTest.testAddHLCTableShouldFail,"  @Test(expectedExceptions = IOException.class)
  public void testAddHLCTableShouldFail()
      throws IOException {
    TableConfig tableConfig = new TableConfigBuilder(TableType.REALTIME).setTableName(""testTable"")
        .setStreamConfigs(Collections.singletonMap(""stream.kafka.consumer.type"", ""HIGHLEVEL"")).build();
    sendPostRequest(_controllerRequestURLBuilder.forTableCreate(), tableConfig.toJsonString());
  }
",non-flaky,5
175786,GoogleCloudPlatform_google-cloud-eclipse,AppYamlValidatorTest.testValidateRuntime_ioException,"  @Test
  public void testValidateRuntime_ioException() {
    File nonExisting = new File(""/non/existing/file"");
    IStatus result = AppYamlValidator.validateRuntime(nonExisting);
    assertEquals(IStatus.ERROR, result.getSeverity());
    assertTrue(result.getMessage().startsWith(""Cannot read app.yaml:""));
  }
",non-flaky,5
84612,apache_zookeeper,GetEphemeralsTest.tearDown,"    @AfterEach
    public void tearDown() throws Exception {
        super.tearDown();

        zk.close();
    }
",non-flaky,5
3,eclipse_xtext-core,RequestManagerTest.testRunWriteAfterRead,"@Test
public void testRunWriteAfterRead() {
    final Function1<CancelIndicator, Integer> _function = (CancelIndicator it) -> {
        return Integer.valueOf(this.sharedState.incrementAndGet());
    };
    this.requestManager.<Integer>runRead(_function);
    final Function0<Object> _function_1 = () -> {
        return null;
    };
    final Function2<CancelIndicator, Object, Integer> _function_2 = (CancelIndicator $0,Object $1) -> {
        int _xblockexpression = ((int) (0));
        {
            Assert.assertEquals(1, this.sharedState.get());
            _xblockexpression = this.sharedState.incrementAndGet();
        }
        return Integer.valueOf(_xblockexpression);
    };
    this.requestManager.<Object, Integer>runWrite(_function_1, _function_2).join();
    Assert.assertEquals(2, this.sharedState.get());
}",concurrency,1
112706,hwang-pku_ormlite-core,TransactionManagerTest.call,"	@Test
	public void testTransactionWithinTransaction() throws Exception {
		if (connectionSource == null) {
			return;
		}
		final TransactionManager mgr = new TransactionManager(connectionSource);
		final Dao<Foo, Integer> dao = createDao(Foo.class, true);
		mgr.callInTransaction(new Callable<Void>() {
			@Override
			public Void call() throws Exception {
				testTransactionManager(mgr, null, dao);
				return null;
			}
",non-flaky,5
33717,alibaba_fastjson,JSONPathTest.eq2,"  @Test
  public void eq2() throws Throwable {
    // Arrange
    Object a = null;
    Object b = null;
    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.JSONPath"");
    Method m = c.getDeclaredMethod(""eq"", Reflector.forName(""java.lang.Object""), Reflector.forName(""java.lang.Object""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, a, b);
    // Assert result
    Assert.assertEquals(true, retval);
  }
",non-flaky,5
137157,spring-projects_spring-framework,AnnotationsScannerTests.doWithAnnotations,"	@Test
					public String doWithAnnotations(Object context, int aggregateIndex,
							Object source, Annotation[] annotations) {
						return ""K"";
					}
",non-flaky,5
179510,abel533_Mapper,TestSelect.testDynamicSelectAll,"    @Test
    public void testDynamicSelectAll() {
        SqlSession sqlSession = MybatisHelper.getSqlSession();
        try {
            CountryMapper mapper = sqlSession.getMapper(CountryMapper.class);
            Country country = new Country();
            List<Country> countryList;
            //country.setDynamicTableName123(""country_123"");
            //countryList = mapper.select(country);
            //æ¥è¯¢æ»æ°
            //Assert.assertEquals(2, countryList.size());

            country.setDynamicTableName123(null);
            countryList = mapper.select(country);
            //æ¥è¯¢æ»æ°
            Assert.assertEquals(183, countryList.size());
        } finally {
            sqlSession.close();
        }
    }
",non-flaky,5
112710,hwang-pku_ormlite-core,TransactionManagerTest.call,"	@Test
	public void testNestedTransactionsReleaseFails() throws Exception {
		final ConnectionSource connectionSource = createMock(ConnectionSource.class);
		DatabaseConnection conn = createMock(DatabaseConnection.class);
		expect(conn.isAutoCommitSupported()).andReturn(true).times(2);
		expect(conn.isAutoCommit()).andReturn(true).times(2);
		conn.setAutoCommit(false);
		expectLastCall().times(2);
		Savepoint savePoint = createMock(Savepoint.class);
		expect(savePoint.getSavepointName()).andReturn(""name"").anyTimes();
		expect(conn.setSavePoint(isA(String.class))).andReturn(savePoint).times(2);
		expect(connectionSource.getDatabaseType()).andReturn(databaseType).times(2);
		expect(connectionSource.getReadWriteConnection(null)).andReturn(conn).times(2);
		expect(connectionSource.saveSpecialConnection(conn)).andReturn(true);
		expect(connectionSource.saveSpecialConnection(conn)).andReturn(false);
		// should only get one of these because we only returned save once
		connectionSource.clearSpecialConnection(conn);
		conn.releaseSavePoint(savePoint);
		expectLastCall().andThrow(new SQLException(""testing the release to fail""));
		conn.rollback(savePoint);
		expectLastCall().times(2);
		connectionSource.releaseConnection(conn);
		expectLastCall().times(2);
		conn.setAutoCommit(true);
		expectLastCall().times(2);

		replay(connectionSource, conn, savePoint);
		try {
			TransactionManager.callInTransaction(connectionSource, new Callable<Void>() {
				@Override
				public Void call() throws SQLException {
					TransactionManager.callInTransaction(connectionSource, new Callable<Void>() {
						@Override
						public Void call() {
							return null;
						}
",non-flaky,5
26740,MundaneImmortal_pair-distribution-app,DeveloperTest.testCompareTo,"	@Test
	public void testCompareTo() {
		Developer developer = new Developer(""developerId"");
		Developer developer2 = new Developer(""developerId2"");
		
		assertThat(developer.getId().compareTo(developer2.getId()), is(-1));
		assertThat(developer2.getId().compareTo(developer.getId()), is(1));
		assertThat(developer.getId().compareTo(developer.getId()), is(0));
	}
",non-flaky,5
76715,quarkusio_quarkus,QuarkusCodestartBuildIT.testRunTogetherCodestartsJava,"    @Test
    public void testRunTogetherCodestartsJava() throws Exception {
        generateProjectRunTests(""maven"", ""java"", getExtensionCodestarts());
    }
",non-flaky,5
98263,spotify_docker-client,PushPullIT.testBuildHubPrivateRepoWithAuth,"  @Test
  public void testBuildHubPrivateRepoWithAuth() throws Exception {
    final String dockerDirectory = Resources.getResource(""dockerDirectoryNeedsAuth"").getPath();
    final RegistryAuth registryAuth = RegistryAuth.builder()
        .username(HUB_AUTH_USERNAME2)
        .password(HUB_AUTH_PASSWORD2)
        .build();

    final DefaultDockerClient client = DefaultDockerClient.fromEnv()
        .registryAuth(registryAuth)
        .build();

    client.build(Paths.get(dockerDirectory), ""testauth"", BuildParam.pullNewerImage());
  }
",non-flaky,5
38230,palantir_atlasdb,TextUtilsTest.testEncodeDecodeStringUTF8,"    @Test
    public void testEncodeDecodeStringUTF8() throws Exception {
        String str = ""THIS IS A \u1234 TEST STRING"";
        byte[] bytes = TextUtils.convertStringToBytesUtf8(str);
        assertTrue(Arrays.equals(str.getBytes(""UTF-8""), bytes));
        assertEquals(str, TextUtils.convertBytesToStringUtf8(bytes));
    }
",non-flaky,5
162377,testcontainers_testcontainers-java,TestEnvironmentTest.testCompareVersionGreaterThanSameMajor,"    @Test
    public void testCompareVersionGreaterThanSameMajor() {
        assertTrue(""1.22 > 1.20"", new ComparableVersion(""1.22"").compareTo(new ComparableVersion(""1.20"")) == 1);
    }
",non-flaky,5
156431,apache_commons-lang,DateUtilsFragmentTest.testInvalidFragmentWithDate,"    @Test
    public void testInvalidFragmentWithDate() {
        assertThrows(IllegalArgumentException.class, () -> DateUtils.getFragmentInMilliseconds(aDate, 0));
        assertThrows(IllegalArgumentException.class, () -> DateUtils.getFragmentInSeconds(aDate, 0));
        assertThrows(IllegalArgumentException.class, () -> DateUtils.getFragmentInMinutes(aDate, 0));
        assertThrows(IllegalArgumentException.class, () -> DateUtils.getFragmentInHours(aDate, 0));
        assertThrows(IllegalArgumentException.class, () -> DateUtils.getFragmentInDays(aDate, 0));
    }
",non-flaky,5
104630,apache_pinot,OfflineClusterIntegrationTest.testInvalidTableConfig,"  @Test
  public void testInvalidTableConfig() {
    TableConfig tableConfig = new TableConfigBuilder(TableType.OFFLINE).setTableName(""badTable"").build();
    ObjectNode tableConfigJson = (ObjectNode) tableConfig.toJsonNode();
    // Remove a mandatory field
    tableConfigJson.remove(TableConfig.VALIDATION_CONFIG_KEY);
    try {
      sendPostRequest(_controllerRequestURLBuilder.forTableCreate(), tableConfigJson.toString());
      fail();
    } catch (IOException e) {
      // Should get response code 400 (BAD_REQUEST)
      assertTrue(e.getMessage().startsWith(""Server returned HTTP response code: 400""));
    }
  }
",non-flaky,5
84651,apache_zookeeper,ZooKeeperTest.testParseWithExtraSpaces,"    @Test
    public void testParseWithExtraSpaces() throws Exception {
        final ZooKeeper zk = createClient();
        ZooKeeperMain zkMain = new ZooKeeperMain(zk);
        String cmdstring = ""      ls       /  "";
        zkMain.cl.parseCommand(cmdstring);
        assertEquals(zkMain.cl.getNumArguments(), 2, ""Spaces also considered as characters"");
        assertEquals(zkMain.cl.getCmdArgument(0), ""ls"", ""ls is not taken as first argument"");
        assertEquals(zkMain.cl.getCmdArgument(1), ""/"", ""/ is not taken as second argument"");
    }
",non-flaky,5
78295,apache_beam,SideInputHandlerTest.testMultipleSideInputs,"  @Test
  public void testMultipleSideInputs() {
    SideInputHandler sideInputHandler =
        new SideInputHandler(
            ImmutableList.of(view1, view2), InMemoryStateInternals.<Void>forKey(null));

    // two windows that we'll later use for adding elements/retrieving side input
    IntervalWindow firstWindow = new IntervalWindow(new Instant(0), new Instant(WINDOW_MSECS_1));

    // add value for view1 in the first window
    sideInputHandler.addSideInputValue(
        view1,
        valuesInWindow(
            materializeValuesFor(View.asIterable(), ""Hello""), new Instant(0), firstWindow));

    assertThat(sideInputHandler.get(view1, firstWindow), contains(""Hello""));

    // view2 should not have any data
    assertFalse(sideInputHandler.isReady(view2, firstWindow));

    // also add some data for view2
    sideInputHandler.addSideInputValue(
        view2,
        valuesInWindow(
            materializeValuesFor(View.asIterable(), ""Salut""), new Instant(0), firstWindow));

    assertTrue(sideInputHandler.isReady(view2, firstWindow));
    assertThat(sideInputHandler.get(view2, firstWindow), contains(""Salut""));

    // view1 should not be affected by that
    assertThat(sideInputHandler.get(view1, firstWindow), contains(""Hello""));
  }
",non-flaky,5
114016,apache_struts,CdiObjectFactoryTest.testGetBean,"    @Test
    public void testGetBean() throws Exception {
        final CdiObjectFactory cdiObjectFactory = new CdiObjectFactory();
        FooConsumer fooConsumer = (FooConsumer) cdiObjectFactory.buildBean(FooConsumer.class.getCanonicalName(), null, false);
        assertNotNull(fooConsumer);
        assertNotNull(fooConsumer.fooService);
    }
",non-flaky,5
78269,apache_beam,LateDataUtilsTest.garbageCollectionTimeAfterEndOfGlobalWindowWithLateness,"  @Test
  public void garbageCollectionTimeAfterEndOfGlobalWindowWithLateness() {
    FixedWindows windowFn = FixedWindows.of(Duration.standardMinutes(5));
    Duration allowedLateness = Duration.millis(Long.MAX_VALUE);
    WindowingStrategy<?, ?> strategy =
        WindowingStrategy.globalDefault()
            .withWindowFn(windowFn)
            .withAllowedLateness(allowedLateness);

    IntervalWindow window = windowFn.assignWindow(new Instant(-100));
    assertThat(
        window.maxTimestamp().plus(allowedLateness),
        Matchers.greaterThan(GlobalWindow.INSTANCE.maxTimestamp()));
    assertThat(
        LateDataUtils.garbageCollectionTime(window, strategy),
        equalTo(GlobalWindow.INSTANCE.maxTimestamp()));
  }
",non-flaky,5
114015,apache_struts,CdiObjectFactoryTest.testFindBeanManager,"    @Test
    public void testFindBeanManager() throws Exception {
        assertNotNull(new CdiObjectFactory().findBeanManager());
    }
",non-flaky,5
287,apache_hadoop,TestReaddir.testReaddirPlus,"  @Test
  public void testReaddirPlus() throws IOException {
    // Get inodeId of /tmp
    HdfsFileStatus status = nn.getRpcServer().getFileInfo(testdir);
    long dirId = status.getFileId();
    int namenodeId = Nfs3Utils.getNamenodeId(config);
    
    // Create related part of the XDR request
    XDR xdr_req = new XDR();
    FileHandle handle = new FileHandle(dirId, namenodeId);
    handle.serialize(xdr_req);
    xdr_req.writeLongAsHyper(0); // cookie
    xdr_req.writeLongAsHyper(0); // verifier
    xdr_req.writeInt(100); // dirCount
    xdr_req.writeInt(1000); // maxCount

    READDIRPLUS3Response responsePlus = nfsd.readdirplus(xdr_req
        .asReadOnlyWrap(), securityHandler, new InetSocketAddress(""localhost"",
        1234));
    List<EntryPlus3> direntPlus = responsePlus.getDirListPlus().getEntries();
    assertTrue(direntPlus.size() == 5); // including dot, dotdot

    // Test start listing from f2
    status = nn.getRpcServer().getFileInfo(testdir + ""/f2"");
    long f2Id = status.getFileId();

    // Create related part of the XDR request
    xdr_req = new XDR();
    handle = new FileHandle(dirId, namenodeId);
    handle.serialize(xdr_req);
    xdr_req.writeLongAsHyper(f2Id); // cookie
    xdr_req.writeLongAsHyper(0); // verifier
    xdr_req.writeInt(100); // dirCount
    xdr_req.writeInt(1000); // maxCount

    responsePlus = nfsd.readdirplus(xdr_req.asReadOnlyWrap(), securityHandler,
        new InetSocketAddress(""localhost"", 1234));
    direntPlus = responsePlus.getDirListPlus().getEntries();
    assertTrue(direntPlus.size() == 1);
    EntryPlus3 entryPlus = direntPlus.get(0);
    assertTrue(entryPlus.getName().equals(""f3""));

    // When the cookie is deleted, list starts over no including dot, dotdot
    hdfs.delete(new Path(testdir + ""/f2""), false);

    responsePlus = nfsd.readdirplus(xdr_req.asReadOnlyWrap(), securityHandler,
        new InetSocketAddress(""localhost"", 1234));
    direntPlus = responsePlus.getDirListPlus().getEntries();
    assertTrue(direntPlus.size() == 2); // No dot, dotdot
  }
",non-flaky,5
159682,liquibase_liquibase,AddUniqueConstraintExecutorTest.execute_noConstraintName,"    @Test
    public void execute_noConstraintName() throws Exception {
        this.statementUnderTest = new AddUniqueConstraintStatement(null, null, TABLE_NAME, new ColumnConfig[] { new ColumnConfig().setName(COLUMN_NAME)}, null);
        assertCorrect(""alter table adduqtest add unique (coltomakeuq)"", MySQLDatabase.class);
        assertCorrect(""alter table adduqtest add constraint unique (coltomakeuq)"", InformixDatabase.class);
        assertCorrect(""alter table adduqtest add unique (coltomakeuq)"", OracleDatabase.class);
        assertCorrect(""alter table \""adduqtest\"" add unique (\""coltomakeuq\"")"", PostgresDatabase.class);
        assertCorrect(""alter table adduqtest add unique (coltomakeuq)"", DerbyDatabase.class);
        assertCorrect(""alter table [adduqtest] add unique ([coltomakeuq])"", SybaseASADatabase.class, SybaseDatabase.class);
        assertCorrect(""alter table [adduqtest] add unique ([coltomakeuq])"", MSSQLDatabase.class);

        assertCorrect(""alter table [adduqtest] add unique ([coltomakeuq])"");
    }
",non-flaky,5
77430,opensearch-project_OpenSearch,BwcVersionsTests.testExceptionOnNonCurrent,"    @Test(expected = IllegalStateException.class)
    public void testExceptionOnNonCurrent() {
        new BwcVersions(singletonList(formatVersionToLine(""6.5.0"")), Version.fromString(""7.0.0""));
    }
",non-flaky,5
118743,netty_netty,ByteBufUtilTest.notEqualsBufferOverflow,"    @Test
    public void notEqualsBufferOverflow() {
        byte[] b1 = new byte[8];
        byte[] b2 = new byte[16];
        Random rand = new Random();
        rand.nextBytes(b1);
        rand.nextBytes(b2);
        final int iB1 = b1.length / 2;
        final int iB2 = iB1 + b1.length;
        final int length = b1.length - iB1;
        System.arraycopy(b1, iB1, b2, iB2, length - 1);
        assertFalse(ByteBufUtil.equals(Unpooled.wrappedBuffer(b1), iB1, Unpooled.wrappedBuffer(b2), iB2,
                Math.max(b1.length, b2.length) * 2));
    }
",non-flaky,5
162680,OpenAPITools_openapi-generator,UserApiTest.createUsersWithArrayInputTest,"    @Test
    public void createUsersWithArrayInputTest() {
        List<User> body = null;
        //api.createUsersWithArrayInput(body);
        
        // TODO: test validations
        
        
    }
",non-flaky,5
97680,vojtechhabarta_typescript-generator,SpringTest.testCustomControllerAnnotaion,"    @Test
    public void testCustomControllerAnnotaion() {
        final Settings settings = TestUtils.settings();
        settings.outputFileType = TypeScriptFileType.implementationFile;
        settings.generateSpringApplicationClient = true;
        final String output = new TypeScriptGenerator(settings).generateTypeScript(Input.from(CustomAnnotatedController.class));
        Assert.assertTrue(output.contains(""getText(): RestResponse<string>""));
    }
",non-flaky,5
159627,liquibase_liquibase,H2IntegrationTest.runYamlChangelog,"    @Test
    public void runYamlChangelog() throws Exception {
        if (getDatabase() == null) {
            return;
        }

        Liquibase liquibase = createLiquibase(completeChangeLog);
        clearDatabase();

        //run again to test changelog testing logic
        liquibase = createLiquibase(""changelogs/yaml/common.tests.changelog.yaml"");
        liquibase.setChangeLogParameter(""loginuser"", getUsername());

        try {
            liquibase.update(this.contexts);
        } catch (ValidationFailedException e) {
            e.printDescriptiveError(System.out);
            throw e;
        }


    }
",non-flaky,5
156111,soot-oss_soot,DefaultInterfaceTest.interfaceReAbstractionTest,"  @Test
  public void interfaceReAbstractionTest() {
    String testClass = ""soot.defaultInterfaceMethods.InterfaceReAbstracting"";
    String defaultClass = ""soot.defaultInterfaceMethods.InterfaceA"";
    String defaultInterface = ""soot.defaultInterfaceMethods.InterfaceB"";

    final SootMethod target =
        prepareTarget(
            methodSigFromComponents(testClass, ""void"", ""main""),
            testClass,
            defaultClass,
            defaultInterface);

    SootMethod interfaceAPrint =
        Scene.v().getMethod(""<soot.defaultInterfaceMethods.InterfaceA: void print()>"");
    SootMethod mainMethodPrint =
        Scene.v().getMethod(""<soot.defaultInterfaceMethods.InterfaceReAbstracting: void print()>"");

    Body mainBody = target.retrieveActiveBody();
    SootMethod refMainMethod = resolveMethodRefInBody(mainBody.getUnits(), ""void print()"");
    SootMethod resolvedMethod =
        VirtualCalls.v()
            .resolveNonSpecial(Scene.v().getRefType(testClass), interfaceAPrint.makeRef(), false);
    SootMethod concreteImpl =
        Scene.v()
            .getFastHierarchy()
            .resolveConcreteDispatch(Scene.v().getSootClass(testClass), interfaceAPrint);
    Set<SootMethod> abstractImpl =
        Scene.v()
            .getFastHierarchy()
            .resolveAbstractDispatch(Scene.v().getSootClass(defaultClass), interfaceAPrint);

    boolean edgeMainMethodToMainPrint = checkInEdges(mainMethodPrint, target);
    boolean edgeMainMethodToInterfaceAPrint = checkInEdges(interfaceAPrint, target);
    final ReachableMethods reachableMethods = Scene.v().getReachableMethods();

    List<SootMethod> targetMethods =
        new ArrayList<SootMethod>() {
          {
            add(mainMethodPrint);
            add(interfaceAPrint);
          }
        };

    for (SootMethod targetMethod : targetMethods) {
      Assert.assertNotNull(targetMethod);
    }
    assertEquals(targetMethods.get(0), refMainMethod);
    assertEquals(targetMethods.get(0).getName(), ""print"");
    assertTrue(edgeMainMethodToMainPrint);
    assertFalse(edgeMainMethodToInterfaceAPrint);
    assertTrue(reachableMethods.contains(targetMethods.get(0)));
    assertFalse(reachableMethods.contains(targetMethods.get(1)));
    assertEquals(targetMethods.get(0), resolvedMethod);
    assertEquals(targetMethods.get(0), concreteImpl);
    assertNotEquals(targetMethods.get(1), concreteImpl);
    assertEquals(
        Sets.newHashSet(
            Scene.v()
                .getMethod(""<soot.defaultInterfaceMethods.InterfaceReAbstracting: void print()>"")),
        abstractImpl);
  }
",non-flaky,5
19429,eclipse_xtext-core,GenericModuleTest.bindFoo,"	@Test public void testEagerSingletonBinding() throws Exception {
			public Class<Foo> bindFoo() {
				return Foo.class;
			}
",non-flaky,5
94747,ktuukkan_marine-api,Latitude27Test.maxValueIsAvailable,"    @Test
    public void maxValueIsAvailable() {
        assertTrue(Latitude27.isAvailable(90*60*10000));
    }
",non-flaky,5
59619,looly_hutool,EmojiUtilTest.toUnicodeTest,"	@Test
	public void toUnicodeTest() {
		String emoji = EmojiUtil.toUnicode("":smile:"");
		Assert.assertEquals(""ð"", emoji);
	}
",non-flaky,5
135760,Netflix_Hystrix,HystrixPluginsTest.testDynamicPropertiesFailure,"    @Test(expected=ServiceConfigurationError.class)
    public void testDynamicPropertiesFailure() throws Exception {
        /*
         * James Bond: Do you expect me to talk?
         * Auric Goldfinger: No, Mr. Bond, I expect you to die!
         */
        fakeServiceLoaderResource = 
                ""FAKE_META_INF_SERVICES/com.netflix.hystrix.strategy.properties.HystrixDynamicPropertiesFail"";
        HystrixPlugins plugins = setupMockServiceLoader();
        plugins.getDynamicProperties();

    }
",non-flaky,5
118754,netty_netty,ByteBufUtilTest.testWriteUtf8Composite,"    @Test
    public void testWriteUtf8Composite() {
        String utf8 = ""Some UTF-8 like Ã¤ÃâÅÅ"";
        ByteBuf buf = Unpooled.buffer(16);
        buf.writeBytes(utf8.getBytes(CharsetUtil.UTF_8));
        ByteBuf buf2 = Unpooled.compositeBuffer().addComponent(
                Unpooled.buffer(8)).addComponent(Unpooled.buffer(24));
        // write some byte so we start writing with an offset.
        buf2.writeByte(1);
        ByteBufUtil.writeUtf8(buf2, utf8);

        // Skip the previously written byte.
        assertEquals(buf, buf2.skipBytes(1));

        buf.release();
        buf2.release();
    }
",non-flaky,5
76743,quarkusio_quarkus,RemoteDevMojoIT.testThatApplicationRecoversCompilationIssue,"    @Test
    public void testThatApplicationRecoversCompilationIssue() throws MavenInvocationException, IOException {
        testDir = initProject(""projects/classic-remote-dev"", ""projects/project-classic-run-compilation-issue-remote"");
        agentDir = initProject(""projects/classic-remote-dev"", ""projects/project-classic-run-compilation-issue-local"");
        runAndCheck();

        // Edit the ""Hello"" message.
        File source = new File(agentDir, ""src/main/java/org/acme/HelloResource.java"");
        String uuid = UUID.randomUUID().toString();
        filter(source, Collections.singletonMap(""return \""hello\"";"", ""return \"""" + uuid + ""\"""")); // No semi-colon

        // Wait until we get ""uuid""
        AtomicReference<String> last = new AtomicReference<>();
        await()
                .pollDelay(1, TimeUnit.SECONDS)
                .atMost(1, TimeUnit.MINUTES).until(() -> {
                    String content = DevModeTestUtils.getHttpResponse(""/app/hello"", true);
                    last.set(content);
                    return content.contains(uuid);
                });

        assertThat(last.get()).containsIgnoringCase(""error"")
                .containsIgnoringCase(""return \"""" + uuid + ""\"""")
                .containsIgnoringCase(""compile"");

        await()
                .pollDelay(1, TimeUnit.SECONDS)
                .pollInterval(1, TimeUnit.SECONDS)
                .until(source::isFile);
        filter(source, Collections.singletonMap(""\"""" + uuid + ""\"""", ""\""carambar\"";""));

        // Wait until we get ""uuid""
        await()
                .pollDelay(1, TimeUnit.SECONDS)
                .atMost(1, TimeUnit.MINUTES).until(() -> DevModeTestUtils.getHttpResponse(""/app/hello"").contains(""carambar""));
    }
",non-flaky,5
30926,camunda-cloud_zeebe,MsgPackSkippingTest.skipValue,"  @Test
  public void skipValue() {
    // given
    final ByteArrayBuilder builder = new ByteArrayBuilder();
    given.accept(builder);

    final DirectBuffer buffer = new UnsafeBuffer(builder.value);

    final MsgPackReader reader = new MsgPackReader();
    reader.wrap(buffer, 0, buffer.capacity());

    // when
    reader.skipValue();

    // then
    assertThat(reader.getOffset()).isEqualTo(buffer.capacity());
  }
",non-flaky,5
112678,hwang-pku_ormlite-core,JavaxPersistenceTest.testSerializableClass,"	@Test
	public void testSerializableClass() throws SQLException {
		@SuppressWarnings(""unused"")
		Dao<SerializableWrapper, Integer> dao = createDao(SerializableWrapper.class, true);
		SerializableStuff stuff = new SerializableStuff();
		stuff.field1 = 12345;
		stuff.field2 = ""oejwepfjw"";
		SerializableWrapper wrapper = new SerializableWrapper();
		wrapper.stuff = stuff;

		assertEquals(1, dao.create(wrapper));

		SerializableWrapper result = dao.queryForId(wrapper.id);
		assertNotNull(result);
		assertEquals(wrapper.id, result.id);
		assertEquals(wrapper.stuff, result.stuff);
	}
",non-flaky,5
89331,apache_samza,TestKafkaSystemAdminJava.testCreateChangelogStreamHelp,"  @Test
  public void testCreateChangelogStreamHelp() {
    testCreateChangelogStreamHelp(""testChangeLogStream"");
  }
",non-flaky,5
98599,nutzam_nutz,El2Test.custom,"    @Test
    public void custom() {
        assertEquals(2, El.eval(""max(1, 2)""));
        assertEquals(1, El.eval(""min(1, 2)""));
        assertEquals(""jk"", El.eval(""trim('    jk    ')""));
    }
",non-flaky,5
94751,ktuukkan_marine-api,Latitude27Test.largeNegativeValueIsNotAvailable,"    @Test
    public void largeNegativeValueIsNotAvailable() {
        assertFalse(Latitude27.isAvailable(-1-90*60*10000));
    }
",non-flaky,5
170483,eclipse_jetty.project,ObjectMBeanUtilTest.testToAttributeName,"    @Test
    public void testToAttributeName()
    {
        assertEquals(""fullName"", MetaData.toAttributeName(""isfullName""));
    }
",non-flaky,5
159646,liquibase_liquibase,AbstractIntegrationTest.testRollbackableChangeLogScriptOnExistingDatabase,"    @Test
    public void testRollbackableChangeLogScriptOnExistingDatabase() throws Exception {
        assumeNotNull(this.getDatabase());

        Liquibase liquibase = createLiquibase(rollbackChangeLog);
        clearDatabase();

        liquibase = createLiquibase(rollbackChangeLog);
        liquibase.update(this.contexts);

        StringWriter writer = new StringWriter();

        liquibase = createLiquibase(rollbackChangeLog);
        liquibase.rollback(new Date(0), this.contexts, writer);
    }
",non-flaky,5
77709,pholser_junit-quickcheck,PrimitivePropertyParameterTypesTest.shouldHold,"    @Test public void shrinkingPrimitiveDoubleStraddlingZero() {
        @Property public void shouldHold(double d) {
            values.add(d);

            fail();
        }
",non-flaky,5
112740,hwang-pku_ormlite-core,DatabaseConnectionProxyTest.testDeleteNull,"	@Test
	public void testDeleteNull() throws Exception {
		DatabaseConnectionProxy proxy = new DatabaseConnectionProxy(null);
		assertEquals(0, proxy.delete(""statment"", null, null));
		proxy.close();
	}
",non-flaky,5
78238,apache_beam,SimplePushbackSideInputDoFnRunnerTest.testOnTimerCalled,"  @Test
  public void testOnTimerCalled() {
    PushbackSideInputDoFnRunner<Integer, Integer> runner = createRunner(ImmutableList.of());

    String timerId = ""fooTimer"";
    IntervalWindow window = new IntervalWindow(new Instant(4), new Instant(16));
    Instant timestamp = new Instant(72);

    // Mocking is not easily compatible with annotation analysis, so we manually record
    // the method call.
    runner.onTimer(timerId, window, new Instant(timestamp), TimeDomain.EVENT_TIME);

    assertThat(
        underlying.firedTimers,
        contains(
            TimerData.of(
                timerId,
                StateNamespaces.window(IntervalWindow.getCoder(), window),
                timestamp,
                TimeDomain.EVENT_TIME)));
  }
",non-flaky,5
175772,GoogleCloudPlatform_google-cloud-eclipse,AppYamlValidatorTest.testValidate_relativePathAndNoAppYaml,"  @Test
  public void testValidate_relativePathAndNoAppYaml() {
    when(appYamlPath.getValue()).thenReturn(""relative/path/app.yaml"");

    IStatus result = pathValidator.validate();
    assertEquals(IStatus.ERROR, result.getSeverity());
    assertEquals(""app.yaml does not exist."", result.getMessage());
  }
",non-flaky,5
86136,graylog2_graylog2-server,ESMongoDateTimeDeserializerTest.deserializeDateTime,"    @Test
    public void deserializeDateTime() throws Exception {
        final String json = ""{\""date_time\"":\""2016-12-13 14:00:00.000\""}"";
        final DTO value = objectMapper.readValue(json, DTO.class);
        assertThat(value.dateTime).isEqualTo(new DateTime(2016, 12, 13, 14, 0, DateTimeZone.UTC));
    }
",non-flaky,5
77650,pholser_junit-quickcheck,Primitive3DArrayPropertyParameterTypesTest.shouldHold,"    @Test public void primitive3DIntegerArray() {
        @Property(trials = 2) public void shouldHold(int[][][] i) {
        }
",non-flaky,5
76727,quarkusio_quarkus,JarRunnerIT.testPlatformPropertiesOverridenOnCommandLine,"    @Test
    public void testPlatformPropertiesOverridenOnCommandLine() throws Exception {
        final File testDir = initProject(""projects/platform-properties-overrides"",
                ""projects/platform-props-overriden-on-cmd-line"");
        final RunningInvoker running = new RunningInvoker(testDir, false);

        final MavenProcessInvocationResult result = running.execute(
                Arrays.asList(""install -Dquarkus.native.builder-image=commandline -DskipTests""),
                Collections.emptyMap());
        await().atMost(1, TimeUnit.MINUTES).until(() -> result.getProcess() != null && !result.getProcess().isAlive());
        assertThat(running.log()).containsIgnoringCase(""BUILD SUCCESS"");
        running.stop();

        File output = new File(testDir, ""app/target/output.log"");
        output.createNewFile();

        Process process = doLaunch(new File(testDir, ""app/target/quarkus-app""), Paths.get(""quarkus-run.jar""), output,
                Collections.emptyList()).start();
        try {
            Assertions.assertEquals(""builder-image is commandline"", DevModeTestUtils.getHttpResponse(""/hello""));
        } finally {
            process.destroy();
        }
    }
",non-flaky,5
113706,salesforce_reactive-grpc,CancellationPropagationIntegrationTest.serverCanCancelClientStreamExplicitlyBidi,"    @Test
    public void serverCanCancelClientStreamExplicitlyBidi() {
        TestService svc = new TestService();
        serverRule.getServiceRegistry().addService(svc);

        ReactorNumbersGrpc.ReactorNumbersStub stub = ReactorNumbersGrpc.newReactorStub(serverRule.getChannel());

        svc.setExplicitCancel(true);

        AtomicBoolean requestWasCanceled = new AtomicBoolean(false);
        AtomicBoolean requestDidProduce = new AtomicBoolean(false);

        Flux<NumberProto.Number> request = Flux
                .fromIterable(IntStream.range(0, NUMBER_OF_STREAM_ELEMENTS)::iterator)
                .delayElements(Duration.ofMillis(SEQUENCE_DELAY_MILLIS))
                .map(CancellationPropagationIntegrationTest::protoNum)
                .doOnNext(n -> {
                    requestDidProduce.set(true);
                    System.out.println(""P: "" + n.getNumber(0));
                })
                .doOnCancel(() -> {
                    requestWasCanceled.set(true);
                    System.out.println(""Client canceled"");
                });

        Flux<NumberProto.Number> observer = request.compose(stub::twoWayPressure)
                .doOnNext(number -> System.out.println(number.getNumber(0)))
                .doOnError(throwable -> System.out.println(throwable.getMessage()));

        StepVerifier.create(observer)
                .expectNext(protoNum(-1))
                .verifyComplete();

        await().atMost(org.awaitility.Duration.FIVE_HUNDRED_MILLISECONDS).untilTrue(requestWasCanceled);

        assertThat(requestWasCanceled.get()).isTrue();
        assertThat(requestDidProduce.get()).isTrue();
    }
",non-flaky,5
112648,tbsalling_aismessages,BaseStationReportTest.canDecode,"    @Test
    public void canDecode() {
        AISMessage aisMessage = AISMessage.create(NMEAMessage.fromString(""!AIVDM,1,1,,B,4h3Ovk1udp6I9o>jPHEdjdW000S:,0*0C""));

        System.out.println(aisMessage.toString());

        assertEquals(AISMessageType.BaseStationReport, aisMessage.getMessageType());
        assertEquals((Integer) 3, aisMessage.getRepeatIndicator());
        BaseStationReport message = (BaseStationReport) aisMessage;
        assertEquals(MMSI.valueOf(3669708), message.getSourceMmsi());
        assertEquals((Integer) 2011, message.getYear());
        assertEquals((Integer) 3, message.getMonth());
        assertEquals((Integer) 16, message.getDay());
        assertEquals((Integer) 6, message.getHour());
        assertEquals((Integer) 25, message.getMinute());
        assertEquals((Integer) 9, message.getSecond());
        assertTrue(message.getPositionAccurate());
        assertEquals(Float.valueOf(37.923283f), message.getLatitude());
        assertEquals(Float.valueOf(-122.59837f), message.getLongitude());
        assertEquals(PositionFixingDevice.Surveyed, message.getPositionFixingDevice());
        assertFalse(message.getRaimFlag());
    }
",non-flaky,5
156112,soot-oss_soot,DefaultInterfaceTest.superClassPreferenceOverDefaultMethodTest,"  @Test
  public void superClassPreferenceOverDefaultMethodTest() {
    String testClass = ""soot.defaultInterfaceMethods.SuperClassPreferenceOverDefaultMethod"";
    String defaultInterfaceOne = ""soot.defaultInterfaceMethods.InterfaceOne"";
    String defaultInterfaceTwo = ""soot.defaultInterfaceMethods.InterfaceTwo"";
    String defaultSuperClass = ""soot.defaultInterfaceMethods.SuperClass"";

    final SootMethod target =
        prepareTarget(
            methodSigFromComponents(testClass, voidType, mainClass),
            testClass,
            defaultInterfaceOne,
            defaultInterfaceTwo,
            defaultSuperClass);

    SootMethod interfaceOnePrint =
        Scene.v().getMethod(""<soot.defaultInterfaceMethods.InterfaceOne: void print()>"");
    SootMethod interfaceTwoPrint =
        Scene.v().getMethod(""<soot.defaultInterfaceMethods.InterfaceTwo: void print()>"");
    SootMethod superClassPrint =
        Scene.v().getMethod(""<soot.defaultInterfaceMethods.SuperClass: void print()>"");

    Body mainBody = target.retrieveActiveBody();
    SootMethod refMainMethod = resolveMethodRefInBody(mainBody.getUnits(), ""void print()"");

    SootMethod resolvedInterfaceOneDefaultMethod =
        VirtualCalls.v()
            .resolveNonSpecial(Scene.v().getRefType(testClass), interfaceOnePrint.makeRef(), false);
    SootMethod resolvedInterfaceTwoDefaultMethod =
        VirtualCalls.v()
            .resolveNonSpecial(Scene.v().getRefType(testClass), interfaceTwoPrint.makeRef(), false);

    SootMethod concreteImplInterfaceOne =
        Scene.v()
            .getFastHierarchy()
            .resolveConcreteDispatch(Scene.v().getSootClass(testClass), interfaceOnePrint);
    SootMethod concreteImplInterfaceTwo =
        Scene.v()
            .getFastHierarchy()
            .resolveConcreteDispatch(Scene.v().getSootClass(testClass), interfaceTwoPrint);

    Set<SootMethod> abstractImplInterfaceOne =
        Scene.v()
            .getFastHierarchy()
            .resolveAbstractDispatch(
                Scene.v().getSootClass(defaultInterfaceOne), interfaceOnePrint);
    Set<SootMethod> abstractImplInterfaceTwo =
        Scene.v()
            .getFastHierarchy()
            .resolveAbstractDispatch(
                Scene.v().getSootClass(defaultInterfaceTwo), interfaceTwoPrint);

    boolean edgeMainToInterfaceOnePrint = checkInEdges(interfaceOnePrint, target);
    boolean edgeMainToInterfaceTwoPrint = checkInEdges(interfaceTwoPrint, target);
    boolean edgeMainToSuperClassPrint = checkInEdges(superClassPrint, target);

    final ReachableMethods reachableMethods = Scene.v().getReachableMethods();

    List<SootMethod> targetMethods =
        new ArrayList<SootMethod>() {
          {
            add(superClassPrint);
            add(interfaceOnePrint);
            add(interfaceTwoPrint);
          }
        };

    ArrayList<Boolean> edgeNotPresent =
        new ArrayList<Boolean>() {
          {
            add(edgeMainToInterfaceOnePrint);
            add(edgeMainToInterfaceTwoPrint);
          }
        };

    Map<SootMethod, SootMethod> resolvedMethods =
        new HashMap<SootMethod, SootMethod>() {
          {
            put(superClassPrint, resolvedInterfaceOneDefaultMethod);
            put(superClassPrint, resolvedInterfaceTwoDefaultMethod);
          }
        };

    Map<SootMethod, SootMethod> concreteImplTrue =
        new HashMap<SootMethod, SootMethod>() {
          {
            put(superClassPrint, concreteImplInterfaceOne);
            put(superClassPrint, concreteImplInterfaceTwo);
          }
        };

    Map<SootMethod, SootMethod> concreteImplNotTrue =
        new HashMap<SootMethod, SootMethod>() {
          {
            put(interfaceOnePrint, concreteImplInterfaceOne);
            put(interfaceOnePrint, concreteImplInterfaceTwo);
          }
        };

    for (SootMethod targetMethod : targetMethods) {
      assertNotNull(targetMethod);
    }
    assertEquals(targetMethods.get(0), refMainMethod);
    assertEquals(targetMethods.get(0).getName(), ""print"");
    assertTrue(edgeMainToSuperClassPrint);
    for (boolean notPresent : edgeNotPresent) {
      assertFalse(notPresent);
    }
    assertTrue(reachableMethods.contains(targetMethods.get(0)));
    assertFalse(reachableMethods.contains(targetMethods.get(1)));
    assertFalse(reachableMethods.contains(targetMethods.get(2)));
    for (Map.Entry<SootMethod, SootMethod> virtualResolvedMethod : resolvedMethods.entrySet()) {
      assertEquals(virtualResolvedMethod.getKey(), virtualResolvedMethod.getValue());
    }
    for (Map.Entry<SootMethod, SootMethod> concreteImpl : concreteImplTrue.entrySet()) {
      assertEquals(concreteImpl.getKey(), concreteImpl.getValue());
    }
    for (Map.Entry<SootMethod, SootMethod> concreteImpl : concreteImplNotTrue.entrySet()) {
      assertNotEquals(concreteImpl.getKey(), concreteImpl.getValue());
    }
    assertTrue(
        abstractImplInterfaceOne.contains(
            Scene.v().getMethod(""<soot.defaultInterfaceMethods.SuperClass: void print()>"")));
    assertTrue(
        abstractImplInterfaceTwo.contains(
            Scene.v().getMethod(""<soot.defaultInterfaceMethods.SuperClass: void print()>"")));
  }
",non-flaky,5
177219,line_armeria,FileWatcherRunnableTest.testPropertyFileWatcherRunnableExitsOnInterrupt,"    @Test
    public void testPropertyFileWatcherRunnableExitsOnInterrupt() throws InterruptedException {
        final WatchService watchService = mock(WatchService.class);
        final FileWatcherRunnable fileWatcherRunnable = new FileWatcherRunnable(watchService, mock(
                FileSystemWatchContext.class));
        when(watchService.take()).then(invocation -> {
            while (!Thread.currentThread().isInterrupted()) {
                Thread.yield();
            }
            return null;
        });
        final Thread thread = new Thread(fileWatcherRunnable);
        thread.start();
        thread.interrupt();
        await().untilAsserted(() -> assertThat(thread.isAlive()).isFalse());
    }
",non-flaky,5
76977,Tencent_Firestorm,SparkClientWithLocalTest.readTest5,"  @Test
  public void readTest5() {
    String testAppId = ""localReadTest5"";
    ShuffleReadClientImpl readClient = new ShuffleReadClientImpl(StorageType.LOCALFILE.name(),
        testAppId, 0, 1, 100, 2, 10, 1000,
        """", Roaring64NavigableMap.bitmapOf(), Roaring64NavigableMap.bitmapOf(),
        shuffleServerInfo, null);
    assertNull(readClient.readShuffleBlockData());
    readClient.checkProcessedBlockIds();
  }
",non-flaky,5
112083,apache_shardingsphere-elasticjob,JobShardingStrategyFactoryTest.assertGetStrategyFailureWhenClassNotFound,"    @Test(expected = JobConfigurationException.class)
    public void assertGetStrategyFailureWhenClassNotFound() {
        JobShardingStrategyFactory.getStrategy(""NotClass"");
    }
",non-flaky,5
98366,Kong_unirest-java,InterceptorTest.onRequest,"    @Test
            public void onRequest(HttpRequest<?> request, Config config) {
                request.getBody().ifPresent(b ->
                        b.multiParts().forEach(part ->
                                values.add(part.toString())));
            }
",non-flaky,5
77015,Tencent_Firestorm,AQERepartitionTest.resultCompareTest,"  @Test
  public void resultCompareTest() throws Exception {
    run();
  }
",non-flaky,5
159686,liquibase_liquibase,MarkChangeSetRanExecuteTest.generateSql_insert,"    @Test
    public void generateSql_insert() throws Exception {
        this.statementUnderTest = new MarkChangeSetRanStatement(new ChangeSet(""a"", ""b"", false, false, ""c"", ""e"", ""f"",
                null), ChangeSet.ExecType.EXECUTED);
        String version = LiquibaseUtil.getBuildVersion().replaceAll(""SNAPSHOT"", ""SNP"");
        assertCorrect(""insert into [databasechangelog] ([id], [author], [filename], [dateexecuted], "" +
                        ""[orderexecuted], [md5sum], [description], [comments], [exectype], [contexts], [labels], "" +
                        ""[liquibase], [deployment_id]) values ('a', 'b', 'c', getdate(), 1, "" +
                        ""'8:d41d8cd98f00b204e9800998ecf8427e', 'empty', '', 'executed', 'e', null, '"" + version + ""',"" +
                        "" null)"",
                MSSQLDatabase.class);
        assertCorrect(""insert into databasechangelog (id, author, filename, dateexecuted, orderexecuted, "" +
                        ""md5sum, description, comments, exectype, contexts, labels, liquibase, deployment_id) values "" +
                        ""('a', 'b', 'c', systimestamp, 1, '8:d41d8cd98f00b204e9800998ecf8427e', 'empty', '', "" +
                        ""'executed', 'e', null, '"" + version + ""', null)"",
                OracleDatabase.class);
        assertCorrect(""insert into [databasechangelog] ([id], [author], [filename], [dateexecuted], "" +
                        ""[orderexecuted], [md5sum], [description], [comments], [exectype], [contexts], [labels], "" +
                        ""[liquibase], [deployment_id]) values ('a', 'b', 'c', getdate(), 1, "" +
                        ""'8:d41d8cd98f00b204e9800998ecf8427e', 'empty', '', 'executed', 'e', null, '"" + version + ""',"" +
                        "" null)"",
                SybaseDatabase.class);
        assertCorrect(""insert into databasechangelog (id, author, filename, dateexecuted, orderexecuted, "" +
                        ""md5sum, description, comments, exectype, contexts, labels, liquibase, deployment_id) values "" +
                        ""('a', 'b', 'c', "" +
                        ""current year to fraction(5), 1, '8:d41d8cd98f00b204e9800998ecf8427e', 'empty', '', "" +
                        ""'executed', "" +
                        ""'e', null, '"" + version + ""', null)"",
                InformixDatabase.class);
        assertCorrect(""insert into databasechangelog (id, author, filename, dateexecuted, orderexecuted, "" +
                        ""md5sum, description, comments, exectype, contexts, labels, liquibase, deployment_id) values "" +
                        ""('a', 'b', 'c', current timestamp, 1, "" +
                        ""'8:d41d8cd98f00b204e9800998ecf8427e', 'empty', '', 'executed', 'e', null, '"" + version + ""',"" +
                        "" null)"",
                DB2Database.class);
        assertCorrect(""insert into databasechangelog (id, author, filename, dateexecuted, orderexecuted, "" +
                        ""md5sum, description, comments, exectype, contexts, labels, liquibase, deployment_id) values "" +
                        ""('a', 'b', 'c', current_timestamp, 1, "" +
                        ""'8:d41d8cd98f00b204e9800998ecf8427e', 'empty', '', 'executed', 'e', null, '"" + version + ""',"" +
                        "" null)"",
                FirebirdDatabase.class, DerbyDatabase.class);
        assertCorrect(""insert into databasechangelog (id, author, filename, dateexecuted, orderexecuted, "" +
                        ""md5sum, description, comments, exectype, contexts, labels, liquibase, deployment_id) values "" +
                        ""('a', 'b', 'c', now, 1, "" +
                        ""'8:d41d8cd98f00b204e9800998ecf8427e', 'empty', '', 'executed', 'e', null, '"" + version + ""',"" +
                        "" null)"",
                HsqlDatabase.class);
        assertCorrect(""insert into databasechangelog (id, author, filename, dateexecuted, orderexecuted, "" +
                        ""md5sum, description, comments, exectype, contexts, labels, liquibase, deployment_id) values "" +
                        ""('a', 'b', 'c', now(), 1, "" +
                        ""'8:d41d8cd98f00b204e9800998ecf8427e', 'empty', '', 'executed', 'e', null, '"" + version + ""',"" +
                        "" null)"",
                SybaseASADatabase.class);
        assertCorrect(""insert into databasechangelog (id, author, filename, dateexecuted, orderexecuted, "" +
                        ""md5sum, `description`, comments, exectype, contexts, labels, liquibase, deployment_id) values "" +
                        ""('a', 'b', 'c', now(), 1, "" +
                        ""'8:d41d8cd98f00b204e9800998ecf8427e', 'empty', '', 'executed', 'e', null, '"" + version + ""',"" +
                        "" null)"",
                MySQLDatabase.class, MariaDBDatabase.class);
        assertCorrect(""insert into databasechangelog (id, author, filename, dateexecuted, orderexecuted, "" +
                        ""md5sum, description, comments, exectype, contexts, labels, liquibase, deployment_id) values "" +
                        ""('a', 'b', 'c', now(), 1, "" +
                        ""'8:d41d8cd98f00b204e9800998ecf8427e', 'empty', '', 'executed', 'e', null, '"" + version + ""',"" +
                        "" null)"",
                PostgresDatabase.class, H2Database.class);
        assertCorrectOnRest(""insert into databasechangelog (id, author, filename, dateexecuted, "" +
                ""orderexecuted, md5sum, description, comments, exectype, contexts, labels, liquibase, deployment_id) "" +
                ""values ('a', 'b', 'c', "" +
                ""current timestamp, 1, '8:d41d8cd98f00b204e9800998ecf8427e', 'empty', '', 'executed', 'e', null, "" +
                ""'"" + version + ""', null)"");
    }
",non-flaky,5
89274,apache_samza,TestSamzaRestService.testStartShouldStartTheMetricsReportersAndServer,"  @Test
  public void testStartShouldStartTheMetricsReportersAndServer() throws Exception {
    NetworkConnector connector = Mockito.mock(NetworkConnector.class);
    int testServerPort = 100;
    Mockito.doReturn(testServerPort).when(connector).getPort();
    Mockito.when(server.getConnectors()).thenReturn(new NetworkConnector[]{connector});
    Mockito.doNothing().when(server).start();
    samzaRestService.start();
    Mockito.verify(metricsReporter).start();
    Mockito.verify(metricsReporter).register(""SamzaRest"", metricsRegistry);
    Mockito.verify(server).start();
  }
",non-flaky,5
160409,ConsenSys_teku,ChainDataProviderTest.getStateFinalityCheckpoints_shouldGetEmptyCheckpointsBeforeFinalized,"  @Test
  public void getStateFinalityCheckpoints_shouldGetEmptyCheckpointsBeforeFinalized()
      throws ExecutionException, InterruptedException {
    final ChainDataProvider provider =
        new ChainDataProvider(spec, recentChainData, combinedChainDataClient);

    assertThat(provider.getStateFinalityCheckpoints(""genesis"").get().get())
        .isEqualTo(
            new FinalityCheckpointsResponse(
                tech.pegasys.teku.api.schema.Checkpoint.EMPTY,
                tech.pegasys.teku.api.schema.Checkpoint.EMPTY,
                tech.pegasys.teku.api.schema.Checkpoint.EMPTY));
  }
",non-flaky,5
352,ctco_cukes,b483e1a8f261b80a66291a42fc455256b0b5059c.shouldReturnBodyWhenEnabledAndNoMax,"@Test
public void shouldReturnBodyWhenEnabledAndNoMax() {
    String body = ""{\n"" +
    ""  \""error\"": \""not found\""\n"" +
    ""}"";
    HttpResponseFacade mock = mock(HttpResponseFacade.class);
    when(mock.response()).thenReturn(generateResponse(
    ""application/json"",
    404,
    body.getBytes()));
    ((HttpAssertionFacadeImpl) facade).facade = mock;
    world.put(ASSERTS_STATUS_CODE_DISPLAY_BODY, ""true"");
    validateException(
    200,
    ""1 expectation failed.\n"" +
    ""Expected status code \""200\"" but was \""404\"" with body:\n"" +
    ""\""\""\""\n"" +
    body +
    ""\n\""\""\"".\n"");
}",test order dependency,4
134002,CorfuDB_CorfuDB,BaseServerFileDescriptorLeaksIT.fileDescriptorLeaksBaseServerResetTest,"    @Test(timeout = 300_000)
    public void fileDescriptorLeaksBaseServerResetTest() {

        workflow(wf -> {
            wf.setupDocker(fixture -> fixture.getCluster().numNodes(1));
            wf.deploy();

            try {
                resourceLeaks(wf);
            } catch (Exception e) {
                fail(""Test failed"", e);
            }
        });
    }
",non-flaky,5
104643,apache_pinot,OfflineClusterIntegrationTest.testGroupByUDF,"  @Test
  public void testGroupByUDF()
      throws Exception {
    String pqlQuery = ""SELECT COUNT(*) FROM mytable GROUP BY timeConvert(DaysSinceEpoch,'DAYS','SECONDS')"";
    JsonNode response = postQuery(pqlQuery);
    JsonNode groupByResult = response.get(""aggregationResults"").get(0);
    JsonNode groupByEntry = groupByResult.get(""groupByResult"").get(0);
    assertEquals(groupByEntry.get(""value"").asDouble(), 605.0);
    assertEquals(groupByEntry.get(""group"").get(0).asInt(), 16138 * 24 * 3600);
    assertEquals(groupByResult.get(""groupByColumns"").get(0).asText(), ""timeconvert(DaysSinceEpoch,'DAYS','SECONDS')"");

    pqlQuery =
        ""SELECT COUNT(*) FROM mytable GROUP BY dateTimeConvert(DaysSinceEpoch,'1:DAYS:EPOCH','1:HOURS:EPOCH',""
            + ""'1:HOURS')"";
    response = postQuery(pqlQuery);
    groupByResult = response.get(""aggregationResults"").get(0);
    groupByEntry = groupByResult.get(""groupByResult"").get(0);
    assertEquals(groupByEntry.get(""value"").asDouble(), 605.0);
    assertEquals(groupByEntry.get(""group"").get(0).asInt(), 16138 * 24);
    assertEquals(groupByResult.get(""groupByColumns"").get(0).asText(),
        ""datetimeconvert(DaysSinceEpoch,'1:DAYS:EPOCH','1:HOURS:EPOCH','1:HOURS')"");

    pqlQuery = ""SELECT COUNT(*) FROM mytable GROUP BY add(DaysSinceEpoch,DaysSinceEpoch,15)"";
    response = postQuery(pqlQuery);
    groupByResult = response.get(""aggregationResults"").get(0);
    groupByEntry = groupByResult.get(""groupByResult"").get(0);
    assertEquals(groupByEntry.get(""value"").asDouble(), 605.0);
    assertEquals(groupByEntry.get(""group"").get(0).asDouble(), 16138.0 + 16138 + 15);
    assertEquals(groupByResult.get(""groupByColumns"").get(0).asText(), ""add(DaysSinceEpoch,DaysSinceEpoch,'15')"");

    pqlQuery = ""SELECT COUNT(*) FROM mytable GROUP BY sub(DaysSinceEpoch,25)"";
    response = postQuery(pqlQuery);
    groupByResult = response.get(""aggregationResults"").get(0);
    groupByEntry = groupByResult.get(""groupByResult"").get(0);
    assertEquals(groupByEntry.get(""value"").asDouble(), 605.0);
    assertEquals(groupByEntry.get(""group"").get(0).asDouble(), 16138.0 - 25);
    assertEquals(groupByResult.get(""groupByColumns"").get(0).asText(), ""sub(DaysSinceEpoch,'25')"");

    pqlQuery = ""SELECT COUNT(*) FROM mytable GROUP BY mult(DaysSinceEpoch,24,3600)"";
    response = postQuery(pqlQuery);
    groupByResult = response.get(""aggregationResults"").get(0);
    groupByEntry = groupByResult.get(""groupByResult"").get(0);
    assertEquals(groupByEntry.get(""value"").asDouble(), 605.0);
    assertEquals(groupByEntry.get(""group"").get(0).asDouble(), 16138.0 * 24 * 3600);
    assertEquals(groupByResult.get(""groupByColumns"").get(0).asText(), ""mult(DaysSinceEpoch,'24','3600')"");

    pqlQuery = ""SELECT COUNT(*) FROM mytable GROUP BY div(DaysSinceEpoch,2)"";
    response = postQuery(pqlQuery);
    groupByResult = response.get(""aggregationResults"").get(0);
    groupByEntry = groupByResult.get(""groupByResult"").get(0);
    assertEquals(groupByEntry.get(""value"").asDouble(), 605.0);
    assertEquals(groupByEntry.get(""group"").get(0).asDouble(), 16138.0 / 2);
    assertEquals(groupByResult.get(""groupByColumns"").get(0).asText(), ""div(DaysSinceEpoch,'2')"");

    pqlQuery = ""SELECT COUNT(*) FROM mytable GROUP BY arrayLength(DivAirports)"";
    response = postQuery(pqlQuery);
    groupByResult = response.get(""aggregationResults"").get(0);
    groupByEntry = groupByResult.get(""groupByResult"").get(0);
    assertEquals(groupByEntry.get(""value"").asDouble(), 115545.0);
    assertEquals(groupByEntry.get(""group"").get(0).asText(), ""5"");
    assertEquals(groupByResult.get(""groupByColumns"").get(0).asText(), ""arraylength(DivAirports)"");

    pqlQuery = ""SELECT COUNT(*) FROM mytable GROUP BY arrayLength(valueIn(DivAirports,'DFW','ORD'))"";
    response = postQuery(pqlQuery);
    groupByResult = response.get(""aggregationResults"").get(0);
    groupByEntry = groupByResult.get(""groupByResult"").get(0);
    assertEquals(groupByEntry.get(""value"").asDouble(), 114895.0);
    assertEquals(groupByEntry.get(""group"").get(0).asText(), ""0"");
    groupByEntry = groupByResult.get(""groupByResult"").get(1);
    assertEquals(groupByEntry.get(""value"").asDouble(), 648.0);
    assertEquals(groupByEntry.get(""group"").get(0).asText(), ""1"");
    groupByEntry = groupByResult.get(""groupByResult"").get(2);
    assertEquals(groupByEntry.get(""value"").asDouble(), 2.0);
    assertEquals(groupByEntry.get(""group"").get(0).asText(), ""2"");
    assertEquals(groupByResult.get(""groupByColumns"").get(0).asText(), ""arraylength(valuein(DivAirports,'DFW','ORD'))"");

    pqlQuery = ""SELECT COUNT(*) FROM mytable GROUP BY valueIn(DivAirports,'DFW','ORD')"";
    response = postQuery(pqlQuery);
    groupByResult = response.get(""aggregationResults"").get(0);
    groupByEntry = groupByResult.get(""groupByResult"").get(0);
    assertEquals(groupByEntry.get(""value"").asDouble(), 336.0);
    assertEquals(groupByEntry.get(""group"").get(0).asText(), ""ORD"");
    assertEquals(groupByResult.get(""groupByColumns"").get(0).asText(), ""valuein(DivAirports,'DFW','ORD')"");

    pqlQuery = ""SELECT MAX(timeConvert(DaysSinceEpoch,'DAYS','SECONDS')) FROM mytable"";
    response = postQuery(pqlQuery);
    JsonNode aggregationResult = response.get(""aggregationResults"").get(0);
    assertEquals(aggregationResult.get(""function"").asText(), ""max_timeconvert(DaysSinceEpoch,'DAYS','SECONDS')"");
    assertEquals(aggregationResult.get(""value"").asDouble(), 16435.0 * 24 * 3600);

    pqlQuery = ""SELECT MIN(div(DaysSinceEpoch,2)) FROM mytable"";
    response = postQuery(pqlQuery);
    aggregationResult = response.get(""aggregationResults"").get(0);
    assertEquals(aggregationResult.get(""function"").asText(), ""min_div(DaysSinceEpoch,'2')"");
    assertEquals(aggregationResult.get(""value"").asDouble(), 16071.0 / 2);
  }
",non-flaky,5
26748,MundaneImmortal_pair-distribution-app,DeveloperTest.testGetPairingDaysDefault,"	@Test
	public void testGetPairingDaysDefault() {
		Developer developer = new Developer(""developerId"");
		
		assertThat(developer.getPairingDays(), is(0));
	}
",non-flaky,5
113749,salesforce_reactive-grpc,SubscribeOnlyOnceTest.subscribeOnlyOnceLifterErrorsWhenMultipleSubscribe,"    @Test
    public void subscribeOnlyOnceLifterErrorsWhenMultipleSubscribe() throws Exception {
        SubscribeOnlyOnceLifter<Object> op = new SubscribeOnlyOnceLifter<>();
        CoreSubscriber<Object> innerSub = mock(CoreSubscriber.class);
        Subscription subscription = mock(Subscription.class);

        CoreSubscriber<Object> outerSub = op.apply(null, innerSub);

        outerSub.onSubscribe(subscription);
        assertThatThrownBy(() -> outerSub.onSubscribe(subscription))
                .isInstanceOf(NullPointerException.class)
                .hasMessageContaining(""cannot directly subscribe to a gRPC service multiple times"");

        verify(innerSub, times(1)).onSubscribe(subscription);
    }
",non-flaky,5
177208,line_armeria,ClientAuthIntegrationTest.normal,"    @Test
    public void normal() {
        try (ClientFactory clientFactory =
                     ClientFactory.builder()
                                  .tlsCustomizer(ctx -> ctx.keyManager(clientCert.certificateFile(),
                                                                       clientCert.privateKeyFile()))
                                  .tlsNoVerify()
                                  .build()) {
            final WebClient client = WebClient.builder(rule.httpsUri())
                                              .factory(clientFactory)
                                              .decorator(LoggingClient.builder().newDecorator())
                                              .build();
            assertThat(client.get(""/"").aggregate().join().status()).isEqualTo(HttpStatus.OK);
        }
    }
",non-flaky,5
175798,GoogleCloudPlatform_google-cloud-eclipse,RelativeFileFieldSetterTest.testFileDialogFilterSet_relativePathInField,"  @Test
  public void testFileDialogFilterSet_relativePathInField() {
    when(field.getText()).thenReturn(""src/main/appengine/app.yaml"");
    when(dialog.open()).thenReturn(null);

    new RelativeFileFieldSetter(field, basePath, dialog).widgetSelected(event);
    // ""basePath"" is the first physically existing directory.
    verify(dialog).setFilterPath(basePath.toString());

    basePath.append(""src"").toFile().mkdir();
    new RelativeFileFieldSetter(field, basePath, dialog).widgetSelected(event);
    verify(dialog).setFilterPath(basePath + ""/src"");
  }
",non-flaky,5
112069,apache_shardingsphere-elasticjob,StreamingDataflowElasticJobForExecuteFailureTest.assertJobInit,"    @Test
    public void assertJobInit() {
        while (!StreamingDataflowElasticJobForExecuteFailure.isCompleted()) {
            WaitingUtils.waitingShortTime();
        }
        assertTrue(getRegCenter().isExisted(""/"" + getJobName() + ""/sharding""));
    }
",non-flaky,5
255,alibaba_fastjson,Issue1584.test_for_issue,"@Test
public void test_for_issue() throws Exception {
    ParserConfig config = new ParserConfig();
    String json = ""{\""k\"":1,\""v\"":\""A\""}"";
    {
        Map.Entry entry = JSON.parseObject(json, Map.Entry.class, config);
        assertEquals(""v"", entry.getKey());
        assertEquals(""A"", entry.getValue());
    }
    config.putDeserializer(Map.Entry.class, new ObjectDeserializer() {
        public <T> T deserialze(DefaultJSONParser parser, Type type, Object fieldName) {
            JSONObject object = parser.parseObject();
            Object k = object.get(""k"");
            Object v = object.get(""v"");
            return ((T) (Collections.singletonMap(k, v).entrySet().iterator().next()));
        }
        public int getFastMatchToken() {
            return 0;
        }
    });
    Map.Entry entry = JSON.parseObject(json, Map.Entry.class, config);
    assertEquals(1, entry.getKey());
    assertEquals(""A"", entry.getValue());
}",unordered collections,3
175835,GoogleCloudPlatform_google-cloud-eclipse,BucketNameValidatorTest.testValidation_tooLongNameWithDot,"  @Test
  public void testValidation_tooLongNameWithDot() {
    assertThat(validator.validate(LENGTH_222 + ""9"").getSeverity(), is(IStatus.ERROR));
  }
",non-flaky,5
77630,pholser_junit-quickcheck,MonthPropertyParameterTypesTest.shouldHold,"    @Test public void month() {
        @Property public void shouldHold(Month m) {
        }
",non-flaky,5
53149,cloudfoundry_uaa,SamlConfigTest.read_old_json_works,"    @Test
    public void read_old_json_works() throws Exception {
        read_json(oldJson);
        assertEquals(privateKey, config.getPrivateKey());
        assertEquals(passphrase, config.getPrivateKeyPassword());
        assertEquals(certificate, config.getCertificate());
    }
",non-flaky,5
112667,tbsalling_aismessages,NMEAMessageHandlerTest.canHandleFragmentedMessageReceived,"    @Test
    public void canHandleFragmentedMessageReceived() {
        NMEAMessage fragmentedNMEAMessage1 = NMEAMessage.fromString(""!AIVDM,2,1,3,B,55DA><02=6wpPuID000qTf059@DlU<00000000171lMDD4q20LmDp3hB,0*27"");
        NMEAMessage fragmentedNMEAMessage2 = NMEAMessage.fromString(""!AIVDM,2,2,3,B,p=Mh00000000000,2*4C"");

        final ArgumentCaptor<AISMessage> aisMessage = new ArgumentCaptor<>();

        context.checking(new Expectations() {{
            oneOf(aisMessageHandler).accept(with(aisMessage.getMatcher()));
        }});

        aisMessageReceiver.accept(fragmentedNMEAMessage1);
        aisMessageReceiver.accept(fragmentedNMEAMessage2);

        assertEquals(AISMessageType.ShipAndVoyageRelatedData, aisMessage.getCapturedObject().getMessageType());
    }
",non-flaky,5
86061,graylog2_graylog2-server,AggregationEventProcessorConfigTest.testValidateWithInvalidExecutionTime,"    @Test
    public void testValidateWithInvalidExecutionTime() {
        final AggregationEventProcessorConfig invalidConfig1 = getConfig().toBuilder()
            .executeEveryMs(-1)
            .build();

        final ValidationResult validationResult1 = invalidConfig1.validate();
        assertThat(validationResult1.failed()).isTrue();
        assertThat(validationResult1.getErrors()).containsOnlyKeys(""execute_every_ms"");

        final AggregationEventProcessorConfig invalidConfig2 = invalidConfig1.toBuilder()
            .executeEveryMs(0)
            .build();

        final ValidationResult validationResult2 = invalidConfig2.validate();
        assertThat(validationResult2.failed()).isTrue();
        assertThat(validationResult2.getErrors()).containsOnlyKeys(""execute_every_ms"");
    }
",non-flaky,5
76676,quarkusio_quarkus,CustomAuthEmbeddedBase.testSecureRoleFailure,"    @Test()
    public void testSecureRoleFailure() {
        RestAssured.given().auth().preemptive().basic(""jdoe"", ""p4ssw0rd"")
                .when().get(""/secure-test"").then()
                .statusCode(403);
    }
",non-flaky,5
30937,camunda-cloud_zeebe,ElasticsearchExporterTest.shouldExportEnabledValueTypes,"  @Test
  public void shouldExportEnabledValueTypes() {
    // given
    config.index.event = true;
    config.index.deployment = true;
    config.index.process = true;
    config.index.error = true;
    config.index.incident = true;
    config.index.job = true;
    config.index.jobBatch = true;
    config.index.message = true;
    config.index.messageSubscription = true;
    config.index.variable = true;
    config.index.variableDocument = true;
    config.index.processInstance = true;
    config.index.processInstanceCreation = true;
    config.index.processMessageSubscription = true;

    createAndOpenExporter();

    final ValueType[] valueTypes =
        new ValueType[] {
          ValueType.DEPLOYMENT,
          ValueType.PROCESS,
          ValueType.ERROR,
          ValueType.INCIDENT,
          ValueType.JOB,
          ValueType.JOB_BATCH,
          ValueType.MESSAGE,
          ValueType.MESSAGE_SUBSCRIPTION,
          ValueType.VARIABLE,
          ValueType.VARIABLE_DOCUMENT,
          ValueType.PROCESS_INSTANCE,
          ValueType.PROCESS_INSTANCE_CREATION,
          ValueType.PROCESS_MESSAGE_SUBSCRIPTION
        };

    // when - then
    final Context.RecordFilter filter = testHarness.getContext().getFilter();

    assertThat(Arrays.stream(valueTypes).map(filter::acceptValue)).containsOnly(true);
  }
",non-flaky,5
98324,spotify_docker-client,DockerHostTest.testPortFromEnv,"  @Test
  public void testPortFromEnv() throws Exception {
    when(systemDelegate.getenv(""DOCKER_PORT"")).thenReturn(""1234"", (String) null);
    DockerHost.setSystemDelegate(systemDelegate);

    assertThat(DockerHost.portFromEnv(), equalTo(1234));
    assertThat(DockerHost.portFromEnv(), equalTo(2375));
  }
",non-flaky,5
78308,apache_beam,SimpleDoFnRunnerTest.testOnTimerExceptionsWrappedAsUserCodeException,"  @Test
  public void testOnTimerExceptionsWrappedAsUserCodeException() {
    ThrowingDoFn fn = new ThrowingDoFn();
    DoFnRunner<String, String> runner =
        new SimpleDoFnRunner<>(
            null,
            fn,
            NullSideInputReader.empty(),
            null,
            null,
            Collections.emptyList(),
            mockStepContext,
            null,
            Collections.emptyMap(),
            WindowingStrategy.of(new GlobalWindows()));

    thrown.expect(UserCodeException.class);
    thrown.expectCause(is(fn.exceptionToThrow));

    runner.onTimer(
        ThrowingDoFn.TIMER_ID, GlobalWindow.INSTANCE, new Instant(0), TimeDomain.EVENT_TIME);
  }
",non-flaky,5
135034,undertow-io_undertow,SubstringMapTestCase.testSubstringMap,"    @Test
    public void testSubstringMap() {

        SubstringMap<Integer> paths = new SubstringMap<>();

        for (int count = 0; count < 10; ++count) {
            int seed = new Random().nextInt();

            Random random = new Random(seed);
            System.out.println(""Using Seed "" + seed);

            List<String> parts = new ArrayList<>();

            Set<String> keys = new HashSet<>();

            for (int i = 0; i < NUM_TEST_VALUES; ++i) {
                String s = null;
                do {
                    byte[] bytes = new byte[random.nextInt(30) + 5];
                    random.nextBytes(bytes);
                    s = FlexBase64.encodeString(bytes, false);
                } while (keys.contains(s));
                keys.add(s);
                parts.add(s);
                paths.put(s, i);
                Assert.assertEquals(Integer.valueOf(i), paths.get(s, s.length()).getValue());
                Assert.assertEquals(Integer.valueOf(i), paths.get(s + ""fooosdf"", s.length()).getValue());
                String missing = s + ""asdfdasfasf"";
                Assert.assertNull(paths.get(missing, missing.length()));
            }

            for (String k : paths.keys()) {
                Assert.assertTrue(keys.remove(k));
            }
            Assert.assertEquals(0, keys.size());

            for (int i = 0; i < NUM_TEST_VALUES; ++i) {
                String p = parts.get(i);
                Assert.assertEquals(Integer.valueOf(i), paths.get(p, p.length()).getValue());
                Assert.assertEquals(Integer.valueOf(i), paths.get(p + ""asdfdsafasfw"", p.length()).getValue());
            }
            for (int i = 0; i < NUM_TEST_VALUES; ++i) {
                Integer p = paths.remove(parts.get(i));
                Assert.assertEquals(Integer.valueOf(i), p);
            }
        }
    }
",non-flaky,5
33927,apache_camel,CordaConsumerStateMachineFeedIT.stateMachineFeedTest,"    @Test
    public void stateMachineFeedTest() throws Exception {
        mockResult.expectedMinimumMessageCount(1);
        mockError.expectedMessageCount(0);
        MockEndpoint.assertIsSatisfied(context);
    }
",non-flaky,5
77467,opensearch-project_OpenSearch,LoggingListenerTests.invalidMethod,"        @TestLogging(value = ""abc:INFO:WARN"", reason = ""testing an invalid TestLogging method annotation"")
        public void invalidMethod() {

        }
",non-flaky,5
162458,testcontainers_testcontainers-java,KeyValuesStatementTest.valueIsEscapedTest,"    @Test
    public void valueIsEscapedTest() throws Exception {
        ImmutableMap<String, String> pairs = ImmutableMap.<String, String>builder()
                .put(""1"", ""value with spaces"")
                .put(""2"", ""value\nwith\nnewlines"")
                .put(""3"", ""value\twith\ttab"")
                .build();

        assertStatement(new KeyValuesStatement(""TEST"", pairs));
    }
",non-flaky,5
156409,apache_commons-lang,FastDateFormatTest.testDateDefaults,"    @Test
    public void testDateDefaults() {
        assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, Locale.CANADA),
                FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA));

        assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone(""America/New_York"")),
                FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone(""America/New_York""), Locale.getDefault()));

        assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG),
                FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault()));
    }
",non-flaky,5
38,apache_hadoop,TestDFSIO.testReadBackward,"@Test
public void testReadBackward() throws Exception {
    FileSystem fs = cluster.getFileSystem();
    long tStart = System.currentTimeMillis();
    bench.getConf().setLong(""test.io.skip.size"", -DEFAULT_BUFFER_SIZE);
    bench.randomReadTest(fs);
    long execTime = System.currentTimeMillis() - tStart;
    bench.analyzeResult(fs, TestType.TEST_TYPE_READ_BACKWARD, execTime);
}",test order dependency,4
240,nutzam_nutz,JsonTest.test_enum,"@Test
public void test_enum() {
    assertEquals(""\""K\"""", Json.toJson(K.K));
    String expected = ""{\n"" + ((""   \""name\"": \""t\"",\n"" + ""   \""index\"": 1\n"") + ""}"");
    assertEquals(expected, Json.toJson(TT.T));
    assertEquals(""\""T\"""", Json.toJson(TT.T, JsonFormat.full().ignoreJsonShape()));
}",unordered collections,3
135788,Netflix_Hystrix,HystrixThreadPoolTest.getMetricsPublisherForThreadPool,"    @Test
    public void ensureThreadPoolInstanceIsTheOneRegisteredWithMetricsPublisherAndThreadPoolCache() throws IllegalAccessException, NoSuchFieldException {
        HystrixPlugins.getInstance().registerMetricsPublisher(new HystrixMetricsPublisher() {
            @Override
            public HystrixMetricsPublisherThreadPool getMetricsPublisherForThreadPool(HystrixThreadPoolKey threadPoolKey, HystrixThreadPoolMetrics metrics, HystrixThreadPoolProperties properties) {
                return new HystrixMetricsPublisherThreadPoolContainer(metrics);
            }
",non-flaky,5
112075,apache_shardingsphere-elasticjob,JobStatisticExceptionTest.assertGetCause,"    @Test
    public void assertGetCause() {
        assertThat(new JobStatisticException(new RuntimeException()).getCause(), instanceOf(RuntimeException.class));
    }
",non-flaky,5
76700,quarkusio_quarkus,DuplicateSimpleET.testGreetingEndpoint,"    @Test
    public void testGreetingEndpoint() {
        String uuid = UUID.randomUUID().toString();
        given()
                .pathParam(""name"", uuid)
                .when().get(""/hello/greeting/{name}"")
                .then()
                .statusCode(200)
                .body(is(""hello "" + uuid));
    }
",non-flaky,5
113795,salesforce_reactive-grpc,CancellationPropagationIntegrationTest.serverCanCancelClientStreamExplicitlyBidi,"    @Test
    public void serverCanCancelClientStreamExplicitlyBidi() {
        TestService svc = new TestService();
        serverRule.getServiceRegistry().addService(svc);

        RxNumbersGrpc.RxNumbersStub stub = RxNumbersGrpc.newRxStub(serverRule.getChannel());

        svc.setExplicitCancel(true);

        AtomicBoolean requestWasCanceled = new AtomicBoolean(false);
        AtomicBoolean requestDidProduce = new AtomicBoolean(false);

        Flowable<NumberProto.Number> request = Flowable
                .fromIterable(IntStream.range(0, NUMBER_OF_STREAM_ELEMENTS)::iterator)
                .delay(10, TimeUnit.MILLISECONDS)
                .map(CancellationPropagationIntegrationTest::protoNum)
                .doOnNext(n -> {
                    requestDidProduce.set(true);
                    System.out.println(""P: "" + n.getNumber(0));
                })
                .doOnCancel(() -> {
                    requestWasCanceled.set(true);
                    System.out.println(""Client canceled"");
                });

        TestSubscriber<NumberProto.Number> observer = request
                .compose(stub::twoWayPressure)
                .doOnNext(number -> System.out.println(number.getNumber(0)))
                .doOnError(throwable -> System.out.println(throwable.getMessage()))
                .test();

        observer.awaitTerminalEvent();
        observer.assertTerminated();
        assertThat(requestWasCanceled.get()).isTrue();
        assertThat(requestDidProduce.get()).isTrue();

        errorRule.verifyNoError();
    }
",non-flaky,5
179419,abel533_Mapper,NameStyleTest.testCamelhump,"    @Test
    public void testCamelhump(){
        EntityHelper.initEntityNameMap(UserCamelhump.class, config);
        EntityTable entityTable = EntityHelper.getEntityTable(UserCamelhump.class);
        Assert.assertNotNull(entityTable);
        Assert.assertEquals(""user_camelhump"", entityTable.getName());

        Set<EntityColumn> columns = entityTable.getEntityClassColumns();
        Assert.assertEquals(1, columns.size());

        for (EntityColumn column : columns) {
            Assert.assertEquals(""user_name"", column.getColumn());
            Assert.assertEquals(""userName"", column.getProperty());

            Assert.assertEquals(""user_name = #{userName}"", column.getColumnEqualsHolder());
            Assert.assertEquals(""user_name = #{record.userName}"", column.getColumnEqualsHolder(""record""));
            Assert.assertEquals(""#{userName}"", column.getColumnHolder());
            Assert.assertEquals(""#{record.userName}"", column.getColumnHolder(""record""));
            Assert.assertEquals(""#{record.userName}"", column.getColumnHolder(""record"", ""suffix""));
            Assert.assertEquals(""#{record.userNamesuffix},"", column.getColumnHolder(""record"", ""suffix"", "",""));
            Assert.assertNull(column.getTypeHandler());
        }

        ResultMap resultMap = entityTable.getResultMap(configuration);
        Assert.assertEquals(""[USER_NAME]"", resultMap.getMappedColumns().toString());

        Assert.assertEquals(1, resultMap.getResultMappings().size());

        ResultMapping resultMapping = resultMap.getResultMappings().get(0);
        Assert.assertEquals(""user_name"", resultMapping.getColumn());
        Assert.assertEquals(""userName"", resultMapping.getProperty());
        Assert.assertNull(resultMapping.getJdbcType());
        Assert.assertEquals(StringTypeHandler.class, resultMapping.getTypeHandler().getClass());
    }
",non-flaky,5
38198,palantir_atlasdb,RocksDbKeyValuePerfTest.testWritePerf,"    @Test
    public void testWritePerf() throws ExecutionException, InterruptedException {
        final long startTime = System.currentTimeMillis();
        final Future<Pair<Long, Set<byte[]>>>
            f1 = submitWriteJob(0, BATCH_SIZE / 4),
            f2 = submitWriteJob(BATCH_SIZE / 4, BATCH_SIZE / 2),
            f3 = submitWriteJob(BATCH_SIZE / 2, 3 * BATCH_SIZE / 4),
            f4 = submitWriteJob(3 * BATCH_SIZE / 4, BATCH_SIZE);
        final long rawBytes = f1.get().lhSide
                              + f2.get().lhSide
                              + f3.get().lhSide
                              + f4.get().lhSide;
        final long elapsedTime = System.currentTimeMillis() - startTime;
        final double elapsedSeconds = elapsedTime / 1000.0;
        final double megs = rawBytes / (1024.0 * 1024.0);
        System.out.println(""MB = "" + megs);
        System.out.println(""MB/s = "" + (megs/elapsedSeconds));
    }
",non-flaky,5
60943,apache_druid,RowBucketIterableTest.testApplyLastDayMultipleRows,"  @Test
  public void testApplyLastDayMultipleRows()
  {
    intervals = new ArrayList<>();
    intervals.add(INTERVAL_JAN_1_4);

    List<Row> expectedDay1 = Arrays.asList(JAN_1_M_10, JAN_1_F_20);
    List<Row> expectedDay2 = Collections.singletonList(JAN_2_M_10);
    List<Row> expectedDay3 = Collections.singletonList(JAN_3_F_20);
    List<Row> expectedDay4 = Arrays.asList(JAN_4_M_10, JAN_4_F_20, JAN_4_U_30);

    rows = new ArrayList<>();
    rows.add(JAN_1_M_10);
    rows.add(JAN_1_F_20);
    rows.add(JAN_2_M_10);
    rows.add(JAN_3_F_20);
    rows.add(JAN_4_M_10);
    rows.add(JAN_4_F_20);
    rows.add(JAN_4_U_30);

    Sequence<Row> seq = Sequences.simple(rows);
    RowBucketIterable rbi = new RowBucketIterable(seq, intervals, ONE_DAY);
    Iterator<RowBucket> iter = rbi.iterator();

    RowBucket actual = iter.next();
    Assert.assertEquals(expectedDay1, actual.getRows());

    actual = iter.next();
    Assert.assertEquals(expectedDay2, actual.getRows());

    actual = iter.next();
    Assert.assertEquals(expectedDay3, actual.getRows());

    actual = iter.next();
    Assert.assertEquals(expectedDay4, actual.getRows());
  }
",non-flaky,5
106653,Alluxio_alluxio,AlluxioFuseFileSystemTest.read,"  @Test
  public void read() throws Exception {
    // mocks set-up
    AlluxioURI expectedPath = BASE_EXPECTED_URI.join(""/foo/bar"");
    setUpOpenMock(expectedPath);

    FileInStream fakeInStream = mock(FileInStream.class);
    when(fakeInStream.read(any(byte[].class),
        anyInt(), anyInt())).then((Answer<Integer>) invocationOnMock -> {
          byte[] myDest = (byte[]) invocationOnMock.getArguments()[0];
          for (byte i = 0; i < 4; i++) {
            myDest[i] = i;
          }
          return 4;
        });
    when(fakeInStream.remaining()).thenReturn(4L);

    when(mFileSystem.openFile(expectedPath)).thenReturn(fakeInStream);
    mFileInfo.flags.set(O_RDONLY.intValue());

    // prepare something to read to it
    Runtime r = Runtime.getSystemRuntime();
    Pointer ptr = r.getMemoryManager().allocateTemporary(4, true);

    // actual test
    mFuseFs.open(""/foo/bar"", mFileInfo);

    mFuseFs.read(""/foo/bar"", ptr, 4, 0, mFileInfo);
    final byte[] dst = new byte[4];
    ptr.get(0, dst, 0, 4);
    final byte[] expected = new byte[] {0, 1, 2, 3};

    assertArrayEquals(""Source and dst data should be equal"", expected, dst);
  }
",non-flaky,5
112096,apache_shardingsphere-elasticjob,OdevitySortByNameJobShardingStrategyTest.assertShardingByAsc,"    @Test
    public void assertShardingByAsc() {
        Map<JobInstance, List<Integer>> expected = new HashMap<>();
        expected.put(new JobInstance(""host0@-@0""), Collections.singletonList(0));
        expected.put(new JobInstance(""host1@-@0""), Collections.singletonList(1));
        expected.put(new JobInstance(""host2@-@0""), Collections.<Integer>emptyList());
        assertThat(odevitySortByNameJobShardingStrategy.sharding(Arrays.asList(new JobInstance(""host0@-@0""), new JobInstance(""host1@-@0""), new JobInstance(""host2@-@0"")), ""1"", 2), is(expected));
    }
",non-flaky,5
99786,apache_cassandra,MessagingServiceTest.testFailedInternodeAuth,"    @Test
    public void testFailedInternodeAuth() throws Exception
    {
        MessagingService ms = MessagingService.instance();
        DatabaseDescriptor.setInternodeAuthenticator(ALLOW_NOTHING_AUTHENTICATOR);
        InetAddressAndPort address = InetAddressAndPort.getByName(""127.0.0.250"");

        //Should return null
        Message messageOut = Message.out(Verb.ECHO_REQ, NoPayload.noPayload);
        assertFalse(ms.isConnected(address, messageOut));

        //Should tolerate null
        ms.closeOutbound(address);
        ms.send(messageOut, address);
    }
",non-flaky,5
77520,dropwizard_dropwizard,DropwizardAppRuleTest.returnsApplication,"    @Test
    public void returnsApplication() {
        final DropwizardTestApplication application = RULE.getApplication();
        assertThat(application).isNotNull();
    }
",non-flaky,5
21205,androidx_androidx,PreferenceDataStoreTest.testGetStringSetWithDataStoreOnPref,"    @Test
    public void testGetStringSetWithDataStoreOnPref() {
        mPreference.setPreferenceDataStore(mDataStore);
        mScreen.addPreference(mPreference);
        Set<String> testSet = new HashSet<>();

        mPreference.getStringSet(testSet);

        verify(mDataStore, atLeastOnce()).getStringSet(eq(KEY), eq(testSet));
    }
",non-flaky,5
104705,apache_pinot,ServerStarterIntegrationTest.testCustomHost,"  @Test
  public void testCustomHost()
      throws Exception {
    String expectedInstanceId = PREFIX_OF_SERVER_INSTANCE + CUSTOM_HOST + ""_"" + DEFAULT_SERVER_NETTY_PORT;

    Map<String, Object> properties = new HashMap<>();
    properties.put(KEY_OF_SERVER_NETTY_HOST, CUSTOM_HOST);

    verifyInstanceConfig(new PinotConfiguration(properties), expectedInstanceId, CUSTOM_HOST,
        DEFAULT_SERVER_NETTY_PORT);
  }
",non-flaky,5
110172,Wikidata_wikidata-toolkit,TimerTest.timerStopReturnValues,"	@Test
	public void timerStopReturnValues() {
		Timer timer1 = new Timer(""stop test timer"", Timer.RECORD_ALL);
		Timer timer2 = new Timer(""stop test timer wall"", Timer.RECORD_WALLTIME);

		timer1.start();
		timer2.start();
		doDummyComputation();
		long cpuTime1 = timer1.stop();
		long cpuTime2 = timer2.stop();

		assertEquals(cpuTime1, timer1.getTotalCpuTime());
		assertEquals(cpuTime2, -1);

		long cpuTime3 = timer1.stop();
		assertEquals(cpuTime3, -1);
	}
",non-flaky,5
94629,square_okhttp,InterceptorTest.intercept,"  @Test public void asyncNetworkInterceptors() throws Exception {
      @Override public Response intercept(Chain chain) throws IOException {
        Response originalResponse = chain.proceed(chain.request());
        return originalResponse.newBuilder()
            .addHeader(""OkHttp-Intercepted"", ""yep"")
            .build();
      }
",non-flaky,5
176796,ctco_cukes,ContextCapturerTest.shouldTransformMultiplePatternToValidRegex,"    @Test
    public void shouldTransformMultiplePatternToValidRegex() throws Exception {
        String regex = capturer.transformToRegex(""{(hello)} {(world)}"");
        assertThat(regex, equalTo(""(.*) (.*)""));
    }
",non-flaky,5
92594,FasterXML_jackson-databind,TestTypeFactoryWithClassLoader.testCallingOnlyWithModifierGivesExpectedResults,"@Test
public void testCallingOnlyWithModifierGivesExpectedResults(){
	TypeFactory sut = mapper.getTypeFactory().withModifier(typeModifier);
	Assert.assertNull(sut.getClassLoader());
	Assert.assertEquals(typeModifier,sut._modifiers[0]);
}
",non-flaky,5
94646,square_okhttp,ConnectionSpecSelectorTest.nonRetryableSSLHandshakeException,"  @Test
  public void nonRetryableSSLHandshakeException() throws Exception {
    ConnectionSpecSelector connectionSpecSelector =
        createConnectionSpecSelector(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS);
    SSLSocket socket = createSocketWithEnabledProtocols(TlsVersion.TLS_1_1, TlsVersion.TLS_1_0);
    connectionSpecSelector.configureSecureSocket(socket);

    SSLHandshakeException trustIssueException =
        new SSLHandshakeException(""Certificate handshake exception"");
    trustIssueException.initCause(new CertificateException());
    boolean retry = connectionSpecSelector.connectionFailed(trustIssueException);
    assertFalse(retry);
    socket.close();
  }
",non-flaky,5
156423,apache_commons-lang,GmtTimeZoneTest.getID,"    @Test
    public void getID() {
        assertEquals(""GMT+00:00"", new GmtTimeZone(false, 0, 0).getID());
        assertEquals(""GMT+01:02"", new GmtTimeZone(false, 1, 2).getID());
        assertEquals(""GMT+11:22"", new GmtTimeZone(false, 11, 22).getID());
        assertEquals(""GMT-01:02"", new GmtTimeZone(true, 1, 2).getID());
        assertEquals(""GMT-11:22"", new GmtTimeZone(true, 11, 22).getID());
    }
",non-flaky,5
89363,apache_samza,TestKafkaCheckpointManager.testStop,"  @Test
  public void testStop() {
    setupSystemFactory(config());
    KafkaCheckpointManager checkpointManager = buildKafkaCheckpointManager(true, config());
    checkpointManager.stop();
    verify(this.systemProducer).stop();
    // default configuration for stopConsumerAfterFirstRead means that consumer is not stopped here
    verify(this.systemConsumer, never()).stop();
    verify(this.systemAdmin).stop();
  }
",non-flaky,5
113972,apache_struts,RequiredFieldValidatorTest.testArrayObject,"    @Test
    public void testArrayObject() throws Exception {
        // given
        RequiredFieldValidator rfv = container.inject(RequiredFieldValidator.class);
        rfv.setValueStack(ActionContext.getContext().getValueStack());
        rfv.setFieldName(""ints"");
        rfv.setDefaultMessage(""${fieldName} field is required!"");
        ValidationAction action = new ValidationAction();
        action.setInts(new Integer[]{});
        DummyValidatorContext context = new DummyValidatorContext(action, container.getInstance(TextProviderFactory.class));
        rfv.setValidatorContext(context);

        // when
        rfv.validate(action);

        // then
        assertTrue(context.hasFieldErrors());
        assertEquals(1, context.getFieldErrors().size());
        assertNotNull(context.getFieldErrors().get(""ints""));
        assertEquals(""ints field is required!"", context.getFieldErrors().get(""ints"").get(0));
    }
",non-flaky,5
177222,line_armeria,EndpointGroupUtilTest.testReplace,"    @Test
    public void testReplace() throws Exception {
        final String replacement = ""127.0.0.1:1234"";
        assertEquals(""http://myGroupName/"",
                     replaceEndpointGroup(""http://myGroupName/"", replacement));
        assertEquals(""http://myGroupName:8080/xxx"",
                     replaceEndpointGroup(""http://myGroupName:8080/xxx"", replacement));
        assertEquals(""http://group1:myGroupName:8080/"",
                     replaceEndpointGroup(""http://group1:myGroupName:8080/"", replacement));
        assertEquals(""http://username:password@myGroupName:8080/"",
                     replaceEndpointGroup(""http://username:password@myGroupName:8080/"", replacement));

        assertEquals(""http://127.0.0.1:1234/"",
                     replaceEndpointGroup(""http://"" + endpointGroupMark + ""myGroupName/"", replacement));
        assertEquals(""http://127.0.0.1:1234/"",
                     replaceEndpointGroup(""http://"" + endpointGroupMark + ""myGroupName:8080/"", replacement));
        assertEquals(""http://127.0.0.1:1234/xxx"",
                     replaceEndpointGroup(""http://"" + endpointGroupMark + ""myGroupName:8080/xxx"", replacement));
        assertEquals(""http://username:password@127.0.0.1:1234/xxx"",
                     replaceEndpointGroup(""http://username:password@"" + endpointGroupMark +
                                          ""myGroupName:8080/xxx"", replacement));
    }
",non-flaky,5
112646,tbsalling_aismessages,PositionReportClassAResponseToInterrogationTest.canDecode,"    @Test
    public void canDecode() {
        AISMessage aisMessage = AISMessage.create(NMEAMessage.fromString(""!AIVDM,1,1,,A,34RjBV0028o:pnNEBeU<pJF>0PT@,0*3F""));

        System.out.println(aisMessage.toString());

        assertEquals(AISMessageType.PositionReportClassAResponseToInterrogation, aisMessage.getMessageType());
        assertEquals((Integer) 0, aisMessage.getRepeatIndicator());
        PositionReportClassAResponseToInterrogation message = (PositionReportClassAResponseToInterrogation) aisMessage;
        assertEquals(MMSI.valueOf(304911000), message.getSourceMmsi());
        assertEquals(NavigationStatus.UnderwayUsingEngine, message.getNavigationStatus());
        assertEquals((Integer) 0, message.getRateOfTurn());
        assertEquals((Float) 13.6f, message.getSpeedOverGround());
        assertEquals((Integer) 136, message.getRawSpeedOverGround());
        assertTrue(message.getPositionAccuracy());
        assertEquals(Float.valueOf(37.21113f), message.getLatitude());
        assertEquals((Integer)22326676, message.getRawLatitude());
        assertEquals(Float.valueOf(-123.45053f), message.getLongitude());
        assertEquals((Integer)(-74070321), message.getRawLongitude());
        assertEquals(Float.valueOf(329.7f), message.getCourseOverGround());
        assertEquals((Integer) 3297, message.getRawCourseOverGround());
        assertEquals((Integer) 331, message.getTrueHeading());
        assertEquals((Integer) 7, message.getSecond());
        assertEquals(ManeuverIndicator.NotAvailable, message.getSpecialManeuverIndicator());
        assertFalse(message.getRaimFlag());
    }
",non-flaky,5
324,apache_hadoop,TestDFSClientCache.testGetUserGroupInformation,"  @Test
  public void testGetUserGroupInformation() throws IOException {
    String userName = ""user1"";
    String currentUser = ""currentUser"";

    UserGroupInformation currentUserUgi = UserGroupInformation
            .createUserForTesting(currentUser, new String[0]);
    NfsConfiguration conf = new NfsConfiguration();
    conf.set(FileSystem.FS_DEFAULT_NAME_KEY, ""hdfs://localhost"");
    DFSClientCache cache = new DFSClientCache(conf);
    UserGroupInformation ugiResult
            = cache.getUserGroupInformation(userName, currentUserUgi);

    assertThat(ugiResult.getUserName(), is(userName));
    assertThat(ugiResult.getRealUser(), is(currentUserUgi));
    assertThat(
            ugiResult.getAuthenticationMethod(),
            is(UserGroupInformation.AuthenticationMethod.PROXY));
  }
",non-flaky,5
98588,nutzam_nutz,El2Test.testNull,"    @Test
    public void testNull() {
        assertEquals(null, El.eval(""null""));
        assertTrue((Boolean) El.eval(""null == null""));
    }
",non-flaky,5
135744,Netflix_Hystrix,HystrixPropertyTest.testNested5,"    @Test
    public void testNested5() {
        HystrixProperty<String> nullValue = Factory.nullProperty();
        HystrixProperty<String> a = Factory.asProperty(nullValue, null);

        @SuppressWarnings(""unchecked"")
        HystrixProperty<String> withDefault = Factory.asProperty(a, Factory.asProperty(""b""));
        assertEquals(""b"", withDefault.get());
    }
",non-flaky,5
26913,wildfly_wildfly,JSFModuleIdFactoryTestCase.validSlotTest,"    @Test
    public void validSlotTest() {
        Assert.assertTrue(factory.isValidJSFSlot(""main""));
        Assert.assertFalse(factory.isValidJSFSlot(""1.2""));
        Assert.assertTrue(factory.isValidJSFSlot(""myfaces""));
        Assert.assertTrue(factory.isValidJSFSlot(""myfaces2""));
        Assert.assertTrue(factory.isValidJSFSlot(JsfVersionMarker.JSF_2_0));
        Assert.assertFalse(factory.isValidJSFSlot(JsfVersionMarker.WAR_BUNDLES_JSF_IMPL));
        Assert.assertFalse(factory.isValidJSFSlot(""bogus""));
        Assert.assertFalse(factory.isValidJSFSlot(""bogus2""));
   }
",non-flaky,5
114009,apache_struts,StrutsTilesAnnotationProcessorTest.findAnnotationSingleAction,"    @Test
    public void findAnnotationSingleAction() {
        StrutsTilesAnnotationProcessor annotationProcessor = new StrutsTilesAnnotationProcessor();
        TilesDefinition tilesDefinition = annotationProcessor.findAnnotation(new TilesTestActionSingleAnnotation(), null);
        Assert.assertNotNull(tilesDefinition);
        Assert.assertEquals(""definition-name"", tilesDefinition.name());
    }
",non-flaky,5
59605,looly_hutool,ExtractorTest.sevenZTest,"	@Test
	public void sevenZTest(){
		Extractor extractor = CompressUtil.createExtractor(
				CharsetUtil.defaultCharset(),
				FileUtil.file(""d:/test/compress/test.7z""));

		extractor.extract(FileUtil.file(""d:/test/compress/test2/""));
	}
",non-flaky,5
21190,androidx_androidx,PreferenceIconSpaceTest.bindViewHolder_hasIcon_shouldDisplayIcon,"    @Test
    public void bindViewHolder_hasIcon_shouldDisplayIcon() {
        PreferenceViewHolder holder = PreferenceViewHolder.createInstanceForTests(mViewGroup);
        mPreference.setIcon(new ColorDrawable(Color.BLACK));
        mPreference.onBindViewHolder(holder);

        verify(mIconView).setVisibility(View.VISIBLE);
        verify(mImageFrame).setVisibility(View.VISIBLE);
    }
",non-flaky,5
134001,CorfuDB_CorfuDB,OneNodeDownIT.oneNodeDownTest,"    @Test(timeout = 300000)
    public void oneNodeDownTest() {

        workflow(wf -> {
            wf.deploy();

            try {
                oneNodeDown(wf);
            } catch (InterruptedException e) {
                fail(""Test failed"", e);
            }
        });
    }
",non-flaky,5
99747,apache_cassandra,AsyncStreamingInputPlusTest.append_closed,"    @Test
    public void append_closed()
    {
        inputPlus = new AsyncStreamingInputPlus(channel);
        inputPlus.requestClosure();
        inputPlus.close();
        buf = channel.alloc().buffer(4);
        assertFalse(inputPlus.append(buf));
    }
",non-flaky,5
84648,apache_zookeeper,ZooKeeperTest.testDeleteRecursiveCli,"    @Test
    public void testDeleteRecursiveCli() throws IOException, InterruptedException, CliException, KeeperException {
        final ZooKeeper zk = createClient();
        // making sure setdata works on /
        zk.setData(""/"", ""some"".getBytes(), -1);
        zk.create(""/a"", ""some"".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);

        zk.create(""/a/b"", ""some"".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);

        zk.create(""/a/b/v"", ""some"".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);

        zk.create(""/a/b/v/1"", ""some"".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);

        zk.create(""/a/c"", ""some"".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);

        zk.create(""/a/c/v"", ""some"".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);

        List<String> children = zk.getChildren(""/a"", false);

        assertEquals(children.size(), 2, ""2 children - b & c should be present "");
        assertTrue(children.contains(""b""));
        assertTrue(children.contains(""c""));

        ZooKeeperMain zkMain = new ZooKeeperMain(zk);
        String cmdstring1 = ""deleteall /a"";
        zkMain.cl.parseCommand(cmdstring1);
        assertFalse(zkMain.processZKCmd(zkMain.cl));
        assertNull(zk.exists(""/a"", null));
    }
",non-flaky,5
122565,vespa-engine_vespa,CommandLineTest.addTokensWithSpecialCharacters,"    @Test
    public void addTokensWithSpecialCharacters() {
        terminal.expectCommand(""find . ! -name hei 2>&1"");
        commandLine.addTokens(""find . ! -name hei"").execute();

        terminal.verifyAllCommandsExecuted();
    }
",non-flaky,5
177980,aosp-mirror_platform_frameworks_support,BidiFormatterTest.testIsRtlContext,"    @Test
    public void testIsRtlContext() {
        assertEquals(false, LTR_FMT.isRtlContext());
        assertEquals(true, RTL_FMT.isRtlContext());

        assertEquals(false, BidiFormatter.getInstance(Locale.ENGLISH).isRtlContext());
        assertEquals(true, BidiFormatter.getInstance(true).isRtlContext());
    }
",non-flaky,5
21184,androidx_androidx,SimplePreferenceComparisonCallbackTest.testEnabledComparison,"    @Test
    public void testEnabledComparison() throws Exception {
        mPref1.setEnabled(true);
        mPref2.setEnabled(true);

        assertTrue(""Compare enabled"",
                mComparisonCallback.arePreferenceContentsTheSame(mPref1, mPref2));

        mPref2.setEnabled(false);

        assertFalse(""Compare enabled/disabled"",
                mComparisonCallback.arePreferenceContentsTheSame(mPref1, mPref2));
        assertFalse(""Compare disable/enabled"",
                mComparisonCallback.arePreferenceContentsTheSame(mPref2, mPref1));

        mPref1.setEnabled(false);

        assertTrue(""Compare disabled"",
                mComparisonCallback.arePreferenceContentsTheSame(mPref1, mPref2));
    }
",non-flaky,5
122572,vespa-engine_vespa,MakeDirectoryTest.exceptionIfMissingParent,"    @Test
    public void exceptionIfMissingParent() {
        String path = ""/parent/dir"";
        MakeDirectory makeDirectory = new MakeDirectory(fileSystem.getPath(path));

        try {
            makeDirectory.converge(context);
        } catch (UncheckedIOException e) {
            if (e.getCause() instanceof NoSuchFileException) {
                return;
            }
            throw e;
        }
        fail();
    }
",non-flaky,5
178010,aosp-mirror_platform_frameworks_support,PlaybackControlGlueTest.testFastForwardAbortKeyCodes,"    @Test
    public void testFastForwardAbortKeyCodes() {
        PlaybackControlsRow row = new PlaybackControlsRow();
        glue.setControlsRow(row);
        SparseArrayObjectAdapter adapter = (SparseArrayObjectAdapter)
                row.getPrimaryActionsAdapter();
        PlaybackControlsRow.MultiAction playPause = (PlaybackControlsRow.MultiAction) adapter
                .lookup(PlaybackControlGlue.ACTION_PLAY_PAUSE);
        PlaybackControlsRow.MultiAction fastForward = (PlaybackControlsRow.MultiAction) adapter
                .lookup(PlaybackControlGlue.ACTION_FAST_FORWARD);
        PlaybackControlsRow.MultiAction rewind = (PlaybackControlsRow.MultiAction) adapter
                .lookup(PlaybackControlGlue.ACTION_REWIND);

        glue.onActionClicked(playPause);
        assertTrue(glue.isMediaPlaying());
        assertEquals(PlaybackControlGlue.PLAYBACK_SPEED_NORMAL, glue.getCurrentSpeedId());
        assertEquals(0, fastForward.getIndex());
        assertEquals(0, rewind.getIndex());

        // Testing keycodes that will not abort seek
        final int[] noAbortSeekKeyCodes = new int[] {
                KeyEvent.KEYCODE_DPAD_CENTER,
                KeyEvent.KEYCODE_ENTER
        };
        for (int i = 0; i < noAbortSeekKeyCodes.length; i++) {
            glue.onActionClicked(fastForward);
            assertEquals(PlaybackControlGlue.PLAYBACK_SPEED_FAST_L0, glue.getCurrentSpeedId());
            assertEquals(1, fastForward.getIndex());
            assertEquals(0, rewind.getIndex());
            KeyEvent kv = new KeyEvent(KeyEvent.ACTION_DOWN, noAbortSeekKeyCodes[i]);
            glue.onKey(null, noAbortSeekKeyCodes[i], kv);
            assertEquals(PlaybackControlGlue.PLAYBACK_SPEED_FAST_L0, glue.getCurrentSpeedId());
            glue.onActionClicked(playPause);
            assertEquals(PlaybackControlGlue.PLAYBACK_SPEED_NORMAL, glue.getCurrentSpeedId());
        }

        // Testing abortSeekKeyCodes
        final int[] abortSeekKeyCodes = new int[] {
            KeyEvent.KEYCODE_DPAD_UP,
            KeyEvent.KEYCODE_DPAD_DOWN,
            KeyEvent.KEYCODE_DPAD_RIGHT,
            KeyEvent.KEYCODE_DPAD_LEFT,
            KeyEvent.KEYCODE_BACK,
            KeyEvent.KEYCODE_ESCAPE
        };
        for (int i = 0; i < abortSeekKeyCodes.length; i++) {
            glue.onActionClicked(fastForward);
            assertEquals(PlaybackControlGlue.PLAYBACK_SPEED_FAST_L0, glue.getCurrentSpeedId());
            assertEquals(1, fastForward.getIndex());
            assertEquals(0, rewind.getIndex());
            KeyEvent kv = new KeyEvent(KeyEvent.ACTION_DOWN, abortSeekKeyCodes[i]);
            glue.onKey(null, abortSeekKeyCodes[i], kv);
            assertEquals(PlaybackControlGlue.PLAYBACK_SPEED_NORMAL, glue.getCurrentSpeedId());
            assertEquals(0, fastForward.getIndex());
            assertEquals(0, rewind.getIndex());
        }
    }
",non-flaky,5
77454,opensearch-project_OpenSearch,PreBuiltTransportClientTests.testPluginInstalled,"    @Test
    public void testPluginInstalled() {
        try (TransportClient client = new PreBuiltTransportClient(Settings.EMPTY)) {
            Settings settings = client.settings();
            assertEquals(Netty4Plugin.NETTY_TRANSPORT_NAME, NetworkModule.HTTP_DEFAULT_TYPE_SETTING.get(settings));
            assertEquals(Netty4Plugin.NETTY_TRANSPORT_NAME, NetworkModule.TRANSPORT_DEFAULT_TYPE_SETTING.get(settings));
        }
    }
",non-flaky,5
38268,palantir_atlasdb,AbstractSerializableTransactionTest.testCellReadWriteFailure,"    @Test
    public void testCellReadWriteFailure() {
        String initialValue = ""100"";
        Transaction t0 = startTransaction();
        put(t0, ""row1"", ""col1"", initialValue);
        put(t0, ""row2"", ""col1"", initialValue);
        t0.commit();

        Transaction t1 = startTransaction();
        BatchingVisitables.copyToList(t1.getRange(TEST_TABLE, RangeRequest.builder().build()));
        put(t1, ""row22"", ""col1"", initialValue);

        Transaction t2 = startTransaction();
        put(t2, ""row3"", ""col1"", initialValue);
        t2.commit();

        try {
            t1.commit();
            fail();
        } catch (TransactionSerializableConflictException e) {
            // this is expectecd to throw because it is a write skew
        }
    }
",non-flaky,5
159651,liquibase_liquibase,AbstractIntegrationTest.testRerunDiffChangeLogAltSchema,"    @Test
    public void testRerunDiffChangeLogAltSchema() throws Exception {
        assumeNotNull(this.getDatabase());
        if (database.getShortName().equalsIgnoreCase(""mssql"")) {
            return; // not possible on MSSQL.
        }
        if (!database.supportsSchemas()) {
            return;
        }

        Liquibase liquibase = createLiquibase(includedChangeLog);
        database.setDefaultSchemaName(""lbcat2"");
        clearDatabase();


        LockService lockService = LockServiceFactory.getInstance().getLockService(database);
        lockService.forceReleaseLock();

        liquibase.update(includedChangeLog);

        DatabaseSnapshot originalSnapshot = SnapshotGeneratorFactory.getInstance().createSnapshot(database.getDefaultSchema(), database, new SnapshotControl(database));

        CompareControl compareControl = new CompareControl(
                new CompareControl.SchemaComparison[]{
                        new CompareControl.SchemaComparison(
                                CatalogAndSchema.DEFAULT,
                                new CatalogAndSchema(null, ""lbcat2"")
                        )
                },
                originalSnapshot.getSnapshotControl().getTypesToInclude()
        );
        DiffResult diffResult = DiffGeneratorFactory.getInstance().compare(database, null, compareControl);

        File tempFile = File.createTempFile(""liquibase-test"", "".xml"");

        FileOutputStream output = new FileOutputStream(tempFile);
        try {
            new DiffToChangeLog(diffResult, new DiffOutputControl()).print(new PrintStream(output));
            output.flush();
        } finally {
            output.close();
        }

        liquibase = createLiquibase(tempFile.getName());
        clearDatabase();

        //run again to test changelog testing logic
        Executor executor = ExecutorService.getInstance().getExecutor(database);
        try {
            executor.execute(new DropTableStatement(""lbcat2"", ""lbcat2"", database.getDatabaseChangeLogTableName(), false));
        } catch (DatabaseException e) {
            //ok
        }
        try {
            executor.execute(new DropTableStatement(""lbcat2"", ""lbcat2"", database.getDatabaseChangeLogLockTableName(), false));
        } catch (DatabaseException e) {
            //ok
        }
        database.commit();

        DatabaseConnection connection = DatabaseTestContext.getInstance().getConnection(getJdbcUrl(), username, password);
        database = DatabaseFactory.getInstance().findCorrectDatabaseImplementation(connection);
        database.setDefaultSchemaName(""lbcat2"");
        liquibase = createLiquibase(tempFile.getName());
        try {
            liquibase.update(this.contexts);
        } catch (ValidationFailedException e) {
            e.printDescriptiveError(System.out);
            throw e;
        }

        tempFile.deleteOnExit();

        DatabaseSnapshot finalSnapshot = SnapshotGeneratorFactory.getInstance().createSnapshot(database.getDefaultSchema(), database, new SnapshotControl(database));

        CompareControl finalCompareControl = new CompareControl();
        finalCompareControl.addSuppressedField(Column.class, ""autoIncrementInformation"");
        DiffResult finalDiffResult = DiffGeneratorFactory.getInstance().compare(originalSnapshot, finalSnapshot, finalCompareControl);
        new DiffToReport(finalDiffResult, System.out).print();
        assertTrue(""running the same change log two times against an alternative schema should produce "" +
                        ""equal snapshots."",
                finalDiffResult.areEqual());
    }
",non-flaky,5
160388,ConsenSys_teku,ChainDataProviderTest.getBeaconState_shouldFindHeadState,"  @Test
  public void getBeaconState_shouldFindHeadState() throws ExecutionException, InterruptedException {
    final ChainDataProvider provider =
        new ChainDataProvider(spec, recentChainData, combinedChainDataClient);
    SafeFuture<Optional<BeaconState>> future = provider.getBeaconState(""head"");
    final Optional<BeaconState> maybeState = future.get();
    assertThat(maybeState.get().asInternalBeaconState(spec).hashTreeRoot())
        .isEqualTo(beaconStateInternal.hashTreeRoot());
  }
",non-flaky,5
98035,vert-x3_vertx-mongo-client,MongoClientBulkWriteResultTest.testJsonMongoClientBulkWriteResult,"  @Test
  public void testJsonMongoClientBulkWriteResult() {
    properJson();

    jsonWithoutRequiredFields();
  }
",non-flaky,5
91435,strapdata_elassandra,ActivateWatchTests.testDeactivateAndActivate,"@TestLogging(""org.elasticsearch.xpack.watcher:DEBUG,org.elasticsearch.xpack.watcher.WatcherIndexingListener:TRACE"")
    public void testDeactivateAndActivate() throws Exception {
        PutWatchResponse putWatchResponse = watcherClient().preparePutWatch()
                .setId(""_id"")
                .setSource(watchBuilder()
                        .trigger(schedule(interval(""1s"")))
                        .input(simpleInput(""foo"", ""bar""))
                        .addAction(""_a1"", indexAction(""actions"", ""action1""))
                        .defaultThrottlePeriod(new TimeValue(0, TimeUnit.SECONDS)))
                .get();

        assertThat(putWatchResponse.isCreated(), is(true));

        GetWatchResponse getWatchResponse = watcherClient().prepareGetWatch(""_id"").get();
        assertThat(getWatchResponse, notNullValue());
        assertThat(getWatchResponse.getStatus().state().isActive(), is(true));

        logger.info(""Waiting for watch to be executed at least once"");
        assertWatchWithMinimumActionsCount(""_id"", ExecutionState.EXECUTED, 1);

        // we now know the watch is executing... lets deactivate it
        ActivateWatchResponse activateWatchResponse = watcherClient().prepareActivateWatch(""_id"", false).get();
        assertThat(activateWatchResponse, notNullValue());
        assertThat(activateWatchResponse.getStatus().state().isActive(), is(false));

        getWatchResponse = watcherClient().prepareGetWatch(""_id"").get();
        assertThat(getWatchResponse, notNullValue());
        assertThat(getWatchResponse.getStatus().state().isActive(), is(false));

        // wait until no watch is executing
        assertBusy(() -> {
            WatcherStatsResponse statsResponse = watcherClient().prepareWatcherStats().setIncludeCurrentWatches(true).get();
            int sum = statsResponse.getNodes().stream().map(WatcherStatsResponse.Node::getSnapshots).mapToInt(List::size).sum();
            assertThat(sum, is(0));
        });

        logger.info(""Ensured no more watches are being executed"");
        refresh();
        long count1 = docCount("".watcher-history*"", ""doc"", matchAllQuery());

        logger.info(""Sleeping for 5 seconds, watch history count [{}]"", count1);
        Thread.sleep(5000);

        refresh();
        long count2 = docCount("".watcher-history*"", ""doc"", matchAllQuery());

        assertThat(count2, is(count1));

        // lets activate it again
        logger.info(""Activating watch again"");

        activateWatchResponse = watcherClient().prepareActivateWatch(""_id"", true).get();
        assertThat(activateWatchResponse, notNullValue());
        assertThat(activateWatchResponse.getStatus().state().isActive(), is(true));

        getWatchResponse = watcherClient().prepareGetWatch(""_id"").get();
        assertThat(getWatchResponse, notNullValue());
        assertThat(getWatchResponse.getStatus().state().isActive(), is(true));

        logger.info(""Sleeping for another five seconds, ensuring that watch is executed"");
        Thread.sleep(5000);
        refresh();
        long count3 = docCount("".watcher-history*"", ""doc"", matchAllQuery());
        assertThat(count3, greaterThan(count1));
    }
",non-flaky,5
26749,MundaneImmortal_pair-distribution-app,DeveloperTest.testGetPairingDaysOne,"	@Test
	public void testGetPairingDaysOne() {
		Developer developer = new Developer(""developerId"");
		
		developer.udpatePairingDays();
		
		assertThat(developer.getPairingDays(), is(1));
	}
",non-flaky,5
19463,eclipse_xtext-core,DelegatingScopeProviderTest.testOneSuitableDelegate_01,"	@Test
	public void testOneSuitableDelegate_01() {
		TestableDelegatingScopeProvider root = new TestableDelegatingScopeProvider();
		TestableDelegatingScopeProvider delegating = new TestableDelegatingScopeProvider(root);
		
		delegating.setWrapper(this);
		Assert.assertEquals(1, delegating.invocationCount);
		Assert.assertEquals(1, root.invocationCount);
		
		IDelegatingScopeProvider.setWrapper(delegating, null);
		Assert.assertEquals(2, delegating.invocationCount);
		Assert.assertEquals(2, root.invocationCount);
	}
",non-flaky,5
114057,aws_aws-sdk-java-v2,EnhancedTypeTest.staticInnerTypesWork,"    @Test
    public void staticInnerTypesWork() {
        EnhancedType<InnerStaticType> enhancedType = new EnhancedType<InnerStaticType>(){};
        assertThat(enhancedType.rawClass()).isEqualTo(InnerStaticType.class);
    }
",non-flaky,5
113754,salesforce_reactive-grpc,GrpcRetryTest.noRetryMakesErrorFlowabable,"    @Test
    public void noRetryMakesErrorFlowabable() {
        Flux<Integer> test = newThreeErrorFlux()
                .as(flux -> flux);

        StepVerifier.create(test)
                .expectErrorMessage(""Not yet!"")
                .verify(Duration.ofSeconds(1));
    }
",non-flaky,5
110175,Wikidata_wikidata-toolkit,ValueRdfConverterTest.testWriteUnboundedQuantityValue,"	@Test
	public void testWriteUnboundedQuantityValue() throws RDFHandlerException,
			RDFParseException, IOException {
		QuantityValueConverter valueConverter = new QuantityValueConverter(
				this.rdfWriter, this.propertyRegister, this.rdfConversionBuffer);

		QuantityValue value = this.objectFactory.getQuantityValue(new BigDecimal(100));
		PropertyIdValue propertyIdValue = objectFactory.getPropertyIdValue(
				""P1081"", ""http://www.wikidata.org/entity/"");
		Value valueURI = valueConverter.getRdfValue(value, propertyIdValue,
				false);
		valueConverter.writeValue(value, (Resource) valueURI);
		this.rdfWriter.finish();
		Model model = RdfTestHelpers.parseRdf(this.out.toString());
		assertEquals(model, RdfTestHelpers.parseRdf(RdfTestHelpers
				.getResourceFromFile(""UnboundedQuantityValue.rdf"")));
	}
",non-flaky,5
160369,ConsenSys_teku,SignedAttestationTest.shouldCreate,"  @Test
  public void shouldCreate() {
    final SignedAttestation signedAttestation = new SignedAttestation(source, target, signingRoot);
    assertThat(signedAttestation.sourceEpoch).isEqualTo(source);
    assertThat(signedAttestation.targetEpoch).isEqualTo(target);
    assertThat(signedAttestation.signingRoot).isEqualTo(signingRoot);
  }
",non-flaky,5
43121,trinodb_trino,BaseConnectorSmokeTest.verifySupportsRowLevelDeleteDeclaration,"    @Test
    public void verifySupportsRowLevelDeleteDeclaration()
    {
        if (hasBehavior(SUPPORTS_ROW_LEVEL_DELETE)) {
            // Covered by testRowLevelDelete
            return;
        }

        skipTestUnless(hasBehavior(SUPPORTS_CREATE_TABLE));
        try (TestTable table = new TestTable(getQueryRunner()::execute, ""test_supports_row_level_delete"", ""AS SELECT * FROM region"")) {
            assertQueryFails(""DELETE FROM "" + table.getName() + "" WHERE regionkey = 2"", ""This connector does not support deletes"");
        }
    }
",non-flaky,5
33875,apache_camel,FhirUpdateIT.testResourceBySearchUrl,"    @Test
    public void testResourceBySearchUrl() throws Exception {
        Date date = new SimpleDateFormat(""yyyy-MM-dd"").parse(""1998-04-29"");
        assertNotEquals(date, patient.getBirthDate());
        this.patient.setBirthDate(date);
        String url = ""Patient?"" + Patient.SP_IDENTIFIER + '=' + URLEncoder.encode(this.patient.getId(), ""UTF-8"");
        final Map<String, Object> headers = new HashMap<>();
        // parameter type is org.hl7.fhir.instance.model.api.IBaseResource
        headers.put(""CamelFhir.resource"", this.patient);
        // parameter type is String
        headers.put(""CamelFhir.url"", url);
        // parameter type is ca.uhn.fhir.rest.api.PreferReturnEnum
        headers.put(""CamelFhir.preferReturn"", PreferReturnEnum.REPRESENTATION);

        MethodOutcome result = requestBodyAndHeaders(""direct://RESOURCE_BY_SEARCH_URL"", null, headers);

        assertNotNull(result, ""resource result"");
        LOG.debug(""resource: "" + result);
        assertEquals(date, ((Patient) result.getResource()).getBirthDate(), ""Birth date not updated!"");
    }
",non-flaky,5
77684,pholser_junit-quickcheck,PrimitivePropertyParameterTypesTest.shouldHold,"    @Test public void shrinkingPrimitiveNegativeByte() {
        @Property public void shouldHold(@InRange(min = ""-101"", max = ""-13"") byte b) {
            values.add(b);

            fail();
        }
",non-flaky,5
112134,apache_shardingsphere-elasticjob,JobCoreConfigurationTest.assertBuildWhenJobNameIsNull,"    @Test(expected = IllegalArgumentException.class)
    public void assertBuildWhenJobNameIsNull() {
        JobCoreConfiguration.newBuilder(null, ""0/1 * * * * ?"", 3).build();
    }
",non-flaky,5
159703,liquibase_liquibase,LockServiceExecuteTest.performTest,"//    @Test
//    public void waitForLock_severalAquireLocksCalled() throws Exception {
//        new DatabaseTestTemplate().testOnAvailableDatabases(new DatabaseTest() {
//            public void performTest(Database database) throws Exception {
//                assertTrue(LockService.getInstance(database).acquireLock());
//                assertTrue(LockService.getInstance(database).acquireLock());
//                assertTrue(LockService.getInstance(database).acquireLock());
//                assertTrue(LockService.getInstance(database).acquireLock());
//            }
",non-flaky,5
30982,camunda-cloud_zeebe,ObjectMappingDefaultValuesTest.shouldNotReturnDefaultValueForExistingProperty,"  @Test
  public void shouldNotReturnDefaultValueForExistingProperty() {
    // given
    final MutableDirectBuffer msgPackBuffer =
        encodeMsgPack(
            (w) -> {
              w.writeMapHeader(2);
              w.writeString(wrapString(""noDefaultValueProp""));
              w.writeInteger(123123L);
              w.writeString(wrapString(""defaultValueProp""));
              w.writeInteger(987L);
            });

    final long defaultValue = -1L;
    final DefaultValuesPOJO pojo = new DefaultValuesPOJO(defaultValue);

    // when
    pojo.wrap(msgPackBuffer);

    // then
    assertThat(pojo.getNoDefaultValueProperty()).isEqualTo(123123L);
    assertThat(pojo.getDefaultValueProperty()).isEqualTo(987L);
  }
",non-flaky,5
170486,eclipse_jetty.project,ConnectorServerTest.testNoRegistryHostBindsToHost,"    @Test
    public void testNoRegistryHostBindsToHost() throws Exception
    {
        connectorServer = new ConnectorServer(new JMXServiceURL(""service:jmx:rmi:///jndi/rmi:///jmxrmi""), objectName);
        connectorServer.start();

        // Verify that I can connect to the RMI registry using a non-loopback address.
        new Socket(InetAddress.getLocalHost(), 1099).close();
        assertThrows(ConnectException.class, () ->
        {
            // Verify that I cannot connect to the RMI registry using the loopback address.
            new Socket(InetAddress.getLoopbackAddress(), 1099).close();
        });
    }
",non-flaky,5
43045,trinodb_trino,BaseConnectorTest.testAggregation,"    @Test
    public void testAggregation()
    {
        assertQuery(""SELECT sum(orderkey) FROM orders"");
        assertQuery(""SELECT sum(totalprice) FROM orders"");
        assertQuery(""SELECT max(comment) FROM nation"");

        assertQuery(""SELECT count(*) FROM orders"");
        assertQuery(""SELECT count(*) FROM orders WHERE orderkey > 10"");
        assertQuery(""SELECT count(*) FROM (SELECT * FROM orders LIMIT 10)"");
        assertQuery(""SELECT count(*) FROM (SELECT * FROM orders WHERE orderkey > 10 LIMIT 10)"");

        assertQuery(""SELECT DISTINCT regionkey FROM nation"");
        assertQuery(""SELECT regionkey FROM nation GROUP BY regionkey"");

        // TODO support aggregation pushdown with GROUPING SETS
        assertQuery(
                ""SELECT regionkey, nationkey FROM nation GROUP BY GROUPING SETS ((regionkey), (nationkey))"",
                ""SELECT NULL, nationkey FROM nation "" +
                        ""UNION ALL SELECT DISTINCT regionkey, NULL FROM nation"");
        assertQuery(
                ""SELECT regionkey, nationkey, count(*) FROM nation GROUP BY GROUPING SETS ((), (regionkey), (nationkey), (regionkey, nationkey))"",
                ""SELECT NULL, NULL, count(*) FROM nation "" +
                        ""UNION ALL SELECT NULL, nationkey, 1 FROM nation "" +
                        ""UNION ALL SELECT regionkey, NULL, count(*) FROM nation GROUP BY regionkey "" +
                        ""UNION ALL SELECT regionkey, nationkey, 1 FROM nation"");

        assertQuery(""SELECT count(regionkey) FROM nation"");
        assertQuery(""SELECT count(DISTINCT regionkey) FROM nation"");
        assertQuery(""SELECT regionkey, count(*) FROM nation GROUP BY regionkey"");

        assertQuery(""SELECT min(regionkey), max(regionkey) FROM nation"");
        assertQuery(""SELECT min(DISTINCT regionkey), max(DISTINCT regionkey) FROM nation"");
        assertQuery(""SELECT regionkey, min(regionkey), min(name), max(regionkey), max(name) FROM nation GROUP BY regionkey"");

        assertQuery(""SELECT sum(regionkey) FROM nation"");
        assertQuery(""SELECT sum(DISTINCT regionkey) FROM nation"");
        assertQuery(""SELECT regionkey, sum(regionkey) FROM nation GROUP BY regionkey"");

        assertQuery(
                ""SELECT avg(nationkey) FROM nation"",
                ""SELECT avg(CAST(nationkey AS double)) FROM nation"");
        assertQuery(
                ""SELECT avg(DISTINCT nationkey) FROM nation"",
                ""SELECT avg(DISTINCT CAST(nationkey AS double)) FROM nation"");
        assertQuery(
                ""SELECT regionkey, avg(nationkey) FROM nation GROUP BY regionkey"",
                ""SELECT regionkey, avg(CAST(nationkey AS double)) FROM nation GROUP BY regionkey"");
    }
",non-flaky,5
33904,apache_camel,ReleaseProducerIntegrationIT.configure,"    @Test
            public void configure() {
                from(""direct:start"").to(""beanstalk:"" + tubeName + ""?command=release"").to(""mock:result"");
            }
",non-flaky,5
30936,camunda-cloud_zeebe,ElasticsearchExporterTest.shouldCreateIndexTemplates,"  @Test
  public void shouldCreateIndexTemplates() {
    // given
    config.index.prefix = ""foo-bar"";
    config.index.createTemplate = true;
    config.index.deployment = true;
    config.index.process = true;
    config.index.error = true;
    config.index.incident = true;
    config.index.job = true;
    config.index.jobBatch = true;
    config.index.message = true;
    config.index.messageSubscription = true;
    config.index.variable = true;
    config.index.variableDocument = true;
    config.index.processInstance = true;
    config.index.processInstanceCreation = true;
    config.index.processMessageSubscription = true;

    // when
    createAndOpenExporter();
    testHarness.export();

    // then
    verify(esClient).putComponentTemplate(""foo-bar"", ""foo-bar"", ZEEBE_RECORD_TEMPLATE_JSON);

    verify(esClient).putIndexTemplate(ValueType.DEPLOYMENT);
    verify(esClient).putIndexTemplate(ValueType.PROCESS);
    verify(esClient).putIndexTemplate(ValueType.ERROR);
    verify(esClient).putIndexTemplate(ValueType.INCIDENT);
    verify(esClient).putIndexTemplate(ValueType.JOB);
    verify(esClient).putIndexTemplate(ValueType.JOB_BATCH);
    verify(esClient).putIndexTemplate(ValueType.MESSAGE);
    verify(esClient).putIndexTemplate(ValueType.MESSAGE_SUBSCRIPTION);
    verify(esClient).putIndexTemplate(ValueType.VARIABLE);
    verify(esClient).putIndexTemplate(ValueType.VARIABLE_DOCUMENT);
    verify(esClient).putIndexTemplate(ValueType.PROCESS_INSTANCE);
    verify(esClient).putIndexTemplate(ValueType.PROCESS_INSTANCE_CREATION);
    verify(esClient).putIndexTemplate(ValueType.PROCESS_MESSAGE_SUBSCRIPTION);
  }
",non-flaky,5
160430,ConsenSys_teku,StateSelectorFactoryTest.headSelector_shouldGetBestState,"  @Test
  public void headSelector_shouldGetBestState() throws ExecutionException, InterruptedException {
    when(client.getBestState()).thenReturn(Optional.of(state));
    Optional<BeaconState> result = factory.headSelector().getState().get();
    assertThat(result).isEqualTo(Optional.of(state));
    verify(client).getBestState();
  }
",non-flaky,5
98085,vert-x3_vertx-mongo-client,WriteConcernParserTest.testConnStringWriteConcern,"  @Test
  public void testConnStringWriteConcern() {
    final ConnectionString connString = new ConnectionString(""mongodb://localhost:27017/mydb?replicaSet=myapp&safe=true"");
    WriteConcern wc = new WriteConcernParser(connString, new JsonObject()).writeConcern();

    assertNotNull(wc);
    assertEquals(WriteConcern.ACKNOWLEDGED, wc);
  }
",non-flaky,5
179420,abel533_Mapper,NameStyleTest.testCamelhumpAndUppercase,"    @Test
    public void testCamelhumpAndUppercase(){
        EntityHelper.initEntityNameMap(UserCamelhumpAndUppercase.class, config);
        EntityTable entityTable = EntityHelper.getEntityTable(UserCamelhumpAndUppercase.class);
        Assert.assertNotNull(entityTable);
        Assert.assertEquals(""USER_CAMELHUMP_AND_UPPERCASE"", entityTable.getName());

        Set<EntityColumn> columns = entityTable.getEntityClassColumns();
        Assert.assertEquals(1, columns.size());

        for (EntityColumn column : columns) {
            Assert.assertEquals(""USER_NAME"", column.getColumn());
            Assert.assertEquals(""userName"", column.getProperty());

            Assert.assertEquals(""USER_NAME = #{userName}"", column.getColumnEqualsHolder());
            Assert.assertEquals(""USER_NAME = #{record.userName}"", column.getColumnEqualsHolder(""record""));
            Assert.assertEquals(""#{userName}"", column.getColumnHolder());
            Assert.assertEquals(""#{record.userName}"", column.getColumnHolder(""record""));
            Assert.assertEquals(""#{record.userName}"", column.getColumnHolder(""record"", ""suffix""));
            Assert.assertEquals(""#{record.userNamesuffix},"", column.getColumnHolder(""record"", ""suffix"", "",""));
            Assert.assertNull(column.getTypeHandler());
        }

        ResultMap resultMap = entityTable.getResultMap(configuration);
        Assert.assertEquals(""[USER_NAME]"", resultMap.getMappedColumns().toString());

        Assert.assertEquals(1, resultMap.getResultMappings().size());

        ResultMapping resultMapping = resultMap.getResultMappings().get(0);
        Assert.assertEquals(""USER_NAME"", resultMapping.getColumn());
        Assert.assertEquals(""userName"", resultMapping.getProperty());
        Assert.assertNull(resultMapping.getJdbcType());
        Assert.assertEquals(StringTypeHandler.class, resultMapping.getTypeHandler().getClass());
    }
",non-flaky,5
112161,apache_shardingsphere-elasticjob,JobConfigurationGsonTypeAdapterTest.assertFromDataflowJobJson,"    @Test
    public void assertFromDataflowJobJson() {
        TestJobRootConfiguration actual = GsonFactory.getGson().fromJson(
                APIJsonConstants.getDataflowJobJson(IgnoreJobExceptionHandler.class.getCanonicalName()), TestJobRootConfiguration.class);
        TestJobRootConfiguration expected = new TestJobRootConfiguration(new TestDataflowJobConfiguration(true).getTypeConfig());
        assertThat(GsonFactory.getGson().toJson(actual), is(GsonFactory.getGson().toJson(expected)));
    }
",non-flaky,5
59597,looly_hutool,PinyinUtilTest.getFirstLetterTest,"	@Test
	public void getFirstLetterTest(){
		final String result = PinyinUtil.getFirstLetter(""Hæ¯ç¬¬ä¸ä¸ª"", "", "");
		Assert.assertEquals(""h, s, d, y, g"", result);
	}
",non-flaky,5
84618,apache_zookeeper,GetEphemeralsTest.testGetEphemeralsErrors,"    @Test
    public void testGetEphemeralsErrors() throws KeeperException {
        try {
            zk.getEphemerals(null, null, null);
            fail(""Should have thrown a IllegalArgumentException for a null prefixPath"");
        } catch (IllegalArgumentException e) {
            //pass
        }

        try {
            zk.getEphemerals(""no leading slash"", null, null);
            fail(""Should have thrown a IllegalArgumentException "" + ""for a prefix with no leading slash"");
        } catch (IllegalArgumentException e) {
            //pass
        }
    }
",non-flaky,5
162690,OpenAPITools_openapi-generator,TypeHolderDefaultTest.integerItemTest,"    @Test
    public void integerItemTest() {
        // TODO: test integerItem
    }
",non-flaky,5
135037,undertow-io_undertow,CanonicalPathUtilsTestCase.testCanonicalizationBackslash,"    @Test
    public void testCanonicalizationBackslash() {

        //these strings should not be touched
        Assert.assertSame(""a\\b\\c"", CanonicalPathUtils.canonicalize(""a\\b\\c""));
        Assert.assertSame(""a\\b\\c\\"", CanonicalPathUtils.canonicalize(""a\\b\\c\\""));
        Assert.assertSame(""aaaaa"", CanonicalPathUtils.canonicalize(""aaaaa""));

        //these strings should result in the same string being output
        Assert.assertEquals(""a.\\b"", CanonicalPathUtils.canonicalize(""a.\\b""));
        Assert.assertEquals(""a.\\.b"", CanonicalPathUtils.canonicalize(""a.\\.b""));

        //removing double slash

        Assert.assertEquals(""a\\b"", CanonicalPathUtils.canonicalize(""a\\\\b""));
        Assert.assertEquals(""a\\b"", CanonicalPathUtils.canonicalize(""a\\\\\\b""));
        Assert.assertEquals(""a\\b"", CanonicalPathUtils.canonicalize(""a\\\\\\\\b""));

        //removing \.\
        Assert.assertEquals(""a\\b"", CanonicalPathUtils.canonicalize(""a\\.\\b""));
        Assert.assertEquals(""a\\b"", CanonicalPathUtils.canonicalize(""a\\.\\.\\b""));
        Assert.assertEquals(""a\\b\\c"", CanonicalPathUtils.canonicalize(""a\\.\\b\\.\\c""));
        Assert.assertEquals(""a\\b"", CanonicalPathUtils.canonicalize(""a\\.\\.\\.\\b""));
        Assert.assertEquals(""a\\b\\"", CanonicalPathUtils.canonicalize(""a\\.\\.\\.\\b\\.\\""));
        Assert.assertEquals(""a\\b"", CanonicalPathUtils.canonicalize(""a\\.\\.\\.\\b\\.""));

        //dealing with \..\
        Assert.assertEquals(""\\b"", CanonicalPathUtils.canonicalize(""\\a\\..\\b""));
        Assert.assertEquals(""\\b"", CanonicalPathUtils.canonicalize(""\\a\\..\\c\\..\\e\\..\\b""));
        Assert.assertEquals(""\\b"", CanonicalPathUtils.canonicalize(""\\a\\c\\..\\..\\b""));
        Assert.assertEquals(""/"", CanonicalPathUtils.canonicalize(""\\a\\..\\..""));
        Assert.assertEquals(""\\foo"", CanonicalPathUtils.canonicalize(""\\a\\..\\..\\foo""));

        //preserve (single) trailing \
        Assert.assertEquals(""\\a\\"", CanonicalPathUtils.canonicalize(""\\a\\""));
        Assert.assertEquals(""\\"", CanonicalPathUtils.canonicalize(""\\""));
        Assert.assertEquals(""\\bbb\\a"", CanonicalPathUtils.canonicalize(""\\cc\\..\\bbb\\a\\.""));
        Assert.assertEquals(""\\aaa\\bbb\\"", CanonicalPathUtils.canonicalize(""\\aaa\\bbb\\\\\\\\\\\\""));

        //test mixtures of both forward and back slash
        Assert.assertEquals(""/"", CanonicalPathUtils.canonicalize(""\\a/..\\./""));
        Assert.assertEquals(""\\a/"", CanonicalPathUtils.canonicalize(""\\a\\b\\..\\./""));
        Assert.assertEquals(""/a/b/c../d..\\"", CanonicalPathUtils.canonicalize(""/a/b/c../d..\\""));
        Assert.assertEquals(""/a/d\\"", CanonicalPathUtils.canonicalize(""/a/b/c/..\\../d\\.\\""));
    }
",non-flaky,5
98593,nutzam_nutz,El2Test.negative,"    @Test
    public void negative() {
        assertEquals(-1, El.eval(""-1""));
        assertEquals(0, El.eval(""-1+1""));
        assertEquals(-1 - -1, El.eval(""-1 - -1""));
        assertEquals(9 + 8 * 7 + (6 + 5) * (-(4 - 1 * 2 + 3)), El.eval(""9+8*7+(6+5)*(-(4-1*2+3))""));
    }
",non-flaky,5
160399,ConsenSys_teku,ChainDataProviderTest.shouldGetBlockHeadersOnEmptyChainHeadSlot,"  @Test
  public void shouldGetBlockHeadersOnEmptyChainHeadSlot() {
    final ChainDataProvider provider =
        new ChainDataProvider(spec, recentChainData, combinedChainDataClient);

    final UInt64 headSlot = recentChainData.getHeadSlot();
    storageSystem.chainUpdater().advanceChain(headSlot.plus(1));

    final SafeFuture<List<BlockHeader>> future =
        provider.getBlockHeaders(Optional.empty(), Optional.empty());
    final BlockHeader header = future.join().get(0);
    assertThat(header.header.message.slot).isEqualTo(headSlot);
  }
",non-flaky,5
179466,abel533_Mapper,DateTimeTest.testSelect,"    @Test
    public void testSelect() {
        SqlSession sqlSession = getSqlSession();
        try {
            TimeModelMapper mapper = sqlSession.getMapper(TimeModelMapper.class);
            List<TimeModel> list = mapper.selectAll();
            Assert.assertEquals(2, list.size());

            Assert.assertEquals(""2018-01-01"", toDate(list.get(0).getTestDate()));
            Assert.assertEquals(""12:11:00"", toTime(list.get(0).getTestTime()));
            Assert.assertEquals(""2018-01-01 12:00:00"", toDatetime(list.get(0).getTestDatetime()));

            Assert.assertEquals(""2018-11-11"", toDate(list.get(1).getTestDate()));
            Assert.assertEquals(""01:59:11"", toTime(list.get(1).getTestTime()));
            Assert.assertEquals(""2018-02-12 17:58:12"", toDatetime(list.get(1).getTestDatetime()));
        } finally {
            sqlSession.close();
        }
    }
",non-flaky,5
19503,eclipse_xtext-core,TraceRegionTest.testConstructorInvalidArgs_04,"	@Test(expected = IllegalArgumentException.class)
	public void testConstructorInvalidArgs_04() {
		new TraceRegion(0, 0, 0, -1, true, 0, 0, 0, 0, null, newURI());
	}
",non-flaky,5
53201,cloudfoundry_uaa,TotpMfaEndpointIntegrationTests.testDisplayIdentityZoneNameOnVerifyPage,"    @Test
    public void testDisplayIdentityZoneNameOnVerifyPage() {
        performLogin(username);
        webDriver.findElement(By.id(""Next"")).click();

        assertEquals(zoneUrl + ""/login/mfa/verify"", webDriver.getCurrentUrl());
        assertEquals(webDriver.findElement(By.id(""mfa-identity-zone"")).getText(), mfaZone.getName());

        webDriver.findElement(By.id(""verify_code_btn"")).click();
        assertEquals(webDriver.findElement(By.id(""mfa-identity-zone"")).getText(), mfaZone.getName());
    }
",non-flaky,5
59643,looly_hutool,ThymeleafTest.thymeleafEngineTest,"	@Test
	public void thymeleafEngineTest() {
		Map<String, Object> map1 = new HashMap<>();
		map1.put(""name"", ""a"");

		Map<String, Object> map2 = new HashMap<>();
		map2.put(""name"", ""b"");

		// æ¥ææµè¯
		Map<String, Object> map3 = new HashMap<>();
		map3.put(""name"", DateUtil.parse(""2019-01-01""));

		List<Map<String, Object>> list = new ArrayList<>();
		list.add(map1);
		list.add(map2);
		list.add(map3);

		// å­ç¬¦ä¸²æ¨¡æ¿
		TemplateEngine engine = new ThymeleafEngine(new TemplateConfig());
		Template template = engine.getTemplate(""<h3 th:each=\""item : ${list}\"" th:text=\""${item.name}\""></h3>"");
		String render = template.render(Dict.create().set(""list"", list));
		Assert.assertEquals(""<h3>a</h3><h3>b</h3><h3>2019-01-01 00:00:00</h3>"", render);
	}
",non-flaky,5
326,apache_hadoop,TestViewfsWithNfs3.testPaths,"  @Test
  public void testPaths() throws Exception {
    Assert.assertEquals(hdfs1.resolvePath(new Path(""/user1/file1"")),
        viewFs.resolvePath(new Path(""/hdfs1/file1"")));
    Assert.assertEquals(hdfs1.resolvePath(new Path(""/user1/file2"")),
        viewFs.resolvePath(new Path(""/hdfs1/file2"")));
    Assert.assertEquals(hdfs2.resolvePath(new Path(""/user2/dir2"")),
        viewFs.resolvePath(new Path(""/hdfs2/dir2"")));
  }
",non-flaky,5
99791,apache_cassandra,MessagingServiceTest.listenRequiredSecureConnectionWithBroadcastAddr,"    @Test
    public void listenRequiredSecureConnectionWithBroadcastAddr() throws InterruptedException
    {
        ServerEncryptionOptions serverEncryptionOptions = new ServerEncryptionOptions()
                                                          .withOptional(false)
                                                          .withInternodeEncryption(ServerEncryptionOptions.InternodeEncryption.all)
                                                          .withLegacySslStoragePort(false);
        listen(serverEncryptionOptions, true);
    }
",non-flaky,5
176784,ctco_cukes,BaseContextHandlerTest.shouldNotExtractGroupsInPatternWithSpacesInName,"    @Test
    public void shouldNotExtractGroupsInPatternWithSpacesInName() throws Exception {
        List<String> groups = capturer.extractGroups(""{(hello world)}"");
        assertThat(groups, is(empty()));
    }
",non-flaky,5
19457,eclipse_xtext-core,ImportedNamespaceAwareLocalScopeProviderTest.iterator,"	@Test public void testUnambiguousImportAreShadowed_02() throws Exception {
			public Iterator<EObject> iterator() {
				return resource.getAllContents();
			}
",non-flaky,5
170471,eclipse_jetty.project,ObjectMBeanUtilTest.testGetAttributeAttributeNotFoundException,"    @Test
    public void testGetAttributeAttributeNotFoundException()
    {
        AttributeNotFoundException e = assertThrows(AttributeNotFoundException.class, () -> objectMBean.getAttribute(""ffname""));

        assertNotNull(e, ""An AttributeNotFoundException must have occurred by now as there is no attribute with the name ffname in bean"");
    }
",non-flaky,5
70852,apache_kafka,TransformationConfigTest.testEmbeddedConfigExtractField,"    @Test
    public void testEmbeddedConfigExtractField() {
        // Validate that we can construct a Connector config containing the extended config for the transform
        HashMap<String, String> connProps = new HashMap<>();
        connProps.put(""name"", ""foo"");
        connProps.put(""connector.class"", MockConnector.class.getName());
        connProps.put(""transforms"", ""example"");
        connProps.put(""transforms.example.type"", ExtractField.Value.class.getName());
        connProps.put(""transforms.example.field"", ""field"");

        Plugins plugins = null; // Safe when we're only constructing the config
        new ConnectorConfig(plugins, connProps);
    }
",non-flaky,5
77562,dropwizard_dropwizard,OptionalQueryParamResourceTest.getMessage,"    @Test
        public String getMessage(@QueryParam(""message"") Optional<String> message) {
            return message.orElse(""Default Message"");
        }
",non-flaky,5
170490,eclipse_jetty.project,ConnectorServerTest.testNoRMIHostBindsToHost,"    @Test
    public void testNoRMIHostBindsToHost() throws Exception
    {
        connectorServer = new ConnectorServer(new JMXServiceURL(""service:jmx:rmi:///jndi/rmi:///jmxrmi""), objectName);
        connectorServer.start();

        // Verify that I can connect to the RMI server using a non-loopback address.
        new Socket(InetAddress.getLocalHost(), connectorServer.getAddress().getPort()).close();
        assertThrows(ConnectException.class, () ->
        {
            // Verify that I cannot connect to the RMI server using the loopback address.
            new Socket(InetAddress.getLoopbackAddress(), connectorServer.getAddress().getPort()).close();
        });
    }
",non-flaky,5
20998,NationalSecurityAgency_timely,AggregationIteratorTest.simpleGetOneSample,"    @Test
    public void simpleGetOneSample() throws Exception {
        // check that data gets pulled out
        AggregationIterator iter = new AggregationIterator();
        Map<Set<Tag>, Aggregation> samples = runQuery(iter, testData1, 100);
        assertEquals(1, samples.size());
        for (Entry<Set<Tag>, Aggregation> entry : samples.entrySet()) {
            Set<Tag> tags = entry.getKey();
            assertEquals(1, tags.size());
            assertEquals(Collections.singleton(new Tag(""host"", "".*"")), tags);
            long ts = 0;
            int count = 0;
            for (Sample sample : entry.getValue()) {
                assertEquals(ts, sample.timestamp);
                ts += 100;
                assertEquals(0.2, sample.value, 0.0001);
                count++;
            }
            assertEquals(1000, ts);
            assertEquals(10, count);
        }
    }
",non-flaky,5
33740,alibaba_fastjson,FastJsonHttpMessageConverterTest.test1,"    @Test
    public void test1() throws Exception {

        JSONObject json = new JSONObject();

        json.put(""id"", 123);

        json.put(""name"", ""ååå"");

        mockMvc.perform(
                (post(""/fastjson/test1"").characterEncoding(""UTF-8"").content(
                        json.toJSONString())
                        .contentType(MediaType.APPLICATION_JSON)))
                // .andExpect(status().isOk())
                .andDo(print());
    }
",non-flaky,5
156424,apache_commons-lang,GmtTimeZoneTest.useDaylightTime,"    @Test
    public void useDaylightTime() {
        assertFalse(new GmtTimeZone(false, 0, 0).useDaylightTime());
    }
",non-flaky,5
104633,apache_pinot,OfflineClusterIntegrationTest.testUploadSegmentRefreshOnly,"  @Test
  public void testUploadSegmentRefreshOnly()
      throws Exception {
    TableConfig segmentUploadTestTableConfig =
        new TableConfigBuilder(TableType.OFFLINE).setTableName(SEGMENT_UPLOAD_TEST_TABLE).setSchemaName(getSchemaName())
            .setTimeColumnName(getTimeColumnName()).setSortedColumn(getSortedColumn())
            .setInvertedIndexColumns(getInvertedIndexColumns()).setNoDictionaryColumns(getNoDictionaryColumns())
            .setRangeIndexColumns(getRangeIndexColumns()).setBloomFilterColumns(getBloomFilterColumns())
            .setFieldConfigList(getFieldConfigs()).setNumReplicas(getNumReplicas())
            .setSegmentVersion(getSegmentVersion())
            .setLoadMode(getLoadMode()).setTaskConfig(getTaskConfig()).setBrokerTenant(getBrokerTenant())
            .setServerTenant(getServerTenant()).setIngestionConfig(getIngestionConfig())
            .setNullHandlingEnabled(getNullHandlingEnabled()).build();
    addTableConfig(segmentUploadTestTableConfig);
    String offlineTableName = segmentUploadTestTableConfig.getTableName();
    File[] segmentTarFiles = _tarDir.listFiles();
    assertNotNull(segmentTarFiles);
    int numSegments = segmentTarFiles.length;
    assertTrue(numSegments > 0);
    List<Header> headers = new ArrayList<>();
    headers.add(new BasicHeader(FileUploadDownloadClient.CustomHeaders.REFRESH_ONLY, ""true""));
    List<NameValuePair> parameters = new ArrayList<>();
    NameValuePair tableNameParameter = new BasicNameValuePair(FileUploadDownloadClient.QueryParameters.TABLE_NAME,
        TableNameBuilder.extractRawTableName(offlineTableName));
    parameters.add(tableNameParameter);

    URI uploadSegmentHttpURI = FileUploadDownloadClient.getUploadSegmentHttpURI(LOCAL_HOST, _controllerPort);
    try (FileUploadDownloadClient fileUploadDownloadClient = new FileUploadDownloadClient()) {
      // Refresh non-existing segment
      File segmentTarFile = segmentTarFiles[0];
      try {
        fileUploadDownloadClient
            .uploadSegment(uploadSegmentHttpURI, segmentTarFile.getName(), segmentTarFile, headers, parameters,
                FileUploadDownloadClient.DEFAULT_SOCKET_TIMEOUT_MS);
        fail();
      } catch (HttpErrorStatusException e) {
        assertEquals(e.getStatusCode(), HttpStatus.SC_GONE);
        assertTrue(_helixResourceManager.getSegmentsZKMetadata(SEGMENT_UPLOAD_TEST_TABLE).isEmpty());
      }

      // Upload segment
      SimpleHttpResponse response = fileUploadDownloadClient
          .uploadSegment(uploadSegmentHttpURI, segmentTarFile.getName(), segmentTarFile, null, parameters,
              FileUploadDownloadClient.DEFAULT_SOCKET_TIMEOUT_MS);
      assertEquals(response.getStatusCode(), HttpStatus.SC_OK);
      System.out.println(response.getResponse());
      List<SegmentZKMetadata> segmentsZKMetadata = _helixResourceManager.getSegmentsZKMetadata(offlineTableName);
      assertEquals(segmentsZKMetadata.size(), 1);

      // Refresh existing segment
      response = fileUploadDownloadClient
          .uploadSegment(uploadSegmentHttpURI, segmentTarFile.getName(), segmentTarFile, headers, parameters,
              FileUploadDownloadClient.DEFAULT_SOCKET_TIMEOUT_MS);
      assertEquals(response.getStatusCode(), HttpStatus.SC_OK);
      segmentsZKMetadata = _helixResourceManager.getSegmentsZKMetadata(offlineTableName);
      assertEquals(segmentsZKMetadata.size(), 1);
      assertNotEquals(segmentsZKMetadata.get(0).getRefreshTime(), Long.MIN_VALUE);
    }
    dropOfflineTable(SEGMENT_UPLOAD_TEST_TABLE);
  }
",non-flaky,5
110191,Wikidata_wikidata-toolkit,RdfConverterTest.testWriteStatementRankTriple,"	@Test
	public void testWriteStatementRankTriple() throws RDFHandlerException,
			RDFParseException, IOException {
		StatementRank rank = StatementRank.DEPRECATED;
		Resource subject = this.rdfFactory
				.createIRI(""http://www.wikidata.org/Q10Snone"");
		this.rdfConverter.writeStatementRankTriple(subject, rank);
		this.rdfWriter.finish();
		Model model = RdfTestHelpers.parseRdf(this.out.toString());
		assertEquals(RdfTestHelpers.parseRdf(RdfTestHelpers
				.getResourceFromFile(""StatementRankTriple.rdf"")), model);
	}
",non-flaky,5
176826,ctco_cukes,DnComparatorTest.compare_differentTrees,"    @Test
    public void compare_differentTrees() throws Exception {
        assertThat(comparator.compare(""cn=a,cn=root"", ""cn=b,cn=root""), is(more()));
        assertThat(comparator.compare(""cn=b,cn=root"", ""cn=a,cn=root""), is(less()));
    }
",non-flaky,5
110182,Wikidata_wikidata-toolkit,PropertyRegisterTest.testGetPropertyType,"	@Test
	public void testGetPropertyType() {
		assertEquals(DatatypeIdValue.DT_STRING,
				this.propertyRegister.getPropertyType(dataObjectFactory
						.getPropertyIdValue(""P434"", this.siteIri)));
		// Check twice to test that the cached retrieval works too
		assertEquals(DatatypeIdValue.DT_STRING,
				this.propertyRegister.getPropertyType(dataObjectFactory
						.getPropertyIdValue(""P434"", this.siteIri)));
		assertEquals(50,
				this.propertyRegister.smallestUnfetchedPropertyIdNumber);
		assertTrue(this.propertyRegister.datatypes.keySet().contains(""P434""));
	}
",non-flaky,5
97963,ReactiveX_RxJava,ObservableTests.fromIterable,"    @Test
    public void fromIterable() {
        ArrayList<String> items = new ArrayList<String>();
        items.add(""one"");
        items.add(""two"");
        items.add(""three"");

        assertEquals(new Integer(3), Observable.from(items).count().toBlockingObservable().single());
        assertEquals(""two"", Observable.from(items).skip(1).take(1).toBlockingObservable().single());
        assertEquals(""three"", Observable.from(items).takeLast(1).toBlockingObservable().single());
    }
",non-flaky,5
97701,vojtechhabarta_typescript-generator,EnumConstantsExtensionTest.writeIndentedLine,"    @Test
    public void basicTest() {
        final List<String> lines = new ArrayList<>();
        final EmitterExtension.Writer writer = new EmitterExtension.Writer() {
            @Override
            public void writeIndentedLine(String line) {
                lines.add(line);
            }
",non-flaky,5
137103,spring-projects_spring-framework,AbstractAnnotationMetadataTests.hasAnnotationWhenMatchesDirectAnnotationReturnsTrue,"	@Test
	public void hasAnnotationWhenMatchesDirectAnnotationReturnsTrue() {
		assertThat(get(WithDirectAnnotations.class).hasAnnotation(DirectAnnotation1.class.getName())).isTrue();
	}
",non-flaky,5
94732,ktuukkan_marine-api,Longitude28Test.minValueIsCorrect,"    @Test
    public void minValueIsCorrect() {
        assertTrue(Longitude28.isCorrect(-180*60*10000));
    }
",non-flaky,5
98575,nutzam_nutz,ImagesTest.test_c,"    @Test
    public void test_c() throws Throwable {
        File file = Files.findFile(getClass().getPackage().getName().replace('.', '/')
                                    + ""/snapshot.jpg"");
        //System.out.println(file.length());
        Images.clipScale(file, File.createTempFile(""abc"", ""jpg""), 256, 256);
    }
",non-flaky,5
91396,OpenLCB_OpenLCB_Java,NodeTreeRepTest.put,"    @Test
    public void testCTor() {
        Assume.assumeFalse(GraphicsEnvironment.isHeadless());
        MimicNodeStore store = null;
        NodeID nid1 = new NodeID(new byte[]{1,3,3,4,5,6});
        NodeID nid2 = new NodeID(new byte[]{2,3,3,4,5,6});
    
        ProducerIdentifiedMessage pim1 = new ProducerIdentifiedMessage(nid1, 
                                         new EventID(new byte[]{1,0,0,0,0,0,1,0}), EventState.Unknown);
        Connection connection = new AbstractConnection() {
            public void put(Message msg, Connection sender) {
            }
",non-flaky,5
106595,Alluxio_alluxio,NativeLibValidationTaskTest.nativeLibMissing,"  @Test
  public void nativeLibMissing() throws Exception {
    String libPath = ""/usr/missing"";
    System.setProperty(NativeLibValidationTask.NATIVE_LIB_PATH, libPath);

    NativeLibValidationTask task = new NativeLibValidationTask();
    ValidationTaskResult result = task.validateImpl(ImmutableMap.of());
    assertEquals(ValidationUtils.State.WARNING, result.getState());
    assertThat(result.getResult(), containsString(""Java native lib not found at /usr/missing""));
    assertThat(result.getAdvice(), containsString(""Please check your path /usr/missing""));
  }
",non-flaky,5
156098,soot-oss_soot,AsmMethodSourceOrigNamesTest.testWriterToUTF8Buffered2,"  @Test
  public void testWriterToUTF8Buffered2() {
    final String clazz = ""org.apache.xml.serializer.WriterToUTF8Buffered"";
    final String[] params = { ""java.lang.String"" };
    runXalanTest(prepareTarget(methodSigFromComponents(clazz, ""void"", ""write"", params), clazz));
  }
",non-flaky,5
43086,trinodb_trino,AbstractTestIntegrationSmokeTest.testAggregation,"    @Test
    public void testAggregation()
    {
        assertQuery(""SELECT sum(orderkey) FROM orders"");
        assertQuery(""SELECT sum(totalprice) FROM orders"");
        assertQuery(""SELECT max(comment) FROM nation"");

        assertQuery(""SELECT count(*) FROM orders"");
        assertQuery(""SELECT count(*) FROM orders WHERE orderkey > 10"");
        assertQuery(""SELECT count(*) FROM (SELECT * FROM orders LIMIT 10)"");
        assertQuery(""SELECT count(*) FROM (SELECT * FROM orders WHERE orderkey > 10 LIMIT 10)"");

        assertQuery(""SELECT DISTINCT regionkey FROM nation"");
        assertQuery(""SELECT regionkey FROM nation GROUP BY regionkey"");

        // TODO support aggregation pushdown with GROUPING SETS
        assertQuery(
                ""SELECT regionkey, nationkey FROM nation GROUP BY GROUPING SETS ((regionkey), (nationkey))"",
                ""SELECT NULL, nationkey FROM nation "" +
                        ""UNION ALL SELECT DISTINCT regionkey, NULL FROM nation"");
        assertQuery(
                ""SELECT regionkey, nationkey, count(*) FROM nation GROUP BY GROUPING SETS ((), (regionkey), (nationkey), (regionkey, nationkey))"",
                ""SELECT NULL, NULL, count(*) FROM nation "" +
                        ""UNION ALL SELECT NULL, nationkey, 1 FROM nation "" +
                        ""UNION ALL SELECT regionkey, NULL, count(*) FROM nation GROUP BY regionkey "" +
                        ""UNION ALL SELECT regionkey, nationkey, 1 FROM nation"");

        assertQuery(""SELECT count(regionkey) FROM nation"");
        assertQuery(""SELECT count(DISTINCT regionkey) FROM nation"");
        assertQuery(""SELECT regionkey, count(*) FROM nation GROUP BY regionkey"");

        assertQuery(""SELECT min(regionkey), max(regionkey) FROM nation"");
        assertQuery(""SELECT min(DISTINCT regionkey), max(DISTINCT regionkey) FROM nation"");
        assertQuery(""SELECT regionkey, min(regionkey), min(name), max(regionkey), max(name) FROM nation GROUP BY regionkey"");

        assertQuery(""SELECT sum(regionkey) FROM nation"");
        assertQuery(""SELECT sum(DISTINCT regionkey) FROM nation"");
        assertQuery(""SELECT regionkey, sum(regionkey) FROM nation GROUP BY regionkey"");

        assertQuery(
                ""SELECT avg(nationkey) FROM nation"",
                ""SELECT avg(CAST(nationkey AS double)) FROM nation"");
        assertQuery(
                ""SELECT avg(DISTINCT nationkey) FROM nation"",
                ""SELECT avg(DISTINCT CAST(nationkey AS double)) FROM nation"");
        assertQuery(
                ""SELECT regionkey, avg(nationkey) FROM nation GROUP BY regionkey"",
                ""SELECT regionkey, avg(CAST(nationkey AS double)) FROM nation GROUP BY regionkey"");
    }
",non-flaky,5
156084,soot-oss_soot,PropagateLineNumberTagTest.nullAssignment,"  @Test
  public void nullAssignment() {
    SootMethod target =
        prepareTarget(
            methodSigFromComponents(TEST_TARGET_CLASS, ""void"", ""nullAssignment""),
            TEST_TARGET_CLASS);

    Body body = target.retrieveActiveBody();

    Optional<Unit> unit =
        body.getUnits().stream()
            .filter(
                u ->
                    u.toString()
                        .equals(
                            ""staticinvoke <soot.jimple.PropagateLineNumberTag: soot.jimple.PropagateLineNumberTag$A foo(soot.jimple.PropagateLineNumberTag$A)>(null)""))
            .findFirst();

    assertTrue(unit.isPresent());

    List<ValueBox> useBoxes = unit.get().getUseBoxes();

    assertEquals(2, useBoxes.size());
    ValueBox valueBox = useBoxes.get(0);
    assertTrue(valueBox instanceof ImmediateBox);
    assertEquals(1, valueBox.getTags().size());
    assertTrue(valueBox.getTags().get(0) instanceof LineNumberTag);
    assertEquals(33, valueBox.getJavaSourceStartLineNumber());
  }
",non-flaky,5
98630,nutzam_nutz,SystemLogAdapterTest.testCanWork,"    @Test
    public void testCanWork() {
        assertTrue(new SystemLogAdapter().canWork());
    }
",non-flaky,5
160404,ConsenSys_teku,ChainDataProviderTest.validatorParameterToIndex_shouldThrowBadRequestExceptionWhenKeyNotFound,"  @Test
  public void validatorParameterToIndex_shouldThrowBadRequestExceptionWhenKeyNotFound() {
    final ChainDataProvider provider =
        new ChainDataProvider(spec, recentChainData, combinedChainDataClient);
    assertThrows(
        BadRequestException.class,
        () -> provider.validatorParameterToIndex(Bytes32.fromHexString(""0x00"").toHexString()));
  }
",non-flaky,5
133990,CorfuDB_CorfuDB,PayloadTest.checkConstructorMap,"    @Test
    public void checkConstructorMap() {
        List<Class<?>> types = Arrays.asList(
                Byte.class, Integer.class, Long.class, Boolean.class, Double.class, Float.class, String.class,
                Layout.class, CheckpointEntryType.class, UUID.class, byte[].class, ByteBuf.class
        );

        assertThat(CorfuProtocolCommon.getConstructorMap().keySet()).containsAll(types);
    }
",non-flaky,5
122578,vespa-engine_vespa,FileSnapshotTest.regularFile,"    @Test
    public void regularFile() {
        path.createParents().writeUtf8File(""file content"");
        fileSnapshot = fileSnapshot.snapshot();
        assertTrue(fileSnapshot.exists());
        assertTrue(fileSnapshot.attributes().isPresent());
        assertTrue(fileSnapshot.attributes().get().isRegularFile());
        assertTrue(fileSnapshot.utf8Content().isPresent());
        assertEquals(""file content"", fileSnapshot.utf8Content().get());

        FileSnapshot newFileSnapshot = fileSnapshot.snapshot();
        assertSame(fileSnapshot, newFileSnapshot);
    }
",non-flaky,5
135759,Netflix_Hystrix,HystrixPluginsTest.testDynamicProperties,"    @Test
    public void testDynamicProperties() throws Exception {
        fakeServiceLoaderResource = 
                ""FAKE_META_INF_SERVICES/com.netflix.hystrix.strategy.properties.HystrixDynamicProperties"";
        HystrixPlugins plugins = setupMockServiceLoader();
        HystrixDynamicProperties properties = plugins.getDynamicProperties();
        plugins.getCommandExecutionHook();
        plugins.getPropertiesStrategy();
        assertTrue(properties instanceof MockHystrixDynamicPropertiesTest);

        assertEvents(
                ""[serviceloader: META-INF/services/com.netflix.hystrix.strategy.properties.HystrixDynamicProperties""
                        + "", debug: [Created HystrixDynamicProperties instance by loading from ServiceLoader. Using class: {}, com.netflix.hystrix.strategy.HystrixPluginsTest.MockHystrixDynamicPropertiesTest]""
                        + "", property: hystrix.plugin.HystrixCommandExecutionHook.implementation""
                        + "", serviceloader: META-INF/services/com.netflix.hystrix.strategy.executionhook.HystrixCommandExecutionHook""
                        + "", property: hystrix.plugin.HystrixPropertiesStrategy.implementation""
                        + "", serviceloader: META-INF/services/com.netflix.hystrix.strategy.properties.HystrixPropertiesStrategy]"");
    }
",non-flaky,5
175775,GoogleCloudPlatform_google-cloud-eclipse,AppYamlValidatorTest.testValidate_absolutePathInvalidFileName,"  @Test
  public void testValidate_absolutePathInvalidFileName() {
    String absolutePath = basePath + ""/sub/directory/my-app.yaml"";
    when(appYamlPath.getValue()).thenReturn(absolutePath);

    IStatus result = pathValidator.validate();
    assertEquals(IStatus.ERROR, result.getSeverity());
    assertEquals(""File name is not app.yaml: ""
        + new Path(basePath + ""/sub/directory/my-app.yaml"").toOSString(),
        result.getMessage());
  }
",non-flaky,5
162750,OpenAPITools_openapi-generator,AdditionalPropertiesBooleanTest.testAdditionalPropertiesBoolean,"    @Test
    public void testAdditionalPropertiesBoolean() {
        // TODO: test AdditionalPropertiesBoolean
    }
",non-flaky,5
112108,apache_shardingsphere-elasticjob,ShardingContextTest.assertToString,"    @Test
    public void assertToString() {
        assertThat(new ShardingContext(ShardingContextsBuilder.getMultipleShardingContexts(), 1).toString(), 
                is(""ShardingContext(jobName=test_job, taskId=fake_task_id, shardingTotalCount=2, jobParameter=, shardingItem=1, shardingParameter=B)""));
    }
",non-flaky,5
98093,vert-x3_vertx-mongo-client,ParsingSSLOptionsTest.testEmptyCaPathProperty,"  @Test
  public void testEmptyCaPathProperty() {
    // given
    final JsonObject withSSLwithoutCaPath = new JsonObject().put(""ssl"", true);

    // when
    final SslSettings sslSettings = new MongoClientOptionsParser(vertx, withSSLwithoutCaPath)
      .settings()
      .getSslSettings();

    // then
    assertNotNull(sslSettings.getContext());
  }
",non-flaky,5
97703,vojtechhabarta_typescript-generator,EnumConstantsExtensionTest.testSorting,"    @Test
    public void testSorting() {
        final Settings settings = TestUtils.settings();
        settings.sortDeclarations = false;
        settings.newline = ""\n"";
        settings.outputFileType = TypeScriptFileType.implementationFile;
        settings.outputKind = TypeScriptOutputKind.global;
        settings.jsonLibrary = JsonLibrary.jackson2;
        settings.extensions.add(new EnumConstantsExtension());
        Assert.assertNotEquals(new TypeScriptGenerator(settings).generateTypeScript(Input.from(Emotions.class, Direction.class)),
                               new TypeScriptGenerator(settings).generateTypeScript(Input.from(Direction.class, Emotions.class)));
        settings.sortDeclarations = true;
        Assert.assertEquals(new TypeScriptGenerator(settings).generateTypeScript(Input.from(Emotions.class, Direction.class)),
                            new TypeScriptGenerator(settings).generateTypeScript(Input.from(Direction.class, Emotions.class)));
    }
",non-flaky,5
60940,apache_druid,MovingAverageQueryTest.getDruidServers,"  @Test
  public void testQuery() throws IOException
  {
    Query<?> query = jsonMapper.readValue(getQueryString(), Query.class);
    Assert.assertThat(query, IsInstanceOf.instanceOf(getExpectedQueryType()));

    List<MapBasedRow> expectedResults = jsonMapper.readValue(getExpectedResultString(), getExpectedResultType());
    Assert.assertNotNull(expectedResults);
    Assert.assertThat(expectedResults, IsInstanceOf.instanceOf(List.class));

    CachingClusteredClient baseClient = new CachingClusteredClient(
        warehouse,
        new TimelineServerView()
        {
          @Override
          public Optional<? extends TimelineLookup<String, ServerSelector>> getTimeline(DataSourceAnalysis analysis)
          {
            return Optional.empty();
          }

          @Override
          public List<ImmutableDruidServer> getDruidServers()
          {
            return null;
          }
",non-flaky,5
106636,Alluxio_alluxio,AlluxioJniFuseFileSystemTest.statfs,"  @Test
  public void statfs() throws Exception {
    ByteBuffer buffer = ByteBuffer.allocateDirect(4 * Constants.KB);
    buffer.clear();
    Statvfs stbuf = Statvfs.of(buffer);

    int blockSize = 4 * Constants.KB;
    int totalBlocks = 4;
    int freeBlocks = 3;

    BlockMasterClient blockMasterClient = PowerMockito.mock(BlockMasterClient.class);
    PowerMockito.mockStatic(BlockMasterClient.Factory.class);
    when(BlockMasterClient.Factory.create(any())).thenReturn(blockMasterClient);

    BlockMasterInfo blockMasterInfo = new BlockMasterInfo();
    blockMasterInfo.setCapacityBytes(totalBlocks * blockSize);
    blockMasterInfo.setFreeBytes(freeBlocks * blockSize);
    when(blockMasterClient.getBlockMasterInfo(any())).thenReturn(blockMasterInfo);

    assertEquals(0, mFuseFs.statfs(""/"", stbuf));

    assertEquals(blockSize, stbuf.f_bsize.intValue());
    assertEquals(blockSize, stbuf.f_frsize.intValue());
    assertEquals(totalBlocks, stbuf.f_blocks.longValue());
    assertEquals(freeBlocks, stbuf.f_bfree.longValue());
    assertEquals(freeBlocks, stbuf.f_bavail.longValue());

    assertEquals(AlluxioJniFuseFileSystem.UNKNOWN_INODES, stbuf.f_files.intValue());
    assertEquals(AlluxioJniFuseFileSystem.UNKNOWN_INODES, stbuf.f_ffree.intValue());
    assertEquals(AlluxioJniFuseFileSystem.UNKNOWN_INODES, stbuf.f_favail.intValue());
    assertEquals(AlluxioJniFuseFileSystem.MAX_NAME_LENGTH, stbuf.f_namemax.intValue());
  }
",non-flaky,5
137140,spring-projects_spring-framework,MethodMetadataReadingVisitorTests.verifyEquals,"	@Test
	public void verifyEquals() throws Exception {
	}
",non-flaky,5
76768,quarkusio_quarkus,PackageIT.testRunnerUberJarHasValidCRC,"    @Test
    public void testRunnerUberJarHasValidCRC() throws Exception {
        testDir = initProject(""projects/uberjar-check"", ""projects/project-uberjar-crc"");

        running = new RunningInvoker(testDir, false);

        Properties p = new Properties();
        p.setProperty(""quarkus.package.type"", ""uber-jar"");
        final MavenProcessInvocationResult result = running.execute(Collections.singletonList(""package""),
                Collections.emptyMap(), p);
        assertThat(result.getProcess().waitFor()).isEqualTo(0);

        final File targetDir = getTargetDir();
        assertThat(getNumberOfFilesEndingWith(targetDir, "".jar"")).isEqualTo(1);
        assertThat(getNumberOfFilesEndingWith(targetDir, "".original"")).isEqualTo(1);

        final Path runnerJar = targetDir.toPath().resolve(""acme-1.0-SNAPSHOT-runner.jar"");
        Assertions.assertTrue(Files.exists(runnerJar), ""Runner jar "" + runnerJar + "" is missing"");
        assertZipEntriesCanBeOpenedAndClosed(runnerJar);
    }
",non-flaky,5
112098,apache_shardingsphere-elasticjob,JobInstanceTest.assertGetJobInstanceId,"    @Test
    public void assertGetJobInstanceId() {
        assertThat(new JobInstance(""127.0.0.1@-@0"").getJobInstanceId(), is(""127.0.0.1@-@0""));
    }
",non-flaky,5
76980,Tencent_Firestorm,SparkClientWithLocalTest.readTest8,"  @Test
  public void readTest8() {
    String testAppId = ""localReadTest8"";
    registerApp(testAppId, Lists.newArrayList(new PartitionRange(0, 0)));

    Map<Long, byte[]> expectedData = Maps.newHashMap();
    Roaring64NavigableMap blockIdBitmap = Roaring64NavigableMap.bitmapOf();
    Roaring64NavigableMap taskIdBitmap = Roaring64NavigableMap.bitmapOf(0, 3);
    List<ShuffleBlockInfo> blocks = createShuffleBlockList(
        0, 0, 0, 5, 30, blockIdBitmap, expectedData, mockSSI);
    sendTestData(testAppId, blocks);

    // test case: data generated by speculation task without report result
    blocks = createShuffleBlockList(
        0, 0, 1, 5, 30, Roaring64NavigableMap.bitmapOf(), Maps.newHashMap(), mockSSI);
    sendTestData(testAppId, blocks);
    // test case: data generated by speculation task with report result
    blocks = createShuffleBlockList(
        0, 0, 2, 5, 30, blockIdBitmap, Maps.newHashMap(), mockSSI);
    sendTestData(testAppId, blocks);

    blocks = createShuffleBlockList(
        0, 0, 3, 5, 30, Roaring64NavigableMap.bitmapOf(), Maps.newHashMap(), mockSSI);
    sendTestData(testAppId, blocks);

    // unexpected taskAttemptId should be filtered
    ShuffleReadClientImpl readClient = new ShuffleReadClientImpl(StorageType.LOCALFILE.name(), testAppId, 0, 0, 100, 1,
        10, 1000, """", blockIdBitmap, taskIdBitmap, shuffleServerInfo, null);

    validateResult(readClient, expectedData);
    readClient.checkProcessedBlockIds();
    readClient.close();
  }
",non-flaky,5
134004,CorfuDB_CorfuDB,NodePausedAndPartitionedIT.nodesPausedAndPartitionedTest,"    @Test(timeout = 300000)
    public void nodesPausedAndPartitionedTest() {
        workflow(wf -> {
            wf.deploy();

            CorfuCluster corfuCluster = wf.getUniverse()
                    .getGroup(wf.getFixture().data().getGroupParamByIndex(0).getName());

            CorfuClient corfuClient = corfuCluster.getLocalCorfuClient();

            CorfuTable<String, String> table = corfuClient
                    .createDefaultCorfuTable(DEFAULT_STREAM_NAME);

            for (int i = 0; i < TestFixtureConst.DEFAULT_TABLE_ITER; i++) {
                table.put(String.valueOf(i), String.valueOf(i));
            }

            //Should pause one node and partition another
            CorfuServer server0 = corfuCluster.getServerByIndex(0);
            CorfuServer server1 = corfuCluster.getServerByIndex(1);
            CorfuServer server2 = corfuCluster.getServerByIndex(2);

            // Pause one node and partition another one
            server1.pause();
            server2.disconnect(Arrays.asList(server0, server1));

            waitUninterruptibly(Duration.ofSeconds(20));

            // Verify cluster status
            corfuClient.invalidateLayout();
            ClusterStatusReport clusterStatusReport = corfuClient
                    .getManagementView()
                    .getClusterStatus();
            assertThat(clusterStatusReport.getClusterStatus()).isEqualTo(ClusterStatus.STABLE);

            // Wait for failure detector finds cluster is down before recovering
            waitForClusterDown(table);

            // Recover cluster by resuming the paused node, removing
            // partition and wait for layout's unresponsive servers to change.
            // Also wait for the segment merge.
            server1.resume();
            server2.reconnect(Arrays.asList(server0, server1));
            waitForUnresponsiveServersChange(size -> size == 0, corfuClient);
            waitForLayoutChange(layout -> layout.getSegments().size() == 1, corfuClient);
            // Verify cluster status is STABLE
            corfuClient.invalidateLayout();
            clusterStatusReport = corfuClient.getManagementView().getClusterStatus();
            assertThat(clusterStatusReport.getClusterStatus()).isEqualTo(ClusterStatus.STABLE);

            // Verify data path working fine
            for (int i = 0; i < TestFixtureConst.DEFAULT_TABLE_ITER; i++) {
                assertThat(table.get(String.valueOf(i))).isEqualTo(String.valueOf(i));
            }

            corfuClient.shutdown();
        });
    }
",non-flaky,5
33918,apache_camel,LdifRouteIT.addOne,"    @Test
    public void addOne() throws Exception {
        camel.addRoutes(createRouteBuilder(ENDPOINT_LDIF));
        camel.start();

        Endpoint endpoint = camel.getEndpoint(ENDPOINT_START);
        Exchange exchange = endpoint.createExchange();

        // then we set the LDAP filter on the in body
        URL loc = this.getClass().getResource(""/org/apache/camel/component/ldif/AddOne.ldif"");
        exchange.getIn().setBody(loc.toString());

        // now we send the exchange to the endpoint, and receives the response
        // from Camel
        Exchange out = template.send(endpoint, exchange);

        // Check the results
        List<String> ldifResults = defaultLdapModuleOutAssertions(out);
        assertThat(ldifResults, notNullValue());
        assertThat(ldifResults.size(), equalTo(2)); // Container and user
        assertThat(ldifResults.get(0), equalTo(""success""));
        assertThat(ldifResults.get(1), equalTo(""success""));

        // Check LDAP
        SearchResult sr;
        NamingEnumeration<SearchResult> searchResults = ldapContext.search(""dc=example,dc=org"", ""(uid=test*)"", SEARCH_CONTROLS);
        assertNotNull(searchResults);

        checkDN(""uid=test1"", searchResults);
    }
",non-flaky,5
26736,MundaneImmortal_pair-distribution-app,DeveloperTest.testCompanyDefault,"	@Test
	public void testCompanyDefault() {
		Developer developer = new Developer(""developerId"");
		
		assertThat(developer.getCompany().getName(), is(""""));
	}
",non-flaky,5
99715,apache_cassandra,SettingsMiscTest.versionTriggersSpecialOption,"    @Test
    public void versionTriggersSpecialOption() throws Exception
    {
        assertTrue(SettingsMisc.maybeDoSpecial(ImmutableMap.of(""version"", new String[] {})));
    }
",non-flaky,5
122545,vespa-engine_vespa,SystemCtlTest.startCommandFailre,"    @Test
    public void startCommandFailre() {
        terminal.expectCommand(""systemctl show docker 2>&1"", 1, ""error"");
        SystemCtl.SystemCtlStart startDockerService = new SystemCtl(terminal).start(""docker"");
        try {
            startDockerService.converge(taskContext);
            fail();
        } catch (ChildProcessFailureException e) {
            // success
        }
    }
",non-flaky,5
99797,apache_cassandra,MessagingServiceTest.getPreferredRemoteAddrUsesPreferredIp,"//    @Test
//    public void getPreferredRemoteAddrUsesPreferredIp() throws UnknownHostException
//    {
//        MessagingService ms = MessagingService.instance();
//        InetAddressAndPort remote = InetAddressAndPort.getByNameOverrideDefaults(""127.0.0.115"", 7000);
//
//        InetAddressAndPort preferredIp = InetAddressAndPort.getByName(""127.0.0.16"");
//        SystemKeyspace.updatePreferredIP(remote, preferredIp);
//
//        Assert.assertEquals(preferredIp, ms.getPreferredRemoteAddr(remote));
//    }
",non-flaky,5
162423,testcontainers_testcontainers-java,GenericContainerRuleTest.handleDelivery,"    @Test
    public void simpleRabbitMqTest() throws IOException, TimeoutException {
        ConnectionFactory factory = new ConnectionFactory();
        factory.setHost(rabbitMq.getContainerIpAddress());
        factory.setPort(rabbitMq.getMappedPort(RABBITMQ_PORT));
        Connection connection = factory.newConnection();

        Channel channel = connection.createChannel();
        channel.exchangeDeclare(RABBIQMQ_TEST_EXCHANGE, ""direct"", true);
        String queueName = channel.queueDeclare().getQueue();
        channel.queueBind(queueName, RABBIQMQ_TEST_EXCHANGE, RABBITMQ_TEST_ROUTING_KEY);

        // Set up a consumer on the queue
        final boolean[] messageWasReceived = new boolean[1];
        channel.basicConsume(queueName, false, new DefaultConsumer(channel) {
            @Override
            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {
                messageWasReceived[0] = Arrays.equals(body, RABBITMQ_TEST_MESSAGE.getBytes());
            }
",non-flaky,5
91440,strapdata_elassandra,ArchiveTestCase.onlyCompatibleDistributions,"@TestCaseOrdering(TestCaseOrdering.AlphabeticOrder.class)
    public void onlyCompatibleDistributions() {
        assumeTrue(""only compatible distributions"", distribution().packaging.compatible);
    }
",non-flaky,5
276,tbsalling_aismessages,7b0c4c708b6bb9a6da3d5737bcad1857ade8a931.canHandleUnfragmentedMessageReceived,"@Test
public void canHandleUnfragmentedMessageReceived() {
    NMEAMessage unfragmentedNMEAMessage = NMEAMessage.fromString(""!AIVDM,1,1,,B,15MqdBP000G@qoLEi69PVGaN0D0=,0*3A"");
    final ArgumentCaptor<AISMessage> aisMessage = new ArgumentCaptor<>();
    context.checking(new Expectations() {{
        oneOf(aisMessageHandler).accept(with(aisMessage.getMatcher()));
    }});
    aisMessageReceiver.accept(unfragmentedNMEAMessage);
    assertEquals(AISMessageType.PositionReportClassAScheduled, aisMessage.getCapturedObject().getMessageType());
}",test order dependency,4
98589,nutzam_nutz,El2Test.logical,"    @Test
    public void logical() {
        assertEquals(true, El.eval(""2 > 1""));
        assertEquals(false, El.eval(""2 < 1""));
        assertEquals(true, El.eval(""2 >= 2""));
        assertEquals(true, El.eval(""2 <= 2""));
        assertEquals(true, El.eval(""2 == 2 ""));
        assertEquals(true, El.eval(""1 != 2""));
        assertEquals(true, El.eval(""!(1 == 2)""));
        assertEquals(true, El.eval(""!false""));
        assertEquals(true, El.eval(""true || false""));
        assertEquals(false, El.eval(""true && false""));
        assertEquals(false, El.eval(""false || true && false""));
    }
",non-flaky,5
104619,apache_pinot,RealtimeClusterIntegrationTest.testQueriesFromQueryFile,"  @Test
  public void testQueriesFromQueryFile()
      throws Exception {
    super.testQueriesFromQueryFile();
  }
",non-flaky,5
97683,vojtechhabarta_typescript-generator,ReadOnlyWriteOnlyTest.testJacksonSerialization,"    @Test
    public void testJacksonSerialization() throws JsonProcessingException {
        final ReadOnlyWriteOnlyUser user = new ReadOnlyWriteOnlyUser();
        user.name = ""name"";
        user.id1 = ""id1"";
        user._id2 = ""id2"";
        user.password1 = ""password1"";
        user.password2 = ""password2"";
        final String json = new ObjectMapper().writeValueAsString(user);
        Assert.assertTrue(json.contains(""id1""));
        Assert.assertTrue(json.contains(""id2""));
        Assert.assertTrue(!json.contains(""password1""));
        Assert.assertTrue(!json.contains(""password2""));
    }
",non-flaky,5
114079,aws_aws-sdk-java-v2,ExpressionTest.joinNames_correctlyJoinsEmpty,"    @Test
    public void joinNames_correctlyJoinsEmpty() {
        Map<String, String> names1 = new HashMap<>();
        names1.put(""one"", ""1"");
        names1.put(""two"", ""2"");
        Map<String, String> names2 = new HashMap<>();
        names2.put(""three"", ""3"");
        names2.put(""four"", ""4"");

        Map<String, String> result = Expression.joinNames(names1, null);
        assertThat(result.size(), is(2));
        assertThat(result, hasEntry(""one"", ""1""));
        assertThat(result, hasEntry(""two"", ""2""));

        result = Expression.joinNames(null, names2);
        assertThat(result.size(), is(2));
        assertThat(result, hasEntry(""three"", ""3""));
        assertThat(result, hasEntry(""four"", ""4""));

        result = Expression.joinNames(names1, Collections.emptyMap());
        assertThat(result.size(), is(2));
        assertThat(result, hasEntry(""one"", ""1""));
        assertThat(result, hasEntry(""two"", ""2""));

        result = Expression.joinNames(Collections.emptyMap(), names2);
        assertThat(result.size(), is(2));
        assertThat(result, hasEntry(""three"", ""3""));
        assertThat(result, hasEntry(""four"", ""4""));
    }
",non-flaky,5
98086,vert-x3_vertx-mongo-client,WriteConcernParserTest.testConnStringSimpleAndAdvancedWriteConcern,"  @Test
  public void testConnStringSimpleAndAdvancedWriteConcern() {
    final ConnectionString connString = new ConnectionString(""mongodb://localhost:27017/mydb?replicaSet=myapp"" +
      ""&w=majority&wtimeoutms=20&journal=false"");
    WriteConcern expected = new WriteConcern(""majority"").withWTimeout(20, TimeUnit.MILLISECONDS).withJournal(false);
    WriteConcern wc = new WriteConcernParser(connString, new JsonObject()).writeConcern();
    assertNotNull(wc);
    assertEquals(expected, wc);
  }
",non-flaky,5
156151,soot-oss_soot,ClassRenamerTest.getOrAddNewName_removePackage,"  @Test
  public void getOrAddNewName_removePackage() {
    ClassRenamer.v().setRemovePackages(true);

    String newName = ClassRenamer.v().getOrAddNewName(""a.b.c"", ""ClassName"");
    assertThat(newName, allOf(not(endsWith(""ClassName"")), not(containsString("".""))));

    String packageName = ""a.b.c"";
    for (int i = 0; i < 100; i++) {
      packageName = packageName + "".p"" + i;
      newName = ClassRenamer.v().getOrAddNewName(packageName, ""ClassName"");
      assertThat(newName, allOf(not(endsWith(""ClassName"")), not(containsString("".""))));
    }
  }
",non-flaky,5
86046,graylog2_graylog2-server,NotificationDtoTest.testValidLegacyNotification,"    @Test
    public void testValidLegacyNotification() {
        final NotificationDto validNotification = getLegacyNotification();

        final ValidationResult validationResult = validNotification.validate();
        assertThat(validationResult.failed()).isFalse();
        assertThat(validationResult.getErrors().size()).isEqualTo(0);
    }
",non-flaky,5
162431,testcontainers_testcontainers-java,GenericContainerRuleTest.exceptionThrownWhenMappedPortNotFound,"    @Test
    public void exceptionThrownWhenMappedPortNotFound() throws IOException {
        assertThrows(""When the requested port is not mapped, getMappedPort() throws an exception"",
                IllegalArgumentException.class,
                () -> {
                    return redis.getMappedPort(666);
                });
    }
",non-flaky,5
98665,nutzam_nutz,BaseTest.test_req_param2,"    @Test
    public void test_req_param2() {
        get(""/common/path2?key=base"");
        assertEquals(""base"", resp.getContent());
        get(""/common/path2?key=T"");
        assertEquals(getContextPath(), resp.getContent());
    }
",non-flaky,5
60908,apache_druid,MovingAverageIterableTest.testWithFilteredAggregation,"  @Test
  public void testWithFilteredAggregation()
  {

    Map<String, Object> event1 = new HashMap<>();
    Map<String, Object> event2 = new HashMap<>();

    List<DimensionSpec> ds = new ArrayList<>();
    ds.add(new DefaultDimensionSpec(""gender"", ""gender""));

    event1.put(""gender"", ""m"");
    event1.put(""pageViews"", 10L);
    Row row1 = new MapBasedRow(JAN_1, event1);

    event2.put(""gender"", ""m"");
    event2.put(""pageViews"", 20L);
    Row row2 = new MapBasedRow(JAN_4, event2);

    Sequence<RowBucket> seq = Sequences.simple(Arrays.asList(
        new RowBucket(JAN_1, Collections.singletonList(row1)),
        new RowBucket(JAN_2, Collections.emptyList()),
        new RowBucket(JAN_3, Collections.emptyList()),
        new RowBucket(JAN_4, Collections.singletonList(row2))
    ));

    AveragerFactory averagerfactory = new LongMeanAveragerFactory(""movingAvgPageViews"", 4, 1, ""pageViews"");
    AggregatorFactory aggregatorFactory = new LongSumAggregatorFactory(""pageViews"", ""pageViews"");
    DimFilter filter = new SelectorDimFilter(""gender"", ""m"", null);
    FilteredAggregatorFactory filteredAggregatorFactory = new FilteredAggregatorFactory(aggregatorFactory, filter);

    Iterator<Row> iter = new MovingAverageIterable(
        seq,
        ds,
        Collections.singletonList(averagerfactory),
        Collections.emptyList(),
        Collections.singletonList(filteredAggregatorFactory)
    ).iterator();

    Assert.assertTrue(iter.hasNext());
    Row result = iter.next();
    Assert.assertEquals(""m"", (result.getDimension(""gender"")).get(0));
    Assert.assertEquals(2.5f, result.getMetric(""movingAvgPageViews"").floatValue(), 0.0f);

    Assert.assertTrue(iter.hasNext());
    result = iter.next();
    Assert.assertEquals(""m"", (result.getDimension(""gender"")).get(0));
    Assert.assertEquals(2.5f, result.getMetric(""movingAvgPageViews"").floatValue(), 0.0f);

    Assert.assertTrue(iter.hasNext());
    result = iter.next();
    Assert.assertEquals(""m"", (result.getDimension(""gender"")).get(0));
    Assert.assertEquals(2.5f, result.getMetric(""movingAvgPageViews"").floatValue(), 0.0f);

    Assert.assertTrue(iter.hasNext());
    result = iter.next();
    Assert.assertEquals(""m"", (result.getDimension(""gender"")).get(0));
    Assert.assertEquals(7.5f, result.getMetric(""movingAvgPageViews"").floatValue(), 0.0f);

    Assert.assertFalse(iter.hasNext());
  }
",non-flaky,5
110124,Wikidata_wikidata-toolkit,ClientTest.testNonSitesAction,"	@Test
	public void testNonSitesAction() throws ParseException, IOException {
		String[] args = new String[] { ""-a"", ""json"", ""-q"" };
		Client client = new Client(mockDpc, args);
		client.performActions(); // print help

		Mockito.verify(mockDpc).processDump(Mockito.<MwDumpFile> any());
		Mockito.verify(mockDpc, Mockito.never()).getSitesInformation();
	}
",non-flaky,5
179469,abel533_Mapper,DateTimeTest.testInsert2,"    @Test
    public void testInsert2() {
        SqlSession sqlSession = getSqlSession();
        try {
            TimeModel2Mapper mapper = sqlSession.getMapper(TimeModel2Mapper.class);
            TimeModel2 timeModel = new TimeModel2();
            timeModel.setId(3);
            Date now = new Date();
            Timestamp now2 = new Timestamp(now.getTime());
            timeModel.setTestDate(now);
            timeModel.setTestTime(now);
            timeModel.setTestDatetime(now2);
            Assert.assertEquals(1, mapper.insert(timeModel));

            timeModel = mapper.selectByPrimaryKey(3);

            //ä¿å­åæ°æ®åºä¸­ä¸å­å¨æ¶é´é¨å
            Assert.assertEquals(toDate(now), toDate(timeModel.getTestDate()));
            Assert.assertEquals(toDate(now) + "" 00:00:00"", toDatetime(timeModel.getTestDate()));

            //æ¥æåæ¶é´é½æ
            Assert.assertEquals(toTime(now), toTime(timeModel.getTestTime()));
            Assert.assertEquals(toDatetime(now), toDatetime(timeModel.getTestTime()));

            Assert.assertEquals(toDatetime(now), toDatetime(timeModel.getTestDatetime()));
        } finally {
            sqlSession.close();
        }
    }
",non-flaky,5
77718,pholser_junit-quickcheck,PrimitivePropertyParameterTypesTest.shouldHold,"    @Test public void shrinkingPrimitivePositiveFloat() {
        @Property public void shouldHold(@InRange(minFloat = 5.123123F, maxFloat = 111.2222F) float f) {
            values.add(f);

            fail();
        }
",non-flaky,5
328,apache_hadoop,TestViewfsWithNfs3.testNfsAccessNN1,"  @Test (timeout = 60000)
  public void testNfsAccessNN1() throws Exception {
    HdfsFileStatus status = nn1.getRpcServer().getFileInfo(""/user1/file1"");
    int namenodeId = Nfs3Utils.getNamenodeId(config, hdfs1.getUri());
    testNfsGetAttrResponse(status.getFileId(), namenodeId, Nfs3Status.NFS3_OK);
  }
",non-flaky,5
33663,alibaba_fastjson,SerializeWriterTest.test_large,"    @Test
    public void test_large() throws Exception {
        SerializeWriter writer = new SerializeWriter();

        for (int i = 0; i < 1024 * 1024; ++i) {
            writer.write(i);
        }

        writer.close();
    }
",non-flaky,5
118731,netty_netty,EmptyByteBufTest.testWriteEmptyByteBuf,"    @Test
    public void testWriteEmptyByteBuf() {
        EmptyByteBuf empty = new EmptyByteBuf(UnpooledByteBufAllocator.DEFAULT);
        empty.writeBytes(Unpooled.EMPTY_BUFFER); // Ok
        ByteBuf nonEmpty = UnpooledByteBufAllocator.DEFAULT.buffer().writeBoolean(false);
        try {
            empty.writeBytes(nonEmpty);
            fail();
        } catch (IndexOutOfBoundsException ignored) {
            // Ignore.
        } finally {
            nonEmpty.release();
        }
    }
",non-flaky,5
91399,OpenLCB_OpenLCB_Java,ProducerPaneTest.put,"    @Test
    public void testCTor() {
        Assume.assumeFalse(GraphicsEnvironment.isHeadless());
        NodeID nodeID = new NodeID(new byte[]{1,2,3,4,5,6});
        EventID eventID = new EventID(new byte[]{1,0,0,0,0,0,1,0});
        Connection testConnection = new AbstractConnection(){
            public void put(Message msg, Connection sender) {
            }
",non-flaky,5
30953,camunda-cloud_zeebe,SubscriptionUtilTest.shouldGetPartitionIdForCorrelationKey,"  @Test
  public void shouldGetPartitionIdForCorrelationKey() {
    assertThat(getSubscriptionPartitionId(wrapString(""a""), 10)).isEqualTo(7 + START_PARTITION_ID);
    assertThat(getSubscriptionPartitionId(wrapString(""b""), 3)).isEqualTo(2 + START_PARTITION_ID);
    assertThat(getSubscriptionPartitionId(wrapString(""c""), 11)).isEqualTo(0 + START_PARTITION_ID);
    assertThat(getSubscriptionPartitionId(wrapString(""foobar""), 100))
        .isEqualTo(63 + START_PARTITION_ID);
  }
",non-flaky,5
77529,dropwizard_dropwizard,DropwizardAppRuleConfigOverrideTest.supportsConfigAttributeOverrides,"    @Test
    public void supportsConfigAttributeOverrides() {
        final String content = RULE.client().target(""http://localhost:"" + RULE.getLocalPort() + ""/test"")
            .request().get(String.class);

        assertThat(content).isEqualTo(""A new way to say Hooray!"");
    }
",non-flaky,5
50,wildfly_wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993.testCompositeBindingOps,"@Test
public void testCompositeBindingOps() throws Exception {
    final KernelServices services = createKernelServicesBuilder(createAdditionalInitialization()).setSubsystemXml(getSubsystemXml()).build();
    final ModelNode addr = Operations.createAddress(ModelDescriptionConstants.SUBSYSTEM, NamingExtension.SUBSYSTEM_NAME, NamingSubsystemModel.BINDING, ""java:global/alookup"");
    final ModelNode addOp = Operations.createAddOperation(addr);
    addOp.get(NamingSubsystemModel.BINDING_TYPE).set(NamingSubsystemModel.LOOKUP);
    final ModelNode compositeOp = Operations.CompositeOperationBuilder.create().addStep(addOp).addStep(Operations.createWriteAttributeOperation(addr, NamingSubsystemModel.LOOKUP, ""java:global/a"")).build().getOperation();
    ModelTestUtils.checkOutcome(services.executeOperation(compositeOp));
}",test order dependency,4
110185,Wikidata_wikidata-toolkit,PropertyRegisterTest.testSetPropertyTypeFromStringValue,"	@Test
	public void testSetPropertyTypeFromStringValue() {
		assertEquals(this.propertyRegister.setPropertyTypeFromStringValue(
				dataObjectFactory.getPropertyIdValue(""P434"", this.siteIri),
				dataObjectFactory
						.getStringValue(""http://musicbrainz.org/$1/artist"")),
				""http://wikiba.se/ontology#String"");
	}
",non-flaky,5
33861,apache_camel,FhirCustomClientConfigurationIT.testConfigurationWithCustomClient,"    @Test
    public void testConfigurationWithCustomClient() throws Exception {
        FhirEndpoint endpoint = getMandatoryEndpoint(TEST_URI_CUSTOM_CLIENT, FhirEndpoint.class);
        IGenericClient client = endpoint.getClient();
        assertTrue(client instanceof CustomClient);
    }
",non-flaky,5
77642,pholser_junit-quickcheck,Primitive3DArrayPropertyParameterTypesTest.shouldHold,"    @Test public void primitive3DByteArray() {
        @Property(trials = 2) public void shouldHold(byte[][][] b) {
        }
",non-flaky,5
118762,netty_netty,ByteBufUtilTest.testWriteUtf8InvalidEndOnLeadingSurrogate,"    @Test
    public void testWriteUtf8InvalidEndOnLeadingSurrogate() {
        String surrogateString = new StringBuilder(2)
                                .append('\uD800')
                                .toString();
        ByteBuf buf = Unpooled.buffer(16);
        buf.writeBytes(surrogateString.getBytes(CharsetUtil.UTF_8));
        ByteBuf buf2 = Unpooled.buffer(16);
        ByteBufUtil.writeUtf8(buf2, surrogateString);

        assertEquals(buf, buf2);
        assertEquals(buf.readableBytes(), ByteBufUtil.utf8Bytes(surrogateString));

        buf.release();
        buf2.release();
    }
",non-flaky,5
76682,quarkusio_quarkus,CustomAuthEmbeddedBase.testJaxrsPathAdminRoleFailure,"    @Test
    public void testJaxrsPathAdminRoleFailure() {
        RestAssured.given().auth().preemptive().basic(""noadmin"", ""n0Adm1n"")
                .when().get(""/jaxrs-secured/parameterized-paths/my/banking/admin"").then()
                .statusCode(403);
    }
",non-flaky,5
112743,hwang-pku_ormlite-core,DatabaseConnectionProxyTest.testQueryForLongString,"	@Test
	public void testQueryForLongString() throws Exception {
		DatabaseConnection conn = createMock(DatabaseConnection.class);
		String statement = ""select stuff from foo"";
		long result = 31231231241414L;
		expect(conn.queryForLong(statement)).andReturn(result);
		conn.close();
		DatabaseConnectionProxy proxy = new DatabaseConnectionProxy(conn);
		replay(conn);
		assertEquals(result, proxy.queryForLong(statement));
		proxy.close();
		verify(conn);
	}
",non-flaky,5
99735,apache_cassandra,FQLReplayTest.testCompare,"    @Test
    public void testCompare()
    {
        FQLQuery q1 = new FQLQuery.Single(""abc"", 0, QueryOptions.DEFAULT, 123, 111, 222, ""aaaa"", Collections.emptyList());
        FQLQuery q2 = new FQLQuery.Single(""abc"", 0, QueryOptions.DEFAULT, 123, 111, 222,""aaaa"", Collections.emptyList());

        assertEquals(0, q1.compareTo(q2));
        assertEquals(0, q2.compareTo(q1));

        FQLQuery q3 = new FQLQuery.Batch(""abc"", 0, QueryOptions.DEFAULT, 123, 111, 222, com.datastax.driver.core.BatchStatement.Type.UNLOGGED, Collections.emptyList(), Collections.emptyList());
        // single queries before batch queries
        assertTrue(q1.compareTo(q3) < 0);
        assertTrue(q3.compareTo(q1) > 0);

        // check that smaller query time
        FQLQuery q4 = new FQLQuery.Single(""abc"", 0, QueryOptions.DEFAULT, 124, 111, 222, ""aaaa"", Collections.emptyList());
        assertTrue(q1.compareTo(q4) < 0);
        assertTrue(q4.compareTo(q1) > 0);

        FQLQuery q5 = new FQLQuery.Batch(""abc"", 0, QueryOptions.DEFAULT, 124, 111, 222, com.datastax.driver.core.BatchStatement.Type.UNLOGGED, Collections.emptyList(), Collections.emptyList());
        assertTrue(q1.compareTo(q5) < 0);
        assertTrue(q5.compareTo(q1) > 0);

        FQLQuery q6 = new FQLQuery.Single(""abc"", 0, QueryOptions.DEFAULT, 123, 111, 222, ""aaaa"", Collections.singletonList(ByteBufferUtil.bytes(10)));
        FQLQuery q7 = new FQLQuery.Single(""abc"", 0, QueryOptions.DEFAULT, 123, 111, 222, ""aaaa"", Collections.emptyList());
        assertTrue(q6.compareTo(q7) > 0);
        assertTrue(q7.compareTo(q6) < 0);

        FQLQuery q8 = new FQLQuery.Single(""abc"", 0, QueryOptions.DEFAULT, 123, 111, 222, ""aaaa"", Collections.singletonList(ByteBufferUtil.bytes(""a"")));
        FQLQuery q9 = new FQLQuery.Single(""abc"", 0, QueryOptions.DEFAULT, 123, 111, 222, ""aaaa"", Collections.singletonList(ByteBufferUtil.bytes(""b"")));
        assertTrue(q8.compareTo(q9) < 0);
        assertTrue(q9.compareTo(q8) > 0);
    }
",non-flaky,5
99772,apache_cassandra,RateBasedBackPressureTest.testBackPressureFastFlow,"    @Test
    public void testBackPressureFastFlow() throws Exception
    {
        long windowSize = 6000;
        TestTimeSource timeSource = new TestTimeSource();
        TestableBackPressure strategy = new TestableBackPressure(ImmutableMap.of(HIGH_RATIO, ""0.9"", FACTOR, ""10"", FLOW, ""FAST""), timeSource, windowSize);
        RateBasedBackPressureState state1 = strategy.newState(InetAddressAndPort.getByName(""127.0.0.1""));
        RateBasedBackPressureState state2 = strategy.newState(InetAddressAndPort.getByName(""127.0.0.2""));
        RateBasedBackPressureState state3 = strategy.newState(InetAddressAndPort.getByName(""127.0.0.3""));

        // Update incoming and outgoing rates:
        state1.incomingRate.update(50);
        state1.outgoingRate.update(100);
        state2.incomingRate.update(80); // fast
        state2.outgoingRate.update(100);
        state3.incomingRate.update(20);
        state3.outgoingRate.update(100);

        // Move time ahead:
        timeSource.sleep(windowSize, TimeUnit.MILLISECONDS);

        // Verify the fast replica rate limiting has been applied:
        Set<RateBasedBackPressureState> replicaGroup = Sets.newHashSet(state1, state2, state3);
        strategy.apply(replicaGroup, 1, TimeUnit.SECONDS);
        assertTrue(strategy.checkAcquired());
        assertTrue(strategy.checkApplied());
        assertEquals(12.0, strategy.getRateLimiterForReplicaGroup(replicaGroup).getRate(), 0.1);
    }
",non-flaky,5
20953,NationalSecurityAgency_timely,MetricAgeOffIteratorTest.testDefault,"    @Test
    public void testDefault() throws Exception {
        SortedMap<Key, Value> table = new TreeMap<>();
        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME), new byte[0], new byte[0], new byte[0],
                TEST_TIME), EMPTY_VALUE);
        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME + 1), new byte[0], new byte[0],
                new byte[0], TEST_TIME + 1), EMPTY_VALUE);
        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME + 2), new byte[0], new byte[0],
                new byte[0], TEST_TIME + 2), EMPTY_VALUE);
        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME + 3), new byte[0], new byte[0],
                new byte[0], TEST_TIME + 3), EMPTY_VALUE);
        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME + 4), new byte[0], new byte[0],
                new byte[0], TEST_TIME + 4), EMPTY_VALUE);
        table.put(new Key(MetricAdapter.encodeRowKey(""sys.cpu.user"", TEST_TIME + 5), new byte[0], new byte[0],
                new byte[0], TEST_TIME + 5), EMPTY_VALUE);

        SortedKeyValueIterator<Key, Value> source = new SortedMapIterator(table);
        MetricAgeOffIterator iter = new MetricAgeOffIterator();
        HashMap<String, String> options = new HashMap<>();
        options.put(MetricAgeOffIterator.AGE_OFF_PREFIX + ""default"", Integer.toString(1 * ONE_DAY));
        iter.init(source, options, null);
        iter.seek(new Range(), columnFamilies, true);
        int seen = 0;
        while (iter.hasTop()) {
            Key k = iter.getTopKey();
            Assert.assertTrue(k.getTimestamp() >= TEST_TIME && k.getTimestamp() <= TEST_TIME + 5);
            seen++;
            iter.next();
        }
        Assert.assertEquals(6, seen);
    }
",non-flaky,5
135727,Netflix_Hystrix,CommonHystrixCommandTests.call,"    @Test
    public void testExecutionHookSemaphoreShortCircuitSuccessfulFallback() {
        assertHooksOnSuccess(
                new Func0<C>() {
                    @Override
                    public C call() {
                        return getCircuitOpenCommand(ExecutionIsolationStrategy.SEMAPHORE, FallbackResult.SUCCESS);
                    }
",non-flaky,5
177245,line_armeria,DnsAddressEndpointGroupTest.ipV4AndIpV6,"    @Test
    public void ipV4AndIpV6() throws Exception {
        try (TestDnsServer server = new TestDnsServer(ImmutableMap.of(
                new DefaultDnsQuestion(""baz.com."", A),
                new DefaultDnsResponse(0).addRecord(ANSWER, newAddressRecord(""baz.com."", ""1.1.1.1"")),
                new DefaultDnsQuestion(""baz.com."", AAAA),
                new DefaultDnsResponse(0).addRecord(ANSWER, newAddressRecord(""baz.com."", ""::1""))
        ))) {
            try (DnsAddressEndpointGroup group =
                         DnsAddressEndpointGroup.builder(""baz.com"")
                                                .port(8080)
                                                .serverAddresses(server.addr())
                                                .resolvedAddressTypes(ResolvedAddressTypes.IPV4_PREFERRED)
                                                .build()) {

                assertThat(group.whenReady().get()).containsExactly(
                        Endpoint.of(""baz.com"", 8080).withIpAddr(""1.1.1.1""),
                        Endpoint.of(""baz.com"", 8080).withIpAddr(""::1""));
            }
        }
    }
",non-flaky,5
53180,cloudfoundry_uaa,MfaProviderTest.testSerialize,"    @Test
    public void testSerialize() {

        MfaProvider<GoogleMfaProviderConfig> provider = createValidGoogleMfaProvider();
        provider.setCreated(new Date());
        provider.setLastModified(new Date());
        String string = JsonUtils.writeValueAsString(provider);
        JsonNode output = JsonUtils.readTree(JsonUtils.writeValueAsString(provider));
        assertEquals(output.get(""type"").textValue(), MfaProvider.MfaProviderType.GOOGLE_AUTHENTICATOR.toValue());
        JsonNode config = output.get(""config"");
        assertEquals(config.get(""issuer"").textValue(), ""current-zone"");
        assertEquals(config.get(""providerDescription"").textValue(), ""config description"");
    }
",non-flaky,5
60912,apache_druid,DoubleMaxAveragerFactoryTest.testCreateAverager,"  @Test
  public void testCreateAverager()
  {
    AveragerFactory<?, ?> fac = new DoubleMaxAveragerFactory(""test"", 5, 1, ""field"");
    Assert.assertThat(fac.createAverager(), CoreMatchers.instanceOf(DoubleMaxAverager.class));
  }
",non-flaky,5
179490,abel533_Mapper,SafeDeleteByMethodTest.testSafeDelete,"    @Test(expected = PersistenceException.class)
    public void testSafeDelete() {
        SqlSession sqlSession = getSqlSession();
        try {
            CountryMapper mapper = sqlSession.getMapper(CountryMapper.class);
            mapper.delete(new Country());
        } finally {
            sqlSession.close();
        }
    }
",non-flaky,5
76717,quarkusio_quarkus,QuarkusCodestartBuildIT.testRunTogetherCodestartsScala,"    @Test
    public void testRunTogetherCodestartsScala() throws Exception {
        generateProjectRunTests(""maven"", ""scala"", getExtensionCodestarts());
    }
",non-flaky,5
76974,Tencent_Firestorm,SparkClientWithLocalTest.readTest2,"  @Test
  public void readTest2() {
    String testAppId = ""localReadTest2"";
    registerApp(testAppId, Lists.newArrayList(new PartitionRange(0, 0)));

    Map<Long, byte[]> expectedData = Maps.newHashMap();
    Roaring64NavigableMap blockIdBitmap = Roaring64NavigableMap.bitmapOf();
    Roaring64NavigableMap taskIdBitmap = Roaring64NavigableMap.bitmapOf(0);
    List<ShuffleBlockInfo> blocks = createShuffleBlockList(
        0, 0, 0, 2, 30, blockIdBitmap, expectedData, mockSSI);
    sendTestData(testAppId, blocks);
    blocks = createShuffleBlockList(
        0, 0, 0, 2, 30, blockIdBitmap, expectedData, mockSSI);
    sendTestData(testAppId, blocks);

    ShuffleReadClientImpl readClient = new ShuffleReadClientImpl(StorageType.LOCALFILE.name(),
        testAppId, 0, 0, 100, 1, 10, 1000,
        """", blockIdBitmap, taskIdBitmap, shuffleServerInfo, null);

    validateResult(readClient, expectedData);
    readClient.checkProcessedBlockIds();
    readClient.close();
  }
",non-flaky,5
60879,apache_druid,InfluxParserTest.testParseWhitelistFail,"  @Test
  public void testParseWhitelistFail()
  {
    Parser<String, Object> parser = new InfluxParser(Sets.newHashSet(""mem""));
    String input = ""cpu,host=foo.bar.baz,region=us-east,application=echo pct_idle=99.3,pct_user=88.8,m1_load=2 1465839830100400200"";
    try {
      parser.parseToMap(input);
    }
    catch (ParseException t) {
      MatcherAssert.assertThat(t, Matchers.isA(ParseException.class));
      return;
    }

    Assert.fail(""Exception not thrown"");
  }
",non-flaky,5
33704,alibaba_fastjson,JSONScannerTest.checkTime10,"  @Test
  public void checkTime10() throws Throwable {

    // Arrange
    JSONScanner objectUnderTest = ((JSONScanner)Reflector.getInstance(""com.alibaba.fastjson.parser.JSONScanner""));
    objectUnderTest.hasSpecial = false;
    objectUnderTest.token = 0;
    objectUnderTest.locale = null;
    objectUnderTest.np = 0;
    objectUnderTest.features = 0;
    Reflector.setField(objectUnderTest, ""text"", """");
    objectUnderTest.calendar = null;
    objectUnderTest.matchStat = 0;
    objectUnderTest.bp = 0;
    Reflector.setField(objectUnderTest, ""len"", 0);
    objectUnderTest.stringDefaultValue = """";
    objectUnderTest.pos = 0;
    objectUnderTest.sp = 0;
    objectUnderTest.sbuf = null;
    objectUnderTest.ch = '\u0000';
    objectUnderTest.timeZone = null;
    objectUnderTest.eofPos = 0;
    char h0 = '1';
    char h1 = '9';
    char m0 = '4';
    char m1 = '3';
    char s0 = '1';
    char s1 = '\u0000';

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkTime"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(objectUnderTest, h0, h1, m0, m1, s0, s1);

    // Assert result
    Assert.assertEquals(false, retval);

  }
",non-flaky,5
112074,apache_shardingsphere-elasticjob,JobConfigurationExceptionTest.assertGetCause,"    @Test
    public void assertGetCause() {
        assertThat(new JobConfigurationException(new RuntimeException()).getCause(), instanceOf(RuntimeException.class));
    }
",non-flaky,5
113709,salesforce_reactive-grpc,ServerErrorIntegrationTest.manyToOne,"    @Test
    public void manyToOne() {
        ReactorGreeterGrpc.ReactorGreeterStub stub = ReactorGreeterGrpc.newReactorStub(channel);
        Mono<HelloResponse> resp = Flux.just(HelloRequest.getDefaultInstance()).as(stub::sayHelloReqStream);
        StepVerifier.create(resp)
                .verifyErrorMatches(t -> t instanceof StatusRuntimeException && ((StatusRuntimeException)t).getStatus() == Status.INTERNAL);
    }
",non-flaky,5
26723,MundaneImmortal_pair-distribution-app,OpsPairsCombinationsTest.testGetPastPairsFiltersOps,"	@Test
	public void testGetPastPairsFiltersOps() {
		List<DayPairs> pairsListFromDevs = getPairsListFromDevs(getStandardDevs(), false);
		Pair opsPair = pairsListFromDevs.get(0).getPairByTrack(""track1"");
		opsPair.setOpsPair(true);
		OpsPairCombinations devPairCombinations = new OpsPairCombinations(pairsListFromDevs);
		
		
		assertThat(devPairCombinations.getPastPairs(0), is(Arrays.asList(pairsListFromDevs.get(0).getPairByTrack(""track1""))));
	}
",non-flaky,5
33845,apache_camel,FhirTransactionIT.testWithStringBundle,"    @Test
    public void testWithStringBundle() throws Exception {
        Bundle transactionBundle = createTransactionBundle();
        String stringBundle = fhirContext.newJsonParser().encodeResourceToString(transactionBundle);

        // using String message body for single parameter ""sBundle""
        final String result = requestBody(""direct://WITH_STRING_BUNDLE"", stringBundle);

        assertNotNull(result, ""withBundle result"");
        assertTrue(result.contains(""Bundle""));
        LOG.debug(""withBundle: "" + result);
    }
",non-flaky,5
19493,eclipse_xtext-core,Bug367679Test.testValidatorExists_1,"	@Test 
	public void testValidatorExists_1() {
		assertValidatorExists();
	}
",non-flaky,5
160403,ConsenSys_teku,ChainDataProviderTest.validatorParameterToIndex_shouldReturnEmptyIfIndexOutOfBounds,"  @Test
  public void validatorParameterToIndex_shouldReturnEmptyIfIndexOutOfBounds() {
    final ChainDataProvider provider =
        new ChainDataProvider(spec, recentChainData, combinedChainDataClient);
    assertThat(provider.validatorParameterToIndex(""1024000"")).isEmpty();
  }
",non-flaky,5
133979,CorfuDB_CorfuDB,ClientHandshakeHandlerTest.testFireHandshakeSucceeded,"    @Test
    public void testFireHandshakeSucceeded() throws Exception {
        // Get a HandshakeRequestMsg with specified server node id.
        ResponseMsg response = getResponseMsg(
                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.IGNORE),
                getHandshakeResponseMsg(SERVER_NODEID)
        );

        when(mockChannelContext.pipeline()).thenReturn(mockChannelPipeline);
        when(mockChannelPipeline.remove(""readTimeoutHandler"")).thenReturn(clientHandshakeHandler);

        clientHandshakeHandler.channelRead(mockChannelContext, response);

        verify(mockChannelContext).fireUserEventTriggered(ClientHandshakeEvent.CONNECTED);
    }
",non-flaky,5
162725,OpenAPITools_openapi-generator,XmlItemTest.namespaceBooleanTest,"    @Test
    public void namespaceBooleanTest() {
        // TODO: test namespaceBoolean
    }
",non-flaky,5
86119,graylog2_graylog2-server,EventDefinitionFacadeTest.createExcerpt,"    @Test
    public void createExcerpt() {
        final Optional<EventDefinitionDto> eventDefinitionDto = eventDefinitionService.get(
                ""5d4032513d2746703d1467f6"");
        assertThat(eventDefinitionDto).isPresent();
        final EntityExcerpt excerpt = facade.createExcerpt(eventDefinitionDto.get());
        assertThat(excerpt.title()).isEqualTo(""title"");
        assertThat(excerpt.id()).isEqualTo(ModelId.of(""5d4032513d2746703d1467f6""));
        assertThat(excerpt.type()).isEqualTo(ModelTypes.EVENT_DEFINITION_V1);
    }
",non-flaky,5
60880,apache_druid,InfluxParserTest.testParseFailures,"  @Test
  public void testParseFailures(Pair<String, String> testCase)
  {
    Parser<String, Object> parser = new InfluxParser(null);
    try {
      parser.parseToMap(testCase.rhs);
    }
    catch (ParseException t) {
      MatcherAssert.assertThat(t, Matchers.isA(ParseException.class));
      return;
    }

    Assert.fail(testCase.rhs + "": exception not thrown"");
  }
",non-flaky,5
97984,ReactiveX_RxJava,ObservableTests.call,"    @Test
    public void testErrorThrownWithoutErrorHandlerSynchronous() {
        try {
            Observable.error(new RuntimeException(""failure"")).subscribe(new Action1<Object>() {

                @Override
                public void call(Object t1) {
                    // won't get anything
                }
",non-flaky,5
60951,apache_druid,RowBucketIterableTest.testMissingDaysInMiddleOneRow,"  @Test
  public void testMissingDaysInMiddleOneRow()
  {
    List<Row> expectedDay1 = Collections.singletonList(JAN_1_M_10);
    List<Row> expectedDay2 = Collections.singletonList(JAN_2_M_10);
    List<Row> expectedDay3 = Collections.emptyList();
    List<Row> expectedDay4 = Collections.singletonList(JAN_4_M_10);

    rows = new ArrayList<>();
    rows.add(JAN_1_M_10);
    rows.add(JAN_2_M_10);
    rows.add(JAN_4_M_10);

    intervals = new ArrayList<>();
    intervals.add(INTERVAL_JAN_1_4);

    Sequence<Row> seq = Sequences.simple(rows);
    RowBucketIterable rbi = new RowBucketIterable(seq, intervals, ONE_DAY);
    Iterator<RowBucket> iter = rbi.iterator();

    RowBucket actual = iter.next();
    Assert.assertEquals(expectedDay1, actual.getRows());

    actual = iter.next();
    Assert.assertEquals(expectedDay2, actual.getRows());

    actual = iter.next();
    Assert.assertEquals(JAN_3, actual.getDateTime());
    Assert.assertEquals(expectedDay3, actual.getRows());

    actual = iter.next();
    Assert.assertEquals(expectedDay4, actual.getRows());
  }
",non-flaky,5
134999,undertow-io_undertow,AnnotatedEndpointTest.testEncodingAndDecodingText,"    @Test
    public void testEncodingAndDecodingText() throws Exception {
        final byte[] payload = ""hello"".getBytes();
        final FutureResult latch = new FutureResult();

        WebSocketTestClient client = new WebSocketTestClient(WebSocketVersion.V13, new URI(""ws://"" + DefaultServer.getHostAddress(""default"") + "":"" + DefaultServer.getHostPort(""default"") + ""/ws/encoding/Stuart""));
        client.connect();
        client.send(new TextWebSocketFrame(Unpooled.wrappedBuffer(payload)), new FrameChecker(TextWebSocketFrame.class, ""hello Stuart"".getBytes(), latch));
        latch.getIoFuture().get();
        client.destroy();
    }
",non-flaky,5
84577,apache_zookeeper,LeaderElectionSupportTest.testNodes20,"    @Test
    public void testNodes20() throws Exception {
        int testIterations = 20;
        final CountDownLatch latch = new CountDownLatch(testIterations);
        final AtomicInteger failureCounter = new AtomicInteger();

        for (int i = 0; i < testIterations; i++) {
            runElectionSupportThread(latch, failureCounter);
        }

        assertEquals(0, failureCounter.get());

        if (!latch.await(10, TimeUnit.SECONDS)) {
            LOGGER.info(""Waited for all threads to start, but timed out. We had {} failures."", failureCounter);
        }
    }
",non-flaky,5
178030,aosp-mirror_platform_frameworks_support,GuidedDatePickerTest.testJanuaryToFebruaryTransitionForLeapYear,"    @Test
    public void testJanuaryToFebruaryTransitionForLeapYear() throws Throwable {
        long startTime = System.currentTimeMillis();
        Intent intent = new Intent();

        String title = ""Date Picker Transition Test"";
        String breadcrumb = ""Month Transition Test Demo"";
        String description = ""Testing the transition from Jan to Feb (leap year)"";
        GuidanceStylist.Guidance guidance = new GuidanceStylist.Guidance(title, description,
                breadcrumb, null);

        List<GuidedAction> actionList = new ArrayList<>();

        Calendar cal = Calendar.getInstance();

        cal.set(Calendar.YEAR, 2016);   // 2016 is a leap year
        cal.set(Calendar.MONTH, Calendar.JANUARY);
        cal.set(Calendar.DAY_OF_MONTH, cal.getActualMaximum(Calendar.DAY_OF_MONTH));
        Date initialDate = cal.getTime();

        GuidedDatePickerAction action = new GuidedDatePickerAction.Builder(
                mContext)
                .id(0)
                .title(""Date"")
                .date(initialDate.getTime())
                .datePickerFormat(""DMY"")
                .build();

        actionList.add(action);

        GuidedStepAttributesTestFragment.clear();
        GuidedStepAttributesTestFragment.GUIDANCE = guidance;
        GuidedStepAttributesTestFragment.ACTION_LIST = actionList;

        initActivity(intent);

        DatePicker mPickerView = (DatePicker) mActivity.findViewById(
                R.id.guidedactions_activator_item);

        verticalScrollToFieldValue(Calendar.MONTH, Calendar.FEBRUARY, new int[] {0, 1, 2},
                mPickerView, KeyEvent.KEYCODE_DPAD_DOWN);
        long executionTime = System.currentTimeMillis() - startTime;
        Log.d(TAG, ""testJanuaryToFebruaryTransitionForLeapYear() Execution time: "" + executionTime);
        Thread.sleep(FINAL_WAIT);
    }
",non-flaky,5
156447,apache_commons-lang,DateUtilsFragmentTest.testMillisecondsOfMinuteWithDate,"    @Test
    public void testMillisecondsOfMinuteWithDate() {
        final long testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.MINUTE);
        assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND), testResult);
    }
",non-flaky,5
33840,apache_camel,FhirOperationIT.testOnInstanceVersion,"    @Test
    public void testOnInstanceVersion() throws Exception {
        final Map<String, Object> headers = new HashMap<>();
        // parameter type is org.hl7.fhir.instance.model.api.IIdType
        headers.put(""CamelFhir.id"", this.patient.getIdElement());
        // parameter type is String
        headers.put(""CamelFhir.name"", ""everything"");
        // parameter type is org.hl7.fhir.instance.model.api.IBaseParameters
        headers.put(""CamelFhir.parameters"", null);
        // parameter type is Class
        headers.put(""CamelFhir.outputParameterType"", Parameters.class);
        headers.put(""CamelFhir.useHttpGet"", Boolean.FALSE);
        // parameter type is Class
        headers.put(""CamelFhir.returnType"", null);
        // parameter type is java.util.Map
        headers.put(""CamelFhir.extraParameters"", null);

        final Parameters result = requestBodyAndHeaders(""direct://ON_INSTANCE_VERSION"", null, headers);

        LOG.debug(""onInstance: "" + result);
        assertNotNull(result, ""onInstance result"");
        Bundle bundle = (Bundle) result.getParameter().get(0).getResource();
        assertNotNull(bundle, ""onInstance result"");
        IdType id = bundle.getEntry().get(0).getResource().getIdElement().toUnqualifiedVersionless();
        assertEquals(patient.getIdElement().toUnqualifiedVersionless(), id);
    }
",non-flaky,5
19443,eclipse_xtext-core,TypeHierarchyHelperTest.testReferences,"	@Test
	public void testReferences() throws Exception {
		EClassInfo a = addClass(""a"");
		EClassInfo b = addClass(""b"");
		EClassInfo c = addClass(""c"");
		EClassInfo d = addClass(""d"");
		b.addSupertype(a);
		c.addSupertype(a);
		addReference(b, d, ""r1"");
		addReference(c, d, ""r1"");

		assertEquals(0, a.getEClass().getEStructuralFeatures().size());
		assertEquals(1, b.getEClass().getEStructuralFeatures().size());
		assertEquals(1, c.getEClass().getEStructuralFeatures().size());

		liftUpFeatures();

		assertEquals(1, a.getEClass().getEStructuralFeatures().size());
		assertEquals(0, b.getEClass().getEStructuralFeatures().size());
		assertEquals(0, c.getEClass().getEStructuralFeatures().size());
	}
",non-flaky,5
53174,cloudfoundry_uaa,ScimGroupTests.testAddOneMember,"    @Test
    public void testAddOneMember() {
        patch.setMembers(Arrays.asList(member1));
        group.setMembers(Arrays.asList(member2, member3));
        assertEquals(2, group.getMembers().size());
        group.patch(patch);
        assertEquals(3, group.getMembers().size());

    }
",non-flaky,5
21220,androidx_androidx,PreferenceDataStoreTest.testPutBooleanWithDataStoreOnMgr,"    @Test
    public void testPutBooleanWithDataStoreOnMgr() {
        mManager.setPreferenceDataStore(mDataStore);
        mScreen.addPreference(mPreference);
        putBooleanTestCommon();
    }
",non-flaky,5
156166,soot-oss_soot,TypingMinimizeTest.testAbstractAbstractTyping,"  @Test
  public void testAbstractAbstractTyping() {

    logger.debug(""Starting Object Random Minimize"");

    List<Typing> typingList = new ArrayList<>();
    Local x1 = new JimpleLocal(""$x1"", null);

    Typing typing1 = new Typing(Arrays.asList(x1));
    typing1.set(x1, interfaceType);
    typingList.add(typing1);

    Typing typing2 = new Typing(Arrays.asList(x1));
    typing2.set(x1, abstractClass_Interface1Type);
    typingList.add(typing2);

    Typing typing3 = new Typing(Arrays.asList(x1));
    typing3.set(x1, abstractClass_Interface2Type);
    typingList.add(typing3);

    getTypingStrategy().minimize(typingList, new BytecodeHierarchy());

    assertEquals(1, typingList.size());
    assertThat(typingList, containsInAnyOrder(typing3));
  }
",non-flaky,5
26701,MundaneImmortal_pair-distribution-app,PairTest.testHasDev,"	@Test
	public void testHasDev()  {
		Pair subject = new Pair(Arrays.asList(new Developer(""dev1"")));
		
		assertThat(subject.hasDev(new Developer(""dev1"")), is(true));
	}
",non-flaky,5
160386,ConsenSys_teku,ChainDataProviderTest.getGenesisData_shouldReturnValueIfStoreAvailable,"  @Test
  public void getGenesisData_shouldReturnValueIfStoreAvailable() {
    final UInt64 genesisTime = beaconStateInternal.getGenesis_time();
    final Bytes32 genesisValidatorsRoot = beaconStateInternal.getGenesis_validators_root();
    final Bytes4 genesisForkVersion = spec.atEpoch(ZERO).getConfig().getGenesisForkVersion();

    final ChainDataProvider provider =
        new ChainDataProvider(spec, recentChainData, combinedChainDataClient);

    final GenesisData result = provider.getGenesisData();
    assertThat(result)
        .isEqualTo(new GenesisData(genesisTime, genesisValidatorsRoot, genesisForkVersion));
  }
",non-flaky,5
77647,pholser_junit-quickcheck,Primitive3DArrayPropertyParameterTypesTest.shouldHold,"    @Test public void wrapperDoubleArray() {
        @Property(trials = 2) public void shouldHold(Double[][][] d) {
        }
",non-flaky,5
94779,ktuukkan_marine-api,AISMessage21ParserTest.getPositionAccuracy,"    @Test
    public void getPositionAccuracy() throws Exception {
        assertFalse(msg.getPositionAccuracy());
    }
",non-flaky,5
156406,apache_commons-lang,FastDateFormatTest.test_getInstance_String_TimeZone_Locale,"    @Test
    public void test_getInstance_String_TimeZone_Locale() {
        final FastDateFormat format1 = FastDateFormat.getInstance(""MM/DD/yyyy"",
                TimeZone.getTimeZone(""Atlantic/Reykjavik""), Locale.GERMANY);
        final FastDateFormat format2 = FastDateFormat.getInstance(""MM/DD/yyyy"", Locale.GERMANY);
        final FastDateFormat format3 = FastDateFormat.getInstance(""MM/DD/yyyy"",
                TimeZone.getDefault(), Locale.GERMANY);

        assertNotSame(format1, format2);
        assertEquals(TimeZone.getTimeZone(""Atlantic/Reykjavik""), format1.getTimeZone());
        assertEquals(TimeZone.getDefault(), format2.getTimeZone());
        assertEquals(TimeZone.getDefault(), format3.getTimeZone());
        assertEquals(Locale.GERMANY, format1.getLocale());
        assertEquals(Locale.GERMANY, format2.getLocale());
        assertEquals(Locale.GERMANY, format3.getLocale());
    }
",non-flaky,5
160437,ConsenSys_teku,StateSelectorFactoryTest.byBlockRootSelector_shouldThrowBadRequestException,"  @Test
  public void byBlockRootSelector_shouldThrowBadRequestException() {
    assertThrows(BadRequestException.class, () -> factory.byBlockRootStateSelector(""a""));
  }
",non-flaky,5
33924,apache_camel,CordaConsumerVaultTrackByWithSortingIT.vaultTrackByWithSortingTest,"    @Test
    public void vaultTrackByWithSortingTest() throws Exception {
        mockResult.expectedMinimumMessageCount(1);
        mockError.expectedMessageCount(0);
        MockEndpoint.assertIsSatisfied(context);
    }
",non-flaky,5
78262,apache_beam,SplittableParDoProcessFnTest.testResumeSetsTimer,"  @Test
  public void testResumeSetsTimer() throws Exception {
    DoFn<Integer, String> fn = new SelfInitiatedResumeFn();
    Instant base = Instant.now();
    ProcessFnTester<Integer, String, SomeRestriction, Void, SomeRestrictionTracker> tester =
        new ProcessFnTester<>(
            base,
            fn,
            BigEndianIntegerCoder.of(),
            SerializableCoder.of(SomeRestriction.class),
            MAX_OUTPUTS_PER_BUNDLE,
            MAX_BUNDLE_DURATION);

    tester.startElement(42, new SomeRestriction());
    assertThat(tester.takeOutputElements(), contains(""42""));

    // Should resume after 5 seconds: advancing by 3 seconds should have no effect.
    assertFalse(tester.advanceProcessingTimeBy(Duration.standardSeconds(3)));
    assertTrue(tester.takeOutputElements().isEmpty());

    // 6 seconds should be enough  should invoke the fn again.
    assertTrue(tester.advanceProcessingTimeBy(Duration.standardSeconds(3)));
    assertThat(tester.takeOutputElements(), contains(""42""));

    // Should again resume after 5 seconds: advancing by 3 seconds should again have no effect.
    assertFalse(tester.advanceProcessingTimeBy(Duration.standardSeconds(3)));
    assertTrue(tester.takeOutputElements().isEmpty());

    // 6 seconds should again be enough.
    assertTrue(tester.advanceProcessingTimeBy(Duration.standardSeconds(3)));
    assertThat(tester.takeOutputElements(), contains(""42""));
  }
",non-flaky,5
112123,apache_shardingsphere-elasticjob,StatisticRdbRepositoryTest.assertFindJobRunningStatisticsWhenTableIsEmpty,"    @Test
    public void assertFindJobRunningStatisticsWhenTableIsEmpty() {
        assertThat(repository.findJobRunningStatistics(new Date()).size(), is(0));
    }
",non-flaky,5
43078,trinodb_trino,BaseConnectorTest.testDeleteAllDataFromTable,"    @Test
    public void testDeleteAllDataFromTable()
    {
        skipTestUnless(hasBehavior(SUPPORTS_CREATE_TABLE) && hasBehavior(SUPPORTS_DELETE));
        try (TestTable table = new TestTable(getQueryRunner()::execute, ""test_delete_all_data"", ""AS SELECT * FROM region"")) {
            // not using assertUpdate as some connectors provide update count and some not
            getQueryRunner().execute(""DELETE FROM "" + table.getName());
            assertQuery(""SELECT count(*) FROM "" + table.getName(), ""VALUES 0"");
        }
    }
",non-flaky,5
156396,apache_commons-lang,StringUtilsEmptyBlankTest.testIsNoneBlank,"    @Test
    public void testIsNoneBlank() {
        assertFalse(StringUtils.isNoneBlank((String) null));
        assertTrue(StringUtils.isNoneBlank((String[]) null));
        assertFalse(StringUtils.isNoneBlank(null, ""foo""));
        assertFalse(StringUtils.isNoneBlank(null, null));
        assertFalse(StringUtils.isNoneBlank("""", ""bar""));
        assertFalse(StringUtils.isNoneBlank(""bob"", """"));
        assertFalse(StringUtils.isNoneBlank(""  bob  "", null));
        assertFalse(StringUtils.isNoneBlank("" "", ""bar""));
        assertTrue(StringUtils.isNoneBlank(""foo"", ""bar""));
    }
",non-flaky,5
84621,apache_zookeeper,ServerConfigTest.testValidArguments,"    @Test
    public void testValidArguments() {
        String[] args = {""2181"", ""/data/dir"", ""60000"", ""10000""};
        serverConfig.parse(args);

        assertEquals(2181, serverConfig.getClientPortAddress().getPort());
        assertTrue(checkEquality(""/data/dir"", serverConfig.getDataDir()));
        assertEquals(60000, serverConfig.getTickTime());
        assertEquals(10000, serverConfig.getMaxClientCnxns());
    }
",non-flaky,5
38289,palantir_atlasdb,AbstractTransactionTest.testRangePageBatchSizeOne,"    @Test
    public void testRangePageBatchSizeOne() {
        RangeRequest rangeRequest = RangeRequest.builder().batchHint(1).build();
        Map<RangeRequest, TokenBackedBasicResultsPage<RowResult<Value>, byte[]>> ranges = keyValueService.getFirstBatchForRanges(TEST_TABLE, Collections.singleton(rangeRequest), 1);
        assertEquals(1, ranges.keySet().size());
        assertEquals(0, ranges.values().iterator().next().getResults().size());
        assertEquals(false, ranges.values().iterator().next().moreResultsAvailable());
    }
",non-flaky,5
135808,Netflix_Hystrix,CumulativeCommandEventCounterStreamTest.testFallbackMissing,"    @Test
    public void testFallbackMissing() {
        HystrixCommandKey key = HystrixCommandKey.Factory.asKey(""CMD-CumulativeCounter-K"");
        stream = CumulativeCommandEventCounterStream.getInstance(key, 10, 500);
        stream.startCachingStreamValuesIfUnstarted();

        final CountDownLatch latch = new CountDownLatch(1);
        stream.observe().take(5).subscribe(getSubscriber(latch));

        Command cmd = Command.from(groupKey, key, HystrixEventType.FAILURE, 20, HystrixEventType.FALLBACK_MISSING);

        cmd.observe();

        try {
            assertTrue(latch.await(10000, TimeUnit.MILLISECONDS));
        } catch (InterruptedException ex) {
            fail(""Interrupted ex"");
        }
        assertEquals(HystrixEventType.values().length, stream.getLatest().length);
        long[] expected = new long[HystrixEventType.values().length];
        expected[HystrixEventType.FAILURE.ordinal()] = 1;
        expected[HystrixEventType.FALLBACK_MISSING.ordinal()] = 1;
        expected[HystrixEventType.EXCEPTION_THROWN.ordinal()] = 1;
        assertArrayEquals(expected, stream.getLatest());
    }
",non-flaky,5
94757,ktuukkan_marine-api,AbstractAISMessageListenerTest.testConstructor,"    @Test
    public void testConstructor() {

        BasicListener bl = new BasicListener();

        assertNull(bl.received);
        assertEquals(bl.messageType, AISMessage01.class);
    }
",non-flaky,5
176777,ctco_cukes,SingletonObjectFactoryTests.shouldSupportScenarioScope,"    @Test
    public void shouldSupportScenarioScope() {
        simulateCucumberScenarioStart();

        final ScenarioScopedClass a = instance.getInstance(ScenarioScopedClass.class);
        a.value = 10;
        assertEquals(10, a.value);

        final ScenarioScopedClass b = instance.getInstance(ScenarioScopedClass.class);
        assertEquals(10, b.value);

        simulateCucumberScenarioStop();
        simulateCucumberScenarioStart();

        final ScenarioScopedClass c = instance.getInstance(ScenarioScopedClass.class);
        assertEquals(0, c.value);

        simulateCucumberScenarioStop();
    }
",non-flaky,5
89351,apache_samza,TestKafkaSystemFactoryJava.testGetIntermediateStreamProperties,"  @Test
  public void testGetIntermediateStreamProperties() {
    Map<String, String> config = new HashMap<>();
    KafkaSystemFactory factory = new KafkaSystemFactory();
    Map<String, Properties> properties = JavaConversions.mapAsJavaMap(
        factory.getIntermediateStreamProperties(new MapConfig(config)));
    assertTrue(properties.isEmpty());

    // no properties for stream
    config.put(""streams.test.samza.intermediate"", ""true"");
    config.put(""streams.test.compression.type"", ""lz4""); //some random config
    properties = JavaConversions.mapAsJavaMap(
        factory.getIntermediateStreamProperties(new MapConfig(config)));
    assertTrue(properties.isEmpty());

    config.put(ApplicationConfig.APP_MODE, ApplicationConfig.ApplicationMode.BATCH.name());

    KafkaSystemAdmin admin = createSystemAdmin(SYSTEM(), config);
    StreamSpec spec = new StreamSpec(""test"", ""test"", SYSTEM(),
        Collections.singletonMap(""replication.factor"", ""1""));
    KafkaStreamSpec kspec = admin.toKafkaSpec(spec);

    Properties prop = kspec.getProperties();
    assertEquals(prop.getProperty(""retention.ms""), String.valueOf(KafkaConfig.DEFAULT_RETENTION_MS_FOR_BATCH()));
    assertEquals(prop.getProperty(""compression.type""), ""lz4"");

    // replication.factor should be removed from the properties and set on the spec directly
    assertEquals(kspec.getReplicationFactor(), 1);
    assertNull(prop.getProperty(""replication.factor""));
  }
",non-flaky,5
110143,Wikidata_wikidata-toolkit,ClientConfigurationTest.testLanguageFilterArguments,"	@Test
	public void testLanguageFilterArguments() {
		String[] args = new String[] { ""--fLang"", ""en,de"" };
		ClientConfiguration config = new ClientConfiguration(args);

		Set<String> langFilters = new HashSet<>();
		langFilters.add(""en"");
		langFilters.add(""de"");

		assertEquals(langFilters, config.getFilterLanguages());
	}
",non-flaky,5
59604,looly_hutool,ExtractorTest.zipTest,"	@Test
	public void zipTest(){
		Extractor extractor = CompressUtil.createExtractor(
				CharsetUtil.defaultCharset(),
				FileUtil.file(""d:/test/compress/test.zip""));

		extractor.extract(FileUtil.file(""d:/test/compress/test2/""));
	}
",non-flaky,5
104620,apache_pinot,RealtimeClusterIntegrationTest.testGeneratedQueriesWithMultiValues,"  @Test
  public void testGeneratedQueriesWithMultiValues()
      throws Exception {
    super.testGeneratedQueriesWithMultiValues();
  }
",non-flaky,5
29,wildfly_wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993.testCreateSubcontext,"@Test
public void testCreateSubcontext() throws Exception {
    assertTrue(namingContext.createSubcontext(new CompositeName(""test"")) instanceof NamingContext);
    assertTrue(testActionPermission(JndiPermission.ACTION_CREATE_SUBCONTEXT, namingContext, ""securitytest"") instanceof NamingContext);
}",test order dependency,4
156101,soot-oss_soot,SilsTest.testSilsEnabled,"  @Test
  public void testSilsEnabled() {
    final String className = ""soot.asm.LocalNaming"";
    final String[] params = {};
    SootMethod target = prepareTarget(methodSigFromComponents(className, ""void"", ""test"", params), className);
    Body body = target.retrieveActiveBody();
    Set<String> localNames = body.getLocals().stream().map(Local::getName).collect(Collectors.toSet());
    // test if all expected Local names are present
    // currently d, f are not preserved.
    Assert.assertTrue(localNames.contains(""d""));
    Assert.assertTrue(localNames.contains(""f""));
    Assert.assertTrue(localNames.contains(""arr""));
  }
",non-flaky,5
21245,androidx_androidx,PreferencePersistTest.int_persistAndRetrieve_returnsPersistedValue,"    @Test
    public void int_persistAndRetrieve_returnsPersistedValue() {
        final int expected = 1;

        mPreference.putInt(expected);
        int result = mPreference.getInt(-1);

        assertEquals(expected, result);
    }
",non-flaky,5
98642,nutzam_nutz,SimpleAdaptorTest.test_json_err_ctx,"    @Test
    public void test_json_err_ctx() {
        resp = post(""/adaptor/err_ctx"", ""{}"");
        assertEquals(200, resp.getStatus());
        assertEquals(""true"", resp.getContent());
        
        resp = post(""/adaptor/err_ctx"", ""{1234,3445}"");
        assertEquals(200, resp.getStatus());
        assertEquals(""false"", resp.getContent());
    }
",non-flaky,5
112703,hwang-pku_ormlite-core,TransactionManagerTest.testRollBack,"	@Test
	public void testRollBack() throws Exception {
		if (connectionSource == null) {
			return;
		}
		TransactionManager mgr = new TransactionManager(connectionSource);
		final Dao<Foo, Integer> fooDao = createDao(Foo.class, true);
		testTransactionManager(mgr, new RuntimeException(""What!!  I protest!!""), fooDao);
	}
",non-flaky,5
110193,Wikidata_wikidata-toolkit,RdfConverterTest.testStatementComplexValue,"	@Test
	public void testStatementComplexValue() throws RDFHandlerException,
			RDFParseException, IOException {
		GlobeCoordinatesValue value = Datamodel.makeGlobeCoordinatesValue(51,
				13, GlobeCoordinatesValue.PREC_DEGREE,
				GlobeCoordinatesValue.GLOBE_EARTH);
		Statement statement = StatementBuilder
				.forSubjectAndProperty(ItemIdValue.NULL, PropertyIdValue.NULL)
				.withValue(value).build();
		this.rdfConverter.writeStatement(statement);
		this.rdfWriter.finish();
		Model model = RdfTestHelpers.parseRdf(this.out.toString());
		assertEquals(model, RdfTestHelpers.parseRdf(RdfTestHelpers
				.getResourceFromFile(""StatementCplx.rdf"")));
	}
",non-flaky,5
380,apache_hadoop,TestFcHdfsSetUMask.testMkdirRecursiveWithNonExistingDirClear,"  @Test
  public void testMkdirRecursiveWithNonExistingDirClear() throws IOException {
    // by default parent directories have -wx------ bits set
    testMkdirRecursiveWithNonExistingDir(BLANK_TEST_UMASK, BLANK_PERMISSIONS, 
        PARENT_PERMS_FOR_BLANK_PERMISSIONS);
  }
",non-flaky,5
122589,vespa-engine_vespa,FileFinderTest.throws_if_prune_path_not_under_base_path,"        @Test(expected = IllegalArgumentException.class)
        public void throws_if_prune_path_not_under_base_path() {
            FileFinder.files(Paths.get(""/some/path"")).prune(Paths.get(""/other/path""));
        }
",non-flaky,5
178046,aosp-mirror_platform_frameworks_support,GuidedStepAttributesTest.testActionWithTwoSubActions,"    @Test
    public void testActionWithTwoSubActions() throws Throwable {
        ExpectedSubActionResult result = setUpActionsForSubActionsTest();

        final int actionPos = 0;
        final GuidedAction selectedAction = result.actionList.get(actionPos);
        List<Integer> expectedFocusedSeq = result.expectedFocusedSeq.get(actionPos);
        List<Integer> expectedClickedSeq = result.expectedClickedSeq.get(actionPos);

        traverseSubActionsAndVerifyFocusAndClickEvents(selectedAction, actionPos, expectedFocusedSeq,
                expectedClickedSeq);
    }
",non-flaky,5
30976,camunda-cloud_zeebe,ObjectMappingUndeclaredPropertiesTest.shouldDropUndeclaredPropertiesOnReset,"  @Test
  public void shouldDropUndeclaredPropertiesOnReset() {
    // given
    final MinimalPOJO pojo = new MinimalPOJO();
    pojo.wrap(MSG_PACK);

    final MutableDirectBuffer writeBuffer = new UnsafeBuffer(new byte[pojo.getLength()]);

    // when
    pojo.reset();

    // then
    pojo.wrap(
        encodeMsgPack(
            (w) -> {
              w.writeMapHeader(1);
              w.writeString(wrapString(""longProp""));
              w.writeInteger(123L);
            }));
    pojo.write(writeBuffer, 0);

    final Map<String, Object> serialized = asMap(writeBuffer, 0, writeBuffer.capacity());
    assertThat(serialized).containsExactly(entry(""longProp"", 123L));
  }
",non-flaky,5
97729,vojtechhabarta_typescript-generator,OptionalAnnotationTest.testJackson1NoAnnotation,"    @Test
    public void testJackson1NoAnnotation() {
        Settings settings = new Settings();
        ModelParser parser = new Jackson1Parser(settings, new DefaultTypeProcessor());
        testModel(parser.parseModel(Jackson1Bean.class), false);
    }
",non-flaky,5
135752,Netflix_Hystrix,HystrixPropertiesChainedArchaiusPropertyTest.run,"    @Test
    public void testAddCallback() throws Exception {

        final DynamicStringProperty node1 = new DynamicStringProperty(""n1"", ""n1"");
        final HystrixPropertiesChainedArchaiusProperty.StringProperty node2 = new HystrixPropertiesChainedArchaiusProperty.StringProperty(""n2"", node1);

        final AtomicInteger callbackCount = new AtomicInteger(0);

        node2.addCallback(new Runnable() {
            @Override
            public void run() {
                callbackCount.incrementAndGet();
            }
",non-flaky,5
118702,netty_netty,SmtpRequestEncoderTest.testThrowsIfContentExpected,"    @Test(expected = EncoderException.class)
    public void testThrowsIfContentExpected() {
        EmbeddedChannel channel = new EmbeddedChannel(new SmtpRequestEncoder());
        try {
            assertTrue(channel.writeOutbound(SmtpRequests.data()));
            channel.writeOutbound(SmtpRequests.noop());
        } finally {
            channel.finishAndReleaseAll();
        }
    }
",non-flaky,5
178003,aosp-mirror_platform_frameworks_support,BrowseSupportFragmentTest.testTwoBackKeysWithoutBackStack,"    @Test
    public void testTwoBackKeysWithoutBackStack() throws Throwable {
        final long dataLoadingDelay = 1000;
        Intent intent = new Intent();
        intent.putExtra(BrowseSupportFragmentTestActivity.EXTRA_LOAD_DATA_DELAY, dataLoadingDelay);
        intent.putExtra(BrowseSupportFragmentTestActivity.EXTRA_ADD_TO_BACKSTACK , false);
        mActivity = activityTestRule.launchActivity(intent);

        Thread.sleep(dataLoadingDelay + TRANSITION_LENGTH);

        assertNotNull(mActivity.getBrowseTestSupportFragment().getMainFragment());
        sendKeys(KeyEvent.KEYCODE_DPAD_RIGHT);
        Thread.sleep(TRANSITION_LENGTH);
        sendKeys(KeyEvent.KEYCODE_BACK, KeyEvent.KEYCODE_BACK);
    }
",non-flaky,5
177956,aosp-mirror_platform_frameworks_support,FileProviderTest.testStrategyFileJumpOutside,"    @Test
    public void testStrategyFileJumpOutside() throws Exception {
        final SimplePathStrategy strat = new SimplePathStrategy(""authority"");
        strat.addRoot(""tag"", mContext.getFilesDir());

        try {
            strat.getFileForUri(Uri.parse(""content://authority/tag/../file.test""));
            fail(""file escaped!"");
        } catch (SecurityException e) {
        }
    }
",non-flaky,5
135748,Netflix_Hystrix,HystrixPropertiesChainedArchaiusPropertyTest.testInteger,"    @Test
    public void testInteger() throws Exception {

        DynamicIntegerProperty pInt = new DynamicIntegerProperty(""defaultInt"", -1);
        HystrixPropertiesChainedArchaiusProperty.IntegerProperty fInt = new HystrixPropertiesChainedArchaiusProperty.IntegerProperty(""overrideInt"", pInt);

        assertTrue(-1 == fInt.get());

        ConfigurationManager.getConfigInstance().setProperty(""defaultInt"", 10);
        assertTrue(10 == fInt.get());

        ConfigurationManager.getConfigInstance().setProperty(""overrideInt"", 11);
        assertTrue(11 == fInt.get());

        ConfigurationManager.getConfigInstance().clearProperty(""overrideInt"");
        assertTrue(10 == fInt.get());

        ConfigurationManager.getConfigInstance().clearProperty(""defaultInt"");
        assertTrue(-1 == fInt.get());
    }
",non-flaky,5
76744,quarkusio_quarkus,RemoteDevMojoIT.get,"    @Test
    public void testThatNewBeanAreDiscovered() throws IOException, MavenInvocationException {
        testDir = initProject(""projects/classic-remote-dev"", ""projects/project-classic-run-new-bean-remote"");
        agentDir = initProject(""projects/classic-remote-dev"", ""projects/project-classic-run-run-new-bean-local"");
        runAndCheck();

        // Edit the ""Hello"" message.
        File source = new File(agentDir, ""src/main/java/org/acme/MyBean.java"");
        String content = ""package org.acme;\n"" +
                ""\n"" +
                ""import javax.enterprise.context.ApplicationScoped;\n"" +
                ""\n"" +
                ""@ApplicationScoped\n"" +
                ""public class MyBean {\n"" +
                ""\n"" +
                ""    public String get() {\n"" +
                ""        return \""message\"";\n"" +
                ""    }\n"" +
",non-flaky,5
114110,aws_aws-sdk-java-v2,InstantAsStringAttributeConvertersTest.InstantAsStringAttributeConverterEpochTest,"    @Test
    public void InstantAsStringAttributeConverterEpochTest() {
        verifyTransform(Instant.EPOCH, ""1970-01-01T00:00:00Z"");
    }
",non-flaky,5
112652,tbsalling_aismessages,StandardClassBCSPositionReportTest.canDecodeITDMACommunicationState,"    @Test
    public void canDecodeITDMACommunicationState() {
        AISMessage aisMessage = AISMessage.create(NMEAMessage.fromString(""!AIVDM,1,1,,A,B6CdCm0t3`tba35f@V9faHi7kP06,0*58""));

        System.out.println(aisMessage.toString());

        assertEquals(AISMessageType.StandardClassBCSPositionReport, aisMessage.getMessageType());
        StandardClassBCSPositionReport message = (StandardClassBCSPositionReport) aisMessage;
        assertEquals(Integer.valueOf(0), message.getRepeatIndicator());
        assertEquals(MMSI.valueOf(423302100), message.getSourceMmsi());
        assertEquals(""00001111"", message.getRegionalReserved1());
        assertEquals((Float) 1.4f, message.getSpeedOverGround());
        assertTrue(message.getPositionAccurate());
        assertEquals(Float.valueOf(40.005283f), message.getLatitude());
        assertEquals(Float.valueOf(53.010998f), message.getLongitude());
        assertEquals(Float.valueOf(177f), message.getCourseOverGround());
        assertEquals((Integer) 177, message.getTrueHeading());
        assertEquals((Integer) 34, message.getSecond());
        assertEquals(""00"", message.getRegionalReserved2());
        assertTrue(message.getCsUnit());
        assertTrue(message.getDisplay());
        assertTrue(message.getDsc());
        assertTrue(message.getBand());
        assertTrue(message.getMessage22());
        assertFalse(message.getAssigned());
        assertFalse(message.getRaimFlag());
        assertTrue(message.getCommunicationStateSelectorFlag());

        CommunicationState communicationState = message.getCommunicationState();   // 1100000000000000110b = 3, slot incr = 6
        assertEquals(SyncState.BaseIndirect, communicationState.getSyncState());
        assertTrue(communicationState instanceof ITDMACommunicationState);
        ITDMACommunicationState itdmaCommunicationState = (ITDMACommunicationState) communicationState;
        assertEquals(Integer.valueOf(0), itdmaCommunicationState.getSlotIncrement());
        assertEquals(Integer.valueOf(3), itdmaCommunicationState.getNumberOfSlots());
        assertFalse(itdmaCommunicationState.getKeepFlag());
    }
",non-flaky,5
77466,opensearch-project_OpenSearch,LoggingListenerTests.annotatedTestMethod2,"        @TestIssueLogging(value = ""xyz:DEBUG"", issueUrl = ""https://example.com"")
        public void annotatedTestMethod2() {

        }
",non-flaky,5
53157,cloudfoundry_uaa,TokenPolicyTest.nullKeyId,"    @Test(expected = IllegalArgumentException.class)
    public void nullKeyId() throws Exception {
        TokenPolicy tokenPolicy = new TokenPolicy();
        tokenPolicy.setKeys(Collections.singletonMap(null, ""signing-key""));
    }
",non-flaky,5
59,apache_beam,testBacklogLimiter,"@Test
public void testBacklogLimiter() {
    long duration = runWithRate(2 * RateLimiting.DEFAULT_MAX_PARALLELISM,-1.0 , new DelayFn<Integer>());
    Assert.assertThat(duration,greaterThan(2 * DelayFn.DELAY_MS));
}",time,2
33879,apache_camel,FhirLoadPageIT.testNext,"    @Test
    public void testNext() throws Exception {
        String url = ""Patient?_count=2"";
        Bundle bundle = this.fhirClient.search()
                .byUrl(url)
                .returnBundle(Bundle.class).execute();
        assertNotNull(bundle.getLink(IBaseBundle.LINK_NEXT));

        // using org.hl7.fhir.instance.model.api.IBaseBundle message body for single parameter ""bundle""
        Bundle result = requestBody(""direct://NEXT"", bundle);

        assertNotNull(result, ""next result"");
        LOG.debug(""next: "" + result);
    }
",non-flaky,5
59568,looly_hutool,CronPatternTest.cronPatternTest,"	@Test
	public void cronPatternTest() {
		CronPattern pattern;

		// 12:11å¹é
		pattern = new CronPattern(""39 11 12 * * *"");
		assertMatch(pattern, ""12:11:39"");

		// æ¯5åéå¹éï¼å¹éåéä¸ºï¼[0,5,10,15,20,25,30,35,40,45,50,55]
		pattern = new CronPattern(""39 */5 * * * *"");
		assertMatch(pattern, ""12:00:39"");
		assertMatch(pattern, ""12:05:39"");
		assertMatch(pattern, ""12:10:39"");
		assertMatch(pattern, ""12:15:39"");
		assertMatch(pattern, ""12:20:39"");
		assertMatch(pattern, ""12:25:39"");
		assertMatch(pattern, ""12:30:39"");
		assertMatch(pattern, ""12:35:39"");
		assertMatch(pattern, ""12:40:39"");
		assertMatch(pattern, ""12:45:39"");
		assertMatch(pattern, ""12:50:39"");
		assertMatch(pattern, ""12:55:39"");

		// 2:01,3:01,4:01
		pattern = new CronPattern(""39 1 2-4 * * *"");
		assertMatch(pattern, ""02:01:39"");
		assertMatch(pattern, ""03:01:39"");
		assertMatch(pattern, ""04:01:39"");

		// 2:01,3:01,4:01
		pattern = new CronPattern(""39 1 2,3,4 * * *"");
		assertMatch(pattern, ""02:01:39"");
		assertMatch(pattern, ""03:01:39"");
		assertMatch(pattern, ""04:01:39"");

		// 08-07, 08-06
		pattern = new CronPattern(""39 0 0 6,7 8 *"");
		assertMatch(pattern, ""2016-08-07 00:00:39"");
		assertMatch(pattern, ""2016-08-06 00:00:39"");

		// å«åå¿½ç¥å¤§å°å
		pattern = new CronPattern(""39 0 0 6,7 Aug *"");
		assertMatch(pattern, ""2016-08-06 00:00:39"");
		assertMatch(pattern, ""2016-08-07 00:00:39"");

		pattern = new CronPattern(""39 0 0 7 aug *"");
		assertMatch(pattern, ""2016-08-07 00:00:39"");

		// ææå
		pattern = new CronPattern(""39 0 0 * * Thu"");
		assertMatch(pattern, ""2017-02-09 00:00:39"");
		assertMatch(pattern, ""2017-02-09 00:00:39"");

	}
",non-flaky,5
84586,apache_zookeeper,ZNodeNameTest.testOrderWithDifferentPrefixIncludingSessionId,"    @Test
    public void testOrderWithDifferentPrefixIncludingSessionId() throws Exception {
        String[] names = {
            ""x-242681582799028564-0000000002"",
            ""x-170623981976748329-0000000003"",
            ""x-98566387950223723-0000000001""
        };
        ZNodeName zname;

        final Collection<ZNodeName> nodeNames = Arrays.asList(names).stream()
            .map(name -> new ZNodeName(name)).sorted().collect(Collectors.toList());

        final Iterator<ZNodeName> it = nodeNames.iterator();

        zname = it.next();
        assertEquals(""x-98566387950223723-0000000001"", zname.getName());
        assertEquals(""x-98566387950223723"", zname.getPrefix());
        assertEquals(Integer.valueOf(1), zname.getSequence().get());

        zname = it.next();
        assertEquals(""x-242681582799028564-0000000002"", zname.getName());
        assertEquals(""x-242681582799028564"", zname.getPrefix());
        assertEquals(Integer.valueOf(2), zname.getSequence().get());

        zname = it.next();
        assertEquals(""x-170623981976748329-0000000003"", zname.getName());
        assertEquals(""x-170623981976748329"", zname.getPrefix());
        assertEquals(Integer.valueOf(3), zname.getSequence().get());
    }
",non-flaky,5
178034,aosp-mirror_platform_frameworks_support,GuidedDatePickerTest.testDecemberToNovemberTransition,"    @Test
    public void testDecemberToNovemberTransition() throws Throwable {
        long startTime = System.currentTimeMillis();
        Intent intent = new Intent();

        String title = ""Date Picker Transition Test"";
        String breadcrumb = ""Month Transition Test Demo"";
        String description = ""Testing the transition from Dec to Nov"";
        GuidanceStylist.Guidance guidance = new GuidanceStylist.Guidance(title, description,
                breadcrumb, null);

        List<GuidedAction> actionList = new ArrayList<>();

        Calendar cal = Calendar.getInstance();

        cal.set(Calendar.YEAR, 2016);
        cal.set(Calendar.MONTH, Calendar.DECEMBER);
        cal.set(Calendar.DAY_OF_MONTH, cal.getActualMaximum(Calendar.DAY_OF_MONTH));
        Date initialDate = cal.getTime();

        GuidedDatePickerAction action = new GuidedDatePickerAction.Builder(
                mContext)
                .id(0)
                .title(""Date"")
                .date(initialDate.getTime())
                .datePickerFormat(""DMY"")
                .build();

        actionList.add(action);

        GuidedStepAttributesTestFragment.clear();
        GuidedStepAttributesTestFragment.GUIDANCE = guidance;
        GuidedStepAttributesTestFragment.ACTION_LIST = actionList;

        initActivity(intent);

        DatePicker mPickerView = (DatePicker) mActivity.findViewById(
                R.id.guidedactions_activator_item);

        verticalScrollToFieldValue(Calendar.MONTH, Calendar.NOVEMBER, new int[] {0, 1, 2},
                mPickerView, KeyEvent.KEYCODE_DPAD_UP);
        long executionTime = System.currentTimeMillis() - startTime;
        Log.d(TAG, ""testDecemberToNovember() Execution time: "" + executionTime);
        Thread.sleep(FINAL_WAIT);
    }
",non-flaky,5
20938,NationalSecurityAgency_timely,AuthenticationServiceTest.testBasicAuthenticationFailure,"    @Test(expected = BadCredentialsException.class)
    public void testBasicAuthenticationFailure() {
        UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(""test"", ""test2"");
        AuthenticationService.getAuthenticationManager().authenticate(token);
    }
",non-flaky,5
60884,apache_druid,MaterializedViewSupervisorTest.testSuspendedDoesntRun,"  @Test
  public void testSuspendedDoesntRun()
  {
    MaterializedViewSupervisorSpec suspended = new MaterializedViewSupervisorSpec(
        ""base"",
        new DimensionsSpec(Collections.singletonList(new StringDimensionSchema(""dim"")), null, null),
        new AggregatorFactory[]{new LongSumAggregatorFactory(""m1"", ""m1"")},
        HadoopTuningConfig.makeDefaultTuningConfig(),
        null,
        null,
        null,
        null,
        null,
        true,
        objectMapper,
        taskMaster,
        taskStorage,
        metadataSupervisorManager,
        sqlSegmentsMetadataManager,
        indexerMetadataStorageCoordinator,
        new MaterializedViewTaskConfig(),
        EasyMock.createMock(AuthorizerMapper.class),
        EasyMock.createMock(ChatHandlerProvider.class),
        new SupervisorStateManagerConfig()
    );
    MaterializedViewSupervisor supervisor = (MaterializedViewSupervisor) suspended.createSupervisor();

    // mock IndexerSQLMetadataStorageCoordinator to ensure that retrieveDataSourceMetadata is not called
    // which will be true if truly suspended, since this is the first operation of the 'run' method otherwise
    IndexerSQLMetadataStorageCoordinator mock = EasyMock.createMock(IndexerSQLMetadataStorageCoordinator.class);
    EasyMock.expect(mock.retrieveDataSourceMetadata(suspended.getDataSourceName()))
            .andAnswer(() -> {
              Assert.fail();
              return null;
            })
            .anyTimes();

    EasyMock.replay(mock);
    supervisor.run();
  }
",non-flaky,5
147,pholser_junit-quickcheck,ExhaustingAGivenSetTest.manyParameters,"@Test
public void manyParameters() throws Exception {
    assertThat(testResult(ManyParameters.class), isSuccessful());
    assertEquals(6, ManyParameters.iterations);
    assertEquals(asList(-1, -2, -4, -1, -2, -4), ManyParameters.firstTestCases);
    assertEquals(asList('r', 'r', 'r', 'y', 'y', 'y'), ManyParameters.secondTestCases);
}",unordered collections,3
122566,vespa-engine_vespa,ChildProcess2ImplTest.testSuccess,"    @Test
    public void testSuccess() throws Exception {
        when(commandLine.getTimeout()).thenReturn(Duration.ofHours(1));
        when(commandLine.getMaxOutputBytes()).thenReturn(10L);
        when(commandLine.getOutputEncoding()).thenReturn(StandardCharsets.UTF_8);
        when(commandLine.getSigTermGracePeriod()).thenReturn(Duration.ofMinutes(2));
        when(commandLine.getSigKillGracePeriod()).thenReturn(Duration.ofMinutes(3));
        when(commandLine.toString()).thenReturn(""program arg"");

        when(timer.currentTime()).thenReturn(
                Instant.ofEpochMilli(1),
                Instant.ofEpochMilli(2));

        when(processApi.waitFor(anyLong(), any())).thenReturn(true);

        try (ChildProcess2Impl child =
                     new ChildProcess2Impl(commandLine, processApi, temporaryFile, timer)) {
            child.waitForTermination();
        }
    }
",non-flaky,5
110150,Wikidata_wikidata-toolkit,ClientConfigurationTest.testLocalDumpFileShort,"	@Test
	public void testLocalDumpFileShort() {
		DirectoryManagerFactory
				.setDirectoryManagerClass(MockDirectoryManager.class);
		String[] args = new String[] { ""-i"", ""dumptest.json"" };
		ClientConfiguration config = new ClientConfiguration(args);

		MwDumpFile df = config.getLocalDumpFile();

		assertEquals(""dumptest.json"", config.getInputDumpLocation());
		assertTrue(df instanceof MwLocalDumpFile);
		MwLocalDumpFile ldf = (MwLocalDumpFile) df;

		assertEquals(Paths.get(""dumptest.json"").toAbsolutePath(), ldf.getPath());
	}
",non-flaky,5
170505,eclipse_jetty.project,MBeanContainerTest.testBeanRemovedInstanceNotFoundException,"    @Test
    public void testBeanRemovedInstanceNotFoundException() throws Exception
    {
        // given
        setUpBeanRemoved();
        objectName = mbeanContainer.findMBean(managed);

        // when
        mbeanContainer.getMBeanServer().unregisterMBean(objectName);

        // then
        assertFalse(mbeanServer.isRegistered(objectName), ""Bean must not have been registered as we unregistered the bean"");
        // this flow covers InstanceNotFoundException. Actual code just eating
        // the exception. i.e Actual code just printing the stacktrace, whenever
        // an exception of type InstanceNotFoundException occurs.
        mbeanContainer.beanRemoved(null, managed);
    }
",non-flaky,5
77525,dropwizard_dropwizard,DropwizardAppRuleTest.clientSupportsPatchMethod,"    @Test
    public void clientSupportsPatchMethod() {
        assertThat(RULE.client().target(""http://localhost:"" + RULE.getLocalPort() + ""/echoPatch"")
            .request()
            .method(""PATCH"", Entity.text(""Patch is working""), String.class))
            .contains(""Patch is working"");
    }
",non-flaky,5
159649,liquibase_liquibase,AbstractIntegrationTest.testDiff,"    @Test
    public void testDiff() throws Exception {
        assumeNotNull(this.getDatabase());

        runCompleteChangeLog();

        CompareControl compareControl = new CompareControl();
        compareControl.addSuppressedField(Column.class, ""defaultValue"");  //database returns different data even if the same
        compareControl.addSuppressedField(Column.class, ""autoIncrementInformation""); //database returns different data even if the same
        DiffResult diffResult = DiffGeneratorFactory.getInstance().compare(database, database, compareControl);

        try {
            assertTrue(""comapring a database with itself should return a result of 'DBs are equal'"",
                    diffResult.areEqual());
        } catch (AssertionError e) {
            new DiffToReport(diffResult, System.err).print();
            throw e;
        }
    }
",non-flaky,5
98583,nutzam_nutz,El2Test.notCalculateOneNumber,"    @Test
    public void notCalculateOneNumber() {
        assertEquals(1, El.eval(""1""));
        assertEquals(0.1, El.eval("".1""));
        assertEquals(0.1d, El.eval(""0.1""));
        assertEquals(0.1f, El.eval(""0.1f""));
        assertEquals(0.1d, El.eval(""0.1d""));
        assertEquals(true, El.eval(""true""));
        assertEquals(false, El.eval(""false""));
        assertEquals(""jk"", El.eval(""'jk'""));
    }
",non-flaky,5
115,ReactiveX_RxJava,ObservableSwitchTest.outerInnerErrorRace,"@Test
public void outerInnerErrorRace() {
    for (int i = 0; i < 500; i++) {
        List<Throwable> errors = TestHelper.trackPluginErrors();
        try {
            final PublishSubject<Integer> ps1 = PublishSubject.create();
            final PublishSubject<Integer> ps2 = PublishSubject.create();
            ps1.switchMap(new Function<Integer, ObservableSource<Integer>>() {
                @Override
                public ObservableSource<Integer> apply(Integer v) throws Exception {
                    if (v == 1) {
                        return ps2;
                    }
                    return Observable.never();
                }
            })
            .test();
            final TestException ex1 = new TestException();
            Runnable r1 = new Runnable() {
                @Override
                public void run() {
                    ps1.onError(ex1);
                }
            };
            final TestException ex2 = new TestException();
            Runnable r2 = new Runnable() {
                @Override
                public void run() {
                    ps2.onError(ex2);
                }
            };
            TestHelper.race(r1, r2);
            for (Throwable e : errors) {
                assertTrue(e.toString(), e instanceof TestException);
            }
        } finally {
            RxJavaPlugins.reset();
        }
    }
}",concurrency,1
43064,trinodb_trino,BaseConnectorTest.testTableSampleSystem,"    @Test
    public void testTableSampleSystem()
    {
        MaterializedResult fullSample = computeActual(""SELECT orderkey FROM orders TABLESAMPLE SYSTEM (100)"");
        MaterializedResult emptySample = computeActual(""SELECT orderkey FROM orders TABLESAMPLE SYSTEM (0)"");
        MaterializedResult randomSample = computeActual(""SELECT orderkey FROM orders TABLESAMPLE SYSTEM (50)"");
        MaterializedResult all = computeActual(""SELECT orderkey FROM orders"");

        assertContains(all, fullSample);
        assertEquals(emptySample.getMaterializedRows().size(), 0);
        assertTrue(all.getMaterializedRows().size() >= randomSample.getMaterializedRows().size());
    }
",non-flaky,5
137119,spring-projects_spring-framework,AbstractMethodMetadataTests.getReturnTypeReturnsReturnType,"	@Test
	public void getReturnTypeReturnsReturnType() {
		assertThat(getTagged(WithMethod.class).getReturnTypeName()).isEqualTo(
				String.class.getName());
	}
",non-flaky,5
106634,Alluxio_alluxio,AlluxioJniFuseFileSystemTest.unlink,"  @Test
  public void unlink() throws Exception {
    AlluxioURI expectedPath = BASE_EXPECTED_URI.join(""/foo/bar"");
    doNothing().when(mFileSystem).delete(expectedPath);
    mFuseFs.unlink(""/foo/bar"");
    verify(mFileSystem).delete(expectedPath);
  }
",non-flaky,5
106666,Alluxio_alluxio,BaseFileSystemTest.createException,"  @Test
  public void createException() throws Exception {
    doThrow(EXCEPTION).when(mFileSystemMasterClient)
        .createFile(any(AlluxioURI.class), any(CreateFilePOptions.class));
    try {
      mFileSystem.createFile(new AlluxioURI(""/""), CreateFilePOptions.getDefaultInstance());
      fail(SHOULD_HAVE_PROPAGATED_MESSAGE);
    } catch (Exception e) {
      assertSame(EXCEPTION, e);
    }

    verifyFilesystemContextAcquiredAndReleased();
  }
",non-flaky,5
175782,GoogleCloudPlatform_google-cloud-eclipse,AppYamlValidatorTest.testValidateRuntime_noRuntime,"  @Test
  public void testValidateRuntime_noRuntime() throws IOException {
    File appYaml = createAppYamlFile(tempFolder.getRoot().toString(), ""env: flex"");
    IStatus result = AppYamlValidator.validateRuntime(appYaml);
    assertEquals(IStatus.ERROR, result.getSeverity());
    assertEquals(""\""runtime: null\"" in app.yaml is not \""java\""."", result.getMessage());
  }
",non-flaky,5
114089,aws_aws-sdk-java-v2,KeyTest.getPartitionKeyValue_partitionOnly,"    @Test
    public void getPartitionKeyValue_partitionOnly() {
        assertThat(partitionOnlyKey.partitionKeyValue(),
                   is(AttributeValue.builder().s(""id123"").build()));
    }
",non-flaky,5
112153,apache_shardingsphere-elasticjob,IpUtilsTest.assertGetIp,"    @Test
    public void assertGetIp() {
        assertNotNull(IpUtils.getIp());
    }
",non-flaky,5
89286,apache_samza,TestJobsResource.testStopJob,"  @Test
  public void testStopJob()
      throws IOException {
    Response resp = target(String.format(""v1/jobs/%s/%s"", MockJobProxy.JOB_INSTANCE_2_NAME, MockJobProxy.JOB_INSTANCE_2_ID))
        .queryParam(""status"", ""stopped"").request().put(Entity.form(new Form()));
    assertEquals(202, resp.getStatus());

    final Job job2 = objectMapper.readValue(resp.readEntity(String.class), Job.class);
    assertEquals(MockJobProxy.JOB_INSTANCE_2_NAME, job2.getJobName());
    assertEquals(MockJobProxy.JOB_INSTANCE_2_ID, job2.getJobId());
    assertStatusNotDefault(job2);
    resp.close();
  }
",non-flaky,5
26,cloudfoundry_uaa,testMatchesSpeedTest,"@Test
public void testMatchesSpeedTest() throws Exception {
    int iterations = 15;
    String password = new RandomValueStringGenerator().generate();
    String encodedBcrypt = cachingPasswordEncoder.encode(password);
    long nanoStart = System.nanoTime();
    for (int i = 0; i < iterations; i++) {
        assertTrue(cachingPasswordEncoder.getPasswordEncoder().matches(password, encodedBcrypt));
        long nanoStop = System.nanoTime();
        long bcryptTime = nanoStop - nanoStart;
        nanoStart = System.nanoTime();
        for (int i = 0; i < iterations; i++) {
            nanoStop = System.nanoTime();
            long cacheTime = nanoStop - nanoStart;
            assertTrue(bcryptTime > (10 * cacheTime));
        }
    }
}",time,2
53221,cloudfoundry_uaa,ScimGroupEndpointsIntegrationTests.testExtremeGroupPagination,"    @Test
    public void testExtremeGroupPagination() {
        for (int i = 0; i < 502; i++) {
            ScimUser user = createUser(""deleteme_"" + new RandomValueStringGenerator().generate().toLowerCase(), ""Passwo3d"");
            scimGroups.add(createGroup(""cfid_"" + new RandomValueStringGenerator().generate().toLowerCase(), new ScimGroupMember(user.getId())));
        }

        ResponseEntity<Map> response = client.getForEntity(serverRunning.getUrl(groupEndpoint + ""?count=502""), Map.class);

        Map results = response.getBody();
        assertThat(response.getStatusCode(), is(HttpStatus.OK));
        assertThat((Integer) results.get(""totalResults""), greaterThan(500));
        assertThat((List<?>) results.get(""resources""), hasSize(500));
        assertThat(results.get(""itemsPerPage""), is(500));
        assertThat(results.get(""startIndex""), is(1));

    }
",non-flaky,5
112071,apache_shardingsphere-elasticjob,DisabledJobTest.assertJobInit,"    @Test
    public void assertJobInit() {
        initJob();
        assertRegCenterCommonInfoWithDisabled();
    }
",non-flaky,5
162670,OpenAPITools_openapi-generator,StoreApiTest.placeOrderTest,"    @Test
    public void placeOrderTest() {
        Order body = null;
        //Order response = api.placeOrder(body);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
",non-flaky,5
110176,Wikidata_wikidata-toolkit,ValueRdfConverterTest.testWriteMonolingualTextValue,"	@Test
	public void testWriteMonolingualTextValue() throws RDFHandlerException {
		MonolingualTextValueConverter valueConverter = new MonolingualTextValueConverter(
				this.rdfWriter, this.propertyRegister, this.rdfConversionBuffer);

		MonolingualTextValue value = this.objectFactory
				.getMonolingualTextValue(""ä¸­åäººæ°å±åå½"", ""zh-hans"");
		PropertyIdValue propertyIdValue = this.objectFactory
				.getPropertyIdValue(""P1448"", ""http://www.wikidata.org/entity/"");
		Value valueURI = valueConverter.getRdfValue(value, propertyIdValue,
				true);
		this.rdfWriter.finish();

		assertEquals(valueURI.toString(), ""\""ä¸­åäººæ°å±åå½\""@zh-Hans"");
	}
",non-flaky,5
104628,apache_pinot,MergeRollupMinionClusterIntegrationTest.testMultiLevelConcat,"  @Test
  public void testMultiLevelConcat()
      throws Exception {
    // The original segments are time partitioned by month:
    // segmentName (totalDocs)
    // myTable3_16071_16101_3 (9746)
    // myTable3_16102_16129_4 (8690)
    // myTable3_16130_16159_5 (9621)
    // myTable3_16160_16189_6 (9454)
    // myTable3_16190_16220_7 (10329)
    // myTable3_16221_16250_8 (10468)
    // myTable3_16251_16281_9 (10499)
    // myTable3_16282_16312_10 (10196)
    // myTable3_16313_16342_11 (9136)
    // myTable3_16343_16373_0 (9292)
    // myTable3_16374_16404_1 (8736)
    // myTable3_16405_16435_2 (9378)

    // Expected merge tasks and results:
    // 1.
    //    45days: {myTable3_16071_16101_3, myTable3_16102_16129_4}
    //      -> {merged_45days_T1_0_myTable3_16071_16109_0, merged_45days_T1_0_myTable3_16110_16129_1}
    //    watermark: {45days: 16065, 90days: null}
    // 2.
    //    45days: {merged_45days_T1_0_myTable3_16110_16129_1, myTable3_16130_16159_5}
    //      -> {merged_45days_T2_0_myTable3_16110_16154_0, merged_45days_T2_0_myTable3_16155_16159_1}
    //    90days: {merged_45days_T1_0_myTable3_16071_16109_0}
    //      -> {merged_90days_T2_0_myTable3_16071_16109_0}
    //    watermark: {45days: 16110, 90days: 16020}
    // 3.
    //    45days: {merged_45days_T2_0_myTable3_16155_16159_1, myTable3_16160_16189_6, myTable3_16190_16220_7}
    //      -> {merged_45days_T3_0_myTable3_16155_16199_0, merged_45days_T3_0_myTable3_16200_16220_1}
    //    watermark: {45days: 16155, 90days: 16020}
    // 4.
    //    45days: {merged_45days_T3_-_myTable3_16200_16220_1, myTable3_16221_16250_8}
    //      -> {merged_45days_T4_0_myTable3_16200_16244_0, merged_45days_T4_0_myTable3_16245_16250_1}
    //    90days: {merged_45days_T2_0_myTable3_16110_16154_0, merged_45days_T3_0_myTable3_16155_16199_0}
    //      -> {merged_90days_T4_0_myTable3_16110_16199_0}
    //    watermark: {45days: 16200, 90days: 16110}
    // 5.
    //    45days: {merged_45days_T4_0_myTable3_16245_16250_1, myTable3_16251_16281_9, myTable3_16282_16312_10}
    //      -> {merged_45days_T5_0_myTable3_16245_16289_0, merged_45days_T5_0_myTable3_16290_16312_1}
    //    watermark: {45days: 16245, 90days: 16110}
    // 6.
    //    45days: {merged_45days_T5_0_myTable3_16290_16312_1, myTable3_16313_16342_11}
    //      -> {merged_45days_T6_0_myTable3_16290_16334_0, merged_45days_T6_0_myTable3_16335_16342_1}
    //    90days: {merged_45days_T4_0_myTable3_16200_16244_0, merged_45days_T5_0_myTable3_16245_16289_0}
    //      -> {merged_90days_T6_0_myTable3_16200_16289_0}
    //    watermark: {45days: 16290, 90days: 16200}
    // 7.
    //    45days: {merged_45days_T6_0_myTable3_16335_16342_1, myTable_16343_16373_0, myTable_16374_16404_1}
    //      -> {merged_45days_T7_0_myTable3_16335_16379_0, merged_45days_T7_0_myTable3_16380_16404_1}
    //    watermark: {45days: 16335, 90days: 16200}
    // 8.
    //    45days: {merged_45days_T7_0_myTable3_16380_16404_1, myTable3_16405_16435_2}
    //      -> {merged_45days_T8_0_myTable3_16380_16424_0, merged_45days_T8_1_myTable3_16425_16435_1}
    //    90days: {merged_45days_T6_0_myTable3_16290_16334_0, merged_45days_T7_0_myTable3_16335_16379_0}
    //      -> {merged_90days_T8_0_myTable3_16290_16379_0}
    //    watermark: {45days:16380, 90days: 16290}
    // 9.
    //    45days: no segment left, not scheduling
    //    90days: [16380, 16470) is not a valid merge window because windowEndTime > 45days watermark, not scheduling

    String sqlQuery = ""SELECT count(*) FROM myTable3""; // 115545 rows for the test table
    JsonNode expectedJson = postSqlQuery(sqlQuery, _brokerBaseApiUrl);
    int[] expectedNumSubTasks = {1, 2, 1, 2, 1, 2, 1, 2, 1};
    int[] expectedNumSegmentsQueried = {12, 12, 11, 10, 9, 8, 7, 6, 5};
    Long[] expectedWatermarks45Days = {16065L, 16110L, 16155L, 16200L, 16245L, 16290L, 16335L, 16380L};
    Long[] expectedWatermarks90Days = {null, 16020L, 16020L, 16110L, 16110L, 16200L, 16200L, 16290L};
    for (int i = 0; i < expectedWatermarks45Days.length; i++) {
      expectedWatermarks45Days[i] *= 86_400_000L;
    }
    for (int i = 1; i < expectedWatermarks90Days.length; i++) {
      expectedWatermarks90Days[i] *= 86_400_000L;
    }

    String offlineTableName = TableNameBuilder.OFFLINE.tableNameWithType(MULTI_LEVEL_CONCAT_TEST_TABLE);
    int numTasks = 0;
    for (String tasks = _taskManager.scheduleTasks(offlineTableName).get(MinionConstants.MergeRollupTask.TASK_TYPE);
        tasks != null; tasks =
        _taskManager.scheduleTasks(offlineTableName).get(MinionConstants.MergeRollupTask.TASK_TYPE), numTasks++) {
      assertEquals(_helixTaskResourceManager.getTaskConfigs(tasks).size(), expectedNumSubTasks[numTasks]);
      assertTrue(_helixTaskResourceManager.getTaskQueues()
          .contains(PinotHelixTaskResourceManager.getHelixJobQueueName(MinionConstants.MergeRollupTask.TASK_TYPE)));
      // Will not schedule task if there's incomplete task
      assertNull(
          _taskManager.scheduleTasks(offlineTableName).get(MinionConstants.RealtimeToOfflineSegmentsTask.TASK_TYPE));
      waitForTaskToComplete();

      // Check watermark
      MergeRollupTaskMetadata minionTaskMetadata = MergeRollupTaskMetadata
          .fromZNRecord(_taskManager.getClusterInfoAccessor().getMinionMergeRollupTaskZNRecord(offlineTableName));
      assertNotNull(minionTaskMetadata);
      assertEquals(minionTaskMetadata.getWatermarkMap().get(""45days""), expectedWatermarks45Days[numTasks]);
      assertEquals(minionTaskMetadata.getWatermarkMap().get(""90days""), expectedWatermarks90Days[numTasks]);

      // Check metadata of merged segments
      for (SegmentZKMetadata metadata : _pinotHelixResourceManager.getSegmentsZKMetadata(offlineTableName)) {
        if (metadata.getSegmentName().startsWith(""merged"")) {
          // Check merged segment zk metadata
          assertNotNull(metadata.getCustomMap());
          if (metadata.getSegmentName().startsWith(""merged_45days"")) {
            assertEquals(""45days"",
                metadata.getCustomMap().get(MinionConstants.MergeRollupTask.SEGMENT_ZK_METADATA_MERGE_LEVEL_KEY));
            assertEquals(metadata.getEndTimeMs() / (86_400_000L * 45), metadata.getStartTimeMs() / (86_400_000L * 45));
          }
          if (metadata.getSegmentName().startsWith(""merged_90days"")) {
            assertEquals(""90days"",
                metadata.getCustomMap().get(MinionConstants.MergeRollupTask.SEGMENT_ZK_METADATA_MERGE_LEVEL_KEY));
            assertEquals(metadata.getEndTimeMs() / (86_400_000L * 90), metadata.getStartTimeMs() / (86_400_000L * 90));
          }
        }
      }

      // Check total doc of merged segments are the same as the original segments
      JsonNode actualJson = postSqlQuery(sqlQuery, _brokerBaseApiUrl);
      SqlResultComparator.areEqual(actualJson, expectedJson, sqlQuery);
      // Check query routing
      int numSegmentsQueried = actualJson.get(""numSegmentsQueried"").asInt();
      assertEquals(numSegmentsQueried, expectedNumSegmentsQueried[numTasks]);
    }
    // Check total tasks
    assertEquals(numTasks, 8);

    assertTrue(_controllerStarter.getControllerMetrics()
        .containsGauge(""mergeRollupTaskDelayInNumBuckets.myTable3_OFFLINE.45days""));
    assertTrue(_controllerStarter.getControllerMetrics()
        .containsGauge(""mergeRollupTaskDelayInNumBuckets.myTable3_OFFLINE.90days""));
  }
",non-flaky,5
91471,strapdata_elassandra,MasterServiceTests.execute,"    @TestLogging(""org.elasticsearch.cluster.service:WARN"") // To ensure that we log cluster state events on WARN level
    public void testLongClusterStateUpdateLogging() throws Exception {
        MockLogAppender mockAppender = new MockLogAppender();
        mockAppender.start();
        mockAppender.addExpectation(
            new MockLogAppender.UnseenEventExpectation(
                ""test1 shouldn't see because setting is too low"",
                masterService.getClass().getCanonicalName(),
                Level.WARN,
                ""*cluster state update task [test1] took [*] above the warn threshold of *""));
        mockAppender.addExpectation(
            new MockLogAppender.SeenEventExpectation(
                ""test2"",
                masterService.getClass().getCanonicalName(),
                Level.WARN,
                ""*cluster state update task [test2] took [32s] above the warn threshold of *""));
        mockAppender.addExpectation(
            new MockLogAppender.SeenEventExpectation(
                ""test3"",
                masterService.getClass().getCanonicalName(),
                Level.WARN,
                ""*cluster state update task [test3] took [33s] above the warn threshold of *""));
        mockAppender.addExpectation(
            new MockLogAppender.SeenEventExpectation(
                ""test4"",
                masterService.getClass().getCanonicalName(),
                Level.WARN,
                ""*cluster state update task [test4] took [34s] above the warn threshold of *""));

        Logger clusterLogger = Loggers.getLogger(masterService.getClass().getPackage().getName());
        Loggers.addAppender(clusterLogger, mockAppender);
        try {
            final CountDownLatch latch = new CountDownLatch(5);
            final CountDownLatch processedFirstTask = new CountDownLatch(1);
            masterService.currentTimeOverride = System.nanoTime();
            masterService.submitStateUpdateTask(""test1"", new ClusterStateUpdateTask() {
                @Override
                public ClusterState execute(ClusterState currentState) throws Exception {
                    masterService.currentTimeOverride += TimeValue.timeValueSeconds(1).nanos();
                    return currentState;
                }
",non-flaky,5
162717,OpenAPITools_openapi-generator,XmlItemTest.prefixNumberTest,"    @Test
    public void prefixNumberTest() {
        // TODO: test prefixNumber
    }
",non-flaky,5
98625,nutzam_nutz,El2Test.test_issue_1307,"    @Test
    public void test_issue_1307() {
        //assertTrue((Boolean)El.eval(""0 == 0""));
        assertTrue((Boolean)El.eval(""0 == 0.0""));
    }
",non-flaky,5
106597,Alluxio_alluxio,ContainerAllocatorTest.fiveContainersPerHostFullAllocation,"  @Test(timeout = 10000)
  public void fiveContainersPerHostFullAllocation() throws Exception {
    int numHosts = 10;
    int maxContainersPerHost = 5;
    testFullAllocation(numHosts, maxContainersPerHost);
  }
",non-flaky,5
156119,soot-oss_soot,AbstractLambdaMetaFactoryCGTest.privateMethodRef,"  @Test
  public void privateMethodRef() {
    String testClass = ""soot.lambdaMetaFactory.PrivateMethodRef"";

    final SootMethod target
        = prepareTarget(methodSigFromComponents(testClass, TEST_METHOD_RET, TEST_METHOD_NAME), testClass);

    final CallGraph cg = Scene.v().getCallGraph();

    final String referencedMethodName = ""privateMethod"";

    final String metaFactoryClass = getMetaFactoryNameMethodRef(testClass, referencedMethodName);

    final SootMethod bootstrap = Scene.v()
        .getMethod(methodSigFromComponents(metaFactoryClass, ""java.util.function.Supplier"", ""bootstrap$"", testClass));
    final SootMethod metaFactoryConstructor
        = Scene.v().getMethod(methodSigFromComponents(metaFactoryClass, ""void"", ""<init>"", testClass));
    final SootMethod get = Scene.v().getMethod(methodSigFromComponents(metaFactoryClass, ""java.lang.Object"", ""get""));
    final SootMethod referencedMethod = Scene.v().getMethod(methodSigFromComponents(testClass, ""int"", referencedMethodName));

    final List<Edge> edgesFromTarget = newArrayList(cg.edgesOutOf(target));

    assertTrue(""There should be an edge from main to the bootstrap method of the synthetic LambdaMetaFactory"",
        edgesFromTarget.stream().anyMatch(e -> e.tgt().equals(bootstrap) && e.isStatic()));
    assertTrue(""There should be an edge to the constructor of the LambdaMetaFactory in the bootstrap method"",
        newArrayList(cg.edgesOutOf(bootstrap)).stream()
            .anyMatch(e -> e.tgt().equals(metaFactoryConstructor) && e.isSpecial()));
    assertTrue(
        ""There should be an interface invocation on the synthetic LambdaMetaFactory's implementation of the functional interface in the main method"",
        edgesFromTarget.stream().anyMatch(e -> e.getTgt().equals(get) && e.kind() == Kind.INTERFACE));
    assertTrue(""There should be a virtual call to the referenced method"",
        newArrayList(cg.edgesOutOf(get)).stream().anyMatch(e -> e.getTgt().equals(referencedMethod) && e.isVirtual()));

    validateAllBodies(target.getDeclaringClass(), bootstrap.getDeclaringClass());
  }
",non-flaky,5
33729,alibaba_fastjson,FastJsonJsonViewTest.test2,"	@Test
	public void test2() throws Exception {
		
		String jsonStr = ""[{\""name\"":\""p1\"",\""sonList\"":[{\""name\"":\""s1\""}]},{\""name\"":\""p2\"",\""sonList\"":[{\""name\"":\""s2\""},{\""name\"":\""s3\""}]}]"";
		
		mockMvc.perform(
				(post(""/fastjson/test2"").characterEncoding(""UTF-8"").content(jsonStr).contentType(MediaType.APPLICATION_JSON)
						))
//		.andExpect(status().isOk())
				.andDo(print());
	}
",non-flaky,5
113716,salesforce_reactive-grpc,ServerErrorUpstreamCancellationIntegrationTest.serverErrorSignalsUpstreamCancellationBidi,"    @Test
    public void serverErrorSignalsUpstreamCancellationBidi() {
        serverRule.getServiceRegistry().addService(new ExplodeAfterFiveService());
        ReactorNumbersGrpc.ReactorNumbersStub stub = ReactorNumbersGrpc.newReactorStub(serverRule.getChannel());

        AtomicBoolean upstreamCancel = new AtomicBoolean(false);

        Flux<NumberProto.Number> subscriber = Flux.range(0, Integer.MAX_VALUE)
                .map(this::protoNum)
                .doOnCancel(() -> upstreamCancel.set(true))
                .compose(stub::twoWayPressure)
                .doOnNext(i -> System.out.println(i.getNumber(0)));

        StepVerifier.create(subscriber)
                .verifyError(StatusRuntimeException.class);
        assertThat(upstreamCancel.get()).isTrue();
    }
",non-flaky,5
98101,vert-x3_vertx-mongo-client,ParsingSSLOptionsTest.testInvalidCertificate,"  @Test(expected = IllegalArgumentException.class)
  public void testInvalidCertificate() throws IOException {
    // given
    final File tmpKeyFile = tmpFolder.newFile(""validKey.pem"");
    try (final FileWriter tmpKeyWriter = new FileWriter(tmpKeyFile)) {
      tmpKeyWriter.write(""-----BEGIN PRIVATE KEY-----\n"" +
        ""MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDVmCecLdUZU917\n"" +
        ""hweVz4JqvZ9vZEi1rH+BG98HYfRR/h3QaobxPImZu3hzKHZ+MPbm94HunLPAVA9y\n"" +
        ""ZhvZMToNfOuD4TUPBPloBuNzwBfZk2O4CaXeG4ailVWUfm5t/l+RD/55zYKuhw1/\n"" +
        ""Vl9lcOryF2XAmPQ2F1gwEKK7wt1Ak8zw8/yeYgBv1/F+ibCMvR6FVj9ABBEfTM+o\n"" +
        ""Os4oy51otUv0h63GqYgXMJyLX7q+AGWdC3srwwLQROtkzi7y00g/YryXUoIqdXEI\n"" +
        ""7CrNL35rZXcZ5LfGRwFX9evX11PpT3OShYlsJBcFE9KMatRoIWd6xUKlxTk0yLjo\n"" +
        ""OUE2tsMJAgMBAAECggEAdewZAjqzidYpU0eLQoRcBj5GRaNiGRrxEgCnM1Y7IwFe\n"" +
        ""yG/nrEu11DASIdHXCXhS99Tx4SCWhLpkBM6m1VQ+LrAm/ppZRr+CSpJzBLaq9C5R\n"" +
        ""QYviDSu5Ow2jP+ZFZWiorlfcMLbrTRu2sfSnmkOrEpkkTh6jxTFCONcWYP8GU93D\n"" +
        ""YCA3hSH0li7CueS+GYJ1JB2Cd7buu+tOhl36AhBD96miExlgNn0YGpTJJ3I0Hb+O\n"" +
        ""lKIIQy+KK8f9TXrSeZC3OYlTtJaIr9ejspTXxIYN11EIit5MFEwnnkCglcsePjsx\n"" +
        ""qeOFRumJ5Nj5H8qyCNZ5MtzwbLkyktJzlumvnyr+AQKBgQDv/QfGKZJFeoCEWpoj\n"" +
        ""f+078JxSYyPVNXxbbr2NuN/V79hJBol87ukycz2CZkDCubIKfubc50eXDmhWCp4p\n"" +
        ""aJgl6BMhnovftYrIrGWJLwqXnwFwsKJSrJJqHlHDJDRGfUSQEWNclNeaB3Mr8W46\n"" +
        ""Zcaadeikstvka9xKA1LOCG3oIQKBgQDj2FFOxZK27KhY/9Oz1dUsPtAYYbLOor/P\n"" +
        ""Rbne3jICQStH3dnUEmWKIKrdYV1u2saw5djn3ujwB0xEXydRvRgiSF0qxYjbm9CG\n"" +
        ""TJaiHhTsQDjWkYMZaxk3gc7Yfh8DHF0wlvWpu1wMXNsCJ6jxqW2e+jSRioZICPK6\n"" +
        ""McWWmArd6QKBgDWjoHEyKXdOAhuTBJCarzOOe+IONpwY8EqfXc6nW6A9k2H/DAvY\n"" +
        ""elbEWyMiJ6deSeT+qCsHpoCkv707ck5fCmKulFgXT7wYn4Rqw+b9lKh+6Zt+X0mL\n"" +
        ""OM5vKGctWGHI7eIlgMfYnLfYom1X8QMsbE9puy3UrEFJulrwkzlpuOcBAoGAVRNV\n"" +
        ""sNsXIFSXu7uyueizU3UU0LXSRVQB2QxJDg3bkHnzBj+xcX15Cq2N/2G2uIjaPf1l\n"" +
        ""E5dpVQ70jGcXUG8SDuMEXs8pfg7dOvhoGpqu51RHpN7qm9ggr1g5+x6Ex+2UYmtL\n"" +
        ""yZfbFAasBE74x1ujQgRdEqct4sHsmFezVrro+9kCgYEAgl70mKk9yK/f7515OaO0\n"" +
        ""Y39tgVzpAG6RN1NKnY6NR5VNNemZx5jhKfk5byaYxX4XBjygD0sQ5KTpaZmoQIIX\n"" +
        ""FxuwhLRRMn6vtsEf1HexJAtRd82aL5wKS62l0AXG/CVLAygn4aSSqLrgTyFFVUR3\n"" +
        ""cASPpPIdZaKZG6q4Hmcpl58=\n"" +
        ""-----END PRIVATE KEY-----"");
    }
    final File tmpCertFile = tmpFolder.newFile(""brokenCert.pem"");
    try (final FileWriter tmpCertWriter = new FileWriter(tmpCertFile)) {
      tmpCertWriter.write(""-----BEGIN CERTIFICATE-----\n"" +
        ""MIICwTCCAamgAwIBA...BROKEN...FOD1DKV1BoDFsgugvfvm/mrc3QfIUPDA==\n"" +
        ""-----END CERTIFICATE-----"");
    }
    final JsonObject withSSLAndCertKeyPath = new JsonObject()
      .put(""ssl"", true)
      .put(""keyPath"", tmpKeyFile.getAbsolutePath())
      .put(""certPath"", tmpCertFile.getAbsolutePath());

    // then
    new MongoClientOptionsParser(vertx, withSSLAndCertKeyPath);
  }
",non-flaky,5
159634,liquibase_liquibase,OracleIntegrationTest.indexCreatedOnCorrectSchema,"    @Test
    public void indexCreatedOnCorrectSchema() throws Exception {
        assumeNotNull(this.getDatabase());

        Liquibase liquibase = createLiquibase(this.indexOnSchemaChangeLog);
        clearDatabase();

        try {
            liquibase.update(this.contexts);
        } catch (ValidationFailedException e) {
            e.printDescriptiveError(System.out);
            throw e;
        }

        Statement queryIndex = ((JdbcConnection) this.getDatabase().getConnection()).getUnderlyingConnection().createStatement();

        ResultSet indexOwner = queryIndex.executeQuery(""SELECT owner FROM ALL_INDEXES WHERE index_name = 'IDX_BOOK_ID'"");

        assertTrue(indexOwner.next());

        String owner = indexOwner.getString(""owner"");

        assertEquals(""LBCAT2"", owner);

        // check that the automatically rollback now works too
        try {
            liquibase.rollback( new Date(0),this.contexts);
        } catch (ValidationFailedException e) {
            e.printDescriptiveError(System.out);
            throw e;
        }




    }
",non-flaky,5
156463,apache_commons-lang,DateUtilsFragmentTest.testHoursOfDayWithDate,"    @Test
    public void testHoursOfDayWithDate() {
        long testResult = DateUtils.getFragmentInHours(aDate, Calendar.DATE);
        final long expectedValue = hours;
        assertEquals(expectedValue, testResult);
        testResult = DateUtils.getFragmentInHours(aDate, Calendar.DAY_OF_YEAR);
        assertEquals(expectedValue, testResult);
    }
",non-flaky,5
94799,ktuukkan_marine-api,AISMessage09ParserTest.getLongitudeInDegrees,"    @Test
    public void getLongitudeInDegrees() throws Exception {
        assertEquals(-82.91646, msg.getLongitudeInDegrees(), 0.00001);
    }
",non-flaky,5
362,line_armeria,ServiceRequestCancellationTest.shouldCompleteLogWhenCancelledByClient,"@Test
void shouldCompleteLogWhenCancelledByClient(SessionProtocol protocol) {
    final ClientFactory factory = ClientFactory.builder().build();
    final WebClient client = WebClient.builder(server.uri(protocol)).factory(factory).build();
    final CompletableFuture<AggregatedHttpResponse> responseFuture = client.get(""/reset"").aggregate();
    await().untilAtomic(ctxRef, Matchers.notNullValue());
    factory.close();
    final RequestLog log = ctxRef.get().log().whenComplete().join();
    if (protocol.isMultiplex()) {
        assertThat(log.responseCause()).isInstanceOf(ClosedStreamException.class).hasMessageContaining(""received a RST_STREAM frame: CANCEL"");
        assertThatThrownBy(responseFuture::join).isInstanceOf(CompletionException.class).hasCauseInstanceOf(ClosedStreamException.class);
    } else {
        assertThat(log.responseCause()).isInstanceOf(ClosedSessionException.class);
        assertThatThrownBy(responseFuture::join).isInstanceOf(CompletionException.class).hasCauseInstanceOf(ClosedSessionException.class);
    }
}",test order dependency,4
175741,GoogleCloudPlatform_google-cloud-eclipse,MultipleConnectionsTest.testUnlimitedConnectionsBehaviour,"	@Test
	public void testUnlimitedConnectionsBehaviour() throws CoreException, InterruptedException {
		connector = new SocketListenMultiConnector();
		Map<String, String> arguments = new HashMap<>();
		arguments.put(""port"", Integer.toString(port));
		arguments.put(""connectionLimit"", ""0"");
		connector.connect(arguments, new NullProgressMonitor(), launch);
		Thread.sleep(200);

		for (int i = 0; i < 10; i++) {
			assertTrue(""connection "" + i + "" should succeed"", connect());
		}
	}
",non-flaky,5
310,apache_hadoop,TestRpcProgramNfs3.testRemove,"  @Test(timeout = 60000)
  public void testRemove() throws Exception {
    HdfsFileStatus status = nn.getRpcServer().getFileInfo(testdir);
    long dirId = status.getFileId();
    int namenodeId = Nfs3Utils.getNamenodeId(config);
    XDR xdr_req = new XDR();
    FileHandle handle = new FileHandle(dirId, namenodeId);
    REMOVE3Request req = new REMOVE3Request(handle, ""bar"");
    req.serialize(xdr_req);

    // Attempt by an unpriviledged user should fail.
    REMOVE3Response response1 = nfsd.remove(xdr_req.asReadOnlyWrap(),
        securityHandlerUnpriviledged,
        new InetSocketAddress(""localhost"", 1234));
    assertEquals(""Incorrect return code:"", Nfs3Status.NFS3ERR_ACCES,
        response1.getStatus());

    // Attempt by a priviledged user should pass.
    REMOVE3Response response2 = nfsd.remove(xdr_req.asReadOnlyWrap(),
        securityHandler, new InetSocketAddress(""localhost"", 1234));
    assertEquals(""Incorrect return code:"", Nfs3Status.NFS3_OK,
        response2.getStatus());
  }
",non-flaky,5
21226,androidx_androidx,PreferenceDataStoreTest.testSharedPrefNullIfWithDSMgr,"    @Test
    public void testSharedPrefNullIfWithDSMgr() {
        mManager.setPreferenceDataStore(mDataStore);

        assertNull(mManager.getSharedPreferences());
    }
",non-flaky,5
137090,spring-projects_spring-framework,AbstractAnnotationMetadataTests.getSuperClassNameWhenHasNoSuperClassReturnsNull,"	@Test
	public void getSuperClassNameWhenHasNoSuperClassReturnsNull() {
		assertThat(get(Object.class).getSuperClassName()).isNull();
		assertThat(get(TestInterface.class).getSuperClassName()).isNull();
		assertThat(get(TestSubInterface.class).getSuperClassName()).isNull();
	}
",non-flaky,5
76735,quarkusio_quarkus,CreateExtensionMojoIT.testCreateCoreExtension,"    @Test
    public void testCreateCoreExtension(TestInfo testInfo) throws Throwable {
        testDir = initProject(""projects/create-extension-quarkus-core"", ""output/create-extension-quarkus-core"");
        assertThat(testDir).isDirectory();
        invoker = initInvoker(testDir);

        Properties properties = new Properties();
        properties.put(""extensionId"", ""my-ext"");
        InvocationResult result = setup(properties);

        assertThat(result.getExitCode()).isZero();

        final Path testDirPath = testDir.toPath();
        assertThatDirectoryTreeMatchSnapshots(testInfo, testDirPath)
                .contains(
                        ""extensions/my-ext/pom.xml"",
                        ""extensions/my-ext/runtime/src/main/resources/META-INF/quarkus-extension.yaml"",
                        ""extensions/my-ext/deployment/src/main/java/org/acme/my/ext/deployment/MyExtProcessor.java"",
                        ""integration-tests/my-ext/pom.xml"",
                        ""integration-tests/my-ext/src/test/java/org/acme/my/ext/it/MyExtResourceTest.java"");
        assertThatMatchSnapshot(testInfo, testDirPath, ""extensions/my-ext/pom.xml"");
        assertThatMatchSnapshot(testInfo, testDirPath,
                ""extensions/my-ext/runtime/src/main/resources/META-INF/quarkus-extension.yaml"");
        assertThatMatchSnapshot(testInfo, testDirPath, ""bom/application/pom.xml"");
        assertThatMatchSnapshot(testInfo, testDirPath, ""integration-tests/pom.xml"");
        assertThatMatchSnapshot(testInfo, testDirPath, ""extensions/pom.xml"");
    }
",non-flaky,5
94622,square_okhttp,InterceptorTest.intercept,"  @Test public void networkInterceptorsCannotChangeServerAddress() throws Exception {
      @Override public Response intercept(Chain chain) throws IOException {
        Address address = chain.connection().route().address();
        String sameHost = address.url().host();
        int differentPort = address.url().port() + 1;
        return chain.proceed(chain.request().newBuilder()
            .url(HttpUrl.parse(""http://"" + sameHost + "":"" + differentPort + ""/""))
            .build());
      }
",non-flaky,5
246,wildfly_wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993.testLookupNameNotFound,"@Test
public void testLookupNameNotFound() throws Exception {
    try {
        namingContext.lookup(new CompositeName(""test""));
        fail(""Should have thrown and NameNotFoundException"");
    } catch (NameNotFoundException expected) {
    }
    try {
        testActionPermission(JndiPermission.ACTION_LOOKUP, namingContext, ""test"");
        fail(""Should have thrown and NameNotFoundException with appropriate permissions"");
    } catch (NameNotFoundException expected) {
    }
}",test order dependency,4
59587,looly_hutool,MailAccountTest.parseSettingTest,"	@Test
	public void parseSettingTest() {
		MailAccount account = GlobalMailAccount.INSTANCE.getAccount();
		account.getSmtpProps();
		
		Assert.assertNotNull(account.getCharset());
		Assert.assertTrue(account.isSslEnable());
	}
",non-flaky,5
196,wildfly_wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993.testBind,"@Test
public void testBind() throws Exception {
    Name name = new CompositeName(""test"");
    final Object value = new Object();
    namingContext.bind(name, value);
    assertEquals(value, namingStore.lookup(name));
    name = new CompositeName(""securitytest"");
    testActionPermission(JndiPermission.ACTION_BIND, namingContext, ""securitytest"", value);
    assertEquals(value, namingStore.lookup(name));
}",test order dependency,4
82,wildfly_wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993.testLookupLink,"@Test
public void testLookupLink() throws Exception {
    final Name name = new CompositeName(""test"");
    namingStore.bind(name, ""testValue"", String.class);
    final Name linkName = new CompositeName(""link"");
    namingStore.bind(linkName, new LinkRef(""./test""));
    Object result = namingContext.lookup(linkName);
    assertEquals(""testValue"", result);
    result = testActionPermission(JndiPermission.ACTION_LOOKUP, Arrays.asList(new JndiPermission(""test"", ""lookup"")), namingContext, ""link"");
    assertEquals(""testValue"", result);
    System.setProperty(Context.INITIAL_CONTEXT_FACTORY, InitialContextFactory.class.getName());
    namingStore.rebind(linkName, new LinkRef(name));
    result = namingContext.lookup(linkName);
    assertEquals(""testValue"", result);
    result = testActionPermission(JndiPermission.ACTION_LOOKUP, Arrays.asList(new JndiPermission(""test"", ""lookup"")), namingContext, ""link"");
    assertEquals(""testValue"", result);
}",test order dependency,4
133897,julianghionoiu_dpnt-coverage,LanguageTest.should_ignore_spaces_and_capitalisation_when_matching,"    @Test
    public void should_ignore_spaces_and_capitalisation_when_matching() throws IllegalLanguageException {
        assertThat(Language.of(""  JaVa \n  ""), is(JAVA));
    }
",non-flaky,5
94679,square_okhttp,DisconnectTest.run,"  @Test public void interruptReadingResponseBody() throws Exception {
      @Override public void run() {
        try {
          sleep(delayMillis);
          connection.disconnect();
        } catch (InterruptedException e) {
          throw new RuntimeException(e);
        }
      }
",non-flaky,5
98222,apache_jackrabbit,CreateRepositoryTest.createRepositories,"    @Test
    public void createRepositories() throws Exception {
        doCreateRepositories(""jackrabbit-1.0"");
    }
",non-flaky,5
77533,dropwizard_dropwizard,ResourceTestRuleWithoutLoggingBootstrapTest.testResource,"    @Test
    public void testResource() {
        assertThat(resourceTestRule.target(""test"").request()
                .get(String.class))
                .isEqualTo(""Default message"");
    }
",non-flaky,5
98331,spotify_docker-client,DockerCertificatesTest.testBadDockerCertificates,"  @Test(expected = DockerCertificateException.class)
  public void testBadDockerCertificates() throws Exception {
    // try building a DockerCertificates with specifying a cert path to something that
    // isn't a cert
    DockerCertificates.builder()
        .dockerCertPath(getResourceFile(""dockerInvalidSslDirectory""))
        .build();
  }
",non-flaky,5
21196,androidx_androidx,PreferenceDataStoreTest.testInitialValueIsFromDataStoreOnPreference,"    @Test
    public void testInitialValueIsFromDataStoreOnPreference() {
        when(mDataStore.getBoolean(anyString(), anyBoolean())).thenReturn(true);

        CheckBoxPreference pref = new CheckBoxPreference(mContext);
        pref.setKey(""CheckboxTestPref"");
        pref.setPreferenceDataStore(mDataStore);

        mScreen.addPreference(pref);

        assertTrue(pref.isChecked());
    }
",non-flaky,5
156446,apache_commons-lang,DateUtilsFragmentTest.testMillisecondsOfSecondWithCalendar,"    @Test
    public void testMillisecondsOfSecondWithCalendar() {
        final long testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.SECOND);
        assertEquals(millis, testResult);
        assertEquals(aCalendar.get(Calendar.MILLISECOND), testResult);
    }
",non-flaky,5
135790,Netflix_Hystrix,HystrixCommandTimeoutConcurrencyTesting.testTimeoutRace,"    @Test
    public void testTimeoutRace() throws InterruptedException {
        final int NUM_TRIALS = 10;

        for (int i = 0; i < NUM_TRIALS; i++) {
            List<Observable<String>> observables = new ArrayList<Observable<String>>();
            HystrixRequestContext context = null;

            try {
                context = HystrixRequestContext.initializeContext();
                for (int j = 0; j < NUM_CONCURRENT_COMMANDS; j++) {
                    observables.add(new TestCommand().observe());
                }

                Observable<String> overall = Observable.merge(observables);

                List<String> results = overall.toList().toBlocking().first(); //wait for all commands to complete

                for (String s : results) {
                    if (s == null) {
                        System.err.println(""Received NULL!"");
                        throw new RuntimeException(""Received NULL"");
                    }
                }

                for (HystrixInvokableInfo<?> hi : HystrixRequestLog.getCurrentRequest().getAllExecutedCommands()) {
                    if (!hi.isResponseTimedOut()) {
                        System.err.println(""Timeout not found in executed command"");
                        throw new RuntimeException(""Timeout not found in executed command"");
                    }
                    if (hi.isResponseTimedOut() && hi.getExecutionEvents().size() == 1) {
                        System.err.println(""Missing fallback status!"");
                        throw new RuntimeException(""Missing fallback status on timeout."");
                    }
                }

            } catch (Exception e) {
                System.err.println(""Error: "" + e.getMessage());
                e.printStackTrace();
                throw new RuntimeException(e);
            } finally {
                System.out.println(HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());
                if (context != null) {
                    context.shutdown();
                }
            }

            System.out.println(""*************** TRIAL "" + i + "" ******************"");
            System.out.println();
            Thread.sleep(50);
        }

        Hystrix.reset();
    }
",non-flaky,5
178009,aosp-mirror_platform_frameworks_support,PlaybackControlGlueTest.testFastRewindToMaxThenReset,"    @Test
    public void testFastRewindToMaxThenReset() {
        PlaybackControlsRow row = new PlaybackControlsRow();
        glue.setControlsRow(row);
        SparseArrayObjectAdapter adapter = (SparseArrayObjectAdapter)
                row.getPrimaryActionsAdapter();
        PlaybackControlsRow.MultiAction playPause = (PlaybackControlsRow.MultiAction) adapter
                .lookup(PlaybackControlGlue.ACTION_PLAY_PAUSE);
        PlaybackControlsRow.MultiAction fastForward = (PlaybackControlsRow.MultiAction) adapter
                .lookup(PlaybackControlGlue.ACTION_FAST_FORWARD);
        PlaybackControlsRow.MultiAction rewind = (PlaybackControlsRow.MultiAction) adapter
                .lookup(PlaybackControlGlue.ACTION_REWIND);

        assertFalse(glue.isMediaPlaying());
        glue.onActionClicked(playPause);
        assertTrue(glue.isMediaPlaying());
        assertEquals(PlaybackControlGlue.PLAYBACK_SPEED_NORMAL, glue.getCurrentSpeedId());
        assertEquals(0, fastForward.getIndex());
        assertEquals(0, rewind.getIndex());

        // click multiple times to reach PLAYBACK_SPEED_FAST_L2
        glue.onActionClicked(rewind);
        assertEquals(-PlaybackControlGlue.PLAYBACK_SPEED_FAST_L0, glue.getCurrentSpeedId());
        assertEquals(0, fastForward.getIndex());
        assertEquals(1, rewind.getIndex());
        glue.onActionClicked(rewind);
        assertEquals(-PlaybackControlGlue.PLAYBACK_SPEED_FAST_L1, glue.getCurrentSpeedId());
        assertEquals(0, fastForward.getIndex());
        assertEquals(2, rewind.getIndex());
        glue.onActionClicked(rewind);
        assertEquals(-PlaybackControlGlue.PLAYBACK_SPEED_FAST_L2, glue.getCurrentSpeedId());
        assertEquals(0, fastForward.getIndex());
        assertEquals(3, rewind.getIndex());
        glue.onActionClicked(rewind);
        assertEquals(-PlaybackControlGlue.PLAYBACK_SPEED_FAST_L2, glue.getCurrentSpeedId());
        assertEquals(0, fastForward.getIndex());
        assertEquals(3, rewind.getIndex());

        // press playPause again put it back to play
        glue.onActionClicked(playPause);
        assertEquals(PlaybackControlGlue.PLAYBACK_SPEED_NORMAL, glue.getCurrentSpeedId());
        assertEquals(0, fastForward.getIndex());
        assertEquals(0, rewind.getIndex());
    }
",non-flaky,5
91383,OpenLCB_OpenLCB_Java,FakeMemoryConfigurationServiceTest.put,"    @Test
    public void testCTor() {
        NodeID nodeID = new NodeID(new byte[]{1,2,3,4,5,6});
        Connection testConnection = new AbstractConnection(){
            public void put(Message msg, Connection node) {
            }
",non-flaky,5
19465,eclipse_xtext-core,DelegatingScopeProviderTest.getScope,"	@Test
	public void testTwoSuitableDelegates_02() {
		final int[] invocationCount = new int[] { 0 };
		AbstractGlobalScopeDelegatingScopeProvider first = new AbstractGlobalScopeDelegatingScopeProvider() {
			
			@Override
			public IScope getScope(EObject context, EReference reference) {
				return IScope.NULLSCOPE;
			}
",non-flaky,5
98638,nutzam_nutz,SimpleAdaptorTest.test_json_map_type,"    @Test
    public void test_json_map_type() {
        resp = post(""/adaptor/json/type"", ""{'abc': 123456}"");
        if (resp.getStatus() != 200) {
            fail();
        }
    }
",non-flaky,5
175836,GoogleCloudPlatform_google-cloud-eclipse,BucketNameValidatorTest.testValidation_maxLengthWithDot,"  @Test
  public void testValidation_maxLengthWithDot() {
    assertThat(validator.validate(LENGTH_222).getSeverity(), is(IStatus.OK));
  }
",non-flaky,5
21214,androidx_androidx,PreferenceDataStoreTest.testGetLongWithDataStoreOnMgr,"    @Test
    public void testGetLongWithDataStoreOnMgr() {
        mManager.setPreferenceDataStore(mDataStore);
        mScreen.addPreference(mPreference);

        mPreference.getLong(1L);

        verify(mDataStore, atLeastOnce()).getLong(eq(KEY), eq(1L));
    }
",non-flaky,5
98063,vert-x3_vertx-mongo-client,MongoClientAggregateUpdateTest.testAggregateUpdateCollectionWithOptions,"  @Test
  public void testAggregateUpdateCollectionWithOptions() {
    String collection = randomCollection();
    mongoClient.insert(collection, new JsonObject().put(""price"", 10).put(""quantity"", 1), onSuccess(id -> {
      mongoClient.insert(collection, new JsonObject().put(""price"", 20).put(""quantity"", 2), onSuccess(id2 -> {
        mongoClient.insert(collection, new JsonObject().put(""price"", 30).put(""quantity"", 10), onSuccess(id3 -> {
          mongoClient.updateCollectionWithOptions(collection,
            // reduce price of low quantity items
            new JsonObject().put(""quantity"", new JsonObject().put(""$lte"", 2)),
            new JsonArray().add(new JsonObject().put(""$set"", new JsonObject().put(""price"", new JsonObject().put(""$subtract"", new JsonArray().add(""$price"").add(2))))),
            new UpdateOptions(),onSuccess(res -> {
              assertEquals(2, res.getDocModified());
              assertEquals(2, res.getDocMatched());
              testComplete();
            }));
        }));
      }));
    }));
    await();
  }
",non-flaky,5
53150,cloudfoundry_uaa,SamlConfigTest.to_json_ignores_legacy_values,"    @Test
    public void to_json_ignores_legacy_values() throws Exception {
        read_json(oldJson);
        String json = JsonUtils.writeValueAsString(config);
        read_json(json);
        assertEquals(privateKey, config.getPrivateKey());
        assertEquals(passphrase, config.getPrivateKeyPassword());
        assertEquals(certificate, config.getCertificate());
    }
",non-flaky,5
98611,nutzam_nutz,El2Test.testIssue293,"    @Test
    public void testIssue293() {

        Context context = Lang.context();
        context.set(""static"", new Issue293());
        context.set(""a"", Issue293.class);

        assertEquals(""xxx"", El.eval(context, ""a.printParam(a.info)""));
    }
",non-flaky,5
77509,dropwizard_dropwizard,DropwizardAppRuleWithoutConfigTest.runWithoutConfigFile,"    @Test
    public void runWithoutConfigFile() {
        Map<String, String> response = RULE.client().target(""http://localhost:"" + RULE.getLocalPort() + ""/test"")
            .request()
            .get(new GenericType<Map<String, String>>() {
            });
        assertThat(response).containsOnly(entry(""color"", ""orange""));
    }
",non-flaky,5
118775,netty_netty,ByteBufUtilTest.testUtf8BytesWithNonSurrogates3Bytes,"    @Test
    public void testUtf8BytesWithNonSurrogates3Bytes() {
        final String s = ""a\uE000b"";
        checkUtf8Bytes(s);
    }
",non-flaky,5
97745,vojtechhabarta_typescript-generator,PathTemplateTest.test,"    @Test
    public void test() {
        Assert.assertEquals(0, PathTemplate.parse("""").getParts().size());
        Assert.assertEquals(1, PathTemplate.parse(""a"").getParts().size());
        Assert.assertEquals(1, PathTemplate.parse(""{x}"").getParts().size());
        Assert.assertEquals(1, PathTemplate.parse(""{x:.+}"").getParts().size());
        Assert.assertEquals(1, PathTemplate.parse(""{ x : .+ }"").getParts().size());
        Assert.assertEquals(2, PathTemplate.parse(""a{x}"").getParts().size());
        Assert.assertEquals(2, PathTemplate.parse(""{x}a"").getParts().size());
        Assert.assertEquals(2, PathTemplate.parse(""{x}{y}"").getParts().size());
        Assert.assertEquals(3, PathTemplate.parse(""a{x}a"").getParts().size());
        Assert.assertEquals(3, PathTemplate.parse(""{x}a{y}"").getParts().size());

        Assert.assertEquals(""${x}a${y}"", PathTemplate.parse(""{ x : .+ }a{y}"").format(""${"", ""}"", false));
        Assert.assertEquals(""{x:.+}a{y}"", PathTemplate.parse(""{ x : .+ }a{y}"").format(""{"", ""}"", true));
    }
",non-flaky,5
84595,apache_zookeeper,BinaryInputArchiveTest.testString,"    @Test
    public void testString() {
        final String expected = ""hello"";
        final String tag = ""tag1"";
        checkWriterAndReader(
                (oa) -> oa.writeString(expected, tag),
                (ia) -> {
                    String actual = ia.readString(tag);
                    assertEquals(expected, actual);
                }
        );
    }
",non-flaky,5
135728,Netflix_Hystrix,CommonHystrixCommandTests.call,"    @Test
    public void testExecutionHookSemaphoreShortCircuitUnsuccessfulFallback() {
        assertHooksOnFailFast(
                new Func0<C>() {
                    @Override
                    public C call() {
                        return getCircuitOpenCommand(ExecutionIsolationStrategy.SEMAPHORE, FallbackResult.FAILURE);
                    }
",non-flaky,5
112088,apache_shardingsphere-elasticjob,AverageAllocationJobShardingStrategyTest.shardingForOneServer,"    @Test
    public void shardingForOneServer() {
        Map<JobInstance, List<Integer>> expected = new LinkedHashMap<>(1, 1);
        expected.put(new JobInstance(""host0@-@0""), Arrays.asList(0, 1, 2));
        assertThat(jobShardingStrategy.sharding(Collections.singletonList(new JobInstance(""host0@-@0"")), ""test_job"", 3), is(expected));
    }
",non-flaky,5
365,wildfly_wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993.testListBindingsWithContinuation,"@Test
public void testListBindingsWithContinuation() throws Exception {
    bindListWithContinuations();
    NamingEnumeration<Binding> results = namingContext.listBindings(new CompositeName(""comp""));
    checkListWithContinuationsResults(results);
    results = (NamingEnumeration<Binding>) testActionPermission(JndiPermission.ACTION_LIST_BINDINGS, Arrays.asList(
    new JndiPermission(""test"", ""listBindings"")), namingContext, ""comp"");
    checkListWithContinuationsResults(results);
}",test order dependency,4
26920,wildfly_wildfly,MailSubsystem20TestCase.testExpressions,"    @Test
    public void testExpressions() throws Exception {
        standardSubsystemTest(""subsystem_1_1_expressions.xml"", false);
    }
",non-flaky,5
175826,GoogleCloudPlatform_google-cloud-eclipse,BucketNameValidatorTest.testValidation_startWithDot,"  @Test
  public void testValidation_startWithDot() {
    assertThat(validator.validate("".bucket"").getSeverity(), is(IStatus.ERROR));
  }
",non-flaky,5
26778,MundaneImmortal_pair-distribution-app,CompanyTest.testGetCompanyOriginalName,"	@Test
	public void testGetCompanyOriginalName() {
		assertThat(new Company(""Company"").getOriginalName(), is(""Company""));
	}
",non-flaky,5
135734,Netflix_Hystrix,HystrixCommandTestWithCustomConcurrencyStrategy.testCommandRequiresContextConcurrencyStrategyDoesNotProvideItContextSetUpCorrectly,"    @Test
    public void testCommandRequiresContextConcurrencyStrategyDoesNotProvideItContextSetUpCorrectly() {
        HystrixConcurrencyStrategy strategy = new CustomConcurrencyStrategy(false);
        HystrixPlugins.getInstance().registerConcurrencyStrategy(strategy);

        //context is set up properly
        HystrixRequestContext context = HystrixRequestContext.initializeContext();
        HystrixCommand<Boolean> cmd = new TestCommand(true, true);
        assertTrue(cmd.execute());
        printRequestLog();
        assertNull(HystrixRequestLog.getCurrentRequest());
        assertNull(HystrixRequestLog.getCurrentRequest(strategy));
        assertNull(cmd.currentRequestLog);
        context.shutdown();
    }
",non-flaky,5
159662,liquibase_liquibase,AbstractIntegrationTest.testObjectQuotingStrategy,"    @Test
    public void testObjectQuotingStrategy() throws Exception {
        assumeNotNull(this.getDatabase());
        if (!Arrays.asList(""oracle,h2,hsqldb,postgresql,mysql"").contains(database.getShortName())) {
            return;
        }

        Liquibase liquibase = createLiquibase(objectQuotingStrategyChangeLog);
        clearDatabase();
        liquibase.update(contexts);
        clearDatabase();
    }
",non-flaky,5
112640,tbsalling_aismessages,BinaryBroadcastMessageTest.canDecode,"    @Test
    public void canDecode() {
        AISMessage aisMessage = AISMessage.create(NMEAMessage.fromString(""!AIVDM,1,1,,B,85MwpKiKf:MPiQa:ofV@v2mQTfB26oEtbEVqh4j1QDQPHjhpkNJ3,0*11""));

        System.out.println(aisMessage.toString());

        assertEquals(AISMessageType.BinaryBroadcastMessage, aisMessage.getMessageType());
        BinaryBroadcastMessage message = (BinaryBroadcastMessage) aisMessage;
        assertEquals(Integer.valueOf(0), message.getRepeatIndicator());
        assertEquals(MMSI.valueOf(366999663), message.getSourceMmsi());
        assertEquals((Integer) 366, message.getDesignatedAreaCode());
        assertEquals((Integer) 56, message.getFunctionalId());
        // TODO : check the binary value
        assertEquals(""1010011101100000110001100001101001001010110111101110100110010000111110000010110101100001100100101110010010000010000110110111010101111100101010010101100110111001110000000100110010000001100001010100100001100000011000110010110000111000110011011110011010000011"", message.getBinaryData());
    }
",non-flaky,5
60890,apache_druid,MaterializedViewSupervisorSpecTest.testEmptyBaseDataSource,"  @Test
  public void testEmptyBaseDataSource()
  {
    expectedException.expect(CoreMatchers.instanceOf(IllegalArgumentException.class));
    expectedException.expectMessage(
        ""baseDataSource cannot be null or empty. Please provide a baseDataSource.""
    );
    //noinspection ResultOfObjectAllocationIgnored (this method call will trigger the expected exception)
    new MaterializedViewSupervisorSpec(
        """",
        new DimensionsSpec(
            Lists.newArrayList(
                new StringDimensionSchema(""isUnpatrolled""),
                new StringDimensionSchema(""metroCode""),
                new StringDimensionSchema(""namespace""),
                new StringDimensionSchema(""page""),
                new StringDimensionSchema(""regionIsoCode""),
                new StringDimensionSchema(""regionName""),
                new StringDimensionSchema(""user"")
            ),
            null,
            null
        ),
        new AggregatorFactory[]{
            new CountAggregatorFactory(""count""),
            new LongSumAggregatorFactory(""added"", ""added"")
        },
        HadoopTuningConfig.makeDefaultTuningConfig(),
        null,
        null,
        null,
        null,
        null,
        false,
        objectMapper,
        null,
        null,
        null,
        null,
        null,
        new MaterializedViewTaskConfig(),
        EasyMock.createMock(AuthorizerMapper.class),
        new NoopChatHandlerProvider(),
        new SupervisorStateManagerConfig()
    );
  }
",non-flaky,5
122626,vespa-engine_vespa,DefaultEnvWriterTest.generates_default_env_content,"    @Test
    public void generates_default_env_content() throws IOException {
        DefaultEnvWriter writer = new DefaultEnvWriter();
        writer.addOverride(""VESPA_HOSTNAME"", ""my-new-hostname"");
        writer.addFallback(""VESPA_CONFIGSERVER"", ""new-fallback-configserver"");
        writer.addOverride(""VESPA_TLS_CONFIG_FILE"", ""/override/path/to/config.file"");
        writer.addUnset(""VESPA_LEGACY_OPTION"");
        String generatedContent = writer.generateContent();
        assertEquals(Files.readString(EXPECTED_RESULT_FILE), generatedContent);
    }
",non-flaky,5
114093,aws_aws-sdk-java-v2,KeyTest.binaryKeys_convertsToCorrectAttributeValue,"    @Test
    public void binaryKeys_convertsToCorrectAttributeValue() {
        SdkBytes partition = SdkBytes.fromString(""one"", StandardCharsets.UTF_8);
        SdkBytes sort = SdkBytes.fromString(""two"", StandardCharsets.UTF_8);

        Key key = Key.builder().partitionValue(partition).sortValue(sort).build();

        assertThat(key.partitionKeyValue(), is(AttributeValue.builder().b(partition).build()));
        assertThat(key.sortKeyValue(), is(Optional.of(AttributeValue.builder().b(sort).build())));
    }
",non-flaky,5
31000,camunda-cloud_zeebe,ArrayValueTest.shouldAddValuesAtEndAfterRead,"  @Test
  public void shouldAddValuesAtEndAfterRead() {
    // given
    addIntValues(array, 1, 2, 3);

    // when
    final Iterator<IntegerValue> iterator = array.iterator();
    iterator.next();
    iterator.next();
    iterator.next();
    addIntValues(array, 4, 5, 6);

    // then
    encodeAndDecode(array);
    assertIntValues(array, 1, 2, 3, 4, 5, 6);
  }
",non-flaky,5
162688,OpenAPITools_openapi-generator,TypeHolderDefaultTest.stringItemTest,"    @Test
    public void stringItemTest() {
        // TODO: test stringItem
    }
",non-flaky,5
162376,testcontainers_testcontainers-java,DockerStatusTest.testStopped,"    @Test
    public void testStopped() throws Exception {
        assertFalse(DockerStatus.isContainerStopped(running));
        assertFalse(DockerStatus.isContainerStopped(runningVariant));
        assertFalse(DockerStatus.isContainerStopped(shortRunning));
        assertFalse(DockerStatus.isContainerStopped(created));
        assertFalse(DockerStatus.isContainerStopped(createdVariant));
        assertTrue(DockerStatus.isContainerStopped(exited));
        assertFalse(DockerStatus.isContainerStopped(paused));
    }
",non-flaky,5
25,apache_hadoop,TestDelegationToken.testDelegationTokenSecretManager,"@Test
public void testDelegationTokenSecretManager() throws Exception {
    DelegationTokenSecretManager dtSecretManager = cluster.getNameNode().getNamesystem().getDelegationTokenSecretManager();
    Token<DelegationTokenIdentifier> token = generateDelegationToken(""SomeUser"", ""JobTracker"");
    try {
        dtSecretManager.renewToken(token, ""FakeRenewer"");
        Assert.fail(""should have failed"");
    } catch (AccessControlException ace) {
    }
    dtSecretManager.renewToken(token, ""JobTracker"");
    DelegationTokenIdentifier identifier = new DelegationTokenIdentifier();
    byte[] tokenId = token.getIdentifier();
    identifier.readFields(new DataInputStream(new ByteArrayInputStream(tokenId)));
    Assert.assertTrue(null != dtSecretManager.retrievePassword(identifier));
    LOG.info(""Sleep to expire the token"");
    Thread.sleep(6000);
    try {
        dtSecretManager.retrievePassword(identifier);
        Assert.fail(""Token should have expired"");
    } catch (InvalidToken e) {
    }
    dtSecretManager.renewToken(token, ""JobTracker"");
    LOG.info(""Sleep beyond the max lifetime"");
    Thread.sleep(5000);
    try {
        dtSecretManager.renewToken(token, ""JobTracker"");
        Assert.fail(""should have been expired"");
    } catch (InvalidToken it) {
    }
}",concurrency,1
133926,cdancy_jenkins-rest,ConfigurationAsCodeApiMockTest.testCascCheck,"@Test(groups = ""unit"", testName = ""ConfigurationAsCodeApiMockTest"")
    public void testCascCheck() throws Exception {
        MockWebServer server = mockWebServer();

        server.enqueue(new MockResponse().setResponseCode(200));
        JenkinsApi jenkinsApi = api(server.url(""/"").url());
        ConfigurationAsCodeApi api = jenkinsApi.configurationAsCodeApi();
        try {
            RequestStatus requestStatus = api.check(""random"");
            assertNotNull(requestStatus);
            assertTrue(requestStatus.value());
            assertEquals(requestStatus.errors().size(), 0);
        } finally {
            jenkinsApi.close();
            server.shutdown();
        }
    }
",non-flaky,5
99728,apache_cassandra,FQLReplayTest.testCompareRowsDifferentCount,"    @Test
    public void testCompareRowsDifferentCount()
    {
        ResultComparator rc = new ResultComparator();
        ResultHandler.ComparableResultSet res = createResultSet(10, 10, false);
        ResultHandler.ComparableResultSet res2 = createResultSet(10, 10, false);
        List<ResultHandler.ComparableResultSet> toCompare = Lists.newArrayList(res, res2, createResultSet(10, 11, false));
        List<Iterator<ResultHandler.ComparableRow>> iters = toCompare.stream().map(Iterable::iterator).collect(Collectors.toList());
        boolean foundMismatch = false;
        while (true)
        {
            List<ResultHandler.ComparableRow> rows = ResultHandler.rows(iters);
            if (rows.stream().allMatch(Objects::isNull))
                break;
            if (!rc.compareRows(Lists.newArrayList(""eq1"", ""eq2"", ""diff""), null, rows))
            {
                foundMismatch = true;
            }
        }
        assertTrue(foundMismatch);
    }
",non-flaky,5
106606,Alluxio_alluxio,ClientTest.notEnoughVCoreForAlluxioWorker,"  @Test
  public void notEnoughVCoreForAlluxioWorker() throws Exception {
    mConf.set(PropertyKey.INTEGRATION_WORKER_RESOURCE_MEM, ""2048.00MB"");
    mConf.set(PropertyKey.WORKER_RAMDISK_SIZE, ""4096.00MB"");
    mConf.set(PropertyKey.INTEGRATION_WORKER_RESOURCE_CPU, ""8"");
    int workerMemInMB = (int) (mConf.getBytes(
        PropertyKey.INTEGRATION_WORKER_RESOURCE_MEM) / Constants.MB);
    int ramdiskMemInMB = (int) (mConf.getBytes(
        PropertyKey.WORKER_RAMDISK_SIZE) / Constants.MB);
    int workerVCore = mConf.getInt(PropertyKey.INTEGRATION_WORKER_RESOURCE_CPU);
    Resource resource = Resource.newInstance((workerMemInMB + ramdiskMemInMB), 4);
    generateMaxAllocation(resource);
    mThrown.expect(RuntimeException.class);
    mThrown.expectMessage(ExceptionMessage.YARN_NOT_ENOUGH_RESOURCES.getMessage(
        ""Alluxio Worker"", ""virtual cores"", workerVCore, resource.getVirtualCores()));
    Client client = new Client(mConf);
    client.run();
  }
",non-flaky,5
112160,apache_shardingsphere-elasticjob,JobConfigurationGsonTypeAdapterTest.assertFromSimpleJobJson,"    @Test
    public void assertFromSimpleJobJson() {
        TestJobRootConfiguration actual = GsonFactory.getGson().fromJson(
                APIJsonConstants.getSimpleJobJson(ThrowJobExceptionHandler.class.getCanonicalName()), TestJobRootConfiguration.class);
        TestJobRootConfiguration expected = new TestJobRootConfiguration(
                new TestSimpleJobConfiguration(ThrowJobExceptionHandler.class.getCanonicalName(), DefaultExecutorServiceHandler.class.getCanonicalName()).getTypeConfig());
        assertThat(GsonFactory.getGson().toJson(actual), is(GsonFactory.getGson().toJson(expected)));
    }
",non-flaky,5
33922,apache_camel,LdifRouteIT.modRdn,"    @Test
    public void modRdn() throws Exception {
        setupData(""/org/apache/camel/component/ldif/ModRdnSetup.ldif"");

        camel.addRoutes(createRouteBuilder(ENDPOINT_LDIF));
        camel.start();

        Endpoint endpoint = camel.getEndpoint(ENDPOINT_START);
        Exchange exchange = endpoint.createExchange();

        // then we set the LDAP filter on the in body
        URL loc = this.getClass().getResource(""/org/apache/camel/component/ldif/ModRdn.ldif"");
        exchange.getIn().setBody(loc.toString());

        // now we send the exchange to the endpoint, and receives the response
        // from Camel
        Exchange out = template.send(endpoint, exchange);

        // Check the results
        List<String> ldifResults = defaultLdapModuleOutAssertions(out);
        assertThat(ldifResults, notNullValue());
        assertThat(ldifResults.size(), equalTo(1));
        assertThat(ldifResults.get(0), equalTo(""success""));

        // Check LDAP
        NamingEnumeration<SearchResult> searchResults = ldapContext.search(""dc=example,dc=org"", ""(uid=test*)"", SEARCH_CONTROLS);
        assertNotNull(searchResults);

        checkDN(""uid=test6"", searchResults);
    }
",non-flaky,5
175752,GoogleCloudPlatform_google-cloud-eclipse,AppEngineDeployPreferencesPanelTest.testProjectsExistThenNoProjectNotFoundError,"  @Test
  public void testProjectsExistThenNoProjectNotFoundError()
      throws ProjectRepositoryException, InterruptedException {
    when(loginService.getAccounts()).thenReturn(oneAccountSet);
    initializeProjectRepository();
    deployPanel = createPanel(false /* requireValues */);
    selectAccount(account1);
    deployPanel.latestGcpProjectQueryJob.join();
    assertThat(getProjectSelectionValidator().getSeverity(), is(IStatus.OK));
  }
",non-flaky,5
95713,togglz_togglz,EnumBasedFeatureProviderTest.shouldReturnMetaDataWhenRequestedWithOtherFeatureImplementation,"    @Test
    public void shouldReturnMetaDataWhenRequestedWithOtherFeatureImplementation() {

        FeatureProvider provider = new EnumBasedFeatureProvider(ValidFeatureEnum.class);
        FeatureMetaData metaData =
            provider.getMetaData(new OtherFeatureImpl(ValidFeatureEnum.FEATURE1.name()));
        assertThat(metaData.getLabel()).isEqualTo(""First feature"");

    }
",non-flaky,5
94777,ktuukkan_marine-api,AISMessage21ParserTest.getAidType,"    @Test
    public void getAidType() throws Exception {
        // Nav Type?
        assertEquals(1, msg.getAidType());
    }
",non-flaky,5
84624,apache_zookeeper,ClientCnxnSocketTest.setUp,"    @BeforeEach
    public void setUp() {
        ClientCnxnSocketNetty.setTestAllocator(TestByteBufAllocator.getInstance());
    }
",non-flaky,5
77660,pholser_junit-quickcheck,InstantPropertyParameterTypesTest.shouldHold,"    @Test public void missingMin() {
        public void shouldHold(
            @InRange(max = ""2012-12-31T23:59:59.999999999Z"") Instant i) {

            assertThat(
                i,
                lessThanOrEqualTo(Instant.parse(""2012-12-31T23:59:59.999999999Z"")));
        }
",non-flaky,5
91372,OpenLCB_OpenLCB_Java,StreamDataCompleteMessageTest.testCTor,"    @Test
    public void testCTor() {
        NodeID id1 = new NodeID(new byte[]{1, 1, 0, 0, 0, 4});
        NodeID id2 = new NodeID(new byte[]{1, 1, 0, 0, 4, 4});
        StreamDataCompleteMessage t = new StreamDataCompleteMessage(id1,id2,(byte)0x00,(byte)0x00);
        Assert.assertNotNull(""exists"",t);
    }
",non-flaky,5
160343,ConsenSys_teku,MetricsDataFactoryTest.shouldSerializeObjectFromPrometheusMetricsWithDefaultValues,"  @Test
  public void shouldSerializeObjectFromPrometheusMetricsWithDefaultValues()
      throws JsonProcessingException {
    when(prometheusMock.streamObservations()).thenReturn(new ArrayList<Observation>().stream());
    final MetricsDataFactory metricsDataFactory = new MetricsDataFactory(prometheusMock);

    final List<BaseMetricData> baseMetricData = metricsDataFactory.getMetricData(timeProvider);
    assertThat(baseMetricData.size()).isEqualTo(3);
    final String beaconNode = jsonProvider.objectToJSON(baseMetricData.get(0));
    final String validator = jsonProvider.objectToJSON(baseMetricData.get(1));
    final String system = jsonProvider.objectToJSON(baseMetricData.get(2));

    BeaconNodeMetricData beaconNodeDeserialized =
        jsonProvider.jsonToObject(beaconNode, BeaconNodeMetricData.class);
    ValidatorMetricData validatorDeserialized =
        jsonProvider.jsonToObject(validator, ValidatorMetricData.class);
    SystemMetricData systemDeserialized = jsonProvider.jsonToObject(system, SystemMetricData.class);

    assertThat(baseMetricData.get(0)).isInstanceOf(BeaconNodeMetricData.class);
    assertThat(baseMetricData.get(1)).isInstanceOf(ValidatorMetricData.class);
    assertThat(baseMetricData.get(2)).isInstanceOf(SystemMetricData.class);

    assertThat(baseMetricData.get(0)).isEqualTo(beaconNodeDeserialized);
    assertThat(baseMetricData.get(1)).isEqualTo(validatorDeserialized);
    assertThat(baseMetricData.get(2)).isEqualTo(systemDeserialized);

    assertThat(beaconNodeDeserialized.network_peers_connected).isNull();
    assertThat(validatorDeserialized.validator_total).isNull();
    assertThat(systemDeserialized.cpu_node_system_seconds_total).isNull();
  }
",non-flaky,5
53155,cloudfoundry_uaa,TokenPolicyTest.nullSigningKey,"    @Test(expected = IllegalArgumentException.class)
    public void nullSigningKey() throws Exception {
        TokenPolicy tokenPolicy = new TokenPolicy();
        tokenPolicy.setKeys(Collections.singletonMap(""key-id"", null));
    }
",non-flaky,5
94811,ktuukkan_marine-api,AISMessage04Test.getUtcDay,"    @Test
    public void getUtcDay() throws Exception {
        assertEquals(8, msg.getUtcDay());
    }
",non-flaky,5
293,apache_hadoop,TestWrites.testCheckCommitFromReadLargeFileUpload,"  @Test
  public void testCheckCommitFromReadLargeFileUpload() throws IOException {
    DFSClient dfsClient = Mockito.mock(DFSClient.class);
    Nfs3FileAttributes attr = new Nfs3FileAttributes();
    HdfsDataOutputStream fos = Mockito.mock(HdfsDataOutputStream.class);
    Mockito.when(fos.getPos()).thenReturn((long) 0);
    NfsConfiguration config = new NfsConfiguration();

    config.setBoolean(NfsConfigKeys.LARGE_FILE_UPLOAD, true);
    OpenFileCtx ctx = new OpenFileCtx(fos, attr, ""/dumpFilePath"", dfsClient,
        new ShellBasedIdMapping(config), false, config);

    FileHandle h = new FileHandle(1); // fake handle for ""/dumpFilePath""
    COMMIT_STATUS ret;
    WriteManager wm = new WriteManager(new ShellBasedIdMapping(config), config, false);
    assertTrue(wm.addOpenFileStream(h, ctx));
    
    // Test inactive open file context
    ctx.setActiveStatusForTest(false);
    Channel ch = Mockito.mock(Channel.class);
    ret = ctx.checkCommit(dfsClient, 0, ch, 1, attr, true);
    assertEquals( COMMIT_STATUS.COMMIT_INACTIVE_CTX, ret);
    assertEquals(Nfs3Status.NFS3_OK, wm.commitBeforeRead(dfsClient, h, 0));
    
    ctx.getPendingWritesForTest().put(new OffsetRange(10, 15),
        new WriteCtx(null, 0, 0, 0, null, null, null, 0, false, null));
    ret = ctx.checkCommit(dfsClient, 0, ch, 1, attr, true);
    assertEquals(COMMIT_STATUS.COMMIT_INACTIVE_WITH_PENDING_WRITE, ret);
    assertEquals(Nfs3Status.NFS3ERR_IO, wm.commitBeforeRead(dfsClient, h, 0));
    
    // Test request with non zero commit offset
    ctx.setActiveStatusForTest(true);
    Mockito.when(fos.getPos()).thenReturn((long) 6);
    ctx.setNextOffsetForTest((long)10);
    COMMIT_STATUS status = ctx.checkCommitInternal(5, ch, 1, attr, false);
    assertEquals(COMMIT_STATUS.COMMIT_DO_SYNC, status);
    // Do_SYNC state will be updated to FINISHED after data sync
    ret = ctx.checkCommit(dfsClient, 5, ch, 1, attr, true);
    assertEquals(COMMIT_STATUS.COMMIT_FINISHED, ret);
    assertEquals(Nfs3Status.NFS3_OK, wm.commitBeforeRead(dfsClient, h, 5));
 
    // Test request with sequential writes
    status = ctx.checkCommitInternal(9, ch, 1, attr, true);
    assertTrue(status == COMMIT_STATUS.COMMIT_SPECIAL_WAIT);
    ret = ctx.checkCommit(dfsClient, 9, ch, 1, attr, true);
    assertEquals(COMMIT_STATUS.COMMIT_SPECIAL_WAIT, ret);
    assertEquals(Nfs3Status.NFS3ERR_JUKEBOX, wm.commitBeforeRead(dfsClient, h, 9));

    // Test request with non-sequential writes
    ConcurrentNavigableMap<Long, CommitCtx> commits = ctx
        .getPendingCommitsForTest();
    assertTrue(commits.size() == 0);
    ret = ctx.checkCommit(dfsClient, 16, ch, 1, attr, true);
    assertEquals(COMMIT_STATUS.COMMIT_SPECIAL_SUCCESS, ret);
    assertEquals(0, commits.size()); // commit triggered by read doesn't wait
    assertEquals(Nfs3Status.NFS3_OK, wm.commitBeforeRead(dfsClient, h, 16));

    // Test request with zero commit offset
    // There is one pending write [10,15]
    ret = ctx.checkCommit(dfsClient, 0, ch, 1, attr, true);
    assertEquals(COMMIT_STATUS.COMMIT_SPECIAL_WAIT, ret);
    assertEquals(0, commits.size());
    assertEquals(Nfs3Status.NFS3ERR_JUKEBOX, wm.commitBeforeRead(dfsClient, h, 0));

    // Empty pending writes
    ctx.getPendingWritesForTest().remove(new OffsetRange(10, 15));
    ret = ctx.checkCommit(dfsClient, 0, ch, 1, attr, true);
    assertEquals(COMMIT_STATUS.COMMIT_SPECIAL_WAIT, ret);
    assertEquals(Nfs3Status.NFS3ERR_JUKEBOX, wm.commitBeforeRead(dfsClient, h, 0));
  }
",non-flaky,5
89356,apache_samza,TestKafkaCheckpointLogKeySerde.testForwardsCompatibility,"  @Test
  public void testForwardsCompatibility() {
    // Set the key to another value, this is for the future if we want to support multiple checkpoint keys
    // we do not want to throw in the Serdes layer, but must be validated in the CheckpointManager
    KafkaCheckpointLogKey key = new KafkaCheckpointLogKey(""checkpoint-v2"",
        new TaskName(""Partition 0""), GroupByPartitionFactory.class.getCanonicalName());
    KafkaCheckpointLogKeySerde checkpointSerde = new KafkaCheckpointLogKeySerde();

    // test that deserialize(serialize(k)) == k
    Assert.assertEquals(key, checkpointSerde.fromBytes(checkpointSerde.toBytes(key)));
  }
",non-flaky,5
98064,vert-x3_vertx-mongo-client,BulkWriteOptionsTest.testEquals,"  @Test
  public void testEquals() {
    BulkWriteOptions a = new BulkWriteOptions();
    BulkWriteOptions b = new BulkWriteOptions();
    assertEquals(a, b);

    a.setWriteOption(WriteOption.ACKNOWLEDGED);
    b.setWriteOption(WriteOption.JOURNALED);
    assertNotEquals(a, b);

    a.setWriteOption(WriteOption.MAJORITY);
    b.setWriteOption(WriteOption.MAJORITY);
    assertEquals(a, b);

    a.setOrdered(true);
    b.setOrdered(false);
    assertNotEquals(a, b);

    assertNotEquals(a, null);
  }
",non-flaky,5
38273,palantir_atlasdb,AbstractTransactionTest.testSpecialValues,"    @Test
    public void testSpecialValues() {
        String eight = ""00000000"";
        String sixteen = eight + eight;
        putDirect(""row1"", ""col1"", eight, 0);
        putDirect(""row2"", ""col1"", sixteen, 0);
        Pair<String, Long> direct1 = getDirect(""row1"", ""col1"", 1);
        assertEquals(eight, direct1.lhSide);
        Pair<String, Long> direct2 = getDirect(""row2"", ""col1"", 1);
        assertEquals(sixteen, direct2.lhSide);
    }
",non-flaky,5
98261,spotify_docker-client,PushPullIT.testPushHubPrivateImageWithAuth,"  @Test
  public void testPushHubPrivateImageWithAuth() throws Exception {
    // Push an image to a private repo on Docker Hub and check it succeeds
    final String dockerDirectory = Resources.getResource(""dockerDirectory"").getPath();
    final DockerClient client = DefaultDockerClient
        .fromEnv()
        .registryAuth(RegistryAuth.builder()
                        .username(HUB_AUTH_USERNAME)
                        .password(HUB_AUTH_PASSWORD)
                        .build())
        .build();

    client.build(Paths.get(dockerDirectory), HUB_PRIVATE_IMAGE);
    client.push(HUB_PRIVATE_IMAGE);
  }
",non-flaky,5
156067,jReddit_jReddit,RedditOAuthAgentTest.testRefreshTokenSuccess,"    @Test
    public void testRefreshTokenSuccess() throws RedditOAuthException, OAuthSystemException, OAuthProblemException {
        assertTrue(subject.refreshToken(mockRedditTokenRefreshable));
        verify(mockOAuthClient).accessToken(any(OAuthClientRequest.class));
        verify(mockRedditTokenRefreshable).refresh(null);
    }
",non-flaky,5
91473,strapdata_elassandra,ClusterApplierServiceTests.onSuccess,"    @TestLogging(""org.elasticsearch.cluster.service:WARN"") // To ensure that we log cluster state events on WARN level
    public void testLongClusterStateUpdateLogging() throws Exception {
        MockLogAppender mockAppender = new MockLogAppender();
        mockAppender.start();
        mockAppender.addExpectation(
                new MockLogAppender.UnseenEventExpectation(
                        ""test1 shouldn't see because setting is too low"",
                        clusterApplierService.getClass().getCanonicalName(),
                        Level.WARN,
                        ""*cluster state applier task [test1] took [*] above the warn threshold of *""));
        mockAppender.addExpectation(
                new MockLogAppender.SeenEventExpectation(
                        ""test2"",
                        clusterApplierService.getClass().getCanonicalName(),
                        Level.WARN,
                        ""*cluster state applier task [test2] took [32s] above the warn threshold of *""));
        mockAppender.addExpectation(
                new MockLogAppender.SeenEventExpectation(
                        ""test4"",
                        clusterApplierService.getClass().getCanonicalName(),
                        Level.WARN,
                        ""*cluster state applier task [test3] took [34s] above the warn threshold of *""));

        Logger clusterLogger = Loggers.getLogger(""org.elasticsearch.cluster.service"");
        Loggers.addAppender(clusterLogger, mockAppender);
        try {
            final CountDownLatch latch = new CountDownLatch(4);
            final CountDownLatch processedFirstTask = new CountDownLatch(1);
            clusterApplierService.currentTimeOverride = System.nanoTime();
            clusterApplierService.runOnApplierThread(""test1"",
                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(1).nanos(),
                new ClusterApplyListener() {
                    @Override
                    public void onSuccess(String source) {
                        latch.countDown();
                        processedFirstTask.countDown();
                    }
",non-flaky,5
38226,palantir_atlasdb,TextUtilsTest.testParseDate,"    @Test
    public void testParseDate()
    {
        helperTestParseDate(new Date());
    }
",non-flaky,5
95658,togglz_togglz,TestFeatureManagerTest.shouldToggleAllFeatures,"    @Test
    public void shouldToggleAllFeatures() {

        // enable
        manager.enableAll();
        assertTrue(manager.isActive(MyFeatures.ONE));
        assertTrue(manager.isActive(MyFeatures.TWO));

        // disable
        manager.disableAll();
        assertFalse(manager.isActive(MyFeatures.ONE));
        assertFalse(manager.isActive(MyFeatures.TWO));

    }
",non-flaky,5
33713,alibaba_fastjson,JSONScannerTest.isEOF1,"  @Test
  public void isEOF1() throws Throwable {

    // Arrange
    JSONScanner objectUnderTest = ((JSONScanner)Reflector.getInstance(""com.alibaba.fastjson.parser.JSONScanner""));
    objectUnderTest.hasSpecial = false;
    objectUnderTest.token = 0;
    objectUnderTest.locale = null;
    objectUnderTest.np = 0;
    objectUnderTest.features = 0;
    Reflector.setField(objectUnderTest, ""text"", null);
    objectUnderTest.calendar = null;
    objectUnderTest.matchStat = 0;
    objectUnderTest.bp = 0;
    Reflector.setField(objectUnderTest, ""len"", 0);
    objectUnderTest.stringDefaultValue = null;
    objectUnderTest.pos = 0;
    objectUnderTest.sp = 0;
    objectUnderTest.sbuf = null;
    objectUnderTest.ch = '\u001a';
    objectUnderTest.timeZone = null;
    objectUnderTest.eofPos = 0;

    // Act
    boolean retval = objectUnderTest.isEOF();

    // Assert result
    Assert.assertEquals(true, retval);

  }
",non-flaky,5
112754,hwang-pku_ormlite-core,DatabaseConnectionProxyTest.testIsTableExistsNull,"	@Test
	public void testIsTableExistsNull() throws Exception {
		DatabaseConnectionProxy proxy = new DatabaseConnectionProxy(null);
		assertFalse(proxy.isTableExists(""foo""));
		proxy.close();
	}
",non-flaky,5
170539,eclipse_jetty.project,TestDiscoveredServletContainerInitializerHolder.test,"    @Test
    public void test() throws Exception
    {
        //SCI with @HandlesTypes[Ordinary, Sample]
        SampleServletContainerInitializer sci = new SampleServletContainerInitializer();
        
        DiscoveredServletContainerInitializerHolder holder = 
            new DiscoveredServletContainerInitializerHolder(new Source(Source.Origin.ANNOTATION, sci.getClass().getName()),
            sci);

        //add the @HandlesTypes to the holder
        holder.addStartupClasses(Ordinary.class, Sample.class);
        
        //pretend scanned and discovered that ASample has the Sample annotation
        holder.addStartupClasses(ASample.class.getName());
        
        //pretend we scanned the entire class hierarchy and found:
        //   com.acme.tom and com.acme.dick both extend Ordinary
        //   ASample has subclass BSample
        Map<String, Set<String>> classMap = new HashMap<>();
        classMap.put(Ordinary.class.getName(), new HashSet(Arrays.asList(""com.acme.tom"", ""com.acme.dick"")));
        classMap.put(ASample.class.getName(), new HashSet(Arrays.asList(BSample.class.getName())));
        holder.resolveClasses(classMap);
        
        //we should now have the following classes that will be passed to the SampleServletContainerInitializer.onStartup
        String toString = holder.toString();
        assertThat(toString, containsString(""com.acme.tom""));
        assertThat(toString, containsString(""com.acme.dick""));
        assertThat(toString, containsString(ASample.class.getName()));
        assertThat(toString, containsString(BSample.class.getName()));
        assertThat(toString, containsString(""applicable=[],annotated=[]""));
    }
",non-flaky,5
97744,vojtechhabarta_typescript-generator,CustomTypeMappingTest.testGenericClassWithCustomMapping,"    @Test
    public void testGenericClassWithCustomMapping() {
        final Settings settings = TestUtils.settings();
        settings.customTypeMappings = Collections.singletonMap(""cz.habarta.typescript.generator.CustomTypeMappingTest$GenericClass<D>"", ""CustomGenericClass<D>"");
        final String output = new TypeScriptGenerator(settings).generateTypeScript(Input.from(GenericClass.class));
        Assert.assertEquals("""", output);
    }
",non-flaky,5
129,apache_hadoop,TestPathData.testWithDirStringAndConf,"@Test
public void testWithDirStringAndConf() throws Exception {
    dirString = ""d1"";
    item = new PathData(dirString, conf);
    checkPathData();
    dirString = ""d1/"";
    item = new PathData(dirString, conf);
    checkPathData();
}",test order dependency,4
99782,apache_cassandra,MessagingServiceTest.testUpdatesBackPressureOnReceiveWhenEnabledAndWithSupportedCallback,"    @Test
    public void testUpdatesBackPressureOnReceiveWhenEnabledAndWithSupportedCallback() throws UnknownHostException
    {
        MockBackPressureStrategy.MockBackPressureState backPressureState = (MockBackPressureStrategy.MockBackPressureState) messagingService.getBackPressureState(InetAddressAndPort.getByName(""127.0.0.2""));
        RequestCallback bpCallback = new BackPressureCallback();
        RequestCallback noCallback = new NoBackPressureCallback();
        boolean timeout = false;

        DatabaseDescriptor.setBackPressureEnabled(true);
        messagingService.updateBackPressureOnReceive(InetAddressAndPort.getByName(""127.0.0.2""), noCallback, timeout);
        assertFalse(backPressureState.onReceive);
        assertFalse(backPressureState.onTimeout);

        DatabaseDescriptor.setBackPressureEnabled(false);
        messagingService.updateBackPressureOnReceive(InetAddressAndPort.getByName(""127.0.0.2""), bpCallback, timeout);
        assertFalse(backPressureState.onReceive);
        assertFalse(backPressureState.onTimeout);

        DatabaseDescriptor.setBackPressureEnabled(true);
        messagingService.updateBackPressureOnReceive(InetAddressAndPort.getByName(""127.0.0.2""), bpCallback, timeout);
        assertTrue(backPressureState.onReceive);
        assertFalse(backPressureState.onTimeout);
    }
",non-flaky,5
112726,hwang-pku_ormlite-core,DatabaseConnectionProxyTest.testSetSavePointNull,"	@Test
	public void testSetSavePointNull() throws Exception {
		DatabaseConnectionProxy proxy = new DatabaseConnectionProxy(null);
		assertNull(proxy.setSavePoint(""name""));
		proxy.close();
	}
",non-flaky,5
137083,spring-projects_spring-framework,AbstractAnnotationMetadataTests.isFinalWhenFinalReturnsTrue,"	@Test
	public void isFinalWhenFinalReturnsTrue() {
		assertThat(get(TestFinalClass.class).isFinal()).isTrue();
	}
",non-flaky,5
114030,apache_struts,FileDownloadActionTest.testSanitizeInputPathShouldReturnNullForNullInput,"	@Test
	public void testSanitizeInputPathShouldReturnNullForNullInput() throws Exception {
		assertNull(fileDownloadAction.sanitizeInputPath(null));
	}
",non-flaky,5
52,dropwizard_dropwizard,07dfaed697427e208d65049f80a5d1949833b7cd.testLogbackStatusPrinterPrintStreamIsRestoredToSystemOut,"@Test
public void testLogbackStatusPrinterPrintStreamIsRestoredToSystemOut() throws Exception {
    Field field = StatusPrinter.class.getDeclaredField(""ps"");
    field.setAccessible(true);
    PrintStream out = (PrintStream) field.get(null);
    assertThat(out).isSameAs(System.out);
}",test order dependency,4
159680,liquibase_liquibase,AddUniqueConstraintExecutorTest.execute_withTablespace,"//    @Test
//    public void execute_withTablespace() throws Exception {
//        new DatabaseTestTemplate().testOnAvailableDatabases(
//                new SqlStatementDatabaseTest(null, new AddUniqueConstraintStatement(null, TABLE_NAME, COLUMN_NAME, ""uq_adduqtest"").setTablespace(TestContext.ALT_TABLESPACE)) {
//                    protected void preExecuteAssert(DatabaseSnapshotGenerator snapshot) {
//                        assertFalse(snapshot.getTable(TABLE_NAME).getColumn(COLUMN_NAME).isUnique());
//                    }
//
//                    protected void postExecuteAssert(DatabaseSnapshotGenerator snapshot) {
//                        //todo: enable snapshot and assertion when snapshot can check for unique constraints
//                        // snapshot = new DatabaseSnapshotGenerator(database);
////                assertTrue(snapshot.getTable(TABLE_NAME).getColumn(COLUMN_NAME).isUnique());
//                    }
//                });
//    }
",non-flaky,5
118704,netty_netty,SmtpResponseDecoderTest.testDecodeOneLineResponse,"    @Test
    public void testDecodeOneLineResponse() {
        EmbeddedChannel channel = newChannel();
        assertTrue(channel.writeInbound(newBuffer(""200 Ok\r\n"")));
        assertTrue(channel.finish());

        SmtpResponse response = channel.readInbound();
        assertEquals(200, response.code());
        List<CharSequence> sequences = response.details();
        assertEquals(1, sequences.size());

        assertEquals(""Ok"", sequences.get(0).toString());
        assertNull(channel.readInbound());
    }
",non-flaky,5
19518,eclipse_xtext-core,TraceRegionTest.testAnnotate_03,"	@Test
	public void testAnnotate_03() {
		TraceRegion parent = new TraceRegion(0, 4, 0, 0, true, 1, 2, 0, 0, null, newURI());
		new TraceRegion(0, 1, 0, 0, true, 3, 4, 0, 0, parent, null);
		new TraceRegion(2, 1, 0, 0, true, 5, 6, 0, 0, parent, null);
		new TraceRegion(3, 1, 0, 0, true, 7, 8, 0, 0, parent, null);
		assertEquals(""<1:2[<3:4[a]b<5:6[c]<7:8[d]]e"", parent.getAnnotatedString(""abcde""));
	}
",non-flaky,5
21200,androidx_androidx,PreferenceDataStoreTest.testGetStringWithDataStoreOnPref,"    @Test
    public void testGetStringWithDataStoreOnPref() {
        mPreference.setPreferenceDataStore(mDataStore);
        mScreen.addPreference(mPreference);

        mPreference.getString(TEST_STR);

        verify(mDataStore, atLeastOnce()).getString(eq(KEY), eq(TEST_STR));
    }
",non-flaky,5
179492,abel533_Mapper,SafeDeleteByMethodTest.testSafeDeleteByExample,"    @Test(expected = PersistenceException.class)
    public void testSafeDeleteByExample() {
        SqlSession sqlSession = getSqlSession();
        try {
            CountryMapper mapper = sqlSession.getMapper(CountryMapper.class);
            mapper.deleteByExample(new Example(Country.class));
        } finally {
            sqlSession.close();
        }
    }
",non-flaky,5
159708,liquibase_liquibase,CDILiquibaseTest.shouldRunWhenShouldRunIsTrue,"    @Test
    public void shouldRunWhenShouldRunIsTrue() {
        System.setProperty(""liquibase.shouldRun"", ""true"");
        validateRunningState(true);
    }
",non-flaky,5
112638,tbsalling_aismessages,InterrogationTest.canDecodeShortVariant,"    @Test
    public void canDecodeShortVariant() {
        AISMessage aisMessage = AISMessage.create(NMEAMessage.fromString(""!AIVDM,1,1,,A,?h3Ovk1GOPph000,2*53""));

        System.out.println(aisMessage.toString());

        assertEquals(AISMessageType.Interrogation, aisMessage.getMessageType());
        Interrogation message = (Interrogation) aisMessage;
        assertEquals(Integer.valueOf(3), message.getRepeatIndicator());
        assertEquals(MMSI.valueOf(3669708), message.getSourceMmsi());
        assertEquals(MMSI.valueOf(366969740), message.getInterrogatedMmsi1());
        assertEquals((Integer) 0, message.getType1_1());
        assertEquals((Integer) 0, message.getOffset1_1());
        assertNull(message.getType1_2());
        assertNull(message.getOffset1_2());
        assertNull(message.getInterrogatedMmsi2());
        assertNull(message.getType2_1());
        assertNull(message.getOffset2_1());
    }
",non-flaky,5
112692,hwang-pku_ormlite-core,TransactionManagerTest.call,"	@Test
	public void testTransactionManager() throws Exception {
		ConnectionSource connectionSource = createMock(ConnectionSource.class);
		DatabaseConnection conn = createMock(DatabaseConnection.class);
		expect(conn.isAutoCommitSupported()).andReturn(false);
		Savepoint savePoint = createMock(Savepoint.class);
		expect(savePoint.getSavepointName()).andReturn(""name"").anyTimes();
		expect(conn.setSavePoint(isA(String.class))).andReturn(savePoint);
		conn.commit(savePoint);
		expect(connectionSource.getDatabaseType()).andReturn(databaseType);
		expect(connectionSource.getReadWriteConnection(null)).andReturn(conn);
		expect(connectionSource.saveSpecialConnection(conn)).andReturn(true);
		connectionSource.clearSpecialConnection(conn);
		connectionSource.releaseConnection(conn);
		replay(connectionSource, conn, savePoint);
		TransactionManager tm = new TransactionManager(connectionSource);
		tm.callInTransaction(new Callable<Void>() {
			@Override
			public Void call() {
				return null;
			}
",non-flaky,5
135781,Netflix_Hystrix,CollapsedRequestSubjectTest.testSetResponseAfterException,"    @Test
    public void testSetResponseAfterException() throws InterruptedException, ExecutionException {
        CollapsedRequestSubject<String, String> cr = new CollapsedRequestSubject<String, String>(""hello"");
        Observable<String> o = cr.toObservable();
        Future<String> v = o.toBlocking().toFuture();

        cr.setException(new RuntimeException(""anException""));

        try {
            cr.setResponse(""theResponse"");
            fail(""expected IllegalState"");
        } catch (IllegalStateException e) {

        }

        try {
            v.get();
            fail(""expected exception"");
        } catch (ExecutionException e) {
            assertEquals(""anException"", e.getCause().getMessage());
        }
    }
",non-flaky,5
135077,undertow-io_undertow,CookiesTestCase.testEqualsInValueAllowedInQuotedValue,"    @Test
    public void testEqualsInValueAllowedInQuotedValue() {
        Map<String, Cookie> cookies = Cookies.parseRequestCookies(2, true, Arrays.asList(""CUSTOMER=\""WILE_E_COYOTE=THE_COYOTE\""; SHIPPING=FEDEX"" ));
        Assert.assertEquals(2, cookies.size());
        Cookie cookie = cookies.get(""CUSTOMER"");
        Assert.assertNotNull(cookie);
        Assert.assertEquals(""WILE_E_COYOTE=THE_COYOTE"", cookie.getValue());
        cookie = cookies.get(""SHIPPING"");
        Assert.assertNotNull(cookie);
        Assert.assertEquals(""FEDEX"", cookie.getValue());
    }
",non-flaky,5
113719,salesforce_reactive-grpc,UnexpectedServerErrorIntegrationTest.manyToOne,"    @Test
    public void manyToOne() {
        ReactorGreeterGrpc.ReactorGreeterStub stub = ReactorGreeterGrpc.newReactorStub(channel);
        Flux<HelloRequest> req = Flux.just(HelloRequest.getDefaultInstance());
        Mono<HelloResponse> resp = req.as(stub::sayHelloReqStream);

        StepVerifier.create(resp)
                .verifyErrorMatches(t -> t instanceof StatusRuntimeException && ((StatusRuntimeException)t).getStatus().getCode() == Status.Code.INTERNAL);
    }
",non-flaky,5
133961,CorfuDB_CorfuDB,SequencerHandlerTest.testStreamsAddressResponseDefaultAddressMap,"    @Test
    public void testStreamsAddressResponseDefaultAddressMap() {
        long defaultLogTail = 5L;
        long defaultEpoch = 10L;
        Map<UUID, StreamAddressSpace> defaultMap = getDefaultAddressMap();

        ResponseMsg response = getResponseMsg(
                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.CHECK),
                getStreamsAddressResponseMsg(defaultLogTail, defaultEpoch, defaultMap)
        );

        sequencerHandler.handleMessage(response, mockChannelHandlerContext);
        ArgumentCaptor<StreamsAddressResponse> captor = ArgumentCaptor.forClass(StreamsAddressResponse.class);
        // Verify that the correct request was completed (once) with the appropriate value,
        // and that we did not complete exceptionally.
        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));
        verify(mockClientRouter).completeRequest(eq(response.getHeader().getRequestId()), captor.capture());

        StreamsAddressResponse streamsAddressResponse = captor.getValue();
        assertEquals(defaultLogTail, streamsAddressResponse.getLogTail());
        assertEquals(defaultEpoch, streamsAddressResponse.getEpoch());
        Map<UUID, StreamAddressSpace> retMap = streamsAddressResponse.getAddressMap();
        assertEquals(retMap.size(), defaultMap.size());
        for (UUID id : defaultMap.keySet()) {
            assertEquals(defaultMap.get(id).toString(), retMap.get(id).toString());
        }
    }
",non-flaky,5
114029,apache_struts,FileDownloadActionTest.testSanitizeInputPathShouldAllowSimpleParameter,"	@Test
	public void testSanitizeInputPathShouldAllowSimpleParameter() throws Exception {
		assertEquals(""foo"", fileDownloadAction.sanitizeInputPath(""foo""));
	}
",non-flaky,5
112680,hwang-pku_ormlite-core,BaseDaoEnabledTest.testCreateNoDao,"	@Test(expected = SQLException.class)
	public void testCreateNoDao() throws Exception {
		One one = new One();
		String stuff = ""fewpfjewfew"";
		one.stuff = stuff;
		one.create();
	}
",non-flaky,5
89372,apache_samza,TestKafkaCheckpointManager.testReadMultipleCheckpointsMultipleSSP,"  @Test
  public void testReadMultipleCheckpointsMultipleSSP() throws InterruptedException {
    setupSystemFactory(config());
    KafkaCheckpointManager checkpointManager = buildKafkaCheckpointManager(true, config());
    checkpointManager.register(TASK0);
    checkpointManager.register(TASK1);

    // mock out a consumer that returns 5 checkpoint IMEs for each SSP
    int newestOffset = 5;
    int checkpointOffsetCounter = 0;
    List<List<IncomingMessageEnvelope>> pollOutputs = new ArrayList<>();
    for (int offset = 1; offset <= newestOffset; offset++) {
      pollOutputs.add(ImmutableList.of(
          // use regular offset value for INPUT_SSP0
          newCheckpointV1Envelope(TASK0, buildCheckpointV1(INPUT_SSP0, Integer.toString(offset)),
              Integer.toString(checkpointOffsetCounter++)),
          // use (offset * 2) value for INPUT_SSP1 so offsets are different from INPUT_SSP0
          newCheckpointV1Envelope(TASK1, buildCheckpointV1(INPUT_SSP1, Integer.toString(offset * 2)),
              Integer.toString(checkpointOffsetCounter++))));
    }
    setupConsumerMultiplePoll(pollOutputs);

    assertEquals(buildCheckpointV1(INPUT_SSP0, Integer.toString(newestOffset)),
        checkpointManager.readLastCheckpoint(TASK0));
    assertEquals(buildCheckpointV1(INPUT_SSP1, Integer.toString(newestOffset * 2)),
        checkpointManager.readLastCheckpoint(TASK1));
    // check expected number of polls (+1 is for the final empty poll), and the checkpoint is the newest message
    verify(this.systemConsumer, times(newestOffset + 1)).poll(ImmutableSet.of(CHECKPOINT_SSP),
        SystemConsumer.BLOCK_ON_OUTSTANDING_MESSAGES);
  }
",non-flaky,5
97749,vojtechhabarta_typescript-generator,ModelCompilerTest.testEnum,"    @Test
    public void testEnum() throws Exception {
        final Settings settings = getTestSettings();
        final Type javaType = A.class.getField(""directions"").getGenericType();
        Assert.assertEquals(""{ [index: string]: Direction }[]"", TestUtils.compileType(settings, javaType).toString());
    }
",non-flaky,5
97676,vojtechhabarta_typescript-generator,SpringTest.testUnwrappingNew,"    @Test
    public void testUnwrappingNew() {
        final Settings settings = TestUtils.settings();
        settings.outputFileType = TypeScriptFileType.implementationFile;
        settings.generateSpringApplicationClient = true;
        settings.customTypeMappings.put(""cz.habarta.typescript.generator.spring.SpringTest$Wrapper<T>"", ""T"");
        final String output = new TypeScriptGenerator(settings).generateTypeScript(Input.from(ControllerWithWrapper.class));
        Assert.assertTrue(output.contains(""getEntity(): RestResponse<string>""));
    }
",non-flaky,5
175807,GoogleCloudPlatform_google-cloud-eclipse,MessagesTest.testUrlOpenErrorDialogTitle,"  @Test
  public void testUrlOpenErrorDialogTitle() {
    assertEquals(""Error"", Messages.getString(""openurllistener.error.title""));
  }
",non-flaky,5
98273,spotify_docker-client,HostConfigTest.testJsonUnlessStopped,"  @Test
  public void testJsonUnlessStopped() throws Exception {
    final HostConfig hostConfig = objectMapper
        .readValue(fixture(""fixtures/hostConfig/restartPolicyUnlessStopped.json""),
                   HostConfig.class);
    assertThat(hostConfig.restartPolicy(), is(HostConfig.RestartPolicy.unlessStopped()));
  }
",non-flaky,5
86116,graylog2_graylog2-server,EventDefinitionFacadeTest.exportEntityWithoutScheduling,"    @Test
    public void exportEntityWithoutScheduling() {
        final ModelId id = ModelId.of(""5d4032513d2746703d1467f6"");

        when(jobDefinitionService.getByConfigField(eq(""event_definition_id""), eq(id.id())))
                .thenReturn(Optional.empty());

        final EntityDescriptor descriptor = EntityDescriptor.create(id, ModelTypes.EVENT_DEFINITION_V1);
        final EntityDescriptorIds entityDescriptorIds = EntityDescriptorIds.of(descriptor);
        final Optional<Entity> entity = facade.exportEntity(descriptor, entityDescriptorIds);
        assertThat(entity).isPresent();
        final EntityV1 entityV1 = (EntityV1) entity.get();
        final EventDefinitionEntity eventDefinitionEntity = objectMapper.convertValue(entityV1.data(),
                EventDefinitionEntity.class);
        assertThat(eventDefinitionEntity.title().asString()).isEqualTo(""title"");
        assertThat(eventDefinitionEntity.description().asString()).isEqualTo(""description"");
        assertThat(eventDefinitionEntity.config().type()).isEqualTo(AggregationEventProcessorConfigEntity.TYPE_NAME);
        assertThat(eventDefinitionEntity.isScheduled().asBoolean(ImmutableMap.of())).isFalse();
    }
",non-flaky,5
21225,androidx_androidx,PreferenceDataStoreTest.testSharedPrefNullIfWithDS,"    @Test
    public void testSharedPrefNullIfWithDS() {
        mScreen.addPreference(mPreference);

        mPreference.setPreferenceDataStore(mDataStore);

        assertNull(mPreference.getSharedPreferences());
    }
",non-flaky,5
244,kiwiproject_dropwizard-service-utilities,SystemExecutionerTest.shouldExitBeforeGivenWaitTime_WhenWaitingThreadInterrupted,"@Test
void shouldExitBeforeGivenWaitTime_WhenWaitingThreadInterrupted() {
    var executorService = Executors.newFixedThreadPool(2);
    var executionStrategy = new ExecutionStrategies.ExitFlaggingExecutionStrategy();
    var executioner = new SystemExecutioner(executionStrategy);
    var startTime = new AtomicLong();
    var executionFuture = executorService.submit(() -> {
        LOG.info(""Calling executioner with 5 second wait"");
        startTime.set(System.nanoTime());
        executioner.exit(5, TimeUnit.SECONDS);
    });
    var killerSleepTimeMillis = 100;
    var killerFuture = executorService.submit(() -> {
        LOG.info(""Sleeping for {} milliseconds..."", killerSleepTimeMillis);
        new DefaultEnvironment().sleepQuietly(killerSleepTimeMillis, TimeUnit.MILLISECONDS);
        LOG.info(""I'm awake and will now interrupt executionThread"");
        var canceled = executionFuture.cancel(true);
        LOG.info(""executionFuture was canceled? {}"", canceled);
    });
    await().atMost(ONE_SECOND).until(() -> executionFuture.isDone() && killerFuture.isDone());
    long elapsedNanos = System.nanoTime() - startTime.get();
    assertThat(executionStrategy.didExit()).describedAs(""Execution strategy exit() should have been called"").isTrue();
    assertThat(TimeUnit.NANOSECONDS.toMillis(elapsedNanos)).describedAs(""Elapsed millis must be greater than %d"", killerSleepTimeMillis).isGreaterThan(killerSleepTimeMillis);
    executorService.shutdown();
    await().atMost(ONE_SECOND).until(executorService::isShutdown);
}",time,2
94753,ktuukkan_marine-api,Latitude27Test.largeValueIsNotAvailable,"    @Test
    public void largeValueIsNotAvailable() {
        assertFalse(Latitude27.isAvailable(1+90*60*10000));
    }
",non-flaky,5
156459,apache_commons-lang,DateUtilsFragmentTest.testSecondsOfDayWithDate,"    @Test
    public void testSecondsOfDayWithDate() {
        long testresult = DateUtils.getFragmentInSeconds(aDate, Calendar.DATE);
        final long expectedValue = seconds + ((minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR))/ DateUtils.MILLIS_PER_SECOND;
        assertEquals(expectedValue, testresult);
        testresult = DateUtils.getFragmentInSeconds(aDate, Calendar.DAY_OF_YEAR);
        assertEquals(expectedValue, testresult);
    }
",non-flaky,5
118698,netty_netty,SmtpRequestEncoderTest.testEncodeHelp,"    @Test
    public void testEncodeHelp() {
        testEncode(SmtpRequests.help(null), ""HELP\r\n"");
    }
",non-flaky,5
113980,apache_struts,JakartaStreamMultiPartRequestTest.unknownContentLength,"    @Test
    public void unknownContentLength() throws IOException {
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        Mockito.when(request.getContentType()).thenReturn(""multipart/form-data; charset=utf-8; boundary=__X_BOUNDARY__"");
        Mockito.when(request.getMethod()).thenReturn(""POST"");
        Mockito.when(request.getContentLength()).thenReturn(Integer.valueOf(-1));
        StringBuilder entity = new StringBuilder();
        entity.append(""\r\n--__X_BOUNDARY__\r\n"");
        entity.append(""Content-Disposition: form-data; name=\""upload\""; filename=\""test.csv\""\r\n"");
        entity.append(""Content-Type: text/csv\r\n\r\n1,2\r\n\r\n"");
        entity.append(""--__X_BOUNDARY__\r\n"");
        entity.append(""Content-Disposition: form-data; name=\""upload2\""; filename=\""test2.csv\""\r\n"");
        entity.append(""Content-Type: text/csv\r\n\r\n3,4\r\n\r\n"");
        entity.append(""--__X_BOUNDARY__--\r\n"");
        Mockito.when(request.getInputStream()).thenReturn(new DelegatingServletInputStream(new ByteArrayInputStream(entity.toString().getBytes(StandardCharsets.UTF_8))));
        multiPart.setMaxSize(""4"");
        multiPart.parse(request, tempDir.toString());
        LocalizedMessage next = multiPart.getErrors().iterator().next();
        Assert.assertEquals(next.getTextKey(), ""struts.messages.upload.error.SizeLimitExceededException"");
    }
",non-flaky,5
179470,abel533_Mapper,DateTimeTest.testSelect3,"    @Test
    public void testSelect3() {
        SqlSession sqlSession = getSqlSession();
        try {
            TimeModel3Mapper mapper = sqlSession.getMapper(TimeModel3Mapper.class);
            List<TimeModel3> list = mapper.selectAll();
            Assert.assertEquals(2, list.size());

            Assert.assertEquals(""2018-01-01"", toDate(list.get(0).getTestDate()));
            Assert.assertEquals(""12:11:00"", toTime(list.get(0).getTestTime()));
            Assert.assertEquals(""2018-01-01 12:00:00"", toDatetime(list.get(0).getTestDatetime()));

            Assert.assertEquals(""2018-11-11"", toDate(list.get(1).getTestDate()));
            Assert.assertEquals(""01:59:11"", toTime(list.get(1).getTestTime()));
            Assert.assertEquals(""2018-02-12 17:58:12"", toDatetime(list.get(1).getTestDatetime()));
        } finally {
            sqlSession.close();
        }
    }
",non-flaky,5
21233,androidx_androidx,PreferencePersistTest.string_persist_getsStoredToSharedPrefs,"    @Test
    public void string_persist_getsStoredToSharedPrefs() {
        final String expected = ""Test"";

        boolean wasPersisted = mPreference.putString(expected);

        assertTrue(wasPersisted);
        assertEquals(expected, mSharedPref.getString(KEY, null));
    }
",non-flaky,5
177212,line_armeria,HttpClientDelegateTest.testExtractHost,"    @Test
    public void testExtractHost() {
        // additionalRequestHeaders has the highest precedence.
        assertThat(extractHost(context(HttpHeaders.of(HttpHeaderNames.AUTHORITY, ""foo"")),
                               HttpRequest.of(RequestHeaders.of(HttpMethod.GET, ""/"",
                                                                HttpHeaderNames.AUTHORITY, ""bar:8080"")),
                               Endpoint.of(""baz"", 8080))).isEqualTo(""foo"");

        // Request header
        assertThat(extractHost(context(HttpHeaders.of()),
                               HttpRequest.of(RequestHeaders.of(HttpMethod.GET, ""/"",
                                                                HttpHeaderNames.AUTHORITY, ""bar:8080"")),
                               Endpoint.of(""baz"", 8080))).isEqualTo(""bar"");

        // Endpoint.host() has the lowest precedence.
        assertThat(extractHost(context(HttpHeaders.of()),
                               HttpRequest.of(HttpMethod.GET, ""/""),
                               Endpoint.of(""baz"", 8080))).isEqualTo(""baz"");

        // IPv6 address authority
        assertThat(extractHost(context(HttpHeaders.of(HttpHeaderNames.AUTHORITY, ""[::1]:8443"")),
                               HttpRequest.of(HttpMethod.GET, ""/""),
                               Endpoint.of(""baz"", 8080))).isEqualTo(""::1"");

        // An invalid authority should be ignored.
        assertThat(extractHost(context(HttpHeaders.of(HttpHeaderNames.AUTHORITY, ""[::1"")),
                               HttpRequest.of(HttpMethod.GET, ""/""),
                               Endpoint.of(""baz"", 8080))).isEqualTo(""baz"");

        assertThat(extractHost(context(HttpHeaders.of(HttpHeaderNames.AUTHORITY, "":8080"")),
                               HttpRequest.of(HttpMethod.GET, ""/""),
                               Endpoint.of(""baz"", 8080))).isEqualTo(""baz"");

        // If additionalRequestHeader's authority is invalid but req.authority() is valid,
        // use the authority from 'req'.
        assertThat(extractHost(context(HttpHeaders.of(HttpHeaderNames.AUTHORITY, ""[::1"")),
                               HttpRequest.of(RequestHeaders.of(HttpMethod.GET, ""/"",
                                                                HttpHeaderNames.AUTHORITY, ""bar"")),
                               Endpoint.of(""baz"", 8080))).isEqualTo(""bar"");

        assertThat(extractHost(context(HttpHeaders.of(HttpHeaderNames.AUTHORITY, "":8080"")),
                               HttpRequest.of(RequestHeaders.of(HttpMethod.GET, ""/"",
                                                                HttpHeaderNames.AUTHORITY, ""bar"")),
                               Endpoint.of(""baz"", 8080))).isEqualTo(""bar"");
    }
",non-flaky,5
160358,ConsenSys_teku,SlashingProtectedIncrementalExporterTest.shouldExportSlashProtection,"  @Test
  public void shouldExportSlashProtection(@TempDir Path tempDir)
      throws IOException, URISyntaxException {
    final Path exportedFile = tempDir.resolve(""exportedFile.json"").toAbsolutePath();
    final SlashingProtectionIncrementalExporter exporter =
        new SlashingProtectionIncrementalExporter(tempDir);

    final Optional<String> error =
        exporter.readSlashProtectionFile(
            usingResourceFile(""slashProtection.yml"", tempDir), LOG::debug);
    assertThat(error).isEmpty();
    assertThat(Files.exists(exportedFile)).isFalse();
    exporter.saveToFile(exportedFile.toString(), LOG::debug);

    final String exportedData = exporter.finalise();
    final String expectedResult = resourceFileAsString(""shouldExportSlashProtection.json"");
    assertThat(exportedData).isEqualTo(expectedResult);
  }
",non-flaky,5
95683,togglz_togglz,TogglzRuleWithVariations_CalledMultipleTimes_Test.test,"    @Test
    public void test() {

        counter++;

        switch (counter) {
            case 1:
                assertEquals(""C1, F1"", false, MyFeatures.F1.isActive());
                assertEquals(""C1, F2"", false, MyFeatures.F2.isActive());
                assertEquals(""C1, F3"", false, MyFeatures.F3.isActive());
                break;

            case 2:
                assertEquals(""C2, F1"", false, MyFeatures.F1.isActive());
                assertEquals(""C2, F2"", true, MyFeatures.F2.isActive());
                assertEquals(""C2, F3"", false, MyFeatures.F3.isActive());
                break;
            case 3:
                assertEquals(""C3, F1"", false, MyFeatures.F1.isActive());
                assertEquals(""C3, F2"", false, MyFeatures.F2.isActive());
                assertEquals(""C3, F3"", true, MyFeatures.F3.isActive());
                break;

            case 4:
                assertEquals(""C4, F1"", false, MyFeatures.F1.isActive());
                assertEquals(""C4, F2"", true, MyFeatures.F2.isActive());
                assertEquals(""C4, F3"", true, MyFeatures.F3.isActive());
                break;

            default:
                fail(""Incorrect execution cound"");

        }
    }
",non-flaky,5
95711,togglz_togglz,EnumBasedFeatureProviderTest.shouldReturnCorrectListOfFeaturesForEnum,"    @Test
    public void shouldReturnCorrectListOfFeaturesForEnum() {

        FeatureProvider provider = new EnumBasedFeatureProvider(ValidFeatureEnum.class);
        assertThat(provider.getFeatures())
            .containsSequence(ValidFeatureEnum.FEATURE1, ValidFeatureEnum.FEATURE2);

    }
",non-flaky,5
135751,Netflix_Hystrix,HystrixPropertiesChainedArchaiusPropertyTest.testChainingInteger,"    @Test
    public void testChainingInteger() throws Exception {

        DynamicIntegerProperty node1 = new DynamicIntegerProperty(""node1"", 1);
        IntegerProperty node2 = new HystrixPropertiesChainedArchaiusProperty.IntegerProperty(""node2"", node1);

        HystrixPropertiesChainedArchaiusProperty.IntegerProperty node3 = new HystrixPropertiesChainedArchaiusProperty.IntegerProperty(""node3"", node2);

        assertTrue("""" + node3.get(), 1 == node3.get());

        ConfigurationManager.getConfigInstance().setProperty(""node1"", 11);
        assertTrue(11 == node3.get());

        ConfigurationManager.getConfigInstance().setProperty(""node2"", 22);
        assertTrue(22 == node3.get());

        ConfigurationManager.getConfigInstance().clearProperty(""node1"");
        assertTrue(22 == node3.get());

        ConfigurationManager.getConfigInstance().setProperty(""node3"", 33);
        assertTrue(33 == node3.get());

        ConfigurationManager.getConfigInstance().clearProperty(""node2"");
        assertTrue(33 == node3.get());

        ConfigurationManager.getConfigInstance().setProperty(""node2"", 222);
        assertTrue(33 == node3.get());

        ConfigurationManager.getConfigInstance().clearProperty(""node3"");
        assertTrue(222 == node3.get());

        ConfigurationManager.getConfigInstance().clearProperty(""node2"");
        assertTrue(1 == node3.get());

        ConfigurationManager.getConfigInstance().setProperty(""node2"", 2222);
        assertTrue(2222 == node3.get());
    }
",non-flaky,5
98213,apache_jackrabbit,ConnectionOptionsTest.testLegacyMaxConnectionsParameter,"    @Test
    public void testLegacyMaxConnectionsParameter() {
        Map<String, String> serviceParameters = new HashMap<>();
        serviceParameters.put(""org.apache.jackrabbit.spi2davex.MaxConnections"", ""30"");
        ConnectionOptions connectionOptions = ConnectionOptions.builder().maxConnections(30).build();
        Assert.assertEquals(connectionOptions, ConnectionOptions.fromServiceFactoryParameters(serviceParameters));
    }
",non-flaky,5
162689,OpenAPITools_openapi-generator,TypeHolderDefaultTest.numberItemTest,"    @Test
    public void numberItemTest() {
        // TODO: test numberItem
    }
",non-flaky,5
53170,cloudfoundry_uaa,ScimGroupTests.testDropAllMembers,"    @Test
    public void testDropAllMembers(){
        group.setMembers(Arrays.asList(member1, member2, member3));
        assertEquals(3, group.getMembers().size());
        patch.getMeta().setAttributes(new String[] {""members""});
        group.patch(patch);
        assertEquals(0, group.getMembers().size());
    }
",non-flaky,5
114026,apache_struts,DefaultJSONWriterTest.testCanSetDefaultDateFormat,"    @Test
    public void testCanSetDefaultDateFormat() throws Exception {
        SimpleDateFormat sdf = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss z"");

        SingleDateBean dateBean = new SingleDateBean();
        dateBean.setDate(sdf.parse(""2012-12-23 10:10:10 GMT""));

        JSONWriter jsonWriter = new DefaultJSONWriter();
        jsonWriter.setEnumAsBean(false);
        jsonWriter.setDateFormatter(""MM-dd-yyyy"");
        String json = jsonWriter.write(dateBean);
        assertEquals(""{\""date\"":\""12-23-2012\""}"", json);
    }
",non-flaky,5
86128,graylog2_graylog2-server,LookupTableFieldValueProviderTest.testWithMissingLookupTable,"    @Test
    public void testWithMissingLookupTable() {
        final TestEvent event = new TestEvent();
        final EventWithContext eventWithContext = EventWithContext.create(event, newMessage(ImmutableMap.of(""hello"", ""world"")));

        final LookupTableFieldValueProvider.Config config = newConfig(""test-doesntexist"", ""hello"");

        setupMocks(""test"");
        when(lookupTableFunction.lookup(""world"")).thenReturn(LookupResult.single(""lookup-world""));

        assertThatThrownBy(() -> newProvider(config).doGet(""test"", eventWithContext))
                .hasMessageContaining(""test-doesntexist"")
                .isInstanceOf(IllegalArgumentException.class);
    }
",non-flaky,5
21236,androidx_androidx,PreferencePersistTest.string_persistTwiceAndRetrieve_returnsSecondValue,"    @Test
    public void string_persistTwiceAndRetrieve_returnsSecondValue() {
        final String expected = ""Second"";

        mPreference.putString(""First"");
        mPreference.putString(expected);
        String result = mPreference.getString(""Default"");

        assertEquals(expected, result);
    }
",non-flaky,5
110832,opensource4you_astraea,ArgumentUtilTest.testLongPositive,"  @Test
  public void testLongPositive() {
    var param =
        ArgumentUtil.parseArgument(
            new FakeParameter(), new String[] {""--require"", ""require"", ""--longPositive"", ""1000""});

    Assertions.assertEquals(1000, param.longPositive);
    Assertions.assertThrows(
        ParameterException.class,
        () ->
            ArgumentUtil.parseArgument(
                new FakeParameter(), new String[] {""--require"", ""require"", ""--longPositive"", ""0""}));
  }
",non-flaky,5
175817,GoogleCloudPlatform_google-cloud-eclipse,OpenUriSelectionListenerTest.testWidgetDefaultSelected_MalformedURL,"  @Test
  public void testWidgetDefaultSelected_MalformedURL() {
    SelectionEvent selectionEvent = getEvent(MALFORMED_URL);

    new OpenUriSelectionListener(queryParameterProvider, errorHandler, browserSupport).widgetDefaultSelected(selectionEvent);
    verify(errorHandler).handle(captor.capture(), any(URI.class));
    assertThat(captor.getValue(), instanceOf(MalformedURLException.class));
  }
",non-flaky,5
112653,tbsalling_aismessages,PositionReportClassAAssignedScheduleTest.canDecode,"    @Test
    public void canDecode() {
		/*
		User ID	304911000
		Navigation Status	0	Under way using engine
		Rate of Turn (ROT)	0	Turning right at up to 708 degrees per minute or higher
		Speed Over Ground (SOG)	13.6
		Position Accuracy	1	A DGPS-quality fix with an accuracy of < 10 ms
		Longitude	-123.450533333333	West
		Latitude	37.2111266666667	North
		Course Over Ground (COG)	329.7
		True Heading (HDG)	331
		Time Stamp	7
		Reserved for regional	0	Not available (default)
		RAIM flag	0	RAIM not in use (default)
		Communication State	133392	Sync state: UTC Indirect; Slot Timeout: This was the last transmission in this slot; Slot offset: 2320
		COMMUNICATION_SYNC_STATE	1	Sync state: UTC Indirect
		COMMUNICATION_SLOT_TIMEOUT	0	Slot Timeout: This was the last transmission in this slot
		COMMUNICATION_SUB_MESSAGE	2320
		COMMUNICATION_UTC_HOUR	No value
		COMMUNICATION_UTC_MINUTE	No value
		COMMUNICATION_TIME_STAMP	No value
		COMMUNICATION_SLOT_NUMBER	No value
		COMMUNICATION_RECEIVED_STATIONS	No value
		COMMUNICATION_SLOT_OFFSET	2320
		*/

        AISMessage aisMessage = AISMessage.create(NMEAMessage.fromString(""!AIVDM,1,1,,A,24RjBV0028o:pnNEBeU<pJF>0PT@,0*3F""));

        System.out.println(aisMessage.toString());

        assertEquals(AISMessageType.PositionReportClassAAssignedSchedule, aisMessage.getMessageType());
        assertEquals((Integer) 0, aisMessage.getRepeatIndicator());
        PositionReportClassAAssignedSchedule message = (PositionReportClassAAssignedSchedule) aisMessage;
        assertEquals(MMSI.valueOf(304911000), message.getSourceMmsi());
        assertEquals(NavigationStatus.UnderwayUsingEngine, message.getNavigationStatus());
        assertEquals((Integer) 0, message.getRateOfTurn());
        assertEquals((Float) 13.6f, message.getSpeedOverGround());
        assertTrue(message.getPositionAccuracy());
        assertEquals(Float.valueOf(37.21113f), message.getLatitude());
        assertEquals((Integer) 22326676, message.getRawLatitude());
        assertEquals(Float.valueOf(-123.45053f), message.getLongitude());
        assertEquals((Integer) (-74070321), message.getRawLongitude());
        assertEquals(Float.valueOf(329.7f), message.getCourseOverGround());
        assertEquals((Integer) 3297, message.getRawCourseOverGround());
        assertEquals((Integer) 331, message.getTrueHeading());
        assertEquals((Integer) 7, message.getSecond());
        assertEquals(ManeuverIndicator.NotAvailable, message.getSpecialManeuverIndicator());
        assertFalse(message.getRaimFlag());
    }
",non-flaky,5
114011,apache_struts,StrutsTilesAnnotationProcessorTest.findAnnotationMultipleActionNameGiven,"    @Test
    public void findAnnotationMultipleActionNameGiven() {
        StrutsTilesAnnotationProcessor annotationProcessor = new StrutsTilesAnnotationProcessor();
        TilesDefinition tilesDefinition = annotationProcessor.findAnnotation(new TilesTestActionMultipleAnnotations(), ""def2"");
        Assert.assertNotNull(tilesDefinition);
        Assert.assertEquals(""def2"", tilesDefinition.name());
    }
",non-flaky,5
106635,Alluxio_alluxio,AlluxioJniFuseFileSystemTest.pathTranslation,"  @Test
  public void pathTranslation() throws Exception {
    final LoadingCache<String, AlluxioURI> resolver = mFuseFs.getPathResolverCache();

    AlluxioURI expected = new AlluxioURI(TEST_ROOT_PATH);
    AlluxioURI actual = resolver.apply(""/"");
    assertEquals(""/ should resolve to "" + expected, expected, actual);

    expected = new AlluxioURI(TEST_ROOT_PATH + ""/home/foo"");
    actual = resolver.apply(""/home/foo"");
    assertEquals(""/home/foo should resolve to "" + expected, expected, actual);
  }
",non-flaky,5
134982,undertow-io_undertow,WebsocketBasicAuthTestCase.testWrappedRequest,"    @Test
    public void testWrappedRequest() throws Exception {
        ProgramaticClientEndpoint endpoint = new ProgramaticClientEndpoint();
        ClientEndpointConfig clientEndpointConfig = ClientEndpointConfig.Builder.create().build();
        ContainerProvider.getWebSocketContainer().connectToServer(endpoint, clientEndpointConfig, new URI(""ws://"" + DefaultServer.getHostAddress(""default"") + "":"" + DefaultServer.getHostPort(""default"") + ""/servletContext/wrapper""));
        Assert.assertEquals(""wrapped"", endpoint.getResponses().poll(15, TimeUnit.SECONDS));
        endpoint.session.close();
        endpoint.closeLatch.await(10, TimeUnit.SECONDS);
    }
",non-flaky,5
135779,Netflix_Hystrix,CollapsedRequestSubjectTest.testSetException,"    @Test
    public void testSetException() throws InterruptedException, ExecutionException {
        CollapsedRequestSubject<String, String> cr = new CollapsedRequestSubject<String, String>(""hello"");
        Observable<String> o = cr.toObservable();
        Future<String> v = o.toBlocking().toFuture();

        cr.setException(new RuntimeException(""anException""));

        // fetch value
        try {
            v.get();
            fail(""expected exception"");
        } catch (ExecutionException e) {
            assertEquals(""anException"", e.getCause().getMessage());
        }
    }
",non-flaky,5
275,androidx_androidx,testOneTimeRequest_noInitialDelay,"@Test
public void testOneTimeRequest_noInitialDelay() {
    val request = OneTimeWorkRequestBuilder<TestWorker>().build();
    val task = mTaskConverter.convert(request.workSpec);
    assertEquals(task.serviceName, WorkManagerGcmService::class.java.name);
    assertEquals(task.isPersisted, false);
    assertEquals(task.isUpdateCurrent, true);
    assertEquals(task.requiredNetwork, Task.NETWORK_STATE_ANY);
    assertEquals(task.requiresCharging, false);
    assertEquals(task.windowStart, 0L);
    assertEquals(task.windowEnd, 0L + EXECUTION_WINDOW_SIZE_IN_SECONDS);
}",time,2
76730,quarkusio_quarkus,JarRunnerIT.testThatMutableFastJarWorks,"    @Test
    public void testThatMutableFastJarWorks() throws Exception {
        assertThatMutableFastJarWorks(""providers"", ""providers"");
    }
",non-flaky,5
30947,camunda-cloud_zeebe,ElasticsearchExporterAuthenticationIT.shouldExportRecords,"  @Test
  public void shouldExportRecords() {
    // given
    elasticConfigurator.accept(elastic);
    elastic.start();

    // given
    configuration = getDefaultConfiguration();
    exporterConfigurator.accept(configuration);

    // when
    exporterBrokerRule.configure(""es"", ElasticsearchExporter.class, configuration);
    exporterBrokerRule.start();
    exporterBrokerRule.performSampleWorkload();

    // then

    // assert index settings for all created indices
    esClient = createElasticsearchClient(configuration);
    assertIndexSettings();

    // assert all records which where recorded during the tests where exported
    exporterBrokerRule.visitExportedRecords(
        r -> {
          if (configuration.shouldIndexRecord(r)) {
            assertRecordExported(r);
          }
        });
  }
",non-flaky,5
98069,vert-x3_vertx-mongo-client,FindOptionsTest.testDefaultOptionsJson,"  @Test
  public void testDefaultOptionsJson() {
    FindOptions options = new FindOptions(new JsonObject());
    FindOptions def = new FindOptions();
    assertEquals(def.getFields(), options.getFields());
    assertEquals(def.getSort(), options.getSort());
    assertEquals(def.getLimit(), options.getLimit());
    assertEquals(def.getSkip(), options.getSkip());
  }
",non-flaky,5
159656,liquibase_liquibase,AbstractIntegrationTest.testRollbackToChange,"    @Test
    public void testRollbackToChange() throws Exception {
        assumeNotNull(this.getDatabase());

        Liquibase liquibase = createLiquibase(rollbackChangeLog);
        wipeDatabase();

        liquibase = createLiquibase(rollbackChangeLog);
        liquibase.update(this.contexts);

        liquibase = createLiquibase(rollbackChangeLog);
        liquibase.rollback(8, this.contexts);

        liquibase.tag(""testRollbackToChange"");

        liquibase = createLiquibase(rollbackChangeLog);
        liquibase.update(this.contexts);

        liquibase = createLiquibase(rollbackChangeLog);
        liquibase.rollback(""testRollbackToChange"", this.contexts);
    }
",non-flaky,5
94602,square_okhttp,OkUrlFactoryTest.setInstanceFollowRedirectsFalse,"  @Test
  public void setInstanceFollowRedirectsFalse() throws Exception {
    server.enqueue(new MockResponse()
        .setResponseCode(302)
        .addHeader(""Location: /b"")
        .setBody(""A""));
    server.enqueue(new MockResponse()
        .setBody(""B""));

    HttpURLConnection connection = factory.open(server.url(""/a"").url());
    connection.setInstanceFollowRedirects(false);
    assertResponseBody(connection, ""A"");
    assertResponseCode(connection, 302);
  }
",non-flaky,5
59572,looly_hutool,CronPatternTest.lastTest,"	@Test
	public void lastTest() {
		// æ¯ææåä¸å¤©çä»»ææ¶é´
		CronPattern pattern = new CronPattern(""* * * L * ?"");
		assertMatch(pattern, ""2017-07-31 04:20:00"");
		assertMatch(pattern, ""2017-02-28 04:20:00"");

		// æåä¸ä¸ªæçä»»ææ¶é´
		pattern = new CronPattern(""* * * * L ?"");
		assertMatch(pattern, ""2017-12-02 04:20:00"");

		// ä»»æå¤©çæåæ¶é´
		pattern = new CronPattern(""L L L * * ?"");
		assertMatch(pattern, ""2017-12-02 23:59:59"");
	}
",non-flaky,5
19424,eclipse_xtext-core,QualifiedNameTest.apply,"	@Test public void testWrapper() throws Exception {
			public String apply(String from) {
				return from;
			}
",non-flaky,5
113971,apache_struts,RequiredFieldValidatorTest.testNullObject,"    @Test
    public void testNullObject() throws Exception {
        // given
        RequiredFieldValidator rfv = container.inject(RequiredFieldValidator.class);
        rfv.setValueStack(ActionContext.getContext().getValueStack());
        rfv.setFieldName(""stringValue"");
        rfv.setDefaultMessage(""${fieldName} field is required!"");
        ValidationAction action = new ValidationAction();
        DummyValidatorContext context = new DummyValidatorContext(action, container.getInstance(TextProviderFactory.class));
        rfv.setValidatorContext(context);

        // when
        rfv.validate(action);

        // then
        assertTrue(context.hasFieldErrors());
        assertEquals(1, context.getFieldErrors().size());
        assertNotNull(context.getFieldErrors().get(""stringValue""));
        assertEquals(""stringValue field is required!"", context.getFieldErrors().get(""stringValue"").get(0));
    }
",non-flaky,5
76998,Tencent_Firestorm,PartitionBalanceCoordinatorGrpcTest.getShuffleAssignmentsTest,"  @Test
  public void getShuffleAssignmentsTest() throws Exception {
    CoordinatorTestUtils.waitForRegister(coordinatorClient, 3);
    RssGetShuffleAssignmentsRequest request = new RssGetShuffleAssignmentsRequest(
        ""app1"",
        1,
        1,
        1,
        1,
        Sets.newHashSet(Constants.SHUFFLE_SERVER_VERSION));
    RssGetShuffleAssignmentsResponse response = coordinatorClient.getShuffleAssignments(request);
    assertEquals(1, response.getPartitionToServers().size());
    for (Map.Entry<Integer, List<ShuffleServerInfo>> entry : response.getPartitionToServers().entrySet()) {
      assertEquals(1, entry.getValue().size());
      assertEquals(SHUFFLE_SERVER_PORT + 1, entry.getValue().get(0).getPort());
    }
    request = new RssGetShuffleAssignmentsRequest(
        ""app1"",
        2,
        1,
        1,
        1,
        Sets.newHashSet(Constants.SHUFFLE_SERVER_VERSION));
    response = coordinatorClient.getShuffleAssignments(request);
    assertEquals(1, response.getPartitionToServers().size());
    for (Map.Entry<Integer, List<ShuffleServerInfo>> entry : response.getPartitionToServers().entrySet()) {
      assertEquals(1, entry.getValue().size());
      assertEquals(SHUFFLE_SERVER_PORT + 1, entry.getValue().get(0).getPort());
    }
    request = new RssGetShuffleAssignmentsRequest(
        ""app1"",
        2,
        1,
        1,
        1,
        Sets.newHashSet(Constants.SHUFFLE_SERVER_VERSION));
    response = coordinatorClient.getShuffleAssignments(request);
    assertEquals(1, response.getPartitionToServers().size());
    for (Map.Entry<Integer, List<ShuffleServerInfo>> entry : response.getPartitionToServers().entrySet()) {
      assertEquals(1, entry.getValue().size());
      assertEquals(SHUFFLE_SERVER_PORT, entry.getValue().get(0).getPort());
    }
  }
",non-flaky,5
98224,apache_jackrabbit,CreateRepositoryTest.createRepositories,"    @Test
    public void createRepositories() throws Exception {
        doCreateRepositories(""jackrabbit-2.1"");
    }
",non-flaky,5
160365,ConsenSys_teku,SlashingProtectionImporterTest.shouldFailIfMetadataNotPresent,"  @Test
  public void shouldFailIfMetadataNotPresent(@TempDir final Path tempDir)
      throws IOException, URISyntaxException {
    final String errorString = loadAndGetErrorText(""signedBlock.json"", tempDir);
    assertThat(errorString).contains(""does not appear to have metadata"");
  }
",non-flaky,5
175748,GoogleCloudPlatform_google-cloud-eclipse,AppEngineDeployPreferencesPanelTest.testUncheckStopPreviousVersionButtonWhenDisabled,"  @Test
  public void testUncheckStopPreviousVersionButtonWhenDisabled() {
    deployPanel = createPanel(true /* requireValues */);

    Button promoteButton = getButtonWithText(""Promote the deployed version to receive all traffic"");
    Button stopButton = getButtonWithText(""Stop previous version"");
    SWTBotCheckBox promote = new SWTBotCheckBox(promoteButton);
    SWTBotCheckBox stop = new SWTBotCheckBox(stopButton);

    // Initially, everything is checked and enabled.
    assertTrue(promoteButton.getSelection());
    assertTrue(stopButton.getSelection());
    assertTrue(stopButton.getEnabled());

    promote.click();
    assertFalse(promoteButton.getSelection());
    assertFalse(stopButton.getSelection());
    assertFalse(stopButton.getEnabled());

    promote.click();
    assertTrue(promoteButton.getSelection());
    assertTrue(stopButton.getSelection());
    assertTrue(stopButton.getEnabled());

    stop.click();
    assertTrue(promoteButton.getSelection());
    assertFalse(stopButton.getSelection());
    assertTrue(stopButton.getEnabled());

    promote.click();
    assertFalse(promoteButton.getSelection());
    assertFalse(stopButton.getSelection());
    assertFalse(stopButton.getEnabled());

    promote.click();
    assertTrue(promoteButton.getSelection());
    assertFalse(stopButton.getSelection());
    assertTrue(stopButton.getEnabled());
  }
",non-flaky,5
76970,Tencent_Firestorm,ArgumentsTest.argEmptyTest,"  @Test
  public void argEmptyTest() {
    String[] args = new String[0];
    Arguments arguments = new Arguments();
    CommandLine commandLine = new CommandLine(arguments);
    commandLine.parseArgs(args);
    assertNull(arguments.getConfigFile());
  }
",non-flaky,5
317,apache_hadoop,TestRpcProgramNfs3.testPathconf,"  @Test(timeout = 60000)
  public void testPathconf() throws Exception {
    HdfsFileStatus status = nn.getRpcServer().getFileInfo(""/tmp/bar"");
    long dirId = status.getFileId();
    int namenodeId = Nfs3Utils.getNamenodeId(config);
    FileHandle handle = new FileHandle(dirId, namenodeId);
    XDR xdr_req = new XDR();
    PATHCONF3Request req = new PATHCONF3Request(handle);
    req.serialize(xdr_req);
    
    // Attempt by an unpriviledged user should fail.
    PATHCONF3Response response1 = nfsd.pathconf(xdr_req.asReadOnlyWrap(),
        securityHandlerUnpriviledged,
        new InetSocketAddress(""localhost"", 1234));
    assertEquals(""Incorrect return code:"", Nfs3Status.NFS3ERR_ACCES,
        response1.getStatus());

    // Attempt by a priviledged user should pass.
    PATHCONF3Response response2 = nfsd.pathconf(xdr_req.asReadOnlyWrap(),
        securityHandler, new InetSocketAddress(""localhost"", 1234));
    assertEquals(""Incorrect return code:"", Nfs3Status.NFS3_OK,
        response2.getStatus());
  }
",non-flaky,5
99755,apache_cassandra,AsyncStreamingInputPlusTest.consumeUntil_SingleBuffer_AllBytes_HappyPath,"    @Test
    public void consumeUntil_SingleBuffer_AllBytes_HappyPath() throws IOException
    {
        consumeUntilTestCycle(1, 8, 0, 8);
    }
",non-flaky,5
21195,androidx_androidx,PreferenceDataStoreTest.testDataStoresHierarchy,"    @Test
    public void testDataStoresHierarchy() {
        mPreference.setPreferenceDataStore(mDataStore);
        PreferenceDataStore secondaryDataStore = mock(PreferenceDataStore.class,
                Mockito.CALLS_REAL_METHODS);
        mManager.setPreferenceDataStore(secondaryDataStore);
        mScreen.addPreference(mPreference);

        mPreference.putString(TEST_STR);

        // Check that the Preference returns the correct data store.
        assertEquals(mDataStore, mPreference.getPreferenceDataStore());

        // Check that the secondary data store assigned to the manager was NOT used.
        verifyZeroInteractions(secondaryDataStore);

        // Check that the primary data store assigned directly to the preference was used.
        verify(mDataStore, atLeastOnce()).putString(eq(KEY), anyString());
    }
",non-flaky,5
77496,dropwizard_dropwizard,AuthBaseTest.setUp,"    @BeforeEach
    public void setUp() throws Exception {
        super.setUp();
    }
",non-flaky,5
94780,ktuukkan_marine-api,AISMessage21ParserTest.getLongitudeInDegrees,"    @Test
    public void getLongitudeInDegrees() throws Exception {
        assertEquals(145.181, msg.getLongitudeInDegrees(), 0.001);
    }
",non-flaky,5
114059,aws_aws-sdk-java-v2,EnhancedTypeTest.equalityIsBasedOnInnerEquality,"    @Test
    public void equalityIsBasedOnInnerEquality() {
        verifyEquals(EnhancedType.of(String.class), EnhancedType.of(String.class));
        verifyNotEquals(EnhancedType.of(String.class), EnhancedType.of(Integer.class));

        verifyEquals(new EnhancedType<Map<String, List<String>>>(){}, new EnhancedType<Map<String, List<String>>>(){});
        verifyNotEquals(new EnhancedType<Map<String, List<String>>>(){}, new EnhancedType<Map<String,
            List<Integer>>>(){});

        TableSchema<String> tableSchema = StaticTableSchema.builder(String.class).build();

        verifyNotEquals(EnhancedType.documentOf(String.class,
                                             tableSchema,
                                             b -> b.ignoreNulls(false)), EnhancedType.documentOf(String.class,
                                                                                                 tableSchema,
                                                                                                 b -> b.ignoreNulls(true)));
        verifyEquals(EnhancedType.documentOf(String.class,
                                                tableSchema,
                                                b -> b.ignoreNulls(false).preserveEmptyObject(true)),
                        EnhancedType.documentOf(String.class,
                                                tableSchema,
                                                b -> b.ignoreNulls(false).preserveEmptyObject(true)));
    }
",non-flaky,5
91376,OpenLCB_OpenLCB_Java,VersionOutOfDateExceptionTest.testCTor,"    @Test
    public void testCTor() {
        Assume.assumeFalse(GraphicsEnvironment.isHeadless());
        VersionOutOfDateException t = new VersionOutOfDateException();
        Assert.assertNotNull(""exists"",t);
    }
",non-flaky,5
312,androidx_androidx,testPredictiveLayoutAdd2,"@Test
public void testPredictiveLayoutAdd2() throws Throwable {
    preparePredictiveLayout();
    mActivityTestRule.runOnUiThread(new Runnable() {
        @Override
        public void run() {
            mActivity.addItems(50, new int[]{300, 300, 300, 300});
        }
    });
    waitForItemAnimationStart();
    waitForItemAnimation(5000);
    assertEquals(54, mGridView.getSelectedPosition());
    assertEquals(RecyclerView.SCROLL_STATE_IDLE, mGridView.getScrollState());
}",async wait,0
20989,NationalSecurityAgency_timely,QueryResponseTest.testOneResponse,"    @Test
    public void testOneResponse() throws Exception {
        QueryResponse r = new QueryResponse();
        r.setMetric(""sys.cpu.user"");
        r.putTag(""host"", ""localhost"");
        r.putTag(""rack"", ""r1"");
        r.putDps(""1234567890"", 4.5);
        r.putDps(""1234567900"", 3.5);
        r.putDps(""1234567910"", 2.5);
        String result = JsonUtil.getObjectMapper().writeValueAsString(Collections.singletonList(r));
        String expected = ""[{\""metric\"":\""sys.cpu.user\"",\""tags\"":{\""rack\"":\""r1\"",\""host\"":\""localhost\""},\""aggregatedTags\"":[],\""dps\"":{\""1234567890\"":4.5,\""1234567900\"":3.5,\""1234567910\"":2.5}}]"";
        Assert.assertEquals(expected, result);
    }
",non-flaky,5
20948,NationalSecurityAgency_timely,RateIteratorTest.testRateWithTimeJitter,"    @Test
    public void testRateWithTimeJitter() throws Exception {
        table.clear();
        Random r = new Random(111131131L);
        long ts = System.currentTimeMillis();
        for (int i = 1; i <= 100; i++) {
            ts += 1000 + r.nextInt(100);
            Metric m = new Metric(""sys.cpu.user"", ts, i * 1.0D, tags);
            byte[] row = MetricAdapter.encodeRowKey(m);
            Key k = new Key(row, tags.get(0).join().getBytes(StandardCharsets.UTF_8),
                    MetricAdapter.encodeColQual(ts, """"), new byte[0], ts);
            Value v = new Value(MetricAdapter.encodeValue(m.getValue().getMeasure()));
            table.put(k, v);
        }

        SortedMapIterator source = new SortedMapIterator(table);
        source.seek(new Range(), EMPTY_COL_FAMS, true);
        long prevTs = -1L;
        Double prevValue = null;
        List<Double> expected = new ArrayList<>();
        while (source.hasTop()) {
            Key k = source.getTopKey();
            Value v = source.getTopValue();
            if (prevTs != -1L) {
                Double thisValue = MetricAdapter.decodeValue(v.get());
                expected.add((thisValue + (prevValue * -1)) / (k.getTimestamp() - prevTs));
            }
            prevTs = k.getTimestamp();
            prevValue = MetricAdapter.decodeValue(v.get());
            source.next();
        }

        assertEquals(99, expected.size());
        source = new SortedMapIterator(table);
        RateIterator iter = new RateIterator();
        IteratorSetting settings = new IteratorSetting(100, RateIterator.class);
        iter.init(source, settings.getOptions(), SCAN_IE);
        iter.seek(new Range(), EMPTY_COL_FAMS, true);
        for (int i = 0; i < 99; i++) {
            assertTrue(iter.hasTop());
            assertEquals(expected.get(i), MetricAdapter.decodeValue(iter.getTopValue().get()), 0.0D);
            iter.next();
        }
        assertFalse(iter.hasTop());
    }
",non-flaky,5
137123,spring-projects_spring-framework,AbstractMethodMetadataTests.isStaticWhenNotStaticReturnsFalse,"	@Test
	public void isStaticWhenNotStaticReturnsFalse() {
		assertThat(getTagged(WithMethod.class).isStatic()).isFalse();
	}
",non-flaky,5
86040,graylog2_graylog2-server,NotificationDtoTest.testValidateWithEmptyConfig,"    @Test
    public void testValidateWithEmptyConfig() {
        final NotificationDto invalidNotification = NotificationDto.builder()
                .title(""Foo"")
                .description("""")
                .config(new EventNotificationConfig.FallbackNotificationConfig())
                .build();
        final ValidationResult validationResult = invalidNotification.validate();
        assertThat(validationResult.failed()).isTrue();
        assertThat(validationResult.getErrors()).containsOnlyKeys(""config"");
    }
",non-flaky,5
33846,apache_camel,FhirTransactionIT.testWithResources,"    @Test
    public void testWithResources() throws Exception {
        Patient oscar = new Patient().addName(new HumanName().addGiven(""Oscar"").setFamily(""Peterson""));
        Patient bobbyHebb = new Patient().addName(new HumanName().addGiven(""Bobby"").setFamily(""Hebb""));
        List<IBaseResource> patients = new ArrayList<>(2);
        patients.add(oscar);
        patients.add(bobbyHebb);

        // using java.util.List message body for single parameter ""resources""
        List<IBaseResource> result = requestBody(""direct://WITH_RESOURCES"", patients);

        assertNotNull(result, ""withResources result"");
        LOG.debug(""withResources: "" + result);
        assertEquals(2, result.size());
    }
",non-flaky,5
26916,wildfly_wildfly,MailTransformersTestCase.testTransformerEAP700,"    @Test
    public void testTransformerEAP700() throws Exception {
        testTransformation(ModelTestControllerVersion.EAP_7_0_0, MODEL_VERSION_EAP70);
    }
",non-flaky,5
170541,eclipse_jetty.project,TestServletAnnotations.testWebServletAnnotationOverrideDefault,"    @Test
    public void testWebServletAnnotationOverrideDefault() throws Exception
    {
        //if the existing servlet mapping TO A DIFFERENT SERVLET IS from a default descriptor we
        //DO allow the annotation to replace the mapping.

        WebAppContext wac = new WebAppContext();
        ServletHolder defaultServlet = new ServletHolder();
        defaultServlet.setClassName(""org.eclipse.jetty.servlet.DefaultServlet"");
        defaultServlet.setName(""default"");
        wac.getServletHandler().addServlet(defaultServlet);

        ServletMapping m = new ServletMapping();
        m.setPathSpec(""/"");
        m.setServletName(""default"");
        m.setFromDefaultDescriptor(true);  //this mapping will be from a default descriptor
        wac.getServletHandler().addServletMapping(m);

        WebServletAnnotation annotation = new WebServletAnnotation(wac, ""org.eclipse.jetty.annotations.ServletD"", null);
        annotation.apply();

        //test that as the original servlet mapping had only 1 pathspec, then the whole
        //servlet mapping should be deleted as that pathspec will be remapped to the DServlet
        ServletMapping[] resultMappings = wac.getServletHandler().getServletMappings();
        assertNotNull(resultMappings);
        assertEquals(1, resultMappings.length);
        assertEquals(2, resultMappings[0].getPathSpecs().length);
        resultMappings[0].getServletName().equals(""DServlet"");
        for (String s : resultMappings[0].getPathSpecs())
        {
            assertThat(s, anyOf(is(""/""), is(""/bah/*"")));
        }
    }
",non-flaky,5
84569,apache_zookeeper,DistributedQueueTest.testElement4,"    @Test
    public void testElement4() throws Exception {
        createNremoveMelementTest(""/testElement4"", 1000, 1000 - 1);
    }
",non-flaky,5
98045,vert-x3_vertx-mongo-client,RefCountTest.testSharedDefault,"  @Test
  public void testSharedDefault() throws Exception {
    LocalMap<String, Object> map = getLocalMap();
    JsonObject config = getConfig();
    MongoClient client1 = MongoClient.createShared(vertx, config);
    assertEquals(1, map.size());
    MongoClient client2 = MongoClient.createShared(vertx, config);
    assertEquals(1, map.size());
    MongoClient client3 = MongoClient.createShared(vertx, config);
    assertEquals(1, map.size());
    client1.close();
    assertEquals(1, map.size());
    client2.close();
    assertEquals(1, map.size());
    client3.close();
    assertEquals(0, map.size());
    assertNotSame(map, getLocalMap());
  }
",non-flaky,5
98352,Kong_unirest-java,JsonObjectMapperTest.getDate,"    @Test
        public Date getDate() {
            return date;
        }
",non-flaky,5
86112,graylog2_graylog2-server,NotificationFacadeTest.createExcerpt,"    @Test
    public void createExcerpt() {
        final Optional<NotificationDto> notificationDto = notificationService.get(
                ""5d4d33753d27460ad18e0c4d"");
        assertThat(notificationDto).isPresent();
        final EntityExcerpt excerpt = facade.createExcerpt(notificationDto.get());
        assertThat(excerpt.title()).isEqualTo(""title"");
        assertThat(excerpt.id()).isEqualTo(ModelId.of(""5d4d33753d27460ad18e0c4d""));
        assertThat(excerpt.type()).isEqualTo(ModelTypes.NOTIFICATION_V1);
    }
",non-flaky,5
156086,soot-oss_soot,MultiCallGraphVirtualEdgesTest.TestAsyncTaskBasicCG,"    @Test
    public void TestAsyncTaskBasicCG() {
        prepareTarget(methodSigFromComponents(TARGET_CLASS, TARGET_METHOD), TARGET_CLASS);
        boolean found = false;
        for (Edge edge : Scene.v().getCallGraph()) {
            //String sig = edge.getTgt().method().toString();
            System.out.println(edge);
            String sig = edge.getTgt().method().toString();

            if (edge.toString().contains(""AHelper"") && edge.toString().contains(""handle""))
                found = true;
        }

        //Assert.assertTrue(found);
    }
",non-flaky,5
112111,apache_shardingsphere-elasticjob,StatisticRdbRepositoryTest.assertAddJobRunningStatistics,"    @Test
    public void assertAddJobRunningStatistics() {
        assertTrue(repository.add(new TaskRunningStatistics(100, new Date())));
    }
",non-flaky,5
177996,aosp-mirror_platform_frameworks_support,GuidedStepFragmentTest.answer,"    @Test
    public void finishGuidedStepFragment_finishes_fragments() throws Throwable {
        final String firstFragmentName = generateMethodTestName(""first"");
        GuidedStepTestFragment.Provider first = mockProvider(firstFragmentName);
        doAnswer(new Answer<Void>() {
            public Void answer(InvocationOnMock invocation) {
                List actions = (List) invocation.getArguments()[0];
                actions.add(new GuidedAction.Builder().id(1001).title(""Finish fragments"").build());
                return null;
            }
",non-flaky,5
97695,vojtechhabarta_typescript-generator,TaggedUnionsTest.testWithTypeParameter,"    @Test
    public void testWithTypeParameter() {
        final Settings settings = TestUtils.settings();
        final String output = new TypeScriptGenerator(settings).generateTypeScript(Input.from(Earth.class));
        Assert.assertTrue(output.contains(""EngineUnion""));
        Assert.assertTrue(output.contains(""VehiculeUnion<M>""));
    }
",non-flaky,5
77434,opensearch-project_OpenSearch,UpdateShasTaskTests.whenDependencyAndWrongShaExistsThenShouldNotOverwriteShaFile,"    @Test
    public void whenDependencyAndWrongShaExistsThenShouldNotOverwriteShaFile() throws IOException, NoSuchAlgorithmException {
        project.getDependencies().add(""compile"", dependency);

        File groovyJar = task.getParentTask().getDependencies().getFiles().iterator().next();
        String groovyShaName = groovyJar.getName() + "".sha1"";

        File groovySha = createFileIn(getLicensesDir(project), groovyShaName, ""content"");
        task.updateShas();

        assertThat(FileUtils.readFileToString(groovySha), equalTo(""content""));
    }
",non-flaky,5
99779,apache_cassandra,MessagingServiceTest.testQueueWaitLatency,"    @Test
    public void testQueueWaitLatency()
    {
        int latency = 100;
        Verb verb = Verb.MUTATION_REQ;

        Map<Verb, Timer> queueWaitLatency = MessagingService.instance().metrics.internalLatency;
        MessagingService.instance().metrics.recordInternalLatency(verb, latency, MILLISECONDS);
        assertEquals(1, queueWaitLatency.get(verb).getCount());
        long expectedBucket = bucketOffsets[Math.abs(Arrays.binarySearch(bucketOffsets, MILLISECONDS.toNanos(latency))) - 1];
        assertEquals(expectedBucket, queueWaitLatency.get(verb).getSnapshot().getMax());
    }
",non-flaky,5
26790,MundaneImmortal_pair-distribution-app,DayPairsHelperTest.testBuildPairsWeightFromPastPairing,"	@Test
	public void testBuildPairsWeightFromPastPairing() {
		PairCombinations pairs = getPairsList();
		List<Developer> devs = getStandardDevs();

		Map<Pair, Integer> pairsWeight = subject.buildPairsWeightFromPastPairing(pairs, devs);

		assertThat(pairsWeight.get(new Pair(Arrays.asList(new Developer(""dev1""), new Developer(""dev2"")))), is(2));
		assertThat(pairsWeight.get(new Pair(Arrays.asList(new Developer(""dev1""), new Developer(""dev3"")))), is(0));
		assertThat(pairsWeight.get(new Pair(Arrays.asList(new Developer(""dev1""), new Developer(""dev4"")))), is(1));
		assertThat(pairsWeight.get(new Pair(Arrays.asList(new Developer(""dev2""), new Developer(""dev3"")))), is(1));
		assertThat(pairsWeight.get(new Pair(Arrays.asList(new Developer(""dev2""), new Developer(""dev4"")))), is(0));
		assertThat(pairsWeight.get(new Pair(Arrays.asList(new Developer(""dev3""), new Developer(""dev4"")))), is(2));
	}
",non-flaky,5
159636,liquibase_liquibase,OracleIntegrationTest.smartDataLoad,"    @Test
    public void smartDataLoad() throws Exception {
        assumeNotNull(this.getDatabase());

        Liquibase liquibase = createLiquibase(""changelogs/common/smartDataLoad.changelog.xml"");
        clearDatabase();

        try {
            liquibase.update(this.contexts);
        } catch (ValidationFailedException e) {
            e.printDescriptiveError(System.out);
            throw e;
        }

        // check that the automatically rollback now works too
        try {
            liquibase.rollback( new Date(0),this.contexts);
        } catch (ValidationFailedException e) {
            e.printDescriptiveError(System.out);
            throw e;
        }
    }
",non-flaky,5
156393,apache_commons-lang,StringUtilsEmptyBlankTest.testIsBlank,"    @Test
    public void testIsBlank() {
        assertTrue(StringUtils.isBlank(null));
        assertTrue(StringUtils.isBlank(""""));
        assertTrue(StringUtils.isBlank(StringUtilsTest.WHITESPACE));
        assertFalse(StringUtils.isBlank(""foo""));
        assertFalse(StringUtils.isBlank(""  foo  ""));
    }
",non-flaky,5
95646,togglz_togglz,DeviceActivationStrategyTest.shouldBeActiveForTablet,"    @Test
    public void shouldBeActiveForTablet() throws Exception {
        String[] tabletOn = new String[]{""NO"", ""YES"", ""NO""};
        assertThat(requestFrom(NORMAL)).isInactiveWithParams(tabletOn);
        cleanup();
        assertThat(requestFrom(TABLET)).isActiveWithParams(tabletOn);
        cleanup();
        assertThat(requestFrom(MOBILE)).isInactiveWithParams(tabletOn);
        cleanup();
    }
",non-flaky,5
177201,line_armeria,SpringTomcatApplicationItTest.verifySingleConnector,"    @Test
    public void verifySingleConnector() {
        // Relevant to Tomcat 9.0
        assertThat(applicationContext).isInstanceOf(WebServerApplicationContext.class);
        final WebServer webServer = ((WebServerApplicationContext) applicationContext).getWebServer();
        assertThat(webServer).isInstanceOf(TomcatWebServer.class);
        assertThat(((TomcatWebServer) webServer).getTomcat()
                                                .getEngine()
                                                .getService()
                                                .findConnectors()).hasSize(1);
    }
",non-flaky,5
178004,aosp-mirror_platform_frameworks_support,BrowseSupportFragmentTest.testPressRightBeforeMainFragmentCreated,"    @Test
    public void testPressRightBeforeMainFragmentCreated() throws Throwable {
        final long dataLoadingDelay = 1000;
        Intent intent = new Intent();
        intent.putExtra(BrowseSupportFragmentTestActivity.EXTRA_LOAD_DATA_DELAY, dataLoadingDelay);
        intent.putExtra(BrowseSupportFragmentTestActivity.EXTRA_ADD_TO_BACKSTACK , false);
        mActivity = activityTestRule.launchActivity(intent);

        assertNull(mActivity.getBrowseTestSupportFragment().getMainFragment());
        sendKeys(KeyEvent.KEYCODE_DPAD_RIGHT);
    }
",non-flaky,5
77543,dropwizard_dropwizard,ResourceTestRuleTest.testGetPersonWithQueryParam,"    @Test
    public void testGetPersonWithQueryParam() {
        // Test to ensure that the dropwizard validator is registered so that
        // it can validate the ""ind"" IntParam.
        assertThat(resourceTestRule.target(""/person/blah/index"")
                .queryParam(""ind"", 0).request()
                .get(Person.class))
                .isEqualTo(person);
        verify(peopleStore).fetchPerson(""blah"");
    }
",non-flaky,5
159689,liquibase_liquibase,RenameColumnExecuteTest.noSchema,"    @Test
    public void noSchema() throws Exception {
        this.statementUnderTest = new RenameColumnStatement(null, null, TABLE_NAME, COLUMN_NAME, ""new_name"", ""int"");

        assertCorrect(""rename column table_name.column_name to new_name"", DerbyDatabase.class, InformixDatabase.class);
        assertCorrect(""alter table table_name alter column column_name rename to new_name"", H2Database.class, HsqlDatabase.class);
        assertCorrect(""alter table table_name alter column column_name to new_name"", FirebirdDatabase.class);
        assertCorrect(""alter table table_name change column_name new_name int"", MySQLDatabase.class, MariaDBDatabase.class);
        assertCorrect(""exec sp_rename '[table_name].[column_name]', 'new_name'"", MSSQLDatabase.class);
        assertCorrect(""exec sp_rename 'table_name.column_name', 'new_name'"", SybaseDatabase.class);
        assertCorrect(""alter table [table_name] rename column_name to new_name"",SybaseASADatabase.class);
        assertCorrectOnRest(""alter table [table_name] rename column [column_name] to [new_name]"");
    }
",non-flaky,5
21234,androidx_androidx,PreferencePersistTest.string_persistWhileDisabled_notPersisted,"    @Test
    public void string_persistWhileDisabled_notPersisted() {
        mPreference.setPersistent(false);

        boolean wasPersisted = mPreference.putString(""Test"");

        assertFalse(wasPersisted);
        assertNull(mSharedPref.getString(KEY, null));
    }
",non-flaky,5
33724,alibaba_fastjson,TestIssue1763_2.testBug1763_2,"    @Test
    public void testBug1763_2() {
        BaseResult<PageResult<CouponResult>> data = JSON.parseObject(jsonStr, new TypeReferenceBug1763_2<BaseResult<PageResult<T>>>(clazz){}.getType());

        Assert.assertTrue(data.isSuccess());
        Assert.assertTrue(data.getContent().getList().size() == 2);
        try {
            data.getContent().getList().get(0).getId();
        } catch (Throwable ex) {
            Assert.assertEquals(ex.getCause() instanceof ClassCastException, false);
        }
    }
",non-flaky,5
21260,androidx_androidx,PreferencePersistTest.boolean_persistAndRetrieve_returnsPersistedValue,"    @Test
    public void boolean_persistAndRetrieve_returnsPersistedValue() {
        final boolean expected = true;

        mPreference.putBoolean(expected);
        boolean result = mPreference.getBoolean(!expected);

        assertEquals(expected, result);
    }
",non-flaky,5
84568,apache_zookeeper,DistributedQueueTest.testElement3,"    @Test
    public void testElement3() throws Exception {
        createNremoveMelementTest(""/testElement3"", 1000, 500);
    }
",non-flaky,5
178025,aosp-mirror_platform_frameworks_support,ListRowDataAdapterTest.adapterSize_nonVisibleRowInserted,"    @Test
    public void adapterSize_nonVisibleRowInserted() {
        int itemCount = 4;
        ArrayObjectAdapter adapter = new ArrayObjectAdapter(presenterSelector);
        adapter.add(new SectionRow(""section 1""));
        for (int i = 0; i < itemCount; i++) {
            HeaderItem headerItem = new HeaderItem(i, ""header ""+i);
            adapter.add(new ListRow(headerItem, createListRowAdapter()));
        }

        ListRowDataAdapter listRowDataAdapter = new ListRowDataAdapter(adapter);
        assertEquals(5, listRowDataAdapter.size());

        List<DividerRow> invisibleRows = new ArrayList<>();
        invisibleRows.add(new DividerRow());
        invisibleRows.add(new DividerRow());

        listRowDataAdapter.registerObserver(dataObserver);
        adapter.addAll(adapter.size(), invisibleRows);
        verify(dataObserver, times(0)).onItemRangeInserted(anyInt(), anyInt());
        assertEquals(5, listRowDataAdapter.size());

        adapter.add(new DividerRow());
        verify(dataObserver, times(0)).onItemRangeInserted(anyInt(), anyInt());
        assertEquals(5, listRowDataAdapter.size());

        adapter.add(new ListRow(new HeaderItem(0, ""Header 5""), createListRowAdapter()));
        verify(dataObserver, times(1)).onItemRangeInserted(5, 4);
        assertEquals(9, listRowDataAdapter.size());
    }
",non-flaky,5
159685,liquibase_liquibase,AddUniqueConstraintExecutorTest.execute_withDefferedAndDisabled,"    @Test
    public void execute_withDefferedAndDisabled() throws Exception {
        statementUnderTest = new AddUniqueConstraintStatement(null, null, TABLE_NAME, new ColumnConfig[] { new ColumnConfig().setName(COLUMN_NAME)}, CONSTRAINT_NAME).setDeferrable(true).setInitiallyDeferred(true).setDisabled(true);
        assertCorrect(""alter table [adduqtest] add constraint [uq_test] unique ([coltomakeuq])"", SybaseDatabase.class);
        assertCorrect(""alter table [adduqtest] add constraint [uq_test] unique ([coltomakeuq])"", MSSQLDatabase.class);
        assertCorrect(""alter table [adduqtest] add constraint [uq_test] unique ([coltomakeuq])"", SybaseASADatabase.class);
        assertCorrect(""alter table adduqtest add constraint uq_test unique (coltomakeuq)"", MySQLDatabase.class);
        assertCorrect(""alter table adduqtest add constraint unique (coltomakeuq) constraint uq_test"", InformixDatabase.class);
        assertCorrect(""alter table adduqtest add constraint uq_test unique (coltomakeuq) DEFERRABLE INITIALLY "" +
                ""DEFERRED DISABLE"", OracleDatabase.class);
        assertCorrect(""ALTER TABLE \""adduqtest\"" ADD CONSTRAINT uq_test unique (\""coltomakeuq\"") DEFERRABLE INITIALLY"" +
                "" DEFERRED"", PostgresDatabase.class);
        assertCorrect(""alter table adduqtest add constraint uq_test unique (coltomakeuq)"", DerbyDatabase.class);
        assertCorrect(""alter table [adduqtest] add constraint [uq_test] unique ([coltomakeuq])"");
    }
",non-flaky,5
112722,hwang-pku_ormlite-core,DatabaseConnectionProxyTest.testIsAutoCommitNull,"	@Test
	public void testIsAutoCommitNull() throws Exception {
		DatabaseConnectionProxy proxy = new DatabaseConnectionProxy(null);
		assertFalse(proxy.isAutoCommit());
		proxy.close();
	}
",non-flaky,5
97726,vojtechhabarta_typescript-generator,JsonDeserializationTest.testWithConstructors,"    @Test
    public void testWithConstructors() throws IOException {
        final Settings settings = TestUtils.settings();
        settings.outputKind = TypeScriptOutputKind.module;
        settings.outputFileType = TypeScriptFileType.implementationFile;
        settings.mapClasses = ClassMapping.asClasses;
        settings.generateConstructors = true;
        settings.extensions.add(new JsonDeserializationExtension());
        final File actualFile = new File(""target/JsonDeserializationTestWithConstructors-actual.ts"");
        new TypeScriptGenerator(settings).generateTypeScript(Input.from(User.class), Output.to(actualFile));
        final List<String> actualLines = Files.readAllLines(actualFile.toPath(), StandardCharsets.UTF_8);
        final List<String> expectedLines = Utils.readLines(getClass().getResourceAsStream(""JsonDeserializationTestWithConstructors-expected.ts""));

        int contentLines = 0;
        int foundLines = 0;
        final List<String> notFoundLines = new ArrayList<>();
        for (String expectedLine : expectedLines) {
            if (!expectedLine.isEmpty() || !expectedLine.trim().equals(""}"")) {
                contentLines++;
                if (actualLines.contains(expectedLine)) {
                    foundLines++;
                } else {
                    notFoundLines.add(expectedLine);
                }
            }
        }
",non-flaky,5
112101,apache_shardingsphere-elasticjob,DistributeOnceElasticJobListenerTest.assertBeforeJobExecutedWhenIsNotAllStartedAndNotTimeout,"    @Test
    public void assertBeforeJobExecutedWhenIsNotAllStartedAndNotTimeout() {
        when(guaranteeService.isAllStarted()).thenReturn(false);
        when(timeService.getCurrentMillis()).thenReturn(0L);
        distributeOnceElasticJobListener.beforeJobExecuted(shardingContexts);
        verify(guaranteeService).registerStart(Sets.newHashSet(0, 1));
        verify(guaranteeService, times(0)).clearAllStartedInfo();
    }
",non-flaky,5
98620,nutzam_nutz,El2Test.test_urlencode,"    @Test
    public void test_urlencode() throws UnsupportedEncodingException {
        String re = El.eval(""urlencode('ä¸­æ')"").toString();
        assertEquals(URLEncoder.encode(""ä¸­æ"", Encoding.UTF8), re);
        
        re = El.eval(""urlencode('ä¸­æ', 'gbk')"").toString();
        assertEquals(URLEncoder.encode(""ä¸­æ"", Encoding.GBK), re);
        
        re = El.eval(""urlencode('ä¸­æ', 'gb2312')"").toString();
        assertEquals(URLEncoder.encode(""ä¸­æ"", Encoding.GB2312), re);
    }
",non-flaky,5
99711,apache_cassandra,MultiResultLoggerTest.delegatesPrintfToAdditionalPrintStreams,"    @Test
    public void delegatesPrintfToAdditionalPrintStreams() throws Exception
    {
        ByteArrayOutputStream output = new ByteArrayOutputStream();
        PrintStream additionalPrintStream = new PrintStream(output, true);
        MultiResultLogger underTest = new MultiResultLogger(new PrintStream(NOOP));

        underTest.addStream(additionalPrintStream);
        underTest.printf(""%s %s %s"", ""one"", ""two"", ""three"");

        assertEquals(""one two three"", output.toString());
    }
",non-flaky,5
104704,apache_pinot,ServerStarterIntegrationTest.testCustomInstanceId,"  @Test
  public void testCustomInstanceId()
      throws Exception {
    Map<String, Object> properties = new HashMap<>();
    properties.put(CONFIG_OF_INSTANCE_ID, CUSTOM_INSTANCE_ID);

    verifyInstanceConfig(new PinotConfiguration(properties), CUSTOM_INSTANCE_ID, NetUtils.getHostAddress(),
        DEFAULT_SERVER_NETTY_PORT);
  }
",non-flaky,5
179476,abel533_Mapper,SafeUpdateByFieldTest.testSafeUpdate,"    @Test(expected = PersistenceException.class)
    public void testSafeUpdate() {
        SqlSession sqlSession = getSqlSession();
        try {
            CountryMapper mapper = sqlSession.getMapper(CountryMapper.class);
            mapper.updateByExample(new Country(), new Example(Country.class));
        } finally {
            sqlSession.close();
        }
    }
",non-flaky,5
77621,pholser_junit-quickcheck,SizeConstrainedSetPropertyParameterTypesTest.shouldHold,"    @Test public void outOfWhackSizeRange() {
        @Property public void shouldHold(@Size(min = 4, max = 3) Set<String> items) {
            assertThat(items.size(), lessThanOrEqualTo(3));
        }
",non-flaky,5
94798,ktuukkan_marine-api,AISMessage09ParserTest.getPositionAccuracy,"    @Test
    public void getPositionAccuracy() throws Exception {
        assertEquals(true, msg.getPositionAccuracy());
    }
",non-flaky,5
26784,MundaneImmortal_pair-distribution-app,CompanyTest.testIsCompanyTrackFalse,"	@Test
	public void testIsCompanyTrackFalse() {
		boolean isCompanyTrack = new Company(""Company"").isCompanyTrack(""companyB-track"");

		assertThat(isCompanyTrack, is(false));
	}
",non-flaky,5
104616,apache_pinot,NullHandlingIntegrationTest.testCountWithNullDescriptionAndSalary,"  @Test
  public void testCountWithNullDescriptionAndSalary()
      throws Exception {
    String query = ""SELECT count(*) FROM "" + getTableName() + "" where description IS NOT NULL AND salary IS NOT NULL"";
    testQuery(query, Collections.singletonList(query));
  }
",non-flaky,5
135747,Netflix_Hystrix,HystrixPropertiesChainedArchaiusPropertyTest.testString,"    @Test
    public void testString() throws Exception {

        DynamicStringProperty pString = new DynamicStringProperty(""defaultString"", ""default-default"");
        HystrixPropertiesChainedArchaiusProperty.StringProperty fString = new HystrixPropertiesChainedArchaiusProperty.StringProperty(""overrideString"", pString);

        assertTrue(""default-default"".equals(fString.get()));

        ConfigurationManager.getConfigInstance().setProperty(""defaultString"", ""default"");
        assertTrue(""default"".equals(fString.get()));

        ConfigurationManager.getConfigInstance().setProperty(""overrideString"", ""override"");
        assertTrue(""override"".equals(fString.get()));

        ConfigurationManager.getConfigInstance().clearProperty(""overrideString"");
        assertTrue(""default"".equals(fString.get()));

        ConfigurationManager.getConfigInstance().clearProperty(""defaultString"");
        assertTrue(""default-default"".equals(fString.get()));
    }
",non-flaky,5
33694,alibaba_fastjson,JSONScannerTest.checkDate17,"  @Test
  public void checkDate17() throws Throwable {

    // Arrange
    char y0 = '2';
    char y1 = '1';
    char y2 = '0';
    char y3 = '0';
    char M0 = '\u0000';
    char M1 = '\u0000';
    int d0 = 0;
    int d1 = 0;

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkDate"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""int""), Reflector.forName(""int""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, y0, y1, y2, y3, M0, M1, d0, d1);

    // Assert result
    Assert.assertEquals(false, retval);

  }
",non-flaky,5
94812,ktuukkan_marine-api,AISMessage04Test.getUtcHour,"    @Test
    public void getUtcHour() throws Exception {
        assertEquals(7, msg.getUtcHour());
    }
",non-flaky,5
92610,FasterXML_jackson-databind,ObjectReaderValueOfWithValueTypeTest.testValueOfFileWithValueType,"    @Test
    public void testValueOfFileWithValueType() throws IOException {
        when(objectReader.forType((Class<?>) any())).thenReturn(objectReader);
        when(objectReader.readValue((File) any())).thenReturn(pojo);
        when(objectReader.readValue((File) any(), (Class<?>) any())).thenCallRealMethod();

        File source = new File(""unknownpath"");
        POJO result = objectReader.readValue(source, POJO.class);

        assertEquals(result, pojo);
        verify(objectReader).forType(POJO.class);
        verify(objectReader).readValue(source);
    }
",non-flaky,5
77688,pholser_junit-quickcheck,PrimitivePropertyParameterTypesTest.shouldHold,"    @Test public void leftOpenEndedRangedWrapperByte() {
        @Property public void shouldHold(@InRange(max = ""0"") Byte b) {
            assertThat(b, lessThanOrEqualTo((byte) 0));
        }
",non-flaky,5
95699,togglz_togglz,CompositeFeatureProviderTest.empty,"	@Test
	public void empty() {
		CompositeFeatureProvider provider = new CompositeFeatureProvider();
		assertThat(provider.getFeatures()).isEmpty();
		assertThat(provider.getMetaData(new NamedFeature(""FOO""))).isNull();
	}
",non-flaky,5
74,wildfly_wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993.testBind.2,"@Test
public void testBind() throws Exception {
    final Name name = new CompositeName(""test"");
    final Object value = new Object();
    WritableServiceBasedNamingStore.pushOwner(OWNER_FOO);
    try {
        store.bind(name, value);
    } finally {
        WritableServiceBasedNamingStore.popOwner();
    }
    assertEquals(value, store.lookup(name));
}",test order dependency,4
122635,vespa-engine_vespa,YumTest.testQueryInstalledNevra,"    @Test
    public void testQueryInstalledNevra() {
        terminal.expectCommand(
                ""rpm -q docker --queryformat \""%{NAME}\\\\n%{EPOCH}\\\\n%{VERSION}\\\\n%{RELEASE}\\\\n%{ARCH}\"" 2>&1"",
                0,
                ""docker\n2\n1.13.1\n74.git6e3bb8e.el7.centos\nx86_64"");

        Optional<YumPackageName> installed = yum.queryInstalled(taskContext, ""docker"");

        assertTrue(installed.isPresent());
        assertEquals(""docker"", installed.get().getName());
        assertEquals(""2"", installed.get().getEpoch().get());
        assertEquals(""1.13.1"", installed.get().getVersion().get());
        assertEquals(""74.git6e3bb8e.el7.centos"", installed.get().getRelease().get());
        assertEquals(""x86_64"", installed.get().getArchitecture().get());
    }
",non-flaky,5
95684,togglz_togglz,TogglzRuleWithVariations_EnableSadCase_Test.test,"    @Test
    public void test() {
        expectedException.expect(AssertionError.class);

        assertFalse(MyFeatures.F1.isActive());
    }
",non-flaky,5
98059,vert-x3_vertx-mongo-client,GridFsTest.testStreamUploadWithOptions,"  @Test
  public void testStreamUploadWithOptions() {
    String fileName = createTempFileWithContent(1024);
    GridFsUploadOptions options = new GridFsUploadOptions();
    options.setChunkSizeBytes(1024);
    options.setMetadata(new JsonObject().put(""meta_test"", ""Kamapua`a""));

    AtomicReference<MongoGridFsClient> gridFsClient = new AtomicReference<>();

    Promise<MongoGridFsClient> gridFsClientPromise = Promise.promise();

    mongoClient.createGridFsBucketService(""fs"", gridFsClientPromise);

    gridFsClientPromise.future().compose(mongoGridFsClient -> {
      assertNotNull(mongoGridFsClient);
      gridFsClient.set(mongoGridFsClient);
      Promise<Void> dropPromise = Promise.promise();
      mongoGridFsClient.drop(dropPromise);
      return dropPromise.future();
    }).compose(dropped -> {
      Promise<AsyncFile> openPromise = Promise.promise();
      vertx.fileSystem().open(fileName, new OpenOptions(), openPromise);
      return openPromise.future();
    }).compose(asyncFile -> {
      Promise<String> uploadedPromise = Promise.promise();
      gridFsClient.get().uploadByFileNameWithOptions(asyncFile, fileName, options, uploadedPromise);
      return uploadedPromise.future();
    }).compose(id -> {
      assertNotNull(id);
      testComplete();
      return Future.succeededFuture();
    }).onComplete(event -> {
      if (event.failed()) {
        fail(event.cause());
      }
    });
    await();
  }
",non-flaky,5
133928,cdancy_jenkins-rest,BaseJenkinsApiLiveTest.payloadFromResource,"@Test(groups = ""live"")
    public String payloadFromResource(String resource) {
        try {
            return new String(toStringAndClose(getClass().getResourceAsStream(resource)).getBytes(Charsets.UTF_8));
        } catch (IOException e) {
            throw Throwables.propagate(e);
        }
    }
",non-flaky,5
60872,apache_druid,RedisClusterCacheTest.testCache,"  @Test
  public void testCache()
  {
    Assert.assertNull(cache.get(new Cache.NamedKey(""the"", HI)));

    Cache.NamedKey key1 = new Cache.NamedKey(""the"", HI);
    Cache.NamedKey key2 = new Cache.NamedKey(""the"", HO);
    Cache.NamedKey key3 = new Cache.NamedKey(""a"", HI);
    Cache.NamedKey notExist = new Cache.NamedKey(""notExist"", HI);

    //test put and get
    cache.put(key1, new byte[]{1, 2, 3, 4});
    cache.put(key2, new byte[]{2, 3, 4, 5});
    cache.put(key3, new byte[]{3, 4, 5, 6});
    Assert.assertEquals(0x01020304, Ints.fromByteArray(cache.get(key1)));
    Assert.assertEquals(0x02030405, Ints.fromByteArray(cache.get(key2)));
    Assert.assertEquals(0x03040506, Ints.fromByteArray(cache.get(key3)));
    Assert.assertEquals(0x03040506, Ints.fromByteArray(cache.get(key3)));
    Assert.assertNull(cache.get(notExist));

    this.mgetCount.set(0);

    //test multi get
    Map<Cache.NamedKey, byte[]> result = cache.getBulk(
        Lists.newArrayList(
            key1,
            key2,
            key3,
            notExist
        )
    );

    // these 4 keys are distributed among different nodes, so there should be 4 times call of MGET
    Assert.assertEquals(mgetCount.get(), 4);
    Assert.assertEquals(result.size(), 3);
    Assert.assertEquals(0x01020304, Ints.fromByteArray(result.get(key1)));
    Assert.assertEquals(0x02030405, Ints.fromByteArray(result.get(key2)));
    Assert.assertEquals(0x03040506, Ints.fromByteArray(result.get(key3)));
  }
",non-flaky,5
98231,apache_jackrabbit,PerformanceTest.testPerformance,"    @Test
    public void testPerformance() throws Exception {
        testPerformance(""1.0"");
    }
",non-flaky,5
20919,NationalSecurityAgency_timely,MetricHistogramTest.test99thPercentile,"    @Test
    public void test99thPercentile() throws Exception {
        Assert.assertEquals(99.0D, m.getPercentile(99), 0.0D);
    }
",non-flaky,5
95662,togglz_togglz,TogglzApplicationContextBinderApplicationListenerTest.contextRefreshedWhileContextAlreadyBound,"    @Test
    public void contextRefreshedWhileContextAlreadyBound() {
        // Bind application context before context refreshed event invoked
        ContextClassLoaderApplicationContextHolder.bind(mock(ApplicationContext.class));
        applicationContext = mock(ApplicationContext.class);
        ContextRefreshedEvent contextRefreshedEvent = mock(ContextRefreshedEvent.class);
        when(contextRefreshedEvent.getApplicationContext()).thenReturn(applicationContext);
        // Invoke context refreshed application event
        applicationListener.onApplicationEvent(contextRefreshedEvent);
        // Assert application context bound
        assertSame(applicationContext, ContextClassLoaderApplicationContextHolder.get());
    }
",non-flaky,5
319,liquibase_liquibase,DependencyUtilTest.testIndependentBranchesCase,"@Test
public void testIndependentBranchesCase() {
    graph.add(""a"", ""b"");
    graph.add(""b"", ""c1"");
    graph.add(""b"", ""c2"");
    graph.add(""o"", ""p1"");
    graph.add(""p1"", ""r1"");
    graph.add(""r1"", ""s"");
    graph.add(""o"", ""p2"");
    graph.add(""p2"", ""r2"");
    graph.add(""r2"", ""s2"");
    graph.add(""r2"", ""s3"");
    graph.add(""x"", ""y"");
    graph.computeDependencies();
    List<String> expected =
    Arrays.asList(""a"", ""o"", ""x"", ""b"", ""p1"", ""p2"", ""y"", ""c1"", ""c2"", ""r1"", ""r2"", ""s"", ""s2"", ""s3"");
    Assert.assertEquals(expected, dependencyOrder);
}",unordered collections,3
59599,looly_hutool,PinyinUtilTest.getFirstLetterByBopomofo4jTest,"	@Test
	public void getFirstLetterByBopomofo4jTest(){
		final Bopomofo4jEngine engine = new Bopomofo4jEngine();
		final String result = engine.getFirstLetter(""ææµ·"", """");
		Assert.assertEquals(""lh"", result);
	}
",non-flaky,5
361,apache_hadoop,TestPermissionSymlinks.testAclDelete,"  @Test
  public void testAclDelete() throws Exception {
    fs.setAcl(linkParent, Arrays.asList(
      aclEntry(ACCESS, USER, ALL),
      aclEntry(ACCESS, USER, user.getUserName(), READ_EXECUTE),
      aclEntry(ACCESS, GROUP, ALL),
      aclEntry(ACCESS, OTHER, ALL)));
    doDeleteLinkParentNotWritable();

    fs.setAcl(linkParent, Arrays.asList(
      aclEntry(ACCESS, USER, ALL),
      aclEntry(ACCESS, GROUP, ALL),
      aclEntry(ACCESS, OTHER, ALL)));
    fs.setAcl(targetParent, Arrays.asList(
      aclEntry(ACCESS, USER, ALL),
      aclEntry(ACCESS, USER, user.getUserName(), READ_EXECUTE),
      aclEntry(ACCESS, GROUP, ALL),
      aclEntry(ACCESS, OTHER, ALL)));
    fs.setAcl(target, Arrays.asList(
      aclEntry(ACCESS, USER, ALL),
      aclEntry(ACCESS, USER, user.getUserName(), READ_EXECUTE),
      aclEntry(ACCESS, GROUP, ALL),
      aclEntry(ACCESS, OTHER, ALL)));
    doDeleteTargetParentAndTargetNotWritable();
  }
",non-flaky,5
104647,apache_pinot,OfflineClusterIntegrationTest.testCaseStatementInSelection,"  @Test
  public void testCaseStatementInSelection()
      throws Exception {
    List<String> origins = Arrays
        .asList(""ATL"", ""ORD"", ""DFW"", ""DEN"", ""LAX"", ""IAH"", ""SFO"", ""PHX"", ""LAS"", ""EWR"", ""MCO"", ""BOS"", ""SLC"", ""SEA"", ""MSP"",
            ""CLT"", ""LGA"", ""DTW"", ""JFK"", ""BWI"");
    StringBuilder caseStatementBuilder = new StringBuilder(""CASE "");
    for (int i = 0; i < origins.size(); i++) {
      // WHEN origin = 'ATL' THEN 1
      // WHEN origin = 'ORD' THEN 2
      // WHEN origin = 'DFW' THEN 3
      // ....
      caseStatementBuilder.append(String.format(""WHEN origin = '%s' THEN %d "", origins.get(i), i + 1));
    }
    caseStatementBuilder.append(""ELSE 0 END"");
    String sqlQuery = ""SELECT origin, "" + caseStatementBuilder + "" AS origin_code FROM mytable LIMIT 1000"";
    JsonNode response = postSqlQuery(sqlQuery, _brokerBaseApiUrl);
    JsonNode rows = response.get(""resultTable"").get(""rows"");
    assertEquals(response.get(""exceptions"").size(), 0);
    for (int i = 0; i < rows.size(); i++) {
      String origin = rows.get(i).get(0).asText();
      int originCode = rows.get(i).get(1).asInt();
      if (originCode > 0) {
        assertEquals(origin, origins.get(originCode - 1));
      } else {
        assertFalse(origins.contains(origin));
      }
    }
  }
",non-flaky,5
84592,apache_zookeeper,BinaryInputArchiveTest.testReadStringCheckLength,"    @Test
    public void testReadStringCheckLength() {
        byte[] buf = new byte[]{
                Byte.MAX_VALUE, Byte.MAX_VALUE, Byte.MAX_VALUE, Byte.MAX_VALUE};
        ByteArrayInputStream is = new ByteArrayInputStream(buf);
        BinaryInputArchive ia = BinaryInputArchive.getArchive(is);
        try {
            ia.readString("""");
            fail(""Should have thrown an IOException"");
        } catch (IOException e) {
            assertTrue(e.getMessage().startsWith(BinaryInputArchive.UNREASONBLE_LENGTH),
                    () -> ""Not 'Unreasonable length' exception: "" + e);
        }
    }
",non-flaky,5
26888,wildfly_wildfly,NamingContextTestCase.testListBindingsWithContinuation,"    @Test
    public void testListBindingsWithContinuation() throws Exception {
        bindListWithContinuations();

        NamingEnumeration<Binding> results = namingContext.listBindings(new CompositeName(""comp""));
        checkListWithContinuationsResults(results);

        //the same with security permissions
        results = (NamingEnumeration<Binding>) testActionPermission(JndiPermission.ACTION_LIST_BINDINGS, Arrays.asList(
                new JndiPermission(""test"", ""listBindings"")), namingContext, ""comp"");

        checkListWithContinuationsResults(results);
    }
",non-flaky,5
137161,spring-projects_spring-framework,AnnotationsScannerTests.method,"		@TestAnnotation1
		public void method() {
		}
",non-flaky,5
220,wildfly_wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993.testRebind,"@Test
public void testRebind() throws Exception {
    final Name name = new CompositeName(""test"");
    final Object value = new Object();
    namingStore.bind(name, value);
    Object newValue = new Object();
    namingContext.rebind(name, newValue);
    assertEquals(newValue, namingStore.lookup(name));
    newValue = new Object();
    testActionPermission(JndiPermission.ACTION_REBIND, namingContext, ""test"", newValue);
    assertEquals(newValue, namingStore.lookup(name));
}",test order dependency,4
91404,OpenLCB_OpenLCB_Java,DefaultPropertyListenerSupportTest.testCTor,"    @Test
    public void testCTor() {
        Assume.assumeFalse(GraphicsEnvironment.isHeadless());
        DefaultPropertyListenerSupport t = new DefaultPropertyListenerSupport();
        Assert.assertNotNull(""exists"",t);
    }
",non-flaky,5
133993,CorfuDB_CorfuDB,NodeConnectivityTest.testConnectedAndFailedNodes,"    @Test
    public void testConnectedAndFailedNodes() {
        NodeConnectivity nodeState = NodeConnectivity.connectivity(
                ""a"",
                ImmutableMap.of(""a"", OK, ""b"", OK, ""c"", FAILED)
        );

        assertThat(nodeState.getConnectedNodes()).isEqualTo(ImmutableSet.of(""a"", ""b""));
        assertThat(nodeState.getFailedNodes()).isEqualTo(ImmutableSet.of(""c""));
    }
",non-flaky,5
106670,Alluxio_alluxio,BaseFileSystemTest.freeException,"  @Test
  public void freeException() throws Exception {
    AlluxioURI file = new AlluxioURI(""/file"");
    FreePOptions freeOptions = FreePOptions.newBuilder().setRecursive(true).build();
    doThrow(EXCEPTION).when(mFileSystemMasterClient).free(file,
        FileSystemOptions.freeDefaults(mConf).toBuilder().mergeFrom(freeOptions).build());
    try {
      mFileSystem.free(file, freeOptions);
      fail(SHOULD_HAVE_PROPAGATED_MESSAGE);
    } catch (Exception e) {
      assertSame(EXCEPTION, e);
    }

    verifyFilesystemContextAcquiredAndReleased();
  }
",non-flaky,5
170503,eclipse_jetty.project,MBeanContainerTest.testBeanAddedNullCheck,"    @Test
    public void testBeanAddedNullCheck()
    {
        setBeanAdded();
        Integer mbeanCount = mbeanServer.getMBeanCount();

        mbeanContainer.beanAdded(null, null);

        assertEquals(mbeanCount, mbeanServer.getMBeanCount(), ""MBean count must not change after beanAdded(null, null) call"");
    }
",non-flaky,5
159650,liquibase_liquibase,AbstractIntegrationTest.testRerunDiffChangeLog,"    @Test
    public void testRerunDiffChangeLog() throws Exception {
        assumeNotNull(this.getDatabase());

        for (int run=0; run < 2; run++) { //run once outputting data as insert, once as csv
            boolean outputCsv = run == 1;
            runCompleteChangeLog();

            SnapshotControl snapshotControl = new SnapshotControl(database);

            DatabaseSnapshot originalSnapshot = SnapshotGeneratorFactory.getInstance().createSnapshot(database.getDefaultSchema(), database, snapshotControl);

            CompareControl compareControl = new CompareControl();
            compareControl.addSuppressedField(Column.class, ""defaultValue"");  //database returns different data even if the same
            compareControl.addSuppressedField(Column.class, ""autoIncrementInformation""); //database returns different data even if the same
            if (database instanceof OracleDatabase) {
                compareControl.addSuppressedField(Column.class, ""type""); //database returns different nvarchar2 info even though they are the same
                compareControl.addSuppressedField(Column.class, ""nullable""); // database returns different nullable on views, e.g. v_person.id
            }
            if (database instanceof PostgresDatabase) {
                compareControl.addSuppressedField(Column.class, ""type""); //database returns different nvarchar2 info even though they are the same
            }

            DiffOutputControl diffOutputControl = new DiffOutputControl();
            File tempFile = tempDirectory.getRoot().createTempFile(""liquibase-test"", "".xml"");

            if (outputCsv) {
                diffOutputControl.setDataDir(new File(tempFile.getParentFile(), ""liquibase-data"").getCanonicalPath().replaceFirst(""\\w:"",""""));
            }

            DiffResult diffResult = DiffGeneratorFactory.getInstance().compare(database, null, compareControl);


            FileOutputStream output = new FileOutputStream(tempFile);
            try {
                new DiffToChangeLog(diffResult, new DiffOutputControl()).print(new PrintStream(output));
                output.flush();
            } finally {
                output.close();
            }

            Liquibase liquibase = createLiquibase(tempFile.getName());
            clearDatabase();

            DatabaseSnapshot emptySnapshot = SnapshotGeneratorFactory.getInstance().createSnapshot(database.getDefaultSchema(), database, new SnapshotControl(database));

            //run again to test changelog testing logic
            liquibase = createLiquibase(tempFile.getName());
            try {
                liquibase.update(this.contexts);
            } catch (ValidationFailedException e) {
                e.printDescriptiveError(System.out);
                throw e;
            }

            DatabaseSnapshot migratedSnapshot = SnapshotGeneratorFactory.getInstance().createSnapshot(database.getDefaultSchema(), database, new SnapshotControl(database));

            DiffResult finalDiffResult = DiffGeneratorFactory.getInstance().compare(originalSnapshot, migratedSnapshot, compareControl);
            try {
                assertTrue(""recreating the database from the generated change log should cause both 'before' and "" +
                                ""'after' snapshots to be equal."",
                        finalDiffResult.areEqual());
            } catch (AssertionError e) {
                new DiffToReport(finalDiffResult, System.err).print();
                throw e;
            }

            //diff to empty and drop all
            DiffResult emptyDiffResult = DiffGeneratorFactory.getInstance().compare(emptySnapshot, migratedSnapshot, compareControl);
            output = new FileOutputStream(tempFile);
            try {
                new DiffToChangeLog(emptyDiffResult, new DiffOutputControl(true, true, true, null)).print(new PrintStream(output));
                output.flush();
            } finally {
                output.close();
            }

            liquibase = createLiquibase(tempFile.getName());
            Scope.getCurrentScope().getLog(getClass()).info(LogType.LOG, ""updating from ""+tempFile.getCanonicalPath());
            try {
                liquibase.update(this.contexts);
            } catch (LiquibaseException e) {
                throw e;
            }

            DatabaseSnapshot emptyAgainSnapshot = SnapshotGeneratorFactory.getInstance().createSnapshot(database.getDefaultSchema(), database, new SnapshotControl(database));
            assertEquals(""a database that was 'updated' to an empty snapshot should only have 2 tables left: "" +
                            ""the database change log table and the lock table."",
                    2, emptyAgainSnapshot.get(Table.class).size());
            assertEquals(""a database that was 'updated' to an empty snapshot should not contain any views."",
                    0, emptyAgainSnapshot.get(View.class).size());
        }
    }
",non-flaky,5
92603,FasterXML_jackson-databind,ImmutablesTypeSerializationTest.testImmutablesSimpleGenericDeserialization,"    @Test
    public void testImmutablesSimpleGenericDeserialization() throws IOException {
        Key<Account> expected = ImmutableKey.<Account>builder()
                .id(ImmutableAccount.builder()
                        .id(1L)
                        .name(""foo"")
                        .build())
                .build();
        Key<Account> actual = MAPPER.readValue(
                ""{\""id\"":{\""id\"": 1,\""name\"":\""foo\""}}"",
                new TypeReference<Key<Account>>() {});
        assertEquals(expected, actual);
    }
",non-flaky,5
135787,Netflix_Hystrix,HystrixThreadPoolTest.testShutdownWithWait,"    @Test
    public void testShutdownWithWait() {
        // other unit tests will probably have run before this so get the count
        int count = Factory.threadPools.size();

        HystrixThreadPool pool = Factory.getInstance(HystrixThreadPoolKey.Factory.asKey(""threadPoolFactoryTest""),
                HystrixThreadPoolProperties.Setter.getUnitTestPropertiesBuilder());

        assertEquals(count + 1, Factory.threadPools.size());
        assertFalse(pool.getExecutor().isShutdown());

        Factory.shutdown(1, TimeUnit.SECONDS);

        // ensure all pools were removed from the cache
        assertEquals(0, Factory.threadPools.size());
        assertTrue(pool.getExecutor().isShutdown());
    }
",non-flaky,5
133984,CorfuDB_CorfuDB,ManagementViewTest.testNodeStatusMap,"    @Test
    public void testNodeStatusMap() {
        final String server1 = ""server1"";
        final String server2 = ""server2"";
        final String server3 = ""server3"";
        Layout layout = layoutUtil.getLayout(Arrays.asList(server1, server2, server3));
        layout.setUnresponsiveServers(Arrays.asList(server1, server2));

        Map<String, NodeStatus> status = managementView.getNodeStatusMap(layout);
        assertThat(status.get(server1)).isEqualTo(NodeStatus.DOWN);
        assertThat(status.get(server2)).isEqualTo(NodeStatus.DOWN);
        assertThat(status.get(server3)).isEqualTo(NodeStatus.UP);
    }
",non-flaky,5
321,apache_hadoop,TestPeerCache.testAddAndRetrieve,"@Test
public void testAddAndRetrieve() throws Exception {
    PeerCache cache = PeerCache.getInstance(3, 100000);
    DatanodeID dnId = new DatanodeID(""192.168.0.1"",
    ""fakehostname"", ""fake_storage_id"",
    100, 101, 102);
    FakePeer peer = new FakePeer(dnId, false);
    cache.put(dnId, peer);
    assertTrue(!peer.isClosed());
    assertEquals(1, cache.size());
    assertEquals(peer, cache.get(dnId, false));
    assertEquals(0, cache.size());
    cache.close();
}",test order dependency,4
104652,apache_pinot,OfflineClusterIntegrationTest.testQueryWithRepeatedColumns,"  @Test
  public void testQueryWithRepeatedColumns()
      throws Exception {
    //test repeated columns in selection query
    String query = ""SELECT ArrTime, ArrTime FROM mytable WHERE DaysSinceEpoch <= 16312 AND Carrier = 'DL'"";
    testQuery(query, Collections.singletonList(query));

    //test repeated columns in selection query with order by
    query = ""SELECT ArrTime, ArrTime FROM mytable WHERE DaysSinceEpoch <= 16312 AND Carrier = 'DL' order by ArrTime"";
    testQuery(query, Collections.singletonList(query));

    //test repeated columns in agg query
    query = ""SELECT count(*), count(*) FROM mytable WHERE DaysSinceEpoch <= 16312 AND Carrier = 'DL'"";
    testQuery(query, Arrays.asList(""SELECT count(*) FROM mytable WHERE DaysSinceEpoch <= 16312 AND Carrier = 'DL'"",
        ""SELECT count(*) FROM mytable WHERE DaysSinceEpoch <= 16312 AND Carrier = 'DL'""));

    //test repeated columns in agg group by query
    query =
        ""SELECT ArrTime, ArrTime, count(*), count(*) FROM mytable WHERE DaysSinceEpoch <= 16312 AND Carrier = 'DL' ""
            + ""group by ArrTime, ArrTime"";
    testQuery(query, Arrays.asList(
        ""SELECT ArrTime, ArrTime, count(*) FROM mytable WHERE DaysSinceEpoch <= 16312 AND Carrier = 'DL' group by ""
            + ""ArrTime, ArrTime"",
        ""SELECT ArrTime, ArrTime, count(*) FROM mytable WHERE DaysSinceEpoch <= 16312 AND Carrier = 'DL' group by ""
            + ""ArrTime, ArrTime""));
  }
",non-flaky,5
112723,hwang-pku_ormlite-core,DatabaseConnectionProxyTest.testSetAutoCommit,"	@Test
	public void testSetAutoCommit() throws Exception {
		DatabaseConnection conn = createMock(DatabaseConnection.class);
		boolean autoCommit = false;
		conn.setAutoCommit(autoCommit);
		conn.close();
		DatabaseConnectionProxy proxy = new DatabaseConnectionProxy(conn);
		replay(conn);
		proxy.setAutoCommit(autoCommit);
		proxy.close();
		verify(conn);
	}
",non-flaky,5
76742,quarkusio_quarkus,RemoteDevMojoIT.testThatNewResourcesAreServed,"    @Test
    public void testThatNewResourcesAreServed() throws MavenInvocationException, IOException {
        testDir = initProject(""projects/classic-remote-dev"", ""projects/project-classic-run-resource-change-remote"");
        agentDir = initProject(""projects/classic-remote-dev"", ""projects/project-classic-run-resource-change-local"");
        runAndCheck();

        // Create a new resource
        File source = new File(agentDir, ""src/main/resources/META-INF/resources/lorem.txt"");
        FileUtils.write(source,
                ""Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."",
                ""UTF-8"");
        await()
                .pollDelay(1, TimeUnit.SECONDS)
                .atMost(1, TimeUnit.MINUTES)
                .until(() -> DevModeTestUtils.getHttpResponse(""/lorem.txt"").contains(""Lorem ipsum""));

        // Update the resource
        String uuid = UUID.randomUUID().toString();
        FileUtils.write(source, uuid, ""UTF-8"");
        await()
                .pollDelay(1, TimeUnit.SECONDS)
                .atMost(1, TimeUnit.MINUTES)
                .until(() -> DevModeTestUtils.getHttpResponse(""/lorem.txt"").contains(uuid));

        // Delete the resource
        //TODO: not supported yet in remote dev
        //        source.delete();
        //        await()
        //                .pollDelay(1, TimeUnit.SECONDS)
        //                .atMost(1, TimeUnit.MINUTES)
        //                .until(() -> getHttpResponse(""/lorem.txt"", 404));
    }
",non-flaky,5
288,apache_hadoop,TestWrites.testAlterWriteRequest,"  @Test
  public void testAlterWriteRequest() throws IOException {
    int len = 20;
    byte[] data = new byte[len];
    ByteBuffer buffer = ByteBuffer.wrap(data);

    for (int i = 0; i < len; i++) {
      buffer.put((byte) i);
    }
    buffer.flip();
    int originalCount = buffer.array().length;
    WRITE3Request request = new WRITE3Request(new FileHandle(), 0, data.length,
        WriteStableHow.UNSTABLE, buffer);

    WriteCtx writeCtx1 = new WriteCtx(request.getHandle(), request.getOffset(),
        request.getCount(), WriteCtx.INVALID_ORIGINAL_COUNT,
        request.getStableHow(), request.getData(), null, 1, false,
        WriteCtx.DataState.NO_DUMP);

    Assert.assertTrue(writeCtx1.getData().array().length == originalCount);

    // Now change the write request
    OpenFileCtx.alterWriteRequest(request, 12);

    WriteCtx writeCtx2 = new WriteCtx(request.getHandle(), request.getOffset(),
        request.getCount(), originalCount, request.getStableHow(),
        request.getData(), null, 2, false, WriteCtx.DataState.NO_DUMP);
    ByteBuffer appendedData = writeCtx2.getData();

    int position = appendedData.position();
    int limit = appendedData.limit();
    Assert.assertTrue(position == 12);
    Assert.assertTrue(limit - position == 8);
    Assert.assertTrue(appendedData.get(position) == (byte) 12);
    Assert.assertTrue(appendedData.get(position + 1) == (byte) 13);
    Assert.assertTrue(appendedData.get(position + 2) == (byte) 14);
    Assert.assertTrue(appendedData.get(position + 7) == (byte) 19);

    // Test current file write offset is at boundaries
    buffer.position(0);
    request = new WRITE3Request(new FileHandle(), 0, data.length,
        WriteStableHow.UNSTABLE, buffer);
    OpenFileCtx.alterWriteRequest(request, 1);
    WriteCtx writeCtx3 = new WriteCtx(request.getHandle(), request.getOffset(),
        request.getCount(), originalCount, request.getStableHow(),
        request.getData(), null, 2, false, WriteCtx.DataState.NO_DUMP);
    appendedData = writeCtx3.getData();
    position = appendedData.position();
    limit = appendedData.limit();
    Assert.assertTrue(position == 1);
    Assert.assertTrue(limit - position == 19);
    Assert.assertTrue(appendedData.get(position) == (byte) 1);
    Assert.assertTrue(appendedData.get(position + 18) == (byte) 19);

    // Reset buffer position before test another boundary
    buffer.position(0);
    request = new WRITE3Request(new FileHandle(), 0, data.length,
        WriteStableHow.UNSTABLE, buffer);
    OpenFileCtx.alterWriteRequest(request, 19);
    WriteCtx writeCtx4 = new WriteCtx(request.getHandle(), request.getOffset(),
        request.getCount(), originalCount, request.getStableHow(),
        request.getData(), null, 2, false, WriteCtx.DataState.NO_DUMP);
    appendedData = writeCtx4.getData();
    position = appendedData.position();
    limit = appendedData.limit();
    Assert.assertTrue(position == 19);
    Assert.assertTrue(limit - position == 1);
    Assert.assertTrue(appendedData.get(position) == (byte) 19);
  }
",non-flaky,5
20975,NationalSecurityAgency_timely,WebSocketRequestDeserializationTest.testCloseDeserialization,"    @Test
    public void testCloseDeserialization() throws Exception {
        // @formatter:off
		String json = ""{ ""
				       + ""\""operation\"" : \""close\"",""
				       + "" \""sessionId\"": \""1234\""""
				    + ""}"";
		// @formatter:on
        WebSocketRequest request = JsonUtil.getObjectMapper().readValue(json.getBytes(), WebSocketRequest.class);
        Assert.assertNotNull(request);
        Assert.assertEquals(CloseSubscription.class, request.getClass());
        Assert.assertEquals(""1234"", ((CloseSubscription) request).getSessionId());
    }
",non-flaky,5
76950,Tencent_Firestorm,ShuffleReadClientImplTest.readTest11,"  @Test
  public void readTest11() throws Exception {
    String basePath = HDFS_URI + ""clientReadTest11"";
    HdfsShuffleWriteHandler writeHandler =
        new HdfsShuffleWriteHandler(""appId"", 0, 1, 1, basePath, ""test1"", conf);

    Map<Long, byte[]> expectedData = Maps.newHashMap();
    Roaring64NavigableMap blockIdBitmap = Roaring64NavigableMap.bitmapOf();
    Roaring64NavigableMap taskIdBitmap = Roaring64NavigableMap.bitmapOf(0);
    writeTestData(writeHandler, 10, 30, 0, expectedData, blockIdBitmap);

    // test with different indexReadLimit to validate result
    ShuffleReadClientImpl readClient = new ShuffleReadClientImpl(StorageType.HDFS.name(), ""appId"", 0, 1, 1, 1,
        10, 1000, basePath, blockIdBitmap, taskIdBitmap, Lists.newArrayList(), new Configuration());

    TestUtils.validateResult(readClient, expectedData);
    readClient.checkProcessedBlockIds();
    readClient.close();

    readClient = new ShuffleReadClientImpl(StorageType.HDFS.name(), ""appId"", 0, 1, 2, 1,
        10, 1000, basePath, blockIdBitmap, taskIdBitmap, Lists.newArrayList(), new Configuration());

    TestUtils.validateResult(readClient, expectedData);
    readClient.checkProcessedBlockIds();
    readClient.close();

    readClient = new ShuffleReadClientImpl(StorageType.HDFS.name(), ""appId"", 0, 1, 3, 1,
        10, 1000, basePath, blockIdBitmap, taskIdBitmap, Lists.newArrayList(), new Configuration());

    TestUtils.validateResult(readClient, expectedData);
    readClient.checkProcessedBlockIds();
    readClient.close();

    readClient = new ShuffleReadClientImpl(StorageType.HDFS.name(), ""appId"", 0, 1, 10, 1,
        10, 1000, basePath, blockIdBitmap, taskIdBitmap, Lists.newArrayList(), new Configuration());

    TestUtils.validateResult(readClient, expectedData);
    readClient.checkProcessedBlockIds();
    readClient.close();

    readClient = new ShuffleReadClientImpl(StorageType.HDFS.name(), ""appId"", 0, 1, 11, 1,
        10, 1000, basePath, blockIdBitmap, taskIdBitmap, Lists.newArrayList(), new Configuration());

    TestUtils.validateResult(readClient, expectedData);
    readClient.checkProcessedBlockIds();
    readClient.close();
  }
",non-flaky,5
112713,hwang-pku_ormlite-core,BaseConnectionSourceTest.testSaveDifferentConnection,"	@Test(expected = SQLException.class)
	public void testSaveDifferentConnection() throws Exception {
		OurConnectionSource cs = new OurConnectionSource();
		DatabaseConnection conn = cs.getReadOnlyConnection(null);
		cs.saveSpecialConnection(conn);
		cs.saveSpecialConnection(createMock(DatabaseConnection.class));
		cs.close();
	}
",non-flaky,5
114098,aws_aws-sdk-java-v2,TableSchemaTest.fromImmutable_constructsImmutableTableSchema,"    @Test
    public void fromImmutable_constructsImmutableTableSchema() {
        ImmutableTableSchema<SimpleImmutable> immutableTableSchema =
            TableSchema.fromImmutableClass(SimpleImmutable.class);

        assertThat(immutableTableSchema).isNotNull();
    }
",non-flaky,5
104669,apache_pinot,StarTreeClusterIntegrationTest.testPredicateOnMetrics,"  @Test
  public void testPredicateOnMetrics()
      throws Exception {
    String starQuery;

    // Query containing predicate on one metric only
    starQuery = ""SELECT SUM(DepDelayMinutes) FROM myStarTable WHERE DepDelay > 0"";
    testStarQuery(starQuery);
    starQuery = ""SELECT SUM(DepDelayMinutes) FROM myStarTable WHERE DepDelay BETWEEN 0 and 10000"";
    testStarQuery(starQuery);

    // Query containing predicate on multiple metrics
    starQuery = ""SELECT SUM(DepDelayMinutes) FROM myStarTable WHERE DepDelay > 0 AND ArrDelay > 0"";
    testStarQuery(starQuery);

    // Query containing predicate on multiple metrics and dimensions
    starQuery =
        ""SELECT SUM(DepDelayMinutes) FROM myStarTable WHERE DepDelay > 0 AND ArrDelay > 0 AND OriginStateName = ""
            + ""'Massachusetts'"";
    testStarQuery(starQuery);
  }
",non-flaky,5
21180,androidx_androidx,SimplePreferenceComparisonCallbackTest.testDetached,"    @Test
    public void testDetached() throws Exception {
        mPref1.onDetached();
        mPref1.onAttached();
        assertFalse(""Compare same, detached"",
                mComparisonCallback.arePreferenceContentsTheSame(mPref1, mPref1));
    }
",non-flaky,5
137132,spring-projects_spring-framework,AbstractMethodMetadataTests.getAnnotationAttributesReturnsAttributes,"	@Test
	public void getAnnotationAttributesReturnsAttributes() {
		assertThat(getTagged(WithAnnotationAttributes.class).getAnnotationAttributes(
				AnnotationAttributes.class.getName())).containsOnly(entry(""name"", ""test""),
						entry(""size"", 1));
	}
",non-flaky,5
70814,apache_kafka,PluginsTest.shouldInstantiateAndConfigureDefaultHeaderConverter,"    @Test
    public void shouldInstantiateAndConfigureDefaultHeaderConverter() {
        props.remove(WorkerConfig.HEADER_CONVERTER_CLASS_CONFIG);
        createConfig();

        // Because it's not explicitly set on the supplied configuration, the logic to use the current classloader for the connector
        // will exit immediately, and so this method always returns null
        HeaderConverter headerConverter = plugins.newHeaderConverter(config,
                                                                     WorkerConfig.HEADER_CONVERTER_CLASS_CONFIG,
                                                                     ClassLoaderUsage.CURRENT_CLASSLOADER);
        assertNull(headerConverter);
        // But we should always find it (or the worker's default) when using the plugins classloader ...
        headerConverter = plugins.newHeaderConverter(config,
                                                     WorkerConfig.HEADER_CONVERTER_CLASS_CONFIG,
                                                     ClassLoaderUsage.PLUGINS);
        assertNotNull(headerConverter);
        assertTrue(headerConverter instanceof SimpleHeaderConverter);
    }
",non-flaky,5
99795,apache_cassandra,MessagingServiceTest.listenOptionalSecureConnectionWithBroadcastAddr,"    @Test
    public void listenOptionalSecureConnectionWithBroadcastAddr() throws InterruptedException
    {
        ServerEncryptionOptions serverEncryptionOptions = new ServerEncryptionOptions()
                                                          .withOptional(true);
        listen(serverEncryptionOptions, true);
    }
",non-flaky,5
113741,salesforce_reactive-grpc,ContextPropagationIntegrationTest.ServerAcceptsContext,"    @Test
    public void ServerAcceptsContext() {
        ReactorGreeterGrpc.ReactorGreeterStub stub = ReactorGreeterGrpc.newReactorStub(channel);

        StepVerifier.create(worldReq.compose(stub::sayHello).map(HelloResponse::getMessage))
                .expectNext(""Hello World"")
                .verifyComplete();
        assertThat(svc.getReceivedCtxValue()).isEqualTo(""ServerAcceptsContext"");
    }
",non-flaky,5
60938,apache_druid,LongMaxAveragerTest.testComputeResult,"  @Test
  public void testComputeResult()
  {
    BaseAverager<Number, Long> avg = new LongMaxAverager(3, ""test"", ""field"", 1);

    Assert.assertEquals(Long.MIN_VALUE, (long) avg.computeResult());

    avg.addElement(Collections.singletonMap(""field"", -1000000L), new HashMap<>());
    Assert.assertEquals(-1000000, (long) avg.computeResult());

    avg.addElement(Collections.singletonMap(""field"", 1L), new HashMap<>());
    Assert.assertEquals(1, (long) avg.computeResult());

    avg.addElement(Collections.singletonMap(""field"", 1), new HashMap<>());
    Assert.assertEquals(1, (long) avg.computeResult());

    avg.addElement(Collections.singletonMap(""field"", 5L), new HashMap<>());
    avg.addElement(Collections.singletonMap(""field"", 3L), new HashMap<>());
    avg.addElement(Collections.singletonMap(""field"", 2L), new HashMap<>());
    Assert.assertEquals(5, (long) avg.computeResult());

    avg.skip();
    Assert.assertEquals(3, (long) avg.computeResult());
  }
",non-flaky,5
162440,testcontainers_testcontainers-java,DockerfileContainerTest.simpleDslTest,"    @Test
    public void simpleDslTest() throws IOException {
        String address = String.format(""http://%s:%s"", dslContainer.getContainerIpAddress(), dslContainer.getMappedPort(80));

        CloseableHttpClient httpClient = HttpClientBuilder.create().build();
        HttpGet get = new HttpGet(address);

        try (CloseableHttpResponse response = httpClient.execute(get)) {
            assertEquals(""A container built from a dockerfile can run nginx as expected, and returns a good status code"",
                            200,
                            response.getStatusLine().getStatusCode());
            assertTrue(""A container built from a dockerfile can run nginx as expected, and returns an expected Server header"",
                            response.getHeaders(""Server"")[0].getValue().contains(""nginx""));
        }
    }
",non-flaky,5
84657,apache_zookeeper,ZooKeeperTest.testCreateCommandWithoutPath,"    @Test
    public void testCreateCommandWithoutPath() throws Exception {
        testInvalidCommand(""create"", 1);
    }
",non-flaky,5
77446,opensearch-project_OpenSearch,DependencyLicensesTaskTests.givenProjectWithANoticeButWithoutTheDependencyThenShouldThrowException,"    @Test
    public void givenProjectWithANoticeButWithoutTheDependencyThenShouldThrowException() throws Exception {
        expectedException.expect(GradleException.class);
        expectedException.expectMessage(containsString(""Unused notice ""));

        project.getDependencies().add(""compile"", dependency);

        File licensesDir = getLicensesDir(project);
        createAllDefaultDependencyFiles(licensesDir, ""groovy-all"");
        createFileIn(licensesDir, ""non-declared-NOTICE.txt"", """");

        task.get().checkDependencies();
    }
",non-flaky,5
177952,aosp-mirror_platform_frameworks_support,FileProviderTest.testStrategyUriSimple,"    @Test
    public void testStrategyUriSimple() throws Exception {
        final SimplePathStrategy strat = new SimplePathStrategy(""authority"");
        strat.addRoot(""tag"", mContext.getFilesDir());

        File file = buildPath(mContext.getFilesDir(), ""file.test"");
        assertEquals(""content://authority/tag/file.test"",
                strat.getUriForFile(file).toString());

        file = buildPath(mContext.getFilesDir(), ""subdir"", ""file.test"");
        assertEquals(""content://authority/tag/subdir/file.test"",
                strat.getUriForFile(file).toString());

        file = buildPath(Environment.getExternalStorageDirectory(), ""file.test"");
        try {
            strat.getUriForFile(file);
            fail(""somehow got uri for file outside roots?"");
        } catch (IllegalArgumentException e) {
        }
    }
",non-flaky,5
20984,NationalSecurityAgency_timely,SuggestResponseTest.testSuggestResponseEmpty,"    @Test
    public void testSuggestResponseEmpty() throws Exception {
        SuggestResponse response = new SuggestResponse();
        String r = JsonUtil.getObjectMapper().writeValueAsString(response);
        Assert.assertEquals(""[]"", r);
    }
",non-flaky,5
20962,NationalSecurityAgency_timely,TagMatchingTest.testRegex2,"    @Test
    public void testRegex2() throws Exception {
        String tags = ""tag1=value1,tag2=value2,tag3=value3"";
        StringBuffer pattern = new StringBuffer();
        pattern.append(""(^|.*,)"");
        pattern.append(""tag2"");
        pattern.append(""="");
        pattern.append(""value\\d"");
        pattern.append(""(,.*|$)"");
        Pattern p = Pattern.compile(pattern.toString());
        assertTrue(p.matcher(tags).matches());
    }
",non-flaky,5
77554,dropwizard_dropwizard,DropwizardAppExtensionWithExplicitTest.run,"    @Test
        public void run(TestConfiguration configuration, Environment environment) throws Exception {
            environment.jersey().register(new TestResource(configuration.getMessage()));
        }
",non-flaky,5
177973,aosp-mirror_platform_frameworks_support,ColorUtilsTest.testLABToXYZ,"    @Test
    public void testLABToXYZ() {
        for (TestEntry entry : sEntryList) {
            verifyLABToXYZ(entry.lab, entry.xyz);
        }
    }
",non-flaky,5
113761,salesforce_reactive-grpc,GrpcRetryTest.manyToManyRetryAfter,"    @Test
    public void manyToManyRetryAfter() {
        Flux<Integer> test = newThreeErrorFlux()
                .<Integer>compose(GrpcRetry.ManyToMany.retryAfter(Function.identity(), Duration.ofMillis(10)));

        StepVerifier.create(test)
                .expectNext(0)
                .expectComplete()
                .verify(Duration.ofSeconds(1));
    }
",non-flaky,5
77659,pholser_junit-quickcheck,InstantPropertyParameterTypesTest.shouldHold,"    @Test public void malformedMax() {
        @Property public void shouldHold(
            @InRange(min = ""06/01/2011T23:59:59.999999999Z"", max = ""*&@^#%$"") Instant i) {
        }
",non-flaky,5
179444,abel533_Mapper,AggregationMapperTest.testMax,"    @Test
    public void testMax() {
        SqlSession sqlSession = getSqlSession();
        try {
            UserMapper mapper = sqlSession.getMapper(UserMapper.class);
            AggregateCondition aggregateCondition = AggregateCondition.builder().
                    aggregateBy(""id"").aliasName(""aggregation"").aggregateType(AggregateType.MAX).groupBy(""role"");
            Example example = new Example(User.class);
            example.setOrderByClause(""role desc"");
            List<User> m = mapper.selectAggregationByExample(example, aggregateCondition);
            Assert.assertEquals(2, m.size());
            Assert.assertEquals(new Long(6), m.get(0).getAggregation());
            Assert.assertEquals(new Long(3), m.get(1).getAggregation());
        } finally {
            sqlSession.close();
        }
    }
",non-flaky,5
106619,Alluxio_alluxio,AlluxioJniFuseFileSystemTest.getattr,"  @Test
  public void getattr() throws Exception {
    // set up status
    FileInfo info = new FileInfo();
    info.setLength(4 * Constants.KB + 1);
    info.setLastModificationTimeMs(1000);
    String userName = System.getProperty(""user.name"");
    info.setOwner(userName);
    info.setGroup(AlluxioFuseUtils.getGroupName(userName));
    info.setFolder(true);
    info.setMode(123);
    info.setCompleted(true);
    URIStatus status = new URIStatus(info);

    // mock fs
    when(mFileSystem.getStatus(any(AlluxioURI.class))).thenReturn(status);

    FileStat stat = FileStat.of(ByteBuffer.allocateDirect(256));
    assertEquals(0, mFuseFs.getattr(""/foo"", stat));
    assertEquals(status.getLength(), stat.st_size.longValue());
    assertEquals(9, stat.st_blocks.intValue());
    assertEquals(status.getLastModificationTimeMs() / 1000, stat.st_ctim.tv_sec.get());
    assertEquals((status.getLastModificationTimeMs() % 1000) * 1000,
        stat.st_ctim.tv_nsec.longValue());
    assertEquals(status.getLastModificationTimeMs() / 1000, stat.st_mtim.tv_sec.get());
    assertEquals((status.getLastModificationTimeMs() % 1000) * 1000,
        stat.st_mtim.tv_nsec.longValue());
    assertEquals(AlluxioFuseUtils.getUid(System.getProperty(""user.name"")), stat.st_uid.get());
    assertEquals(AlluxioFuseUtils.getGid(System.getProperty(""user.name"")), stat.st_gid.get());
    assertEquals(123 | FileStat.S_IFDIR, stat.st_mode.intValue());
  }
",non-flaky,5
156439,apache_commons-lang,DateUtilsFragmentTest.testHourOfDayFragmentInLargerUnitWithDate,"    @Test
    public void testHourOfDayFragmentInLargerUnitWithDate() {
        assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.HOUR_OF_DAY));
        assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.HOUR_OF_DAY));
    }
",non-flaky,5
110121,Wikidata_wikidata-toolkit,ClientTest.testSitesAction,"	@Test
	public void testSitesAction() throws ParseException, IOException {
		String[] args = new String[] { ""-a"", ""rdf"", ""--rdftasks"",
				""items,labels"" };
		Client client = new Client(mockDpc, args);
		client.performActions();

		Mockito.verify(mockDpc).processDump(Mockito.<MwDumpFile> any());
		Mockito.verify(mockDpc).getSitesInformation();
	}
",non-flaky,5
26732,MundaneImmortal_pair-distribution-app,OpsPairsCombinationsTest.testIsRotationTimeForSameWeek,"	@Test
	public void testIsRotationTimeForSameWeek() {
		List<Developer> standardDevs = getStandardDevs();
		DayPairs pairs = new DayPairs();
		pairs.setDate(new Date());
		pairs.addPair(""track1"", new Pair(Arrays.asList(standardDevs.get(0), standardDevs.get(1)), true, ""track1""));
		
		OpsPairCombinations devPairCombinations = new OpsPairCombinations(Arrays.asList(pairs));
		Company company = new Company(""myCompany"");
		company.setDevOpsRotationStrategy(""weekly"");
		devPairCombinations.setCompany(company);
		
		assertThat(devPairCombinations.isRotationTime(Arrays.asList(""track1""), standardDevs, false), is(false));
	}
",non-flaky,5
98619,nutzam_nutz,El2Test.test_base64,"    @Test
    public void test_base64(){
        Context ctx = Lang.context();
        
        El el = new El(""base64('ä¸­æ,è±æabc,ç«ææ((%&(*')"");
        assertEquals(Base64.encodeToString(""ä¸­æ,è±æabc,ç«ææ((%&(*"".getBytes(Encoding.CHARSET_UTF8), false), el.eval(ctx));
        
        String str = Base64.encodeToString(""EEEä¸­æ"".getBytes(Encoding.CHARSET_UTF8), false);
        el = new El(""base64('decode', \'"" + str + ""\')"");
        assertEquals(""EEEä¸­æ"", el.eval(ctx));
    }
",non-flaky,5
98102,vert-x3_vertx-mongo-client,SocketSettingsParserTest.testSocketSettings,"  @Test
  public void testSocketSettings() {
    int connectTimeoutMS = Math.abs(TestUtils.randomInt());
    int socketTimeoutMS = Math.abs(TestUtils.randomInt());
    int receiveBufferSize = Math.abs(TestUtils.randomInt());
    int sendBufferSize = Math.abs(TestUtils.randomInt());

    JsonObject config = new JsonObject();
    config.put(""connectTimeoutMS"", connectTimeoutMS);
    config.put(""socketTimeoutMS"", socketTimeoutMS);
    config.put(""receiveBufferSize"", receiveBufferSize);
    config.put(""sendBufferSize"", sendBufferSize);

    SocketSettings settings = new SocketSettingsParser(null, config).settings();
    assertEquals(connectTimeoutMS, settings.getConnectTimeout(TimeUnit.MILLISECONDS));
    assertEquals(socketTimeoutMS, settings.getReadTimeout(TimeUnit.MILLISECONDS));
    assertEquals(receiveBufferSize, settings.getReceiveBufferSize());
    assertEquals(sendBufferSize, settings.getSendBufferSize());
  }
",non-flaky,5
195,Wikidata_wikidata-toolkit,20de6f7f12319f54eb962ff6e8357b3f5695d54d.createDirectoryManagerIoException,"@Test
public void createDirectoryManagerIoException() throws IOException {
    DirectoryManagerFactory.createDirectoryManager(
    ""/nonexisting-directory/123456789/hopefully"", true);
}",test order dependency,4
33718,alibaba_fastjson,JSONPathTest.isDigitFirst1,"  @Test
  public void isDigitFirst1() throws Throwable {
    // Arrange
    char ch = '2';
    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.JSONPath$JSONPathParser"");
    Method m = c.getDeclaredMethod(""isDigitFirst"", Reflector.forName(""char""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, ch);
    // Assert result
    Assert.assertEquals(true, retval);
  }
",non-flaky,5
114060,aws_aws-sdk-java-v2,EnhancedTypeTest.dequeOf_ReturnsRawClassOfDeque_WhenSpecifyingClass,"    @Test
    public void dequeOf_ReturnsRawClassOfDeque_WhenSpecifyingClass() {
        EnhancedType<Deque<String>> type = EnhancedType.dequeOf(String.class);

        assertThat(type.rawClass()).isEqualTo(Deque.class);
        assertThat(type.rawClassParameters()).containsExactly(EnhancedType.of(String.class));
    }
",non-flaky,5
77581,dropwizard_dropwizard,JerseyClientBuilderTest.usesAnExecutorServiceFromTheEnvironment,"    @Test
    public void usesAnExecutorServiceFromTheEnvironment() {
        final JerseyClientConfiguration configuration = new JerseyClientConfiguration();
        configuration.setMinThreads(7);
        configuration.setMaxThreads(532);
        configuration.setWorkQueueSize(16);

        final ExecutorServiceBuilder executorServiceBuilderMock = mock(ExecutorServiceBuilder.class);
        when(lifecycleEnvironment.executorService(""jersey-client-test-%d"")).thenReturn(executorServiceBuilderMock);

        when(executorServiceBuilderMock.minThreads(7)).thenReturn(executorServiceBuilderMock);
        when(executorServiceBuilderMock.maxThreads(532)).thenReturn(executorServiceBuilderMock);

        final ArgumentCaptor<ArrayBlockingQueue> arrayBlockingQueueCaptor =
                ArgumentCaptor.forClass(ArrayBlockingQueue.class);
        when(executorServiceBuilderMock.workQueue(arrayBlockingQueueCaptor.capture()))
                .thenReturn(executorServiceBuilderMock);
        when(executorServiceBuilderMock.build()).thenReturn(mock(ExecutorService.class));

        builder.using(configuration).using(environment).build(""test"");

        assertThat(arrayBlockingQueueCaptor.getValue().remainingCapacity()).isEqualTo(16);
    }
",non-flaky,5
112704,hwang-pku_ormlite-core,TransactionManagerTest.testSpringWiredRollBack,"	@Test
	public void testSpringWiredRollBack() throws Exception {
		if (connectionSource == null) {
			return;
		}
		TransactionManager mgr = new TransactionManager();
		mgr.setConnectionSource(connectionSource);
		mgr.initialize();
		final Dao<Foo, Integer> fooDao = createDao(Foo.class, true);
		testTransactionManager(mgr, new RuntimeException(""What!!  I protest!!""), fooDao);
	}
",non-flaky,5
77544,dropwizard_dropwizard,ResourceTestRuleTest.testDefaultConstraintViolation,"    @Test
    public void testDefaultConstraintViolation() {
        assertThat(resourceTestRule.target(""/person/blah/index"")
                .queryParam(""ind"", -1).request()
                .get().readEntity(String.class))
                .isEqualTo(""{\""errors\"":[\""query param ind must be greater than or equal to 0\""]}"");
    }
",non-flaky,5
137077,spring-projects_spring-framework,AbstractAnnotationMetadataTests.verifyToString,"	@Test
	public void verifyToString() throws Exception {
		assertThat(get(TestClass.class).toString()).isEqualTo(TestClass.class.getName());
	}
",non-flaky,5
176793,ctco_cukes,ContextInflaterTest.testInflateGroups_multipleSameExist,"    @Test
    public void testInflateGroups_multipleSameExist() throws Exception {
        doReturn(Optional.of(""foo"")).when(world).get(""foo"");
        String value = inflater.inflateGroups(""{(foo)} {(foo)}"", Sets.newHashSet(""foo""));
        assertThat(value, equalTo(""foo foo""));
    }
",non-flaky,5
97755,vojtechhabarta_typescript-generator,ExtensionTest.getFeatures,"    @Test
    public void testBeforeTsExtension() throws Exception {
        final Settings settings = TestUtils.settings();

        settings.extensions.add(new Extension() {

            @Override
            public EmitterExtensionFeatures getFeatures() {
                return new EmitterExtensionFeatures();
            }
",non-flaky,5
137118,spring-projects_spring-framework,AbstractMethodMetadataTests.getDeclaringClassReturnsDeclaringClass,"	@Test
	public void getDeclaringClassReturnsDeclaringClass() {
		assertThat(getTagged(WithMethod.class).getDeclaringClassName()).isEqualTo(
				WithMethod.class.getName());
	}
",non-flaky,5
84580,apache_zookeeper,LeaderElectionSupportTest.testGetLeaderHostName,"    @Test
    public void testGetLeaderHostName() throws Exception {
        LeaderElectionSupport electionSupport = createLeaderElectionSupport();

        electionSupport.start();

        // Sketchy: We assume there will be a leader (probably us) in 3 seconds.
        Thread.sleep(3000);

        String leaderHostName = electionSupport.getLeaderHostName();

        assertNotNull(leaderHostName);
        assertEquals(""foohost"", leaderHostName);

        electionSupport.stop();
    }
",non-flaky,5
97723,vojtechhabarta_typescript-generator,FullyQualifiedNamesTest.test,"    @Test
    public void test() {
        final Settings settings = TestUtils.settings();
        settings.outputFileType = TypeScriptFileType.implementationFile;
        settings.mapClasses = ClassMapping.asClasses;
        settings.mapPackagesToNamespaces = true;
        final String output = new TypeScriptGenerator(settings).generateTypeScript(Input.from(D.class));
        final String expected = """"
                + ""namespace cz.habarta.typescript.generator.p2 {\n""
                + ""\n""
                + ""    export class D {\n""
                + ""        a: cz.habarta.typescript.generator.p1.A;\n""
                + ""        b: cz.habarta.typescript.generator.p2.B;\n""
                + ""        c: cz.habarta.typescript.generator.p1.C;\n""
                + ""        e: cz.habarta.typescript.generator.p1.E;\n""
                + ""    }\n""
                + ""\n""
                + ""}\n""
                + ""\n""
                + ""namespace cz.habarta.typescript.generator.p1 {\n""
                + ""\n""
                + ""    export class A {\n""
                + ""        sa: string;\n""
                + ""    }\n""
                + ""\n""
                + ""}\n""
                + ""\n""
                + ""namespace cz.habarta.typescript.generator.p2 {\n""
                + ""\n""
                + ""    export class B extends cz.habarta.typescript.generator.p1.A {\n""
                + ""        sb: string;\n""
                + ""    }\n""
                + ""\n""
                + ""}\n""
                + ""\n""
                + ""namespace cz.habarta.typescript.generator.p1 {\n""
                + ""\n""
                + ""    export class C extends cz.habarta.typescript.generator.p2.B {\n""
                + ""        sc: string;\n""
                + ""    }\n""
                + ""\n""
                + ""}\n""
                + ""\n""
                + ""namespace cz.habarta.typescript.generator.p1 {\n""
                + ""\n""
                + ""    export type E = \""Left\"" | \""Right\"";\n""
                + ""\n""
                + ""}"";
        Assert.assertEquals(expected.trim(), output.trim());
    }
",non-flaky,5
98673,nutzam_nutz,UploadingUnitTest.test_limit_file_size_ok,"    @Test
    public void test_limit_file_size_ok() throws UploadException {
        MockHttpServletRequest req = Mock.servlet.request();
        req.setPathInfo(""/nutz/junit/uploading"");
        File blue = Files.findFile(""org/nutz/mvc/upload/files/quick/blue.png"");

        MultipartInputStream ins = Mock.servlet.insmulti(charset);
        ins.append(""blue"", blue);
        req.setInputStream(ins);
        req.init();

        /*
         * æä»¶è¶å¤§ï¼ä¼éå¶
         */
        Uploading up = UploadUnit.TYPE.born();
        up.parse(req, UploadingContext.create(tmps)
                                      .setBufferSize(1024)
                                      .setMaxFileSize(19152));
    }
",non-flaky,5
110114,Wikidata_wikidata-toolkit,RdfSerializationActionTest.testDefaultsNoTasks,"	@Test
	public void testDefaultsNoTasks() {
		String[] args = new String[] { ""-a"", ""rdf"", ""--stdout"" };
		DumpProcessingOutputAction action = DumpProcessingOutputActionTest
				.getActionFromArgs(args);
		action.open();
		action.close();

		assertTrue(action instanceof RdfSerializationAction);
		assertFalse(action.needsSites());
		assertFalse(action.isReady());
	}
",non-flaky,5
59633,looly_hutool,TokenizerUtilTest.createEngineTest,"	@Test
	public void createEngineTest() {
		// é»è®¤åè¯å¼æï¼æ­¤å¤ä¸ºAnsj
		TokenizerEngine engine = TokenizerUtil.createEngine();
		Result result = engine.parse(text);
		checkResult(result);
	}
",non-flaky,5
53137,cloudfoundry_uaa,UaaMetricsEmitterTests.auditService_metricValues_areNull,"    @Test
    public void auditService_metricValues_areNull() throws Exception {
        mBeanMap1.put(""user_authentication_count"", null);
        Mockito.when(metricsUtils.pullUpMap(""cloudfoundry.identity"", ""*"", server)).thenReturn((Map)mBeanMap2);
        uaaMetricsEmitter.emitMetrics();
        Mockito.verify(statsDClient).gauge(""audit_service.user_not_found_count"", 1);
        Mockito.verify(statsDClient, times(6)).gauge(anyString(), anyLong());
    }
",non-flaky,5
33667,alibaba_fastjson,TestISO8601Date.testBug1884,"    @Test
    public void testBug1884() {
        Calendar cale = Calendar.getInstance();
        cale.clear();
        cale.setTimeZone( TimeZone.getTimeZone( ""GMT+7"" ) );
        cale.set( 2018, Calendar.MAY, 31, 19, 13, 42 );
        Date date = cale.getTime();

        String s1 = ""{date: \""2018-05-31T19:13:42+07:00\""}""; // éè¯¯ç
        String s2 = ""{date: \""2018-05-31T19:13:42.000+07:00\""}""; // æ­£ç¡®ç
        Date date1 = JSON.parseObject( s1, JSONObject.class ).getDate( ""date"" );
        Date date2 = JSON.parseObject( s2, JSONObject.class ).getDate( ""date"" );
        assertEquals(date1, date2);
        assertEquals(date, date1);
        assertEquals(date, date2);
    }
",non-flaky,5
114063,aws_aws-sdk-java-v2,EnhancedTypeTest.sortedSetOf_ReturnsRawClassOfDeque_WhenSpecifyingEnhancedType,"    @Test
    public void sortedSetOf_ReturnsRawClassOfDeque_WhenSpecifyingEnhancedType() {
        EnhancedType<SortedSet<String>> type = EnhancedType.sortedSetOf(EnhancedType.of(String.class));

        assertThat(type.rawClass()).isEqualTo(SortedSet.class);
        assertThat(type.rawClassParameters()).containsExactly(EnhancedType.of(String.class));
    }
",non-flaky,5
135048,undertow-io_undertow,NetworkUtilsAddressParsingTestCase.testIpV6AddressWithLeadingZero,"    @Test(expected = IOException.class)
    public void testIpV6AddressWithLeadingZero() throws IOException {
        NetworkUtils.parseIpv6Address(""2001:1db8:100:03:6:ff00:42:8329"");
    }
",non-flaky,5
60946,apache_druid,RowBucketIterableTest.testMissingDaysAtBegining,"  @Test
  public void testMissingDaysAtBegining()
  {
    List<Row> expectedDay1 = Collections.emptyList();
    List<Row> expectedDay2 = Collections.singletonList(JAN_2_M_10);

    intervals = new ArrayList<>();
    intervals.add(INTERVAL_JAN_1_2);

    rows = new ArrayList<>();
    rows.add(JAN_2_M_10);

    Sequence<Row> seq = Sequences.simple(rows);
    RowBucketIterable rbi = new RowBucketIterable(seq, intervals, ONE_DAY);
    Iterator<RowBucket> iter = rbi.iterator();

    RowBucket actual = iter.next();
    Assert.assertEquals(JAN_1, actual.getDateTime());
    Assert.assertEquals(expectedDay1, actual.getRows());

    actual = iter.next();
    Assert.assertEquals(JAN_2, actual.getDateTime());
    Assert.assertEquals(expectedDay2, actual.getRows());
  }
",non-flaky,5
33716,alibaba_fastjson,JSONPathTest.eq1,"  @Test
  public void eq1() throws Throwable {
    // Arrange
    Object a = -1;
    Object b = null;
    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.JSONPath"");
    Method m = c.getDeclaredMethod(""eq"", Reflector.forName(""java.lang.Object""), Reflector.forName(""java.lang.Object""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, a, b);
    // Assert result
    Assert.assertEquals(false, retval);
  }
",non-flaky,5
156117,soot-oss_soot,AbstractLambdaMetaFactoryCGTest.markerInterfaces,"  @Test
  public void markerInterfaces() {
    String testClass = ""soot.lambdaMetaFactory.MarkerInterfaces"";

    final SootMethod target
        = prepareTarget(methodSigFromComponents(testClass, TEST_METHOD_RET, TEST_METHOD_NAME), testClass);

    final CallGraph cg = Scene.v().getCallGraph();

    final String metaFactoryClass = getMetaFactoryNameLambda(testClass, TEST_METHOD_NAME);

    final SootMethod bootstrap = Scene.v()
        .getMethod(methodSigFromComponents(metaFactoryClass, ""java.util.function.Supplier"", ""bootstrap$"", testClass));
    final SootMethod metaFactoryConstructor
        = Scene.v().getMethod(methodSigFromComponents(metaFactoryClass, ""void"", ""<init>"", testClass));
    final SootMethod get = Scene.v().getMethod(methodSigFromComponents(metaFactoryClass, ""java.lang.Object"", ""get""));
    final SootMethod lambdaBody
        = Scene.v().getMethod(methodSigFromComponents(testClass, ""java.lang.Object"", ""lambda$main$0""));
    final SootMethod getString = Scene.v().getMethod(methodSigFromComponents(testClass, ""java.lang.String"", ""getString""));

    final List<Edge> edgesFromTarget = newArrayList(cg.edgesOutOf(target));

    assertTrue(""There should be an edge from main to the bootstrap method of the synthetic LambdaMetaFactory"",
        edgesFromTarget.stream().anyMatch(e -> e.tgt().equals(bootstrap) && e.isStatic()));
    assertTrue(""There should be an edge to the constructor of the LambdaMetaFactory in the bootstrap method"",
        newArrayList(cg.edgesOutOf(bootstrap)).stream()
            .anyMatch(e -> e.tgt().equals(metaFactoryConstructor) && e.isSpecial()));
    assertTrue(
        ""There should be an interface invocation on the synthetic LambdaMetaFactory's implementation of the functional interface in the main method"",
        edgesFromTarget.stream().anyMatch(e -> e.getTgt().equals(get) && e.kind() == Kind.INTERFACE));
    assertTrue(
        ""There should be a virtual call to the lambda body implementation in the generated functional interface implementation of the synthetic LambdaMetaFactory"",
        newArrayList(cg.edgesOutOf(get)).stream().anyMatch(e -> e.getTgt().equals(lambdaBody) && e.isVirtual()));

    assertTrue(""There should be a virtual call to the getString method in actual lambda body implementation"",
        newArrayList(cg.edgesOutOf(lambdaBody)).stream().anyMatch(e -> e.getTgt().equals(getString) && e.isVirtual()));

    validateAllBodies(target.getDeclaringClass(), bootstrap.getDeclaringClass());
  }
",non-flaky,5
89319,apache_samza,TestKafkaSystemConsumer.testConfigValidations,"  @Test
  public void testConfigValidations() {

    final KafkaSystemConsumer consumer = createConsumer(FETCH_THRESHOLD_MSGS, FETCH_THRESHOLD_BYTES);

    consumer.start();
    // should be no failures
  }
",non-flaky,5
76957,Tencent_Firestorm,ConfigOptionTest.testBasicTypes,"  @Test
  public void testBasicTypes() {
    final ConfigOption<Integer> intConfig = ConfigOptions
        .key(""rss.key1"")
        .intType()
        .defaultValue(1000)
        .withDescription(""Int config key1"");
    assertSame(Integer.class, intConfig.getClazz());
    assertEquals(1000, (int) intConfig.defaultValue());
    assertEquals(""Int config key1"", intConfig.description());

    final ConfigOption<Long> longConfig = ConfigOptions
        .key(""rss.key2"")
        .longType()
        .defaultValue(1999L);
    assertTrue(longConfig.hasDefaultValue());
    assertEquals(1999L, (long) longConfig.defaultValue());

    final ConfigOption<String> stringConfig = ConfigOptions
        .key(""rss.key3"")
        .stringType()
        .noDefaultValue();
    assertFalse(stringConfig.hasDefaultValue());
    assertEquals("""", stringConfig.description());

    final ConfigOption<Boolean> booleanConfig = ConfigOptions
        .key(""key4"")
        .booleanType()
        .defaultValue(false)
        .withDescription(""Boolean config key"");
    assertFalse(booleanConfig.defaultValue());
    assertEquals(""Boolean config key"", booleanConfig.description());

    final ConfigOption<Integer> positiveInt = ConfigOptions
        .key(""key5"")
        .intType()
        .checkValue((v) -> {return v > 0;}, ""The value of key5 must be positive"")
        .defaultValue(1)
        .withDescription(""Positive integer key"");
    RssBaseConf conf = new RssBaseConf();
    conf.set(positiveInt, -1);
    boolean isException = false;
    try {
      conf.get(positiveInt);
    } catch (IllegalArgumentException ie) {
      isException = true;
      assertTrue(ie.getMessage().contains(""The value of key5 must be positive""));
    }
    assertTrue(isException);
    conf.set(positiveInt, 1);
    try {
      conf.get(positiveInt);
    } catch (IllegalArgumentException ie) {
      fail();
    }
  }
",non-flaky,5
178042,aosp-mirror_platform_frameworks_support,GuidedStepAttributesTest.testFocusDisabledOnActions,"    @Test
    public void testFocusDisabledOnActions() throws Throwable {

        Intent intent = new Intent();
        Resources res = mContext.getResources();

        final int NUM_SEARCH_ACTIONS = 10;
        final List<Integer> ACTIONS_WITH_DISABLED_FOCUS = new ArrayList<>(
                Arrays.asList(1, 3, 4, 5, 8));
        final int ACTION_ID_SEARCH = 1;
        List<Integer> EXPECTED_ACTIONS_ID_AFTER_EACH_SELECT = new ArrayList<>();

        // we will traverse actions from top to bottom and then back to the top
        for(int i = 0; i < NUM_SEARCH_ACTIONS; i++) {
            if (!ACTIONS_WITH_DISABLED_FOCUS.contains(i))
                EXPECTED_ACTIONS_ID_AFTER_EACH_SELECT.add(i);
        }
        for(int i = EXPECTED_ACTIONS_ID_AFTER_EACH_SELECT.size(); i-- != 0;) {
            EXPECTED_ACTIONS_ID_AFTER_EACH_SELECT.add(EXPECTED_ACTIONS_ID_AFTER_EACH_SELECT.get(i));
        }


        String title = ""Guided Actions Focusable Test"";
        String breadcrumb = ""Focusable Test Demo"";
        String description = """";
        GuidanceStylist.Guidance guidance = new GuidanceStylist.Guidance(title, description,
                breadcrumb, null);

        List<GuidedAction> actionList = new ArrayList<>();
        for (int i = 0; i < NUM_SEARCH_ACTIONS; i++ ) {
            actionList.add(new GuidedAction.Builder(mContext)
                    .id(ACTION_ID_SEARCH)
                    .title(res.getString(R.string.search) + """" + i)
                    .description(res.getString(R.string.search_description) + i)
                    .build()
            );
        }
        for(int action_id : ACTIONS_WITH_DISABLED_FOCUS )
            actionList.get(action_id).setFocusable(false);

        GuidedStepAttributesTestFragment.GUIDANCE = guidance;
        GuidedStepAttributesTestFragment.ACTION_LIST = actionList;

        initActivity(intent);

        int lastSelectedActionId = -1;
        int selectIndex = 0;
        GuidedStepFragment mFragment = (GuidedStepFragment) mActivity.getGuidedStepTestFragment();
        int prevSelectedActionPosition = -1;
        int nextSelectedActionPosition = mFragment.getSelectedActionPosition();
        while ( nextSelectedActionPosition != prevSelectedActionPosition ) {
            lastSelectedActionId = mFragment.getSelectedActionPosition();
            assertTrue(res.getString(R.string.focusable_test_error_message,
                    actionList.get(lastSelectedActionId).getTitle()),
                    lastSelectedActionId == EXPECTED_ACTIONS_ID_AFTER_EACH_SELECT.get(selectIndex));
            selectIndex++;
            sendKey(KeyEvent.KEYCODE_DPAD_DOWN);
            prevSelectedActionPosition = nextSelectedActionPosition;
            nextSelectedActionPosition = mFragment.getSelectedActionPosition();
            Thread.sleep(TRANSITION_LENGTH);
        }

        prevSelectedActionPosition = -1;
        while ( nextSelectedActionPosition != prevSelectedActionPosition ) {
            lastSelectedActionId = mFragment.getSelectedActionPosition();
            assertTrue(res.getString(R.string.focusable_test_error_message,
                    actionList.get(lastSelectedActionId).getTitle()),
                    lastSelectedActionId == EXPECTED_ACTIONS_ID_AFTER_EACH_SELECT.get(selectIndex));
            selectIndex++;
            sendKey(KeyEvent.KEYCODE_DPAD_UP);
            prevSelectedActionPosition = nextSelectedActionPosition;
            nextSelectedActionPosition = mFragment.getSelectedActionPosition();
            Thread.sleep(TRANSITION_LENGTH);
        }

    }
",non-flaky,5
59632,looly_hutool,CglibUtilTest.copyTest,"	@Test
	public void copyTest() {
		SampleBean bean = new SampleBean();
		bean.setValue(""Hello world"");

		OtherSampleBean otherBean = new OtherSampleBean();
		CglibUtil.copy(bean, otherBean);
		Assert.assertEquals(""Hello world"", otherBean.getValue());

		OtherSampleBean otherBean2 = CglibUtil.copy(bean, OtherSampleBean.class);
		Assert.assertEquals(""Hello world"", otherBean2.getValue());
	}
",non-flaky,5
94789,ktuukkan_marine-api,AISMessage21ParserTest.getRegional,"    @Test
    public void getRegional() throws Exception {
        // ""00001010"" ?
        assertEquals(10, msg.getRegional());
    }
",non-flaky,5
135062,undertow-io_undertow,URLUtilsTestCase.testDecodingWithEncodedAndDecodedSlashAndSlashDecodingDisabled,"    @Test
    public void testDecodingWithEncodedAndDecodedSlashAndSlashDecodingDisabled() throws Exception {
        String url = ""http://localhost:3001/by-path/wild%20card/wild%28west%29/wild"" + spaceCode + ""wolf"";

        final String result = URLUtils.decode(url, Charset.defaultCharset().name(), false, new StringBuilder());
        assertEquals(""http://localhost:3001/by-path/wild card/wild(west)/wild"" + spaceCode + ""wolf"", result);
    }
",non-flaky,5
162723,OpenAPITools_openapi-generator,XmlItemTest.namespaceNumberTest,"    @Test
    public void namespaceNumberTest() {
        // TODO: test namespaceNumber
    }
",non-flaky,5
179430,abel533_Mapper,RegisterMapperTest.testHashRegisterMapper,"    @Test
    public void testHashRegisterMapper(){
        MapperHelper mapperHelper = new MapperHelper();
        Assert.assertTrue(mapperHelper.isExtendCommonMapper(UserMapper.class));
    }
",non-flaky,5
76999,Tencent_Firestorm,ShuffleServerWithHdfsTest.hdfsWriteReadTest,"  @Test
  public void hdfsWriteReadTest() {
    String appId = ""app_hdfs_read_write"";
    String dataBasePath = HDFS_URI + ""rss/test"";
    RssRegisterShuffleRequest rrsr = new RssRegisterShuffleRequest(appId, 0,
        Lists.newArrayList(new PartitionRange(0, 1)));
    shuffleServerClient.registerShuffle(rrsr);
    rrsr = new RssRegisterShuffleRequest(appId, 0, Lists.newArrayList(new PartitionRange(2, 3)));
    shuffleServerClient.registerShuffle(rrsr);

    Roaring64NavigableMap[] bitmaps = new Roaring64NavigableMap[4];
    Map<Long, byte[]> expectedData = Maps.newHashMap();
    Map<Integer, List<ShuffleBlockInfo>>  dataBlocks = createTestData(bitmaps, expectedData);
    Map<Integer, List<ShuffleBlockInfo>> partitionToBlocks = Maps.newHashMap();
    partitionToBlocks.put(0, dataBlocks.get(0));
    partitionToBlocks.put(1, dataBlocks.get(1));

    Map<Integer, Map<Integer, List<ShuffleBlockInfo>>> shuffleToBlocks = Maps.newHashMap();
    shuffleToBlocks.put(0, partitionToBlocks);

    RssSendShuffleDataRequest rssdr = new RssSendShuffleDataRequest(appId, 3, 1000, shuffleToBlocks);
    shuffleServerClient.sendShuffleData(rssdr);
    assertEquals(456, shuffleServers.get(0).getShuffleBufferManager().getUsedMemory());
    assertEquals(0, shuffleServers.get(0).getShuffleBufferManager().getPreAllocatedSize());
    RssSendCommitRequest rscr = new RssSendCommitRequest(appId, 0);
    shuffleServerClient.sendCommit(rscr);
    RssFinishShuffleRequest rfsr = new RssFinishShuffleRequest(appId, 0);

    ShuffleReadClientImpl readClient = new ShuffleReadClientImpl(StorageType.HDFS.name(),
        appId, 0, 0, 100, 2, 10, 1000,
        dataBasePath, bitmaps[0], Roaring64NavigableMap.bitmapOf(0), Lists.newArrayList(), new Configuration());
    assertNull(readClient.readShuffleBlockData());
    shuffleServerClient.finishShuffle(rfsr);

    partitionToBlocks.clear();
    partitionToBlocks.put(2, dataBlocks.get(2));
    shuffleToBlocks.clear();
    shuffleToBlocks.put(0, partitionToBlocks);
    rssdr = new RssSendShuffleDataRequest(appId, 3, 1000, shuffleToBlocks);
    shuffleServerClient.sendShuffleData(rssdr);
    assertEquals(0, shuffleServers.get(0).getShuffleBufferManager().getPreAllocatedSize());
    rscr = new RssSendCommitRequest(appId, 0);
    shuffleServerClient.sendCommit(rscr);
    rfsr = new RssFinishShuffleRequest(appId, 0);
    shuffleServerClient.finishShuffle(rfsr);

    partitionToBlocks.clear();
    partitionToBlocks.put(3, dataBlocks.get(3));
    shuffleToBlocks.clear();
    shuffleToBlocks.put(0, partitionToBlocks);
    rssdr = new RssSendShuffleDataRequest(appId, 3, 1000, shuffleToBlocks);
    shuffleServerClient.sendShuffleData(rssdr);
    rscr = new RssSendCommitRequest(appId, 0);
    shuffleServerClient.sendCommit(rscr);
    rfsr = new RssFinishShuffleRequest(appId, 0);
    shuffleServerClient.finishShuffle(rfsr);

    readClient = new ShuffleReadClientImpl(StorageType.HDFS.name(),
        appId, 0, 0, 100, 2, 10, 1000,
        dataBasePath, bitmaps[0], Roaring64NavigableMap.bitmapOf(0), Lists.newArrayList(), new Configuration());
    validateResult(readClient, expectedData, bitmaps[0]);

    readClient = new ShuffleReadClientImpl(StorageType.HDFS.name(),
        appId, 0, 1, 100, 2, 10, 1000,
        dataBasePath, bitmaps[1], Roaring64NavigableMap.bitmapOf(1), Lists.newArrayList(), new Configuration());
    validateResult(readClient, expectedData, bitmaps[1]);

    readClient = new ShuffleReadClientImpl(StorageType.HDFS.name(),
        appId, 0, 2, 100, 2, 10, 1000,
        dataBasePath, bitmaps[2], Roaring64NavigableMap.bitmapOf(2), Lists.newArrayList(), new Configuration());
    validateResult(readClient, expectedData, bitmaps[2]);

    readClient = new ShuffleReadClientImpl(StorageType.HDFS.name(),
        appId, 0, 3, 100, 2, 10, 1000,
        dataBasePath, bitmaps[3], Roaring64NavigableMap.bitmapOf(3), Lists.newArrayList(), new Configuration());
    validateResult(readClient, expectedData, bitmaps[3]);
  }
",non-flaky,5
30941,camunda-cloud_zeebe,ElasticsearchExporterTest.shouldUpdateLastPositionOnFlush,"  @Test
  public void shouldUpdateLastPositionOnFlush() {
    // given
    when(esClient.shouldFlush()).thenReturn(true);

    // when
    createAndOpenExporter();
    final Record record =
        testHarness.export(
            r ->
                r.getMetadata()
                    .setValueType(ValueType.PROCESS_INSTANCE)
                    .setRecordType(RecordType.EVENT));

    // then
    assertThat(testHarness.getController().getPosition()).isEqualTo(record.getPosition());
  }
",non-flaky,5
43071,trinodb_trino,BaseConnectorTest.testRollback,"    @Test
    public void testRollback()
    {
        skipTestUnless(hasBehavior(SUPPORTS_MULTI_STATEMENT_WRITES));

        String table = ""test_rollback_"" + randomTableSuffix();
        computeActual(format(""CREATE TABLE %s (x int)"", table));

        assertThatThrownBy(() ->
                inTransaction(session -> {
                    assertUpdate(session, format(""INSERT INTO %s VALUES (42)"", table), 1);
                    throw new RollbackException();
                }))
                .isInstanceOf(RollbackException.class);

        assertQuery(format(""SELECT count(*) FROM %s"", table), ""SELECT 0"");
    }
",non-flaky,5
99710,apache_cassandra,MultiResultLoggerTest.delegatesToAdditionalPrintStreams,"    @Test
    public void delegatesToAdditionalPrintStreams() throws Exception
    {
        ByteArrayOutputStream output = new ByteArrayOutputStream();
        PrintStream additionalPrintStream = new PrintStream(output, true);
        MultiResultLogger underTest = new MultiResultLogger(new PrintStream(NOOP));

        underTest.addStream(additionalPrintStream);
        underTest.println(""Very important result"");

        assertEquals(""Very important result\n"", output.toString());
    }
",non-flaky,5
76931,Tencent_Firestorm,RssShuffleReaderTest.readTest,"  @Test
  public void readTest() throws Exception {

    String basePath = HDFS_URI + ""readTest1"";
    HdfsShuffleWriteHandler writeHandler =
        new HdfsShuffleWriteHandler(""appId"", 0, 0, 0, basePath, ""test"", conf);
    HdfsShuffleWriteHandler writeHandler1 =
        new HdfsShuffleWriteHandler(""appId"", 0, 1, 1, basePath, ""test"", conf);

    Roaring64NavigableMap blockIdBitmap = Roaring64NavigableMap.bitmapOf();
    Roaring64NavigableMap taskIdBitmap = Roaring64NavigableMap.bitmapOf(0);
    Map<String, String> expectedData = Maps.newHashMap();
    Roaring64NavigableMap blockIdBitmap1 = Roaring64NavigableMap.bitmapOf();
    writeTestData(writeHandler, 2, 5, expectedData,
        blockIdBitmap, ""key"", KRYO_SERIALIZER, 0);



    TaskContext contextMock = mock(TaskContext.class);
    RssShuffleHandle handleMock = mock(RssShuffleHandle.class);
    ShuffleDependency dependencyMock = mock(ShuffleDependency.class);
    when(handleMock.getAppId()).thenReturn(""appId"");
    when(handleMock.getDependency()).thenReturn(dependencyMock);
    when(handleMock.getShuffleId()).thenReturn(1);
    when(dependencyMock.serializer()).thenReturn(KRYO_SERIALIZER);
    when(contextMock.attemptNumber()).thenReturn(1);
    when(contextMock.taskAttemptId()).thenReturn(1L);
    when(contextMock.taskMetrics()).thenReturn(new TaskMetrics());
    doNothing().when(contextMock).killTaskIfInterrupted();
    when(dependencyMock.aggregator()).thenReturn(Option.empty());
    when(dependencyMock.keyOrdering()).thenReturn(Option.empty());
    when(dependencyMock.mapSideCombine()).thenReturn(false);

    Map<Integer, Roaring64NavigableMap> partitionToExpectBlocks = Maps.newHashMap();
    partitionToExpectBlocks.put(0, blockIdBitmap);
    RssShuffleReader rssShuffleReaderSpy = spy(new RssShuffleReader<String, String>(
        0,
        1,
        0,
        Integer.MAX_VALUE,
        contextMock,
        handleMock,
        basePath,
        1000,
        conf,
        StorageType.HDFS.name(),
        1000,
        1,
        partitionToExpectBlocks,
        taskIdBitmap,
        new ShuffleReadMetrics()));
    validateResult(rssShuffleReaderSpy.read(), expectedData, 10);

    writeTestData(writeHandler1, 2, 4, expectedData,
        blockIdBitmap1, ""another_key"", KRYO_SERIALIZER, 1);
    partitionToExpectBlocks.put(1, blockIdBitmap1);
    RssShuffleReader rssShuffleReaderSpy1 = spy(new RssShuffleReader<String, String>(
        0,
        2,
        0,
        Integer.MAX_VALUE,
        contextMock,
        handleMock,
        basePath,
        1000,
        conf,
        StorageType.HDFS.name(),
        1000,
        2,
        partitionToExpectBlocks,
        taskIdBitmap,
        new ShuffleReadMetrics()));
    validateResult(rssShuffleReaderSpy1.read(), expectedData, 18);

    RssShuffleReader rssShuffleReaderSpy2 = spy(new RssShuffleReader<String, String>(
        0,
        2,
        0,
        Integer.MAX_VALUE,
        contextMock,
        handleMock,
        basePath,
        1000,
        conf,
        StorageType.HDFS.name(),
        1000,
        2,
        partitionToExpectBlocks,
        Roaring64NavigableMap.bitmapOf(),
        new ShuffleReadMetrics()));
    validateResult(rssShuffleReaderSpy2.read(), Maps.newHashMap(), 0);
  }
",non-flaky,5
98327,spotify_docker-client,DockerHostTest.testFromUnixSocket,"  @Test
  public void testFromUnixSocket() throws Exception {
    final String unixSocket = ""unix:///var/run/docker.sock"";
    final String certPath = ""/path/to/cert"";
    final URI unixSocketUri = new URI(unixSocket);

    final DockerHost dockerHost = DockerHost.from(unixSocket, certPath);
    assertThat(dockerHost.host(), equalTo(unixSocket));
    assertThat(dockerHost.uri(), equalTo(unixSocketUri));
    assertThat(dockerHost.bindUri(), equalTo(unixSocketUri));
    assertThat(dockerHost.port(), equalTo(0));
    assertThat(dockerHost.address(), equalTo(""localhost""));
    assertThat(dockerHost.dockerCertPath(), equalTo(certPath));
  }
",non-flaky,5
84597,apache_zookeeper,BinaryInputArchiveTest.testDouble,"    @Test
    public void testDouble() {
        final double expected = 3.14159f;
        final String tag = ""tag1"";
        final float delta = 1e-20f;
        checkWriterAndReader(
                (oa) -> oa.writeDouble(expected, tag),
                (ia) -> {
                    double actual = ia.readDouble(tag);
                    assertEquals(expected, actual, delta);
                }
        );
    }
",non-flaky,5
134007,CorfuDB_CorfuDB,NodeUpAndPartitionedIT.nodeUpAndPartitionedTest,"    @Test(timeout = 300000)
    public void nodeUpAndPartitionedTest() {
        workflow(wf -> {
            wf.deploy();

            CorfuCluster corfuCluster = wf.getUniverse()
                    .getGroup(wf.getFixture().data().getGroupParamByIndex(0).getName());

            CorfuClient corfuClient = corfuCluster.getLocalCorfuClient();

            CorfuTable<String, String> table = corfuClient
                    .createDefaultCorfuTable(DEFAULT_STREAM_NAME);
            for (int i = 0; i < DEFAULT_TABLE_ITER; i++) {
                table.put(String.valueOf(i), String.valueOf(i));
            }

            //Should fail the node with most link failures to unresponsive set
            // Deploy and bootstrap three nodes
            CorfuServer server0 = corfuCluster.getServerByIndex(0);
            CorfuServer server1 = corfuCluster.getServerByIndex(1);
            CorfuServer server2 = corfuCluster.getServerByIndex(2);

            long currEpoch = corfuClient.getLayout().getEpoch();

            log.info(""Stop server1"");
            server1.stop(Duration.ofSeconds(10));
            waitForNextEpoch(corfuClient, currEpoch + 1);
            assertThat(corfuClient.getLayout().getUnresponsiveServers())
                    .containsExactly(server1.getEndpoint());
            currEpoch++;

            // Partition the responsive server0 from both unresponsive server1
            // and responsive server2 and reconnect server 1. Wait for layout's unresponsive
            // servers to change After this, cluster becomes unavailable.
            // NOTE: cannot use waitForClusterDown() since the partition only happens on server side,
            // client can still connect to two nodes, write to table,
            // so system down handler will not be triggered.
            server0.disconnect(Arrays.asList(server1, server2));
            server1.start();

            waitForLayoutChange(l -> {
                List<String> unresponsive = l.getUnresponsiveServers();
                return unresponsive.size() == 1 && unresponsive.contains(server0.getEndpoint());
            }, corfuClient);

            // Verify server0 is unresponsive
            List<String> unresponsiveServers = corfuClient.getLayout().getUnresponsiveServers();
            assertThat(unresponsiveServers)
                    .as(""Wrong number of unresponsive servers: %s"", unresponsiveServers)
                    .containsExactly(server0.getEndpoint());
            currEpoch += 2;

            waitUninterruptibly(Duration.ofSeconds(20));

            // Verify cluster status. Cluster status should be DEGRADED after one node is
            // marked unresponsive
            ClusterStatusReport clusterStatusReport = corfuClient
                    .getManagementView()
                    .getClusterStatus();
            assertThat(clusterStatusReport.getClusterStatus()).isEqualTo(ClusterStatus.DEGRADED);

            // Heal all the link failures
            server0.reconnect(Arrays.asList(server1, server2));
            waitForNextEpoch(corfuClient, currEpoch + 1);
            currEpoch++;

            Duration sleepDuration = Duration.ofSeconds(1);
            // Verify cluster status is STABLE
            clusterStatusReport = corfuClient.getManagementView().getClusterStatus();
            while (!clusterStatusReport.getClusterStatus().equals(ClusterStatus.STABLE)) {
                clusterStatusReport = corfuClient.getManagementView().getClusterStatus();
                Sleep.sleepUninterruptibly(sleepDuration);
            }
            assertThat(clusterStatusReport.getClusterStatus()).isEqualTo(ClusterStatus.STABLE);

            Sleep.sleepUninterruptibly(Duration.ofSeconds(10));

            // Verify data path is working fine
            for (int i = 0; i < DEFAULT_TABLE_ITER; i++) {
                assertThat(table.get(String.valueOf(i))).isEqualTo(String.valueOf(i));
            }

            corfuClient.shutdown();
        });
    }
",non-flaky,5
60888,apache_druid,MaterializedViewSupervisorSpecTest.call,"  @Test
  public void testMaterializedViewSupervisorSpecCreated()
  {
    Exception ex = null;

    try {
      MaterializedViewSupervisorSpec spec = new MaterializedViewSupervisorSpec(
              ""wikiticker"",
              new DimensionsSpec(
                      Lists.newArrayList(
                              new StringDimensionSchema(""isUnpatrolled""),
                              new StringDimensionSchema(""metroCode""),
                              new StringDimensionSchema(""namespace""),
                              new StringDimensionSchema(""page""),
                              new StringDimensionSchema(""regionIsoCode""),
                              new StringDimensionSchema(""regionName""),
                              new StringDimensionSchema(""user"")
                      ),
                      null,
                      null
              ),
              new AggregatorFactory[]{
                  new CountAggregatorFactory(""count""),
                  new LongSumAggregatorFactory(""added"", ""added"")
              },
              HadoopTuningConfig.makeDefaultTuningConfig(),
              null,
              null,
              null,
              null,
              null,
              false,
              objectMapper,
              null,
              null,
              null,
              null,
              null,
              new MaterializedViewTaskConfig(),
              EasyMock.createMock(AuthorizerMapper.class),
              new NoopChatHandlerProvider(),
              new SupervisorStateManagerConfig()
      );
      Supervisor supervisor = spec.createSupervisor();
      Assert.assertTrue(supervisor instanceof MaterializedViewSupervisor);

      SupervisorTaskAutoScaler autoscaler = spec.createAutoscaler(supervisor);
      Assert.assertNull(autoscaler);

      try {
        supervisor.computeLagStats();
      }
      catch (Exception e) {
        Assert.assertTrue(e instanceof UnsupportedOperationException);
      }

      try {
        int count = supervisor.getActiveTaskGroupsCount();
      }
      catch (Exception e) {
        Assert.assertTrue(e instanceof UnsupportedOperationException);
      }

      Callable<Integer> noop = new Callable<Integer>() {
        @Override
        public Integer call()
        {
          return -1;
        }
",non-flaky,5
162729,OpenAPITools_openapi-generator,XmlItemTest.prefixNamespaceNumberTest,"    @Test
    public void prefixNamespaceNumberTest() {
        // TODO: test prefixNamespaceNumber
    }
",non-flaky,5
43109,trinodb_trino,BaseConnectorSmokeTest.ensureTestNamingConvention,"    @Test
    public void ensureTestNamingConvention()
    {
        // Enforce a naming convention to make code navigation easier.
        assertThat(getClass().getName())
                .endsWith(""ConnectorSmokeTest"");
    }
",non-flaky,5
53178,cloudfoundry_uaa,JsonDateSerializerTest.testFormatting,"    @Test
    public void testFormatting() throws IOException, ParseException {
        Date now = new Date();
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        JsonGenerator gen = new JsonFactory().createGenerator(bos);
        new JsonDateSerializer().serialize(now, gen, null);
        gen.close();
        Assert.assertEquals(String.format(""\""%s\"""", new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"").format(now)),
                bos.toString());
    }
",non-flaky,5
86110,graylog2_graylog2-server,NotificationFacadeTest.createNativeEntity,"    @Test
    public void createNativeEntity() {
        final EntityV1 entityV1 = createTestEntity();
        final JobDefinitionDto jobDefinitionDto = mock(JobDefinitionDto.class);

        when(jobDefinitionService.save(any(JobDefinitionDto.class))).thenReturn(jobDefinitionDto);
        final UserImpl kmerzUser = new UserImpl(mock(PasswordAlgorithmFactory.class), new Permissions(ImmutableSet.of()), ImmutableMap.of(""username"", ""kmerz""));
        when(userService.load(""kmerz"")).thenReturn(kmerzUser);

        final NativeEntity<NotificationDto> nativeEntity = facade.createNativeEntity(
            entityV1,
            ImmutableMap.of(),
            ImmutableMap.of(),
            ""kmerz"");
        assertThat(nativeEntity).isNotNull();

        final NotificationDto notificationDto = nativeEntity.entity();
        assertThat(notificationDto.title()).isEqualTo(""title"");
        assertThat(notificationDto.description()).isEqualTo(""descriptions"");
        assertThat(notificationDto.config().type()).isEqualTo(""http-notification-v1"");
    }
",non-flaky,5
137147,spring-projects_spring-framework,ToStringCreatorTests.toString,"	@BeforeEach
			public String toString() {
				return ""A"";
			}
",non-flaky,5
98598,nutzam_nutz,El2Test.field,"    @Test
    public void field() {
        class abc {
            @SuppressWarnings(""unused"")
            public String name = ""jk"";
        }
        Context context = Lang.context();
        context.set(""a"", new abc());
        assertEquals(""jk"", El.eval(context, ""a.name""));
        // è¿ä¸ªåè½æ¾å¼
        // assertFalse((Boolean)El.eval(""java.lang.Boolean.FALSE""));
        // assertFalse((Boolean)El.eval(""Boolean.FALSE""));
    }
",non-flaky,5
43100,trinodb_trino,AbstractTestIntegrationSmokeTest.testDescribeTable,"    @Test
    public void testDescribeTable()
    {
        MaterializedResult expectedColumns = MaterializedResult.resultBuilder(getSession(), VARCHAR, VARCHAR, VARCHAR, VARCHAR)
                .row(""orderkey"", ""bigint"", """", """")
                .row(""custkey"", ""bigint"", """", """")
                .row(""orderstatus"", ""varchar(1)"", """", """")
                .row(""totalprice"", ""double"", """", """")
                .row(""orderdate"", ""date"", """", """")
                .row(""orderpriority"", ""varchar(15)"", """", """")
                .row(""clerk"", ""varchar(15)"", """", """")
                .row(""shippriority"", ""integer"", """", """")
                .row(""comment"", ""varchar(79)"", """", """")
                .build();
        MaterializedResult actualColumns = computeActual(""DESCRIBE orders"");
        assertEquals(actualColumns, expectedColumns);
    }
",non-flaky,5
98647,nutzam_nutz,SimpleAdaptorTest.issue_1069,"    @Test
    public void issue_1069() {
        resp = post(""/adaptor/issue1069"", """");
        assertEquals(200, resp.getStatus());
        assertEquals("""", resp.getContent());
        

        resp = post(""/adaptor/issue1069"", ""showAdd="");
        assertEquals(200, resp.getStatus());
        assertEquals("""", resp.getContent());
    }
",non-flaky,5
104658,apache_pinot,OfflineClusterIntegrationTest.testColumnNameContainsTableName,"  @Test
  public void testColumnNameContainsTableName() {
    int daysSinceEpoch = 16138;
    int hoursSinceEpoch = 16138 * 24;
    int secondsSinceEpoch = 16138 * 24 * 60 * 60;
    List<String> baseQueries = Arrays.asList(""SELECT * FROM mytable"",
        ""SELECT DaysSinceEpoch, timeConvert(DaysSinceEpoch,'DAYS','SECONDS') FROM mytable"",
        ""SELECT DaysSinceEpoch, timeConvert(DaysSinceEpoch,'DAYS','SECONDS') FROM mytable order by DaysSinceEpoch ""
            + ""limit 10000"",
        ""SELECT DaysSinceEpoch, timeConvert(DaysSinceEpoch,'DAYS','SECONDS') FROM mytable order by timeConvert""
            + ""(DaysSinceEpoch,'DAYS','SECONDS') DESC limit 10000"",
        ""SELECT count(*) FROM mytable WHERE DaysSinceEpoch = "" + daysSinceEpoch,
        ""SELECT count(*) FROM mytable WHERE timeConvert(DaysSinceEpoch,'DAYS','HOURS') = "" + hoursSinceEpoch,
        ""SELECT count(*) FROM mytable WHERE timeConvert(DaysSinceEpoch,'DAYS','SECONDS') = "" + secondsSinceEpoch,
        ""SELECT MAX(timeConvert(DaysSinceEpoch,'DAYS','SECONDS')) FROM mytable"",
        ""SELECT COUNT(*) FROM mytable GROUP BY dateTimeConvert(DaysSinceEpoch,'1:DAYS:EPOCH','1:HOURS:EPOCH',""
            + ""'1:HOURS')"");
    List<String> queries = new ArrayList<>();
    baseQueries.forEach(q -> queries.add(q.replace(""DaysSinceEpoch"", ""mytable.DAYSSinceEpOch"")));
    baseQueries.forEach(q -> queries.add(q.replace(""DaysSinceEpoch"", ""mytable.DAYSSinceEpOch"")));

    for (String query : queries) {
      try {
        JsonNode response = postQuery(query);
        assertTrue(response.get(""numSegmentsProcessed"").asLong() >= 1L, ""PQL: "" + query + "" failed"");

        response = postSqlQuery(query);
        assertTrue(response.get(""numSegmentsProcessed"").asLong() >= 1L, ""SQL: "" + query + "" failed"");
      } catch (Exception e) {
        // Fail the test when exception caught
        throw new RuntimeException(""Got Exceptions from query - "" + query);
      }
    }
  }
",non-flaky,5
76920,Tencent_Firestorm,RssShuffleUtilsTest.compressionTest,"  @Test
  public void compressionTest() {
    List<Integer> testSizes = Lists.newArrayList(
        1, 1024, 128 * 1024, 512 * 1024, 1024 * 1024, 4 * 1024 * 1024);
    for (int size : testSizes) {
      singleTest(size);
    }
  }
",non-flaky,5
86094,graylog2_graylog2-server,EventDefinitionDtoTest.testValidateWithInvalidConfig,"    @Test
    public void testValidateWithInvalidConfig() {
        final AggregationEventProcessorConfig configMock = mock(AggregationEventProcessorConfig.class);
        final ValidationResult mockedValidationResult = new ValidationResult();
        mockedValidationResult.addError(""foo"", ""bar"");
        when(configMock.validate()).thenReturn(mockedValidationResult);

        final EventDefinitionDto invalidEventDefinition = testSubject.toBuilder()
            .config(configMock)
            .build();
        final ValidationResult validationResult = invalidEventDefinition.validate();
        assertThat(validationResult.failed()).isTrue();
        assertThat(validationResult.getErrors()).containsOnlyKeys(""foo"");
    }
",non-flaky,5
43084,trinodb_trino,AbstractTestIntegrationSmokeTest.ensureDistributedQueryRunner,"    @Test
    public void ensureDistributedQueryRunner()
    {
        assertThat(getQueryRunner().getNodeCount()).as(""query runner node count"")
                .isGreaterThanOrEqualTo(3);
    }
",non-flaky,5
33665,alibaba_fastjson,TestIssues569.testBug569,"    @Test
    public void testBug569() {
        //ç¬¬ä¸æ¬¡ååºååæ¯ä½¿ç¨ç MyResponseï¼ æ²¡ææå®æ³åç±»åï¼è²ä¼¼ä¼ç¼å­ MyResponseï¼ åé¢å¨è°ç¨çMyResponse<?>ååºååå°±åå½±åäº
        MyResponse resp1 = JSON.parseObject(jsonData, mType1, configBug569, featureValues,
                features != null ? features : EMPTY_SERIALIZER_FEATURES);

        //expect MyResponse<JSONArray<JSONObject>>
        MyResponse resp = JSON.parseObject(jsonData, mType, configBug569, featureValues,
                features != null ? features : EMPTY_SERIALIZER_FEATURES);
        Assert.assertNotNull(resp);
        Assert.assertNotNull(resp.getResult());
        Assert.assertEquals(JSONArray.class, resp.getResult().getClass());//è¿éä¼åå° resp1 çå½±å
    }
",non-flaky,5
136457,kiwiproject_dropwizard-service-utilities,DropwizardConnectorsTest.build,"        @Test
                public Connector build(Server server, MetricRegistry metricRegistry, String s, ThreadPool threadPool) {
                    return null;
                }
",non-flaky,5
38267,palantir_atlasdb,AbstractSerializableTransactionTest.testPhantomReadFail2,"    @Test
    public void testPhantomReadFail2() {
        String initialValue = ""100"";
        Transaction t0 = startTransaction();
        put(t0, ""row1"", ""col1"", initialValue);
        put(t0, ""row2"", ""col1"", initialValue);
        t0.commit();

        Transaction t1 = startTransaction();
        BatchingVisitables.copyToList(t1.getRange(TEST_TABLE, RangeRequest.builder().build()));
        put(t1, ""row22"", ""col1"", initialValue);

        Transaction t2 = startTransaction();
        put(t2, ""row3"", ""col1"", initialValue);
        t2.commit();

        try {
            t1.commit();
            fail();
        } catch (TransactionSerializableConflictException e) {
            // this is expectecd to throw because it is a write skew
        }
    }
",non-flaky,5
177172,line_armeria,SamlServiceProviderTest.shouldConsumeLogoutRequest_HttpPost,"    @Test
    public void shouldConsumeLogoutRequest_HttpPost() throws Exception {
        final LogoutRequest logoutRequest =
                getLogoutRequest(""http://"" + spHostname + ':' + rule.httpPort() + ""/saml/slo/post"",
                                 ""http://idp.example.com/post"");

        final AggregatedHttpResponse res = sendViaHttpPostBindingProtocol(""/saml/slo/post"",
                                                                          SAML_REQUEST, logoutRequest);

        assertThat(res.status()).isEqualTo(HttpStatus.OK);
        assertThat(res.contentType()).isEqualTo(MediaType.HTML_UTF_8);

        final Document doc = Jsoup.parse(res.contentUtf8());
        assertThat(doc.body().attr(""onLoad"")).isEqualTo(""document.forms[0].submit()"");

        // SAMLResponse will be posted to the IdP's logout response URL.
        final Element form = doc.body().child(0);
        assertThat(form.attr(""method"")).isEqualTo(""post"");
        assertThat(form.attr(""action"")).isEqualTo(""http://idp.example.com/saml/slo/post"");
        assertThat(form.child(0).attr(""name"")).isEqualTo(SAML_RESPONSE);
    }
",non-flaky,5
19474,eclipse_xtext-core,PathTraverserTest.testNonEmptyFolder,"	@Test
	public void testNonEmptyFolder() throws Exception {
		String path = pathTo(""nonemptyFolder"");
		Set<URI> uris = new PathTraverser().findAllResourceUris(path, everythingButDummy);
		assertEquals(2, uris.size());
	}
",non-flaky,5
94614,square_okhttp,URLConnectionTest.select,"  @Test public void redirectWithProxySelector() throws Exception {
          @Override public List<Proxy> select(URI uri) {
            proxySelectionRequests.add(uri);
            MockWebServer proxyServer = (uri.getPort() == server.getPort())
                ? server
                : server2;
            return Arrays.asList(proxyServer.toProxyAddress());
          }
",non-flaky,5
26847,wildfly_wildfly,NamingSubsystemTestCase.testSchemaOfSubsystemTemplates,"    @Test
    public void testSchemaOfSubsystemTemplates() throws Exception {
        super.testSchemaOfSubsystemTemplates();
    }
",non-flaky,5
118700,netty_netty,SmtpRequestEncoderTest.testEncodeData,"    @Test
    public void testEncodeData() {
        testEncode(SmtpRequests.data(), ""DATA\r\n"");
    }
",non-flaky,5
26850,wildfly_wildfly,NamingSubsystemTestCase.testCompositeBindingUpdate,"    @Test
    public void testCompositeBindingUpdate() throws Exception {
        final KernelServices services = createKernelServicesBuilder(createAdditionalInitialization()).setSubsystemXml(getSubsystemXml()).build();
        // updates binding 'a' through composite op
        // binding-type used is lookup, op should succeed even if lookup value is set by a followup step
        final ModelNode addr = Operations.createAddress(ModelDescriptionConstants.SUBSYSTEM, NamingExtension.SUBSYSTEM_NAME, NamingSubsystemModel.BINDING, ""java:global/a"");
        final ModelNode compositeOp = Operations.CompositeOperationBuilder.create()
                .addStep(Operations.createWriteAttributeOperation(addr, NamingSubsystemModel.BINDING_TYPE, NamingSubsystemModel.LOOKUP))
                .addStep(Operations.createWriteAttributeOperation(addr, NamingSubsystemModel.LOOKUP, ""java:global/b""))
                .build().getOperation();
        ModelTestUtils.checkOutcome(services.executeOperation(compositeOp));
    }
",non-flaky,5
77693,pholser_junit-quickcheck,PrimitivePropertyParameterTypesTest.shouldHold,"    @Test public void rightOpenEndedRangedPrimitiveCharacter() {
        @Property public void shouldHold(@InRange(minChar = '\uFF00') char ch) {
            assertThat(ch, greaterThanOrEqualTo('\uFF00'));
        }
",non-flaky,5
77578,dropwizard_dropwizard,HttpClientBuilderTest.select,"    @Test
            public List<Proxy> select(URI uri) {
                return Collections.singletonList(new Proxy(Proxy.Type.HTTP, new InetSocketAddress(""192.168.52.1"", 8080)));
            }
",non-flaky,5
38248,palantir_atlasdb,AbstractAtlasDbKeyValueServiceTest.testPutWithTimestamps,"    @Test
    public void testPutWithTimestamps() {
        putTestDataForMultipleTimestamps();
        final Cell cell = Cell.create(row0, column0);
        final Value val1 = Value.create(value0_t1, TEST_TIMESTAMP + 1);
        final Value val5 = Value.create(value0_t5, TEST_TIMESTAMP + 5);
        keyValueService.putWithTimestamps(TEST_TABLE, ImmutableMultimap.of(cell, val5));
        assertEquals(
                val5,
                keyValueService.get(TEST_TABLE, ImmutableMap.of(cell, TEST_TIMESTAMP + 6)).get(cell));
        assertEquals(
                val1,
                keyValueService.get(TEST_TABLE, ImmutableMap.of(cell, TEST_TIMESTAMP + 5)).get(cell));
        keyValueService.delete(TEST_TABLE, ImmutableMultimap.of(cell, TEST_TIMESTAMP + 5));
    }
",non-flaky,5
94782,ktuukkan_marine-api,AISMessage21ParserTest.getBow,"    @Test
    public void getBow() throws Exception {
        assertEquals(5, msg.getBow());
    }
",non-flaky,5
19433,eclipse_xtext-core,XtextValidationTest.testBug322875_01_b,"	@Test
	public void testBug322875_01_b() throws Exception {
		String testGrammar = ""grammar foo.Bar with org.eclipse.xtext.common.Terminals\n "" +
				"" import 'http://www.eclipse.org/2008/Xtext' as xtext\n"" +
				"" import 'classpath:/org/eclipse/xtext/xtext/XtextValidationTest.ecore'  "" +
				""Bug322875 returns Bug322875: referencesETypeFromClasspathPackage=[xtext::Grammar];"";
		XtextResource resource = getResourceFromStringAndExpect(testGrammar,1);
		assertFalse(resource.getErrors().toString(), resource.getErrors().isEmpty());
		assertBug322875(resource);
	}
",non-flaky,5
43106,trinodb_trino,AbstractTestIntegrationSmokeTest.testSelectInformationSchemaTables,"    @Test
    public void testSelectInformationSchemaTables()
    {
        String catalog = getSession().getCatalog().get();
        String schema = getSession().getSchema().get();
        String schemaPattern = schema.replaceAll(""^."", ""_"");

        assertQuery(""SELECT table_name FROM information_schema.tables WHERE table_schema = '"" + schema + ""' AND table_name = 'orders'"", ""VALUES 'orders'"");
        assertQuery(""SELECT table_name FROM information_schema.tables WHERE table_schema LIKE '"" + schema + ""' AND table_name LIKE '%rders'"", ""VALUES 'orders'"");
        assertQuery(""SELECT table_name FROM information_schema.tables WHERE table_schema LIKE '"" + schemaPattern + ""' AND table_name LIKE '%rders'"", ""VALUES 'orders'"");
        assertQuery(
                ""SELECT table_name FROM information_schema.tables "" +
                        ""WHERE table_catalog = '"" + catalog + ""' AND table_schema LIKE '"" + schema + ""' AND table_name LIKE '%orders'"",
                ""VALUES 'orders'"");
        assertQuery(""SELECT table_name FROM information_schema.tables WHERE table_catalog = 'something_else'"", ""SELECT '' WHERE false"");

        assertQuery(
                ""SELECT DISTINCT table_name FROM information_schema.tables WHERE table_schema = 'information_schema' OR rand() = 42 ORDER BY 1"",
                ""VALUES "" +
                        ""('applicable_roles'), "" +
                        ""('columns'), "" +
                        ""('enabled_roles'), "" +
                        ""('role_authorization_descriptors'), "" +
                        ""('roles'), "" +
                        ""('schemata'), "" +
                        ""('table_privileges'), "" +
                        ""('tables'), "" +
                        ""('views')"");
    }
",non-flaky,5
26717,MundaneImmortal_pair-distribution-app,PairTest.testIsOpsPairFalse,"	@Test
	public void testIsOpsPairFalse()  {
		Pair subject = new Pair();
		
		subject.setOpsPair(false);
		
		assertThat(subject.isOpsPair(), is(false));
	}
",non-flaky,5
60944,apache_druid,RowBucketIterableTest.testSingleDaySingleRow,"  @Test
  public void testSingleDaySingleRow()
  {
    intervals = new ArrayList<>();
    intervals.add(INTERVAL_JAN_1_1);

    rows = new ArrayList<>();
    rows.add(JAN_1_M_10);

    List<Row> expectedDay1 = Collections.singletonList(JAN_1_M_10);

    Sequence<Row> seq = Sequences.simple(rows);
    RowBucketIterable rbi = new RowBucketIterable(seq, intervals, ONE_DAY);
    Iterator<RowBucket> iter = rbi.iterator();

    RowBucket actual = iter.next();
    Assert.assertEquals(expectedDay1, actual.getRows());
    Assert.assertEquals(JAN_1, actual.getDateTime());
  }
",non-flaky,5
162448,testcontainers_testcontainers-java,HttpWaitStrategyTest.testWaitUntilReadyWithTimeout,"    @Test
    public void testWaitUntilReadyWithTimeout() {
        waitUntilReadyAndTimeout(createShellCommand(""400 Bad Request"", GOOD_RESPONSE_BODY));
    }
",non-flaky,5
175794,GoogleCloudPlatform_google-cloud-eclipse,RelativeFileFieldSetterTest.testConstructor_nonAbsoluteBasePath,"  @Test
  public void testConstructor_nonAbsoluteBasePath() {
    try {
      new RelativeFileFieldSetter(field, new Path(""non/absolute/base/path""), dialog);
      fail();
    } catch (IllegalArgumentException ex) {}
  }
",non-flaky,5
162396,testcontainers_testcontainers-java,DockerComposeWaitStrategyTest.testWaitingFails,"    @Test
    public void testWaitingFails() {
        final DockerComposeContainer environment = new DockerComposeContainer(new File(""src/test/resources/compose-test.yml""))
            .withExposedService(""redis_1"", REDIS_PORT, Wait.forHttp(""/test"").withStartupTimeout(Duration.ofSeconds(10)));
        VisibleAssertions.assertThrows(""waiting on an invalid http path times out"",
            RuntimeException.class,
            () -> environment.starting(Description.createTestDescription(Object.class, ""name"")));
    }
",non-flaky,5
98646,nutzam_nutz,SimpleAdaptorTest.test_path_args_and_object_without_param,"    @Test
    public void test_path_args_and_object_without_param() {
        assertEquals(200, get(""/adaptor/path_args_and_object_without_param/1"").getStatus());
        assertEquals(""{\""name\"": \""1\""}"".replaceAll("" "", """"), get(""/adaptor/path_args_and_object_without_param/1?name=object"").getContent().replaceAll("" "", """"));
    }
",non-flaky,5
94605,square_okhttp,URLEncodingTest.get,"  @Test @Ignore public void lenientUrlToUriNul() throws Exception {
      @Override public Response get(Request request) throws IOException {
        uriReference.set(request.url().uri());
        throw new UnsupportedOperationException();
      }
",non-flaky,5
331,apache_hadoop,TestViewfsWithNfs3.testNfsWriteNN1,"  @Test (timeout = 60000)
  public void testNfsWriteNN1() throws Exception {
    HdfsFileStatus status = nn1.getRpcServer().getFileInfo(""/user1/write1"");
    int namenodeId = Nfs3Utils.getNamenodeId(config, hdfs1.getUri());
    testNfsWriteResponse(status.getFileId(), namenodeId);
  }
",non-flaky,5
26905,wildfly_wildfly,InitialContextFactoryTestCase.testInitialFactory,"    @Test
    public void testInitialFactory() throws Exception {
        // Test with sys prop
        System.setProperty(Context.INITIAL_CONTEXT_FACTORY, InitialContextFactory.class.getName());
        InitialContext initialContext = new InitialContext();
        Context context = (Context) initialContext.lookup("""");
        assertTrue(context instanceof NamingContext);

        // Test with builder
        if (!NamingManager.hasInitialContextFactoryBuilder()) {
            NamingManager.setInitialContextFactoryBuilder(new InitialContextFactoryBuilder());
        }
        initialContext = new InitialContext();
        context = (Context) initialContext.lookup("""");
        assertTrue(context instanceof NamingContext);
    }
",non-flaky,5
156080,jReddit_jReddit,RedditScopeBuilderTest.testAddMultiple,"    @Test
    public void testAddMultiple() {
        builder.addScopes(RedditScope.EDIT, RedditScope.FLAIR);
        assertTrue(
                (RedditScope.EDIT.value() + RedditScope.SEPARATOR + RedditScope.FLAIR.value()).equals(builder.build()) 
                ||
                (RedditScope.FLAIR.value() + RedditScope.SEPARATOR + RedditScope.EDIT.value()).equals(builder.build()) 
                );
        builder.removeScopes(RedditScope.EDIT, RedditScope.FLAIR);
    }
",non-flaky,5
338,apache_hadoop,TestHftpFileSystem.testHftpCustomUriPortWithDefaultPorts,"@Test
public void testHftpCustomUriPortWithDefaultPorts() throws IOException {
    resetFileSystem();
    Configuration conf = new Configuration();
    URI uri = URI.create() ;
    HftpFileSystem fs = ((HftpFileSystem) (FileSystem.get(uri, conf)));
    assertEquals(DFS_NAMENODE_HTTP_PORT_DEFAULT, fs.getDefaultPort());
    assertEquals(DFS_NAMENODE_HTTPS_PORT_DEFAULT, fs.getDefaultSecurePort());
    assertEquals(uri, fs.getUri());
    assertEquals(""127.0.0.1:"" + DFSConfigKeys.DFS_NAMENODE_HTTPS_PORT_DEFAULT, fs.getCanonicalServiceName());
}",test order dependency,4
156417,apache_commons-lang,GmtTimeZoneTest.hoursInRange,"    @Test
    public void hoursInRange() {
        assertEquals(23 * 60 * 60 * 1000, new GmtTimeZone(false, 23, 0).getRawOffset());
    }
",non-flaky,5
98095,vert-x3_vertx-mongo-client,ParsingSSLOptionsTest.testEmptyCaPemCertificate,"  @Test(expected = IllegalArgumentException.class)
  public void testEmptyCaPemCertificate() throws IOException {
    // given
    final File tmpFile = tmpFolder.newFile(""invalidCa.pem"");
    final JsonObject withSSLAndCaPath = new JsonObject()
      .put(""ssl"", true)
      .put(""caPath"", tmpFile.getAbsolutePath());

    // when
    final SslSettings sslSettings = new MongoClientOptionsParser(vertx, withSSLAndCaPath)
      .settings()
      .getSslSettings();

    // then
    assertNull(sslSettings.getContext());
  }
",non-flaky,5
30914,camunda-cloud_zeebe,TestConfigurationFactoryTest.shouldReadEmptyConfiguration,"  @Test
  public void shouldReadEmptyConfiguration()
      throws InvocationTargetException, NoSuchMethodException, InstantiationException,
",non-flaky,5
104681,apache_pinot,RealtimeToOfflineSegmentsMinionClusterIntegrationTest.testInstanceShutdown,"  @Test(enabled = false)
  public void testInstanceShutdown() {
  }
",non-flaky,5
177211,line_armeria,Http2ClientWithPushPromiseTest.onSettingsRead,"    @Test
        public void onSettingsRead(ChannelHandlerContext ctx, Http2Settings settings) {
            assertThat(settings.pushEnabled()).isFalse();
        }
",non-flaky,5
112708,hwang-pku_ormlite-core,TransactionManagerTest.call,"	@Test
	public void testConnectionLeakCreateList() throws Exception {
		final Dao<Foo, Integer> dao = createDao(Foo.class, true);
		final List<Foo> list = new ArrayList<Foo>();
		Foo foo1 = new Foo();
		foo1.val = 1;
		list.add(foo1);
		Foo foo2 = new Foo();
		foo2.val = 2;
		list.add(foo2);
		Foo foo3 = new Foo();
		foo3.val = 3;
		list.add(foo3);
		assertTrue(connectionSource.isOkay());
		assertEquals(0, connectionSource.getConnectionCount());
		TransactionManager.callInTransaction(connectionSource, new Callable<Boolean>() {
			@Override
			public Boolean call() throws Exception {
				return dao.create(list) >= 0;
			}
",non-flaky,5
77475,opensearch-project_OpenSearch,DiskThresholdMonitorTests.getAsLong,"    @TestLogging(value=""org.opensearch.cluster.routing.allocation.DiskThresholdMonitor:INFO"", reason=""testing INFO/WARN logging"")
    public void testDiskMonitorLogging() throws IllegalAccessException {
        final ClusterState clusterState = ClusterState.builder(ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY))
            .nodes(DiscoveryNodes.builder().add(newNode(""node1""))).build();
        final AtomicReference<ClusterState> clusterStateRef = new AtomicReference<>(clusterState);
        final AtomicBoolean advanceTime = new AtomicBoolean(randomBoolean());

        final LongSupplier timeSupplier = new LongSupplier() {
            long time;

            @Override
            public long getAsLong() {
                if (advanceTime.get()) {
                    time += DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_REROUTE_INTERVAL_SETTING.get(Settings.EMPTY).getMillis() + 1;
                }
                logger.info(""time: [{}]"", time);
                return time;
            }
",non-flaky,5
106622,Alluxio_alluxio,AlluxioJniFuseFileSystemTest.mkDir,"  @Test
  public void mkDir() throws Exception {
    long mode = 0755L;
    mFuseFs.mkdir(""/foo/bar"", mode);
    verify(mFileSystem).createDirectory(BASE_EXPECTED_URI.join(""/foo/bar""),
        CreateDirectoryPOptions.newBuilder()
            .setMode(new alluxio.security.authorization.Mode((short) mode).toProto())
            .build());
  }
",non-flaky,5
192,aws_aws-sdk-java-v2,S3TransferManagerListenerTest.upload_success_shouldInvokeListener,"@Test
public void upload_success_shouldInvokeListener() throws Exception {
    TransferListener listener = mock(TransferListener.class);
    Path path = newTempFile();
    Files.write(path, randomBytes(contentLength));
    UploadRequest uploadRequest = UploadRequest.builder().putObjectRequest(( r) -> r.bucket(""bucket"").key(""key"")).source(path).overrideConfiguration(( b) -> b.addListener(listener)).build();
    Upload upload = tm.upload(uploadRequest);
    upload.completionFuture().join();
    ArgumentCaptor<TransferListener.Context.TransferInitiated> captor1 = ArgumentCaptor.forClass(TransferInitiated.class);
    verify(listener, times(1)).transferInitiated(captor1.capture());
    TransferListener.Context.TransferInitiated ctx1 = captor1.getValue();
    assertThat(ctx1.request()).isSameAs(uploadRequest);
    assertThat(ctx1.progressSnapshot().transferSizeInBytes()).hasValue(contentLength);
    assertThat(ctx1.progressSnapshot().bytesTransferred()).isZero();
    ArgumentCaptor<TransferListener.Context.BytesTransferred> captor2 = ArgumentCaptor.forClass(BytesTransferred.class);
    verify(listener, times(1)).bytesTransferred(captor2.capture());
    TransferListener.Context.BytesTransferred ctx2 = captor2.getValue();
    assertThat(ctx2.request()).isSameAs(uploadRequest);
    assertThat(ctx2.progressSnapshot().transferSizeInBytes()).hasValue(contentLength);
    assertThat(ctx2.progressSnapshot().bytesTransferred()).isPositive();
    ArgumentCaptor<TransferListener.Context.TransferComplete> captor3 = ArgumentCaptor.forClass(TransferComplete.class);
    verify(listener, times(1)).transferComplete(captor3.capture());
    TransferListener.Context.TransferComplete ctx3 = captor3.getValue();
    assertThat(ctx3.request()).isSameAs(uploadRequest);
    assertThat(ctx3.progressSnapshot().transferSizeInBytes()).hasValue(contentLength);
    assertThat(ctx3.progressSnapshot().bytesTransferred()).isEqualTo(contentLength);
    assertThat(ctx3.completedTransfer()).isSameAs(upload.completionFuture().get());
    verifyNoMoreInteractions(listener);
}",async wait,0
112104,apache_shardingsphere-elasticjob,DistributeOnceElasticJobListenerTest.assertAfterJobExecutedWhenIsAllCompletedAndNotTimeout,"    @Test
    public void assertAfterJobExecutedWhenIsAllCompletedAndNotTimeout() {
        when(guaranteeService.isAllCompleted()).thenReturn(false);
        when(timeService.getCurrentMillis()).thenReturn(0L);
        distributeOnceElasticJobListener.afterJobExecuted(shardingContexts);
        verify(guaranteeService).registerComplete(Sets.newHashSet(0, 1));
        verify(guaranteeService, times(0)).clearAllCompletedInfo();
    }
",non-flaky,5
98028,vert-x3_vertx-mongo-client,MongoClientUpdateResultTest.testCopyMongoClientUpdateResult,"  @Test
  public void testCopyMongoClientUpdateResult() {
    MongoClientUpdateResult mongoClientUpdateResultOrigin = new MongoClientUpdateResult(TestUtils.randomLong(),
      randomUpsertId(), TestUtils.randomLong());
    MongoClientUpdateResult mongoClientUpdateResultCopy = new MongoClientUpdateResult(mongoClientUpdateResultOrigin);

    assertEquals(mongoClientUpdateResultOrigin.getDocMatched(), mongoClientUpdateResultCopy.getDocMatched());
    assertEquals(mongoClientUpdateResultOrigin.getDocUpsertedId(), mongoClientUpdateResultCopy.getDocUpsertedId());
    assertEquals(mongoClientUpdateResultOrigin.getDocModified(), mongoClientUpdateResultCopy.getDocModified());
  }
",non-flaky,5
134993,undertow-io_undertow,AnnotatedEndpointTest.testCloseReason,"    @Test
    public void testCloseReason() throws Exception {
        MessageEndpoint.reset();

        Session session = deployment.connectToServer(AnnotatedClientEndpoint.class, new URI(""ws://"" + DefaultServer.getHostAddress(""default"") + "":"" + DefaultServer.getHostPort(""default"") + ""/ws/chat/Bob""));

        Assert.assertEquals(""hi Bob (protocol=foo)"", AnnotatedClientEndpoint.message());

        session.close(new CloseReason(CloseReason.CloseCodes.VIOLATED_POLICY, ""Foo!""));
        Assert.assertEquals(""CLOSED"", AnnotatedClientEndpoint.message());
        CloseReason cr = MessageEndpoint.getReason();
        Assert.assertEquals(CloseReason.CloseCodes.VIOLATED_POLICY.getCode(), cr.getCloseCode().getCode());
        Assert.assertEquals(""Foo!"", cr.getReasonPhrase());

    }
",non-flaky,5
33911,apache_camel,GridFsProducerOperationsIT.process,"    @Test
    public void testRemoveByObjectId() {
        Map<String, Object> headers = new HashMap<>();
        headers.put(Exchange.FILE_NAME, FILE_NAME);

        Exchange result = template.request(
                ""mongodb-gridfs:myDb?database={{mongodb.testDb}}&operation=create&bucket="" + getBucket(), new Processor() {
                    @Override
                    public void process(Exchange exchange) throws Exception {
                        exchange.getMessage().setBody(FILE_DATA);
                        exchange.getMessage().setHeaders(headers);
                    }
",non-flaky,5
176781,ctco_cukes,BaseContextHandlerTest.shouldExtractNoGroupsInPattern,"    @Test
    public void shouldExtractNoGroupsInPattern() throws Exception {
        List<String> groups = capturer.extractGroups(""(hello)"");
        assertThat(groups, is(empty()));
    }
",non-flaky,5
26707,MundaneImmortal_pair-distribution-app,PairTest.testHashCode,"	@Test
	public void testHashCode()  {
		Pair subject = new Pair(Arrays.asList(new Developer(""dev1"")));
		Pair subject2 = new Pair(Arrays.asList(new Developer(""dev1"")));
		
		assertThat(subject.hashCode(), is(equalTo(subject2.hashCode())));
	}
",non-flaky,5
133901,cdancy_jenkins-rest,StatisticsApiMockTest.testOverallLoad,"@Test(groups = ""unit"", testName = ""StatisticsApiMockTest"")
    public void testOverallLoad() throws Exception {
        MockWebServer server = mockWebServer();

        server.enqueue(new MockResponse().setBody(payloadFromResource(""/overall-load.json"")).setResponseCode(200));
        JenkinsApi jenkinsApi = api(server.getUrl(""/""));
        StatisticsApi api = jenkinsApi.statisticsApi();
        try {
            OverallLoad load = api.overallLoad();
            assertNotNull(load);
            assertSent(server, ""GET"", ""/overallLoad/api/json"");
        } finally {
            jenkinsApi.close();
            server.shutdown();
        }
    }
",non-flaky,5
110168,Wikidata_wikidata-toolkit,DirectoryManagerTest.getCompressionInputStreamGzip,"	@Test
	public void getCompressionInputStreamGzip() throws IOException {
		ByteArrayOutputStream out = new ByteArrayOutputStream();
		OutputStreamWriter ow = new OutputStreamWriter(
				new GzipCompressorOutputStream(out), StandardCharsets.UTF_8);
		ow.write(""Test data"");
		ow.close();

		ByteArrayInputStream in = new ByteArrayInputStream(out.toByteArray());
		InputStream cin = dm.getCompressorInputStream(in, CompressionType.GZIP);

		assertEquals(""Test data"",
				new BufferedReader(new InputStreamReader(cin)).readLine());
	}
",non-flaky,5
94610,square_okhttp,CacheTest.intercept,"  @Test public void networkInterceptorNotInvokedForFullyCached() throws Exception {
          @Override public Response intercept(Chain chain) throws IOException {
            throw new AssertionError();
          }
",non-flaky,5
162410,testcontainers_testcontainers-java,DockerComposeOverrideTest.testEnvVar,"    @Test(timeout = 30_000)
    public void testEnvVar() throws IOException {
        BufferedReader br = Unreliables.retryUntilSuccess(10, TimeUnit.SECONDS, () -> {
            Uninterruptibles.sleepUninterruptibly(1, TimeUnit.SECONDS);

            Socket socket = new Socket(compose.getServiceHost(""alpine_1"", 3000), compose.getServicePort(""alpine_1"", 3000));
            return new BufferedReader(new InputStreamReader(socket.getInputStream()));
        });

        Unreliables.retryUntilTrue(10, TimeUnit.SECONDS, () -> {
            while (br.ready()) {
                String line = br.readLine();
                if (line.contains(DOCKER_COMPOSE_OVERRIDE_TEST_OVERRIDE_ENV)) {
                    pass(""Mapped environment variable was found"");
                    return true;
                }
            }
            info(""Mapped environment variable was not found yet - process probably not ready"");
            Uninterruptibles.sleepUninterruptibly(100, TimeUnit.MILLISECONDS);
            return false;
        });

    }
",non-flaky,5
118744,netty_netty,ByteBufUtilTest.notEqualsBufferUnderflow,"    @Test (expected = IllegalArgumentException.class)
    public void notEqualsBufferUnderflow() {
        byte[] b1 = new byte[8];
        byte[] b2 = new byte[16];
        Random rand = new Random();
        rand.nextBytes(b1);
        rand.nextBytes(b2);
        final int iB1 = b1.length / 2;
        final int iB2 = iB1 + b1.length;
        final int length = b1.length - iB1;
        System.arraycopy(b1, iB1, b2, iB2, length - 1);
        assertFalse(ByteBufUtil.equals(Unpooled.wrappedBuffer(b1), iB1, Unpooled.wrappedBuffer(b2), iB2,
                -1));
    }
",non-flaky,5
162451,testcontainers_testcontainers-java,LogMessageWaitStrategyTest.testWaitUntilReady_Success,"    @Test
    public void testWaitUntilReady_Success() {
        waitUntilReadyAndSucceed(""echo -e \"""" + READY_MESSAGE + ""\"";"" +
                ""echo -e \""foobar\"";"" +
                ""echo -e \"""" + READY_MESSAGE + ""\"";"" +
                ""sleep 300"");
    }
",non-flaky,5
30971,camunda-cloud_zeebe,POJOArrayTest.shouldAddFirstEntryToSimpleArrayProp,"  @Test
  public void shouldAddFirstEntryToSimpleArrayProp() {
    // given
    final POJOArray pojo = new POJOArray();
    final ValueArray<MinimalPOJO> iterator = pojo.simpleArray();

    // when
    iterator.add().setLongProp(741L);

    // then
    final int length = pojo.getLength();
    final UnsafeBuffer resultBuffer = new UnsafeBuffer(new byte[length]);
    pojo.write(resultBuffer, 0);

    final Map<String, Object> msgPackMap =
        MsgPackUtil.asMap(resultBuffer, 0, resultBuffer.capacity());
    assertThat(msgPackMap).containsOnly(entry(""simpleArray"", ""[{longProp=741}]""));
  }
",non-flaky,5
179506,abel533_Mapper,StyleTest.testCamelhump,"    @Test
    public void testCamelhump() {
        for (String field : fields) {
            System.out.println(field + "" - "" + StringUtil.convertByStyle(field, Style.camelhump));
        }
    }
",non-flaky,5
99778,apache_cassandra,MessagingServiceTest.testNegativeDCLatency,"    @Test
    public void testNegativeDCLatency()
    {
        MessagingMetrics.DCLatencyRecorder updater = MessagingService.instance().metrics.internodeLatencyRecorder(InetAddressAndPort.getLocalHost());

        // if clocks are off should just not track anything
        int latency = -100;

        long now = System.currentTimeMillis();
        long sentAt = now - latency;

        long count = updater.dcLatency.getCount();
        updater.accept(now - sentAt, MILLISECONDS);
        // negative value shoudln't be recorded
        assertEquals(count, updater.dcLatency.getCount());
    }
",non-flaky,5
19519,eclipse_xtext-core,TraceRegionTest.testAnnotate_04,"	@Test
	public void testAnnotate_04() {
		TraceRegion root = new TraceRegion(0, 4, 0, 0, true, 1, 2, 0, 0, null, newURI());
		TraceRegion parent = new TraceRegion(1, 2, 0, 0, true, 3, 4, 0, 0, root, null);
		new TraceRegion(2, 1, 0, 0, true, 5, 6, 0, 0, parent, null);
		assertEquals(""<1:2[a<3:4[b<5:6[c]]d]e"", root.getAnnotatedString(""abcde""));
	}
",non-flaky,5
170488,eclipse_jetty.project,ConnectorServerTest.testAnyRegistryHostBindsToAny,"    @Test
    public void testAnyRegistryHostBindsToAny() throws Exception
    {
        ServerSocket serverSocket = new ServerSocket(0);
        int registryPort = serverSocket.getLocalPort();
        serverSocket.close();
        connectorServer = new ConnectorServer(new JMXServiceURL(""service:jmx:rmi:///jndi/rmi://0.0.0.0:"" + registryPort + ""/jmxrmi""), objectName);
        connectorServer.start();

        // Verify that I can connect to the RMI registry using a non-loopback address.
        new Socket(InetAddress.getLocalHost(), registryPort).close();
        // Verify that I can connect to the RMI registry using the loopback address.
        new Socket(InetAddress.getLoopbackAddress(), registryPort).close();
    }
",non-flaky,5
70856,apache_kafka,TransformationConfigTest.testEmbeddedConfigMaskField,"    @Test
    public void testEmbeddedConfigMaskField() {
        // Validate that we can construct a Connector config containing the extended config for the transform
        HashMap<String, String> connProps = new HashMap<>();
        connProps.put(""name"", ""foo"");
        connProps.put(""connector.class"", MockConnector.class.getName());
        connProps.put(""transforms"", ""example"");
        connProps.put(""transforms.example.type"", MaskField.Value.class.getName());
        connProps.put(""transforms.example.fields"", ""field"");


        Plugins plugins = null; // Safe when we're only constructing the config
        new ConnectorConfig(plugins, connProps);
    }
",non-flaky,5
53172,cloudfoundry_uaa,ScimGroupTests.testDropAllMembersUsingOperation,"    @Test
    public void testDropAllMembersUsingOperation() {
        member1.setOperation(""delete"");
        member2.setOperation(""delete"");
        member3.setOperation(""delete"");
        group.setMembers(Arrays.asList(member1, member2, member3));
        patch.setMembers(group.getMembers());
        assertEquals(3, group.getMembers().size());
        group.patch(patch);
        assertEquals(0, group.getMembers().size());

    }
",non-flaky,5
98107,vert-x3_vertx-mongo-client,CredentialListParserTest.testSimpleAuth,"  @Test
  public void testSimpleAuth() {
    JsonObject config = new JsonObject().put(""db_name"", ""my-datasource"");
    String username = TestUtils.randomAlphaString(8);
    String password = TestUtils.randomAlphaString(20);
    config.put(""username"", username);
    config.put(""password"", password);


    List<MongoCredential> credentials = new CredentialListParser(null, config).credentials();
    assertEquals(1, credentials.size());
    MongoCredential credential = credentials.get(0);
    assertEquals(username, credential.getUserName());
    assertArrayEquals(password.toCharArray(), credential.getPassword());
    // default source should be the database name - see https://github.com/vert-x3/vertx-mongo-client/issues/46.
    assertEquals(""my-datasource"", credential.getSource());
  }
",non-flaky,5
77703,pholser_junit-quickcheck,PrimitivePropertyParameterTypesTest.shouldHold,"    @Test public void wrapperDouble() {
        @Property public void shouldHold(Double d) {
            assertThat(d, greaterThanOrEqualTo(RangeAttributes.minDouble()));
            assertThat(d, lessThan(RangeAttributes.maxDouble()));
        }
",non-flaky,5
33872,apache_camel,FhirUpdateIT.testResourceStringId,"    @Test
    public void testResourceStringId() throws Exception {
        Date date = new SimpleDateFormat(""yyyy-MM-dd"").parse(""1998-04-29"");
        assertNotEquals(date, patient.getBirthDate());
        this.patient.setBirthDate(date);
        final Map<String, Object> headers = new HashMap<>();
        // parameter type is org.hl7.fhir.instance.model.api.IBaseResource
        headers.put(""CamelFhir.resource"", this.patient);
        // parameter type is org.hl7.fhir.instance.model.api.IIdType
        headers.put(""CamelFhir.stringId"", this.patient.getIdElement().getIdPart());
        // parameter type is ca.uhn.fhir.rest.api.PreferReturnEnum
        headers.put(""CamelFhir.preferReturn"", PreferReturnEnum.REPRESENTATION);

        MethodOutcome result = requestBodyAndHeaders(""direct://RESOURCE_WITH_STRING_ID"", null, headers);

        assertNotNull(result, ""resource result"");
        LOG.debug(""resource: "" + result);
        assertEquals(date, ((Patient) result.getResource()).getBirthDate(), ""Birth date not updated!"");
    }
",non-flaky,5
162735,OpenAPITools_openapi-generator,OuterCompositeTest.myNumberTest,"    @Test
    public void myNumberTest() {
        // TODO: test myNumber
    }
",non-flaky,5
84603,apache_zookeeper,PrometheusMetricsProviderTest.tearDown,"    @AfterEach
    public void tearDown() {
        if (provider != null) {
            provider.stop();
        }
        CollectorRegistry.defaultRegistry.clear();
    }
",non-flaky,5
112115,apache_shardingsphere-elasticjob,StatisticRdbRepositoryTest.assertGetSummedTaskResultStatisticsWhenTableIsEmpty,"    @Test
    public void assertGetSummedTaskResultStatisticsWhenTableIsEmpty() {
        for (StatisticInterval each : StatisticInterval.values()) {
            TaskResultStatistics po = repository.getSummedTaskResultStatistics(new Date(), each);
            assertThat(po.getSuccessCount(), is(0));
            assertThat(po.getFailedCount(), is(0));
        }
    }
",non-flaky,5
76,swankjesse_dex,assertDurationIsInRange,"@Test
public void assertDurationIsInRange(long expectedMillis) {
    long minimum = (long) ((double) expectedMillis * 0.90);
    long maximum =
    Math.max((long) ((double) expectedMillis * 1.10), 10);
    long waitMillis = Math.max(expectedMillis * 10, 10);
    long duration = getDurationMillis(waitMillis);
    if (duration < minimum) {
        Assert.fail(""expected duration: "" + expectedMillis +
        "" minimum duration: "" + minimum +
        "" actual duration too short: "" + duration);
    } else if (duration > maximum) {
        Assert.fail(""expected duration: "" + expectedMillis +
        "" maximum duration: "" + maximum +
        "" actual duration too long: "" + duration);
    }
}",time,2
98020,vert-x3_vertx-mongo-client,UpdateOptionsTest.testOptions,"  @Test
  public void testOptions() {
    UpdateOptions options = new UpdateOptions();

    WriteOption writeOption = ACKNOWLEDGED;
    assertEquals(options, options.setWriteOption(writeOption));
    assertEquals(writeOption, options.getWriteOption());

    boolean multi = TestUtils.randomBoolean();
    assertEquals(options, options.setMulti(multi));
    assertEquals(multi, options.isMulti());

    boolean upsert = TestUtils.randomBoolean();
    assertEquals(options, options.setUpsert(upsert));
    assertEquals(upsert, options.isUpsert());

    JsonArray arrayFilters = new JsonArray().add(new JsonObject().put(TestUtils.randomAlphaString(5), TestUtils.randomAlphaString(5)));
    assertEquals(options, options.setArrayFilters(arrayFilters));
    assertEquals(arrayFilters, options.getArrayFilters());
  }
",non-flaky,5
70853,apache_kafka,TransformationConfigTest.testEmbeddedConfigFlatten,"    @Test
    public void testEmbeddedConfigFlatten() {
        // Validate that we can construct a Connector config containing the extended config for the transform
        HashMap<String, String> connProps = new HashMap<>();
        connProps.put(""name"", ""foo"");
        connProps.put(""connector.class"", MockConnector.class.getName());
        connProps.put(""transforms"", ""example"");
        connProps.put(""transforms.example.type"", Flatten.Value.class.getName());

        Plugins plugins = null; // Safe when we're only constructing the config
        new ConnectorConfig(plugins, connProps);
    }
",non-flaky,5
77641,pholser_junit-quickcheck,Primitive3DArrayPropertyParameterTypesTest.shouldHold,"    @Test public void wrapperBooleanArray() {
        @Property(trials = 2) public void shouldHold(Boolean[][][] b) {
        }
",non-flaky,5
26733,MundaneImmortal_pair-distribution-app,OpsPairsCombinationsTest.testIsRotationTimeForSameWeekWithEveryDayRotation,"	@Test
	public void testIsRotationTimeForSameWeekWithEveryDayRotation() {
		List<Developer> standardDevs = getStandardDevs();
		DayPairs pairs = new DayPairs();
		pairs.setDate(new Date());
		pairs.addPair(""track1"", new Pair(Arrays.asList(standardDevs.get(0), standardDevs.get(1)), true, ""track1""));
		
		OpsPairCombinations devPairCombinations = new OpsPairCombinations(Arrays.asList(pairs));
		Company company = new Company(""myCompany"");
		company.setDevOpsRotationStrategy(""weekly"");
		devPairCombinations.setCompany(company);

		assertThat(devPairCombinations.isRotationTime(Arrays.asList(""track1""), standardDevs, true), is(false));
	}
",non-flaky,5
20933,NationalSecurityAgency_timely,SerializationTest.testCloseSubscription,"    @Test
    public void testCloseSubscription() throws Exception {
        CloseSubscription close = new CloseSubscription();
        close.setSubscriptionId(""1234"");
        testSerialization(close);
    }
",non-flaky,5
95702,togglz_togglz,PropertyFeatureProviderTest.shouldSupportDefinitionWithOnlyLabel,"    @Test
    public void shouldSupportDefinitionWithOnlyLabel() {

        Properties properties = new Properties();
        properties.setProperty(""F1"", ""My Feature"");

        PropertyFeatureProvider provider = new PropertyFeatureProvider(properties);

        Set<Feature> features = provider.getFeatures();
        assertThat(features)
            .hasSize(1)
            .areExactly(1, featureNamed(""F1""));

        FeatureMetaData metadata = provider.getMetaData(new NamedFeature(""F1""));
        assertThat(metadata).isNotNull();
        assertThat(metadata.getLabel()).isEqualTo(""My Feature"");
        FeatureState defaultFeatureState = metadata.getDefaultFeatureState();
        assertThat(defaultFeatureState.isEnabled()).isFalse();
        assertThat(metadata.getGroups()).isEmpty();

    }
",non-flaky,5
60881,apache_druid,MaterializedViewSupervisorTest.testCheckSegments,"  @Test
  public void testCheckSegments() throws IOException
  {
    Set<DataSegment> baseSegments = Sets.newHashSet(
        new DataSegment(
            ""base"",
            Intervals.of(""2015-01-01T00Z/2015-01-02T00Z""),
            ""2015-01-02"",
            ImmutableMap.of(),
            ImmutableList.of(""dim1"", ""dim2""),
            ImmutableList.of(""m1""),
            new HashBasedNumberedShardSpec(0, 1, 0, 1, null, null, null),
            9,
            1024
        ),
        new DataSegment(
            ""base"",
            Intervals.of(""2015-01-02T00Z/2015-01-03T00Z""),
            ""2015-01-03"",
            ImmutableMap.of(),
            ImmutableList.of(""dim1"", ""dim2""),
            ImmutableList.of(""m1""),
            new HashBasedNumberedShardSpec(0, 1, 0, 1, null, null, null),
            9,
            1024
        ),
        new DataSegment(
            ""base"",
            Intervals.of(""2015-01-03T00Z/2015-01-04T00Z""),
            ""2015-01-04"",
            ImmutableMap.of(),
            ImmutableList.of(""dim1"", ""dim2""),
            ImmutableList.of(""m1""),
            new HashBasedNumberedShardSpec(0, 1, 0, 1, null, null, null),
            9,
            1024
        )
    );
    Set<DataSegment> derivativeSegments = Sets.newHashSet(
        new DataSegment(
            derivativeDatasourceName,
            Intervals.of(""2015-01-01T00Z/2015-01-02T00Z""),
            ""2015-01-02"",
            ImmutableMap.of(),
            ImmutableList.of(""dim1"", ""dim2""),
            ImmutableList.of(""m1""),
            new HashBasedNumberedShardSpec(0, 1, 0, 1, null, null, null),
            9,
            1024
        ),
        new DataSegment(
            derivativeDatasourceName,
            Intervals.of(""2015-01-02T00Z/2015-01-03T00Z""),
            ""3015-01-01"",
            ImmutableMap.of(),
            ImmutableList.of(""dim1"", ""dim2""),
            ImmutableList.of(""m1""),
            new HashBasedNumberedShardSpec(0, 1, 0, 1, null, null, null),
            9,
            1024
        )
    );
    indexerMetadataStorageCoordinator.announceHistoricalSegments(baseSegments);
    indexerMetadataStorageCoordinator.announceHistoricalSegments(derivativeSegments);
    EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();
    EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.absent()).anyTimes();
    EasyMock.expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes();
    Pair<SortedMap<Interval, String>, Map<Interval, List<DataSegment>>> toBuildInterval = supervisor.checkSegments();
    Set<Interval> expectedToBuildInterval = Sets.newHashSet(Intervals.of(""2015-01-01T00Z/2015-01-02T00Z""));
    Map<Interval, List<DataSegment>> expectedSegments = new HashMap<>();
    expectedSegments.put(
        Intervals.of(""2015-01-01T00Z/2015-01-02T00Z""),
        Collections.singletonList(
            new DataSegment(
                ""base"",
                Intervals.of(""2015-01-01T00Z/2015-01-02T00Z""),
                ""2015-01-02"",
                ImmutableMap.of(),
                ImmutableList.of(""dim1"", ""dim2""),
                ImmutableList.of(""m1""),
                new HashBasedNumberedShardSpec(0, 1, 0, 1, null, null, null),
                9,
                1024
            )
        )
    );
    expectedSegments.put(
        Intervals.of(""2015-01-02T00Z/2015-01-03T00Z""),
        Collections.singletonList(
            new DataSegment(
                ""base"",
                Intervals.of(""2015-01-02T00Z/2015-01-03T00Z""),
                ""2015-01-03"",
                ImmutableMap.of(),
                ImmutableList.of(""dim1"", ""dim2""),
                ImmutableList.of(""m1""),
                new HashBasedNumberedShardSpec(0, 1, 0, 1, null, null, null),
                9,
                1024
            )
        )
    );
    Assert.assertEquals(expectedToBuildInterval, toBuildInterval.lhs.keySet());
    Assert.assertEquals(expectedSegments, toBuildInterval.rhs);
  }
",non-flaky,5
97724,vojtechhabarta_typescript-generator,FullyQualifiedNamesTest.testNested,"    @Test
    public void testNested() {
        final Settings settings = TestUtils.settings();
        settings.outputFileType = TypeScriptFileType.implementationFile;
        settings.mapClasses = ClassMapping.asClasses;
        settings.mapPackagesToNamespaces = true;
        settings.sortTypeDeclarations = true;
        final String output = new TypeScriptGenerator(settings).generateTypeScript(Input.from(Outer.Inner.class, Outer.class));
        final String expected = """"
                + ""namespace cz.habarta.typescript.generator.FullyQualifiedNamesTest {\n""
                + ""\n""
                + ""    export class Outer {\n""
                + ""        outer: string;\n""
                + ""    }\n""
                + ""\n""
                + ""}\n""
                + ""\n""
                + ""namespace cz.habarta.typescript.generator.FullyQualifiedNamesTest.Outer {\n""
                + ""\n""
                + ""    export class Inner {\n""
                + ""        inner: string;\n""
                + ""    }\n""
                + ""\n""
                + ""}\n"";
        Assert.assertEquals(expected.trim(), output.trim());
    }
",non-flaky,5
53133,cloudfoundry_uaa,UaaMetricsEmitterTests.vm_vitals,"    @Test
    public void vm_vitals() {
        uaaMetricsEmitter.emitVmVitals();
        Mockito.verify(statsDClient).gauge(eq(""vitals.vm.cpu.count""), gt(0l));
        Mockito.verify(statsDClient).gauge(eq(""vitals.vm.cpu.load""), geq(0l));
        Mockito.verify(statsDClient).gauge(eq(""vitals.vm.memory.total""), geq(134217728l));
        Mockito.verify(statsDClient).gauge(eq(""vitals.vm.memory.committed""), geq(1l));
        Mockito.verify(statsDClient).gauge(eq(""vitals.vm.memory.free""), geq(1l));
    }
",non-flaky,5
91401,OpenLCB_OpenLCB_Java,GridConnectInputTest.run,"    @Test
    public void testCTor() {
        java.io.BufferedReader br = new java.io.BufferedReader(new java.io.StringReader(""""));
        GridConnectInput t = new GridConnectInput(br, new CanFrameListenerScaffold(), new Runnable(){
    public void run(){
    }
",non-flaky,5
177970,aosp-mirror_platform_frameworks_support,ColorUtilsTest.testColorToHslLimits,"    @Test
    public void testColorToHslLimits() {
        final float[] hsl = new float[3];

        for (TestEntry entry : sEntryList) {
            ColorUtils.colorToHSL(entry.rgb, hsl);

            assertTrue(hsl[0] >= 0f && hsl[0] <= 360f);
            assertTrue(hsl[1] >= 0f && hsl[1] <= 1f);
            assertTrue(hsl[2] >= 0f && hsl[2] <= 1f);
        }
    }
",non-flaky,5
170457,eclipse_jetty.project,ObjectMBeanTest.testMBeanForIntArray,"    @Test
    public void testMBeanForIntArray()
    {
        int[] obj = {0, 1, 2};
        Object mbean = container.mbeanFor(obj);
        assertNotNull(mbean);
        container.beanAdded(null, obj);
        ObjectName objectName = container.findMBean(obj);
        assertNotNull(objectName);
    }
",non-flaky,5
77482,opensearch-project_OpenSearch,RemoteClusterClientTests.testEnsureWeReconnect,"    @TestLogging(
    public void testEnsureWeReconnect() throws Exception {
        Settings remoteSettings = Settings.builder().put(ClusterName.CLUSTER_NAME_SETTING.getKey(), ""foo_bar_cluster"").build();
        try (MockTransportService remoteTransport = startTransport(""remote_node"", Collections.emptyList(), Version.CURRENT, threadPool,
            remoteSettings)) {
            DiscoveryNode remoteNode = remoteTransport.getLocalDiscoNode();
            Settings localSettings = Settings.builder()
                .put(onlyRole(DiscoveryNodeRole.REMOTE_CLUSTER_CLIENT_ROLE))
                .put(""cluster.remote.test.seeds"",
                    remoteNode.getAddress().getAddress() + "":"" + remoteNode.getAddress().getPort()).build();
            try (MockTransportService service = MockTransportService.createNewService(localSettings, Version.CURRENT, threadPool, null)) {
                service.start();
                // this test is not perfect since we might reconnect concurrently but it will fail most of the time if we don't have
                // the right calls in place in the RemoteAwareClient
                service.acceptIncomingRequests();
                RemoteClusterService remoteClusterService = service.getRemoteClusterService();
                assertBusy(() -> assertTrue(remoteClusterService.isRemoteNodeConnected(""test"", remoteNode)));
                for (int i = 0; i < 10; i++) {
                    RemoteClusterConnection remoteClusterConnection = remoteClusterService.getRemoteClusterConnection(""test"");
                    assertBusy(remoteClusterConnection::assertNoRunningConnections);
                    ConnectionManager connectionManager = remoteClusterConnection.getConnectionManager();
                    Transport.Connection connection = connectionManager.getConnection(remoteNode);
                    PlainActionFuture<Void> closeFuture = PlainActionFuture.newFuture();
                    connection.addCloseListener(closeFuture);
                    connectionManager.disconnectFromNode(remoteNode);
                    closeFuture.get();

                    Client client = remoteClusterService.getRemoteClusterClient(threadPool, ""test"");
                    ClusterStateResponse clusterStateResponse = client.admin().cluster().prepareState().execute().get();
                    assertNotNull(clusterStateResponse);
                    assertEquals(""foo_bar_cluster"", clusterStateResponse.getState().getClusterName().value());
                    assertTrue(remoteClusterConnection.isNodeConnected(remoteNode));
                }
            }
        }
    }
",non-flaky,5
20931,NationalSecurityAgency_timely,SerializationTest.testBasicAuth,"    @Test
    public void testBasicAuth() throws Exception {
        BasicAuthLogin login = new BasicAuthLogin();
        login.setUsername(""test"");
        login.setPassword(""pass"");
        testSerialization(login);
    }
",non-flaky,5
162702,OpenAPITools_openapi-generator,CatTest.colorTest,"    @Test
    public void colorTest() {
        // TODO: test color
    }
",non-flaky,5
89303,apache_samza,TestMonitorService.testShouldFailWhenTheMonitorFactoryClassIsInvalid,"  @Test(expected = SamzaException.class)
  public void testShouldFailWhenTheMonitorFactoryClassIsInvalid() {
    // Test that when MonitorFactoryClass is defined in the config and is invalid,
    // monitor service should fail. Should throw back SamzaException.
    Map<String, String> configMap = ImmutableMap.of(String.format(""monitor.name.%s"", CONFIG_MONITOR_FACTORY_CLASS),
                                                    ""RandomClassName"");
    SamzaRestConfig config = new SamzaRestConfig(new MapConfig(configMap));
    SamzaMonitorService monitorService = new SamzaMonitorService(config,
                                                                 METRICS_REGISTRY);
    monitorService.start();
  }
",non-flaky,5
133924,cdancy_jenkins-rest,JobsApiMockTest.testGetInnerFolderJobList,"@Test(groups = ""unit"", testName = ""JobsApiMockTest"")
    public void testGetInnerFolderJobList() throws Exception {
        MockWebServer server = mockWebServer();

        String body = payloadFromResource(""/jobsInJenkinsFolder.json"");
        server.enqueue(new MockResponse().setBody(body).setResponseCode(200));
        JenkinsApi jenkinsApi = api(server.url(""/"").url());
        JobsApi api = jenkinsApi.jobsApi();
        try {
            JobList output = api.jobList(""Folder1/Folder 2"");
            assertNotNull(output);
            assertNotNull(output.jobs());
            assertEquals(output.jobs().size(), 1);
            assertEquals(output.jobs().get(0), Job.create(""hudson.model.FreeStyleProject"", ""Test Project"", ""http://localhost:8080/job/username"", null));
            assertSent(server, ""GET"", ""/job/Folder1/job/Folder%202/api/json"");
        } finally {
            jenkinsApi.close();
            server.shutdown();
        }
    }
",non-flaky,5
179418,abel533_Mapper,ColumnTest.testColumn,"    @Test
    public void testColumn(){
        EntityHelper.initEntityNameMap(UserColumn.class, config);
        EntityTable entityTable = EntityHelper.getEntityTable(UserColumn.class);
        Assert.assertNotNull(entityTable);

        Set<EntityColumn> columns = entityTable.getEntityClassColumns();
        Assert.assertEquals(1, columns.size());

        for (EntityColumn column : columns) {
            Assert.assertEquals(""user_name"", column.getColumn());
            Assert.assertEquals(""name"", column.getProperty());

            Assert.assertEquals(""user_name = #{name}"", column.getColumnEqualsHolder());
            Assert.assertEquals(""user_name = #{record.name}"", column.getColumnEqualsHolder(""record""));
            Assert.assertEquals(""#{name}"", column.getColumnHolder());
            Assert.assertEquals(""#{record.name}"", column.getColumnHolder(""record""));
            Assert.assertEquals(""#{record.name}"", column.getColumnHolder(""record"", ""suffix""));
            Assert.assertEquals(""#{record.namesuffix},"", column.getColumnHolder(""record"", ""suffix"", "",""));
            Assert.assertNull(column.getTypeHandler());
        }

        ResultMap resultMap = entityTable.getResultMap(configuration);
        Assert.assertEquals(""[USER_NAME]"", resultMap.getMappedColumns().toString());

        Assert.assertEquals(1, resultMap.getResultMappings().size());

        ResultMapping resultMapping = resultMap.getResultMappings().get(0);
        Assert.assertEquals(""user_name"", resultMapping.getColumn());
        Assert.assertEquals(""name"", resultMapping.getProperty());
        Assert.assertNull(resultMapping.getJdbcType());
        Assert.assertEquals(StringTypeHandler.class, resultMapping.getTypeHandler().getClass());
    }
",non-flaky,5
30954,camunda-cloud_zeebe,JsonSerializableToJsonTest.shouldConvertJsonSerializableToJson,"  @Test
  public void shouldConvertJsonSerializableToJson() {
    // given

    // when
    final String json = actualRecordSupplier.get().toJson();

    // then
    JsonUtil.assertEquality(json, expectedJson);
  }
",non-flaky,5
137168,spring-projects_spring-framework,AnnotationsScannerTests.method,"		@TestAnnotation1
		public void method() {
		}
",non-flaky,5
26756,MundaneImmortal_pair-distribution-app,DevPairsCombinationsTest.testGetPastPairByTrackForMissingHistory,"	@Test
	public void testGetPastPairByTrackForMissingHistory() {
		DevPairCombinations devPairCombinations = new DevPairCombinations(getPairsListFromDevs(getStandardDevs()));
		
		
		assertThat(devPairCombinations.getPastPairByTrack(3, ""track1""), is(nullValue()));
	}
",non-flaky,5
78270,apache_beam,StateNamespacesTest.testStability,"  @Test
  public void testStability() {
    StateNamespace global = StateNamespaces.global();
    StateNamespace intervalWindow =
        StateNamespaces.window(intervalCoder, intervalWindow(1000, 87392));
    StateNamespace intervalWindowAndTrigger =
        StateNamespaces.windowAndTrigger(intervalCoder, intervalWindow(1000, 87392), 57);
    StateNamespace globalWindow =
        StateNamespaces.window(GlobalWindow.Coder.INSTANCE, GlobalWindow.INSTANCE);
    StateNamespace globalWindowAndTrigger =
        StateNamespaces.windowAndTrigger(GlobalWindow.Coder.INSTANCE, GlobalWindow.INSTANCE, 12);

    assertEquals(""/"", global.stringKey());
    assertEquals(""/gAAAAAABVWD4ogU/"", intervalWindow.stringKey());
    assertEquals(""/gAAAAAABVWD4ogU/1L/"", intervalWindowAndTrigger.stringKey());
    assertEquals(""//"", globalWindow.stringKey());
    assertEquals(""//C/"", globalWindowAndTrigger.stringKey());
  }
",non-flaky,5
76936,Tencent_Firestorm,RssShuffleWriterTest.checkBlockSendResultTest,"  @Test
  public void checkBlockSendResultTest() {
    SparkConf conf = new SparkConf();
    conf.setAppName(""testApp"")
        .setMaster(""local[2]"")
        .set(RssClientConfig.RSS_TEST_FLAG, ""true"")
        .set(RssClientConfig.RSS_WRITER_SEND_CHECK_TIMEOUT, ""10000"")
        .set(RssClientConfig.RSS_WRITER_SEND_CHECK_INTERVAL, ""1000"")
        .set(RssClientConfig.RSS_COORDINATOR_QUORUM, ""127.0.0.1:12345,127.0.0.1:12346"");
    // init SparkContext
    SparkContext sc = SparkContext.getOrCreate(conf);
    RssShuffleManager manager = new RssShuffleManager(conf, false);

    Serializer kryoSerializer = new KryoSerializer(conf);
    ShuffleWriteClient mockShuffleWriteClient = mock(ShuffleWriteClient.class);
    Partitioner mockPartitioner = mock(Partitioner.class);
    ShuffleDependency mockDependency = mock(ShuffleDependency.class);
    RssShuffleHandle mockHandle = mock(RssShuffleHandle.class);
    when(mockHandle.getDependency()).thenReturn(mockDependency);
    when(mockDependency.partitioner()).thenReturn(mockPartitioner);
    when(mockPartitioner.numPartitions()).thenReturn(2);
    when(mockHandle.getPartitionToServers()).thenReturn(Maps.newHashMap());
    TaskMemoryManager mockTaskMemoryManager = mock(TaskMemoryManager.class);

    BufferManagerOptions bufferOptions = new BufferManagerOptions(conf);
    WriteBufferManager bufferManager = new WriteBufferManager(
        0, 0, bufferOptions, kryoSerializer,
        Maps.newHashMap(), mockTaskMemoryManager, new ShuffleWriteMetrics());
    WriteBufferManager bufferManagerSpy = spy(bufferManager);
    doReturn(1000000L).when(bufferManagerSpy).acquireMemory(anyLong());

    RssShuffleWriter rssShuffleWriter = new RssShuffleWriter(""appId"", 0, ""taskId"", 1L,
        bufferManagerSpy, (new TaskMetrics()).shuffleWriteMetrics(),
        manager, conf, mockShuffleWriteClient, mockHandle);

    // case 1: all blocks are sent successfully
    manager.addSuccessBlockIds(""taskId"", Sets.newHashSet(1L, 2L, 3L));
    rssShuffleWriter.checkBlockSendResult(Sets.newHashSet(1L, 2L, 3L));
    manager.clearCachedBlockIds();

    // case 2: partial blocks aren't sent before spark.rss.writer.send.check.timeout,
    // Runtime exception will be thrown
    manager.addSuccessBlockIds(""taskId"", Sets.newHashSet(1L, 2L));
    thrown.expect(RuntimeException.class);
    thrown.expectMessage(StringStartsWith.startsWith(""Timeout:""));
    rssShuffleWriter.checkBlockSendResult(Sets.newHashSet(1L, 2L, 3L));

    manager.clearCachedBlockIds();

    // case 3: partial blocks are sent failed, Runtime exception will be thrown
    manager.addSuccessBlockIds(""taskId"", Sets.newHashSet(1L, 2L));
    manager.addFailedBlockIds(""taskId"", Sets.newHashSet(3L));
    thrown.expect(RuntimeException.class);
    thrown.expectMessage(StringStartsWith.startsWith(""Send failed:""));
    rssShuffleWriter.checkBlockSendResult(Sets.newHashSet(1L, 2L, 3L));
    manager.clearCachedBlockIds();

    sc.stop();
  }
",non-flaky,5
118721,netty_netty,DetectPeerCloseWithoutReadTest.clientCloseWithoutServerReadIsDetectedNoExtraReadRequested,"    @Test(timeout = 10000)
    public void clientCloseWithoutServerReadIsDetectedNoExtraReadRequested() throws InterruptedException {
        clientCloseWithoutServerReadIsDetected0(false);
    }
",non-flaky,5
20944,NationalSecurityAgency_timely,TimeSeriesGroupingIteratorTest.testTimeSeriesDropOff,"    @Test
    public void testTimeSeriesDropOff() throws Exception {
        table.clear();
        long ts = System.currentTimeMillis();
        List<Tag> tags1 = new ArrayList<>();
        tags1.add(new Tag(""host"", ""r01n01""));
        List<Tag> tags2 = new ArrayList<>();
        tags2.add(new Tag(""host"", ""r01n02""));
        for (int i = 0; i < 100; i++) {
            ts += 1000;
            Metric m = new Metric(""sys.cpu.user"", ts, i * 1.0D, tags1);
            byte[] row = MetricAdapter.encodeRowKey(m);
            Key k = new Key(row, tags1.get(0).join().getBytes(StandardCharsets.UTF_8),
                    MetricAdapter.encodeColQual(ts, """"), new byte[0], ts);
            Value v = new Value(MetricAdapter.encodeValue(m.getValue().getMeasure()));
            table.put(k, v);
            if (i < 50) {
                // only populate this series 50 times
                Metric m2 = new Metric(""sys.cpu.user"", ts, i * 2.0D, tags2);
                byte[] row2 = MetricAdapter.encodeRowKey(m2);
                Key k2 = new Key(row2, tags2.get(0).join().getBytes(StandardCharsets.UTF_8),
                        MetricAdapter.encodeColQual(ts, """"), new byte[0], ts);
                Value v2 = new Value(MetricAdapter.encodeValue(m2.getValue().getMeasure()));
                table.put(k2, v2);
            }
        }

        SortedMapIterator source = new SortedMapIterator(table);
        TimeSeriesGroupingIterator iter = new TimeSeriesGroupingIterator();
        IteratorSetting settings = new IteratorSetting(100, TimeSeriesGroupingIterator.class);
        settings.addOption(TimeSeriesGroupingIterator.FILTER, ""0.20,0.20,0.20,0.20,0.20"");
        iter.init(source, settings.getOptions(), SCAN_IE);
        iter.seek(new Range(), EMPTY_COL_FAMS, true);

        // this section changed when the key structure changed so that identical
        // colFam values sorted consecutively within an given time period
        for (int i = 4; i < 100; i++) {
            System.out.println(i);
            checkNextResult(iter, new double[] { i - 4, i - 3, i - 2, i - 1, i });
        }
        for (int i = 4; i < 50; i++) {
            System.out.println(i);
            checkNextResult(iter, new double[] { (i - 4) * 2, (i - 3) * 2, (i - 2) * 2, (i - 1) * 2, i * 2 });
        }
        assertFalse(iter.hasTop());
    }
",non-flaky,5
159673,liquibase_liquibase,AddColumnExecutorTest.fullNoConstraints,"    @Test
    public void fullNoConstraints() throws Exception {
        this.statementUnderTest = new AddColumnStatement(null, null, ""table_name"", ""column_name"", ""int"", 42);


        assertCorrect(""alter table [table_name] add [column_name] int default 42 null"", SybaseDatabase.class);
        assertCorrect(""alter table [table_name] add [column_name] int constraint df_table_name_column_name default 42"", MSSQLDatabase.class);
//        assertCorrect(""alter table [table_name] add [column_name] integer default 42"", SQLiteDatabase.class);
        assertCorrect(""not supported. fixme!!"", SQLiteDatabase.class);
        assertCorrect(""alter table table_name add column_name int default 42"", PostgresDatabase.class, InformixDatabase.class, OracleDatabase.class, DerbyDatabase.class, HsqlDatabase.class, DB2Database.class, H2Database.class, FirebirdDatabase.class);
        assertCorrect(""alter table [table_name] add [column_name] int default 42 null"", SybaseASADatabase.class);
        assertCorrect(""alter table table_name add column_name int default 42 null"", MySQLDatabase.class, MariaDBDatabase.class);
        assertCorrectOnRest(""ALTER TABLE [table_name] ADD [column_name] int DEFAULT 42"");
    }
",non-flaky,5
112145,apache_shardingsphere-elasticjob,ShardingItemParametersTest.assertGetMapWhenIsEmpty,"    @Test
    public void assertGetMapWhenIsEmpty() {
        assertThat(new ShardingItemParameters("""").getMap(), is(Collections.EMPTY_MAP));
    }
",non-flaky,5
84656,apache_zookeeper,ZooKeeperTest.testNonexistantCommand,"    @Test
    public void testNonexistantCommand() throws Exception {
        testInvalidCommand(""cret -s /node1"", 127);
    }
",non-flaky,5
122594,vespa-engine_vespa,FileFinderTest.all_contents,"        @Test
        public void all_contents() {
            assertFileHelper(FileFinder.from(testRoot())
                            .maxDepth(1),

                    of(""file-1.json"", ""test.json"", ""test.txt"", ""test""),
                    of());

            assertTrue(Files.exists(testRoot()));
        }
",non-flaky,5
77006,Tencent_Firestorm,ShuffleServerGrpcTest.sendDataWithoutRegisterTest,"  @Test
  public void sendDataWithoutRegisterTest() throws Exception {
    List<ShuffleBlockInfo> blockInfos = Lists.newArrayList(new ShuffleBlockInfo(0, 0, 0, 100, 0,
        new byte[]{}, Lists.newArrayList(), 0, 100, 0));
    Map<Integer, List<ShuffleBlockInfo>> partitionToBlocks = Maps.newHashMap();
    partitionToBlocks.put(0, blockInfos);
    Map<Integer, Map<Integer, List<ShuffleBlockInfo>>> shuffleToBlocks = Maps.newHashMap();
    shuffleToBlocks.put(0, partitionToBlocks);

    RssSendShuffleDataRequest rssdr = new RssSendShuffleDataRequest(
        ""sendDataWithoutRegisterTest"", 3, 1000, shuffleToBlocks);
    shuffleServerClient.sendShuffleData(rssdr);
    assertEquals(132, shuffleServers.get(0).getPreAllocatedMemory());
    Thread.sleep(10000);
    assertEquals(0, shuffleServers.get(0).getPreAllocatedMemory());
  }
",non-flaky,5
135035,undertow-io_undertow,HeadersUtilsTestCase.testTokenExtraction,"    @Test
    public void testTokenExtraction() {

        Assert.assertEquals(""--xyz"", Headers.extractTokenFromHeader(""multipart/form-data; boundary=--xyz; param=abc"", ""boundary""));
    }
",non-flaky,5
33836,apache_camel,FileCopyExample.clean,"    @BeforeEach
    public void clean() {
        template.sendBodyAndHeader(ironMQEndpoint, ""fo"", IronMQConstants.OPERATION, IronMQConstants.CLEARQUEUE);
        deleteDirectory(""target/out"");
    }
",non-flaky,5
19460,eclipse_xtext-core,ImportedNamespaceAwareLocalScopeProviderTest.iterator,"	@Test public void testResourceSetReferencingResourceSet2() throws Exception {
			public Iterator<EObject> iterator() {
				return res2.getAllContents();
			}
",non-flaky,5
76761,quarkusio_quarkus,CreateProjectMojoIT.generateNewProjectAndRun,"    @Test
    public void generateNewProjectAndRun() throws Exception {
        testDir = initEmptyProject(""projects/project-generation-and-run"");

        // Scaffold the new project
        assertThat(testDir).isDirectory();
        invoker = initInvoker(testDir);

        Properties properties = new Properties();
        properties.put(""projectGroupId"", ""org.acme"");
        properties.put(""projectArtifactId"", ""acme"");
        properties.put(""extensions"", ""resteasy"");
        properties.put(""className"", ""org.acme.HelloResource"");
        InvocationResult result = setup(properties);

        assertThat(result.getExitCode()).isZero();

        // Run
        // As the directory is not empty (log) navigate to the artifactID directory
        testDir = new File(testDir, ""acme"");
        running = new RunningInvoker(testDir, false);
        final Properties mvnRunProps = new Properties();
        mvnRunProps.setProperty(""debug"", ""false"");
        running.execute(Arrays.asList(""compile"", ""quarkus:dev""), Collections.emptyMap(), mvnRunProps);

        String resp = DevModeTestUtils.getHttpResponse();

        assertThat(resp).containsIgnoringCase(""ready"").containsIgnoringCase(""application"").containsIgnoringCase(""org.acme"")
                .containsIgnoringCase(""1.0.0-SNAPSHOT"");

        String greeting = DevModeTestUtils.getHttpResponse(""/hello"");
        assertThat(greeting).containsIgnoringCase(""hello"");
    }
",non-flaky,5
43049,trinodb_trino,BaseConnectorTest.testLikePredicate,"    @Test
    public void testLikePredicate()
    {
        // filtered column is not selected
        assertQuery(""SELECT orderkey FROM orders WHERE orderpriority LIKE '5-L%'"");

        // filtered column is selected
        assertQuery(""SELECT orderkey, orderpriority FROM orders WHERE orderpriority LIKE '5-L%'"");

        // filtered column is not selected
        assertQuery(""SELECT orderkey FROM orders WHERE orderpriority LIKE '5-L__'"");

        // filtered column is selected
        assertQuery(""SELECT orderkey, orderpriority FROM orders WHERE orderpriority LIKE '5-L__'"");
    }
",non-flaky,5
361,wildfly_wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993.testListBindings.2.,"@Test
public void testListBindings() throws Exception {
    final Object value = new Object();
    bindObject(ServiceName.JBOSS.append(""TestBean""), value);
    bindObject(ServiceName.JBOSS.append(""foo"", ""TestBean""), value);
    bindObject(ServiceName.JBOSS.append(""foo"", ""bar"", ""TestBean""), value);
    bindObject(ServiceName.JBOSS.append(""foo"", ""bar"", ""baz"", ""TestBean""), value);
    store.add(ServiceName.JBOSS.append(""foos"", ""bar""));
    store.add(ServiceName.JBOSS.append(""fo"", ""bar""));
    store.add(ServiceName.JBOSS.append(""foo"", ""ba"", ""baz""));
    store.add(ServiceName.JBOSS.append(""foo"", ""bart"", ""baz""));
    store.add(ServiceName.JBOSS.append(""foo"", ""bar"", ""ba""));
    store.add(ServiceName.JBOSS.append(""foo"", ""bar"", ""bazt""));
    store.add(ServiceName.JBOSS.append(""foo"", ""bar"", ""art""));
    store.add(ServiceName.JBOSS.append(""other"", ""one""));
    List<Binding> list = store.listBindings(new CompositeName(""""));
    assertEquals(5, list.size());
    assertContains(list, ""TestBean"", Object.class);
    assertContains(list, ""foo"", NamingContext.class);
    assertContains(list, ""fo"", NamingContext.class);
    assertContains(list, ""foos"", NamingContext.class);
    assertContains(list, ""other"", NamingContext.class);
    list = store.listBindings(new CompositeName(""foo""));
    assertEquals(4, list.size());
    assertContains(list, ""TestBean"", Object.class);
    assertContains(list, ""ba"", NamingContext.class);
    assertContains(list, ""bart"", NamingContext.class);
    assertContains(list, ""bar"", NamingContext.class);
    for (Binding binding : list) {
        if (binding.getName().equals(""bar"")) {
            final Object bean = Context.class.cast(binding.getObject()).lookup(""TestBean"");
            assertNotNull(bean);
            assertEquals(value, bean);
        }
    }
}",test order dependency,4
175755,GoogleCloudPlatform_google-cloud-eclipse,AppEngineDeployPreferencesPanelTest.testNoProjectSelectedWhenSwitchingAccounts,"  @Test
  public void testNoProjectSelectedWhenSwitchingAccounts()
      throws ProjectRepositoryException, InterruptedException {
    when(loginService.getAccounts()).thenReturn(twoAccountSet);
    initializeProjectRepository();

    deployPanel = createPanel(false /* requireValues */);
    selectAccount(account1);
    deployPanel.latestGcpProjectQueryJob.join();

    Table projectTable = getProjectSelector().getViewer().getTable();
    assertThat(projectTable.getItemCount(), is(2));
    projectTable.setSelection(0);
    assertThat(projectTable.getSelectionCount(), is(1));

    selectAccount(account2);
    deployPanel.latestGcpProjectQueryJob.join();

    assertThat(projectTable.getItemCount(), is(1));
    assertThat(projectTable.getSelectionCount(), is(0));
  }
",non-flaky,5
21240,androidx_androidx,PreferencePersistTest.stringSet_persistAndRetrieve_returnsPersistedValue,"    @Test
    public void stringSet_persistAndRetrieve_returnsPersistedValue() {
        final Set<String> expected = TEST_STR_SET;

        mPreference.putStringSet(expected);
        Set<String> result = mPreference.getStringSet(TEST_DEFAULT_STR_SET);

        assertThat(result, containsInAnyOrder(expected.toArray()));
    }
",non-flaky,5
95644,togglz_togglz,DeviceActivationStrategyTest.shouldBeInactiveForEmptyParams,"    @Test
    public void shouldBeInactiveForEmptyParams() throws Exception {
        String[] emptyArguments = new String[]{"""", """", """"};
        assertThat(requestFrom(NORMAL)).isInactiveWithParams(emptyArguments);
        cleanup();
        assertThat(requestFrom(TABLET)).isInactiveWithParams(emptyArguments);
        cleanup();
        assertThat(requestFrom(MOBILE)).isInactiveWithParams(emptyArguments);
        cleanup();
    }
",non-flaky,5
135063,undertow-io_undertow,URLUtilsTestCase.testDecodingURLMustNotMutateSpaceSymbolsCaseIfSpaceDecodingDisabled,"    @Test
    public void testDecodingURLMustNotMutateSpaceSymbolsCaseIfSpaceDecodingDisabled() throws Exception {
        final String url = ""http://localhost:3001/wild"" + spaceCode + ""west"";

        final String result = URLUtils.decode(url, Charset.defaultCharset().name(), false, new StringBuilder());
        assertEquals(url, result);
    }
",non-flaky,5
112746,hwang-pku_ormlite-core,DatabaseConnectionProxyTest.testQueryForLongStringObjectArrayFieldTypeArrayNull,"	@Test
	public void testQueryForLongStringObjectArrayFieldTypeArrayNull() throws Exception {
		DatabaseConnectionProxy proxy = new DatabaseConnectionProxy(null);
		assertEquals(0, proxy.queryForLong(""statment"", null, null));
		proxy.close();
	}
",non-flaky,5
70804,apache_kafka,PluginUtilsTest.testOrderOfPluginUrlsWithJars,"    @Test
    public void testOrderOfPluginUrlsWithJars() throws Exception {
        createBasicDirectoryLayout();
        // Here this method is just used to create the files. The result is not used.
        createBasicExpectedUrls();

        List<Path> actual = PluginUtils.pluginUrls(pluginPath);
        // 'simple-transform.jar' is created first. In many cases, without sorting within the
        // PluginUtils, this jar will be placed before 'another-transform.jar'. However this is
        // not guaranteed because a DirectoryStream does not maintain a certain order in its
        // results. Besides this test case, sorted order in every call to assertUrls below.
        int i = Arrays.toString(actual.toArray()).indexOf(""another-transform.jar"");
        int j = Arrays.toString(actual.toArray()).indexOf(""simple-transform.jar"");
        assertTrue(i < j);
    }
",non-flaky,5
77447,opensearch-project_OpenSearch,DependencyLicensesTaskTests.givenProjectWithAShaButWithoutTheDependencyThenShouldThrowException,"    @Test
    public void givenProjectWithAShaButWithoutTheDependencyThenShouldThrowException() throws Exception {
        expectedException.expect(GradleException.class);
        expectedException.expectMessage(containsString(""Unused sha files found: \n""));

        project.getDependencies().add(""compile"", dependency);

        File licensesDir = getLicensesDir(project);
        createAllDefaultDependencyFiles(licensesDir, ""groovy-all"");
        createFileIn(licensesDir, ""non-declared.sha1"", """");

        task.get().checkDependencies();
    }
",non-flaky,5
30942,camunda-cloud_zeebe,ElasticsearchExporterTest.shouldFlushOnClose,"  @Test
  public void shouldFlushOnClose() {
    // given
    createAndOpenExporter();

    // when
    testHarness.close();

    // then
    verify(esClient).flush();
  }
",non-flaky,5
114047,aws_aws-sdk-java-v2,DeleteItemWithResponseIntegrationTest.deleteItem_returnConsumedCapacity_set_consumedCapacityNotNull,"    @Test
    public void deleteItem_returnConsumedCapacity_set_consumedCapacityNotNull() {
        Key key = Key.builder().partitionValue(1).sortValue(10).build();

        DeleteItemEnhancedResponse<Record> response =
            mappedTable.deleteItemWithResponse(r -> r.key(key).returnConsumedCapacity(ReturnConsumedCapacity.TOTAL));

        assertThat(response.consumedCapacity()).isNotNull();
    }
",non-flaky,5
19435,eclipse_xtext-core,XtextValidationTest.testBug322875_04,"	@Test
	public void testBug322875_04() throws Exception {
		String testGrammarNsURI = ""grammar foo.Bar with org.eclipse.xtext.common.Terminals\n "" +
				"" import 'http://www.eclipse.org/emf/2002/Ecore'  "" +
				""Model returns EClass: name=ID;"";
		String testGrammarPlatformPlugin = ""grammar foo.Bar with org.eclipse.xtext.common.Terminals\n "" +
				"" import 'platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore'  "" +
				""Model returns EClass: name=ID;"";
		XtextResource resourceOk = getResourceFromString(testGrammarNsURI);
		XtextResource resourceOk2 = (XtextResource) resourceOk.getResourceSet().createResource(URI.createURI(""unused.xtext""));
		resourceOk2.load(new StringInputStream(testGrammarPlatformPlugin), null);
		Diagnostic diagOK = Diagnostician.INSTANCE.validate(resourceOk.getContents().get(0));
		assertNotNull(""diag"", diagOK);
		assertEquals(diagOK.toString(), 0, diagOK.getChildren().size());
		diagOK = Diagnostician.INSTANCE.validate(resourceOk2.getContents().get(0));
		assertNotNull(""diag"", diagOK);
		assertEquals(diagOK.toString(), 0, diagOK.getChildren().size());
	}
",non-flaky,5
76736,quarkusio_quarkus,CreateExtensionMojoIT.testCreateCoreExtensionFromExtensionsDir,"    @Test
    public void testCreateCoreExtensionFromExtensionsDir(TestInfo testInfo) throws Throwable {
        testDir = initProject(""projects/create-extension-quarkus-core"", ""output/create-extension-quarkus-core-extensions-dir"");
        assertThat(testDir).isDirectory();
        invoker = initInvoker(testDir.toPath().resolve(""extensions/"").toFile());

        Properties properties = new Properties();
        properties.put(""extensionId"", ""quarkus-my-ext"");
        InvocationResult result = setup(properties);

        assertThat(result.getExitCode()).isZero();

        final Path testDirPath = testDir.toPath();
        assertThatDirectoryTreeMatchSnapshots(testInfo, testDirPath)
                .contains(
                        ""extensions/my-ext/pom.xml"",
                        ""extensions/my-ext/deployment/src/main/java/org/acme/my/ext/deployment/MyExtProcessor.java"",
                        ""integration-tests/my-ext/pom.xml"",
                        ""integration-tests/my-ext/src/test/java/org/acme/my/ext/it/MyExtResourceTest.java"");
        assertThatMatchSnapshot(testInfo, testDirPath, ""extensions/my-ext/pom.xml"");
        assertThatMatchSnapshot(testInfo, testDirPath,
                ""extensions/my-ext/runtime/src/main/resources/META-INF/quarkus-extension.yaml"");
        assertThatMatchSnapshot(testInfo, testDirPath, ""bom/application/pom.xml"");
        assertThatMatchSnapshot(testInfo, testDirPath, ""integration-tests/pom.xml"");
        assertThatMatchSnapshot(testInfo, testDirPath, ""extensions/pom.xml"");
    }
",non-flaky,5
33854,apache_camel,FhirDeleteIT.testDeleteResourceConditionalByUrlCacheControlDirective,"    @Test
    public void testDeleteResourceConditionalByUrlCacheControlDirective() throws Exception {
        assertTrue(patientExists());
        Map<String, Object> headers = new HashMap<>();
        headers.put(ExtraParameters.CACHE_CONTROL_DIRECTIVE.getHeaderName(), new CacheControlDirective().setNoCache(true));

        IBaseOperationOutcome result = requestBodyAndHeaders(""direct://RESOURCE_CONDITIONAL_BY_URL"",
                ""Patient?given=Vincent&family=Freeman"", headers);

        LOG.debug(""resourceConditionalByUrl: "" + result);
        assertNotNull(result, ""resourceConditionalByUrl result"");
        assertFalse(patientExists());
    }
",non-flaky,5
33844,apache_camel,FhirTransactionIT.testWithBundle,"    @Test
    public void testWithBundle() throws Exception {
        // using org.hl7.fhir.instance.model.api.IBaseBundle message body for single parameter ""bundle""
        Bundle result = requestBody(""direct://WITH_BUNDLE"", createTransactionBundle());

        assertNotNull(result, ""withBundle result"");
        assertTrue(result.getEntry().get(0).getResponse().getStatus().contains(""Created""));
        LOG.debug(""withBundle: "" + result);
    }
",non-flaky,5
135052,undertow-io_undertow,NetworkUtilsAddressParsingTestCase.testIpV6AddressMultipleColons2,"    @Test(expected = IOException.class)
    public void testIpV6AddressMultipleColons2() throws IOException {
        NetworkUtils.parseIpv6Address(""2001::100::329"");
    }
",non-flaky,5
179435,abel533_Mapper,FieldHelperTest.testUser,"    @Test
    public void testUser(){
        List<EntityField> fieldList = FieldHelper.getFields(User.class);
        Assert.assertEquals(2, fieldList.size());
        Assert.assertEquals(""id"", fieldList.get(0).getName());
        Assert.assertEquals(""name"", fieldList.get(1).getName());
    }
",non-flaky,5
113701,salesforce_reactive-grpc,CancellationPropagationIntegrationTest.clientCanCancelServerStreamExplicitly,"    @Test
    public void clientCanCancelServerStreamExplicitly() throws InterruptedException {
        TestService svc = new TestService();
        serverRule.getServiceRegistry().addService(svc);

        AtomicInteger lastNumberConsumed = new AtomicInteger(Integer.MAX_VALUE);
        ReactorNumbersGrpc.ReactorNumbersStub stub = ReactorNumbersGrpc.newReactorStub(serverRule.getChannel());
        Flux<NumberProto.Number> test = Mono.just(Empty.getDefaultInstance()).as(stub::responsePressure)
                .doOnNext(number -> {lastNumberConsumed.set(number.getNumber(0)); System.out.println(""C: "" + number.getNumber(0));})
                .doOnError(throwable -> System.out.println(throwable.getMessage()))
                .doOnComplete(() -> System.out.println(""Completed""))
                .doOnCancel(() -> System.out.println(""Client canceled""));

        Disposable subscription = test.publish().connect();

        Thread.sleep(1000);
        subscription.dispose();
        Thread.sleep(1000);

        // Cancellation may or may not deliver the last generated message due to delays in the gRPC processing thread
        assertThat(Math.abs(lastNumberConsumed.get() - svc.getLastNumberProduced())).isLessThanOrEqualTo(3);
        assertThat(svc.wasCanceled()).isTrue();
    }
",non-flaky,5
162753,OpenAPITools_openapi-generator,CatAllOfTest.declawedTest,"    @Test
    public void declawedTest() {
        // TODO: test declawed
    }
",non-flaky,5
106584,Alluxio_alluxio,HdfsConfValidationTaskTest.missingBoth,"  @Test
  public void missingBoth() {
    sConf.set(PropertyKey.UNDERFS_HDFS_CONFIGURATION, ""/conf/"");
    HdfsConfValidationTask task = new HdfsConfValidationTask(""hdfs://namenode:9000/alluxio"", sConf);
    ValidationTaskResult result = task.loadHdfsConfig();
    assertEquals(result.getState(), ValidationUtils.State.SKIPPED);
    assertThat(result.getResult(), containsString(""hdfs-site.xml is not configured""));
    assertThat(result.getResult(), containsString(""core-site.xml is not configured""));
    assertThat(result.getAdvice(), containsString(""hdfs-site.xml""));
    assertThat(result.getAdvice(), containsString(""core-site.xml""));
  }
",non-flaky,5
38258,palantir_atlasdb,AbstractSerializableTransactionTest.testClassicWriteSkew2,"    @Test
    public void testClassicWriteSkew2() {
        Transaction t0 = startTransaction();
        put(t0, ""row1"", ""col1"", ""100"");
        put(t0, ""row2"", ""col1"", ""100"");
        t0.commit();

        Transaction t1 = startTransaction();
        Transaction t2 = startTransaction();
        withdrawMoney(t1, true, false);
        withdrawMoney(t2, false, false);

        t2.commit();
        try {
            t1.commit();
            fail();
        } catch (TransactionSerializableConflictException e) {
            // this is expectecd to throw because it is a write skew
        }
    }
",non-flaky,5
70864,apache_kafka,StateTrackerTest.currentState,"    @Test
    public void currentState() {
        for (State state : State.values()) {
            tracker.changeState(state, time.milliseconds());
            assertEquals(state, tracker.currentState());
        }
    }
",non-flaky,5
76707,quarkusio_quarkus,ResourcesITCase.excludedNative,"    @Test
    public void excludedNative() {
        RestAssured.when()
                .get(""/resources/test-resources/file.adoc"")
                .then()
                .statusCode(404);

        RestAssured.when()
                .get(""/resources/test-resources/excluded/unwanted.txt"")
                .then()
                .statusCode(404);

        RestAssured.when()
                .get(""/resources/META-INF/quarkus-native-resources.txt"")
                .then()
                .statusCode(404);
    }
",non-flaky,5
98269,spotify_docker-client,ContainerStateTest.testLoadInvalidJson,"  @Test
  public void testLoadInvalidJson() throws Exception {
    expectedException.expect(JsonParseException.class);
    objectMapper.readValue(fixture(""fixtures/invalid.json""), ContainerState.class);

  }
",non-flaky,5
114077,aws_aws-sdk-java-v2,ExpressionTest.joinExpressions_correctlyJoins,"    @Test
    public void joinExpressions_correctlyJoins() {
        String result = Expression.joinExpressions(""one"", ""two"", "" AND "");
        assertThat(result, is(""(one) AND (two)""));
    }
",non-flaky,5
135778,Netflix_Hystrix,CollapsedRequestSubjectTest.testSetNullResponseSuccess,"    @Test
    public void testSetNullResponseSuccess() throws InterruptedException, ExecutionException {
        CollapsedRequestSubject<String, String> cr = new CollapsedRequestSubject<String, String>(""hello"");
        Observable<String> o = cr.toObservable();
        Future<String> v = o.toBlocking().toFuture();

        cr.setResponse(null);

        // fetch value
        assertEquals(null, v.get());
    }
",non-flaky,5
178021,aosp-mirror_platform_frameworks_support,VerticalGridSupportFragmentTest.immediateRemoveFragment,"    @Test
    public void immediateRemoveFragment() throws Throwable {
        Intent intent = new Intent();
        ActivityTestRule<ImmediateRemoveFragmentActivity> activityTestRule =
                new ActivityTestRule<>(ImmediateRemoveFragmentActivity.class, false, false);
        ImmediateRemoveFragmentActivity activity = activityTestRule.launchActivity(intent);

        Thread.sleep(1000);
    }
",non-flaky,5
98098,vert-x3_vertx-mongo-client,ParsingSSLOptionsTest.testInvalidPemCertificate,"  @Test(expected = IllegalArgumentException.class)
  public void testInvalidPemCertificate() throws IOException {
    // given
    final File tmpFile = tmpFolder.newFile(""brokenCa.pem"");
    try (final FileWriter tmpWriter = new FileWriter(tmpFile)) {
      tmpWriter.write(""-----BEGIN CERTIFICATE-----\n"" +
        ""MIICljCCAfigAwIBAgI...BROKEN...xsykBBTOIVXnYdPkdZvvnoAIcfA7iM\n"" +
        ""-----END CERTIFICATE-----"");
    }
    final JsonObject withSSLAndCaPath = new JsonObject()
      .put(""ssl"", true)
      .put(""caPath"", tmpFile.getAbsolutePath());

    // then
    new MongoClientOptionsParser(vertx, withSSLAndCaPath);
  }
",non-flaky,5
20937,NationalSecurityAgency_timely,AuthCacheTest.testGetAuths,"    @Test
    public void testGetAuths() throws Exception {
        Authorizations a = AuthCache.getAuthorizations(cookie);
        Assert.assertEquals(""A,B,C"", a.toString());
    }
",non-flaky,5
113770,salesforce_reactive-grpc,ReactiveStreamObserverPublisherClientTest.onErrorDelegates,"    @Test
    public void onErrorDelegates() {
        ClientCallStreamObserver<Object> obs = mock(ClientCallStreamObserver.class);
        Subscriber<Object> sub = mock(Subscriber.class);

        ReactiveStreamObserverPublisherClient<Object> pub = new ReactiveStreamObserverPublisherClient<Object>(obs);
        pub.subscribe(sub);

        Throwable obj = new Exception();

        pub.onError(obj);
        verify(sub).onError(obj);
    }
",non-flaky,5
218,alibaba_fastjson,JSONObjectTest_readObject.test_6,"@Test
public void test_6() throws Exception {
    JSONObject jsonObject = new JSONObject();
    jsonObject.put(""val"", new Character[]{  });
    jsonObject.put(""cls"", Number.class);
    jsonObject.put(""nums"", new Number[]{  });
    ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();
    ObjectOutputStream objOut = new ObjectOutputStream(bytesOut);
    objOut.writeObject(jsonObject);
    objOut.flush();
    byte[] bytes = bytesOut.toByteArray();
    ByteArrayInputStream bytesIn = new ByteArrayInputStream(bytes);
    ObjectInputStream objIn = new ObjectInputStream(bytesIn);
    Object obj = objIn.readObject();
    assertEquals(JSONObject.class, obj.getClass());
    assertEquals(jsonObject.toJSONString(), JSON.toJSONString(obj));
}",unordered collections,3
118736,netty_netty,EmptyByteBufTest.consistentEqualsAndHashCodeWithAbstractBytebuf,"    @Test
    public void consistentEqualsAndHashCodeWithAbstractBytebuf() {
        ByteBuf empty = new EmptyByteBuf(UnpooledByteBufAllocator.DEFAULT);
        ByteBuf emptyAbstract = new UnpooledHeapByteBuf(UnpooledByteBufAllocator.DEFAULT, 0, 0);
        assertEquals(emptyAbstract, empty);
        assertEquals(emptyAbstract.hashCode(), empty.hashCode());
        assertEquals(EmptyByteBuf.EMPTY_BYTE_BUF_HASH_CODE, empty.hashCode());
        assertTrue(emptyAbstract.release());
        assertFalse(empty.release());
    }
",non-flaky,5
118749,netty_netty,ByteBufUtilTest.testWriteUsAsciiSwapped,"    @Test
    public void testWriteUsAsciiSwapped() {
        String usAscii = ""NettyRocks"";
        ByteBuf buf = Unpooled.buffer(16);
        buf.writeBytes(usAscii.getBytes(CharsetUtil.US_ASCII));
        SwappedByteBuf buf2 = new SwappedByteBuf(Unpooled.buffer(16));
        ByteBufUtil.writeAscii(buf2, usAscii);

        assertEquals(buf, buf2);

        buf.release();
        buf2.release();
    }
",non-flaky,5
43033,trinodb_trino,BaseDynamicPartitionPruningTest.testJoinWithImplicitCoercion,"    @Test(timeOut = 30_000)
    public void testJoinWithImplicitCoercion()
    {
        // setup partitioned fact table with integer suppkey
        createLineitemTable(""partitioned_lineitem_int"", ImmutableList.of(""orderkey"", ""CAST(suppkey as int) suppkey_int""), ImmutableList.of(""suppkey_int""));
        assertQuery(
                ""SELECT count(*) FROM partitioned_lineitem_int"",
                ""VALUES "" + LINEITEM_COUNT);

        @Language(""SQL"") String selectQuery = ""SELECT * FROM partitioned_lineitem_int l JOIN supplier s ON l.suppkey_int = s.suppkey AND s.name = 'Supplier#000000001'"";
        ResultWithQueryId<MaterializedResult> result = getDistributedQueryRunner().executeWithQueryId(
                getSession(),
                selectQuery);
        MaterializedResult expected = computeActual(withDynamicFilteringDisabled(), selectQuery);
        assertEqualsIgnoreOrder(result.getResult(), expected);

        OperatorStats probeStats = searchScanFilterAndProjectOperatorStats(result.getQueryId(), getQualifiedTableName(""partitioned_lineitem_int""));
        // Probe-side is partially scanned
        assertEquals(probeStats.getInputPositions(), 615L);

        DynamicFiltersStats dynamicFiltersStats = getDynamicFilteringStats(result.getQueryId());
        assertEquals(dynamicFiltersStats.getTotalDynamicFilters(), 1L);
        assertEquals(dynamicFiltersStats.getLazyDynamicFilters(), 1L);
        assertEquals(dynamicFiltersStats.getReplicatedDynamicFilters(), 0L);
        assertEquals(dynamicFiltersStats.getDynamicFiltersCompleted(), 1L);
        DynamicFilterDomainStats domainStats = getOnlyElement(dynamicFiltersStats.getDynamicFilterDomainStats());
        assertEquals(domainStats.getSimplifiedDomain(), singleValue(BIGINT, 1L).toString(getSession().toConnectorSession()));
    }
",non-flaky,5
59663,looly_hutool,SystemUtilTest.dumpTest,"	@Test
	public void dumpTest() {
		SystemUtil.dumpSystemInfo();
	}
",non-flaky,5
156428,apache_commons-lang,DateUtilsFragmentTest.setUp,"    @BeforeEach
    public void setUp() {
        aCalendar = Calendar.getInstance();
        aCalendar.set(2005, months, days, hours, minutes, seconds);
        aCalendar.set(Calendar.MILLISECOND, millis);
        aDate = aCalendar.getTime();
    }
",non-flaky,5
26870,wildfly_wildfly,NamingContextTestCase.testLookupReference,"    @Test
    public void testLookupReference() throws Exception {
        final Name name = new CompositeName(""test"");
        final Reference reference = new Reference(String.class.getName(), new StringRefAddr(""blah"", ""test""), TestObjectFactory.class.getName(), null);
        namingStore.bind(name, reference);

        Object result = namingContext.lookup(name);
        assertEquals(""test"", result);

        //the same with security permissions
        result = testActionPermission(JndiPermission.ACTION_LOOKUP, namingContext, ""test"");
        assertEquals(""test"", result);
    }
",non-flaky,5
86081,graylog2_graylog2-server,EventDefinitionHandlerTest.create,"    @Test
    public void create() {
        final EventDefinitionDto newDto = EventDefinitionDto.builder()
                .title(""Test"")
                .description(""A test event definition"")
                .config(TestEventProcessorConfig.builder()
                        .message(""This is a test event processor"")
                        .searchWithinMs(300000)
                        .executeEveryMs(60001)
                        .build())
                .priority(3)
                .alert(false)
                .notificationSettings(EventNotificationSettings.withGracePeriod(60000))
                .keySpec(ImmutableList.of(""a"", ""b""))
                .notifications(ImmutableList.of())
                .build();

        final EventDefinitionDto dto = handler.create(newDto, Optional.empty());

        // Handler should create the event definition
        assertThat(eventDefinitionService.get(dto.id())).isPresent();

        final Optional<JobDefinitionDto> jobDefinition = jobDefinitionService.getByConfigField(""event_definition_id"", dto.id());

        // Handler also should create the job definition for the event definition/processor
        assertThat(jobDefinition).isPresent().get().satisfies(definition -> {
            assertThat(definition.title()).isEqualTo(""Test"");
            assertThat(definition.description()).isEqualTo(""A test event definition"");
            assertThat(definition.config()).isInstanceOf(EventProcessorExecutionJob.Config.class);

            final EventProcessorExecutionJob.Config config = (EventProcessorExecutionJob.Config) definition.config();


            assertThat(config.processingWindowSize()).isEqualTo(300000);
            assertThat(config.processingHopSize()).isEqualTo(60001);
        });

        // And the handler should also create a job trigger for the created job definition
        final Optional<JobTriggerDto> jobTrigger = jobTriggerService.nextRunnableTrigger();

        assertThat(jobTrigger).isPresent().get().satisfies(trigger -> {
            assertThat(trigger.jobDefinitionId()).isEqualTo(jobDefinition.get().id());
            assertThat(trigger.schedule()).isInstanceOf(IntervalJobSchedule.class);

            final IntervalJobSchedule schedule = (IntervalJobSchedule) trigger.schedule();

            assertThat(schedule.interval()).isEqualTo(60001);
            assertThat(schedule.unit()).isEqualTo(TimeUnit.MILLISECONDS);
        });
    }
",non-flaky,5
76956,Tencent_Firestorm,JettyServerTest.jettyServerStartTest,"  @Test
  public void jettyServerStartTest() throws Exception {
    try {
      RssBaseConf conf = new RssBaseConf();
      conf.setString(""rss.jetty.http.port"", ""9527"");
      JettyServer jettyServer1 = new JettyServer(conf);
      JettyServer jettyServer2 = new JettyServer(conf);
      jettyServer1.start();

      ExitUtils.disableSystemExit();
      final String expectMessage = ""Fail to start jetty http server"";
      final int expectStatus = 1;
      try {
        jettyServer2.start();
      } catch (Exception e) {
        assertEquals(expectMessage, e.getMessage());
        assertEquals(expectStatus, ((ExitException) e).getStatus());
      }

      final Thread t = new Thread(null, () -> {
        throw new AssertionError(""TestUncaughtException"");
      }, ""testThread"");
      t.start();
      t.join();
    } catch (Exception e) {
      e.printStackTrace();
      fail();
    }

  }
",non-flaky,5
290,wildfly_wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993.testListBindingsNameNotFound,"@Test
public void testListBindingsNameNotFound() throws Exception {
    try {
        namingContext.listBindings(new CompositeName(""test""));
        fail(""Should have thrown and NameNotFoundException"");
    } catch (NameNotFoundException expected) {
    }
    try {
        testActionPermission(JndiPermission.ACTION_LIST_BINDINGS, namingContext, ""test"");
        fail(""Should have thrown and NameNotFoundException with appropriate permissions"");
    } catch (NameNotFoundException expected) {
    }
}",test order dependency,4
99764,apache_cassandra,RateBasedBackPressureTest.testFactorMustBeBiggerEqualThanOne,"    @Test(expected = IllegalArgumentException.class)
    public void testFactorMustBeBiggerEqualThanOne() throws Exception
    {
        new RateBasedBackPressure(ImmutableMap.of(HIGH_RATIO, ""0.9"", FACTOR, ""0"", FLOW, ""FAST""), new TestTimeSource(), 10);
    }
",non-flaky,5
159702,liquibase_liquibase,LockServiceExecuteTest.performTest,"//    @Test
//    public void waitForLock_twoConnections() throws Exception {
//        new DatabaseTestTemplate().testOnAvailableDatabases(new DatabaseTest() {
//            public void performTest(Database database) throws Exception {
////                if (database instanceof H2Database) {
////                    return;
////                }
//
//                String url = DatabaseTestContext.getInstance().getTestUrl(database);
//                System.out.println(url);
//                DatabaseConnection connection2 = DatabaseTestContext.getInstance().openDatabaseConnection(url);
//                Database database2 = DatabaseFactory.getInstance().findCorrectDatabaseImplementation(connection2);
//
//                assertTrue(LockService.getInstance(database).acquireLock());
//                assertTrue(LockService.getInstance(database).hasChangeLogLock());
//                assertFalse(LockService.getInstance(database2).hasChangeLogLock());
//
//                assertFalse(LockService.getInstance(database2).acquireLock());
//                assertFalse(LockService.getInstance(database2).acquireLock());
//
//                LockService.getInstance(database).releaseLock();
//                assertTrue(LockService.getInstance(database2).acquireLock());
//
//            }
",non-flaky,5
70787,apache_kafka,StartAndStopLatchTest.shouldReturnTrueWhenAwaitingForStartAndStopAndDependentLatch,"    @Test
    public void shouldReturnTrueWhenAwaitingForStartAndStopAndDependentLatch() throws Throwable {
        StartAndStopLatch depLatch = new StartAndStopLatch(1, 1, this::complete, null, clock);
        dependents = Collections.singletonList(depLatch);
        latch = new StartAndStopLatch(1, 1, this::complete, dependents, clock);

        future = asyncAwait(100);
        latch.recordStart();
        latch.recordStop();
        depLatch.recordStart();
        depLatch.recordStop();
        clock.sleep(10);
        assertTrue(future.get(200, TimeUnit.MILLISECONDS));
        assertTrue(future.isDone());
    }
",non-flaky,5
112760,hwang-pku_ormlite-core,RawResultsImplTest.testQueryRawColumns,"	@Test
	public void testQueryRawColumns() throws Exception {
		Dao<Foo, Integer> dao = createDao(Foo.class, true);
		Foo foo1 = new Foo();
		foo1.val = 1;
		foo1.equal = 10;
		assertEquals(1, dao.create(foo1));
		Foo foo2 = new Foo();
		foo2.val = 10;
		foo2.equal = 5;
		assertEquals(1, dao.create(foo2));
		QueryBuilder<Foo, Integer> qb = dao.queryBuilder();
		qb.selectRaw(""COUNT(*)"");
		GenericRawResults<String[]> rawResults = dao.queryRaw(qb.prepareStatementString());
		List<String[]> results = rawResults.getResults();
		assertEquals(1, results.size());
		// 2 rows inserted
		assertEquals(""2"", results.get(0)[0]);

		qb = dao.queryBuilder();
		qb.selectRaw(""MIN(val)"", ""MAX(val)"");
		rawResults = dao.queryRaw(qb.prepareStatementString());
		results = rawResults.getResults();
		assertEquals(1, results.size());
		String[] result = results.get(0);
		assertEquals(2, result.length);
		// foo1 has the maximum value
		assertEquals(Integer.toString(foo1.val), result[0]);
		// foo2 has the maximum value
		assertEquals(Integer.toString(foo2.val), result[1]);
	}
",non-flaky,5
286,apache_hadoop,TestReaddir.testReaddirBasic,"  @Test
  public void testReaddirBasic() throws IOException {
    // Get inodeId of /tmp
    HdfsFileStatus status = nn.getRpcServer().getFileInfo(testdir);
    long dirId = status.getFileId();
    int namenodeId = Nfs3Utils.getNamenodeId(config);

    // Create related part of the XDR request
    XDR xdr_req = new XDR();
    FileHandle handle = new FileHandle(dirId, namenodeId);
    handle.serialize(xdr_req);
    xdr_req.writeLongAsHyper(0); // cookie
    xdr_req.writeLongAsHyper(0); // verifier
    xdr_req.writeInt(100); // count

    READDIR3Response response = nfsd.readdir(xdr_req.asReadOnlyWrap(),
        securityHandler, new InetSocketAddress(""localhost"", 1234));
    List<Entry3> dirents = response.getDirList().getEntries();
    assertTrue(dirents.size() == 5); // inculding dot, dotdot

    // Test start listing from f2
    status = nn.getRpcServer().getFileInfo(testdir + ""/f2"");
    long f2Id = status.getFileId();

    // Create related part of the XDR request
    xdr_req = new XDR();
    handle = new FileHandle(dirId, namenodeId);
    handle.serialize(xdr_req);
    xdr_req.writeLongAsHyper(f2Id); // cookie
    xdr_req.writeLongAsHyper(0); // verifier
    xdr_req.writeInt(100); // count

    response = nfsd.readdir(xdr_req.asReadOnlyWrap(), securityHandler,
        new InetSocketAddress(""localhost"", 1234));
    dirents = response.getDirList().getEntries();
    assertTrue(dirents.size() == 1);
    Entry3 entry = dirents.get(0);
    assertTrue(entry.getName().equals(""f3""));

    // When the cookie is deleted, list starts over no including dot, dotdot
    hdfs.delete(new Path(testdir + ""/f2""), false);

    response = nfsd.readdir(xdr_req.asReadOnlyWrap(), securityHandler,
        new InetSocketAddress(""localhost"", 1234));
    dirents = response.getDirList().getEntries();
    assertTrue(dirents.size() == 2); // No dot, dotdot
  }
",non-flaky,5
135044,undertow-io_undertow,NetworkUtilsAddressParsingTestCase.testIpV4Hostname,"    @Test(expected = IOException.class)
    public void testIpV4Hostname() throws IOException {
        NetworkUtils.parseIpv4Address(""localhost"");
    }
",non-flaky,5
179463,abel533_Mapper,KeySqlTest.testUserAutoIncrementIdentity,"    @Test
    public void testUserAutoIncrementIdentity() {
        SqlSession sqlSession = getSqlSession();
        try {
            UserAutoIncrementIdentityMapper mapper = sqlSession.getMapper(UserAutoIncrementIdentityMapper.class);

            UserAutoIncrementIdentity user = new UserAutoIncrementIdentity();
            user.setName(""liuzh"");
            Assert.assertEquals(1, mapper.insert(user));
            Assert.assertNotNull(user.getId());

            user = mapper.selectByPrimaryKey(user.getId());
            Assert.assertEquals(""liuzh"", user.getName());
        } finally {
            sqlSession.close();
        }
    }
",non-flaky,5
112718,hwang-pku_ormlite-core,DatabaseConnectionProxyFactoryTest.testChangeInsertValue,"	@Test
	public void testChangeInsertValue() throws Exception {
		Dao<Foo, Object> dao = createDao(Foo.class, true);
		Foo foo = new Foo();
		foo.val = TEST_CHANGE_FROM;

		ConnectionProxy.lastValue = 0;
		assertEquals(1, dao.create(foo));
		/*
		 * After we create an instance of foo, we check to see that our proxy was able to intercept the val argument.
		 */
		assertEquals(foo.val, ConnectionProxy.lastValue);

		Foo result = dao.queryForId(foo.id);
		assertNotNull(result);
		assertEquals(TEST_CHANGE_TO, result.val);
		assertTrue(result.val != TEST_CHANGE_FROM);
	}
",non-flaky,5
179421,abel533_Mapper,NameStyleTest.testCamelhumpAndLowercase,"    @Test
    public void testCamelhumpAndLowercase(){
        EntityHelper.initEntityNameMap(UserCamelhumpAndLowercase.class, config);
        EntityTable entityTable = EntityHelper.getEntityTable(UserCamelhumpAndLowercase.class);
        Assert.assertNotNull(entityTable);
        Assert.assertEquals(""user_camelhump_and_lowercase"", entityTable.getName());

        Set<EntityColumn> columns = entityTable.getEntityClassColumns();
        Assert.assertEquals(1, columns.size());

        for (EntityColumn column : columns) {
            Assert.assertEquals(""user_name"", column.getColumn());
            Assert.assertEquals(""userName"", column.getProperty());

            Assert.assertEquals(""user_name = #{userName}"", column.getColumnEqualsHolder());
            Assert.assertEquals(""user_name = #{record.userName}"", column.getColumnEqualsHolder(""record""));
            Assert.assertEquals(""#{userName}"", column.getColumnHolder());
            Assert.assertEquals(""#{record.userName}"", column.getColumnHolder(""record""));
            Assert.assertEquals(""#{record.userName}"", column.getColumnHolder(""record"", ""suffix""));
            Assert.assertEquals(""#{record.userNamesuffix},"", column.getColumnHolder(""record"", ""suffix"", "",""));
            Assert.assertNull(column.getTypeHandler());
        }

        ResultMap resultMap = entityTable.getResultMap(configuration);
        Assert.assertEquals(""[USER_NAME]"", resultMap.getMappedColumns().toString());

        Assert.assertEquals(1, resultMap.getResultMappings().size());

        ResultMapping resultMapping = resultMap.getResultMappings().get(0);
        Assert.assertEquals(""user_name"", resultMapping.getColumn());
        Assert.assertEquals(""userName"", resultMapping.getProperty());
        Assert.assertNull(resultMapping.getJdbcType());
        Assert.assertEquals(StringTypeHandler.class, resultMapping.getTypeHandler().getClass());
    }
",non-flaky,5
118745,netty_netty,ByteBufUtilTest.writeShortBE,"    @Test
    public void writeShortBE() {
        int expected = 0x1234;

        ByteBuf buf = Unpooled.buffer(2).order(ByteOrder.BIG_ENDIAN);
        ByteBufUtil.writeShortBE(buf, expected);
        assertEquals(expected, buf.readShort());
        buf.resetReaderIndex();
        assertEquals(ByteBufUtil.swapShort((short) expected), buf.readShortLE());
        buf.release();

        buf = Unpooled.buffer(2).order(ByteOrder.LITTLE_ENDIAN);
        ByteBufUtil.writeShortBE(buf, expected);
        assertEquals((short) expected, buf.readShortLE());
        buf.resetReaderIndex();
        assertEquals(ByteBufUtil.swapShort((short) expected), buf.readShort());
        buf.release();
    }
",non-flaky,5
113739,salesforce_reactive-grpc,ContextPropagationIntegrationTest.ClientSendsContext,"    @Test
    public void ClientSendsContext() {
        ReactorGreeterGrpc.ReactorGreeterStub stub = ReactorGreeterGrpc.newReactorStub(channel);
        Context.current()
                .withValue(ctxKey, ""ClientSendsContext"")
                .run(() -> StepVerifier.create(worldReq.compose(stub::sayHello).map(HelloResponse::getMessage))
                        .expectNext(""Hello World"")
                        .verifyComplete());

        assertThat(clientInterceptor.getSendMessageCtxValue()).isEqualTo(""ClientSendsContext"");
    }
",non-flaky,5
156159,soot-oss_soot,DeadAssignmentEliminatorTest.removePrimitiveCast,"  @Test
  public void removePrimitiveCast() {
    // create test method and body
    SootClass cl = new SootClass(""TestClass"", Modifier.PUBLIC);
    SootMethod method = new SootMethod(""testMethod"", Arrays.asList(IntType.v(), IntType.v()), IntType.v(), Modifier.PUBLIC);
    cl.addMethod(method);
    JimpleBody body = Jimple.v().newBody(method);
    method.setActiveBody(body);

    // create locals
    Chain<Local> locals = body.getLocals();
    Local a = Jimple.v().newLocal(""a"", IntType.v());
    locals.add(a);
    Local b = Jimple.v().newLocal(""b"", IntType.v());
    locals.add(b);
    Local c = Jimple.v().newLocal(""c"", IntType.v());
    locals.add(c);
    Local d = Jimple.v().newLocal(""d"", DoubleType.v());
    locals.add(d);

    // create code
    UnitPatchingChain units = body.getUnits();
    Unit identity0 = Jimple.v().newIdentityStmt(a, Jimple.v().newParameterRef(IntType.v(), 0));
    units.add(identity0);
    Unit identity1 = Jimple.v().newIdentityStmt(b, Jimple.v().newParameterRef(IntType.v(), 1));
    units.add(identity1);
    Unit addition = Jimple.v().newAssignStmt(c, Jimple.v().newAddExpr(a, b));
    units.add(addition);
    Unit cast = Jimple.v().newAssignStmt(d, Jimple.v().newCastExpr(a, DoubleType.v()));
    units.add(cast);
    Unit ret = Jimple.v().newReturnStmt(c);
    units.add(ret);

    // execute transform
    DeadAssignmentEliminator.v().internalTransform(body, ""testPhase"", Collections.emptyMap());

    // check resulting code (cast should be removed)
    Iterator<Unit> it = units.iterator();
    assertEquals(identity0, it.next());
    assertEquals(identity1, it.next());
    assertEquals(addition, it.next());
    assertEquals(ret, it.next());
    assertEquals(4, units.size());
  }
",non-flaky,5
177215,line_armeria,HttpDecodedResponseTest.onSubscribe,"    @Test
            public void onSubscribe(Subscription s) {
                s.request(Long.MAX_VALUE);
            }
",non-flaky,5
112070,apache_shardingsphere-elasticjob,ScriptElasticJobTest.assertJobInit,"    @Test
    public void assertJobInit() throws IOException {
        ScriptElasticJobUtil.buildScriptCommandLine();
        WaitingUtils.waitingShortTime();
        String scriptCommandLine = ((ScriptJobConfiguration) getLiteJobConfig().getTypeConfig()).getScriptCommandLine();
        LiteJobConfiguration liteJobConfig = LiteJobConfigurationGsonFactory.fromJson(getRegCenter().get(""/"" + getJobName() + ""/config""));
        assertThat(((ScriptJobConfiguration) liteJobConfig.getTypeConfig()).getScriptCommandLine(), is(scriptCommandLine));
    }
",non-flaky,5
26836,wildfly_wildfly,WritableServiceBasedNamingStoreTestCase.testBind,"    @Test
    public void testBind() throws Exception {
        final Name name = new CompositeName(""test"");
        final Object value = new Object();
        WritableServiceBasedNamingStore.pushOwner(OWNER_FOO);
        try {
            store.bind(name, value);
        } finally {
            WritableServiceBasedNamingStore.popOwner();
        }
        assertEquals(value, store.lookup(name));
    }
",non-flaky,5
21167,androidx_androidx,PreferenceGroupInitialExpandedChildrenCountTest.createPreferenceGroupAdapter_displayTopLevelPreferences,"    @Test
    public void createPreferenceGroupAdapter_displayTopLevelPreferences() {
        // No limit, should display all 10 preferences
        PreferenceGroupAdapter preferenceGroupAdapter = new PreferenceGroupAdapter(mScreen);
        assertPreferencesAreExpanded(preferenceGroupAdapter);

        // Limit > child count, should display all 10 preferences
        mScreen.setInitialExpandedChildrenCount(TOTAL_PREFERENCE + 4);
        preferenceGroupAdapter = new PreferenceGroupAdapter(mScreen);
        assertPreferencesAreExpanded(preferenceGroupAdapter);

        // Limit = child count, should display all 10 preferences
        mScreen.setInitialExpandedChildrenCount(TOTAL_PREFERENCE);
        preferenceGroupAdapter = new PreferenceGroupAdapter(mScreen);
        assertPreferencesAreExpanded(preferenceGroupAdapter);

        // Limit < child count, should display up to the limit + expand button
        mScreen.setInitialExpandedChildrenCount(INITIAL_EXPANDED_COUNT);
        preferenceGroupAdapter = new PreferenceGroupAdapter(mScreen);
        assertPreferencesAreCollapsed(preferenceGroupAdapter);
        for (int i = 0; i < INITIAL_EXPANDED_COUNT; i++) {
            assertEquals(mPreferenceList.get(i), preferenceGroupAdapter.getItem(i));
        }
        assertEquals(CollapsiblePreferenceGroupController.ExpandButton.class,
                preferenceGroupAdapter.getItem(INITIAL_EXPANDED_COUNT).getClass());
    }
",non-flaky,5
112769,hwang-pku_ormlite-core,SelectIteratorTest.testIteratorRemoveNoNext,"	@Test(expected = IllegalStateException.class)
	public void testIteratorRemoveNoNext() throws Exception {
		Dao<Foo, Object> dao = createDao(Foo.class, true);
		CloseableIterator<Foo> iterator = dao.iterator();
		try {
			iterator.remove();
		} finally {
			iterator.close();
		}
	}
",non-flaky,5
137081,spring-projects_spring-framework,AbstractAnnotationMetadataTests.isAnnotationWhenAnnotationReturnsTrue,"	@Test
	public void isAnnotationWhenAnnotationReturnsTrue() {
		assertThat(get(TestAnnotation.class).isAnnotation()).isTrue();
	}
",non-flaky,5
137166,spring-projects_spring-framework,AnnotationsScannerTests.method,"		@TestAnnotation3
		public void method() {
		}
",non-flaky,5
112095,apache_shardingsphere-elasticjob,RotateServerByNameJobShardingStrategyTest.assertSharding3,"    @Test
    public void assertSharding3() {
        Map<JobInstance, List<Integer>> expected = new HashMap<>();
        expected.put(new JobInstance(""host0@-@0""), Collections.singletonList(0));
        expected.put(new JobInstance(""host1@-@0""), Collections.singletonList(1));
        expected.put(new JobInstance(""host2@-@0""), Collections.<Integer>emptyList());
        assertThat(rotateServerByNameJobShardingStrategy.sharding(Arrays.asList(new JobInstance(""host0@-@0""), new JobInstance(""host1@-@0""), new JobInstance(""host2@-@0"")), ""3"", 2), is(expected));
    }
",non-flaky,5
21004,NationalSecurityAgency_timely,DownsampleIteratorTest.memoryEstimatorTestLargeObjects,"    @Test
    public void memoryEstimatorTestLargeObjects() {
        long maxMemory = 10000;
        long start = System.currentTimeMillis();
        long period = 500l;
        long sizeOfObjects = 200;
        SampleObject o = new SampleObject();
        DownsampleMemoryEstimator memoryEstimator = new DownsampleMemoryEstimator(maxMemory, start, period);
        boolean shouldReturn = false;
        for (long x = 100; x <= 5000; x += 100) {
            long timestamp = start + x;
            o.setSizeInBytes(o.sizeInBytes() + sizeOfObjects);
            shouldReturn = memoryEstimator.shouldReturnBasedOnMemoryUsage(timestamp, o);
            if (memoryEstimator.isNewBucket()) {
                long memoryPercentageUsedCalculated = Math.round((double) o.sizeInBytes() / maxMemory * 100);
                long memoryPercentageUsedEstimate = Math.round(memoryEstimator.getMemoryUsedPercentage());
                long percentError = Math.round(Math.abs(memoryPercentageUsedCalculated - memoryPercentageUsedEstimate)
                        / memoryPercentageUsedCalculated * 100);
                assertTrue(percentError == 0);
                assertTrue(memoryEstimator.isHighVolumeBuckets());
            }

            if (shouldReturn) {
                o.setSizeInBytes(0);
                memoryEstimator.reset();
            }
        }
        assertTrue(shouldReturn);
    }
",non-flaky,5
91431,strapdata_elassandra,BasicWatcherTests.testIndexWatch,"@TestLogging(""org.elasticsearch.xpack.watcher:DEBUG,"" +
    public void testIndexWatch() throws Exception {
        WatcherClient watcherClient = watcherClient();
        createIndex(""idx"");
        // Have a sample document in the index, the watch is going to evaluate
        client().prepareIndex(""idx"", ""type"").setSource(""field"", ""foo"").get();
        refresh();
        WatcherSearchTemplateRequest request = templateRequest(searchSource().query(termQuery(""field"", ""foo"")), ""idx"");
        watcherClient.preparePutWatch(""_name"")
                .setSource(watchBuilder()
                        .trigger(schedule(interval(5, IntervalSchedule.Interval.Unit.SECONDS)))
                        .input(searchInput(request))
                        .condition(new CompareCondition(""ctx.payload.hits.total"", CompareCondition.Op.EQ, 1L))
                        .addAction(""_logger"", loggingAction(""_logging"")
                                .setCategory(""_category"")))
                .get();

        timeWarp().trigger(""_name"");
        assertWatchWithMinimumPerformedActionsCount(""_name"", 1);

        GetWatchResponse getWatchResponse = watcherClient().prepareGetWatch().setId(""_name"").get();
        assertThat(getWatchResponse.isFound(), is(true));
        assertThat(getWatchResponse.getSource(), notNullValue());
    }
",non-flaky,5
170515,eclipse_jetty.project,TestAnnotationParser.testJep238MultiReleaseInJar,"    @Test
    public void testJep238MultiReleaseInJar() throws Exception
    {
        File badClassesJar = MavenTestingUtils.getTestResourceFile(""jdk9/log4j-api-2.9.0.jar"");
        AnnotationParser parser = new AnnotationParser();
        Set<Handler> emptySet = Collections.emptySet();
        parser.parse(emptySet, badClassesJar.toURI());
        // Should throw no exceptions, and skip the META-INF/versions/9/* files
    }
",non-flaky,5
76953,Tencent_Firestorm,ShuffleReadClientImplTest.readTest14,"  @Test
  public void readTest14() throws Exception {
    String basePath = HDFS_URI + ""clientReadTest14"";
    HdfsShuffleWriteHandler writeHandler =
        new HdfsShuffleWriteHandler(""appId"", 0, 1, 1, basePath, ""test1"", conf);

    Map<Long, byte[]> expectedData = Maps.newHashMap();
    Roaring64NavigableMap blockIdBitmap = Roaring64NavigableMap.bitmapOf();
    Roaring64NavigableMap taskIdBitmap = Roaring64NavigableMap.bitmapOf(0, 2);
    writeDuplicatedData(writeHandler, 5, 30, 0, expectedData, blockIdBitmap);
    writeTestData(writeHandler, 5, 30, 1, Maps.newHashMap(), Roaring64NavigableMap.bitmapOf());
    writeTestData(writeHandler, 5, 30, 2, expectedData, blockIdBitmap);

    // unexpected taskAttemptId should be filtered
    ShuffleReadClientImpl readClient = new ShuffleReadClientImpl(StorageType.HDFS.name(), ""appId"", 0, 1, 100, 1,
        10, 1000, basePath, blockIdBitmap, taskIdBitmap, Lists.newArrayList(), new Configuration());

    TestUtils.validateResult(readClient, expectedData);
    assertEquals(15, readClient.getProcessedBlockIds().getLongCardinality());
    readClient.checkProcessedBlockIds();
    readClient.close();
  }
",non-flaky,5
177968,aosp-mirror_platform_frameworks_support,ColorUtilsTest.testColorToHSL,"    @Test
    public void testColorToHSL() {
        for (TestEntry entry : sEntryList) {
            verifyColorToHSL(entry.rgb, entry.hsl);
        }
    }
",non-flaky,5
345,pholser_junit-quickcheck,ExhaustingAGivenSetButIncludingAnotherTest.manyParameters,"@Test
public void manyParameters() throws Exception {
    assertThat(testResult(ManyParameters.class), isSuccessful());
    assertEquals(16, ManyParameters.iterations);
    assertEquals(asList(-1, -2, -4), ManyParameters.firstTestCases.subList(0, 3));
    assertEquals(asList(-1, -2, -4), ManyParameters.firstTestCases.subList(4, 7));
    assertEquals(asList(-1, -2, -4), ManyParameters.firstTestCases.subList(8, 11));
    assertEquals(asList(-1, -2, -4), ManyParameters.firstTestCases.subList(12, 15));
    assertEquals(asList('r', 'r', 'r', 'r', 'y', 'y', 'y', 'y'), ManyParameters.secondTestCases.subList(0, 8));
}",unordered collections,3
137099,spring-projects_spring-framework,AbstractAnnotationMetadataTests.getAnnotationAttributesReturnsAttributes,"	@Test
	public void getAnnotationAttributesReturnsAttributes() {
		assertThat(get(WithAnnotationAttributes.class).getAnnotationAttributes(AnnotationAttributes.class.getName()))
			.containsOnly(entry(""name"", ""test""), entry(""size"", 1));
	}
",non-flaky,5
33706,alibaba_fastjson,JSONScannerTest.checkTime12,"  @Test
  public void checkTime12() throws Throwable {

    // Arrange
    JSONScanner objectUnderTest = ((JSONScanner)Reflector.getInstance(""com.alibaba.fastjson.parser.JSONScanner""));
    objectUnderTest.hasSpecial = false;
    objectUnderTest.token = 0;
    objectUnderTest.locale = null;
    objectUnderTest.np = 0;
    objectUnderTest.features = 0;
    Reflector.setField(objectUnderTest, ""text"", """");
    objectUnderTest.calendar = null;
    objectUnderTest.matchStat = 0;
    objectUnderTest.bp = 0;
    Reflector.setField(objectUnderTest, ""len"", 0);
    objectUnderTest.stringDefaultValue = """";
    objectUnderTest.pos = 0;
    objectUnderTest.sp = 0;
    objectUnderTest.sbuf = null;
    objectUnderTest.ch = '\u0000';
    objectUnderTest.timeZone = null;
    objectUnderTest.eofPos = 0;
    char h0 = '1';
    char h1 = '9';
    char m0 = '6';
    char m1 = '0';
    char s0 = '6';
    char s1 = '\u0430';

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkTime"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(objectUnderTest, h0, h1, m0, m1, s0, s1);

    // Assert result
    Assert.assertEquals(false, retval);

  }
",non-flaky,5
175789,GoogleCloudPlatform_google-cloud-eclipse,AppEngineApplicationQueryJobTest.testRun_queryError,"  @Test
  public void testRun_queryError() throws ProjectRepositoryException, InterruptedException {
    when(projectRepository.getAppEngineApplication(credential, ""projectId""))
        .thenThrow(new ProjectRepositoryException(""testException""));

    queryJob.schedule();
    queryJob.join();

    verify(isLatestQueryJob).apply(queryJob);
    verify(projectSelector).isDisposed();
    verify(projectSelector).setStatusLink(EXPECTED_MESSAGE_WHEN_EXCEPTION, null);

    assertNull(project.getAppEngine());
  }
",non-flaky,5
175776,GoogleCloudPlatform_google-cloud-eclipse,AppYamlValidatorTest.testValidate_relativePathNotFile,"  @Test
  public void testValidate_relativePathNotFile() {
    createAppYamlAsDirectory(basePath);
    when(appYamlPath.getValue()).thenReturn(""app.yaml"");

    IStatus result = pathValidator.validate();
    assertEquals(IStatus.ERROR, result.getSeverity());
    assertEquals(""Not a file: "" + new Path(basePath + ""/app.yaml"").toOSString(),
        result.getMessage());
  }
",non-flaky,5
78297,apache_beam,InMemoryStateInternalsTest.testSameInstance,"    @Test
    public void testSameInstance() {
      assertSameInstance(STRING_VALUE_ADDR);
      assertSameInstance(SUM_INTEGER_ADDR);
      assertSameInstance(STRING_BAG_ADDR);
      assertSameInstance(STRING_SET_ADDR);
      assertSameInstance(STRING_MAP_ADDR);
      assertSameInstance(WATERMARK_EARLIEST_ADDR);
    }
",non-flaky,5
112657,tbsalling_aismessages,DataLinkManagementTest.canDecodeShortVariant2,"    @Test
    public void canDecodeShortVariant2() {
        AISMessage aisMessage = AISMessage.create(NMEAMessage.fromString(""!AIVDM,1,1,,B,Dh3Ovk1cEN>4,0*3B""));

        System.out.println(aisMessage.toString());

        assertEquals(AISMessageType.DataLinkManagement, aisMessage.getMessageType());
        DataLinkManagement message = (DataLinkManagement) aisMessage;
        assertEquals(Integer.valueOf(3), message.getRepeatIndicator());
        assertEquals(MMSI.valueOf(3669708), message.getSourceMmsi());
        assertEquals((Integer) 1717, message.getOffsetNumber1());
        assertEquals((Integer) 5, message.getReservedSlots1());
        assertEquals((Integer) 7, message.getTimeout1());
        assertEquals((Integer) 225, message.getIncrement1());
        assertNull(message.getOffsetNumber2());
        assertNull(message.getReservedSlots2());
        assertNull(message.getTimeout2());
        assertNull(message.getIncrement2());
        assertNull(message.getOffsetNumber3());
        assertNull(message.getReservedSlots3());
        assertNull(message.getTimeout3());
        assertNull(message.getIncrement3());
    }
",non-flaky,5
70778,apache_kafka,ErrorHandlingIntegrationTest.testSkipRetryAndDLQWithHeaders,"    @Test
    public void testSkipRetryAndDLQWithHeaders() throws Exception {
        // create test topic
        connect.kafka().createTopic(""test-topic"");

        // setup connector config
        Map<String, String> props = new HashMap<>();
        props.put(CONNECTOR_CLASS_CONFIG, MonitorableSinkConnector.class.getSimpleName());
        props.put(TASKS_MAX_CONFIG, String.valueOf(NUM_TASKS));
        props.put(TOPICS_CONFIG, ""test-topic"");
        props.put(KEY_CONVERTER_CLASS_CONFIG, StringConverter.class.getName());
        props.put(VALUE_CONVERTER_CLASS_CONFIG, StringConverter.class.getName());
        props.put(TRANSFORMS_CONFIG, ""failing_transform"");
        props.put(""transforms.failing_transform.type"", FaultyPassthrough.class.getName());

        // log all errors, along with message metadata
        props.put(ERRORS_LOG_ENABLE_CONFIG, ""true"");
        props.put(ERRORS_LOG_INCLUDE_MESSAGES_CONFIG, ""true"");

        // produce bad messages into dead letter queue
        props.put(DLQ_TOPIC_NAME_CONFIG, DLQ_TOPIC);
        props.put(DLQ_CONTEXT_HEADERS_ENABLE_CONFIG, ""true"");
        props.put(DLQ_TOPIC_REPLICATION_FACTOR_CONFIG, ""1"");

        // tolerate all erros
        props.put(ERRORS_TOLERANCE_CONFIG, ""all"");

        // retry for up to one second
        props.put(ERRORS_RETRY_TIMEOUT_CONFIG, ""1000"");

        // set expected records to successfully reach the task
        connectorHandle.taskHandle(TASK_ID).expectedRecords(EXPECTED_CORRECT_RECORDS);

        connect.configureConnector(CONNECTOR_NAME, props);

        waitForCondition(this::checkForPartitionAssignment,
                CONNECTOR_SETUP_DURATION_MS,
                ""Connector task was not assigned a partition."");

        // produce some strings into test topic
        for (int i = 0; i < NUM_RECORDS_PRODUCED; i++) {
            connect.kafka().produce(""test-topic"", ""key-"" + i, ""value-"" + i);
        }

        // consume all records from test topic
        log.info(""Consuming records from test topic"");
        int i = 0;
        for (ConsumerRecord<byte[], byte[]> rec : connect.kafka().consume(NUM_RECORDS_PRODUCED, CONSUME_MAX_DURATION_MS, ""test-topic"")) {
            String k = new String(rec.key());
            String v = new String(rec.value());
            log.debug(""Consumed record (key='{}', value='{}') from topic {}"", k, v, rec.topic());
            assertEquals(""Unexpected key"", k, ""key-"" + i);
            assertEquals(""Unexpected value"", v, ""value-"" + i);
            i++;
        }

        // wait for records to reach the task
        connectorHandle.taskHandle(TASK_ID).awaitRecords(CONSUME_MAX_DURATION_MS);

        // consume failed records from dead letter queue topic
        log.info(""Consuming records from test topic"");
        ConsumerRecords<byte[], byte[]> messages = connect.kafka().consume(EXPECTED_INCORRECT_RECORDS, CONSUME_MAX_DURATION_MS, DLQ_TOPIC);
        for (ConsumerRecord<byte[], byte[]> recs : messages) {
            log.debug(""Consumed record (key={}, value={}) from dead letter queue topic {}"",
                    new String(recs.key()), new String(recs.value()), DLQ_TOPIC);
            assertTrue(recs.headers().toArray().length > 0);
            assertValue(""test-topic"", recs.headers(), ERROR_HEADER_ORIG_TOPIC);
            assertValue(RetriableException.class.getName(), recs.headers(), ERROR_HEADER_EXCEPTION);
            assertValue(""Error when value='value-7'"", recs.headers(), ERROR_HEADER_EXCEPTION_MESSAGE);
        }

        connect.deleteConnector(CONNECTOR_NAME);
    }
",non-flaky,5
30975,camunda-cloud_zeebe,ObjectMappingUndeclaredPropertiesTest.shouldSerializeUndeclaredProperties,"  @Test
  public void shouldSerializeUndeclaredProperties() {
    // given
    final MinimalPOJO pojo = new MinimalPOJO();
    pojo.wrap(MSG_PACK);

    final MutableDirectBuffer writeBuffer = new UnsafeBuffer(new byte[pojo.getLength()]);

    // when
    pojo.write(writeBuffer, 0);

    // then
    final Map<String, Object> serialized = asMap(writeBuffer, 0, writeBuffer.capacity());

    assertThat(serialized).hasSize(2);
    assertThat(serialized).contains(entry(""longProp"", 123L), entry(""undeclaredProp"", 456L));
  }
",non-flaky,5
112701,hwang-pku_ormlite-core,TransactionManagerTest.testTransactionManagerNoSet,"	@Test(expected = IllegalStateException.class)
	public void testTransactionManagerNoSet() {
		TransactionManager tm = new TransactionManager();
		tm.initialize();
	}
",non-flaky,5
43123,trinodb_trino,BaseConnectorSmokeTest.testRowLevelDelete,"    @Test
    public void testRowLevelDelete()
    {
        skipTestUnless(hasBehavior(SUPPORTS_CREATE_TABLE) && hasBehavior(SUPPORTS_ROW_LEVEL_DELETE));
        // TODO (https://github.com/trinodb/trino/issues/5901) Use longer table name once Oracle version is updated
        try (TestTable table = new TestTable(getQueryRunner()::execute, ""test_row_delete"", ""AS SELECT * FROM region"")) {
            assertUpdate(""DELETE FROM "" + table.getName() + "" WHERE regionkey = 2"", 1);
            assertThat(query(""SELECT * FROM "" + table.getName() + "" WHERE regionkey = 2""))
                    .returnsEmptyResult();
            assertThat(query(""SELECT cast(regionkey AS integer) FROM "" + table.getName()))
                    .skippingTypesCheck()
                    .matches(""VALUES 0, 1, 3, 4"");
        }
    }
",non-flaky,5
170513,eclipse_jetty.project,TestAnnotationParser.testHiddenFilesInJar,"    @Test
    public void testHiddenFilesInJar() throws Exception
    {
        File badClassesJar = MavenTestingUtils.getTestResourceFile(""bad-classes.jar"");
        AnnotationParser parser = new AnnotationParser();
        Set<Handler> emptySet = Collections.emptySet();
        parser.parse(emptySet, badClassesJar.toURI());
        // only the valid classes inside bad-classes.jar should be parsed. If any invalid classes are parsed and exception would be thrown here
    }
",non-flaky,5
162411,testcontainers_testcontainers-java,DockerComposePassthroughTest.testContainerInstanceProperties,"    @Test
    public void testContainerInstanceProperties() {
        final ContainerState container = waitStrategy.getContainer();

        //check environment variable was set
        assertThat(""Environment variable set correctly"", Arrays.asList(Objects.requireNonNull(container.getContainerInfo()
            .getConfig().getEnv())), hasItem(""bar=bar""));

        //check other container properties
        assertNotNull(""Container id is not null"", container.getContainerId());
        assertNotNull(""Port mapped"", container.getMappedPort(3000));
        assertThat(""Exposed Ports"", container.getExposedPorts(), hasItem(3000));

    }
",non-flaky,5
98607,nutzam_nutz,El2Test.testIssue277,"    @Test
    public void testIssue277() {
        Context context = Lang.context();
        context.set(""strings"", Strings.class);
        assertEquals(""a"", El.eval(context, ""strings.trim(\""  a  \"")""));
    }
",non-flaky,5
114085,aws_aws-sdk-java-v2,KeyTest.getPartitionKeyValue,"    @Test
    public void getPartitionKeyValue() {
        assertThat(key.partitionKeyValue(),
                   is(AttributeValue.builder().s(""id123"").build()));
    }
",non-flaky,5
70812,apache_kafka,PluginsTest.shouldInstantiateAndConfigureExplicitlySetHeaderConverterWithCurrentClassLoader,"    @Test
    public void shouldInstantiateAndConfigureExplicitlySetHeaderConverterWithCurrentClassLoader() {
        assertNotNull(props.get(WorkerConfig.HEADER_CONVERTER_CLASS_CONFIG));
        HeaderConverter headerConverter = plugins.newHeaderConverter(config,
                                                                     WorkerConfig.HEADER_CONVERTER_CLASS_CONFIG,
                                                                     ClassLoaderUsage.CURRENT_CLASSLOADER);
        assertNotNull(headerConverter);
        assertTrue(headerConverter instanceof TestHeaderConverter);
        this.headerConverter = (TestHeaderConverter) headerConverter;

        // Validate extra configs got passed through to overridden converters
        assertConverterType(ConverterType.HEADER, this.headerConverter.configs);
        assertEquals(""baz"", this.headerConverter.configs.get(""extra.config""));

        headerConverter = plugins.newHeaderConverter(config,
                                                     WorkerConfig.HEADER_CONVERTER_CLASS_CONFIG,
                                                     ClassLoaderUsage.PLUGINS);
        assertNotNull(headerConverter);
        assertTrue(headerConverter instanceof TestHeaderConverter);
        this.headerConverter = (TestHeaderConverter) headerConverter;

        // Validate extra configs got passed through to overridden converters
        assertConverterType(ConverterType.HEADER, this.headerConverter.configs);
        assertEquals(""baz"", this.headerConverter.configs.get(""extra.config""));
    }
",non-flaky,5
78250,apache_beam,StateInternalsTest.testCombiningIsEmpty,"  @Test
  public void testCombiningIsEmpty() throws Exception {
    GroupingState<Integer, Integer> value = underTest.state(NAMESPACE_1, SUM_INTEGER_ADDR);

    assertThat(value.isEmpty().read(), Matchers.is(true));
    ReadableState<Boolean> readFuture = value.isEmpty();
    value.add(5);
    assertThat(readFuture.read(), Matchers.is(false));

    value.clear();
    assertThat(readFuture.read(), Matchers.is(true));
  }
",non-flaky,5
30915,camunda-cloud_zeebe,TestConfigurationFactoryTest.shouldOverlayEnvironmentSettingsOverConfigurationReadFromFile,"  @Test
  public void shouldOverlayEnvironmentSettingsOverConfigurationReadFromFile()
      throws InvocationTargetException, NoSuchMethodException, InstantiationException,
",non-flaky,5
112753,hwang-pku_ormlite-core,DatabaseConnectionProxyTest.testIsTableExists,"	@Test
	public void testIsTableExists() throws Exception {
		DatabaseConnection conn = createMock(DatabaseConnection.class);
		boolean tableExists = true;
		String tableName = ""fjewfjwef"";
		expect(conn.isTableExists(tableName)).andReturn(tableExists);
		conn.close();
		DatabaseConnectionProxy proxy = new DatabaseConnectionProxy(conn);
		replay(conn);
		assertEquals(tableExists, proxy.isTableExists(tableName));
		proxy.close();
		verify(conn);
	}
",non-flaky,5
95719,togglz_togglz,EnumBasedFeatureProviderTest.shouldBuildMetadataForMultipleEnums,"    @Test
    public void shouldBuildMetadataForMultipleEnums() {

        FeatureProvider provider = new EnumBasedFeatureProvider()
            .addFeatureEnum(ValidFeatureEnum.class)
            .addFeatureEnum(OtherFeatureEnum.class);

        assertThat(provider.getMetaData(ValidFeatureEnum.FEATURE1).getLabel())
            .isEqualTo(""First feature"");
        assertThat(provider.getMetaData(OtherFeatureEnum.ADDITIONAL_FEATURE).getLabel())
            .isEqualTo(""Additional Feature"");

    }
",non-flaky,5
114071,aws_aws-sdk-java-v2,EnhancedTypeTest.concurrentMapOf_ReturnsRawClassOfConcurrentMap_WhenSpecifyingEnhancedType,"    @Test
    public void concurrentMapOf_ReturnsRawClassOfConcurrentMap_WhenSpecifyingEnhancedType() {
        EnhancedType<ConcurrentMap<String, Integer>> type =
            EnhancedType.concurrentMapOf(EnhancedType.of(String.class), EnhancedType.of(Integer.class));

        assertThat(type.rawClass()).isEqualTo(ConcurrentMap.class);
        assertThat(type.rawClassParameters()).containsExactly(EnhancedType.of(String.class), EnhancedType.of(Integer.class));
    }
",non-flaky,5
99730,apache_cassandra,FQLReplayTest.testCompareRowsDifferentColumnCount,"    @Test
    public void testCompareRowsDifferentColumnCount()
    {
        ResultComparator rc = new ResultComparator();
        ResultHandler.ComparableResultSet res = createResultSet(10, 10, false);
        ResultHandler.ComparableResultSet res2 = createResultSet(10, 10, false);
        List<ResultHandler.ComparableResultSet> toCompare = Lists.newArrayList(res, res2, createResultSet(11, 10, false));
        List<Iterator<ResultHandler.ComparableRow>> iters = toCompare.stream().map(Iterable::iterator).collect(Collectors.toList());
        while (true)
        {
            List<ResultHandler.ComparableRow> rows = ResultHandler.rows(iters);
            if (rows.stream().allMatch(Objects::isNull))
                break;
            assertFalse(rows.toString(), rc.compareRows(Lists.newArrayList(""eq1"", ""eq2"", ""diff""), null, rows));
        }
    }
",non-flaky,5
97720,vojtechhabarta_typescript-generator,MapExtensionTest.testStringList,"    @Test
    public void testStringList() {
        final Settings settings = TestUtils.settings();
        final String output = new TypeScriptGenerator(settings).generateTypeScript(Input.from(C.class));
        Assert.assertTrue(output.contains(""stringList: string[];""));
    }
",non-flaky,5
33853,apache_camel,FhirDeleteIT.testDeleteResourceConditionalByUrl,"    @Test
    public void testDeleteResourceConditionalByUrl() throws Exception {
        assertTrue(patientExists());

        IBaseOperationOutcome result
                = requestBody(""direct://RESOURCE_CONDITIONAL_BY_URL"", ""Patient?given=Vincent&family=Freeman"");

        LOG.debug(""resourceConditionalByUrl: "" + result);
        assertNotNull(result, ""resourceConditionalByUrl result"");
        assertFalse(patientExists());
    }
",non-flaky,5
162385,testcontainers_testcontainers-java,MountableFileTest.forHostPath,"    @Test
    public void forHostPath() throws Exception {
        final Path file = createTempFile(""somepath"");
        final MountableFile mountableFile = MountableFile.forHostPath(file.toString());

        performChecks(mountableFile);
    }
",non-flaky,5
78245,apache_beam,StateInternalsTest.testSetIsEmpty,"  @Test
  public void testSetIsEmpty() throws Exception {

    SetState<String> value = underTest.state(NAMESPACE_1, STRING_SET_ADDR);

    assertThat(value.isEmpty().read(), Matchers.is(true));
    ReadableState<Boolean> readFuture = value.isEmpty();
    value.add(""hello"");
    assertThat(readFuture.read(), Matchers.is(false));

    value.clear();
    assertThat(readFuture.read(), Matchers.is(true));
  }
",non-flaky,5
33928,apache_camel,CordaConsumerVaultTrackByIT.vaultTrackByTest,"    @Test
    public void vaultTrackByTest() throws Exception {
        mockResult.expectedMinimumMessageCount(1);
        mockError.expectedMessageCount(0);
        MockEndpoint.assertIsSatisfied(context);
    }
",non-flaky,5
94739,ktuukkan_marine-api,Longitude28Test.largeValueIsNotAvailable,"    @Test
    public void largeValueIsNotAvailable() {
        assertFalse(Longitude28.isAvailable(1+180*60*10000));
    }
",non-flaky,5
97669,vojtechhabarta_typescript-generator,SpringTest.testAllOptionalQueryParameters,"    @Test
    public void testAllOptionalQueryParameters() {
        final Settings settings = TestUtils.settings();
        settings.outputFileType = TypeScriptFileType.implementationFile;
        settings.generateSpringApplicationClient = true;
        final String output = new TypeScriptGenerator(settings).generateTypeScript(Input.from(Controller7.class));
        Assert.assertTrue(output.contains(""echo(queryParams?: { message?: string; }): RestResponse<string>""));
    }
",non-flaky,5
135058,undertow-io_undertow,PathMatcherTestCase.testSimplePrefixCase,"    @Test
    public void testSimplePrefixCase() {

        PathMatcher<String> pathMatcher = new PathMatcher<>();

        pathMatcher.addPrefixPath(""prefix"", ""response"");
        Assert.assertEquals(""response"", pathMatcher.getPrefixPath(""prefix""));
        Assert.assertEquals(""response"", pathMatcher.getPrefixPath(""/prefix""));
        Assert.assertEquals(""response"", pathMatcher.getPrefixPath(""/prefix/""));

        pathMatcher.addPrefixPath(""/prefix"", ""new response"");
        Assert.assertEquals(""new response"", pathMatcher.getPrefixPath(""prefix""));
        Assert.assertEquals(""new response"", pathMatcher.getPrefixPath(""/prefix""));
        Assert.assertEquals(""new response"", pathMatcher.getPrefixPath(""/prefix/""));

        pathMatcher.addPrefixPath(""/prefix/"", ""different response"");
        Assert.assertEquals(""different response"", pathMatcher.getPrefixPath(""prefix""));
        Assert.assertEquals(""different response"", pathMatcher.getPrefixPath(""/prefix""));
        Assert.assertEquals(""different response"", pathMatcher.getPrefixPath(""/prefix/""));

        pathMatcher.addPrefixPath(""/prefix//////////////////////"", ""last response"");
        Assert.assertEquals(""last response"", pathMatcher.getPrefixPath(""prefix""));
        Assert.assertEquals(""last response"", pathMatcher.getPrefixPath(""/prefix""));
        Assert.assertEquals(""last response"", pathMatcher.getPrefixPath(""/prefix/""));

        pathMatcher.clearPaths();
        Assert.assertNull(pathMatcher.getPrefixPath(""prefix""));
        Assert.assertNull(pathMatcher.getPrefixPath(""/prefix""));
        Assert.assertNull(pathMatcher.getPrefixPath(""/prefix/""));
    }
",non-flaky,5
95691,togglz_togglz,ArchaiusStateRepositoryTest.withStrategyParameters,"    @Test
    public void withStrategyParameters() {

        addState(TestFeature.F1.name(), true, ""S1"", new Param(""one"", ""A""), new Param(""two"", ""B""));

        FeatureState state = repository.getFeatureState(TestFeature.F1);

        assertEquals(2, state.getParameterNames().size());
        assertEquals(""A"", state.getParameter(""one""));
        assertEquals(""B"", state.getParameter(""two""));
    }
",non-flaky,5
94727,ktuukkan_marine-api,SpeedOverGroundTest.conversionToKnotsWorks,"    @Test
    public void conversionToKnotsWorks() {
        assertEquals(0.0, SpeedOverGround.toKnots(0), DELTA);
        assertEquals(0.1, SpeedOverGround.toKnots(1), DELTA);
        assertEquals(90.9, SpeedOverGround.toKnots(909), DELTA);
        assertEquals(102.2, SpeedOverGround.toKnots(1022), DELTA);
    }
",non-flaky,5
112725,hwang-pku_ormlite-core,DatabaseConnectionProxyTest.testSetSavePoint,"	@Test
	public void testSetSavePoint() throws Exception {
		DatabaseConnection conn = createMock(DatabaseConnection.class);
		String name = ""savepoint"";
		expect(conn.setSavePoint(name)).andReturn(null);
		conn.close();
		DatabaseConnectionProxy proxy = new DatabaseConnectionProxy(conn);
		replay(conn);
		proxy.setSavePoint(name);
		proxy.close();
		verify(conn);
	}
",non-flaky,5
114129,aws_aws-sdk-java-v2,LocalDateTimeAttributeConverterTest.localDateTimeAttributeConverterNotAcceptInstantTest,"    @Test
    public void localDateTimeAttributeConverterNotAcceptInstantTest() {
        assertFails(() -> transformTo(converter, EnhancedAttributeValue.fromString(""1988-05-21T00:12:00.000000001Z"")
                                                                       .toAttributeValue()));
    }
",non-flaky,5
60903,apache_druid,MovingAverageIterableTest.testMissingDataAtBeginning,"  @Test
  public void testMissingDataAtBeginning()
  {

    Map<String, Object> event1 = new HashMap<>();
    Map<String, Object> event2 = new HashMap<>();
    Map<String, Object> event3 = new HashMap<>();

    event1.put(""gender"", ""m"");
    event1.put(""pageViews"", 10L);
    event2.put(""gender"", ""f"");
    event2.put(""pageViews"", 20L);
    event3.put(""gender"", ""u"");
    event3.put(""pageViews"", 30L);

    List<DimensionSpec> ds = new ArrayList<>();
    ds.add(new DefaultDimensionSpec(""gender"", ""gender""));

    Row jan1Row1 = new MapBasedRow(JAN_1, event1);

    Row jan2Row1 = new MapBasedRow(JAN_2, event1);
    Row jan2Row2 = new MapBasedRow(JAN_2, event2);
    Row jan2Row3 = new MapBasedRow(JAN_2, event3);

    Sequence<RowBucket> seq = Sequences.simple(Arrays.asList(
        new RowBucket(JAN_1, Collections.singletonList(jan1Row1)),
        new RowBucket(JAN_2, Arrays.asList(jan2Row1, jan2Row2, jan2Row3))
    ));

    Iterator<Row> iter = new MovingAverageIterable(
        seq,
        ds,
        Collections.singletonList(
            new LongMeanAveragerFactory(""movingAvgPageViews"", 2, 1, ""pageViews"")
        ),
        Collections.emptyList(),
        Collections.singletonList(new LongSumAggregatorFactory(""pageViews"", ""pageViews""))
    ).iterator();

    Assert.assertTrue(iter.hasNext());
    Row result = iter.next();
    Assert.assertEquals(""m"", (result.getDimension(""gender"")).get(0));
    Assert.assertEquals(JAN_1, (result.getTimestamp()));

    Assert.assertTrue(iter.hasNext());
    result = iter.next();
    Assert.assertEquals(""m"", (result.getDimension(""gender"")).get(0));
    Assert.assertEquals(JAN_2, (result.getTimestamp()));

    Assert.assertTrue(iter.hasNext());
    result = iter.next();
    Assert.assertEquals(""f"", (result.getDimension(""gender"")).get(0));
    Assert.assertEquals(JAN_2, (result.getTimestamp()));

    Assert.assertTrue(iter.hasNext());
    result = iter.next();
    Assert.assertEquals(""u"", (result.getDimension(""gender"")).get(0));
    Assert.assertEquals(JAN_2, (result.getTimestamp()));

    Assert.assertFalse(iter.hasNext());
  }
",non-flaky,5
43054,trinodb_trino,BaseConnectorTest.testConcurrentScans,"    @Test
    public void testConcurrentScans()
    {
        String unionMultipleTimes = join("" UNION ALL "", nCopies(25, ""SELECT * FROM orders""));
        assertQuery(""SELECT sum(if(rand() >= 0, orderkey)) FROM ("" + unionMultipleTimes + "")"", ""VALUES 11246812500"");
    }
",non-flaky,5
20912,NationalSecurityAgency_timely,MetricHistogramTest.testMin,"    @Test
    public void testMin() throws Exception {
        Assert.assertEquals(1.0D, m.min(), 0.0D);
    }
",non-flaky,5
347,apache_hadoop,TestNetworkTopology.testCreateInvalidTopology,"  @Test
  public void testCreateInvalidTopology() throws Exception {
    NetworkTopology invalCluster =
        NetworkTopology.getInstance(new Configuration());
    DatanodeDescriptor invalDataNodes[] = new DatanodeDescriptor[] {
        DFSTestUtil.getDatanodeDescriptor(""1.1.1.1"", ""/d1/r1""),
        DFSTestUtil.getDatanodeDescriptor(""2.2.2.2"", ""/d1/r1""),
        DFSTestUtil.getDatanodeDescriptor(""3.3.3.3"", ""/d1"")
    };
    invalCluster.add(invalDataNodes[0]);
    invalCluster.add(invalDataNodes[1]);
    try {
      invalCluster.add(invalDataNodes[2]);
      fail(""expected InvalidTopologyException"");
    } catch (NetworkTopology.InvalidTopologyException e) {
      assertTrue(e.getMessage().startsWith(""Failed to add ""));
      assertTrue(e.getMessage().contains(
          ""You cannot have a rack and a non-rack node at the same "" +
          ""level of the network topology.""));
    }
  }
",non-flaky,5
135715,Netflix_Hystrix,HystrixSubclassCommandTest.testRequestLogSubClassNoOverrides,"    @Test
    public void testRequestLogSubClassNoOverrides() {
        HystrixCommand<Integer> subCmd = new SubCommandNoOverride(""cache"", true);
        assertEquals(1, subCmd.execute().intValue());
        System.out.println(""REQ LOG : "" + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());
        HystrixRequestLog reqLog = HystrixRequestLog.getCurrentRequest();
        assertEquals(1, reqLog.getAllExecutedCommands().size());
        HystrixInvokableInfo<?> info = reqLog.getAllExecutedCommands().iterator().next();
        assertEquals(""SubCommandNoOverride"", info.getCommandKey().name());
    }
",non-flaky,5
95701,togglz_togglz,PropertyFeatureProviderTest.shouldSupportDefinitionWithoutLabel,"    @Test
    public void shouldSupportDefinitionWithoutLabel() {

        Properties properties = new Properties();
        properties.setProperty(""F1"", """");

        PropertyFeatureProvider provider = new PropertyFeatureProvider(properties);

        Set<Feature> features = provider.getFeatures();
        assertThat(features)
            .hasSize(1)
            .areExactly(1, featureNamed(""F1""));

        FeatureMetaData metadata = provider.getMetaData(new NamedFeature(""F1""));
        assertThat(metadata).isNotNull();
        assertThat(metadata.getLabel()).isEqualTo(""F1"");
        FeatureState defaultFeatureState = metadata.getDefaultFeatureState();
        assertThat(defaultFeatureState.isEnabled()).isFalse();
        assertThat(metadata.getGroups()).isEmpty();

    }
",non-flaky,5
76771,quarkusio_quarkus,PackageIT.testQuarkusIndexDependencyOnLocalModule,"    @Test
    public void testQuarkusIndexDependencyOnLocalModule() throws Exception {
        testDir = initProject(""projects/quarkus-index-dependencies"");

        running = new RunningInvoker(testDir, false);
        final MavenProcessInvocationResult result = running.execute(Collections.singletonList(""package""),
                Collections.emptyMap());

        assertThat(result.getProcess().waitFor()).isEqualTo(0);

        final File targetDir = new File(testDir.getAbsoluteFile(), ""runner"" + File.separator + ""target"");

        final Path runnerJar = targetDir.toPath().resolve(""quarkus-app"").resolve(""quarkus-run.jar"");
        Assertions.assertTrue(Files.exists(runnerJar), ""Runner jar "" + runnerJar + "" is missing"");
        assertZipEntriesCanBeOpenedAndClosed(runnerJar);
    }
",non-flaky,5
20985,NationalSecurityAgency_timely,SuggestResponseTest.testSuggestResponse,"    @Test
    public void testSuggestResponse() throws Exception {
        SuggestResponse response = new SuggestResponse();
        response.addSuggestion(""sys.cpu.idle"");
        response.addSuggestion(""sys.cpu.user"");
        String r = JsonUtil.getObjectMapper().writeValueAsString(response);
        Assert.assertEquals(""[\""sys.cpu.idle\"",\""sys.cpu.user\""]"", r);
    }
",non-flaky,5
38249,palantir_atlasdb,AbstractAtlasDbKeyValueServiceTest.testGetRangeWithHistory,"    @Test
    public void testGetRangeWithHistory() {
        testGetRangeWithHistory(false);
        if (reverseRangesSupported()) {
            testGetRangeWithHistory(true);
        }
    }
",non-flaky,5
59571,looly_hutool,CronPatternTest.rangePatternTest,"	@Test
	public void rangePatternTest() {
		CronPattern pattern = new CronPattern(""* 20/2 * * * ?"");
		assertMatch(pattern, ""2017-02-09 04:20:00"");
		assertMatch(pattern, ""2017-02-09 05:20:00"");
		assertMatch(pattern, ""2017-02-19 04:22:33"");

		pattern = new CronPattern(""* 2-20/2 * * * ?"");
		assertMatch(pattern, ""2017-02-09 04:02:00"");
		assertMatch(pattern, ""2017-02-09 05:04:00"");
		assertMatch(pattern, ""2017-02-19 04:20:33"");
	}
",non-flaky,5
26793,MundaneImmortal_pair-distribution-app,DayPairsHelperTest.testGenerateNewDayPairsWithEverydayRotation,"	@Test
	public void testGenerateNewDayPairsWithEverydayRotation() {
		PairCombinations pairs = getPairsList();
		List<Developer> devs = getStandardDevs();
		List<String> tracks = Arrays.asList(""track1"", ""track2"", ""track3"");
		Map<Pair, Integer> pairsWeight = subject.buildPairsWeightFromPastPairing(pairs, devs);
		subject.buildDevelopersPairingDays(pairs, devs);
		
		DayPairsHelper subjectWithEverydayRotation = new DayPairsHelper(trelloPairsRepository, true);
		DayPairs dayPairs = subjectWithEverydayRotation.generateNewDayPairs(tracks, devs, pairs, pairsWeight, getStandardCompanies());

		assertThat(dayPairs.getTracks().size(), is(2));
		assertThat(dayPairs.getTracks(), containsInAnyOrder(""track1"", ""track2""));
		assertThat(dayPairs.getPairByTrack(""track1""),
				is(not(new Pair(Arrays.asList(new Developer(""dev1""), new Developer(""dev2""))))));
		assertThat(dayPairs.getPairByTrack(""track2""),
				is(not(new Pair(Arrays.asList(new Developer(""dev3""), new Developer(""dev4""))))));
		
		boolean trackOneHasDev2 = dayPairs.getPairByTrack(""track1"").getFirstDev().equals(new Developer(""dev2"")) || dayPairs.getPairByTrack(""track1"").getSecondDev().equals(new Developer(""dev2""));
		boolean trackTwoHasDev4 = dayPairs.getPairByTrack(""track2"").getFirstDev().equals(new Developer(""dev4"")) || dayPairs.getPairByTrack(""track2"").getSecondDev().equals(new Developer(""dev4""));
		assertThat(trackOneHasDev2, is(true));
		assertThat(trackTwoHasDev4, is(true));
	}
",non-flaky,5
175811,GoogleCloudPlatform_google-cloud-eclipse,PluginXmlTest.testExtensionPoint,"  @Test
  public void testExtensionPoint() {
    NodeList extensions = getDocument().getElementsByTagName(""extension"");
    assertEquals(1, extensions.getLength());
    Element extension = (Element) extensions.item(0);
    assertEquals(""org.eclipse.ui.commands"", extension.getAttribute(""point""));

    NodeList commandDefinitions = extension.getElementsByTagName(""command"");
    assertEquals(1, commandDefinitions.getLength());
    Element configExtension = (Element) commandDefinitions.item(0);
    assertEquals(OpenDropDownMenuHandler.class.getName(),
        configExtension.getAttribute(""defaultHandler""));
    assertEquals(""com.google.cloud.tools.eclipse.ui.util.showPopup"",
        configExtension.getAttribute(""id""));
  }
",non-flaky,5
30950,camunda-cloud_zeebe,ElasticsearchClientIT.shouldFlushOnMemoryLimit,"  @Test
  public void shouldFlushOnMemoryLimit() {
    // given
    final var bulkMemoryLimit = 1024;
    final var recordSize = 2;

    configuration.bulk.memoryLimit = bulkMemoryLimit;
    configuration.bulk.size = Integer.MAX_VALUE;
    configuration.bulk.delay = Integer.MAX_VALUE;

    final var variableValue1 = ""x"".repeat(bulkMemoryLimit / recordSize);
    final var variableValue2 = ""y"".repeat(bulkMemoryLimit / recordSize);
    final Function<String, String> jsonRecord =
        (String value) -> String.format(""{\""value\"":\""%s\""}"", value);

    final VariableRecordValue recordValue = mock(VariableRecordValue.class);
    when(recordValue.getValue()).thenReturn(variableValue1);

    final Record<VariableRecordValue> recordMock = mock(Record.class);
    when(recordMock.getKey()).thenReturn(1L);
    when(recordMock.getPartitionId()).thenReturn(1);
    when(recordMock.getValueType()).thenReturn(ValueType.VARIABLE);
    when(recordMock.getValue()).thenReturn(recordValue);
    when(recordMock.toJson()).thenReturn(jsonRecord.apply(variableValue1));

    // when
    client.index(recordMock);

    assertThat(client.shouldFlush()).isFalse();

    when(recordMock.getKey()).thenReturn(2L);
    when(recordMock.toJson()).thenReturn(jsonRecord.apply(variableValue2));

    client.index(recordMock);

    // then
    assertThat(client.shouldFlush()).isTrue();
  }
",non-flaky,5
38257,palantir_atlasdb,AbstractSerializableTransactionTest.testClassicWriteSkew,"    @Test
    public void testClassicWriteSkew() {
        Transaction t0 = startTransaction();
        put(t0, ""row1"", ""col1"", ""100"");
        put(t0, ""row2"", ""col1"", ""100"");
        t0.commit();

        Transaction t1 = startTransaction();
        Transaction t2 = startTransaction();
        withdrawMoney(t1, true, false);
        withdrawMoney(t2, false, false);

        t1.commit();
        try {
            t2.commit();
            fail();
        } catch (TransactionSerializableConflictException e) {
            // this is expectecd to throw because it is a write skew
        }
    }
",non-flaky,5
97949,ReactiveX_RxJava,ZipTests.call,"    @Test
    public void testZipObservableOfObservables() {
        EventStream.getEventStream(""HTTP-ClusterB"", 20)
                .groupBy(new Func1<Event, String>() {

                    @Override
                    public String call(Event e) {
                        return e.instanceId;
                    }
",non-flaky,5
159655,liquibase_liquibase,AbstractIntegrationTest.testAbsolutePathChangeLog,"    @Test
    public void testAbsolutePathChangeLog() throws Exception {
        assumeNotNull(this.getDatabase());

        String fileUrlToChangeLog = getClass().getResource(""/"" + includedChangeLog).toString();
        assertTrue(fileUrlToChangeLog.startsWith(""file:/""));

        String absolutePathOfChangeLog = fileUrlToChangeLog.replaceFirst(""file:\\/"", """");
        if (System.getProperty(""os.name"").startsWith(""Windows "")) {
            absolutePathOfChangeLog = absolutePathOfChangeLog.replace('/', '\\');
        } else {
            absolutePathOfChangeLog = ""/"" + absolutePathOfChangeLog;
        }
        Liquibase liquibase = createLiquibase(absolutePathOfChangeLog, new FileSystemResourceAccessor());
        clearDatabase();

        liquibase.update(this.contexts);

        liquibase.update(this.contexts); //try again, make sure there are no errors

        clearDatabase();
    }
",non-flaky,5
106583,Alluxio_alluxio,HdfsConfValidationTaskTest.missingHdfsSiteXML,"  @Test
  public void missingHdfsSiteXML() {
    // Only prepare core-site.xml
    String coreSite = Paths.get(sTestDir.toPath().toString(), ""core-site.xml"").toString();
    ValidationTestUtils.writeXML(coreSite, ImmutableMap.of(""key1"", ""value1""));

    sConf.set(PropertyKey.UNDERFS_HDFS_CONFIGURATION, coreSite);
    HdfsConfValidationTask task = new HdfsConfValidationTask(""hdfs://namenode:9000/alluxio"", sConf);
    ValidationTaskResult result = task.loadHdfsConfig();
    assertEquals(result.getState(), ValidationUtils.State.SKIPPED);
    assertThat(result.getResult(), containsString(""hdfs-site.xml is not configured""));
    assertThat(result.getAdvice(), containsString(""hdfs-site.xml""));
  }
",non-flaky,5
77566,dropwizard_dropwizard,OptionalFormParamResourceTest.getMessage,"    @Test
        public String getMessage(@FormParam(""message"") Optional<String> message) {
            return message.orElse(""Default Message"");
        }
",non-flaky,5
114042,aws_aws-sdk-java-v2,PutItemWithResponseIntegrationTest.putItem_returnItemCollectionMetrics_set_itemCollectionMetricsNull,"    @Test
    public void putItem_returnItemCollectionMetrics_set_itemCollectionMetricsNull() {
        Record record = new Record().setId(1).setId2(10);
        PutItemEnhancedRequest<Record> request = PutItemEnhancedRequest.builder(Record.class)
                                                                       .item(record)
                                                                       .build();

        PutItemEnhancedResponse<Record> response = mappedTable.putItemWithResponse(request);

        assertThat(response.itemCollectionMetrics()).isNull();
    }
",non-flaky,5
188,wildfly_wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993.testLookupBindingUsingNestedContext,"@Test
public void testLookupBindingUsingNestedContext() throws Exception {
    final ServiceName bindingName = ServiceName.JBOSS.append(""foo"", ""bar"", ""baz"", ""TestBean"");
    final Object value = new Object();
    bindObject(bindingName, value);
    Object context = store.lookup(new CompositeName(""foo""));
    assertNotNull(context);
    assertTrue(context instanceof Context);
    Object obj = Context.class.cast(context).lookup(new CompositeName(""bar/baz/TestBean""));
    assertNotNull(obj);
    assertEquals(value, obj);
    context = Context.class.cast(context).lookup(new CompositeName(""bar""));
    obj = Context.class.cast(context).lookup(new CompositeName(""baz/TestBean""));
    assertNotNull(obj);
    assertEquals(value, obj);
    context = Context.class.cast(context).lookup(new CompositeName(""baz""));
    obj = Context.class.cast(context).lookup(new CompositeName(""TestBean""));
    assertNotNull(obj);
    assertEquals(value, obj);
}",test order dependency,4
162416,testcontainers_testcontainers-java,DockerComposeLogConsumerTest.testLogConsumer,"    @Test
    public void testLogConsumer() throws TimeoutException {
        WaitingConsumer logConsumer = new WaitingConsumer();
        DockerComposeContainer environment = new DockerComposeContainer(new File(""src/test/resources/v2-compose-test.yml""))
            .withExposedService(""redis_1"", 6379)
            .withLogConsumer(""redis_1"", logConsumer);

        try {
            environment.starting(Description.EMPTY);
            logConsumer.waitUntil(frame -> frame.getType() == STDOUT && frame.getUtf8String().contains(""Ready to accept connections""), 5, TimeUnit.SECONDS);
        } finally {
            environment.finished(Description.EMPTY);
        }
    }
",non-flaky,5
19421,eclipse_xtext-core,DeclarativeQualifiedNameConverterTest.getDelimiter,"	@Test public void testQualifiedNameConverter_emptyDelimiter() throws Exception {
			public String getDelimiter() {
				return """";
			}
",non-flaky,5
110153,Wikidata_wikidata-toolkit,NestedIteratorTest.iterateBeyondInnerList,"	@Test(expected = NoSuchElementException.class)
	public void iterateBeyondInnerList() {
		NestedIterator<String> nestedIterator = new NestedIterator<>(
				Collections.singletonList(Collections.<String> emptyList()));
		nestedIterator.next();
	}
",non-flaky,5
176821,ctco_cukes,EntityFacadeTest.charArrayValueIsCheckedAsString,"    @Test
    public void charArrayValueIsCheckedAsString() throws Exception {
        BasicAttributes entity = new BasicAttributes(true);
        entity.put(""userPassword"", new char[]{'h', 'e', 'l', 'l', 'o'});

        Whitebox.setInternalState(entityFacade, ""entity"", entity);

        entityFacade.entityHasAttributeWithValue(""userpassword"", ""hello"");
    }
",non-flaky,5
156422,apache_commons-lang,GmtTimeZoneTest.getRawOffset,"    @Test
    public void getRawOffset() {
        assertEquals(0, new GmtTimeZone(false, 0, 0).getRawOffset());
    }
",non-flaky,5
86130,graylog2_graylog2-server,TemplateFieldValueProviderTest.templateWithEventContext,"    @Test
    public void templateWithEventContext() {
        final TestEvent event = new TestEvent();
        final TestEvent eventContext = new TestEvent();

        eventContext.setField(""hello"", FieldValue.string(""event""));

        final EventWithContext eventWithContext = EventWithContext.create(event, eventContext);

        final FieldValue fieldValue = newTemplate(""hello: ${source.hello}"").doGet(""test"", eventWithContext);

        assertThat(fieldValue.value()).isEqualTo(""hello: event"");
    }
",non-flaky,5
156382,apache_commons-lang,ClassPathUtilsTest.testToFullyQualifiedPathClassNullString,"    @Test
    public void testToFullyQualifiedPathClassNullString() {
        assertThrows(NullPointerException.class,
                () -> ClassPathUtils.toFullyQualifiedPath((Class<?>) null, ""Test.properties""));
    }
",non-flaky,5
112107,apache_shardingsphere-elasticjob,ShardingContextTest.assertNew,"    @Test
    public void assertNew() {
        ShardingContexts shardingContexts = ShardingContextsBuilder.getMultipleShardingContexts();
        ShardingContext actual = new ShardingContext(shardingContexts, 1);
        assertThat(actual.getJobName(), is(shardingContexts.getJobName()));
        assertThat(actual.getTaskId(), is(shardingContexts.getTaskId()));
        assertThat(actual.getShardingTotalCount(), is(shardingContexts.getShardingTotalCount()));
        assertThat(actual.getJobParameter(), is(shardingContexts.getJobParameter()));
        assertThat(actual.getShardingItem(), is(1));
        assertThat(actual.getShardingParameter(), is(shardingContexts.getShardingItemParameters().get(1)));
    }
",non-flaky,5
162760,OpenAPITools_openapi-generator,AdditionalPropertiesObjectTest.nameTest,"    @Test
    public void nameTest() {
        // TODO: test name
    }
",non-flaky,5
156474,apache_commons-lang,DateUtilsFragmentTest.testMillisecondsOfYearWithCalendar,"    @Test
    public void testMillisecondsOfYearWithCalendar() {
        final long testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.YEAR);
        assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE)
                + (hours * DateUtils.MILLIS_PER_HOUR) + ((aCalendar.get(Calendar.DAY_OF_YEAR) - 1) * DateUtils.MILLIS_PER_DAY),
testResult);
    }
",non-flaky,5
162439,testcontainers_testcontainers-java,GenericContainerRuleTest.addExposedPortAfterWithExposedPortsTest,"    @Test
    public void addExposedPortAfterWithExposedPortsTest() {
        redis.addExposedPort(8987);
        assertThat(""Both ports should be exposed"", redis.getExposedPorts().size(), equalTo(2));
        assertTrue(""withExposedPort should be exposed"", redis.getExposedPorts().contains(REDIS_PORT));
        assertTrue(""addExposedPort should be exposed"", redis.getExposedPorts().contains(8987));
    }
",non-flaky,5
99758,apache_cassandra,AsyncStreamingInputPlusTest.consumeUntil_SingleBuffer_Fails,"    @Test(expected = EOFException.class)
    public void consumeUntil_SingleBuffer_Fails() throws IOException
    {
        consumeUntilTestCycle(1, 8, 0, 9);
    }
",non-flaky,5
99783,apache_cassandra,MessagingServiceTest.testUpdatesBackPressureOnTimeoutWhenEnabledAndWithSupportedCallback,"    @Test
    public void testUpdatesBackPressureOnTimeoutWhenEnabledAndWithSupportedCallback() throws UnknownHostException
    {
        MockBackPressureStrategy.MockBackPressureState backPressureState = (MockBackPressureStrategy.MockBackPressureState) messagingService.getBackPressureState(InetAddressAndPort.getByName(""127.0.0.2""));
        RequestCallback bpCallback = new BackPressureCallback();
        RequestCallback noCallback = new NoBackPressureCallback();
        boolean timeout = true;

        DatabaseDescriptor.setBackPressureEnabled(true);
        messagingService.updateBackPressureOnReceive(InetAddressAndPort.getByName(""127.0.0.2""), noCallback, timeout);
        assertFalse(backPressureState.onReceive);
        assertFalse(backPressureState.onTimeout);

        DatabaseDescriptor.setBackPressureEnabled(false);
        messagingService.updateBackPressureOnReceive(InetAddressAndPort.getByName(""127.0.0.2""), bpCallback, timeout);
        assertFalse(backPressureState.onReceive);
        assertFalse(backPressureState.onTimeout);

        DatabaseDescriptor.setBackPressureEnabled(true);
        messagingService.updateBackPressureOnReceive(InetAddressAndPort.getByName(""127.0.0.2""), bpCallback, timeout);
        assertFalse(backPressureState.onReceive);
        assertTrue(backPressureState.onTimeout);
    }
",non-flaky,5
113791,salesforce_reactive-grpc,CancellationPropagationIntegrationTest.clientCanCancelServerStreamImplicitly,"    @Test
    public void clientCanCancelServerStreamImplicitly() throws InterruptedException {
        TestService svc = new TestService();
        serverRule.getServiceRegistry().addService(svc);

        RxNumbersGrpc.RxNumbersStub stub = RxNumbersGrpc.newRxStub(serverRule.getChannel());
        TestSubscriber<NumberProto.Number> subscription =  Single.just(Empty.getDefaultInstance())
                .as(stub::responsePressure)
                .doOnNext(number -> System.out.println(number.getNumber(0)))
                .doOnError(throwable -> System.out.println(throwable.getMessage()))
                .doOnComplete(() -> System.out.println(""Completed""))
                .doOnCancel(() -> System.out.println(""Client canceled""))
                .take(10)
                .test();

        // Consume some work
        Thread.sleep(TimeUnit.SECONDS.toMillis(1));
        subscription.dispose();

        subscription.awaitTerminalEvent(3, TimeUnit.SECONDS);
        subscription.assertValueCount(10);
        subscription.assertTerminated();
        assertThat(svc.wasCanceled()).isTrue();

        errorRule.verifyNoError();
    }
",non-flaky,5
26738,MundaneImmortal_pair-distribution-app,DeveloperTest.testNew,"	@Test
	public void testNew() {
		Developer developer = new Developer(""developerId"");
		
		assertThat(developer.getNew(), is(false));
		
		developer.setNew(true);
		
		assertThat(developer.getNew(), is(true));
	}
",non-flaky,5
156397,apache_commons-lang,StringUtilsEmptyBlankTest.testIsAllBlank,"    @Test
    public void testIsAllBlank() {
        assertTrue(StringUtils.isAllBlank((String) null));
        assertTrue(StringUtils.isAllBlank((String[]) null));
        assertTrue(StringUtils.isAllBlank(null, null));
        assertTrue(StringUtils.isAllBlank(null, "" ""));
        assertFalse(StringUtils.isAllBlank(null, ""foo""));
        assertFalse(StringUtils.isAllBlank("""", ""bar""));
        assertFalse(StringUtils.isAllBlank(""bob"", """"));
        assertFalse(StringUtils.isAllBlank(""  bob  "", null));
        assertFalse(StringUtils.isAllBlank("" "", ""bar""));
        assertFalse(StringUtils.isAllBlank(""foo"", ""bar""));
    }
",non-flaky,5
114013,apache_struts,StrutsTilesAnnotationProcessorTest.buildDefiniton,"    @Test
    public void buildDefiniton() {
        StrutsTilesAnnotationProcessor annotationProcessor = new StrutsTilesAnnotationProcessor();
        TilesDefinition tilesDefinition = annotationProcessor.findAnnotation(new TilesTestActionSingleAnnotation(), null);

        Definition definition = annotationProcessor.buildTilesDefinition(""tileName"", tilesDefinition);

        Assert.assertNotNull(definition);
        Assert.assertEquals(""tileName"", definition.getName());
        Assert.assertEquals(""preparer"", definition.getPreparer());
        Assert.assertEquals(""base-definition"", definition.getExtends());
        Attribute templateAttribute = definition.getTemplateAttribute();
        Assert.assertEquals(""template"", templateAttribute.getValue());
        Assert.assertEquals(""type"", templateAttribute.getRenderer());
        Assert.assertEquals(""role"", templateAttribute.getRole());
        Expression definitionExpressionObject = templateAttribute.getExpressionObject();
        Assert.assertEquals(""templ*"", definitionExpressionObject.getExpression());
        Assert.assertNull(definitionExpressionObject.getLanguage());

        Attribute putAttribute = definition.getAttribute(""put-attr"");
        Assert.assertNotNull(putAttribute);
        Assert.assertEquals(""attr-val"", putAttribute.getValue());
        Assert.assertEquals(""attr-type"", putAttribute.getRenderer());
        Assert.assertEquals(""attr-role"", putAttribute.getRole());
        Expression putAttrExpressionObject = putAttribute.getExpressionObject();
        Assert.assertEquals(""expr"", putAttrExpressionObject.getExpression());
        Assert.assertEquals(""lang"", putAttrExpressionObject.getLanguage());

        Attribute listAttribute = definition.getAttribute(""list-name"");
        Assert.assertEquals(""list-role"", listAttribute.getRole());
        List<Attribute> listValue = getListValue(listAttribute);
        Assert.assertEquals(2, listValue.size());

        Attribute addAttribute = listValue.get(0);
        Assert.assertEquals(""list-attr-role"", addAttribute.getRole());
        Assert.assertEquals(""list-attr-val"", addAttribute.getValue());
        Assert.assertEquals(""list-attr-type"", addAttribute.getRenderer());
        Expression addAttrExpressionObject = addAttribute.getExpressionObject();
        Assert.assertEquals(""list-attr-expr"", addAttrExpressionObject.getExpression());

        Attribute addListAttribute = listValue.get(1);
        Assert.assertEquals(""list-list-attr-role"", addListAttribute.getRole());
        List<Attribute> addListValue = getListValue(addListAttribute);
        Assert.assertEquals(1, addListValue.size());
        Assert.assertEquals(""list-list-add-attr"", addListValue.get(0).getValue());

        Set<String> cascadedAttributeNames = definition.getCascadedAttributeNames();
        Assert.assertEquals(2, cascadedAttributeNames.size());
        Assert.assertTrue(cascadedAttributeNames.contains(""put-attr""));
        Assert.assertTrue(cascadedAttributeNames.contains(""list-name""));
    }
",non-flaky,5
99776,apache_cassandra,MessagingServiceTest.testDroppedMessages,"    @Test
    public void testDroppedMessages()
    {
        Verb verb = Verb.READ_REQ;

        for (int i = 1; i <= 5000; i++)
            messagingService.metrics.recordDroppedMessage(verb, i, MILLISECONDS, i % 2 == 0);

        List<String> logs = new ArrayList<>();
        messagingService.metrics.resetAndConsumeDroppedErrors(logs::add);
        assertEquals(1, logs.size());
        Pattern regexp = Pattern.compile(""READ_REQ messages were dropped in last 5000 ms: (\\d+) internal and (\\d+) cross node. Mean internal dropped latency: (\\d+) ms and Mean cross-node dropped latency: (\\d+) ms"");
        Matcher matcher = regexp.matcher(logs.get(0));
        assertTrue(matcher.find());
        assertEquals(2500, Integer.parseInt(matcher.group(1)));
        assertEquals(2500, Integer.parseInt(matcher.group(2)));
        assertTrue(Integer.parseInt(matcher.group(3)) > 0);
        assertTrue(Integer.parseInt(matcher.group(4)) > 0);
        assertEquals(5000, (int) messagingService.metrics.getDroppedMessages().get(verb.toString()));

        logs.clear();
        messagingService.metrics.resetAndConsumeDroppedErrors(logs::add);
        assertEquals(0, logs.size());

        for (int i = 0; i < 2500; i++)
            messagingService.metrics.recordDroppedMessage(verb, i, MILLISECONDS, i % 2 == 0);

        logs.clear();
        messagingService.metrics.resetAndConsumeDroppedErrors(logs::add);
        assertEquals(1, logs.size());
        matcher = regexp.matcher(logs.get(0));
        assertTrue(matcher.find());
        assertEquals(1250, Integer.parseInt(matcher.group(1)));
        assertEquals(1250, Integer.parseInt(matcher.group(2)));
        assertTrue(Integer.parseInt(matcher.group(3)) > 0);
        assertTrue(Integer.parseInt(matcher.group(4)) > 0);
        assertEquals(7500, (int) messagingService.metrics.getDroppedMessages().get(verb.toString()));
    }
",non-flaky,5
94784,ktuukkan_marine-api,AISMessage21ParserTest.getPort,"    @Test
    public void getPort() throws Exception {
        assertEquals(3, msg.getPort());
    }
",non-flaky,5
97980,ReactiveX_RxJava,ObservableTests.onSubscribe,"    @Test
    public void testCustomObservableWithErrorInObservableSynchronous() {
        final AtomicInteger count = new AtomicInteger();
        final AtomicReference<Throwable> error = new AtomicReference<Throwable>();
        Observable.create(new OnSubscribeFunc<String>() {

            @Override
            public Subscription onSubscribe(Observer<? super String> observer) {
                observer.onNext(""1"");
                observer.onNext(""2"");
                throw new NumberFormatException();
            }
",non-flaky,5
106598,Alluxio_alluxio,ContainerAllocatorTest.fiveContainersPerHostHalfAllocation,"  @Test(timeout = 10000)
  public void fiveContainersPerHostHalfAllocation() throws Exception {
    int numHosts = 10;
    int maxContainersPerHost = 5;
    int numContainers = numHosts * maxContainersPerHost / 2;
    ContainerAllocator containerAllocator =
        setup(numHosts, maxContainersPerHost, numContainers);
    List<Container> containers = containerAllocator.allocateContainers();

    assertEquals(numContainers, containers.size());
    checkMaxHostsLimitNotExceeded(containers, maxContainersPerHost);
  }
",non-flaky,5
110187,Wikidata_wikidata-toolkit,PropertyRegisterTest.testWikidataPropertyRegister,"	@Test
	public void testWikidataPropertyRegister() {
		PropertyRegister pr = PropertyRegister.getWikidataPropertyRegister();
		assertEquals(Datamodel.SITE_WIKIDATA, pr.getUriPrefix());
		assertEquals(""P1921"", pr.uriPatternPropertyId);
	}
",non-flaky,5
59646,looly_hutool,TemplateUtilTest.beetlEngineTest,"	@Test
	public void beetlEngineTest() {
		// å­ç¬¦ä¸²æ¨¡æ¿
		TemplateEngine engine = new BeetlEngine(new TemplateConfig(""templates""));
		Template template = engine.getTemplate(""hello,${name}"");
		String result = template.render(Dict.create().set(""name"", ""hutool""));
		Assert.assertEquals(""hello,hutool"", result);

		// classpathä¸­è·åæ¨¡æ¿
		engine = new BeetlEngine(new TemplateConfig(""templates"", ResourceMode.CLASSPATH));
		Template template2 = engine.getTemplate(""beetl_test.btl"");
		String result2 = template2.render(Dict.create().set(""name"", ""hutool""));
		Assert.assertEquals(""hello,hutool"", result2);
	}
",non-flaky,5
292,apache_hadoop,TestWrites.testCheckCommitFromRead,"  @Test
  public void testCheckCommitFromRead() throws IOException {
    DFSClient dfsClient = Mockito.mock(DFSClient.class);
    Nfs3FileAttributes attr = new Nfs3FileAttributes();
    HdfsDataOutputStream fos = Mockito.mock(HdfsDataOutputStream.class);
    Mockito.when(fos.getPos()).thenReturn((long) 0);
    NfsConfiguration config = new NfsConfiguration();

    config.setBoolean(NfsConfigKeys.LARGE_FILE_UPLOAD, false);
    OpenFileCtx ctx = new OpenFileCtx(fos, attr, ""/dumpFilePath"", dfsClient,
        new ShellBasedIdMapping(config), false, config);

    FileHandle h = new FileHandle(1); // fake handle for ""/dumpFilePath""
    COMMIT_STATUS ret;
    WriteManager wm = new WriteManager(new ShellBasedIdMapping(config), config, false);
    assertTrue(wm.addOpenFileStream(h, ctx));
    
    // Test inactive open file context
    ctx.setActiveStatusForTest(false);
    Channel ch = Mockito.mock(Channel.class);
    ret = ctx.checkCommit(dfsClient, 0, ch, 1, attr, true);
    assertEquals( COMMIT_STATUS.COMMIT_INACTIVE_CTX, ret);
    assertEquals(Nfs3Status.NFS3_OK, wm.commitBeforeRead(dfsClient, h, 0));
    
    ctx.getPendingWritesForTest().put(new OffsetRange(10, 15),
        new WriteCtx(null, 0, 0, 0, null, null, null, 0, false, null));
    ret = ctx.checkCommit(dfsClient, 0, ch, 1, attr, true);
    assertEquals(COMMIT_STATUS.COMMIT_INACTIVE_WITH_PENDING_WRITE, ret);
    assertEquals(Nfs3Status.NFS3ERR_IO, wm.commitBeforeRead(dfsClient, h, 0));
    
    // Test request with non zero commit offset
    ctx.setActiveStatusForTest(true);
    Mockito.when(fos.getPos()).thenReturn((long) 10);
    ctx.setNextOffsetForTest((long)10);
    COMMIT_STATUS status = ctx.checkCommitInternal(5, ch, 1, attr, false);
    assertEquals(COMMIT_STATUS.COMMIT_DO_SYNC, status);
    // Do_SYNC state will be updated to FINISHED after data sync
    ret = ctx.checkCommit(dfsClient, 5, ch, 1, attr, true);
    assertEquals(COMMIT_STATUS.COMMIT_FINISHED, ret);
    assertEquals(Nfs3Status.NFS3_OK, wm.commitBeforeRead(dfsClient, h, 5));
 
    status = ctx.checkCommitInternal(10, ch, 1, attr, true);
    assertTrue(status == COMMIT_STATUS.COMMIT_DO_SYNC);
    ret = ctx.checkCommit(dfsClient, 10, ch, 1, attr, true);
    assertEquals(COMMIT_STATUS.COMMIT_FINISHED, ret);
    assertEquals(Nfs3Status.NFS3_OK, wm.commitBeforeRead(dfsClient, h, 10));

    ConcurrentNavigableMap<Long, CommitCtx> commits = ctx
        .getPendingCommitsForTest();
    assertTrue(commits.size() == 0);
    ret = ctx.checkCommit(dfsClient, 11, ch, 1, attr, true);
    assertEquals(COMMIT_STATUS.COMMIT_WAIT, ret);
    assertEquals(0, commits.size()); // commit triggered by read doesn't wait
    assertEquals(Nfs3Status.NFS3ERR_JUKEBOX, wm.commitBeforeRead(dfsClient, h, 11));

    // Test request with zero commit offset
    // There is one pending write [5,10]
    ret = ctx.checkCommit(dfsClient, 0, ch, 1, attr, true);
    assertEquals(COMMIT_STATUS.COMMIT_WAIT, ret);
    assertEquals(0, commits.size());
    assertEquals(Nfs3Status.NFS3ERR_JUKEBOX, wm.commitBeforeRead(dfsClient, h, 0));

    // Empty pending writes
    ctx.getPendingWritesForTest().remove(new OffsetRange(10, 15));
    ret = ctx.checkCommit(dfsClient, 0, ch, 1, attr, true);
    assertEquals(COMMIT_STATUS.COMMIT_FINISHED, ret);
    assertEquals(Nfs3Status.NFS3_OK, wm.commitBeforeRead(dfsClient, h, 0));
  }
",non-flaky,5
112685,hwang-pku_ormlite-core,BaseDaoEnabledTest.testObjectEquals,"	@Test
	public void testObjectEquals() throws Exception {
		Dao<One, Integer> dao = createDao(One.class, true);
		One one = new One();
		String stuff1 = ""fewpfjewfew"";
		one.stuff = stuff1;
		assertEquals(1, dao.create(one));
		assertTrue(one.objectsEqual(one));
	}
",non-flaky,5
5,apache_hadoop,TestPathData.testToFile,"@Test
public void testToFile() throws Exception {
    item = new PathData(""."", conf);
    assertEquals(new File(testDir.toString()), item.toFile());
    item = new PathData(""d1/f1"", conf);
    assertEquals(new File(testDir + ""/d1/f1""), item.toFile());
    item = new PathData(testDir + ""/d1/f1"", conf);
    assertEquals(new File(testDir + ""/d1/f1""), item.toFile());
}",test order dependency,4
160354,ConsenSys_teku,SlashingProtectionExporterTest.shouldNotAcceptDifferentGenesisValidatorsRoot,"  @Test
  public void shouldNotAcceptDifferentGenesisValidatorsRoot(@TempDir Path tempDir)
      throws URISyntaxException, IOException {
    final SlashingProtectionExporter exporter = new SlashingProtectionExporter(tempDir);
    Optional<String> error =
        exporter.readSlashProtectionFile(
            usingResourceFile(""slashProtectionWithGenesisRoot2.yml"", tempDir), LOG::debug);
    assertThat(error).isEmpty();
    error =
        exporter.readSlashProtectionFile(
            usingResourceFile(""slashProtectionWithGenesisRoot.yml"", tempDir), LOG::debug);
    assertThat(error.orElse("""")).startsWith(""The genesisValidatorsRoot of"");
  }
",non-flaky,5
179480,abel533_Mapper,SafeUpdateByFieldTest.testSafeUpdateByExampleNull,"    @Test(expected = PersistenceException.class)
    public void testSafeUpdateByExampleNull() {
        SqlSession sqlSession = getSqlSession();
        try {
            CountryMapper mapper = sqlSession.getMapper(CountryMapper.class);
            mapper.updateByExampleSelective(new Country(), null);
        } finally {
            sqlSession.close();
        }
    }
",non-flaky,5
1,apache_hadoop,TestDelegationTokenRenewer.testAddRemoveRenewAction,"@Test
public void testAddRemoveRenewAction() throws IOException, InterruptedException {
    TestFileSystem tfs = new TestFileSystem();
    renewer.addRenewAction(tfs);
    for (int i = 0; i < 60; i++) {
        Thread.sleep(RENEW_CYCLE);
        if (tfs.testToken.renewCount > 0) {
            renewer.removeRenewAction(tfs);
            break;
        }
    }
    assertTrue(""Token not renewed even after 1 minute"", tfs.testToken.renewCount > 0);
    assertTrue(""Token not removed"", tfs.testToken.renewCount < MAX_RENEWALS);
    assertTrue(""Token not cancelled"", tfs.testToken.cancelled);
}",async wait,0
175829,GoogleCloudPlatform_google-cloud-eclipse,BucketNameValidatorTest.testValidation_endWithHyphen,"  @Test
  public void testValidation_endWithHyphen() {
    assertThat(validator.validate(""bucket-"").getSeverity(), is(IStatus.ERROR));
  }
",non-flaky,5
77705,pholser_junit-quickcheck,PrimitivePropertyParameterTypesTest.shouldHold,"    @Test public void leftOpenEndedRangedWrapperDouble() {
        @Property public void shouldHold(@InRange(max = ""3.14"") Double d) {
            assertThat(d, greaterThanOrEqualTo(RangeAttributes.minDouble()));
            assertThat(d, lessThan(3.14));
        }
",non-flaky,5
65,wildfly_wildfly,b19048b72669fc0e96665b1b125dc1fda21f5993.testInitialFactory,"@Test
public void testInitialFactory() throws Exception {
    System.setProperty(Context.INITIAL_CONTEXT_FACTORY, InitialContextFactory.class.getName());
    InitialContext initialContext = new InitialContext();
    Context context = (Context) initialContext.lookup("""");
    assertTrue(context instanceof NamingContext);
    if (!NamingManager.hasInitialContextFactoryBuilder()) {
        NamingManager.setInitialContextFactoryBuilder(new InitialContextFactoryBuilder());
    }
    initialContext = new InitialContext();
    context = (Context) initialContext.lookup("""");
    assertTrue(context instanceof NamingContext);
}",test order dependency,4
86123,graylog2_graylog2-server,EventDefinitionFacadeTest.resolveForInstallation,"    @Test
    public void resolveForInstallation() {
        EntityV1 eventEntityV1 = createTestEntity();

        final NotificationEntity notificationEntity = NotificationEntity.builder()
                .title(ValueReference.of(""title""))
                .description(ValueReference.of(""description""))
                .config(HttpEventNotificationConfigEntity.builder()
                        .url(ValueReference.of(""http://url"")).build())
                .build();
        final JsonNode data = objectMapper.convertValue(notificationEntity, JsonNode.class);
        final EntityV1 notificationV1 = EntityV1.builder()
                .data(data)
                .id(ModelId.of(""123123""))
                .type(ModelTypes.EVENT_DEFINITION_V1)
                .build();

        final EntityDescriptor entityDescriptor = EntityDescriptor.create(""123123"", ModelTypes.NOTIFICATION_V1);

        Map<String, ValueReference> parameters = ImmutableMap.of();
        Map<EntityDescriptor, Entity> entities = ImmutableMap.of(entityDescriptor, notificationV1);

        Graph<Entity> graph = facade.resolveForInstallation(eventEntityV1, parameters, entities);
        assertThat(graph).isNotNull();
        Set<Entity> expectedNodes = ImmutableSet.of(eventEntityV1, notificationV1);
        assertThat(graph.nodes()).isEqualTo(expectedNodes);
    }
",non-flaky,5
26873,wildfly_wildfly,NamingContextTestCase.testLookupLink,"    @Test
    public void testLookupLink() throws Exception {
        final Name name = new CompositeName(""test"");
        namingStore.bind(name, ""testValue"", String.class);
        final Name linkName = new CompositeName(""link"");
        namingStore.bind(linkName, new LinkRef(""./test""));
        Object result = namingContext.lookup(linkName);
        assertEquals(""testValue"", result);

        //the same with security permissions
        result = testActionPermission(JndiPermission.ACTION_LOOKUP, Arrays.asList(new JndiPermission(""test"", ""lookup"")), namingContext, ""link"");
        assertEquals(""testValue"", result);

        System.setProperty(Context.INITIAL_CONTEXT_FACTORY, InitialContextFactory.class.getName());
        namingStore.rebind(linkName, new LinkRef(name));
        result = namingContext.lookup(linkName);
        assertEquals(""testValue"", result);

        //the same with security permissions
        result = testActionPermission(JndiPermission.ACTION_LOOKUP, Arrays.asList(new JndiPermission(""test"", ""lookup"")), namingContext, ""link"");
        assertEquals(""testValue"", result);
    }
",non-flaky,5
114052,aws_aws-sdk-java-v2,AsyncPutItemWithResponseIntegrationTest.putItem_returnItemCollectionMetrics_set_itemCollectionMetricsNull,"    @Test
    public void putItem_returnItemCollectionMetrics_set_itemCollectionMetricsNull() {
        Record record = new Record().setId(1).setId2(10);
        PutItemEnhancedRequest<Record> request = PutItemEnhancedRequest.builder(Record.class)
                                                                       .item(record)
                                                                       .build();

        PutItemEnhancedResponse<Record> response = mappedTable.putItemWithResponse(request).join();

        assertThat(response.itemCollectionMetrics()).isNull();
    }
",non-flaky,5
91449,strapdata_elassandra,IndexShardIT.testStressMaybeFlushOrRollTranslogGeneration,"    @TestLogging(""org.elasticsearch.index.shard:TRACE,org.elasticsearch.index.engine:TRACE"")
    public void testStressMaybeFlushOrRollTranslogGeneration() throws Exception {
        createIndex(""test"");
        ensureGreen();
        IndicesService indicesService = getInstanceFromNode(IndicesService.class);
        IndexService test = indicesService.indexService(resolveIndex(""test""));
        final IndexShard shard = test.getShardOrNull(0);
        assertFalse(shard.shouldPeriodicallyFlush());
        final boolean flush = randomBoolean();
        final Settings settings;
        if (flush) {
            // size of the operation plus two generations of overhead.
            settings = Settings.builder().put(""index.translog.flush_threshold_size"", ""180b"").build();
        } else {
            // size of the operation plus header and footer
            settings = Settings.builder().put(""index.translog.generation_threshold_size"", ""117b"").build();
        }
        client().admin().indices().prepareUpdateSettings(""test"").setSettings(settings).get();
        client().prepareIndex(""test"", ""test"", ""0"")
                .setSource(""{}"", XContentType.JSON)
                .setRefreshPolicy(randomBoolean() ? IMMEDIATE : NONE)
                .get();
        assertFalse(shard.shouldPeriodicallyFlush());
        final AtomicBoolean running = new AtomicBoolean(true);
        final int numThreads = randomIntBetween(2, 4);
        final Thread[] threads = new Thread[numThreads];
        final CyclicBarrier barrier = new CyclicBarrier(numThreads + 1);
        for (int i = 0; i < threads.length; i++) {
            threads[i] = new Thread(() -> {
                try {
                    barrier.await();
                } catch (final InterruptedException | BrokenBarrierException e) {
                    throw new RuntimeException(e);
                }
                while (running.get()) {
                    shard.afterWriteOperation();
                }
            });
            threads[i].start();
        }
        barrier.await();
        final CheckedRunnable<Exception> check;
        if (flush) {
            final FlushStats initialStats = shard.flushStats();
            client().prepareIndex(""test"", ""test"", ""1"").setSource(""{}"", XContentType.JSON).get();
            check = () -> {
                final FlushStats currentStats = shard.flushStats();
                String msg = String.format(Locale.ROOT, ""flush stats: total=[%d vs %d], periodic=[%d vs %d]"",
                    initialStats.getTotal(), currentStats.getTotal(), initialStats.getPeriodic(), currentStats.getPeriodic());
                assertThat(msg, currentStats.getPeriodic(), equalTo(initialStats.getPeriodic() + 1));
                assertThat(msg, currentStats.getTotal(), equalTo(initialStats.getTotal() + 1));
            };
        } else {
            final long generation = getTranslog(shard).currentFileGeneration();
            client().prepareIndex(""test"", ""test"", ""1"").setSource(""{}"", XContentType.JSON).get();
            check = () -> assertEquals(
                    generation + 1,
                    getTranslog(shard).currentFileGeneration());
        }
        assertBusy(check);
        running.set(false);
        for (int i = 0; i < threads.length; i++) {
            threads[i].join();
        }
        check.run();
    }
",non-flaky,5
98299,spotify_docker-client,UnixTimestampDeserializerTest.testFromString,"  @Test
  public void testFromString() throws Exception {
    final String json = toJson(""{\""date\"": \""%s\""}"");

    final TestClass value = OBJECT_MAPPER.readValue(json, TestClass.class);
    assertThat(value.getDate(), equalTo(referenceDateTime.toDate()));
  }
",non-flaky,5
86122,graylog2_graylog2-server,EventDefinitionFacadeTest.resolveNativeEntity,"    @Test
    public void resolveNativeEntity() {
        EntityDescriptor eventDescriptor = EntityDescriptor
                .create(""5d4032513d2746703d1467f6"", ModelTypes.EVENT_DEFINITION_V1);
        EntityDescriptor streamDescriptor = EntityDescriptor
                .create(""5cdab2293d27467fbe9e8a72"", ModelTypes.STREAM_V1);
        Set<EntityDescriptor> expectedNodes = ImmutableSet.of(eventDescriptor, streamDescriptor);
        Graph<EntityDescriptor> graph = facade.resolveNativeEntity(eventDescriptor);
        assertThat(graph).isNotNull();
        Set<EntityDescriptor> nodes = graph.nodes();
        assertThat(nodes).isEqualTo(expectedNodes);
    }
",non-flaky,5
97990,ReactiveX_RxJava,ObserveOnTests.call,"    @Test
    public void testObserveOnWithNewThreadScheduler() {
        final AtomicInteger count = new AtomicInteger();
        final int _multiple = 99;

        Observable.range(1, 100000).map(new Func1<Integer, Integer>() {

            @Override
            public Integer call(Integer t1) {
                return t1 * _multiple;
            }
",non-flaky,5
122597,vespa-engine_vespa,FileFinderTest.filename_filters,"        @Test
        public void filename_filters() {
            Path path = Paths.get(""/my/fake/path/some-12352-file.json"");
            FileFinder.FileAttributes fileAttributes = new FileFinder.FileAttributes(path, attributes);

            assertTrue(FileFinder.nameStartsWith(""some-"").test(fileAttributes));
            assertFalse(FileFinder.nameStartsWith(""som-"").test(fileAttributes));

            assertTrue(FileFinder.nameEndsWith("".json"").test(fileAttributes));
            assertFalse(FileFinder.nameEndsWith(""file"").test(fileAttributes));

            assertTrue(FileFinder.nameMatches(Pattern.compile(""some-[0-9]+-file.json"")).test(fileAttributes));
            assertTrue(FileFinder.nameMatches(Pattern.compile(""^some-[0-9]+-file.json$"")).test(fileAttributes));
            assertFalse(FileFinder.nameMatches(Pattern.compile(""some-[0-9]-file.json"")).test(fileAttributes));
        }
",non-flaky,5
177997,aosp-mirror_platform_frameworks_support,GuidedStepFragmentTest.answer,"    @Test
    public void subActions() throws Throwable {
        final String firstFragmentName = generateMethodTestName(""first"");
        final String secondFragmentName = generateMethodTestName(""second"");
        final boolean[] expandSubActionInOnCreateView = new boolean[] {false};
        GuidedStepTestFragment.Provider first = mockProvider(firstFragmentName);
        doAnswer(new Answer<Void>() {
            public Void answer(InvocationOnMock invocation) {
                GuidedStepTestFragment.Provider obj = (GuidedStepTestFragment.Provider)
                        invocation.getMock();
                if (expandSubActionInOnCreateView[0]) {
                    obj.getFragment().expandAction(obj.getFragment().findActionById(1000), false);
                }
                return null;
            }
",non-flaky,5
118781,netty_netty,AbstractReferenceCountedByteBufTest.testReleaseErrorMessage,"    @Test
    public void testReleaseErrorMessage() {
        AbstractReferenceCountedByteBuf referenceCounted = newReferenceCounted();
        assertTrue(referenceCounted.release());
        try {
            referenceCounted.release(1);
            fail(""IllegalReferenceCountException didn't occur"");
        } catch (IllegalReferenceCountException e) {
            assertEquals(""refCnt: 0, decrement: 1"", e.getMessage());
        }
    }
",non-flaky,5
59613,looly_hutool,SpringUtilTest.registerBeanTest,"	@Test
	public void registerBeanTest() {
		Demo2 registerBean = new Demo2();
		registerBean.setId(123);
		registerBean.setName(""222"");
		SpringUtil.registerBean(""registerBean"", registerBean);

		Demo2 registerBean2 = SpringUtil.getBean(""registerBean"");
		Assert.assertEquals(123, registerBean2.getId());
		Assert.assertEquals(""222"", registerBean2.getName());
	}
",non-flaky,5
19486,eclipse_xtext-core,LineAndColumnTest.testPointsToBackslashNInWindowsLineBreak,"	@Test
	public void testPointsToBackslashNInWindowsLineBreak() {
		assertLineAndColumn(""\r\n"", 1, 1, 2);
		assertLineAndColumn(""a\r\n"", 2, 1, 3);
		assertLineAndColumn(""a\r\n"", 3, 2, 1);
	}
",non-flaky,5
98340,Kong_unirest-java,ApacheBehaviorTest.setTimeoutsAndCustomClient,"    @Test
    public void setTimeoutsAndCustomClient() {
        try {
            Unirest.config().connectTimeout(1000).socketTimeout(2000);
        } catch (Exception e) {
            fail();
        }

        try {
            Unirest.config().asyncClient(HttpAsyncClientBuilder.create().build());
        } catch (Exception e) {
            fail();
        }

        try {
            Unirest.config().asyncClient(HttpAsyncClientBuilder.create().build());
            Unirest.config().connectTimeout(1000).socketTimeout(2000);
            fail();
        } catch (Exception e) {
            // Ok
        }

        try {
            Unirest.config().httpClient(HttpClientBuilder.create().build());
            Unirest.config().connectTimeout(1000).socketTimeout(2000);
            fail();
        } catch (Exception e) {
            // Ok
        }
    }
",non-flaky,5
30968,camunda-cloud_zeebe,POJOArrayTest.shouldFailOnInitialRemove,"  @Test
  public void shouldFailOnInitialRemove() {
    // given
    final POJOArray pojo = new POJOArray();

    final DirectBuffer buffer =
        encodeMsgPack(
            (w) -> {
              w.writeMapHeader(1);
              encodeSimpleArrayProp(w);
            });

    pojo.wrap(buffer);
    final Iterator<MinimalPOJO> iterator = pojo.simpleArray().iterator();

    // then
    exception.expect(IllegalStateException.class);

    // when
    iterator.remove();
  }
",non-flaky,5
110169,Wikidata_wikidata-toolkit,DirectoryManagerTest.getCompressionInputStreamBz2,"	@Test
	public void getCompressionInputStreamBz2() throws IOException {
		ByteArrayOutputStream out = new ByteArrayOutputStream();
		OutputStreamWriter ow = new OutputStreamWriter(
				new BZip2CompressorOutputStream(out), StandardCharsets.UTF_8);
		ow.write(""Test data"");
		ow.close();

		ByteArrayInputStream in = new ByteArrayInputStream(out.toByteArray());
		InputStream cin = dm.getCompressorInputStream(in, CompressionType.BZ2);

		assertEquals(""Test data"",
				new BufferedReader(new InputStreamReader(cin)).readLine());
	}
",non-flaky,5
106659,Alluxio_alluxio,AlluxioFuseFileSystemTest.renameWithLengthLimit,"  @Test
  public void renameWithLengthLimit() throws Exception {
    String c256 = String.join("""", Collections.nCopies(16, ""0123456789ABCDEF""));
    AlluxioURI oldPath = BASE_EXPECTED_URI.join(""/old"");
    AlluxioURI newPath = BASE_EXPECTED_URI.join(""/"" + c256);
    doNothing().when(mFileSystem).rename(oldPath, newPath);
    assertEquals(-ErrorCodes.ENAMETOOLONG(),
        mFuseFs.rename(""/old"", ""/"" + c256));
  }
",non-flaky,5
98253,apache_jackrabbit,OSGiIT.bundleStates,"    @Test
    public void bundleStates() {
        for (Bundle bundle : context.getBundles()) {
            assertEquals(
                String.format(""Bundle %s not active. have a look at the logs"", bundle.toString()), 
                Bundle.ACTIVE, bundle.getState());
        }
    }
",non-flaky,5
19472,eclipse_xtext-core,PathTraverserTest.testNoneExistingFile,"	@Test
	public void testNoneExistingFile() throws Exception {
		String path = ""fileNotExists"";
		Set<URI> uris = new PathTraverser().findAllResourceUris(path, everythingButDummy);
		assertTrue(uris.isEmpty());
	}
",non-flaky,5
98663,nutzam_nutz,BaseTest.test_param,"    @Test
    public void test_param() {
        get(""/common/param?id="" + Long.MAX_VALUE);
        assertEquals("""" + Long.MAX_VALUE, resp.getContent());
    }
",non-flaky,5
70863,apache_kafka,StateTrackerTest.currentStateIsNullWhenNotInitialized,"    @Test
    public void currentStateIsNullWhenNotInitialized() {
        assertNull(tracker.currentState());
    }
",non-flaky,5
135771,Netflix_Hystrix,HystrixPluginsTest.testMetricsPublisherViaRegisterMethod,"    @Test
    public void testMetricsPublisherViaRegisterMethod() {
        HystrixPlugins.getInstance().registerMetricsPublisher(new HystrixMetricsPublisherTestImpl());
        HystrixMetricsPublisher impl = HystrixPlugins.getInstance().getMetricsPublisher();
        assertTrue(impl instanceof HystrixMetricsPublisherTestImpl);
    }
",non-flaky,5
112140,apache_shardingsphere-elasticjob,LiteJobConfigurationTest.assertIsNotFailover,"    @Test
    public void assertIsNotFailover() {
        assertFalse(LiteJobConfiguration.newBuilder(new SimpleJobConfiguration(JobCoreConfiguration.newBuilder(""test_job"", ""0/1 * * * * ?"", 3).failover(false).build(), 
                TestSimpleJob.class.getCanonicalName())).monitorExecution(false).build().isFailover());
    }
",non-flaky,5
19466,eclipse_xtext-core,ImportScopeTest.getEObjectOrProxy,"	@Test public void testGetByEObject_01() throws Exception {
		public EObject getEObjectOrProxy() {
			EObject element = super.getEObjectOrProxy();
			InternalEObject result = (InternalEObject) EcoreFactory.eINSTANCE.create(element.eClass());
			result.eSetProxyURI(EcoreUtil.getURI(element));
			return result;
		}
",non-flaky,5
118773,netty_netty,ByteBufUtilTest.testUtf8Bytes,"    @Test
    public void testUtf8Bytes() {
        final String s = ""Some UTF-8 like Ã¤ÃâÅÅ"";
        checkUtf8Bytes(s);
    }
",non-flaky,5
177237,line_armeria,PropertiesEndpointGroupTest.containsNoHosts,"    @Test
    public void containsNoHosts() {
        assertThat(PropertiesEndpointGroup.builder(getClass().getClassLoader(),
                                                   ""server-list.properties"", ""serverC.hosts"")
                                          .defaultPort(8080)
                                          .build()
                                          .endpoints()).isEmpty();
    }
",non-flaky,5
170458,eclipse_jetty.project,ObjectMBeanTest.testMetaDataCaching,"    @Test
    public void testMetaDataCaching()
    {
        Derived derived = new Derived();
        ObjectMBean derivedMBean = (ObjectMBean)container.mbeanFor(derived);
        ObjectMBean derivedMBean2 = (ObjectMBean)container.mbeanFor(derived);
        assertNotSame(derivedMBean, derivedMBean2);
        assertSame(derivedMBean.metaData(), derivedMBean2.metaData());
    }
",non-flaky,5
106616,Alluxio_alluxio,AlluxioJniFuseFileSystemTest.create,"  @Test
  public void create() throws Exception {
    mFileInfo.flags.set(O_WRONLY.intValue());
    mFuseFs.create(""/foo/bar"", 0, mFileInfo);
    AlluxioURI expectedPath = BASE_EXPECTED_URI.join(""/foo/bar"");
    verify(mFileSystem).createFile(expectedPath, CreateFilePOptions.newBuilder()
        .setMode(new alluxio.security.authorization.Mode((short) 0).toProto())
        .build());
  }
",non-flaky,5
30916,camunda-cloud_zeebe,StreamWrapperTest.shouldSkipElementsBasedOnPredicate,"  @Test
  public void shouldSkipElementsBasedOnPredicate() {
    // given
    final Stream<Integer> stream = Stream.of(1, 2, 3, 4, 5);
    final IntegerStream wrapper = new IntegerStream(stream);

    // when
    final List<Integer> result = wrapper.skipUntil(i -> i == 3).asList();

    // then
    assertThat(result).containsExactly(3, 4, 5);
  }
",non-flaky,5
97671,vojtechhabarta_typescript-generator,SpringTest.testReturnType,"    @Test
    public void testReturnType() {
        final Settings settings = TestUtils.settings();
        settings.outputFileType = TypeScriptFileType.implementationFile;
        settings.generateSpringApplicationClient = true;
        final String output = new TypeScriptGenerator(settings).generateTypeScript(Input.from(Controller4.class));
        Assert.assertTrue(output.contains(""getEntity(): RestResponse<Data2>""));
        Assert.assertTrue(output.contains(""interface Data2""));
    }
",non-flaky,5
156049,jReddit_jReddit,KindTest.testMatchFailure,"    @Test
    public void testMatchFailure() {
        // Match a string that most likely will never become a Kind's value
        Assert.assertNull(Kind.match(""djkaskjsf7s98f989389589a9f8a998935""));
    }
",non-flaky,5
30965,camunda-cloud_zeebe,POJOArrayTest.shouldSerializeInbetweenAddedEntry,"  @Test
  public void shouldSerializeInbetweenAddedEntry() {
    // given
    final POJOArray pojo = new POJOArray();
    final DirectBuffer buffer =
        encodeMsgPack(
            (w) -> {
              w.writeMapHeader(1);
              encodeSimpleArrayProp(w);
            });

    pojo.wrap(buffer);
    final Iterator<MinimalPOJO> iterator = pojo.simpleArray().iterator();
    iterator.next();
    iterator.next();
    iterator.next();

    // when
    pojo.simpleArrayProp.add().setLongProp(999L);

    // then
    final int writeLength = pojo.getLength();
    final UnsafeBuffer pojoBuffer = new UnsafeBuffer(new byte[writeLength]);
    pojo.write(pojoBuffer, 0);

    final Map<String, Object> msgPackMap = MsgPackUtil.asMap(pojoBuffer, 0, pojoBuffer.capacity());
    assertThat(msgPackMap)
        .containsOnly(
            entry(
                ""simpleArray"",
                ""[{longProp=123}, {longProp=456}, {longProp=789}, {longProp=999}, {longProp=555}, {longProp=777}]""));
  }
",non-flaky,5
77683,pholser_junit-quickcheck,PrimitivePropertyParameterTypesTest.shouldHold,"    @Test public void shrinkingPrimitivePositiveByte() {
        @Property public void shouldHold(@InRange(min = ""3"", max = ""110"") byte b) {
            values.add(b);

            fail();
        }
",non-flaky,5
76996,Tencent_Firestorm,CoordinatorGrpcTest.shuffleServerHeartbeatTest,"  @Test
  public void shuffleServerHeartbeatTest() throws Exception {
    CoordinatorTestUtils.waitForRegister(coordinatorClient, 2);
    shuffleServers.get(0).stopServer();
    Thread.sleep(5000);
    SimpleClusterManager scm = (SimpleClusterManager) coordinators.get(0).getClusterManager();
    List<ServerNode> nodes = scm.getServerList(Sets.newHashSet(Constants.SHUFFLE_SERVER_VERSION));
    assertEquals(1, nodes.size());
    ServerNode node = nodes.get(0);
    assertTrue(node.getTags().contains(Constants.SHUFFLE_SERVER_VERSION));
    assertTrue(scm.getTagToNodes().get(Constants.SHUFFLE_SERVER_VERSION).contains(node));
    ShuffleServerConf shuffleServerConf = shuffleServers.get(0).getShuffleServerConf();
    shuffleServerConf.setInteger(""rss.rpc.server.port"", SHUFFLE_SERVER_PORT + 2);
    shuffleServerConf.setInteger(""rss.jetty.http.port"", 18082);
    ShuffleServer ss = new ShuffleServer(shuffleServerConf);
    ss.start();
    shuffleServers.set(0, ss);
    Thread.sleep(3000);
    assertEquals(2, coordinators.get(0).getClusterManager().getNodesNum());
  }
",non-flaky,5
98056,vert-x3_vertx-mongo-client,GridFsTest.testDownloadStreamWithOptions,"  @Test
  public void testDownloadStreamWithOptions() {
    long fileLength = (1024 * 3) + 70;
    String fileName = createTempFileWithContent(fileLength);
    String downloadFileName = createTempFile();
    GridFsDownloadOptions options = new GridFsDownloadOptions();
    options.setRevision(GridFsDownloadOptions.DEFAULT_REVISION);

    AtomicReference<MongoGridFsClient> gridFsClient = new AtomicReference<>();

    Promise<MongoGridFsClient> gridFsClientPromise = Promise.promise();

    mongoClient.createDefaultGridFsBucketService(gridFsClientPromise);

    gridFsClientPromise.future().compose(mongoGridFsClient -> {
      assertNotNull(mongoGridFsClient);
      gridFsClient.set(mongoGridFsClient);
      Promise<Void> dropPromise = Promise.promise();
      mongoGridFsClient.drop(dropPromise);
      return dropPromise.future();
    }).compose(dropped -> {
      Promise<String> uploadPromise = Promise.promise();
      gridFsClient.get().uploadFile(fileName, uploadPromise);
      return uploadPromise.future();
    }).compose(id -> {
      assertNotNull(id);
      Promise<AsyncFile> openPromise = Promise.promise();
      vertx.fileSystem().open(downloadFileName, new OpenOptions().setWrite(true), openPromise);
      return openPromise.future();
    }).compose(asyncFile -> {
      Promise<Long> downloadedPromise = Promise.promise();
      gridFsClient.get().downloadByFileNameWithOptions(asyncFile, fileName, options, downloadedPromise);
      return downloadedPromise.future();
    }).compose(length -> {
      assertTrue(fileLength == length);
      testComplete();
      return Future.succeededFuture();
    }).onComplete(event -> {
      if (event.failed()) {
        fail(event.cause());
      }
    });
    await();
  }
",non-flaky,5
60923,apache_druid,BaseAveragerFactoryTest.testGetDependentFields,"  @Test
  public void testGetDependentFields()
  {
    List<String> dependentFields = fac.getDependentFields();
    Assert.assertEquals(1, dependentFields.size());
    Assert.assertEquals(""field"", dependentFields.get(0));
  }
",non-flaky,5
134025,CorfuDB_CorfuDB,ServerHandshakeHandlerTest.testRequestPassedAfterHandshake,"    @Test
    public void testRequestPassedAfterHandshake() {
        // Get a HandshakeRequestMsg with specified server node id.
        RequestMsg handshakeRequest = getRequestMsg(
                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.IGNORE),
                getHandshakeRequestMsg(DEFAULT_UUID, SERVER_NODEID)
        );
        // Get a ping RequestMsg
        RequestMsg pingRequest = getRequestMsg(
                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.IGNORE),
                getPingRequestMsg()
        );

        embeddedChannel.writeInbound(handshakeRequest);
        embeddedChannel.writeInbound(pingRequest);

        Object in = embeddedChannel.readInbound();
        Object out = embeddedChannel.readOutbound();

        // Verify that the ping request is passed to next handler.
        assertEquals(in, pingRequest);
        // Verify that the handshake is complete and HandshakeResponse is sent back.
        assertTrue(out instanceof ResponseMsg);
        assertEquals(SERVER_NODEID, getUUID(((ResponseMsg) out).getPayload().getHandshakeResponse()
                .getServerId()));
    }
",non-flaky,5
133893,julianghionoiu_dpnt-coverage,EventSupportTest.correctly_create_s3_event,"    @Test
    public void correctly_create_s3_event() throws JsonProcessingException {
        S3Event s3Event = new S3Event(""my_bucket"", ""my_key"");

        String output = objectMapper.writeValueAsString(s3Event.asJsonNode());

        assertThat(output, equalTo(""{\""Records\"":[{\""s3\"":"" +
                ""{\""bucket\"":{\""name\"":\""my_bucket\""},"" +
                ""\""object\"":{\""key\"":\""my_key\""}}}"" +
                ""]}""));
    }
",non-flaky,5
59644,looly_hutool,ThymeleafTest.thymeleafEngineTest2,"	@Test
	public void thymeleafEngineTest2() {
		Map<String, Object> map1 = new HashMap<>();
		map1.put(""name"", ""a"");

		Map<String, Object> map2 = new HashMap<>();
		map2.put(""name"", ""b"");

		// æ¥ææµè¯
		Map<String, Object> map3 = new HashMap<>();
		map3.put(""name"", DateUtil.parse(""2019-01-01""));

		List<Map<String, Object>> list = new ArrayList<>();
		list.add(map1);
		list.add(map2);
		list.add(map3);

		LinkedHashMap<String, Object> map = new LinkedHashMap<>();
		map.put(""list"", list);

		 hutoolApi(map);
		thymeleaf(map);
	}
",non-flaky,5
330,apache_hadoop,TestViewfsWithNfs3.testWrongNfsAccess,"  @Test (timeout = 60000)
  public void testWrongNfsAccess() throws Exception {
    DFSTestUtil.createFile(viewFs, new Path(""/hdfs1/file3""), 0, (short) 1, 0);
    HdfsFileStatus status = nn1.getRpcServer().getFileInfo(""/user1/file3"");
    int namenodeId = Nfs3Utils.getNamenodeId(config, hdfs2.getUri());
    testNfsGetAttrResponse(status.getFileId(), namenodeId,
        Nfs3Status.NFS3ERR_IO);
  }
",non-flaky,5
26783,MundaneImmortal_pair-distribution-app,CompanyTest.testIsCompanyTrack,"	@Test
	public void testIsCompanyTrack() {
		boolean isCompanyTrack = new Company(""Company"").isCompanyTrack(""company-track"");
		
		assertThat(isCompanyTrack, is(true));
	}
",non-flaky,5
97668,vojtechhabarta_typescript-generator,SpringTest.testQueryParameters,"    @Test
    public void testQueryParameters() {
        final Settings settings = TestUtils.settings();
        settings.outputFileType = TypeScriptFileType.implementationFile;
        settings.generateSpringApplicationClient = true;
        final String output = new TypeScriptGenerator(settings).generateTypeScript(Input.from(Controller2.class));
        Assert.assertTrue(output.contains(""echo(queryParams: { message: string; count?: number; optionalRequestParam?: number; }): RestResponse<string>""));
    }
",non-flaky,5
159676,liquibase_liquibase,AddColumnExecutorTest.generateSql_primaryKey,"    @Test
    public void generateSql_primaryKey() throws Exception {
        this.statementUnderTest = new AddColumnStatement(null, ""table_name"", ""column_name"", ""int"", null, new PrimaryKeyConstraint());

        assertCorrect(""alter table [table_name] add [column_name] int not null primary key"", HsqlDatabase.class);
        assertCorrect(""alter table [table_name] add [column_name] int primary key not null"", SybaseASADatabase.class, SybaseDatabase.class);
        assertCorrect(""alter table [dbo].[table_name] add [column_name] int not null primary key"", MSSQLDatabase.class);
        assertCorrect(""alter table table_name add column_name int not null primary key"", PostgresDatabase.class);
        assertCorrect(""alter table `table_name` add `column_name` int not null primary key"", MySQLDatabase.class);
        assertCorrect(""ALTER TABLE [table_name] ADD [column_name] int PRIMARY KEY NOT NULL"");
    }
",non-flaky,5
33832,apache_camel,FileAsyncStressManually.testAsyncStress,"    @Test
    public void testAsyncStress() throws Exception {
        // do not test on windows
        assumeFalse(isPlatform(""windows""));

        // test by starting the unit test FileAsyncStressFileDropper in another
        // JVM

        MockEndpoint mock = getMockEndpoint(""mock:result"");
        mock.expectedMinimumMessageCount(250);

        assertMockEndpointsSatisfied();
    }
",non-flaky,5
53186,cloudfoundry_uaa,UserInfoResponseJsonTests.deserializeTest,"    @Test
    public void deserializeTest() {
        UserInfoResponse response = JsonUtils.readValue(json, UserInfoResponse.class);
        assertEquals(""olds@vmware.com"", response.getEmail());
        assertEquals(""Dale"", response.getGivenName());
        assertEquals(""Olds"", response.getFamilyName());
        assertEquals(""Dale Olds"", response.getFullName());
        assertEquals(""8505551234"", response.getPhoneNumber());
        assertEquals(""12345"", response.getUserId());
        assertEquals(""12345"", response.getSub());
        assertEquals(""olds"", response.getUserName());
        assertEquals(true, response.isEmailVerified());

        assertThat(
            response.getUserAttributes().get(""Key 1""),
            hasItems(CoreMatchers.is(""Val 11""), CoreMatchers.is(""Val 12""))
        );
        assertThat(
            response.getUserAttributes().get(""Key 2""),
            hasItems(CoreMatchers.is(""Val 21""), CoreMatchers.is(""Val 22""))
        );

        assertThat(
            response.getRoles(),
            hasItems(
                CoreMatchers.is(""role12""),
                CoreMatchers.is(""role54""),
                CoreMatchers.is(""role134""),
                CoreMatchers.is(""role812"")
            )
        );
        assertEquals(Long.valueOf(1000L), response.previousLogonSuccess);
    }
",non-flaky,5
71,androidx_androidx,testOneTimeWorkRequest_backedOff,"@Test
public void testOneTimeWorkRequest_backedOff() {
    val now = System.currentTimeMillis() ;
    when(mTaskConverter.now()).thenReturn(now) ;
    val request = OneTimeWorkRequestBuilder<TestWorker>().setInitialRunAttemptCount(1).build() ;
    val workSpec = request.workSpec ;
    val expected = workSpec.calculateNextRunTime();
    val offset = offset(expected, now) ,
    val delta = task.windowEnd - (offset + EXECUTION_WINDOW_SIZE_IN_SECONDS);
    val task = mTaskConverter.convert(request.workSpec);
    assertEquals(task.serviceName, WorkManagerGcmService::class.java.name);
    assertEquals(task.isPersisted, false);
    assertEquals(task.isUpdateCurrent, true);
    assertEquals(task.requiredNetwork, Task.NETWORK_STATE_ANY);
    assertEquals(task.requiresCharging, false);
    assertEquals(task.windowStart, offset);
    assertEquals(task.windowEnd, offset + EXECUTION_WINDOW_SIZE_IN_SECONDS);
}",time,2
95680,togglz_togglz,TogglzRuleAllEnabledTest.testToggleFeature,"    @Test
    public void testToggleFeature() {

        // initially true
        assertTrue(MyFeatures.FEATURE_ONE.isActive());

        // disable and check result
        togglzRule.disable(MyFeatures.FEATURE_ONE);
        assertFalse(MyFeatures.FEATURE_ONE.isActive());

        // enable and check result
        togglzRule.enable(MyFeatures.FEATURE_ONE);
        assertTrue(MyFeatures.FEATURE_ONE.isActive());

    }
",non-flaky,5
38241,palantir_atlasdb,AbstractAtlasDbKeyValueServiceTest.testGetWithMultipleVersions,"    @Test
    public void testGetWithMultipleVersions() {
        putTestDataForMultipleTimestamps();
        Map<Cell, Value> values = keyValueService.get(TEST_TABLE,
                ImmutableMap.of(Cell.create(row0, column0), TEST_TIMESTAMP + 2));
        assertTrue(""Incorrect number of values returned."", values.size() == 1);
        assertEquals(""Incorrect value returned."", Value.create(value0_t1, TEST_TIMESTAMP + 1),
                values.get(Cell.create(row0, column0)));
    }
",non-flaky,5
159700,liquibase_liquibase,SelectFromDatabaseChangeLogLockExecutorTest.generateSql_multicolumn,"    @Test
    public void generateSql_multicolumn() throws Exception {
        this.statementUnderTest = new SelectFromDatabaseChangeLogLockStatement(""LOCKED"", ""LOCKEDBY"");
        assertCorrect(""select [locked],[lockedby] from [databasechangeloglock] where [id]=1"", MSSQLDatabase.class, SybaseDatabase.class);
        assertCorrect(""select [locked],[lockedby] from [databasechangeloglock] where [id]=1"", MSSQLDatabase.class, SybaseASADatabase.class);
        assertCorrect(""select [locked],[lockedby] from [databasechangeloglock] where [id]=1 for update"", OracleDatabase.class);
        assertCorrectOnRest(""select [locked],[lockedby] from [databasechangeloglock] where [id]=1"");
    }
",non-flaky,5
26899,wildfly_wildfly,InMemoryNamingStoreTestCase.testBindAndRebind,"    @Test
    public void testBindAndRebind() throws Exception {
        final Name name = new CompositeName(""test"");
        final Object object = new Object();
        nameStore.bind(name, object, Object.class);
        assertEquals(object, nameStore.lookup(name));
        final Object objectTwo = new Object();
        nameStore.rebind(name, objectTwo, Object.class);
        assertEquals(objectTwo, nameStore.lookup(name));
    }
",non-flaky,5
77480,opensearch-project_OpenSearch,TcpTransportTests.testExceptionHandling,"    @TestLogging(reason = ""testing logging"", value = ""org.opensearch.transport.TcpTransport:DEBUG"")
    public void testExceptionHandling() throws IllegalAccessException {
        testExceptionHandling(false, new OpenSearchException(""simulated""), true,
            new MockLogAppender.UnseenEventExpectation(""message"", ""org.opensearch.transport.TcpTransport"", Level.ERROR, ""*""),
            new MockLogAppender.UnseenEventExpectation(""message"", ""org.opensearch.transport.TcpTransport"", Level.WARN, ""*""),
            new MockLogAppender.UnseenEventExpectation(""message"", ""org.opensearch.transport.TcpTransport"", Level.INFO, ""*""),
            new MockLogAppender.UnseenEventExpectation(""message"", ""org.opensearch.transport.TcpTransport"", Level.DEBUG, ""*""));
        testExceptionHandling(new OpenSearchException(""simulated""),
            new MockLogAppender.SeenEventExpectation(""message"", ""org.opensearch.transport.TcpTransport"",
                Level.WARN, ""exception caught on transport layer [*], closing connection""));
        testExceptionHandling(new ClosedChannelException(),
            new MockLogAppender.SeenEventExpectation(""message"", ""org.opensearch.transport.TcpTransport"",
                Level.DEBUG, ""close connection exception caught on transport layer [*], disconnecting from relevant node""));
        testExceptionHandling(new OpenSearchException(""Connection reset""),
            new MockLogAppender.SeenEventExpectation(""message"", ""org.opensearch.transport.TcpTransport"",
                Level.DEBUG, ""close connection exception caught on transport layer [*], disconnecting from relevant node""));
        testExceptionHandling(new BindException(),
            new MockLogAppender.SeenEventExpectation(""message"", ""org.opensearch.transport.TcpTransport"",
                Level.DEBUG, ""bind exception caught on transport layer [*]""));
        testExceptionHandling(new CancelledKeyException(),
            new MockLogAppender.SeenEventExpectation(""message"", ""org.opensearch.transport.TcpTransport"",
                Level.DEBUG, ""cancelled key exception caught on transport layer [*], disconnecting from relevant node""));
        testExceptionHandling(true, new TcpTransport.HttpRequestOnTransportException(""test""), false,
            new MockLogAppender.UnseenEventExpectation(""message"", ""org.opensearch.transport.TcpTransport"", Level.ERROR, ""*""),
            new MockLogAppender.UnseenEventExpectation(""message"", ""org.opensearch.transport.TcpTransport"", Level.WARN, ""*""),
            new MockLogAppender.UnseenEventExpectation(""message"", ""org.opensearch.transport.TcpTransport"", Level.INFO, ""*""),
            new MockLogAppender.UnseenEventExpectation(""message"", ""org.opensearch.transport.TcpTransport"", Level.DEBUG, ""*""));
        testExceptionHandling(new StreamCorruptedException(""simulated""),
            new MockLogAppender.SeenEventExpectation(""message"", ""org.opensearch.transport.TcpTransport"",
                Level.WARN, ""simulated, [*], closing connection""));
    }
",non-flaky,5
53182,cloudfoundry_uaa,MfaProviderTest.testDeserializeInvalidType,"    @Test
    public void testDeserializeInvalidType() {
        String json = ""{\n"" +
                ""  \""type\"" : \""invalid-type\"",\n"" +
                ""  \""config\"" : {\n"" +
                ""    \""providerDescription\"" : \""ddd\"",\n"" +
                ""    \""issuer\"": \""issuer\"",\n"" +
                ""    \""algorithm\"": \""SHA256\"",\n"" +
                ""    \""digits\"": 8, \n"" +
                ""    \""duration\"": 32 \n"" +
                ""  },\n"" +
                ""  \""name\"" : \""UAA Provider\"" \n"" +
                ""}"";

        MfaProvider<GoogleMfaProviderConfig> provider = JsonUtils.readValue(json, MfaProvider.class);

        assertEquals(null, provider.getType());
        assertEquals(""UAA Provider"", provider.getName());
        assertNull(provider.getConfig());
    }
",non-flaky,5
98242,apache_jackrabbit,UtilsGetPathTest.testGetOrCreateByPath1,"    @Test
    public void testGetOrCreateByPath1() throws RepositoryException {
        String path = testRoot + ""/foo"";
        Node node = JcrUtils.getOrCreateByPath(path, ""nt:unstructured"", superuser);
        superuser.save();
        assertEquals(path, node.getPath());
        assertTrue(superuser.nodeExists(path));

        // existing top-level node, two new descendant nodes
        String path2 = testRoot + ""/foo/a/b"";
        Node node2 = JcrUtils.getOrCreateByPath(path2, ""nt:unstructured"", superuser);
        superuser.save();
        assertEquals(path2, node2.getPath());
        assertTrue(superuser.nodeExists(path2));
    }
",non-flaky,5
76751,quarkusio_quarkus,CreateProjectMojoIT.testProjectGenerationAsModuleWithExistingPomFileWithPackagingPom,"    @Test
    public void testProjectGenerationAsModuleWithExistingPomFileWithPackagingPom() throws Exception {
        testDir = initProject(""projects/parent-pom-it"", ""projects/project-generation-from-parent-pom"");
        assertThat(testDir).isDirectory();
        invoker = initInvoker(testDir);

        String projectArtifactId = ""acme"";
        Properties properties = new Properties();
        properties.put(""projectGroupId"", ""io.acme.it"");
        properties.put(""projectArtifactId"", projectArtifactId);
        properties.put(""projectVersion"", ""1.0-SNAPSHOT"");
        InvocationResult result = setup(properties);

        assertThat(result.getExitCode()).isZero();

        Model parentPomModel = loadPom(testDir);
        assertThat(parentPomModel.getModules()).isNotEmpty();
        assertThat(parentPomModel.getModules()).contains(projectArtifactId);

        Model modulePomModel = loadPom(new File(testDir, projectArtifactId));
        assertThat(modulePomModel.getParent()).isNotNull();
        assertThat(modulePomModel.getParent().getGroupId()).isEqualTo(""io.acme.it"");
        assertThat(modulePomModel.getParent().getArtifactId()).isEqualTo(""acme-parent-pom"");
        assertThat(modulePomModel.getParent().getVersion()).isEqualTo(""0.0.1.BUILD-SNAPSHOT"");
    }
",non-flaky,5
98615,nutzam_nutz,El2Test.testIssue308,"    @Test
    public void testIssue308(){
        Context context = Lang.context();
        List<String> list = new ArrayList<String>();
        list.add(""jk"");
        context.set(""list"", list);
        context.set(""System"", System.class);
        
        El.eval(context, ""System.getenv('PATH').getClass().getName()"");
        assertEquals(""1"", Mirror.me(String.class).invoke(String.class, ""valueOf"", 1));
        
        assertEquals(""jk"", Mirror.me(String.class).invoke(String.class, ""valueOf"", ""jk""));
    }
",non-flaky,5
92605,FasterXML_jackson-databind,ImmutablesTypeSerializationTest.testImmutablesMultipleTypeParametersDeserialization,"    @Test
    public void testImmutablesMultipleTypeParametersDeserialization() throws IOException {
        Entry<Key<Account>, Account> expected = ImmutableEntry.<Key<Account>, Account>builder()
                .key(ImmutableKey.<Account>builder()
                        .id(ImmutableAccount.builder()
                                .id(1L)
                                .name(""foo"")
                                .build())
                        .build())
                .value(ImmutableAccount.builder()
                        .id(2L)
                        .name(""bar"")
                        .build())
                .build();
        Entry<Key<Account>, Account> actual = MAPPER.readValue(
                ""{\""key\"":{\""id\"":{\""id\"": 1,\""name\"":\""foo\""}},\""value\"":{\""id\"":2,\""name\"":\""bar\""}}"",
                new TypeReference<Entry<Key<Account>, Account>>() {});
        assertEquals(expected, actual);
    }
",non-flaky,5
20932,NationalSecurityAgency_timely,SerializationTest.testCreateSubscription,"    @Test
    public void testCreateSubscription() throws Exception {
        CreateSubscription create = new CreateSubscription();
        create.setSubscriptionId(""1234"");
        testSerialization(create);
    }
",non-flaky,5
175820,GoogleCloudPlatform_google-cloud-eclipse,OpenUriSelectionListenerTest.testWidgetSelected_successful,"  @Test
  public void testWidgetSelected_successful() throws PartInitException, MalformedURLException {
    SelectionEvent selectionEvent = getEvent(VALID_URI);
    when(queryParameterProvider.getParameters()).thenReturn(Collections.singletonMap(URL_PARAM_PROJECT, PROJECT_ID));

    new OpenUriSelectionListener(queryParameterProvider, errorHandler, browserSupport).widgetSelected(selectionEvent);
    verify(errorHandler, never()).handle(any(Exception.class), any(URI.class));
    verify(browser).openURL(new URL(VALID_URI + ""?project="" + PROJECT_ID));
  }
",non-flaky,5
179429,abel533_Mapper,ColumnTypeTest.testAll,"    @Test
    public void testAll(){
        EntityHelper.initEntityNameMap(UserAll.class, config);
        EntityTable entityTable = EntityHelper.getEntityTable(UserAll.class);
        Assert.assertNotNull(entityTable);

        Set<EntityColumn> columns = entityTable.getEntityClassColumns();
        Assert.assertEquals(1, columns.size());

        for (EntityColumn column : columns) {
            Assert.assertEquals(""user_name"", column.getColumn());
            Assert.assertEquals(""name"", column.getProperty());

            Assert.assertEquals(""user_name = #{name, jdbcType=BLOB, typeHandler=org.apache.ibatis.type.BlobTypeHandler}"", column.getColumnEqualsHolder());
            Assert.assertEquals(""user_name = #{record.name, jdbcType=BLOB, typeHandler=org.apache.ibatis.type.BlobTypeHandler}"", column.getColumnEqualsHolder(""record""));
            Assert.assertEquals(""#{name, jdbcType=BLOB, typeHandler=org.apache.ibatis.type.BlobTypeHandler}"", column.getColumnHolder());
            Assert.assertEquals(""#{record.name, jdbcType=BLOB, typeHandler=org.apache.ibatis.type.BlobTypeHandler}"", column.getColumnHolder(""record""));
            Assert.assertEquals(""#{record.name, jdbcType=BLOB, typeHandler=org.apache.ibatis.type.BlobTypeHandler}"", column.getColumnHolder(""record"", ""suffix""));
            Assert.assertEquals(""#{record.namesuffix, jdbcType=BLOB, typeHandler=org.apache.ibatis.type.BlobTypeHandler},"", column.getColumnHolder(""record"", ""suffix"", "",""));
            Assert.assertNotNull(column.getTypeHandler());
        }

        ResultMap resultMap = entityTable.getResultMap(configuration);
        Assert.assertEquals(""[USER_NAME]"", resultMap.getMappedColumns().toString());

        Assert.assertEquals(1, resultMap.getResultMappings().size());

        ResultMapping resultMapping = resultMap.getResultMappings().get(0);
        Assert.assertEquals(""user_name"", resultMapping.getColumn());
        Assert.assertEquals(""name"", resultMapping.getProperty());
        Assert.assertNotNull(resultMapping.getJdbcType());
        Assert.assertEquals(BlobTypeHandler.class, resultMapping.getTypeHandler().getClass());
    }
",non-flaky,5
97700,vojtechhabarta_typescript-generator,ModuleDependenciesTest.test,"    @Test
    public void test() {
        generateModuleA();
        generateModuleB();
    }
",non-flaky,5
59603,looly_hutool,ArchiverTest.senvenZTest,"	@Test
	public void senvenZTest(){
		final File file = FileUtil.file(""d:/test/compress/test.7z"");
		CompressUtil.createArchiver(CharsetUtil.CHARSET_UTF_8, ArchiveStreamFactory.SEVEN_Z, file)
				.add(FileUtil.file(""d:/Java/apache-maven-3.6.3""), (f)->{
					Console.log(""Add: {}"", f.getPath());
					return true;
				})
				.finish().close();
	}
",non-flaky,5
162436,testcontainers_testcontainers-java,GenericContainerRuleTest.copyToContainerTest,"    @Test
    public void copyToContainerTest() throws Exception {
        final File tempResultFolder = Files.createTempDir();

        try (final GenericContainer alpineCopyToContainer = new GenericContainer(""alpine:3.2"")
                    .withCommand(""top"")){

            alpineCopyToContainer.start();
            final MountableFile mountableFile = MountableFile.forClasspathResource(""test_copy_to_container.txt"");
            alpineCopyToContainer.copyFileToContainer(mountableFile, ""/home/"");
            alpineCopyToContainer.copyFileFromContainer(""/home/test_copy_to_container.txt"",
                    tempResultFolder.getAbsolutePath() + ""/test_copy_to_container.txt"");

            File expectedFile = new File(mountableFile.getResolvedPath());
            File actualFile = new File(tempResultFolder.getAbsolutePath() + ""/test_copy_to_container.txt"");
            assertTrue(""Files aren't same "", FileUtils.contentEquals(expectedFile,actualFile));
        }
    }
",non-flaky,5
60904,apache_druid,MovingAverageIterableTest.testMissingDataAtTheEnd,"  @Test
  public void testMissingDataAtTheEnd()
  {

    Map<String, Object> event1 = new HashMap<>();
    Map<String, Object> event2 = new HashMap<>();
    Map<String, Object> event3 = new HashMap<>();

    event1.put(""gender"", ""m"");
    event1.put(""pageViews"", 10L);
    event2.put(""gender"", ""f"");
    event2.put(""pageViews"", 20L);
    event3.put(""gender"", ""u"");
    event3.put(""pageViews"", 30L);

    List<DimensionSpec> ds = new ArrayList<>();
    ds.add(new DefaultDimensionSpec(""gender"", ""gender""));

    Row jan1Row1 = new MapBasedRow(JAN_1, event1);
    Row jan1Row2 = new MapBasedRow(JAN_1, event2);
    Row jan1Row3 = new MapBasedRow(JAN_1, event3);
    Row jan2Row1 = new MapBasedRow(JAN_2, event1);

    Sequence<RowBucket> seq = Sequences.simple(Arrays.asList(
        new RowBucket(JAN_1, Arrays.asList(jan1Row1, jan1Row2, jan1Row3)),
        new RowBucket(JAN_2, Collections.singletonList(jan2Row1))
    ));

    Iterator<Row> iter = new MovingAverageIterable(
        seq,
        ds,
        Collections.singletonList(
            new LongMeanAveragerFactory(""movingAvgPageViews"", 2, 1, ""pageViews"")
        ),
        Collections.emptyList(),
        Collections.singletonList(new LongSumAggregatorFactory(""pageViews"", ""pageViews""))
    ).iterator();

    Assert.assertTrue(iter.hasNext());
    Row result = iter.next();
    Assert.assertEquals(""m"", (result.getDimension(""gender"")).get(0));
    Assert.assertEquals(JAN_1, (result.getTimestamp()));

    Assert.assertTrue(iter.hasNext());
    result = iter.next();
    Assert.assertEquals(""f"", (result.getDimension(""gender"")).get(0));
    Assert.assertEquals(JAN_1, (result.getTimestamp()));

    Assert.assertTrue(iter.hasNext());
    result = iter.next();
    Assert.assertEquals(""u"", (result.getDimension(""gender"")).get(0));
    Assert.assertEquals(JAN_1, (result.getTimestamp()));

    Assert.assertTrue(iter.hasNext());
    result = iter.next();
    Assert.assertEquals(""m"", (result.getDimension(""gender"")).get(0));
    Assert.assertEquals(JAN_2, (result.getTimestamp()));

    Assert.assertTrue(iter.hasNext());
    result = iter.next();
    Assert.assertEquals(""u"", (result.getDimension(""gender"")).get(0));
    Assert.assertEquals(JAN_2, (result.getTimestamp()));

    Assert.assertTrue(iter.hasNext());
    result = iter.next();
    Assert.assertEquals(""f"", (result.getDimension(""gender"")).get(0));
    Assert.assertEquals(JAN_2, (result.getTimestamp()));

    Assert.assertFalse(iter.hasNext());
  }
",non-flaky,5
177241,line_armeria,PropertiesEndpointGroupTest.propertiesFileRestart,"    @Test
    public void propertiesFileRestart() throws Exception {
        final File file = folder.newFile(""temp-file.properties"");

        PrintWriter printWriter = new PrintWriter(file);
        Properties props = new Properties();
        props.setProperty(""serverA.hosts.0"", ""127.0.0.1:8080"");
        props.store(printWriter, """");
        printWriter.close();

        final PropertiesEndpointGroup endpointGroupA = PropertiesEndpointGroup.of(
                file.toPath(), ""serverA.hosts"");
        await().untilAsserted(() -> assertThat(endpointGroupA.endpoints()).hasSize(1));
        endpointGroupA.close();

        final PropertiesEndpointGroup endpointGroupB = PropertiesEndpointGroup.of(
                file.toPath(), ""serverB.hosts"");
        await().untilAsserted(() -> assertThat(endpointGroupB.endpoints()).isEmpty());

        printWriter = new PrintWriter(file);
        props = new Properties();
        props.setProperty(""serverB.hosts.0"", ""127.0.0.1:8080"");
        props.setProperty(""serverB.hosts.1"", ""127.0.0.1:8081"");
        props.store(printWriter, """");
        printWriter.close();

        await().untilAsserted(() -> assertThat(endpointGroupB.endpoints()).hasSize(2));
        endpointGroupB.close();
    }
",non-flaky,5
162721,OpenAPITools_openapi-generator,XmlItemTest.prefixWrappedArrayTest,"    @Test
    public void prefixWrappedArrayTest() {
        // TODO: test prefixWrappedArray
    }
",non-flaky,5
98311,spotify_docker-client,DefaultDockerClientUnitTest.testHostForUnixSocket,"  @Test
  public void testHostForUnixSocket() {
    final DefaultDockerClient client = DefaultDockerClient.builder()
        .uri(""unix:///var/run/docker.sock"").build();
    assertThat(client.getHost(), equalTo(""localhost""));
  }
",non-flaky,5
20967,NationalSecurityAgency_timely,TestDataStoreCacheIterator.testRateIterator,"    @Test
    public void testRateIterator() throws TimelyException {

        long BASETIME = System.currentTimeMillis();
        // align basetime to a downsample period
        BASETIME = BASETIME - (BASETIME % 1000);
        DataStoreCache mmStore = getMetricMemoryStore2(BASETIME);

        QueryRequest query = new QueryRequest();
        query.setStart(BASETIME);
        query.setEnd(BASETIME + 1440000);
        query.setMsResolution(true);
        QueryRequest.SubQuery subQuery = new QueryRequest.SubQuery();
        subQuery.setDownsample(Optional.of(""1ms-avg""));
        subQuery.setMetric(""metric.number.1"");
        subQuery.addTag(""host"", "".*"");
        QueryRequest.RateOption rateOption = new QueryRequest.RateOption();
        rateOption.setCounter(false);
        subQuery.setRate(true);
        subQuery.setRateOptions(rateOption);
        query.setQueries(Collections.singleton(subQuery));

        int x = 0;
        SortedKeyValueIterator<org.apache.accumulo.core.data.Key, org.apache.accumulo.core.data.Value> itr = null;
        try {
            // long firstTimestamp = Long.MAX_VALUE;
            long firstTimestamp = -1;
            long lastTimestamp = -1;
            int numSamples = 0;
            itr = mmStore.setupIterator(query, subQuery, new Authorizations(), Long.MAX_VALUE);
            while (itr.hasTop()) {
                itr.next();
                Map<Set<Tag>, Aggregation> aggregations = AggregationIterator.decodeValue(itr.getTopValue());
                for (Map.Entry<Set<Tag>, Aggregation> entry : aggregations.entrySet()) {
                    for (Sample s : entry.getValue()) {
                        numSamples++;
                        if (firstTimestamp == -1) {
                            firstTimestamp = s.timestamp;
                        }
                        lastTimestamp = s.timestamp;
                        // if (s.timestamp < firstTimestamp) {
                        // firstTimestamp = s.timestamp;
                        // }
                        // if (s.timestamp > lastTimestamp) {
                        // lastTimestamp = s.timestamp;
                        // }
                    }
                }
            }
            Assert.assertEquals(""First timestamp incorrect"", BASETIME + 1000, firstTimestamp);
            Assert.assertEquals(""Last timestamp incorrect"", BASETIME + 1440000, lastTimestamp);
            Assert.assertEquals(""Number of samples incorrect"", 2880, numSamples);
        } catch (IOException | ClassNotFoundException e) {
            LOG.error(""exception in test"", e);
        }
    }
",non-flaky,5
77670,pholser_junit-quickcheck,OffsetTimePropertyParameterTypesTest.shouldHold,"    @Test public void backwardsRange() {
        @Property public void shouldHold(
            @InRange(
",non-flaky,5
113,vojtechhabarta_typescript-generator,EnumTest.testEnumAsEnum,"@Test
public void testEnumAsEnum() {
    final Settings settings = TestUtils.settings();
    settings.mapEnum = EnumMapping.asEnum;
    final String output = new TypeScriptGenerator(settings).generateTypeScript(Input.from(AClass.class));
    final String expected = (""interface AClass {\n"" + ((((((((""    direction: Direction;\n"" + ""}\n"") + ""\n"") + ""declare const enum Direction {\n"") + ""    North = \'North\',\n"") + ""    East = \'East\',\n"") + ""    South = \'South\',\n"") + ""    West = \'West\',\n"") + ""}"")).replace(""'"", ""\"""");
    assertEquals(expected.trim(), output.trim());
}",unordered collections,3
118717,netty_netty,SocketTest.testSendBufferSize,"    @Test
    public void testSendBufferSize() throws Exception {
        int size = socket.getSendBufferSize();
        int newSize = 65535;
        assertTrue(size > 0);
        socket.setSendBufferSize(newSize);
        // Linux usually set it to double what is specified
        assertTrue(newSize <= socket.getSendBufferSize());
    }
",non-flaky,5
113763,salesforce_reactive-grpc,GrpcRetryTest.manyToOneRetryImmediately,"    @Test
    public void manyToOneRetryImmediately() {
        Mono<Integer> test = newThreeErrorFlux()
                .<Mono<Integer>>as(GrpcRetry.ManyToOne.retryImmediately(Flux::single));

        StepVerifier.create(test)
                .expectNext(0)
                .expectComplete()
                .verify(Duration.ofSeconds(1));
    }
",non-flaky,5
112128,apache_shardingsphere-elasticjob,StatisticRdbRepositoryTest.assertFindJobRegisterStatisticsWithDifferentFromDate,"    @Test
    public void assertFindJobRegisterStatisticsWithDifferentFromDate() {
        Date now = new Date();
        Date yesterday = getYesterday();
        assertTrue(repository.add(new JobRegisterStatistics(100, yesterday)));
        assertTrue(repository.add(new JobRegisterStatistics(100, now)));
        assertThat(repository.findJobRegisterStatistics(yesterday).size(), is(2));
        assertThat(repository.findJobRegisterStatistics(now).size(), is(1));
    }
",non-flaky,5
60871,apache_druid,RedisClusterCacheTest.testConfig,"  @Test
  public void testConfig() throws JsonProcessingException
  {
    ObjectMapper mapper = new ObjectMapper();
    RedisCacheConfig fromJson = mapper.readValue(""{\""expiration\"": 1000}"", RedisCacheConfig.class);
    Assert.assertEquals(1, fromJson.getExpiration().getSeconds());

    fromJson = mapper.readValue(""{\""expiration\"": \""PT1H\""}"", RedisCacheConfig.class);
    Assert.assertEquals(3600, fromJson.getExpiration().getSeconds());
  }
",non-flaky,5
77710,pholser_junit-quickcheck,PrimitivePropertyParameterTypesTest.shouldHold,"    @Test public void primitiveFloat() {
        @Property public void shouldHold(float f) {
            assertThat(f, greaterThanOrEqualTo(RangeAttributes.minFloat()));
            assertThat(f, lessThan(RangeAttributes.maxFloat()));
        }
",non-flaky,5
156427,apache_commons-lang,GmtTimeZoneTest.testGetOffset,"    @Test
    public void testGetOffset() {
        assertEquals(-(6 * 60 + 30) * 60 * 1000,
            new GmtTimeZone(true, 6, 30).getOffset(1, 1, 1, 1, 1, 1));
    }
",non-flaky,5
97692,vojtechhabarta_typescript-generator,TaggedUnionsTest.testTaggedUnionsDisabled,"    @Test
    public void testTaggedUnionsDisabled() {
        final Settings settings = TestUtils.settings();
        settings.disableTaggedUnions = true;
        final String output = new TypeScriptGenerator(settings).generateTypeScript(Input.from(Geometry.class));
        final String expected = (
                ""\n"" +
                ""interface Geometry {\n"" +
                ""    shapes: Shape[];\n"" +
                ""}\n"" +
                ""\n"" +
                ""interface Shape {\n"" +
                ""    kind: 'square' | 'rectangle' | 'circle';\n"" +
                ""}\n"" +
                ""\n"" +
                ""interface Square extends Shape {\n"" +
                ""    kind: 'square';\n"" +
                ""    size: number;\n"" +
                ""}\n"" +
                ""\n"" +
                ""interface Rectangle extends Shape {\n"" +
                ""    kind: 'rectangle';\n"" +
                ""    width: number;\n"" +
                ""    height: number;\n"" +
                ""}\n"" +
                ""\n"" +
                ""interface Circle extends Shape {\n"" +
                ""    kind: 'circle';\n"" +
                ""    radius: number;\n"" +
                ""}\n"" +
                """"
                ).replace('\'', '""');
        Assert.assertEquals(expected, output);
    }
",non-flaky,5
112750,hwang-pku_ormlite-core,DatabaseConnectionProxyTest.testCloseQuietlyNull,"	@Test
	public void testCloseQuietlyNull() throws Exception {
		DatabaseConnectionProxy proxy = new DatabaseConnectionProxy(null);
		proxy.closeQuietly();
		proxy.close();
	}
",non-flaky,5
177197,line_armeria,BraveServiceTest.serve,"    @Test
            public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {
                return HttpResponse.of(HttpStatus.OK);
            }
",non-flaky,5
77674,pholser_junit-quickcheck,PrimitivePropertyParameterTypesTest.shouldHold,"    @Test public void wrapperBoolean() {
        @Property public void shouldHold(Boolean b) {
        }
",non-flaky,5
98614,nutzam_nutz,El2Test.testIssue307,"    @Test
    public void testIssue307(){
        Context context = Lang.context();
        List<String> list = new ArrayList<String>();
        list.add(""jk"");
        context.set(""list"", list);
        context.set(""System"", System.class);
        
        El.eval(context, ""list.add(list.get(0))"");
        assertEquals(2, list.size());
    }
",non-flaky,5
98660,nutzam_nutz,BaseTest.test_json_adaptor,"    @Test
    public void test_json_adaptor() {
        post(""/adaptor/json/pet/array"", ""{pets:[{name:'zzh'},{name:'wendal'}]}"");
        assertEquals(""pets(2) array"", resp.getContent());

        post(""/adaptor/json/pet/list"", ""{pets:[{name:'zzh'},{name:'wendal'}]}"");
        assertEquals(""pets(2) list"", resp.getContent());
    }
",non-flaky,5
159629,liquibase_liquibase,H2IntegrationTest.testGenerateChangeLogWithNoChanges,"    @Test
    public void testGenerateChangeLogWithNoChanges() throws Exception {
        super.testGenerateChangeLogWithNoChanges();    //To change body of overridden methods use File | Settings |
        // File Templates.
    }
",non-flaky,5
94791,ktuukkan_marine-api,AISMessage21ParserTest.getVirtualAidFlag,"    @Test
    public void getVirtualAidFlag() throws Exception {
        assertFalse(msg.getVirtualAidFlag());
    }
",non-flaky,5
135730,Netflix_Hystrix,HystrixCommandMetricsTest.testBadRequestsDoNotAffectErrorPercentage,"    @Test
    public void testBadRequestsDoNotAffectErrorPercentage() {
        String key = ""cmd-metrics-B"";
        try {

            HystrixCommand<Boolean> cmd1 = new SuccessCommand(key ,1);
            HystrixCommandMetrics metrics = cmd1.metrics;
            cmd1.execute();
            Thread.sleep(100);
            assertEquals(0, metrics.getHealthCounts().getErrorPercentage());

            HystrixCommand<Boolean> cmd2 = new FailureCommand(key, 1);
            cmd2.execute();
            Thread.sleep(100);
            assertEquals(50, metrics.getHealthCounts().getErrorPercentage());

            HystrixCommand<Boolean> cmd3 = new BadRequestCommand(key, 1);
            HystrixCommand<Boolean> cmd4 = new BadRequestCommand(key, 1);
            try {
                cmd3.execute();
            } catch (HystrixBadRequestException ex) {
                System.out.println(""Caught expected HystrixBadRequestException from cmd3"");
            }
            try {
                cmd4.execute();
            } catch (HystrixBadRequestException ex) {
                System.out.println(""Caught expected HystrixBadRequestException from cmd4"");
            }
            Thread.sleep(100);
            assertEquals(50, metrics.getHealthCounts().getErrorPercentage());

            HystrixCommand<Boolean> cmd5 = new FailureCommand(key, 1);
            HystrixCommand<Boolean> cmd6 = new FailureCommand(key, 1);
            cmd5.execute();
            cmd6.execute();
            Thread.sleep(100);
            assertEquals(75, metrics.getHealthCounts().getErrorPercentage());
        } catch (Exception e) {
            e.printStackTrace();
            fail(""Error occurred : "" + e.getMessage());
        }
    }
",non-flaky,5
30961,camunda-cloud_zeebe,POJOArrayTest.shouldSerializePOJOWithDefaultValues,"  @Test
  public void shouldSerializePOJOWithDefaultValues() {
    // given
    final POJOArray pojo = new POJOArray();
    final ValueArray<MinimalPOJO> iterator1 = pojo.simpleArray();
    iterator1.add().setLongProp(123L);

    final int writeLength = pojo.getLength();

    // when
    final UnsafeBuffer resultBuffer = new UnsafeBuffer(new byte[writeLength]);
    pojo.write(resultBuffer, 0);

    // then
    final Map<String, Object> msgPackMap =
        MsgPackUtil.asMap(resultBuffer, 0, resultBuffer.capacity());
    assertThat(msgPackMap).containsOnly(entry(""simpleArray"", ""[{longProp=123}]""));
  }
",non-flaky,5
77560,dropwizard_dropwizard,OptionalDoubleMessageBodyWriterTest.showWithQueryParam,"    @Test
        public OptionalDouble showWithQueryParam(@QueryParam(""id"") OptionalDouble id) {
            return id;
        }
",non-flaky,5
94617,square_okhttp,URLConnectionTest.lookup,"  @Test public void unexpectedExceptionAsync() throws Exception {
          @Override public List<InetAddress> lookup(String hostname) {
            throw new RuntimeException(""boom!"");
          }
",non-flaky,5
38262,palantir_atlasdb,AbstractSerializableTransactionTest.call,"    @Test(expected=TransactionFailedRetriableException.class)
    public void testConcurrentWriteSkewCell() throws InterruptedException, BrokenBarrierException {
        Transaction t0 = startTransaction();
        put(t0, ""row1"", ""col1"", ""100"");
        put(t0, ""row2"", ""col1"", ""100"");
        t0.commit();

        final CyclicBarrier barrier = new CyclicBarrier(2);

        final Transaction t1 = startTransaction();
        ExecutorService exec = PTExecutors.newCachedThreadPool();
        Future<?> f = exec.submit( new Callable<Void>() {
            @Override
            public Void call() throws Exception {
                withdrawMoney(t1, true, true);
                barrier.await();
                t1.commit();
                return null;
            }
",non-flaky,5
122543,vespa-engine_vespa,SystemCtlTest.start,"    @Test
    public void start() {
        terminal.expectCommand(
                        ""systemctl show docker 2>&1"",
                        0,
                        ""a=b\n"" +
                                ""ActiveState=failed\n"" +
                                ""bar=zoo\n"")
                .expectCommand(""systemctl start docker 2>&1"", 0, """");

        SystemCtl.SystemCtlStart startDockerService = new SystemCtl(terminal).start(""docker"");
        assertTrue(startDockerService.converge(taskContext));
    }
",non-flaky,5
33687,alibaba_fastjson,JSONScannerTest.checkDate10,"  @Test
  public void checkDate10() throws Throwable {

    // Arrange
    char y0 = '2';
    char y1 = '1';
    char y2 = '1';
    char y3 = '1';
    char M0 = '1';
    char M1 = '0';
    int d0 = 8388658;
    int d1 = 32810;

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkDate"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""int""), Reflector.forName(""int""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, y0, y1, y2, y3, M0, M1, d0, d1);

    // Assert result
    Assert.assertEquals(false, retval);

  }
",non-flaky,5
160382,ConsenSys_teku,ChainDataProviderTest.getChainHeads_shouldReturnChainHeads,"  @Test
  public void getChainHeads_shouldReturnChainHeads()
      throws ExecutionException, InterruptedException {
    final ChainDataProvider provider =
        new ChainDataProvider(spec, recentChainData, combinedChainDataClient);
    final SafeFuture<Optional<List<ChainHead>>> future = provider.getChainHeads();
    final Optional<List<ChainHead>> maybeResult = future.get();
    assertThat(maybeResult.orElse(emptyList()))
        .containsExactly(new ChainHead(bestBlock.getSlot(), blockRoot));
  }
",non-flaky,5
30932,camunda-cloud_zeebe,ElasticsearchExporterJobRecordIT.shouldExportJobRecordWithOverlappingCustomHeaders,"  @Test
  public void shouldExportJobRecordWithOverlappingCustomHeaders() {
    // when
    exporterBrokerRule.deployProcess(
        Bpmn.createExecutableProcess(""process"")
            .startEvent()
            .serviceTask(
                ""task"",
                t -> t.zeebeJobType(""test"").zeebeTaskHeader(""x"", ""1"").zeebeTaskHeader(""x.y"", ""2""))
            .endEvent()
            .done(),
        ""process.bpmn"");

    final var processInstanceKey = exporterBrokerRule.createProcessInstance(""process"", Map.of());

    // then
    await(""index templates need to be created"").untilAsserted(this::assertIndexSettings);
    final var jobCreated =
        RecordingExporter.jobRecords(JobIntent.CREATED)
            .withProcessInstanceKey(processInstanceKey)
            .getFirst();

    assertRecordExported(jobCreated);
  }
",non-flaky,5
43115,trinodb_trino,BaseConnectorSmokeTest.testHaving,"    @Test
    public void testHaving()
    {
        assertQuery(""SELECT regionkey, sum(nationkey) FROM nation GROUP BY regionkey HAVING sum(nationkey) = 58"", ""VALUES (4, 58)"");
    }
",non-flaky,5
92621,FasterXML_jackson-databind,TestSubtypesExternalPropertyMissingProperty.testDeserializationEmpty,"    @Test
    public void testDeserializationEmpty() throws Exception {
        ObjectReader r = READER.without(DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY);
        checkOrangeBoxEmpty(r, orangeBoxEmptyJson);
        checkAppleBoxEmpty(r, appleBoxEmptyJson);

        r = READER.with(DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY);
        checkOrangeBoxEmpty(r, orangeBoxEmptyJson);
        checkAppleBoxEmpty(r, appleBoxEmptyJson);
    }
",non-flaky,5
106577,Alluxio_alluxio,HdfsVersionValidationTaskTest.minorVersionAccepted,"  @Test
  public void minorVersionAccepted() throws Exception {
    PowerMockito.mockStatic(ShellUtils.class);
    String[] cmd = new String[]{""hadoop"", ""version""};
    // The minor version is not defined in Alluxio, which should work
    BDDMockito.given(ShellUtils.execCommand(cmd)).willReturn(""Hadoop 2.6.2"");
    sConf.set(PropertyKey.UNDERFS_VERSION, ""2.6"");

    HdfsVersionValidationTask task = new HdfsVersionValidationTask(sConf);
    ValidationTaskResult result = task.validateImpl(ImmutableMap.of());
    assertEquals(ValidationUtils.State.OK, result.getState());
  }
",non-flaky,5
26776,MundaneImmortal_pair-distribution-app,CompanyTest.testGetCompanyNameWithSaces,"	@Test
	public void testGetCompanyNameWithSaces() {
		assertThat(new Company(""  company  "").getName(), is(""company""));
	}
",non-flaky,5
94781,ktuukkan_marine-api,AISMessage21ParserTest.getLatitudeInDegrees,"    @Test
    public void getLatitudeInDegrees() throws Exception {
        assertEquals(-38.220167, msg.getLatitudeInDegrees(), 0.000001);
    }
",non-flaky,5
98344,Kong_unirest-java,CacheManagerTest.getClient,"    @Test
        public Object getClient() {
            return null;
        }
",non-flaky,5
94759,ktuukkan_marine-api,AbstractAISMessageListenerTest.testOnMessageWithExpectedMessage,"    @Test
    public void testOnMessageWithExpectedMessage() {

        BasicListener bl = new BasicListener();

        bl.sentenceRead(AIS_01);
        assertEquals(bl.received.toString(), MSG_01.toString());
    }
",non-flaky,5
19484,eclipse_xtext-core,LineAndColumnTest.testTwoCharsText,"	@Test
	public void testTwoCharsText() {
		assertLineAndColumn(""ab"", 0, 1, 1);
		assertLineAndColumn(""ab"", 1, 1, 2);
		assertLineAndColumn(""ab"", 2, 1, 3);
	}
",non-flaky,5
106628,Alluxio_alluxio,AlluxioJniFuseFileSystemTest.rename,"  @Test
  public void rename() throws Exception {
    AlluxioURI oldPath = BASE_EXPECTED_URI.join(""/old"");
    AlluxioURI newPath = BASE_EXPECTED_URI.join(""/new"");
    doNothing().when(mFileSystem).rename(oldPath, newPath);
    mFuseFs.rename(""/old"", ""/new"");
    verify(mFileSystem).rename(oldPath, newPath);
  }
",non-flaky,5
33677,alibaba_fastjson,JSONScannerTest.charArrayCompare4,"  @Test
  public void charArrayCompare4() throws Throwable {

    // Arrange
    String src = ""!\""&&&&&"";
    int offset = 0;
    char[] dest = { };

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""charArrayCompare"", Reflector.forName(""java.lang.String""), Reflector.forName(""int""), Reflector.forName(""char []""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(null, src, offset, dest);

    // Assert result
    Assert.assertEquals(true, retval);

  }
",non-flaky,5
19511,eclipse_xtext-core,TraceRegionTest.testLeafIterator_OneGrandChild_LeftGap,"	@Test
	public void testLeafIterator_OneGrandChild_LeftGap() {
		final TraceRegion root = new TraceRegion(0, 2, 0, 2, true, 2, 3, 0, 0, null, newURI());
		AbstractTraceRegion first = new AbstractStatefulTraceRegion(new TextRegionWithLineInformation(0, 1, 0, 1), true, new LocationData(2, 3, 0, 0, null), root) {};
		TraceRegion parent = new TraceRegion(1, 1, 1, 2, true, 3, 4, 0, 0, root, null);
		TraceRegion second = new TraceRegion(1, 1, 1, 2, true, 3, 4, 0, 0, parent, null);
		Iterator<AbstractTraceRegion> iter = root.leafIterator();
		assertEquals(Arrays.asList(first, second).iterator(), iter);
	}
",non-flaky,5
327,apache_hadoop,TestViewfsWithNfs3.testFileStatus,"  @Test
  public void testFileStatus() throws Exception {
    HdfsFileStatus status = nn1.getRpcServer().getFileInfo(""/user1/file1"");
    FileStatus st = viewFs.getFileStatus(new Path(""/hdfs1/file1""));
    Assert.assertEquals(st.isDirectory(), status.isDirectory());

    HdfsFileStatus status2 = nn2.getRpcServer().getFileInfo(""/user2/dir2"");
    FileStatus st2 = viewFs.getFileStatus(new Path(""/hdfs2/dir2""));
    Assert.assertEquals(st2.isDirectory(), status2.isDirectory());
  }
",non-flaky,5
19455,eclipse_xtext-core,ImportedNamespaceAwareLocalScopeProviderTest.iterator,"	@Test public void testUnambiguousImportAreShadowed_00() throws Exception {
			public Iterator<EObject> iterator() {
				return resource.getAllContents();
			}
",non-flaky,5
31006,camunda-cloud_zeebe,ArrayValueTest.shouldRemoveAllValues,"  @Test
  public void shouldRemoveAllValues() {
    // given
    addIntValues(array, 1, 2, 3);

    // when
    final Iterator<IntegerValue> iterator = array.iterator();
    iterator.next();
    iterator.remove();
    iterator.next();
    iterator.remove();
    iterator.next();
    iterator.remove();

    // then
    encodeAndDecode(array);
    assertIntValues(array);
  }
",non-flaky,5
175791,GoogleCloudPlatform_google-cloud-eclipse,AppEngineApplicationQueryJobTest.testRun_abandonIfNotLatestJob,"  @Test
  public void testRun_abandonIfNotLatestJob()
      throws InterruptedException, ProjectRepositoryException {
    when(isLatestQueryJob.apply(queryJob)).thenReturn(false);
    when(projectRepository.getAppEngineApplication(credential, ""projectId""))
        .thenReturn(AppEngine.NO_APPENGINE_APPLICATION);

    queryJob.schedule();
    queryJob.join();

    verify(isLatestQueryJob).apply(queryJob);
    verify(projectSelector, never()).setStatusLink(anyString(), anyString());
  }
",non-flaky,5
94806,ktuukkan_marine-api,AISMessage09ParserTest.getRadioStatus,"    @Test
    public void getRadioStatus() throws Exception {
        assertEquals(0, msg.getRadioStatus());
    }
",non-flaky,5
84632,apache_zookeeper,ZKClientConfigTest.testIntegerRetrievalFromProperty,"    @Test
    public void testIntegerRetrievalFromProperty() {
        ZKClientConfig conf = new ZKClientConfig();
        String prop = ""UnSetProperty"" + System.currentTimeMillis();
        int defaultValue = 100;
        // property is not set we should get the default value
        int result = conf.getInt(prop, defaultValue);
        assertEquals(defaultValue, result);

        // property is set but can not be parsed to int, we should get the
        // NumberFormatException
        conf.setProperty(ZKConfig.JUTE_MAXBUFFER, ""InvlaidIntValue123"");
        try {
            result = conf.getInt(ZKConfig.JUTE_MAXBUFFER, defaultValue);
            fail(""NumberFormatException is expected"");
        } catch (NumberFormatException exception) {
            // do nothing
        }
        assertEquals(defaultValue, result);

        // property is set to an valid int, we should get the set value
        int value = ZKClientConfig.CLIENT_MAX_PACKET_LENGTH_DEFAULT;
        conf.setProperty(ZKConfig.JUTE_MAXBUFFER, Integer.toString(value));
        result = conf.getInt(ZKConfig.JUTE_MAXBUFFER, defaultValue);
        assertEquals(value, result);

        // property is set but with white spaces
        value = 12345;
        conf.setProperty(ZKConfig.JUTE_MAXBUFFER, "" "" + value + "" "");
        result = conf.getInt(ZKConfig.JUTE_MAXBUFFER, defaultValue);
        assertEquals(value, result);
    }
",non-flaky,5
112658,tbsalling_aismessages,InvalidMessageTest.invalid,"    @Test(expected = InvalidMessage.class)
    public void invalid() {
        AISMessage.create(NMEAMessage.fromString(""!AIVDM,1,1,,B,58LAM242B9POUKWWW<0a>0<4E<58,0*6E""));
    }
",non-flaky,5
98283,spotify_docker-client,RegistryAuthTest.testFromDockerConfig_FullConfig,"  @Test
  public void testFromDockerConfig_FullConfig() throws Exception {
    final RegistryAuth registryAuth = RegistryAuth.fromDockerConfig(getTestFilePath(
        ""dockerConfig/fullConfig.json"")).build();
    assertThat(registryAuth, equalTo(DOCKER_AUTH_CONFIG));
  }
",non-flaky,5
98229,apache_jackrabbit,PerformanceTest.testPerformance,"    @Test
    public void testPerformance() throws Exception {
        testPerformance(""2.3"");

        System.setProperty(QueryEngine.NATIVE_SORT_SYSTEM_PROPERTY, ""true"");
        testPerformance(""2.3-expSort"", getDefaultConfig());
        System.setProperty(QueryEngine.NATIVE_SORT_SYSTEM_PROPERTY, ""false"");
    }
",non-flaky,5
60954,apache_druid,RowBucketIterableTest.testApplyLastTwoDayNoRows,"  @Test
  public void testApplyLastTwoDayNoRows()
  {
    List<Row> expectedDay1 = Arrays.asList(JAN_1_M_10, JAN_1_F_20);
    List<Row> expectedDay2 = Collections.singletonList(JAN_2_M_10);
    List<Row> expectedDay3 = Collections.emptyList();
    List<Row> expectedDay4 = Collections.emptyList();

    rows = new ArrayList<>();
    rows.add(JAN_1_M_10);
    rows.add(JAN_1_F_20);
    rows.add(JAN_2_M_10);

    intervals = new ArrayList<>();
    intervals.add(INTERVAL_JAN_1_4);

    Sequence<Row> seq = Sequences.simple(rows);
    RowBucketIterable rbi = new RowBucketIterable(seq, intervals, ONE_DAY);
    Iterator<RowBucket> iter = rbi.iterator();

    RowBucket actual = iter.next();
    Assert.assertEquals(expectedDay1, actual.getRows());

    actual = iter.next();
    Assert.assertEquals(expectedDay2, actual.getRows());

    actual = iter.next();
    Assert.assertEquals(JAN_3, actual.getDateTime());
    Assert.assertEquals(expectedDay3, actual.getRows());

    actual = iter.next();
    Assert.assertEquals(JAN_4, actual.getDateTime());
    Assert.assertEquals(expectedDay4, actual.getRows());
  }
",non-flaky,5
77005,Tencent_Firestorm,ShuffleServerGrpcTest.registerTest,"  @Test
  public void registerTest() {
    shuffleServerClient.registerShuffle(new RssRegisterShuffleRequest(""registerTest"", 0,
        Lists.newArrayList(new PartitionRange(0, 1))));
    RssGetShuffleResultRequest req = new RssGetShuffleResultRequest(""registerTest"", 0, 0);
    // no exception with getShuffleResult means register successfully
    shuffleServerClient.getShuffleResult(req);
    req = new RssGetShuffleResultRequest(""registerTest"", 0, 1);
    shuffleServerClient.getShuffleResult(req);
    shuffleServerClient.registerShuffle(new RssRegisterShuffleRequest(""registerTest"", 1,
        Lists.newArrayList(new PartitionRange(0, 0), new PartitionRange(1, 1), new PartitionRange(2, 2))));
    req = new RssGetShuffleResultRequest(""registerTest"", 1, 0);
    shuffleServerClient.getShuffleResult(req);
    req = new RssGetShuffleResultRequest(""registerTest"", 1, 1);
    shuffleServerClient.getShuffleResult(req);
    req = new RssGetShuffleResultRequest(""registerTest"", 1, 2);
    shuffleServerClient.getShuffleResult(req);
  }
",non-flaky,5
98000,ReactiveX_RxJava,ReduceTests.call,"    @Test
    public void reduceWithCovariantObjects() {
        Observable<Movie> horrorMovies = Observable.<Movie> from(new HorrorMovie());

        Func2<Movie, Movie, Movie> chooseSecondMovie =
                new Func2<Movie, Movie, Movie>() {
                    public Movie call(Movie t1, Movie t2) {
                        return t2;
                    }
",non-flaky,5
162409,testcontainers_testcontainers-java,FixedHostPortContainerTest.testFixedHostPortMapping,"    @Test
    public void testFixedHostPortMapping() throws IOException {
        // first find a free port on the docker host that will work for testing
        GenericContainer portDiscoveryRedis = new GenericContainer(""redis:3.0.2"").withExposedPorts(REDIS_PORT);
        portDiscoveryRedis.start();
        Integer freePort = portDiscoveryRedis.getMappedPort(REDIS_PORT);
        portDiscoveryRedis.stop();


        // Set up a FixedHostPortGenericContainer as if this were a @Rule
        FixedHostPortGenericContainer redis = new FixedHostPortGenericContainer(""redis:3.0.2"").withFixedExposedPort(freePort, REDIS_PORT);
        redis.start();

//        Config redisConfig = new Config();
//        redisConfig.useSingleServer().setAddress(redis.getContainerIpAddress() + "":"" + freePort);
//        Redisson redisson = Redisson.create(redisConfig);
//
//        redisson.getBucket(""test"").set(""foo"");
//
//        assertEquals(""The bucket content was successfully set"", ""foo"", redisson.getBucket(""test"").get());
//        assertEquals(""The container returns the fixed port from getMappedPort(...)"", freePort, redis.getMappedPort(REDIS_PORT));
    }
",non-flaky,5
43027,trinodb_trino,TestDevelopmentLoaderConfig.testExplicitPropertyMappings,"    @Test
    public void testExplicitPropertyMappings()
    {
        Map<String, String> properties = new ImmutableMap.Builder<String, String>()
                .put(""plugin.bundles"", ""a,b,c"")
                .put(""maven.repo.local"", ""local-repo"")
                .put(""maven.repo.remote"", ""remote-a,remote-b"")
                .buildOrThrow();

        DevelopmentLoaderConfig expected = new DevelopmentLoaderConfig()
                .setPlugins(ImmutableList.of(""a"", ""b"", ""c""))
                .setMavenLocalRepository(""local-repo"")
                .setMavenRemoteRepository(ImmutableList.of(""remote-a"", ""remote-b""));

        assertFullMapping(properties, expected);
    }
",non-flaky,5
89348,apache_samza,TestKafkaInputDescriptor.testISDConfigsWithDefaults,"  @Test
  public void testISDConfigsWithDefaults() {
    KafkaSystemDescriptor sd = new KafkaSystemDescriptor(""kafka"")
        .withConsumerZkConnect(ImmutableList.of(""localhost:123""))
        .withProducerBootstrapServers(ImmutableList.of(""localhost:567"", ""localhost:890""));

    KafkaInputDescriptor<KV<String, Integer>> isd =
        sd.getInputDescriptor(""input-stream"", KVSerde.of(new StringSerde(), new IntegerSerde()));

    Map<String, String> generatedConfigs = isd.toConfig();
    assertEquals(""kafka"", generatedConfigs.get(""streams.input-stream.samza.system""));
    assertEquals(1, generatedConfigs.size()); // verify that there are no other configs
  }
",non-flaky,5
179447,abel533_Mapper,OracleTest.testInsertList,"    @Test
    public void testInsertList() {
        SqlSession sqlSession = getSqlSession();
        try {
            DemoCountryMapper mapper = sqlSession.getMapper(DemoCountryMapper.class);
            List<DemoCountry> countryList = new ArrayList<DemoCountry>();
            countryList.add(new DemoCountry(""20"", ""Zimbabwe"",""ZW""));
            countryList.add(new DemoCountry(""21"", ""Zaire"",""ZR""));
            countryList.add(new DemoCountry(""22"", ""Zambia"",""ZM""));
            int updates = mapper.insertList(countryList);
            Assert.assertEquals(3, updates);
        } finally {
            //sqlSession.commit();
            sqlSession.close();
        }
    }
",non-flaky,5
112651,tbsalling_aismessages,StandardClassBCSPositionReportTest.canDecode2,"    @Test
    public void canDecode2() {
        AISMessage aisMessage = AISMessage.create(NMEAMessage.fromString(""!AIVDM,1,1,,A,B>1VUFP00vK`auV0eUulKwv0RJGT,0*09""));

        System.out.println(aisMessage.toString());

        assertEquals(AISMessageType.StandardClassBCSPositionReport, aisMessage.getMessageType());
        StandardClassBCSPositionReport message = (StandardClassBCSPositionReport) aisMessage;
        assertEquals(Integer.valueOf(0), message.getRepeatIndicator());
        assertEquals(MMSI.valueOf(941204826), message.getSourceMmsi());
        assertEquals(""00000000"", message.getRegionalReserved1());
        assertEquals((Float) 0.3f, message.getSpeedOverGround());
        assertTrue(message.getPositionAccurate());
        assertEquals(Float.valueOf(42.020855f), message.getLatitude());
        assertEquals(Float.valueOf(-87.70006f), message.getLongitude());
        assertEquals(Float.valueOf(186.2f), message.getCourseOverGround());
        assertEquals((Integer) 511, message.getTrueHeading());
        assertEquals((Integer) 60, message.getSecond());
        assertEquals(""00"", message.getRegionalReserved2());
        assertFalse(message.getCsUnit());
        assertFalse(message.getDisplay());
        assertFalse(message.getDsc());
        assertTrue(message.getBand());
        assertFalse(message.getMessage22());
        assertFalse(message.getAssigned());
        assertFalse(message.getRaimFlag());
    }
",non-flaky,5
53135,cloudfoundry_uaa,UaaMetricsEmitterTests.testNotifications,"    @Test
    public void testNotifications() {
        uaaMetricsEmitter.enableNotification();
        emitter.sendNotification(new Notification(""/api"", 45L, 0));
        Mockito.verify(statsDClient).time(""requests.api.latency"", 45L);
    }
",non-flaky,5
21169,androidx_androidx,PreferenceGroupInitialExpandedChildrenCountTest.createPreferenceGroupAdapter_setExpandButtonSummary,"    @Test
    public void createPreferenceGroupAdapter_setExpandButtonSummary() {
        mScreen.setInitialExpandedChildrenCount(INITIAL_EXPANDED_COUNT);
        PreferenceGroupAdapter preferenceGroupAdapter = new PreferenceGroupAdapter(mScreen);
        // Preference 5 to Preference 9 are collapsed
        CharSequence summary = mPreferenceList.get(INITIAL_EXPANDED_COUNT).getTitle();
        for (int i = INITIAL_EXPANDED_COUNT + 1; i < TOTAL_PREFERENCE; i++) {
            summary = mContext.getString(R.string.summary_collapsed_preference_list,
                    summary, mPreferenceList.get(i).getTitle());
        }
        final Preference expandButton = preferenceGroupAdapter.getItem(INITIAL_EXPANDED_COUNT);
        assertEquals(summary, expandButton.getSummary());
    }
",non-flaky,5
98622,nutzam_nutz,El2Test.test_el,"    @Test
    public void test_el() {
        El el = new El(""'hi,'+name"");
        Context ctx = Lang.context();
        ctx.set(""name"", ""wendal"");
        assertEquals(""hi,wendal"", el.eval(ctx));
    }
",non-flaky,5
377,apache_hadoop,TestFcHdfsSetUMask.testMkdirWithExistingDirClear,"  @Test
  public void testMkdirWithExistingDirClear() throws IOException {
    testMkdirWithExistingDir(BLANK_TEST_UMASK, BLANK_PERMISSIONS);
  }
",non-flaky,5
33899,apache_camel,FhirReadIT.testResourceByUrl,"    @Test
    public void testResourceByUrl() throws Exception {
        final Map<String, Object> headers = new HashMap<>();
        // parameter type is Class
        headers.put(""CamelFhir.resource"", Patient.class);
        // parameter type is String
        headers.put(""CamelFhir.url"", this.patient.getId());

        Patient result = requestBodyAndHeaders(""direct://RESOURCE_BY_URL"", null, headers);

        assertValidResponse(result);
    }
",non-flaky,5
95692,togglz_togglz,ArchaiusStateRepositoryTest.setState,"    @Test(expected=UnsupportedOperationException.class)
    public void setState() {
        
        repository.setFeatureState(new FeatureState(TestFeature.F1, true));
    }
",non-flaky,5
76763,quarkusio_quarkus,PackageIT.testUberJarMavenPluginConfiguration,"    @Test
    public void testUberJarMavenPluginConfiguration()
            throws MavenInvocationException, IOException, InterruptedException {
        testDir = initProject(""projects/uberjar-maven-plugin-config"");
        running = new RunningInvoker(testDir, false);
        final MavenProcessInvocationResult result = running.execute(Collections.singletonList(""package""),
                Collections.emptyMap());
        assertThat(result.getProcess().waitFor()).isEqualTo(0);

        verifyUberJar();
    }
",non-flaky,5
135749,Netflix_Hystrix,HystrixPropertiesChainedArchaiusPropertyTest.testBoolean,"    @Test
    public void testBoolean() throws Exception {

        DynamicBooleanProperty pBoolean = new DynamicBooleanProperty(""defaultBoolean"", true);
        HystrixPropertiesChainedArchaiusProperty.BooleanProperty fBoolean = new HystrixPropertiesChainedArchaiusProperty.BooleanProperty(""overrideBoolean"", pBoolean);

        System.out.println(""pBoolean: "" + pBoolean.get());
        System.out.println(""fBoolean: "" + fBoolean.get());

        assertTrue(fBoolean.get());

        ConfigurationManager.getConfigInstance().setProperty(""defaultBoolean"", Boolean.FALSE);

        System.out.println(""pBoolean: "" + pBoolean.get());
        System.out.println(""fBoolean: "" + fBoolean.get());

        assertFalse(fBoolean.get());

        ConfigurationManager.getConfigInstance().setProperty(""overrideBoolean"", Boolean.TRUE);
        assertTrue(fBoolean.get());

        ConfigurationManager.getConfigInstance().clearProperty(""overrideBoolean"");
        assertFalse(fBoolean.get());

        ConfigurationManager.getConfigInstance().clearProperty(""defaultBoolean"");
        assertTrue(fBoolean.get());
    }
",non-flaky,5
114032,apache_struts,FileDownloadActionTest.testSanitizeInputPathShouldReturnNullForNonLeadingWebInf,"	@Test
	public void testSanitizeInputPathShouldReturnNullForNonLeadingWebInf() throws Exception {
		assertNull(fileDownloadAction.sanitizeInputPath(""./WEB-INF/foo""));
	}
",non-flaky,5
78317,apache_beam,ReduceFnRunnerTest.testOnElementBufferingDiscarding,"  @Test
  public void testOnElementBufferingDiscarding() throws Exception {
    // Test basic execution of a trigger using a non-combining window set and discarding mode.
    MetricsContainerImpl container = new MetricsContainerImpl(""any"");
    MetricsEnvironment.setCurrentContainer(container);
    ReduceFnTester<Integer, Iterable<Integer>, IntervalWindow> tester =
        ReduceFnTester.nonCombining(
            FixedWindows.of(Duration.millis(10)),
            mockTriggerStateMachine,
            AccumulationMode.DISCARDING_FIRED_PANES,
            Duration.millis(100),
            ClosingBehavior.FIRE_IF_NON_EMPTY);

    // Pane of {1, 2}
    injectElement(tester, 1);
    when(mockTriggerStateMachine.shouldFire(anyTriggerContext())).thenReturn(true);
    injectElement(tester, 2);
    assertThat(
        tester.extractOutput(),
        contains(isSingleWindowedValue(containsInAnyOrder(1, 2), 1, 0, 10)));

    // Pane of just 3, and finish
    when(mockTriggerStateMachine.shouldFire(anyTriggerContext())).thenReturn(true);
    triggerShouldFinish(mockTriggerStateMachine);
    injectElement(tester, 3);
    assertThat(
        tester.extractOutput(), contains(isSingleWindowedValue(containsInAnyOrder(3), 3, 0, 10)));
    assertTrue(tester.isMarkedFinished(firstWindow));
    tester.assertHasOnlyGlobalAndFinishedSetsFor(firstWindow);

    // This element shouldn't be seen, because the trigger has finished
    injectElement(tester, 4);

    long droppedElements =
        container
            .getCounter(
                MetricName.named(ReduceFnRunner.class, ReduceFnRunner.DROPPED_DUE_TO_CLOSED_WINDOW))
            .getCumulative();
    assertEquals(1, droppedElements);
  }
",non-flaky,5
76965,Tencent_Firestorm,RssUtilsTest.testSerializeBitmap,"  @Test
  public void testSerializeBitmap() throws Exception {
    Roaring64NavigableMap bitmap1 = Roaring64NavigableMap.bitmapOf(1, 2, 100, 10000);
    byte[] bytes = RssUtils.serializeBitMap(bitmap1);
    Roaring64NavigableMap bitmap2 = RssUtils.deserializeBitMap(bytes);
    assertEquals(bitmap1, bitmap2);
    assertEquals(Roaring64NavigableMap.bitmapOf(), RssUtils.deserializeBitMap(new byte[]{}));
  }
",non-flaky,5
60948,apache_druid,RowBucketIterableTest.testMissingDaysAtBeginingAndAtTheEnd,"  @Test
  public void testMissingDaysAtBeginingAndAtTheEnd()
  {
    List<Row> expectedDay1 = Collections.emptyList();
    List<Row> expectedDay2 = Collections.singletonList(JAN_2_M_10);
    List<Row> expectedDay3 = Collections.singletonList(JAN_3_M_10);
    List<Row> expectedDay4 = Collections.emptyList();

    intervals = new ArrayList<>();
    intervals.add(INTERVAL_JAN_1_4);

    rows = new ArrayList<>();
    rows.add(JAN_2_M_10);
    rows.add(JAN_3_M_10);

    Sequence<Row> seq = Sequences.simple(rows);
    RowBucketIterable rbi = new RowBucketIterable(seq, intervals, ONE_DAY);
    Iterator<RowBucket> iter = rbi.iterator();

    RowBucket actual = iter.next();
    Assert.assertEquals(JAN_1, actual.getDateTime());
    Assert.assertEquals(expectedDay1, actual.getRows());

    actual = iter.next();
    Assert.assertEquals(JAN_2, actual.getDateTime());
    Assert.assertEquals(expectedDay2, actual.getRows());

    actual = iter.next();
    Assert.assertEquals(JAN_3, actual.getDateTime());
    Assert.assertEquals(expectedDay3, actual.getRows());

    actual = iter.next();
    Assert.assertEquals(JAN_4, actual.getDateTime());
    Assert.assertEquals(expectedDay4, actual.getRows());
  }
",non-flaky,5
53166,cloudfoundry_uaa,ScimGroupTests.testPatchDeleteMetaAttributes,"    @Test
    public void testPatchDeleteMetaAttributes(){
        assertEquals(""description"", group.getDescription());
        String[] attributes = new String[]{""description""};
        patch.getMeta().setAttributes(attributes);
        group.patch(patch);
        assertEquals(""NewDescription"", group.getDescription());

        patch.setDescription(null);
        group.patch(patch);
        assertNull(group.getDescription());
    }
",non-flaky,5
159683,liquibase_liquibase,AddUniqueConstraintExecutorTest.execute_withSchema,"    @Test
    public void execute_withSchema() throws Exception {
        statementUnderTest = new AddUniqueConstraintStatement(
                DatabaseTestContext.ALT_CATALOG,
                DatabaseTestContext.ALT_SCHEMA,
                TABLE_NAME,
                new ColumnConfig[]
                        {new ColumnConfig().setName(COLUMN_NAME)},
                CONSTRAINT_NAME
        );

        assertCorrect(""ALTER TABLE liquibasec.adduqtest ADD CONSTRAINT uq_test UNIQUE (coltomakeuq)"", MySQLDatabase
                .class);
        /*
         * In Informix, this test case is actually impossible. While it is allowed to cross-select data from
          * different databases (using the database:schema.table notation), it is not allowed to send DDL to a
          * different database (even if the database is on the same instance). So, even as the following
          * statement is semantically false, it is syntactically correct.
         */
        assertCorrect(""ALTER TABLE liquibasec:liquibaseb.adduqtest ADD CONSTRAINT UNIQUE (coltomakeuq) CONSTRAINT "" +
                ""uq_test"", InformixDatabase.class);

        assertCorrect(""alter table liquibasec.adduqtest add constraint uq_test unique (coltomakeuq)"", OracleDatabase.class);
        assertCorrect(""alter table liquibaseb.\""adduqtest\"" add constraint uq_test unique (\""coltomakeuq\"")"", PostgresDatabase.class);
        assertCorrect(""alter table liquibasec.adduqtest add constraint uq_test unique (coltomakeuq)"", DerbyDatabase
                .class);
        assertCorrect(""alter table [liquibaseb].[adduqtest] add constraint [uq_test] unique ([coltomakeuq])"",
                SybaseASADatabase.class, SybaseDatabase.class);
        assertCorrect(""alter table [liquibasec].[liquibaseb].[adduqtest] add constraint [uq_test] unique "" +
                ""([coltomakeuq])"", MSSQLDatabase.class);
        assertCorrect(""alter table [adduqtest] add constraint [uq_test] unique ([coltomakeuq])"", FirebirdDatabase.class);

        assertCorrect(""alter table [liquibaseb].[adduqtest] add constraint [uq_test] unique ([coltomakeuq])"", HsqlDatabase.class);
        assertCorrect(""alter table \""liquibasec\"".[adduqtest] add constraint [uq_test] unique ([coltomakeuq])"", DB2Database.class, Db2zDatabase.class);
        assertCorrect(""alter table [liquibaseb].[adduqtest] add constraint [uq_test] unique ([coltomakeuq])"", H2Database.class);
        assertCorrectOnRest(""alter table [liquibasec].[adduqtest] add constraint [uq_test] unique ([coltomakeuq])"");

    }
",non-flaky,5
95722,togglz_togglz,FeatureManagerBuilderTest.shouldAddStrategyIfUsingDefaultProvider,"    @Test
    public void shouldAddStrategyIfUsingDefaultProvider() {

        DefaultActivationStrategyProvider provider = new DefaultActivationStrategyProvider();

        FeatureManagerBuilder.begin()
            .featureEnum(Features.class)
            .activationStrategyProvider(provider)
            .activationStrategy(new CustomActivationStrategy())
            .build();

        assertThat(provider.getActivationStrategies())
            .extracting(""id"")
            .contains(CustomActivationStrategy.class.getSimpleName());

    }
",non-flaky,5
84606,apache_zookeeper,PrometheusMetricsProviderTest.testBasicSummary,"    @Test
    public void testBasicSummary() throws Exception {
        Summary summary = provider.getRootContext()
                .getSummary(""cc"", MetricsContext.DetailLevel.BASIC);
        summary.add(10);
        summary.add(10);
        int[] count = {0};
        provider.dump((k, v) -> {
            count[0]++;
            int value = ((Number) v).intValue();

            switch (k) {
                case ""cc{quantile=\""0.5\""}"":
                    assertEquals(10, value);
                    break;
                case ""cc_count"":
                    assertEquals(2, value);
                    break;
                case ""cc_sum"":
                    assertEquals(20, value);
                    break;
                default:
                    fail(""unespected key "" + k);
                    break;
            }
        }
        );
        assertEquals(3, count[0]);
        count[0] = 0;

        // we always must get the same object
        assertSame(summary, provider.getRootContext()
                .getSummary(""cc"", MetricsContext.DetailLevel.BASIC));

        try {
            provider.getRootContext()
                    .getSummary(""cc"", MetricsContext.DetailLevel.ADVANCED);
            fail(""Can't get the same summary with a different DetailLevel"");
        } catch (IllegalArgumentException err) {
            assertThat(err.getMessage(), containsString(""Already registered""));
        }

        String res = callServlet();
        assertThat(res, containsString(""# TYPE cc summary""));
        assertThat(res, CoreMatchers.containsString(""cc_sum 20.0""));
        assertThat(res, CoreMatchers.containsString(""cc_count 2.0""));
        assertThat(res, CoreMatchers.containsString(""cc{quantile=\""0.5\"",} 10.0""));
    }
",non-flaky,5
176776,ctco_cukes,SingletonObjectFactoryTests.shouldThrowExceptionWhenAlreadyUsed,"    @Test(expected = IllegalStateException.class)
    public void shouldThrowExceptionWhenAlreadyUsed() throws Exception {
        // simulate cucumber scenario start
        simulateCucumberScenarioStart();

        instance.addModule(binder -> {
        });
    }
",non-flaky,5
76713,quarkusio_quarkus,CoreSerializationInGraalITCase.testEntitySerializationFromServlet,"    @Test
    public void testEntitySerializationFromServlet() throws Exception {
        RestAssured.when().get(""/core/serialization"").then()
                .body(is(""OK""));
    }
",non-flaky,5
104642,apache_pinot,OfflineClusterIntegrationTest.testBrokerResponseMetadata,"  @Test
  public void testBrokerResponseMetadata()
      throws Exception {
    super.testBrokerResponseMetadata();
  }
",non-flaky,5
53222,cloudfoundry_uaa,SamlLoginIT.testContentTypes,"    @Test
    public void testContentTypes() {
        String loginUrl = baseUrl + ""/login"";
        HttpHeaders jsonHeaders = new HttpHeaders();
        jsonHeaders.add(""Accept"", ""application/json"");
        ResponseEntity<Map> jsonResponseEntity = restOperations.exchange(loginUrl,
            HttpMethod.GET,
            new HttpEntity<>(jsonHeaders),
            Map.class);
        assertThat(jsonResponseEntity.getHeaders().get(""Content-Type"").get(0), containsString(APPLICATION_JSON_VALUE));

        HttpHeaders htmlHeaders = new HttpHeaders();
        htmlHeaders.add(""Accept"", ""text/html"");
        ResponseEntity<Void> htmlResponseEntity = restOperations.exchange(loginUrl,
            HttpMethod.GET,
            new HttpEntity<>(htmlHeaders),
            Void.class);
        assertThat(htmlResponseEntity.getHeaders().get(""Content-Type"").get(0), containsString(TEXT_HTML_VALUE));

        HttpHeaders defaultHeaders = new HttpHeaders();
        defaultHeaders.add(""Accept"", ""*/*"");
        ResponseEntity<Void> defaultResponseEntity = restOperations.exchange(loginUrl,
            HttpMethod.GET,
            new HttpEntity<>(defaultHeaders),
            Void.class);
        assertThat(defaultResponseEntity.getHeaders().get(""Content-Type"").get(0), containsString(TEXT_HTML_VALUE));
    }
",non-flaky,5
176809,ctco_cukes,HttpAssertionFacadeImplTest.shouldNotReturnBodyWhenEnabledButContentTypeOctet,"    @Test
    public void shouldNotReturnBodyWhenEnabledButContentTypeOctet() {
        byte[] body = RandomUtils.nextBytes(20);

        HttpResponseFacade mock = mock(HttpResponseFacade.class);
        when(mock.response()).thenReturn(generateResponse(
            ""application/octet-stream"",
            404,
            body));

        ((HttpAssertionFacadeImpl) facade).facade = mock;
        world.put(ASSERTS_STATUS_CODE_DISPLAY_BODY, ""true"");
        world.put(ASSERTS_STATUS_CODE_MAX_SIZE, ""5000"");

        validateException(
            200,
            ""1 expectation failed.\n"" +
                ""Expected status code \""200\"" but was \""404\"" with body <binary>.\n"");
    }
",non-flaky,5
176801,ctco_cukes,ContextCapturerTest.shouldNotInvokeCaptureValuesFromPatternIfRegexDoesNotMatchValue,"    @Test
    public void shouldNotInvokeCaptureValuesFromPatternIfRegexDoesNotMatchValue() throws Exception {
        capturer.capture(""{(hello)} Riga"", ""hello world"");
        verify(capturer, never()).captureValuesFromPattern(anyString(), anyListOf(String.class), anyString());
    }
",non-flaky,5
76942,Tencent_Firestorm,ShuffleReadClientImplTest.readTest2,"  @Test
  public void readTest2() throws Exception {
    String basePath = HDFS_URI + ""clientReadTest2"";
    HdfsShuffleWriteHandler writeHandler1 =
        new HdfsShuffleWriteHandler(""appId"", 0, 0, 1, basePath, ""test2_1"", conf);
    HdfsShuffleWriteHandler writeHandler2 =
        new HdfsShuffleWriteHandler(""appId"", 0, 0, 1, basePath, ""test2_2"", conf);

    Map<Long, byte[]> expectedData = Maps.newHashMap();
    Roaring64NavigableMap blockIdBitmap = Roaring64NavigableMap.bitmapOf();
    Roaring64NavigableMap taskIdBitmap = Roaring64NavigableMap.bitmapOf(0);
    writeTestData(writeHandler1, 2, 30, 0, expectedData, blockIdBitmap);
    writeTestData(writeHandler2, 2, 30, 0, expectedData, blockIdBitmap);

    ShuffleReadClientImpl readClient = new ShuffleReadClientImpl(StorageType.HDFS.name(),
        ""appId"", 0, 1, 100, 2, 10, 1000,
        basePath, blockIdBitmap, taskIdBitmap, Lists.newArrayList(), new Configuration());

    TestUtils.validateResult(readClient, expectedData);
    readClient.checkProcessedBlockIds();
    readClient.close();
  }
",non-flaky,5
38210,palantir_atlasdb,RocksDbKeyValueServiceTest.testGetRangeCellOverlap,"    @Test
    public void testGetRangeCellOverlap() {
        final Cell cell = Cell.create(""12"".getBytes(), ""34"".getBytes());
        final Cell cell2 = Cell.create(""1"".getBytes(), ""235"".getBytes());
        db.put(TABLE, ImmutableMap.of(cell, ""v1"".getBytes()), 2);
        db.put(TABLE, ImmutableMap.of(cell2, ""v2"".getBytes()), 2);
        ClosableIterator<? extends RowResult<Value>> it = db.getRange(TABLE, RangeRequest.builder().build(), 3);
        try {
            assertEquals(2, Iterators.size(it));
        } finally {
            it.close();
        }
        it = db.getRange(TABLE, RangeRequest.builder().endRowExclusive(""12"".getBytes()).build(), 3);
        try {
            assertEquals(1, Iterators.size(it));
        } finally {
            it.close();
        }
        it = db.getRange(TABLE, RangeRequest.builder().startRowInclusive(""12"".getBytes()).build(), 3);
        try {
            assertEquals(1, Iterators.size(it));
        } finally {
            it.close();
        }
    }
",non-flaky,5
133975,CorfuDB_CorfuDB,LogUnitHandlerTest.testResetLogUnit,"    @Test
    public void testResetLogUnit() {
        ResponseMsg response = getResponseMsg(
                getBasicHeader(ClusterIdCheck.CHECK, EpochCheck.CHECK),
                getResetLogUnitResponseMsg()
        );

        logUnitHandler.handleMessage(response, mockChannelHandlerContext);
        // Verify that the correct request was completed (once) with the appropriate value,
        // and that we did not complete exceptionally.
        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));
        verify(mockClientRouter).completeRequest(response.getHeader().getRequestId(), true);
    }
",non-flaky,5
78313,apache_beam,SimpleDoFnRunnerTest.testBackwardsInTimeNoSkew,"  @Test
  public void testBackwardsInTimeNoSkew() {
    SkewingDoFn fn = new SkewingDoFn(Duration.ZERO);
    DoFnRunner<Duration, Duration> runner =
        new SimpleDoFnRunner<>(
            null,
            fn,
            NullSideInputReader.empty(),
            new ListOutputManager(),
            new TupleTag<>(),
            Collections.emptyList(),
            mockStepContext,
            null,
            Collections.emptyMap(),
            WindowingStrategy.of(new GlobalWindows()));

    runner.startBundle();
    // An element output at the current timestamp is fine.
    runner.processElement(
        WindowedValue.timestampedValueInGlobalWindow(Duration.ZERO, new Instant(0)));
    thrown.expect(UserCodeException.class);
    thrown.expectCause(isA(IllegalArgumentException.class));
    thrown.expectMessage(""must be no earlier"");
    thrown.expectMessage(
        String.format(""timestamp of the current input (%s)"", new Instant(0).toString()));
    thrown.expectMessage(
        String.format(
            ""the allowed skew (%s)"", PeriodFormat.getDefault().print(Duration.ZERO.toPeriod())));
    // An element output before (current time - skew) is forbidden
    runner.processElement(
        WindowedValue.timestampedValueInGlobalWindow(Duration.millis(1L), new Instant(0)));
  }
",non-flaky,5
20918,NationalSecurityAgency_timely,MetricHistogramTest.test90thPercentile,"    @Test
    public void test90thPercentile() throws Exception {
        Assert.assertEquals(90.0D, m.getPercentile(90), 0.0D);
    }
",non-flaky,5
106665,Alluxio_alluxio,BaseFileSystemTest.createFile,"  @Test
  public void createFile() throws Exception {
    URIStatus status = new URIStatus(new FileInfo());
    AlluxioURI file = new AlluxioURI(""/file"");
    when(mFileSystemMasterClient.createFile(any(AlluxioURI.class), any(CreateFilePOptions.class)))
        .thenReturn(status);
    mFileSystem.createFile(file, CreateFilePOptions.getDefaultInstance());
    verify(mFileSystemMasterClient).createFile(file, FileSystemOptions.createFileDefaults(mConf)
            .toBuilder().mergeFrom(CreateFilePOptions.getDefaultInstance()).build());

    verifyFilesystemContextAcquiredAndReleased();
  }
",non-flaky,5
160363,ConsenSys_teku,SlashingProtectionImporterTest.shouldFailWithInvalidJson,"  @Test
  public void shouldFailWithInvalidJson(@TempDir final Path tempDir)
      throws URISyntaxException, IOException {
    final String errorString = loadAndGetErrorText(""invalid_json.json"", tempDir);
    assertThat(errorString).startsWith(""Json does not appear valid"");
  }
",non-flaky,5
97991,ReactiveX_RxJava,ObserveOnTests.call,"    @Test
    public void testObserveOnWithThreadPoolScheduler() {
        final AtomicInteger count = new AtomicInteger();
        final int _multiple = 99;

        Observable.range(1, 100000).map(new Func1<Integer, Integer>() {

            @Override
            public Integer call(Integer t1) {
                return t1 * _multiple;
            }
",non-flaky,5
84629,apache_zookeeper,ZKClientConfigTest.testSystemPropertyValue,"    @Test
    public void testSystemPropertyValue() {
        String clientName = ""zookeeper1"";
        System.setProperty(ZK_SASL_CLIENT_USERNAME, clientName);

        ZKClientConfig conf = new ZKClientConfig();
        assertEquals(conf.getProperty(ZK_SASL_CLIENT_USERNAME), clientName);

        String newClientName = ""zookeeper2"";
        conf.setProperty(ZK_SASL_CLIENT_USERNAME, newClientName);

        assertEquals(conf.getProperty(ZK_SASL_CLIENT_USERNAME), newClientName);
    }
",non-flaky,5
77643,pholser_junit-quickcheck,Primitive3DArrayPropertyParameterTypesTest.shouldHold,"    @Test public void wrapperByteArray() {
        @Property(trials = 2) public void shouldHold(Byte[][][] b) {
        }
",non-flaky,5
32,apache_druid,ResponseContextTest.serializeWithTruncateArrayTest,"@Test
public void serializeWithTruncateArrayTest() throws IOException {
    final ResponseContext ctx = ResponseContext.createEmpty();
    ctx.put(UNCOVERED_INTERVALS, Arrays.asList(interval(1), interval(2), interval(3), interval(4), interval(5), interval(6)));
    ctx.put(EXTN_STRING_KEY, Strings.repeat(""x"", INTERVAL_LEN * 7));
    final DefaultObjectMapper objectMapper = new DefaultObjectMapper();
    final String fullString = objectMapper.writeValueAsString(ctx.getDelegate());
    final ResponseContext.SerializationResult res1 = ctx.serializeWith(objectMapper, Integer.MAX_VALUE);
    Assert.assertEquals(fullString, res1.getResult());
    final int maxLen = ((((INTERVAL_LEN * 4) + UNCOVERED_INTERVALS.getName().length()) + 4) + TRUNCATED.getName().length()) + 6;
    final ResponseContext.SerializationResult res2 = ctx.serializeWith(objectMapper, maxLen);
    final ResponseContext ctxCopy = ResponseContext.createEmpty();
    ctxCopy.put(UNCOVERED_INTERVALS, Arrays.asList(interval(1), interval(2), interval(3)));
    ctxCopy.put(TRUNCATED, true);
    Assert.assertEquals(ctxCopy.getDelegate(), deserializeContext(res2.getResult(), objectMapper));
}",unordered collections,3
86089,graylog2_graylog2-server,EventDefinitionHandlerTest.scheduleWithMissingEventDefinition,"    @Test
    public void scheduleWithMissingEventDefinition() {
        final String id = ""54e3deadbeefdeadbeef9999"";

        // The event definition should not exist so our test works
        assertThat(eventDefinitionService.get(id)).isNotPresent();

        assertThatThrownBy(() -> handler.schedule(id))
                .hasMessageContaining(""doesn't exist"")
                .isInstanceOf(IllegalArgumentException.class);
    }
",non-flaky,5
38206,palantir_atlasdb,RocksDbKeyValueServiceTest.testGetRow,"    @Test
    public void testGetRow() {
        final Cell cell = Cell.create(""r1"".getBytes(), ""c1"".getBytes());
        final Cell cell2 = Cell.create(""r1"".getBytes(), ""c2"".getBytes());
        db.put(TABLE, ImmutableMap.of(cell, ""v1"".getBytes()), 2);
        db.put(TABLE, ImmutableMap.of(cell2, ""v2"".getBytes()), 2);
        final Map<Cell, Value> rows = db.getRows(TABLE, ImmutableList.of(""r1"".getBytes()), ColumnSelection.all(), 3);
        assertEquals(2, rows.size());
    }
",non-flaky,5
156156,soot-oss_soot,TypeBasedReflectionModelTest.staticBase,"    @Test
    public void staticBase() {
        //TODO
    }
",non-flaky,5
122544,vespa-engine_vespa,SystemCtlTest.startIsNoop,"    @Test
    public void startIsNoop() {
        terminal.expectCommand(
                        ""systemctl show docker 2>&1"",
                        0,
                        ""a=b\n"" +
                                ""ActiveState=active\n"" +
                                ""bar=zoo\n"")
                .expectCommand(""systemctl start docker 2>&1"", 0, """");

        SystemCtl.SystemCtlStart startDockerService = new SystemCtl(terminal).start(""docker"");
        assertFalse(startDockerService.converge(taskContext));
    }
",non-flaky,5
59616,looly_hutool,EnableSprintUtilTest.test,"    @Test
    public void test() {
        // ä½¿ç¨@EnableSpringUtilæ³¨è§£å, è½è·åä¸ä¸æ
        Assert.assertNotNull(SpringUtil.getApplicationContext());
        // ä¸ä½¿ç¨æ¶, ä¸ºnull
//        Assert.assertNull(SpringUtil.getApplicationContext());
    }
",non-flaky,5
91493,strapdata_elassandra,CancelTests.clearAllowedOperations,"@TestLogging(""org.elasticsearch.index.reindex:DEBUG,org.elasticsearch.action.bulk:DEBUG"")
    public void clearAllowedOperations() {
        ALLOWED_OPERATIONS.drainPermits();
    }
",non-flaky,5
98354,Kong_unirest-java,AsObjectTest.writeValue,"    @Test
        public String writeValue(Object value) {
            writeWasCalled = true;
            return new Gson().toJson(value);
        }
",non-flaky,5
162683,OpenAPITools_openapi-generator,UserApiTest.getUserByNameTest,"    @Test
    public void getUserByNameTest() {
        String username = null;
        //User response = api.getUserByName(username);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
",non-flaky,5
194,netty_netty,testAutomaticStartStop,"@Test
public void testAutomaticStartStop() throws Exception {
    final TestRunnable task = new TestRunnable(500);
    e.execute(task);
    Thread thread = e.thread;
    assertThat(thread, is(not(nullValue())));
    assertThat(thread.isAlive(), is(true));
    Thread.sleep(1500);
    assertThat(thread.isAlive(), is(false));
    assertThat(task.ran.get(), is(true));
    task.ran.set(false);
    e.execute(task);
    assertThat(e.thread, not(sameInstance(thread)));
    thread = e.thread;
    Thread.sleep(1500);
    assertThat(thread.isAlive(), is(false));
    assertThat(task.ran.get(), is(true));
}",async wait,0
33699,alibaba_fastjson,JSONScannerTest.checkTime5,"  @Test
  public void checkTime5() throws Throwable {

    // Arrange
    JSONScanner objectUnderTest = ((JSONScanner)Reflector.getInstance(""com.alibaba.fastjson.parser.JSONScanner""));
    objectUnderTest.hasSpecial = false;
    objectUnderTest.token = 0;
    objectUnderTest.locale = null;
    objectUnderTest.np = 0;
    objectUnderTest.features = 0;
    Reflector.setField(objectUnderTest, ""text"", """");
    objectUnderTest.calendar = null;
    objectUnderTest.matchStat = 0;
    objectUnderTest.bp = 0;
    Reflector.setField(objectUnderTest, ""len"", 0);
    objectUnderTest.stringDefaultValue = """";
    objectUnderTest.pos = 0;
    objectUnderTest.sp = 0;
    objectUnderTest.sbuf = null;
    objectUnderTest.ch = '\u0000';
    objectUnderTest.timeZone = null;
    objectUnderTest.eofPos = 0;
    char h0 = '2';
    char h1 = '5';
    char m0 = '\u0000';
    char m1 = '\u0000';
    char s0 = '\u0000';
    char s1 = '\u0000';

    // Act
    Class<?> c = Reflector.forName(""com.alibaba.fastjson.parser.JSONScanner"");
    Method m = c.getDeclaredMethod(""checkTime"", Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""), Reflector.forName(""char""));
    m.setAccessible(true);
    boolean retval = (Boolean)m.invoke(objectUnderTest, h0, h1, m0, m1, s0, s1);

    // Assert result
    Assert.assertEquals(false, retval);

  }
",non-flaky,5
137137,spring-projects_spring-framework,AnnotationMetadataReadingVisitorTests.verifyHashCode,"	@Test
	public void verifyHashCode() throws Exception {
	}
",non-flaky,5
78324,apache_beam,ReduceFnRunnerTest.testLateProcessingTimeTimer,"  @Test
  public void testLateProcessingTimeTimer() throws Exception {
    WindowingStrategy<?, IntervalWindow> strategy =
        WindowingStrategy.of((WindowFn<?, IntervalWindow>) FixedWindows.of(Duration.millis(100)))
            .withTimestampCombiner(TimestampCombiner.EARLIEST)
            .withMode(AccumulationMode.ACCUMULATING_FIRED_PANES)
            .withAllowedLateness(Duration.ZERO)
            .withTrigger(
                Repeatedly.forever(
                    AfterProcessingTime.pastFirstElementInPane().plusDelayOf(Duration.millis(10))));

    ReduceFnTester<Integer, Integer, IntervalWindow> tester =
        ReduceFnTester.combining(strategy, Sum.ofIntegers(), VarIntCoder.of());

    tester.advanceProcessingTime(new Instant(5000));
    injectElement(tester, 2); // processing timer @ 5000 + 10; EOW timer @ 100
    injectElement(tester, 5);

    // After this advancement, the window is expired and only the GC process
    // should be allowed to touch it
    tester.advanceInputWatermarkNoTimers(new Instant(100));

    // This should not output
    tester.advanceProcessingTime(new Instant(6000));

    assertThat(tester.extractOutput(), emptyIterable());
  }
",non-flaky,5
61,graylog2_graylog2-server,indexCreationDateReturnsIndexCreationDateOfExistingIndexAsDateTime,"@Test
public void indexCreationDateReturnsIndexCreationDateOfExistingIndexAsDateTime() {
    final DateTime now = DateTime.now(DateTimeZone.UTC);
    final String indexName = client().createRandomIndex(""indices_it_"");
    final Optional<DateTime> indexCreationDate = indices.indexCreationDate(indexName);
    assertThat(indexCreationDate).isNotEmpty()
    .hasValueSatisfying(date -> Assertions.assertThat(date).isEqualToIgnoringMillis(now));
}",time,2
19462,eclipse_xtext-core,DelegatingScopeProviderTest.testNoSuitableDelegate,"	@Test
	public void testNoSuitableDelegate() {
		TestableDelegatingScopeProvider testMe = new TestableDelegatingScopeProvider();
		testMe.setWrapper(this);
		Assert.assertEquals(1, testMe.invocationCount);
		
		IDelegatingScopeProvider.setWrapper(testMe, null);
		Assert.assertEquals(2, testMe.invocationCount);
	}
",non-flaky,5
135719,Netflix_Hystrix,CommonHystrixCommandTests.call,"    @Test
    public void testExecutionHookSemaphoreBadRequestException() {
        assertHooksOnFailure(
                new Func0<C>() {
                    @Override
                    public C call() {
                        return getCommand(ExecutionIsolationStrategy.SEMAPHORE, ExecutionResult.BAD_REQUEST, FallbackResult.SUCCESS);
                    }
",non-flaky,5
43097,trinodb_trino,AbstractTestIntegrationSmokeTest.testJoin,"    @Test
    public void testJoin()
    {
        Session session = Session.builder(getSession())
                .setSystemProperty(IGNORE_STATS_CALCULATOR_FAILURES, ""false"")
                .build();

        // 2 inner joins, eligible for join reodering
        assertQuery(
                session,
                ""SELECT c.name, n.name, r.name "" +
                        ""FROM nation n "" +
                        ""JOIN customer c ON c.nationkey = n.nationkey "" +
                        ""JOIN region r ON n.regionkey = r.regionkey"");

        // 2 inner joins, eligible for join reodering, where one table has a filter
        assertQuery(
                session,
                ""SELECT c.name, n.name, r.name "" +
                        ""FROM nation n "" +
                        ""JOIN customer c ON c.nationkey = n.nationkey "" +
                        ""JOIN region r ON n.regionkey = r.regionkey "" +
                        ""WHERE n.name = 'ARGENTINA'"");

        // 2 inner joins, eligible for join reodering, on top of aggregation
        assertQuery(
                session,
                ""SELECT c.name, n.name, n.count, r.name "" +
                        ""FROM (SELECT name, regionkey, nationkey, count(*) count FROM nation GROUP BY name, regionkey, nationkey) n "" +
                        ""JOIN customer c ON c.nationkey = n.nationkey "" +
                        ""JOIN region r ON n.regionkey = r.regionkey"");
    }
",non-flaky,5
99762,apache_cassandra,RateBasedBackPressureTest.testHighRatioMustBeBiggerThanZero,"    @Test(expected = IllegalArgumentException.class)
    public void testHighRatioMustBeBiggerThanZero() throws Exception
    {
        new RateBasedBackPressure(ImmutableMap.of(HIGH_RATIO, ""0"", FACTOR, ""2"", FLOW, ""FAST""), new TestTimeSource(), 10);
    }
",non-flaky,5
91457,strapdata_elassandra,RelocationIT.testRelocationWhileIndexingRandom,"    @TestLogging(""org.elasticsearch.action.bulk:TRACE,org.elasticsearch.action.search:TRACE"")
    public void testRelocationWhileIndexingRandom() throws Exception {
        int numberOfRelocations = scaledRandomIntBetween(1, rarely() ? 10 : 4);
        int numberOfReplicas = randomBoolean() ? 0 : 1;
        int numberOfNodes = numberOfReplicas == 0 ? 2 : 3;

        logger.info(""testRelocationWhileIndexingRandom(numRelocations={}, numberOfReplicas={}, numberOfNodes={})"", numberOfRelocations, numberOfReplicas, numberOfNodes);

        String[] nodes = new String[numberOfNodes];
        logger.info(""--> starting [node1] ..."");
        nodes[0] = internalCluster().startNode();

        logger.info(""--> creating test index ..."");
        prepareCreate(""test"", Settings.builder()
            .put(""index.number_of_shards"", 1)
            .put(""index.number_of_replicas"", numberOfReplicas)
        ).get();


        for (int i = 2; i <= numberOfNodes; i++) {
            logger.info(""--> starting [node{}] ..."", i);
            nodes[i - 1] = internalCluster().startNode();
            if (i != numberOfNodes) {
                ClusterHealthResponse healthResponse = client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID)
                        .setWaitForNodes(Integer.toString(i)).setWaitForGreenStatus().execute().actionGet();
                assertThat(healthResponse.isTimedOut(), equalTo(false));
            }
        }

        int numDocs = scaledRandomIntBetween(200, 2500);
        try (BackgroundIndexer indexer = new BackgroundIndexer(""test"", ""type1"", client(), numDocs)) {
            logger.info(""--> waiting for {} docs to be indexed ..."", numDocs);
            waitForDocs(numDocs, indexer);
            logger.info(""--> {} docs indexed"", numDocs);

            logger.info(""--> starting relocations..."");
            int nodeShiftBased = numberOfReplicas; // if we have replicas shift those
            for (int i = 0; i < numberOfRelocations; i++) {
                int fromNode = (i % 2);
                int toNode = fromNode == 0 ? 1 : 0;
                fromNode += nodeShiftBased;
                toNode += nodeShiftBased;
                numDocs = scaledRandomIntBetween(200, 1000);
                logger.debug(""--> Allow indexer to index [{}] documents"", numDocs);
                indexer.continueIndexing(numDocs);
                logger.info(""--> START relocate the shard from {} to {}"", nodes[fromNode], nodes[toNode]);
                client().admin().cluster().prepareReroute()
                        .add(new MoveAllocationCommand(""test"", 0, nodes[fromNode], nodes[toNode]))
                        .get();
                if (rarely()) {
                    logger.debug(""--> flushing"");
                    client().admin().indices().prepareFlush().get();
                }
                ClusterHealthResponse clusterHealthResponse = client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForNoRelocatingShards(true).setTimeout(ACCEPTABLE_RELOCATION_TIME).execute().actionGet();
                assertThat(clusterHealthResponse.isTimedOut(), equalTo(false));
                indexer.pauseIndexing();
                logger.info(""--> DONE relocate the shard from {} to {}"", fromNode, toNode);
            }
            logger.info(""--> done relocations"");
            logger.info(""--> waiting for indexing threads to stop ..."");
            indexer.stop();
            logger.info(""--> indexing threads stopped"");

            logger.info(""--> refreshing the index"");
            client().admin().indices().prepareRefresh(""test"").execute().actionGet();
            logger.info(""--> searching the index"");
            boolean ranOnce = false;
            for (int i = 0; i < 10; i++) {
                    logger.info(""--> START search test round {}"", i + 1);
                    SearchHits hits = client().prepareSearch(""test"").setQuery(matchAllQuery()).setSize((int) indexer.totalIndexedDocs()).storedFields().execute().actionGet().getHits();
                    ranOnce = true;
                    if (hits.getTotalHits() != indexer.totalIndexedDocs()) {
                        int[] hitIds = new int[(int) indexer.totalIndexedDocs()];
                        for (int hit = 0; hit < indexer.totalIndexedDocs(); hit++) {
                            hitIds[hit] = hit + 1;
                        }
                        IntHashSet set = IntHashSet.from(hitIds);
                        for (SearchHit hit : hits.getHits()) {
                            int id = Integer.parseInt(hit.getId());
                            if (!set.remove(id)) {
                                logger.error(""Extra id [{}]"", id);
                            }
                        }
                        set.forEach((IntProcedure) value -> {
                            logger.error(""Missing id [{}]"", value);
                        });
                    }
                    assertThat(hits.getTotalHits(), equalTo(indexer.totalIndexedDocs()));
                    logger.info(""--> DONE search test round {}"", i + 1);

            }
            if (!ranOnce) {
                fail();
            }
        }
    }
",non-flaky,5
162754,OpenAPITools_openapi-generator,FileSchemaTestClassTest.testFileSchemaTestClass,"    @Test
    public void testFileSchemaTestClass() {
        // TODO: test FileSchemaTestClass
    }
",non-flaky,5
21246,androidx_androidx,PreferencePersistTest.int_persistTwiceAndRetrieve_returnsSecondValue,"    @Test
    public void int_persistTwiceAndRetrieve_returnsSecondValue() {
        final int expected = 2;

        mPreference.putInt(1);
        mPreference.putInt(expected);
        int result = mPreference.getInt(-1);

        assertEquals(expected, result);
    }
",non-flaky,5
98025,vert-x3_vertx-mongo-client,UpdateOptionsTest.testToJson,"  @Test
  public void testToJson() {
    UpdateOptions options = new UpdateOptions();
    WriteOption writeOption = MAJORITY;
    boolean multi = TestUtils.randomBoolean();
    boolean upsert = TestUtils.randomBoolean();
    JsonArray arrayFilters = new JsonArray().add(new JsonObject().put(TestUtils.randomAlphaString(5), TestUtils.randomAlphaString(5)));

    options.setWriteOption(writeOption);
    options.setMulti(multi);
    options.setUpsert(upsert);
    options.setArrayFilters(arrayFilters);

    assertEquals(options, new UpdateOptions(options.toJson()));
  }
",non-flaky,5
99704,apache_cassandra,DistributionSequenceTest.bigSequence,"    @Test
    public void bigSequence() throws Exception
    {
        Distribution dist = OptionDistribution.get(String.format(""seq(1..%d)"", Long.MAX_VALUE)).get();
        assertTrue(dist instanceof DistributionSequence);

        assertEquals(1, dist.minValue());
        assertEquals(Long.MAX_VALUE, dist.maxValue());

        assertEquals(1, dist.inverseCumProb(0d));
        assertEquals(Long.MAX_VALUE, dist.inverseCumProb(1d));

    }
",non-flaky,5
122614,vespa-engine_vespa,UnixPathTest.atomicWrite,"    @Test
    public void atomicWrite() {
        var path = new UnixPath(fs.getPath(""/dir/foo""));
        path.createParents();
        path.writeUtf8File(""bar"");
        path.atomicWriteUt8(""bar v2"");
        assertEquals(""bar v2"", path.readUtf8File());
    }
",non-flaky,5
110139,Wikidata_wikidata-toolkit,ClientConfigurationTest.testQuietArgumentsShort,"	@Test
	public void testQuietArgumentsShort() {
		String[] args = new String[] { ""-q"" };
		ClientConfiguration config = new ClientConfiguration(args);
		assertTrue(config.isQuiet());
	}
",non-flaky,5
